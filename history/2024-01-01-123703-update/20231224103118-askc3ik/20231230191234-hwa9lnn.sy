{"ID":"20231230191234-hwa9lnn","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231230191234-hwa9lnn","title":"Iterator Pattern","updated":"20240101123701"},"Children":[{"ID":"20231230191234-cy7f6ht","Type":"NodeParagraph","Properties":{"id":"20231230191234-cy7f6ht","updated":"20231230191908"},"Children":[{"Type":"NodeText","Data":"有许多种方法可以把对象堆起来成为一个集合（collection）。你可以把它们放进数组、堆栈、列表或者是散列表（Hashtable）中，这是你的自由。每一种都有它自己的优点和适合的使用时机，但总有一个时候，你的客户想要遍历这些对象，而当他这么做时，你打算让客户看到你的实现吗？我们当然希望最好不要！这太不专业了。本章的迭代器模式将能让"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"客户遍历你的对象而又无法窥视你存储对象的方式"},{"Type":"NodeText","Data":"。\n"}]},{"ID":"20231230191908-8v06wta","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231230191908-8v06wta","updated":"20231230193559"},"Children":[{"Type":"NodeText","Data":"案例：披萨店和煎饼店"}]},{"ID":"20231230193848-iirrikn","Type":"NodeParagraph","Properties":{"id":"20231230193848-iirrikn","updated":"20231230193848"},"Children":[{"Type":"NodeText","Data":"有两家餐厅，披萨店和煎饼店，它们合并了，虽然可以在一个地方同时想用煎饼屋的早餐和餐厅的午餐，但是煎饼屋的菜单用用的ArrayList记录菜单的，而餐厅用的是数组，而两家餐馆都不愿意修改自己的实现。毕竟有很多代码依赖它们。"}]},{"ID":"20231230193600-z8wsejx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231230193600-z8wsejx","updated":"20231230193853"},"Children":[{"Type":"NodeText","Data":"原先设计"}]},{"ID":"20231230193744-kxo3mgq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231230193744-kxo3mgq","updated":"20231230194040"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"//菜单类\npublic class MenuItem {\n    private String name;\n    private String description;\n    private boolean vegetarian;\n    private double price;\n...\n }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231230193811-pdaaoqz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231230193811-pdaaoqz","updated":"20231230194046"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"//煎饼类\npublic class PancakeHouseMenu {\n    ArrayList\u003cMenuItem\u003e menuItems;\n...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231230193844-1ydw0xs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231230193844-1ydw0xs","updated":"20231230194114"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"//披萨类\npublic class PizzaHouseMenu {\n    static final int MAX_ITEMS = 2;\n    int numberOfItems = 0;\n    MenuItem[] menuItems;\n }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231230194924-qovkf6z","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231230194924-qovkf6z","updated":"20231230194942"},"Children":[{"Type":"NodeText","Data":"优化策略：迭代器模式"}]},{"ID":"20231230194942-v7b3kv4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231230194942-v7b3kv4","updated":"20240101123701"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"\npackage com.company.iterator;\n\n/**\n * Author:xie-super\n * Time:2023/12/30\n * Name:IntelliJ IDEA\n */\n\n\nclass MenuItem {\n    private String name;\n    private String description;\n    private boolean vegetarian;\n    private double price;\n\n    public MenuItem(String name, String description, boolean vegetarian, double price) {\n        this.name = name;\n        this.description = description;\n        this.vegetarian = vegetarian;\n        this.price = price;\n    }\n    @Override\n    public String toString() {\n        return \"MenuItem{\" +\n                \"name='\" + name + '\\'' +\n                \", description='\" + description + '\\'' +\n                \", vegetarian=\" + vegetarian +\n                \", price=\" + price +\n                '}';\n    }\n}\n\ninterface Iterator {\n    boolean hasNext();\n\n    Object next();\n}\n\nclass PizzaIterator implements Iterator {\n    MenuItem[] menuItems;\n    int position = 0;\n    public PizzaIterator(MenuItem[] menuItems) {\n        this.menuItems = menuItems;\n    }\n\n    @Override\n    public boolean hasNext() {\n        if (position \u003e= menuItems.length || menuItems[position] == null) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public Object next() {\n        return menuItems[position++];\n    }\n}\n\nclass PizzaHouseMenu {\n    MenuItem[] menuItems;\n    int MAX_ITEMS = 2;\n    int numberOfItems = 0;\n    public PizzaHouseMenu() {\n        menuItems = new MenuItem[MAX_ITEMS];\n        addItem(\"披萨1号\", \"素食披萨\", true, 4.99);\n        addItem(\"披萨2号\", \"海鲜蛤蜊披萨\", true, 5.99);\n        numberOfItems = 2;\n    }\n    public void addItem(String name, String description, boolean vegetarian, double price) {\n        MenuItem menu = new MenuItem(name, description, vegetarian, price);\n        if (numberOfItems \u003e= MAX_ITEMS)\n            System.out.println(\"对不起，菜单数量已满\");\n        else\n            menuItems[numberOfItems++] = menu;\n    }\n    public Iterator createIterator() {\n        return new PizzaIterator(menuItems);\n    }\n}\n\npublic class IteratorPattern{\n    public static void main(String[] args) {\n        //具体聚合类\n        PizzaHouseMenu picker = new PizzaHouseMenu();\n\n        //迭代器接口\n        Iterator it = picker.createIterator();\n        while(it.hasNext()){\n            MenuItem menuItem = (MenuItem) it.next();\n            System.out.println(menuItem.toString());\n        }\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240101121521-9css4vw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240101121521-9css4vw","updated":"20240101122128"},"Children":[{"Type":"NodeText","Data":"定义"}]},{"ID":"20240101122128-cdpyqht","Type":"NodeParagraph","Properties":{"id":"20240101122128-cdpyqht","updated":"20240101122129"},"Children":[{"Type":"NodeText","Data":"迭代器模式是一种行为设计模式，它提供一种顺序访问聚合对象中各个元素，而不暴露该对象的内部表示。迭代器模式让你能够在不暴露集合底层结构（如列表、栈或树等）的情况下，按顺序访问集合中的元素。"}]},{"ID":"20240101122141-66eqxqr","Type":"NodeParagraph","Properties":{"id":"20240101122141-66eqxqr","updated":"20240101122707"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 50%;","style":"width: 10000px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240101122141-dx2wobu.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 10000px;\" parent-style=\"width: 50%;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240101122337-8er1fds","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240101122337-8er1fds","updated":"20240101122337"},"Children":[{"ID":"20240101122337-sqeanpj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240101122337-sqeanpj","updated":"20240101122337"},"Children":[{"ID":"20240101122337-5ks1y2d","Type":"NodeParagraph","Properties":{"id":"20240101122337-5ks1y2d","updated":"20240101122337"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"迭代器接口（Iterator Interface）："},{"Type":"NodeText","Data":" 定义了遍历元素的方法，包括获取下一个元素、判断是否还有元素等。"}]}]},{"ID":"20240101122337-szsnksj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240101122337-szsnksj","updated":"20240101122337"},"Children":[{"ID":"20240101122337-zf87160","Type":"NodeParagraph","Properties":{"id":"20240101122337-zf87160","updated":"20240101122337"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"具体迭代器（Concrete Iterator）："},{"Type":"NodeText","Data":" 实现迭代器接口，负责实际迭代集合并跟踪当前位置。"}]}]},{"ID":"20240101122337-ilteylz","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240101122337-ilteylz","updated":"20240101122337"},"Children":[{"ID":"20240101122337-w2yto15","Type":"NodeParagraph","Properties":{"id":"20240101122337-w2yto15","updated":"20240101122337"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"聚合接口（Aggregate Interface）："},{"Type":"NodeText","Data":" 定义了创建相应迭代器对象的方法。"}]}]},{"ID":"20240101122337-kkorn3e","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240101122337-kkorn3e","updated":"20240101122337"},"Children":[{"ID":"20240101122337-o5ucfd0","Type":"NodeParagraph","Properties":{"id":"20240101122337-o5ucfd0","updated":"20240101122337"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"具体聚合类（Concrete Aggregate）："},{"Type":"NodeText","Data":" 实现聚合接口，提供创建具体迭代器对象的实现。"}]}]},{"ID":"20240101122337-ybkag3g","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240101122337-ybkag3g","updated":"20240101122337"},"Children":[{"ID":"20240101122337-no8q1k8","Type":"NodeParagraph","Properties":{"id":"20240101122337-no8q1k8","updated":"20240101122337"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"客户端（Client）："},{"Type":"NodeText","Data":" 使用迭代器模式的对象。客户端通过聚合接口获取迭代器，然后使用迭代器遍历聚合对象中的元素。"}]}]},{"ID":"20240101122337-2wqdk9f","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20240101122337-2wqdk9f","updated":"20240101122337"},"Children":[{"ID":"20240101122337-365p1rt","Type":"NodeParagraph","Properties":{"id":"20240101122337-365p1rt","updated":"20240101122337"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"迭代器与聚合对象的解耦："},{"Type":"NodeText","Data":" 迭代器模式的核心目标是将迭代算法与聚合对象解耦，使得可以独立地改变迭代算法或聚合对象的实现，而不会影响彼此。"}]}]}]},{"ID":"20240101122709-m165ty5","Type":"NodeParagraph","Properties":{"id":"20240101122709-m165ty5"}}]}