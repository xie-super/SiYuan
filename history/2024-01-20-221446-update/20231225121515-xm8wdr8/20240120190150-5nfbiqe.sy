{"ID":"20240120190150-5nfbiqe","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240120190150-5nfbiqe","title":"方法学大作业","updated":"20240120220233"},"Children":[{"ID":"20240120190150-szj41h4","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240120190150-szj41h4","updated":"20240120190248"},"Children":[{"Type":"NodeText","Data":"任务一"}]},{"ID":"20240120190248-850yjys","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240120190248-850yjys","updated":"20240120190601"},"Children":[{"Type":"NodeText","Data":"任务二"}]},{"ID":"20240120190618-6qogkhb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240120190618-6qogkhb","updated":"20240120190652"},"Children":[{"Type":"NodeText","Data":"场景介绍（以给定的代码为例）"}]},{"ID":"20240120190650-hkjrydz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240120190650-hkjrydz","updated":"20240120190709"},"Children":[{"Type":"NodeText","Data":"代码"}]},{"ID":"20240120190624-urcueat","Type":"NodeList","ListData":{},"Properties":{"id":"20240120190624-urcueat","updated":"20240120190626"},"Children":[{"ID":"20240120190626-wi91fgy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120190626-wi91fgy","updated":"20240120190626"},"Children":[{"ID":"20240120190626-lr7p5id","Type":"NodeParagraph","Properties":{"id":"20240120190626-lr7p5id","updated":"20240120190626"},"Children":[{"Type":"NodeText","Data":"ModulePrepare() 负责认证"}]}]}]},{"ID":"20240120190624-dofrifa","Type":"NodeList","ListData":{},"Properties":{"id":"20240120190624-dofrifa","updated":"20240120190624"},"Children":[{"ID":"20240120190624-0cphx4k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120190624-0cphx4k","updated":"20240120190624"},"Children":[{"ID":"20240120190624-n3xxsmi","Type":"NodeParagraph","Properties":{"id":"20240120190624-n3xxsmi","updated":"20240120190624"},"Children":[{"Type":"NodeText","Data":"ModuleInit()负责数据库的初始化\n"}]}]},{"ID":"20240120190637-iy2kjib","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120190637-iy2kjib"},"Children":[{"ID":"20240120190637-jp2mlor","Type":"NodeParagraph","Properties":{"id":"20240120190637-jp2mlor"},"Children":[{"Type":"NodeText","Data":"两者均在在过程中记录错误或成功的状态。"}]}]}]},{"ID":"20240120190713-3ez349h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240120190713-3ez349h","updated":"20240120190717"},"Children":[{"Type":"NodeText","Data":"日志链"}]},{"ID":"20240120190719-1v5llwz","Type":"NodeParagraph","Properties":{"id":"20240120190719-1v5llwz","updated":"20240120190726"},"Children":[{"Type":"NodeText","Data":"日志链显示了模块初始化的可能结果，包括"}]},{"ID":"20240120190729-xaypu08","Type":"NodeList","ListData":{},"Properties":{"id":"20240120190729-xaypu08","updated":"20240120190730"},"Children":[{"ID":"20240120190730-wd64lpi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120190730-wd64lpi","updated":"20240120190730"},"Children":[{"ID":"20240120190730-z9dr3z2","Type":"NodeParagraph","Properties":{"id":"20240120190730-z9dr3z2","updated":"20240120190730"},"Children":[{"Type":"NodeText","Data":"“Auth init failed”、“Auth init Success”、“DB init failed”、“DB init Success”和“MODULE Start Success”等状态，以及它们之间的转移条件。橙色表示失败状态，蓝色表示成功状态。"}]}]}]},{"ID":"20240120190608-dxfa1td","Type":"NodeParagraph","Properties":{"id":"20240120190608-dxfa1td","updated":"20240120190613"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 50%;","style":"width: 10000px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240120190608-bd7xc52.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 10000px;\" parent-style=\"width: 50%;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240120190757-binfszh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240120190757-binfszh","updated":"20240120190810"},"Children":[{"Type":"NodeText","Data":"元模型设计"}]},{"ID":"20240120192629-egepkzb","Type":"NodeParagraph","Properties":{"id":"20240120192629-egepkzb","updated":"20240120215409"},"Children":[{"Type":"NodeText","Data":"​​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240120215409-2o1mf24.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​​"}]},{"ID":"20240120192631-6ihvd6s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240120192631-6ihvd6s","updated":"20240120203655"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhbnR1bWw="},{"Type":"NodeCodeBlockCode","Data":"@startuml\n' 日志链元模型的类图\n' 用例边界\nrectangle \u0026quot;日志链元模型\u0026quot; as logchain {\n  ' 入口函数\n  class EntryFunction {\n    - name: String\n    - param: int\n    - retVal: int\n    - events: Event[*]\n    - metadata: MetaData\n    - feature: Feature\n    - file: File\n    - anchorLocation: AnchorLocation\n    - version: Version\n    - type: Type\n    - method: Method\n    - parameter: Parameter\n    - return: Return\n    - overlay: Overlay[*]\n    - filesystem: Filesystem[*]\n    - finalDependency: FinalDependency[*]\n    - dynamicLibraryCall: DynamicLibraryCall[*]\n    - callGraph: CallGraph[*]\n    + execute(): int\n  }\n  ' 日志链\n  class LogChain {\n    - events: Event[*]\n    + addEvent(Event): void\n    + printLog(): void\n    + clearLog(): void\n  }\n  ' 日志链元模型\n  class LogChainModel {\n    - entry: EntryFunction\n    - logChain: LogChain\n    - metadata: MetaData\n    - feature: Feature\n    - file: File\n    - anchorLocation: AnchorLocation\n    - version: Version\n    - type: Type\n    - method: Method\n    - parameter: Parameter\n    - return: Return\n    - overlay: Overlay[*]\n    - filesystem: Filesystem[*]\n    - finalDependency: FinalDependency[*]\n    - dynamicLibraryCall: DynamicLibraryCall[*]\n    - callGraph: CallGraph[*]\n    + generateLog(): void\n  }\n  ' 元数据\n  class MetaData {\n    - name: String\n    - filename: String\n    - LIBRARY_ROOT: String\n    - feature: Feature\n    - file: File\n  }\n  ' 特征\n  class Feature {\n    - id: String\n    - name: String\n  }\n  ' 文件\n  class File {\n    - id: String\n    - name: String\n  }\n  ' 锚点位置\n  class AnchorLocation {\n    - file: String\n    - line: int\n    - column: int\n    - offset: int\n  }\n  ' 版本\n  class Version {\n    - elementId: String\n    - signature: String\n  }\n  ' 类型\n  class Type {\n    - type: int\n  }\n  ' 方法\n  class Method {\n    - interfaceType: int\n    - parameter: Parameter\n    - return: Return\n  }\n  ' 参数\n  class Parameter {\n    - type: Type\n    - name: String\n    - value: String\n  }\n  ' 返回\n  class Return {\n    - type: Type\n    - value: String\n  }\n  ' 覆盖\n  class Overlay {\n    - condition: int\n  }\n  ' 文件系统\n  class Filesystem {\n    - condition: int\n  }\n  ' 最终依赖\n  class FinalDependency {\n    - condition: int\n  }\n  ' 动态库调用\n  class DynamicLibraryCall {\n    - condition: int\n  }\n  ' 调用图\n  class CallGraph {\n    - condition: int\n  }\n  ' 事件\n  class Event {\n    - name: String\n    - condition: int\n  }\n  ' AST节点\n  class ASTNode {\n    - name: String\n    - type: int\n    - value: String\n    - children: ASTNode[*]\n  }\n  ' CFG节点\n  class CFGNode {\n    - name: String\n    - type: int\n    - value: String\n    - predecessors: CFGNode[*]\n    - successors: CFGNode[*]\n  }\n  ' 方法节点\n  class MethodNode {\n    - name: String\n    - type: int\n    - value: String\n    - parameter: Parameter\n    - return: Return\n    - callers: MethodNode[*]\n    - callees: MethodNode[*]\n  }\n  ' 节点\n  class Node {\n    - id: String\n    - properties: Map\n    - labels: String[*]\n  }\n  ' 边\n  class Edge {\n    - id: String\n    - source: Node\n    - target: Node\n    - properties: Map\n    - labels: String[*]\n  }\n  ' 映射\n  class Map {\n    - key: String\n    - value: Object\n    - next: Map\n  }\n  ' 关系\n  Node \u0026lt;|-- State\n  Node \u0026lt;|-- Function\n  Node \u0026lt;|-- ASTNode\n  Node \u0026lt;|-- CFGNode\n  Node \u0026lt;|-- MethodNode\n  Edge \u0026lt;|-- Event\n  Edge \u0026lt;|-- Overlay\n  Edge \u0026lt;|-- Filesystem\n  Edge \u0026lt;|-- FinalDependency\n  Edge \u0026lt;|-- DynamicLibraryCall\n  Edge \u0026lt;|-- CallGraph\n  Function \u0026lt;|-- EntryFunction\n  LogChainModel *-- EntryFunction\n  LogChainModel *-- LogChain\n  LogChainModel *-- MetaData\n  LogChainModel *-- Feature\n  LogChainModel *-- File\n  LogChainModel *-- AnchorLocation\n  LogChainModel *-- Version\n  LogChainModel *-- Type\n  LogChainModel *-- Method\n  LogChainModel *-- Parameter\n  LogChainModel *-- Return\n  EntryFunction *-- Overlay : 1.....*\n  LogChainModel *-- Filesystem : contains multiple\n  LogChainModel *-- FinalDependency : contains multiple\n  LogChainModel *-- DynamicLibraryCall : contains multiple\n  LogChainModel *-- CallGraph : contains multiple\n  LogChain *-- Event : contains multiple\n  EntryFunction *-- MetaData\n  EntryFunction *-- Feature\n  EntryFunction *-- File\n  EntryFunction *-- AnchorLocation\n  EntryFunction *-- Version\n  EntryFunction *-- Type\n  EntryFunction *-- Method\n  EntryFunction *-- Parameter\n  EntryFunction *-- Return\n  EntryFunction *-- Overlay : contains multiple\n  EntryFunction *-- Filesystem : contains multiple\n  EntryFunction *-- FinalDependency : contains multiple\n  EntryFunction *-- DynamicLibraryCall : contains multiple\n  EntryFunction *-- CallGraph : contains multiple\n  EntryFunction *-- Event : contains multiple\n  MetaData *-- Feature\n  MetaData *-- File\n  Method *-- Parameter\n  Method *-- Return\n  Overlay *-- Edge\n  Filesystem *-- Edge\n  FinalDependency *-- Edge\n  DynamicLibraryCall *-- Edge\n  CallGraph *-- Edge\n  Event *-- Edge\n  ASTNode *-- ASTNode : contains multiple\n  CFGNode *-- CFGNode : contains multiple\n  MethodNode *-- MethodNode : contains multiple\n  Node *-- Map\n  Edge *-- Map\n  Map *-- Map\n}\n@enduml\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240120194201-hrignuk","Type":"NodeParagraph","Properties":{"id":"20240120194201-hrignuk","updated":"20240120220152"},"Children":[{"Type":"NodeText","Data":"场景是生成从一个入口函数开始的日志链，记录函数的执行过程和相关的元数据和依赖信息。"}]},{"ID":"20240120220233-3a39ta2","Type":"NodeParagraph","Properties":{"id":"20240120220233-3a39ta2","updated":"20240120220233"},"Children":[{"Type":"NodeText","Data":"日志记录的过程是这样的："}]},{"ID":"20240120220233-nfb6hh8","Type":"NodeList","ListData":{},"Properties":{"id":"20240120220233-nfb6hh8","updated":"20240120220233"},"Children":[{"ID":"20240120220233-qg7x4bn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120220233-qg7x4bn","updated":"20240120220233"},"Children":[{"ID":"20240120220233-bhu5lg3","Type":"NodeParagraph","Properties":{"id":"20240120220233-bhu5lg3","updated":"20240120220233"},"Children":[{"Type":"NodeText","Data":"首先，我们需要创建一个日志链元模型的实例，它会包含一个入口函数，一个日志链，和一些元数据和依赖的信息。"}]}]},{"ID":"20240120220233-73dptvy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120220233-73dptvy","updated":"20240120220233"},"Children":[{"ID":"20240120220233-wmywbze","Type":"NodeParagraph","Properties":{"id":"20240120220233-wmywbze","updated":"20240120220233"},"Children":[{"Type":"NodeText","Data":"然后，我们需要调用日志链元模型的 generateLog() 方法，它会根据入口函数的 execute() 方法的返回值，以及事件的 condition 属性，来判断是否向日志链中添加相应的事件。"}]}]},{"ID":"20240120220233-dfxmfyo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120220233-dfxmfyo","updated":"20240120220233"},"Children":[{"ID":"20240120220233-ape5z6k","Type":"NodeParagraph","Properties":{"id":"20240120220233-ape5z6k","updated":"20240120220233"},"Children":[{"Type":"NodeText","Data":"接着，我们可以调用日志链的 printLog() 方法，它会将日志链中的所有事件的名称和条件打印出来，或者保存到一个文件中。"}]}]},{"ID":"20240120220233-yy9k61e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240120220233-yy9k61e","updated":"20240120220233"},"Children":[{"ID":"20240120220233-08soicx","Type":"NodeParagraph","Properties":{"id":"20240120220233-08soicx","updated":"20240120220233"},"Children":[{"Type":"NodeText","Data":"最后，我们可以调用日志链的 clearLog() 方法，它会将日志链中的所有事件清空，释放内存空间。"}]}]}]}]}