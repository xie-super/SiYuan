{"ID":"20231225194319-67c1su8","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231225194319-67c1su8","title":"模板","updated":"20240123170208"},"Children":[{"ID":"20231225194320-25u1enw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231225194320-25u1enw","updated":"20240123170208"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bWVybWFpZA=="},{"Type":"NodeCodeBlockCode","Data":"graph TD\nA[问题] --\u0026gt;B[确定性问题]\nA --\u0026gt; C[最优化问题]\nB --\u0026gt; D[模拟]\nC --\u0026gt;E[有限集]\nC --\u0026gt;F[无限集]\nC --\u0026gt;K[最值问题]\n\nE --\u0026gt;G[DP]\nE --\u0026gt;H[贪心]\nE --\u0026gt;I[DFS]\nK --\u0026gt;J[二分]\nF --\u0026gt;J[二分]"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231225194321-1kppm1s","Type":"NodeParagraph","Properties":{"id":"20231225194321-1kppm1s","updated":"20231225194321"},"Children":[{"Type":"NodeText","Data":"插入排序，平均O(n"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"2),最好O(n)，最坏O(n"},{"Type":"NodeText","Data":"2),空间复杂度O(1);"}]},{"ID":"20231225194322-x9g686o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194322-x9g686o","updated":"20231225194322"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"for(int i = 1; i\u003c=n; i++){\n    int x = a[i];\n    int j = i-1;\n    //找到a[i]应该在的位置，进行交换\n    while(j\u003e=0 \u0026\u0026 x\u003ca[j]){\n        a[j+1] = a[j];\n        j--;\n    }\n    a[j+1] = x;//应该在的位置\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194323-iqaawui","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194323-iqaawui","updated":"20231225194323"},"Children":[{"ID":"20231225194324-kh5wljn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194324-kh5wljn","updated":"20231225194324"},"Children":[{"ID":"20231225194325-1yjnvyj","Type":"NodeParagraph","Properties":{"id":"20231225194325-1yjnvyj","updated":"20231225194325"},"Children":[{"Type":"NodeText","Data":"堆排序"}]}]}]},{"ID":"20231225194326-muq109d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Qysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194326-muq109d","updated":"20231225194326"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Qysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include\u003ciostream\u003e\n#include\u003calgorithm\u003e\nusing namespace std;\nconst int N = 100010;\nint heap[N],heapSize;\nint n, m;\n\nvoid down(int u){\n    int t =u;//t存储最小值,根叶子三个中最小值，所以下面代码不能是heap[u*2+1]\u003cheap[u]\n    if(u*2\u003c=heapSize \u0026\u0026 heap[u*2]\u003cheap[t]){\n        t = 2*u;\n    }\n    if(u*2+1\u003c=heapSize \u0026\u0026 heap[u*2+1]\u003cheap[t]){\n        t = 2*u+1;\n    }\n    if(u!=t){\n         swap(heap[u], heap[t]);\n         down(t);\n    }\n   \n}\nint main(){\n    cin\u003e\u003en\u003e\u003em;\n    heapSize = n;\n    for(int i =1; i\u003c=n; i++){\n        cin\u003e\u003eheap[i];\n    }\n    for(int i =n/2; i; i--){\n        down(i);\n    }\n    \n    for(int i = 1; i\u003c=m; i++){\n        cout\u003c\u003cheap[1]\u003c\u003c\" \";\n        heap[1] = heap[heapSize--];\n        down(1);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194327-wgxves4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194327-wgxves4","updated":"20231225194327"},"Children":[{"ID":"20231225194328-g0gp1kw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194328-g0gp1kw","updated":"20231225194328"},"Children":[{"ID":"20231225194329-a1avrdk","Type":"NodeParagraph","Properties":{"id":"20231225194329-a1avrdk","updated":"20231225194329"},"Children":[{"Type":"NodeText","Data":"快速排序"}]}]}]},{"ID":"20231225194330-el6dk8v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"SkFWQQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194330-el6dk8v","updated":"20231225194330"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"SkFWQQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" public void quick_sort(int    \n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194331-pmnhn3j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194331-pmnhn3j","updated":"20231225194331"},"Children":[{"ID":"20231225194332-2nffu52","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194332-2nffu52","updated":"20231225194332"},"Children":[{"ID":"20231225194333-dkvk5ua","Type":"NodeParagraph","Properties":{"id":"20231225194333-dkvk5ua","updated":"20231225194333"},"Children":[{"Type":"NodeText","Data":"DFS"}]}]}]},{"ID":"20231225194334-10cud93","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194334-10cud93","updated":"20231225194334"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"void dfs(int u){\n    //到达底部\n    if(u\u003en){\n        for(int i=1; i\u003c=n; i++){\n            System.out.print(path[i]+\" \");\n        }\n        System.out.println();\n    } \n    \n    for(int i = 1; i\u003c=n; i++){\n        if(!state[i]){//没用过\n            state[i] = true;\n            path[u] = i;\n            dfs(u+1);\n            state[i] = false;\n        }\n    }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194335-tgq47mg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194335-tgq47mg","updated":"20231225194335"},"Children":[{"ID":"20231225194336-lt1xrcn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194336-lt1xrcn","updated":"20231225194336"},"Children":[{"ID":"20231225194337-r2r8gk4","Type":"NodeParagraph","Properties":{"id":"20231225194337-r2r8gk4","updated":"20231225194337"},"Children":[{"Type":"NodeText","Data":"BFS"}]}]}]},{"ID":"20231225194338-6yjyu61","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194338-6yjyu61","updated":"20231225194338"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Pair{\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194339-cnq3mo6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194339-cnq3mo6","updated":"20231225194339"},"Children":[{"ID":"20231225194340-k1cnlys","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194340-k1cnlys","updated":"20231225194340"},"Children":[{"ID":"20231225194341-e1yv6uh","Type":"NodeParagraph","Properties":{"id":"20231225194341-e1yv6uh","updated":"20231225194341"},"Children":[{"Type":"NodeText","Data":"哈希函数"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"-（1）开放寻址法"}]}]}]},{"ID":"20231225194342-2fiadu9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194342-2fiadu9","updated":"20231225194342"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\n//开放寻址法\nint find(int k){\n    //保证是正数\n    int t = (k%N+N)%N;\n    while(h[t]!=INF \u0026\u0026 h[t]!=k){//当前位置被占了，找相邻的\n        t++;\n        if(t == N) t = 0;\n    }\n    return t;\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194343-y4tzy8k","Type":"NodeParagraph","Properties":{"id":"20231225194343-y4tzy8k","updated":"20231225194343"},"Children":[{"Type":"NodeText","Data":"-（2）拉链法"}]},{"ID":"20231225194344-t56802q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockFenceOffset":1,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20231225194344-t56802q","updated":"20231225194344"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"void insert(int v){\n   int x = (v%N+N)%N;\n   e[idx] = v;\n   ne[idx] = h[x];\n   h[x] = idx++;\n}\nbool find(int val){\n   int x = (val%N+N)%N;\n   for(int i = h[x]; i!=INF; i = ne[i]){\n       if(e[i] == val){\n           return true;\n       }\n   }\n   return false;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20231225194345-q8pa9ze","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194345-q8pa9ze","updated":"20231225194345"},"Children":[{"ID":"20231225194346-35qrknc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20231225194346-35qrknc","updated":"20231225194346"},"Children":[{"ID":"20231225194347-64kgrds","Type":"NodeParagraph","Properties":{"id":"20231225194347-64kgrds","updated":"20231225194347"},"Children":[{"Type":"NodeText","Data":"KMP"}]}]}]},{"ID":"20231225194348-q5323rs","Type":"NodeParagraph","Properties":{"id":"20231225194348-q5323rs","updated":"20231225194348"},"Children":[{"Type":"NodeText","Data":"关于KMP算法中算法中next数组的理解，我们知道next数组的含义是前缀和后缀相同的最大长度，部分匹配值即假如next[i] = j,含义即子串P P[1,j] = P[i-j+1, j]（下标从1开始），那么匹配时若S[i]!=P[j+1]时（为什么是j+1，因为从j+1开始不匹配，那么j以及之前的匹配，需要跳转j=ne[j])，j = ne[j]意思就是从头开始P[1, ne[j]]已经不需要匹配了，下一次只需要匹配ne[j]+1（因为S和P一旦不匹配我们暴力做法就是P从头开始，但是KMP优化就是找到了最长前缀，不需要从头开始）"}]}]}