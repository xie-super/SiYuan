{"ID":"20231226213404-kbtns2f","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231226213404-kbtns2f","title":"Factory Method pattern","updated":"20231229225632"},"Children":[{"ID":"20231226213413-lps98wt","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231226213413-lps98wt","updated":"20231226213431"},"Children":[{"Type":"NodeText","Data":"案例：披萨店"}]},{"ID":"20231226213442-9h7msk1","Type":"NodeParagraph","Properties":{"id":"20231226213442-9h7msk1","updated":"20231228001715"},"Children":[{"Type":"NodeText","Data":"假设你有一家 pizza 店，你有很多种 pizza，要在系统中显示你所有pizza种类。\n实现这个功能并不难，"}]},{"ID":"20231228001717-sqdqciv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231228001717-sqdqciv","updated":"20231228001738"},"Children":[{"Type":"NodeText","Data":"原先设计"}]},{"ID":"20231228001738-igqbodi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228001738-igqbodi","updated":"20231228001850"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class PizzaStore {\n    Pizza orderPizza(String type) {\n        Pizza pizza = null;\n        if (type.equals(\"cheese\")) {\n            pizza = new CheesePizza();\n        } else if (type.equals(\"clam\")) {\n            pizza = new ClamPizza();\n        } else if (type.equals(\"veggie\")) {\n            pizza = new VeggiePizza();\n        }\n        pizza.prepare();\n        pizza.bake();\n        pizza.cut();\n        pizza.box();\n        return pizza;\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231226213512-sk799dj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231226213512-sk799dj","updated":"20231228002004"},"Children":[{"Type":"NodeText","Data":"问题"}]},{"ID":"20231228002007-q3gn1o4","Type":"NodeParagraph","Properties":{"id":"20231228002007-q3gn1o4","updated":"20231228021405"},"Children":[{"Type":"NodeText","Data":"新上架或者下架一种 Pizza都需要修改代码，没有"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"对修改关闭"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231228021400-rv3cvua","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231228021400-rv3cvua","updated":"20231228021430"},"Children":[{"Type":"NodeText","Data":"简单工厂"}]},{"ID":"20231228021431-733pu09","Type":"NodeParagraph","Properties":{"id":"20231228021431-733pu09","updated":"20231228021529"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"text-shadow: 1px 1px var(--b3-theme-surface-lighter), 2px 2px var(--b3-theme-surface-lighter), 3px 3px var(--b3-theme-surface-lighter), 4px 4px var(--b3-theme-surface-lighter); color: var(--b3-font-color4);"},"TextMarkType":"text","TextMarkTextContent":"注：实际上简单工厂不是一个设计模式，更多程度上比较像一种编程习惯。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"text-shadow: 1px 1px var(--b3-theme-surface-lighter), 2px 2px var(--b3-theme-surface-lighter), 3px 3px var(--b3-theme-surface-lighter), 4px 4px var(--b3-theme-surface-lighter); color: var(--b3-font-color4);\"}"}]},{"ID":"20231228152912-bja9xel","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231228152912-bja9xel","updated":"20231228152914"},"Children":[{"Type":"NodeText","Data":"代码"}]},{"ID":"20231228021502-xgc5i2d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228021502-xgc5i2d","updated":"20231228152835"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class SimpleFactory {\n\n    public Pizza createPizza(String type) {\n        Pizza pizza = null;\n        if (type.equals(\"cheese\")) {\n            pizza = new CheesePizza();\n        } else if (type.equals(\"clam\")) {\n            pizza = new ClamPizza();\n        } else if (type.equals(\"veggie\")) {\n            pizza = new VeggiePizza();\n        }\n        return pizza;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231226213710-nkor3p4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231226213710-nkor3p4","updated":"20231226214715"},"Children":[{"Type":"NodeText","Data":"对应的 UML 类图"}]},{"ID":"20231226214716-kswy46o","Type":"NodeParagraph","Properties":{"id":"20231226214716-kswy46o","updated":"20231226214812"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 50%;","style":"width: 10000px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231226214716-tcig85l.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 10000px;\" parent-style=\"width: 50%;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231226213710-9gj2cbt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231226213710-9gj2cbt","updated":"20231227135647"},"Children":[{"Type":"NodeText","Data":"小结"}]},{"ID":"20231226214609-u4owp62","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20231226214609-u4owp62","updated":"20231226214615"},"Children":[{"ID":"20231226214609-238r4m3","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20231226214609-238r4m3","updated":"20231226214609"},"Children":[{"ID":"20231226214609-wxovyuq","Type":"NodeParagraph","Properties":{"id":"20231226214609-wxovyuq","updated":"20231226214609"},"Children":[{"Type":"NodeText","Data":"将对象创建的细节委托给工厂有助于封装变化。虽然可能看起来只是将问题转移到另一个对象，但这个对象（比如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SimplePizzaFactory"},{"Type":"NodeText","Data":"​）可能有多个客户端，而不仅仅是单一的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"orderPizza()"},{"Type":"NodeText","Data":"​ 方法。"}]}]},{"ID":"20231226214609-47xmx52","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20231226214609-47xmx52","updated":"20231226214615"},"Children":[{"ID":"20231226214609-rbu03k3","Type":"NodeParagraph","Properties":{"id":"20231226214609-rbu03k3","updated":"20231226214615"},"Children":[{"Type":"NodeText","Data":"通过将创建过程封装在一个工厂类中，当实现发生变化时，只需在一个地方进行修改。这提高了代码的灵活性和可维护性。"}]}]}]},{"ID":"20231226213624-t3lp3ow","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231226213624-t3lp3ow","updated":"20231228153014"},"Children":[{"Type":"NodeText","Data":"背景变更"}]},{"ID":"20231228153024-w2w3fwm","Type":"NodeParagraph","Properties":{"id":"20231228153024-w2w3fwm","updated":"20231228153052"},"Children":[{"Type":"NodeText","Data":"假如现在你要开分店，各种加盟商进来后，他们都要开发符合本地口味的pizza，那就需要各个地方都有一个工厂，也就是每个地方继承SimpleFactory类，但是每个工厂并不是完全使用你原来的烘培方法。（多个客户端）"}]},{"ID":"20231228153053-ot4iem6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231228153053-ot4iem6","updated":"20231228161110"},"Children":[{"Type":"NodeText","Data":"优化措施：工厂模式"}]},{"ID":"20231228161151-jvf77rd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231228161151-jvf77rd","updated":"20231228161155"},"Children":[{"Type":"NodeText","Data":"代码"}]},{"ID":"20231228161111-oaissnb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228161111-oaissnb","updated":"20231228161111"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"package com.company;\n\n/**\n * Author:xie-super\n * Time:2023/12/28\n * Name:IntelliJ IDEA\n */\n//商品\nabstract class Pizza{\n    //pizza制作过程\n    public void prepare() {\n        System.out.println(\"Normal pizza prepare\");\n    }\n}\nclass ChineseCheesePizza extends Pizza {\n    @Override\n    public void prepare(){\n        System.out.println(\"ChineseCheesePizza prepare\");\n    }\n}\nclass JapanCheesePizza extends Pizza{\n    @Override\n    public void prepare() {\n        System.out.println(\"JapanCheesePizza prepare\");\n    }\n}\n//工厂\nabstract class PizzaStore{\n    public Pizza orderPizza(String type) {\n        Pizza pizza;\n        pizza = createPizza(type);\n        pizza.prepare();\n        return pizza;\n    }\n    protected abstract Pizza createPizza(String type);\n}\nclass ChinesePizzaStore extends PizzaStore{\n    @Override\n    protected Pizza createPizza(String type) {\n        if(type == \"Cheese\"){\n            return new ChineseCheesePizza();\n        }\n        return null;\n    }\n}\nclass JapanPizzaStore extends PizzaStore{\n    @Override\n    protected Pizza createPizza(String type) {\n        if(type == \"Cheese\"){\n            return new JapanCheesePizza();\n        }\n        return null;\n    }\n}\npublic class FactoryPattren {\n    public static void main(String[] args) {\n        ChinesePizzaStore chinesePizzaStore =  new ChinesePizzaStore();\n        JapanPizzaStore japanPizzaStore = new JapanPizzaStore();\n        Pizza pizza = chinesePizzaStore.orderPizza(\"Cheese\");\n        pizza = japanPizzaStore.orderPizza(\"Cheese\");\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228161123-yncsfc7","Type":"NodeParagraph","Properties":{"id":"20231228161123-yncsfc7","updated":"20231228161126"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 50%;","style":"width: 10000px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231228161123-bnh8w5e.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 10000px;\" parent-style=\"width: 50%;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231228161128-pgwf7md","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231228161128-pgwf7md","updated":"20231228161203"},"Children":[{"Type":"NodeText","Data":"UML 类图"}]},{"ID":"20231228161203-ppwbodq","Type":"NodeParagraph","Properties":{"id":"20231228161203-ppwbodq","updated":"20231228161211"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 50%;","style":"width: 10000px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231228161203-zqwbmtf.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 10000px;\" parent-style=\"width: 50%;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231228161232-7givkai","Type":"NodeParagraph","Properties":{"id":"20231228161232-7givkai"}},{"ID":"20231228161234-hplhz6r","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231228161234-hplhz6r","updated":"20231228161314"},"Children":[{"Type":"NodeText","Data":"定义"}]},{"ID":"20231228161354-3315jhw","Type":"NodeParagraph","Properties":{"id":"20231228161354-3315jhw","updated":"20231228161354"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231228161354-r7ihvhc.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231228161742-knrbjpz","Type":"NodeParagraph","Properties":{"id":"20231228161742-knrbjpz"}},{"ID":"20231228161743-lrhf39r","Type":"NodeList","ListData":{},"Properties":{"id":"20231228161743-lrhf39r","updated":"20231229225632"},"Children":[{"ID":"20231228161749-ku0qa41","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231228161749-ku0qa41","updated":"20231229225632"},"Children":[{"ID":"20231228161749-lkz5ngn","Type":"NodeParagraph","Properties":{"id":"20231228161749-lkz5ngn","updated":"20231229225632"},"Children":[{"Type":"NodeText","Data":"工厂方法模式是一种创建型设计模式，它定义了一个用于创建对象的接口，但将对象的实际创建延迟到子类中。该模式允许一个类的实例化延迟到其子类，从而使一个类的实例化与其子类的实例化解耦。"}]}]},{"ID":"20231228161900-6im1j44","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231228161900-6im1j44","updated":"20231228162536"},"Children":[{"ID":"20231228161900-68rf08q","Type":"NodeParagraph","Properties":{"id":"20231228161900-68rf08q","updated":"20231228162536"},"Children":[{"Type":"NodeText","Data":"和简单工厂的区别，两者类似，简单工厂是单一工厂类，在工厂方法模式中，每个产品类都有一个对应的工厂类。简单工厂客户端与具体产品解耦，但与具体工厂耦合；工厂方法客户端与具体工厂和具体产品解耦。"}]},{"ID":"20231228162258-k5itdq9","Type":"NodeParagraph","Properties":{"id":"20231228162258-k5itdq9","updated":"20231228162323"}}]}]}]}