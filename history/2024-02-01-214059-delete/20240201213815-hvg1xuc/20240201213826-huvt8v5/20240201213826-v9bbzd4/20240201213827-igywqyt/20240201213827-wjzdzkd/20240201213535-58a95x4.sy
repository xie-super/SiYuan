{"ID":"20240201213535-58a95x4","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213535-58a95x4","title":"encryption-algorithms","updated":"20240201213535"},"Children":[{"ID":"20240201213536-yexx3o4","Type":"NodeThematicBreak","Properties":{"id":"20240201213536-yexx3o4","updated":"20240201213536"}},{"ID":"20240201213537-0hx3kc5","Type":"NodeParagraph","Properties":{"id":"20240201213537-0hx3kc5","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"title: 常见加密算法总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 系统设计"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213538-gjirgs9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213538-gjirgs9","updated":"20240201213538"},"Children":[{"ID":"20240201213539-wu8hny8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213539-wu8hny8","updated":"20240201213539"},"Children":[{"ID":"20240201213540-k7mbqcm","Type":"NodeParagraph","Properties":{"id":"20240201213540-k7mbqcm","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"安全"}]}]}]},{"ID":"20240201213541-vcs67xv","Type":"NodeThematicBreak","Properties":{"id":"20240201213541-vcs67xv","updated":"20240201213541"}},{"ID":"20240201213542-p50upe8","Type":"NodeParagraph","Properties":{"id":"20240201213542-p50upe8","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"加密算法是一种用数学方法对数据进行变换的技术，目的是保护数据的安全，防止被未经授权的人读取或修改。加密算法可以分为三大类：对称加密算法、非对称加密算法和哈希算法（也叫摘要算法）。"}]},{"ID":"20240201213543-eaumud7","Type":"NodeParagraph","Properties":{"id":"20240201213543-eaumud7","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"日常开发中常见的需要用到的加密算法的场景："}]},{"ID":"20240201213544-42k8hsb","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213544-42k8hsb","updated":"20240201213544"},"Children":[{"ID":"20240201213545-t8cwr9y","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213545-t8cwr9y","updated":"20240201213545"},"Children":[{"ID":"20240201213546-nbumpbm","Type":"NodeParagraph","Properties":{"id":"20240201213546-nbumpbm","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"保存在数据库中的密码需要加盐之后使用哈希算法（比如 BCrypt）进行加密。"}]}]},{"ID":"20240201213547-xuw9j8c","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213547-xuw9j8c","updated":"20240201213547"},"Children":[{"ID":"20240201213548-wgcsp6n","Type":"NodeParagraph","Properties":{"id":"20240201213548-wgcsp6n","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"保存在数据库中的银行卡号、身份号这类敏感数据需要使用对称加密算法（比如 AES）保存。"}]}]},{"ID":"20240201213549-xmsfx14","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213549-xmsfx14","updated":"20240201213549"},"Children":[{"ID":"20240201213550-oo4z739","Type":"NodeParagraph","Properties":{"id":"20240201213550-oo4z739","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"网络传输的敏感数据比如银行卡号、身份号需要用 HTTPS + 非对称加密算法（如 RSA）来保证传输数据的安全性。"}]}]},{"ID":"20240201213551-9ya56u7","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213551-9ya56u7","updated":"20240201213551"},"Children":[{"ID":"20240201213552-bh7ghmb","Type":"NodeParagraph","Properties":{"id":"20240201213552-bh7ghmb","updated":"20240201213552"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213553-sr515xr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213553-sr515xr","updated":"20240201213553"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"哈希算法"}]},{"ID":"20240201213554-pgioksk","Type":"NodeParagraph","Properties":{"id":"20240201213554-pgioksk","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"哈希算法也叫哈希算法、散列函数或摘要算法，它的作用是对任意长度的数据生成一个固定长度的唯一标识，也叫哈希值、散列值或消息摘要（后文统称为哈希值）。"}]},{"ID":"20240201213555-z3j6n6s","Type":"NodeParagraph","Properties":{"id":"20240201213555-z3j6n6s","updated":"20240201213555"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"哈希算法效果演示","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/encryption-algorithms/hash-function-effect-demonstration.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213556-ebe9o0a","Type":"NodeParagraph","Properties":{"id":"20240201213556-ebe9o0a","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"哈希值的作用是可以用来验证数据的完整性和一致性。"}]},{"ID":"20240201213557-x42z7km","Type":"NodeParagraph","Properties":{"id":"20240201213557-x42z7km","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"举两个实际的例子："}]},{"ID":"20240201213558-vjso40e","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-vjso40e","updated":"20240201213558"},"Children":[{"ID":"20240201213559-1ywg285","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213559-1ywg285","updated":"20240201213559"},"Children":[{"ID":"20240201213560-pzyy1a6","Type":"NodeParagraph","Properties":{"id":"20240201213560-pzyy1a6","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"保存密码到数据库时使用哈希算法进行加密，可以通过比较用户输入密码的哈希值和数据库保存的哈希值是否一致，来判断密码是否正确。"}]}]},{"ID":"20240201213561-r7y4kux","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213561-r7y4kux","updated":"20240201213561"},"Children":[{"ID":"20240201213562-36rr6d9","Type":"NodeParagraph","Properties":{"id":"20240201213562-36rr6d9","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"我们下载一个文件时，可以通过比较文件的哈希值和官方提供的哈希值是否一致，来判断文件是否被篡改或损坏；"}]}]}]},{"ID":"20240201213563-9gd4cel","Type":"NodeParagraph","Properties":{"id":"20240201213563-9gd4cel","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"这种算法的特点是不可逆："}]},{"ID":"20240201213564-hmo5lpl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213564-hmo5lpl","updated":"20240201213564"},"Children":[{"ID":"20240201213565-jfvrww3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213565-jfvrww3","updated":"20240201213565"},"Children":[{"ID":"20240201213566-g878igp","Type":"NodeParagraph","Properties":{"id":"20240201213566-g878igp","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"不能从哈希值还原出原始数据。"}]}]},{"ID":"20240201213567-nj596nf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213567-nj596nf","updated":"20240201213567"},"Children":[{"ID":"20240201213568-bcrblzb","Type":"NodeParagraph","Properties":{"id":"20240201213568-bcrblzb","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"原始数据的任何改变都会导致哈希值的巨大变化。"}]}]}]},{"ID":"20240201213569-fx2va7m","Type":"NodeParagraph","Properties":{"id":"20240201213569-fx2va7m","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"哈希算法分为两类："}]},{"ID":"20240201213570-dpfumbq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-dpfumbq","updated":"20240201213570"},"Children":[{"ID":"20240201213571-33hksox","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-33hksox","updated":"20240201213571"},"Children":[{"ID":"20240201213572-syvl4nn","Type":"NodeParagraph","Properties":{"id":"20240201213572-syvl4nn","updated":"20240201213572"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"加密哈希算法"},{"Type":"NodeText","Data":"：安全性较高的哈希算法，它可以提供一定的数据完整性保护和数据防篡改能力，能够抵御一定的攻击手段，安全性相对较高，适用于对安全性要求较高的场景。例如，SHA-256、SHA-512、SM3、Bcrypt 等等。"}]}]},{"ID":"20240201213573-93lyhjk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-93lyhjk","updated":"20240201213573"},"Children":[{"ID":"20240201213574-765qhrz","Type":"NodeParagraph","Properties":{"id":"20240201213574-765qhrz","updated":"20240201213574"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非加密哈希算法"},{"Type":"NodeText","Data":"：安全性相对较低的哈希算法，易受到暴力破解、冲突攻击等攻击手段的影响，但性能较高，适用于对安全性没有要求的业务场景。例如，CRC32、MurMurHash3 等等。"}]}]}]},{"ID":"20240201213575-gf47emc","Type":"NodeParagraph","Properties":{"id":"20240201213575-gf47emc","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"常见的哈希算法有："}]},{"ID":"20240201213576-njzd5fu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-njzd5fu","updated":"20240201213576"},"Children":[{"ID":"20240201213577-j2y9a1k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-j2y9a1k","updated":"20240201213577"},"Children":[{"ID":"20240201213578-vfnbwrq","Type":"NodeParagraph","Properties":{"id":"20240201213578-vfnbwrq","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"MD（Message Digest，消息摘要算法）：MD2、MD4、MD5 等，已经不被推荐使用。"}]}]},{"ID":"20240201213579-685w0xd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213579-685w0xd","updated":"20240201213579"},"Children":[{"ID":"20240201213580-sz2wa18","Type":"NodeParagraph","Properties":{"id":"20240201213580-sz2wa18","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"SHA（Secure Hash Algorithm，安全哈希算法）：SHA-1 系列安全性低，SHA2，SHA3 系列安全性较高。"}]}]},{"ID":"20240201213581-gcthyxz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-gcthyxz","updated":"20240201213581"},"Children":[{"ID":"20240201213582-j74en8y","Type":"NodeParagraph","Properties":{"id":"20240201213582-j74en8y","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"国密算法：例如 SM2、SM3、SM4，其中 SM2 为非对称加密算法，SM4 为对称加密算法，SM3 为哈希算法（安全性及效率和 SHA-256 相当，但更适合国内的应用环境）。"}]}]},{"ID":"20240201213583-7dfjgy1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-7dfjgy1","updated":"20240201213583"},"Children":[{"ID":"20240201213584-jk5t4fo","Type":"NodeParagraph","Properties":{"id":"20240201213584-jk5t4fo","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"Bcrypt（密码哈希算法）：基于 Blowfish 加密算法的密码哈希算法，专门为密码加密而设计，安全性高。"}]}]},{"ID":"20240201213585-omsi7sz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213585-omsi7sz","updated":"20240201213585"},"Children":[{"ID":"20240201213586-j6tm6n5","Type":"NodeParagraph","Properties":{"id":"20240201213586-j6tm6n5","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"MAC（Message Authentication Code，消息认证码算法）：HMAC 是一种基于哈希的 MAC，可以与任何安全的哈希算法结合使用，例如 SHA-256。"}]}]},{"ID":"20240201213587-yurwp6e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213587-yurwp6e","updated":"20240201213587"},"Children":[{"ID":"20240201213588-ju8iah3","Type":"NodeParagraph","Properties":{"id":"20240201213588-ju8iah3","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"CRC：（Cyclic Redundancy Check，循环冗余校验）：CRC32 是一种 CRC 算法，它的特点是生成 32 位的校验值，通常用于数据完整性校验、文件校验等场景。"}]}]},{"ID":"20240201213589-uxp275p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213589-uxp275p","updated":"20240201213589"},"Children":[{"ID":"20240201213590-l18pk7j","Type":"NodeParagraph","Properties":{"id":"20240201213590-l18pk7j","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"SipHash：加密哈希算法，它的设计目的是在速度和安全性之间达到一个平衡，用于防御"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://aumasson.jp/siphash/siphashdos_29c3_slides.pdf","TextMarkTextContent":"哈希泛洪 DoS 攻击"},{"Type":"NodeText","Data":"。Rust 默认使用 SipHash 作为哈希算法，从 Redis4.0 开始，哈希算法被替换为 SipHash。"}]}]},{"ID":"20240201213591-salvag0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213591-salvag0","updated":"20240201213591"},"Children":[{"ID":"20240201213592-r3k9k5j","Type":"NodeParagraph","Properties":{"id":"20240201213592-r3k9k5j","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"MurMurHash：经典快速的非加密哈希算法，目前最新的版本是 MurMurHash3，可以生成 32 位或者 128 位哈希值；"}]}]},{"ID":"20240201213593-6103x4z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213593-6103x4z","updated":"20240201213593"},"Children":[{"ID":"20240201213594-9ot9025","Type":"NodeParagraph","Properties":{"id":"20240201213594-9ot9025","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213595-k0j2vx9","Type":"NodeParagraph","Properties":{"id":"20240201213595-k0j2vx9","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"哈希算法一般是不需要密钥的，但也存在部分特殊哈希算法需要密钥。例如，MAC 和 SipHash 就是一种基于密钥的哈希算法，它在哈希算法的基础上增加了一个密钥，使得只有知道密钥的人才能验证数据的完整性和来源。"}]},{"ID":"20240201213596-2kstfc7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213596-2kstfc7","updated":"20240201213596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MD"}]},{"ID":"20240201213597-uzsqm2s","Type":"NodeParagraph","Properties":{"id":"20240201213597-uzsqm2s","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"MD 算法有多个版本，包括 MD2、MD4、MD5 等，其中 MD5 是最常用的版本，它可以生成一个 128 位（16 字节）的哈希值。从安全性上说：MD5 \u003e MD4 \u003e MD2。除了这些版本，还有一些基于 MD4 或 MD5 改进的算法，如 RIPEMD、HAVAL 等。"}]},{"ID":"20240201213598-kd0ze1j","Type":"NodeParagraph","Properties":{"id":"20240201213598-kd0ze1j","updated":"20240201213598"},"Children":[{"Type":"NodeText","Data":"即使是最安全 MD 算法 MD5 也存在被破解的风险，攻击者可以通过暴力破解或彩虹表攻击等方式，找到与原始数据相同的哈希值，从而破解数据。"}]},{"ID":"20240201213599-48nslvb","Type":"NodeParagraph","Properties":{"id":"20240201213599-48nslvb","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"为了增加破解难度，通常可以选择加盐。盐（Salt）在密码学中，是指通过在密码任意固定位置插入特定的字符串，让哈希后的结果和使用原始密码的哈希结果不相符，这种过程称之为“加盐”。"}]},{"ID":"20240201213600-0u6a4qu","Type":"NodeParagraph","Properties":{"id":"20240201213600-0u6a4qu","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"加盐之后就安全了吗？并不一定，这只是增加了破解难度，不代表无法破解。而且，MD5 算法本身就存在弱碰撞（Collision）问题，即多个不同的输入产生相同的 MD5 值。"}]},{"ID":"20240201213601-q6o37rs","Type":"NodeParagraph","Properties":{"id":"20240201213601-q6o37rs","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"因此，MD 算法已经不被推荐使用，建议使用更安全的哈希算法比如 SHA-2、Bcrypt。"}]},{"ID":"20240201213602-apkhhpy","Type":"NodeParagraph","Properties":{"id":"20240201213602-apkhhpy","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"Java 提供了对 MD 算法系列的支持，包括 MD2、MD5。"}]},{"ID":"20240201213603-ruu8bhf","Type":"NodeParagraph","Properties":{"id":"20240201213603-ruu8bhf","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"MD5 代码示例（未加盐）："}]},{"ID":"20240201213604-xzn0jlh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213604-xzn0jlh","updated":"20240201213604"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String originalString = \"Java学习 + 面试指南：javaguide.cn\";\n// 创建MD5摘要对象\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(originalString.getBytes(StandardCharsets.UTF_8));\n// 计算哈希值\nbyte[] result = messageDigest.digest();\n// 将哈希值转换为十六进制字符串\nString hexString = new HexBinaryAdapter().marshal(result);\nSystem.out.println(\"Original String: \" + originalString);\nSystem.out.println(\"MD5 Hash: \" + hexString.toLowerCase());\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213605-n0dzlup","Type":"NodeParagraph","Properties":{"id":"20240201213605-n0dzlup","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213606-bgdtb13","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213606-bgdtb13","updated":"20240201213606"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Original String: Java学习 + 面试指南：javaguide.cn\nMD5 Hash: fb246796f5b1b60d4d0268c817c608fa\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213607-cpnx8x9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213607-cpnx8x9","updated":"20240201213607"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SHA"}]},{"ID":"20240201213608-u9qs18l","Type":"NodeParagraph","Properties":{"id":"20240201213608-u9qs18l","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"SHA（Secure Hash Algorithm）系列算法是一组密码哈希算法，用于将任意长度的数据映射为固定长度的哈希值。SHA 系列算法由美国国家安全局（NSA）于 1993 年设计，目前共有 SHA-1、SHA-2、SHA-3 三种版本。"}]},{"ID":"20240201213609-2i4ldkv","Type":"NodeParagraph","Properties":{"id":"20240201213609-2i4ldkv","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"SHA-1 算法将任意长度的数据映射为 160 位的哈希值。然而，SHA-1 算法存在一些严重的缺陷，比如安全性低，容易受到碰撞攻击和长度扩展攻击。因此，SHA-1 算法已经不再被推荐使用。 SHA-2 家族（如 SHA-256、SHA-384、SHA-512 等）和 SHA-3 系列是 SHA-1 算法的替代方案，它们都提供了更高的安全性和更长的哈希值长度。"}]},{"ID":"20240201213610-xz7derf","Type":"NodeParagraph","Properties":{"id":"20240201213610-xz7derf","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"SHA-2 家族是在 SHA-1 算法的基础上改进而来的，它们采用了更复杂的运算过程和更多的轮次，使得攻击者更难以通过预计算或巧合找到碰撞。"}]},{"ID":"20240201213611-nltjvuh","Type":"NodeParagraph","Properties":{"id":"20240201213611-nltjvuh","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"为了寻找一种更安全和更先进的密码哈希算法，美国国家标准与技术研究院（National Institute of Standards and Technology，简称 NIST）在 2007 年公开征集 SHA-3 的候选算法。NIST 一共收到了 64 个算法方案，经过多轮的评估和筛选，最终在 2012 年宣布 Keccak 算法胜出，成为 SHA-3 的标准算法（SHA-3 与 SHA-2 算法没有直接的关系）。 Keccak 算法具有与 MD 和 SHA-1/2 完全不同的设计思路，即海绵结构（Sponge Construction），使得传统攻击方法无法直接应用于 SHA-3 的攻击中（能够抵抗目前已知的所有攻击方式包括碰撞攻击、长度扩展攻击、差分攻击等）。"}]},{"ID":"20240201213612-o4fyoau","Type":"NodeParagraph","Properties":{"id":"20240201213612-o4fyoau","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"由于 SHA-2 算法还没有出现重大的安全漏洞，而且在软件中的效率更高，所以大多数人还是倾向于使用 SHA-2 算法。"}]},{"ID":"20240201213613-u2ttp16","Type":"NodeParagraph","Properties":{"id":"20240201213613-u2ttp16","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"相比 MD5 算法，SHA-2 算法之所以更强，主要有两个原因："}]},{"ID":"20240201213614-ddjhrc6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213614-ddjhrc6","updated":"20240201213614"},"Children":[{"ID":"20240201213615-uii1dbg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213615-uii1dbg","updated":"20240201213615"},"Children":[{"ID":"20240201213616-6uvhm8p","Type":"NodeParagraph","Properties":{"id":"20240201213616-6uvhm8p","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"哈希值长度更长：例如 SHA-256 算法的哈希值长度为 256 位，而 MD5 算法的哈希值长度为 128 位，这就提高了攻击者暴力破解或者彩虹表攻击的难度。"}]}]},{"ID":"20240201213617-shv9m8i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213617-shv9m8i","updated":"20240201213617"},"Children":[{"ID":"20240201213618-o8y1as4","Type":"NodeParagraph","Properties":{"id":"20240201213618-o8y1as4","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"更强的碰撞抗性：SHA 算法采用了更复杂的运算过程和更多的轮次，使得攻击者更难以通过预计算或巧合找到碰撞。目前还没有找到任何两个不同的数据，它们的 SHA-256 哈希值相同。"}]}]}]},{"ID":"20240201213619-dtz75ad","Type":"NodeParagraph","Properties":{"id":"20240201213619-dtz75ad","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"当然，SHA-2 也不是绝对安全的，也有被暴力破解或者彩虹表攻击的风险，所以，在实际的应用中，加盐还是必不可少的。"}]},{"ID":"20240201213620-e6atb7t","Type":"NodeParagraph","Properties":{"id":"20240201213620-e6atb7t","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"Java 提供了对 SHA 算法系列的支持，包括 SHA-1、SHA-256、SHA-384 和 SHA-512。"}]},{"ID":"20240201213621-iu757kw","Type":"NodeParagraph","Properties":{"id":"20240201213621-iu757kw","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"SHA-256 代码示例（未加盐）："}]},{"ID":"20240201213622-ntbnbn6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213622-ntbnbn6","updated":"20240201213622"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String originalString = \"Java学习 + 面试指南：javaguide.cn\";\n// 创建SHA-256摘要对象\nMessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\nmessageDigest.update(originalString.getBytes());\n// 计算哈希值\nbyte[] result = messageDigest.digest();\n// 将哈希值转换为十六进制字符串\nString hexString = new HexBinaryAdapter().marshal(result);\nSystem.out.println(\"Original String: \" + originalString);\nSystem.out.println(\"SHA-256 Hash: \" + hexString.toLowerCase());\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213623-77zoz5v","Type":"NodeParagraph","Properties":{"id":"20240201213623-77zoz5v","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213624-sf2l3yp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213624-sf2l3yp","updated":"20240201213624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Original String: Java学习 + 面试指南：javaguide.cn\nSHA-256 Hash: 184eb7e1d7fb002444098c9bde3403c6f6722c93ecfac242c0e35cd9ed3b41cd\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213625-ro0kl9p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213625-ro0kl9p","updated":"20240201213625"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Bcrypt"}]},{"ID":"20240201213626-wi4kohb","Type":"NodeParagraph","Properties":{"id":"20240201213626-wi4kohb","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"Bcrypt 算法是一种基于 Blowfish 加密算法的密码哈希算法，专门为密码加密而设计，安全性高。"}]},{"ID":"20240201213627-bb4ln36","Type":"NodeParagraph","Properties":{"id":"20240201213627-bb4ln36","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"由于 Bcrypt 采用了 salt（盐） 和 cost（成本） 两种机制，它可以有效地防止彩虹表攻击和暴力破解攻击，从而保证密码的安全性。salt 是一个随机生成的字符串，用于和密码混合，增加密码的复杂度和唯一性。cost 是一个数值参数，用于控制 Bcrypt 算法的迭代次数，增加密码哈希的计算时间和资源消耗。"}]},{"ID":"20240201213628-tt3q91l","Type":"NodeParagraph","Properties":{"id":"20240201213628-tt3q91l","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"Bcrypt 算法可以根据实际情况进行调整加密的复杂度，可以设置不同的 cost 值和 salt 值，从而满足不同的安全需求，灵活性很高。"}]},{"ID":"20240201213629-sl39zrz","Type":"NodeParagraph","Properties":{"id":"20240201213629-sl39zrz","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"Java 应用程序的安全框架 Spring Security 支持多种密码编码器，其中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BCryptPasswordEncoder"},{"Type":"NodeText","Data":" 是官方推荐的一种，它使用 BCrypt 算法对用户的密码进行加密存储。"}]},{"ID":"20240201213630-d2my8rt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213630-d2my8rt","updated":"20240201213630"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Bean\npublic PasswordEncoder passwordEncoder(){\n    return new BCryptPasswordEncoder();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213631-21ss24i","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213631-21ss24i","updated":"20240201213631"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"对称加密"}]},{"ID":"20240201213632-p4i3mx1","Type":"NodeParagraph","Properties":{"id":"20240201213632-p4i3mx1","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"对称加密算法是指加密和解密使用同一个密钥的算法，也叫共享密钥加密算法。"}]},{"ID":"20240201213633-thpqd55","Type":"NodeParagraph","Properties":{"id":"20240201213633-thpqd55","updated":"20240201213633"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"对称加密","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/encryption-algorithms/symmetric-encryption.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213634-nf9gyzv","Type":"NodeParagraph","Properties":{"id":"20240201213634-nf9gyzv","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"常见的对称加密算法有 DES、3DES、AES 等。"}]},{"ID":"20240201213635-l37qsf0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213635-l37qsf0","updated":"20240201213635"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"DES 和 3DES"}]},{"ID":"20240201213636-ckwygg7","Type":"NodeParagraph","Properties":{"id":"20240201213636-ckwygg7","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"DES（Data Encryption Standard）使用 64 位的密钥(有效秘钥长度为 56 位,8 位奇偶校验位)和 64 位的明文进行加密。"}]},{"ID":"20240201213637-v3y9ugo","Type":"NodeParagraph","Properties":{"id":"20240201213637-v3y9ugo","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"虽然 DES 一次只能加密 64 位，但我们只需要把明文划分成 64 位一组的块，就可以实现任意长度明文的加密。如果明文长度不是 64 位的倍数，必须进行填充，常用的模式有 PKCS5Padding, PKCS7Padding, NOPADDING。"}]},{"ID":"20240201213638-kj0syxi","Type":"NodeParagraph","Properties":{"id":"20240201213638-kj0syxi","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"DES 加密算法的基本思想是将 64 位的明文分成两半，然后对每一半进行多轮的变换，最后再合并成 64 位的密文。这些变换包括置换、异或、选择、移位等操作，每一轮都使用了一个子密钥，而这些子密钥都是由同一个 56 位的主密钥生成的。DES 加密算法总共进行了 16 轮变换，最后再进行一次逆置换，得到最终的密文。"}]},{"ID":"20240201213639-xgdmmpc","Type":"NodeParagraph","Properties":{"id":"20240201213639-xgdmmpc","updated":"20240201213639"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"DES（Data Encryption Standard）","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/des-steps.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213640-2dk7p7z","Type":"NodeParagraph","Properties":{"id":"20240201213640-2dk7p7z","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"这是一个经典的对称加密算法，但也有明显的缺陷，即 56 位的密钥安全性不足，已被证实可以在短时间内破解。"}]},{"ID":"20240201213641-y4a07f7","Type":"NodeParagraph","Properties":{"id":"20240201213641-y4a07f7","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"为了提高 DES 算法的安全性，人们提出了一些变种或者替代方案，例如 3DES（Triple DES）。"}]},{"ID":"20240201213642-06nla1g","Type":"NodeParagraph","Properties":{"id":"20240201213642-06nla1g","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"3DES（Triple DES）是 DES 向 AES 过渡的加密算法，它使用 2 个或者 3 个 56 位的密钥对数据进行三次加密。3DES 相当于是对每个数据块应用三次 DES 的对称加密算法。"}]},{"ID":"20240201213643-1ziqj9r","Type":"NodeParagraph","Properties":{"id":"20240201213643-1ziqj9r","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"为了兼容普通的 DES，3DES 并没有直接使用 加密-\u003e加密-\u003e加密 的方式，而是采用了加密-\u003e解密-\u003e加密 的方式。当三种密钥均相同时，前两步相互抵消，相当于仅实现了一次加密，因此可实现对普通 DES 加密算法的兼容。3DES 比 DES 更为安全，但其处理速度不高。"}]},{"ID":"20240201213644-vpbpywz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213644-vpbpywz","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AES"}]},{"ID":"20240201213645-abnjfs7","Type":"NodeParagraph","Properties":{"id":"20240201213645-abnjfs7","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"AES（Advanced Encryption Standard）算法是一种更先进的对称密钥加密算法，它使用 128 位、192 位或 256 位的密钥对数据进行加密或解密，密钥越长，安全性越高。"}]},{"ID":"20240201213646-ebvc4df","Type":"NodeParagraph","Properties":{"id":"20240201213646-ebvc4df","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"AES 也是一种分组(或者叫块)密码，分组长度只能是 128 位，也就是说，每个分组为 16 个字节。AES 加密算法有多种工作模式（mode of operation），如：ECB、CBC、OFB、CFB、CTR、XTS、OCB、GCM（目前使用最广泛的模式）。不同的模式参数和加密流程不同，但是核心仍然是 AES 算法。"}]},{"ID":"20240201213647-zyi9y5j","Type":"NodeParagraph","Properties":{"id":"20240201213647-zyi9y5j","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"和 DES 类似，对于不是 128 位倍数的明文需要进行填充，常用的填充模式有 PKCS5Padding, PKCS7Padding, NOPADDING。不过，AES-GCM 是流加密算法，可以对任意长度的明文进行加密，所以对应的填充模式为 NoPadding，即无需填充。"}]},{"ID":"20240201213648-rce51tr","Type":"NodeParagraph","Properties":{"id":"20240201213648-rce51tr","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"AES 的速度比 3DES 快，而且更安全。"}]},{"ID":"20240201213649-ux3gd61","Type":"NodeParagraph","Properties":{"id":"20240201213649-ux3gd61","updated":"20240201213649"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"AES（Advanced Encryption Standard）","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/aes-steps.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213650-6vv362u","Type":"NodeParagraph","Properties":{"id":"20240201213650-6vv362u","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"DES 算法和 AES 算法简单对比（图片来自于："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cheapsslweb.com/blog/rsa-vs-aes-encryption","TextMarkTextContent":"RSA vs. AES Encryption: Key Differences Explained"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213651-3zru0jg","Type":"NodeParagraph","Properties":{"id":"20240201213651-3zru0jg","updated":"20240201213651"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"DES 和 AES 对比","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/des-vs-aes.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213652-fkvvy8k","Type":"NodeParagraph","Properties":{"id":"20240201213652-fkvvy8k","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"基于 Java 实现 AES 算法代码示例："}]},{"ID":"20240201213653-bs7n7qw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213653-bs7n7qw","updated":"20240201213653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final String AES_ALGORITHM = \"AES\";\n// AES密钥\nprivate static final String AES_SECRET_KEY = \"4128D9CDAC7E2F82951CBAF7FDFE675B\";\n// AES加密模式为GCM，填充方式为NoPadding\n// AES-GCM 是流加密（Stream cipher）算法，所以对应的填充模式为 NoPadding，即无需填充。\nprivate static final String AES_TRANSFORMATION = \"AES/GCM/NoPadding\";\n// 加密器\nprivate static Cipher encryptionCipher;\n// 解密器\nprivate static Cipher decryptionCipher;\n\n/**\n * 完成一些初始化工作\n */\npublic static void init() throws Exception {\n    // 将AES密钥转换为SecretKeySpec对象\n    SecretKeySpec secretKeySpec = new SecretKeySpec(AES_SECRET_KEY.getBytes(), AES_ALGORITHM);\n    // 使用指定的AES加密模式和填充方式获取对应的加密器并初始化\n    encryptionCipher = Cipher.getInstance(AES_TRANSFORMATION);\n    encryptionCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    // 使用指定的AES加密模式和填充方式获取对应的解密器并初始化\n    decryptionCipher = Cipher.getInstance(AES_TRANSFORMATION);\n    decryptionCipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new GCMParameterSpec(128, encryptionCipher.getIV()));\n}\n\n/**\n * 加密\n */\npublic static String encrypt(String data) throws Exception {\n    byte[] dataInBytes = data.getBytes();\n    // 加密数据\n    byte[] encryptedBytes = encryptionCipher.doFinal(dataInBytes);\n    return Base64.getEncoder().encodeToString(encryptedBytes);\n}\n\n/**\n * 解密\n */\npublic static String decrypt(String encryptedData) throws Exception {\n    byte[] dataInBytes = Base64.getDecoder().decode(encryptedData);\n    // 解密数据\n    byte[] decryptedBytes = decryptionCipher.doFinal(dataInBytes);\n    return new String(decryptedBytes, StandardCharsets.UTF_8);\n}\n\npublic static void main(String[] args) throws Exception {\n    String originalString = \"Java学习 + 面试指南：javaguide.cn\";\n    init();\n    String encryptedData = encrypt(originalString);\n    String decryptedData = decrypt(encryptedData);\n    System.out.println(\"Original String: \" + originalString);\n    System.out.println(\"AES Encrypted Data : \" + encryptedData);\n    System.out.println(\"AES Decrypted Data : \" + decryptedData);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213654-pyeejti","Type":"NodeParagraph","Properties":{"id":"20240201213654-pyeejti","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213655-nb773dc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213655-nb773dc","updated":"20240201213655"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Original String: Java学习 + 面试指南：javaguide.cn\nAES Encrypted Data : E1qTkK91suBqToag7WCyoFP9uK5hR1nSfM6p+oBlYj71bFiIVnk5TsQRT+zpjv8stha7oyKi3jQ=\nAES Decrypted Data : Java学习 + 面试指南：javaguide.cn\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213656-ljw6fcx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213656-ljw6fcx","updated":"20240201213656"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"非对称加密"}]},{"ID":"20240201213657-tsriq2e","Type":"NodeParagraph","Properties":{"id":"20240201213657-tsriq2e","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"非对称加密算法是指加密和解密使用不同的密钥的算法，也叫公开密钥加密算法。这两个密钥互不相同，一个称为公钥，另一个称为私钥。公钥可以公开给任何人使用，私钥则要保密。"}]},{"ID":"20240201213658-kji2t91","Type":"NodeParagraph","Properties":{"id":"20240201213658-kji2t91","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"如果用公钥加密数据，只能用对应的私钥解密（加密）；如果用私钥加密数据，只能用对应的公钥解密（签名）。这样就可以实现数据的安全传输和身份认证。"}]},{"ID":"20240201213659-fx4656n","Type":"NodeParagraph","Properties":{"id":"20240201213659-fx4656n","updated":"20240201213659"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"非对称加密","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/encryption-algorithms/asymmetric-encryption.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213660-ujeuhi9","Type":"NodeParagraph","Properties":{"id":"20240201213660-ujeuhi9","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"常见的非对称加密算法有 RSA、DSA、ECC 等。"}]},{"ID":"20240201213661-y9z5gtr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213661-y9z5gtr","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RSA"}]},{"ID":"20240201213662-hl3hhzl","Type":"NodeParagraph","Properties":{"id":"20240201213662-hl3hhzl","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"RSA（Rivest–Shamir–Adleman algorithm）算法是一种基于大数分解的困难性的非对称加密算法，它需要选择两个大素数作为私钥的一部分，然后计算出它们的乘积作为公钥的一部分（寻求两个大素数比较简单，而将它们的乘积进行因式分解却极其困难）。RSA 算法原理的详细介绍，可以参考这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/xiaofuge/p/16954187.html","TextMarkTextContent":"你真的了解 RSA 加密算法吗？ - 小傅哥"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213663-hzd637i","Type":"NodeParagraph","Properties":{"id":"20240201213663-hzd637i","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"RSA 算法的安全性依赖于大数分解的难度，目前已经有 512 位和 768 位的 RSA 公钥被成功分解，因此建议使用 2048 位或以上的密钥长度。"}]},{"ID":"20240201213664-g40bwbb","Type":"NodeParagraph","Properties":{"id":"20240201213664-g40bwbb","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"RSA 算法的优点是简单易用，可以用于数据加密和数字签名；缺点是运算速度慢，不适合大量数据的加密。"}]},{"ID":"20240201213665-pj7i4uq","Type":"NodeParagraph","Properties":{"id":"20240201213665-pj7i4uq","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"RSA 算法是是目前应用最广泛的非对称加密算法，像 SSL/TLS、SSH 等协议中就用到了 RSA 算法。"}]},{"ID":"20240201213666-7yaprlv","Type":"NodeParagraph","Properties":{"id":"20240201213666-7yaprlv","updated":"20240201213666"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"HTTPS 证书签名算法中带RSA 加密的SHA-256 ","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/encryption-algorithms/https-rsa-sha-256.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213667-2wkx784","Type":"NodeParagraph","Properties":{"id":"20240201213667-2wkx784","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"基于 Java 实现 RSA 算法代码示例："}]},{"ID":"20240201213668-c97x41w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213668-c97x41w","updated":"20240201213668"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final String RSA_ALGORITHM = \"RSA\";\n\n/**\n * 生成RSA密钥对\n */\npublic static KeyPair generateKeyPair() throws NoSuchAlgorithmException {\n    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(RSA_ALGORITHM);\n    // 密钥大小为2048位\n    keyPairGenerator.initialize(2048);\n    return keyPairGenerator.generateKeyPair();\n}\n\n/**\n * 使用公钥加密数据\n */\npublic static String encrypt(String data, PublicKey publicKey) throws Exception {\n    Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);\n    cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n    byte[] encryptedData = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));\n    return Base64.getEncoder().encodeToString(encryptedData);\n}\n\n/**\n * 使用私钥解密数据\n */\npublic static String decrypt(String encryptedData, PrivateKey privateKey) throws Exception {\n    byte[] decodedData = Base64.getDecoder().decode(encryptedData);\n    Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);\n    cipher.init(Cipher.DECRYPT_MODE, privateKey);\n    byte[] decryptedData = cipher.doFinal(decodedData);\n    return new String(decryptedData, StandardCharsets.UTF_8);\n}\n\npublic static void main(String[] args) throws Exception {\n    KeyPair keyPair = generateKeyPair();\n    PublicKey publicKey = keyPair.getPublic();\n    PrivateKey privateKey = keyPair.getPrivate();\n    String originalString = \"Java学习 + 面试指南：javaguide.cn\";\n    String encryptedData = encrypt(originalString, publicKey);\n    String decryptedData = decrypt(encryptedData, privateKey);\n    System.out.println(\"Original String: \" + originalString);\n    System.out.println(\"RSA Encrypted Data : \" + encryptedData);\n    System.out.println(\"RSA Decrypted Data : \" + decryptedData);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213669-o7zdcow","Type":"NodeParagraph","Properties":{"id":"20240201213669-o7zdcow","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213670-obexte9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213670-obexte9","updated":"20240201213670"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Original String: Java学习 + 面试指南：javaguide.cn\nRSA Encrypted Data : T9ey/CEPUAhZm4UJjuVNIg8RPd1fQ32S9w6+rvOKxmuMumkJY2daFfWuCn8A73Mk5bL6TigOJI0GHfKOt/W2x968qLM3pBGCcPX17n4pR43f32IIIz9iPdgF/INOqDxP5ZAtCDvTiuzcSgDHXqiBSK5TDjtj7xoGjfudYAXICa8pWitnqDgJYoo2J0F8mKzxoi8D8eLE455MEx8ZT1s7FUD/z7/H8CfShLRbO9zq/zFI06TXn123ufg+F4lDaq/5jaIxGVEUB/NFeX4N6OZCFHtAV32mw71BYUadzI9TgvkkUr1rSKmQ0icNhnRdKedJokGUh8g9QQ768KERu92Ibg==\nRSA Decrypted Data : Java学习 + 面试指南：javaguide.cn\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213671-k3d81cd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213671-k3d81cd","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"DSA"}]},{"ID":"20240201213672-rpn82fi","Type":"NodeParagraph","Properties":{"id":"20240201213672-rpn82fi","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"DSA（Digital Signature Algorithm）算法是一种基于离散对数的困难性的非对称加密算法，它需要选择一个素数 q 和一个 q 的倍数 p 作为私钥的一部分，然后计算出一个模 p 的原根 g 和一个模 q 的整数 y 作为公钥的一部分。DSA 算法的安全性依赖于离散对数的难度，目前已经有 1024 位的 DSA 公钥被成功破解，因此建议使用 2048 位或以上的密钥长度。"}]},{"ID":"20240201213673-776u9og","Type":"NodeParagraph","Properties":{"id":"20240201213673-776u9og","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"DSA 算法的优点是数字签名速度快，适合生成数字证书；缺点是不能用于数据加密，且签名过程需要随机数。"}]},{"ID":"20240201213674-2p2ndok","Type":"NodeParagraph","Properties":{"id":"20240201213674-2p2ndok","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"DSA 算法签名过程："}]},{"ID":"20240201213675-rtx5qgu","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213675-rtx5qgu","updated":"20240201213675"},"Children":[{"ID":"20240201213676-qcv5asf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213676-qcv5asf","updated":"20240201213676"},"Children":[{"ID":"20240201213677-ifq57wz","Type":"NodeParagraph","Properties":{"id":"20240201213677-ifq57wz","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"使用消息摘要算法对要发送的数据进行加密，生成一个信息摘要，也就是一个短的、唯一的、不可逆的数据表示。"}]}]},{"ID":"20240201213678-91u9d6l","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213678-91u9d6l","updated":"20240201213678"},"Children":[{"ID":"20240201213679-cdbjfjq","Type":"NodeParagraph","Properties":{"id":"20240201213679-cdbjfjq","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"发送方用自己的 DSA 私钥对信息摘要再进行加密，形成一个数字签名，也就是一个可以证明数据来源和完整性的数据附加。"}]}]},{"ID":"20240201213680-pyyadem","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213680-pyyadem","updated":"20240201213680"},"Children":[{"ID":"20240201213681-0ldd6cm","Type":"NodeParagraph","Properties":{"id":"20240201213681-0ldd6cm","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"将原始数据和数字签名一起通过互联网传送给接收方。"}]}]},{"ID":"20240201213682-r73tzh1","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213682-r73tzh1","updated":"20240201213682"},"Children":[{"ID":"20240201213683-ephrvg5","Type":"NodeParagraph","Properties":{"id":"20240201213683-ephrvg5","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"接收方用发送方的公钥对数字签名进行解密，得到信息摘要。同时，接收方也用消息摘要算法对收到的原始数据进行加密，得到另一个信息摘要。接收方将两个信息摘要进行比较，如果两者一致，则说明在传送过程中数据没有被篡改或损坏；否则，则说明数据已经失去了安全性和保密性。"}]}]}]},{"ID":"20240201213684-9rzseib","Type":"NodeParagraph","Properties":{"id":"20240201213684-9rzseib","updated":"20240201213684"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"DSA 算法签名过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/security/encryption-algorithms/dsa-algorithm-signing-process.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213685-5hgjtnd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213685-5hgjtnd","updated":"20240201213685"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213686-dwtufvj","Type":"NodeParagraph","Properties":{"id":"20240201213686-dwtufvj","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"这篇文章介绍了三种加密算法：哈希算法、对称加密算法和非对称加密算法。"}]},{"ID":"20240201213687-ntp2mq4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213687-ntp2mq4","updated":"20240201213687"},"Children":[{"ID":"20240201213688-96hyvmh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213688-96hyvmh","updated":"20240201213688"},"Children":[{"ID":"20240201213689-x3ijvku","Type":"NodeParagraph","Properties":{"id":"20240201213689-x3ijvku","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"哈希算法是一种用数学方法对数据生成一个固定长度的唯一标识的技术，可以用来验证数据的完整性和一致性，常见的哈希算法有 MD、SHA、MAC 等。"}]}]},{"ID":"20240201213690-3e8hl66","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-3e8hl66","updated":"20240201213690"},"Children":[{"ID":"20240201213691-9qk76lr","Type":"NodeParagraph","Properties":{"id":"20240201213691-9qk76lr","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"对称加密算法是一种加密和解密使用同一个密钥的算法，可以用来保护数据的安全性和保密性，常见的对称加密算法有 DES、3DES、AES 等。"}]}]},{"ID":"20240201213692-vhin382","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-vhin382","updated":"20240201213692"},"Children":[{"ID":"20240201213693-shv5cbe","Type":"NodeParagraph","Properties":{"id":"20240201213693-shv5cbe","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"非对称加密算法是一种加密和解密使用不同的密钥的算法，可以用来实现数据的安全传输和身份认证，常见的非对称加密算法有 RSA、DSA、ECC 等。"}]}]}]},{"ID":"20240201213694-0z5a3es","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213694-0z5a3es","updated":"20240201213694"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213695-1iolqlm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-1iolqlm","updated":"20240201213695"},"Children":[{"ID":"20240201213696-njv8sp4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-njv8sp4","updated":"20240201213696"},"Children":[{"ID":"20240201213697-y32jfnt","Type":"NodeParagraph","Properties":{"id":"20240201213697-y32jfnt","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"深入理解完美哈希 - 腾讯技术工程：https://mp.weixin.qq.com/s/M8Wcj8sZ7UF1CMr887Puog"}]}]},{"ID":"20240201213698-yn67c1y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-yn67c1y","updated":"20240201213698"},"Children":[{"ID":"20240201213699-go9uhii","Type":"NodeParagraph","Properties":{"id":"20240201213699-go9uhii","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"写给开发人员的实用密码学（二）—— 哈希函数：https://thiscute.world/posts/practical-cryptography-basics-2-hash/"}]}]},{"ID":"20240201213700-i8excxv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-i8excxv","updated":"20240201213700"},"Children":[{"ID":"20240201213701-781keja","Type":"NodeParagraph","Properties":{"id":"20240201213701-781keja","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"奇妙的安全旅行之 DSA 算法："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/347025157","TextMarkTextContent":"https://zhuanlan.zhihu.com/p/347025157"}]}]},{"ID":"20240201213702-5qg7a3i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213702-5qg7a3i","updated":"20240201213702"},"Children":[{"ID":"20240201213703-1btpbuj","Type":"NodeParagraph","Properties":{"id":"20240201213703-1btpbuj","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"AES-GCM 加密简介："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/6844904122676690951","TextMarkTextContent":"https://juejin.cn/post/6844904122676690951"}]}]},{"ID":"20240201213704-bzzht84","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-bzzht84","updated":"20240201213704"},"Children":[{"ID":"20240201213705-c5b8m4v","Type":"NodeParagraph","Properties":{"id":"20240201213705-c5b8m4v","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"Java AES 256 GCM Encryption and Decryption Example | JCE Unlimited Strength："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.javainterviewpoint.com/java-aes-256-gcm-encryption-and-decryption/","TextMarkTextContent":"https://www.javainterviewpoint.com/java-aes-256-gcm-encryption-and-decryption/"}]}]}]},{"ID":"20240201213706-rufybs0","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213706-rufybs0","updated":"20240201213706"}}]}