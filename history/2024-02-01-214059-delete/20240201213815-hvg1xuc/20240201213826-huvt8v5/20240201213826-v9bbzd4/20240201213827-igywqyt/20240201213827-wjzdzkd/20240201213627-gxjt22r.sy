{"ID":"20240201213627-gxjt22r","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213627-gxjt22r","title":"advantages-and-disadvantages-of-jwt","updated":"20240201213627"},"Children":[{"ID":"20240201213628-hntxxm1","Type":"NodeThematicBreak","Properties":{"id":"20240201213628-hntxxm1","updated":"20240201213628"}},{"ID":"20240201213629-3yh42ub","Type":"NodeParagraph","Properties":{"id":"20240201213629-3yh42ub","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"title: JWT 身份认证优缺点分析"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 系统设计"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213630-a3jv1g3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-a3jv1g3","updated":"20240201213630"},"Children":[{"ID":"20240201213631-6yniays","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-6yniays","updated":"20240201213631"},"Children":[{"ID":"20240201213632-o76kryk","Type":"NodeParagraph","Properties":{"id":"20240201213632-o76kryk","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"安全"}]}]}]},{"ID":"20240201213633-4zcnm8f","Type":"NodeThematicBreak","Properties":{"id":"20240201213633-4zcnm8f","updated":"20240201213633"}},{"ID":"20240201213634-4h4yktd","Type":"NodeParagraph","Properties":{"id":"20240201213634-4h4yktd","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/system-design/security/jwt-intro.html","TextMarkTextContent":"JWT 基本概念详解"},{"Type":"NodeText","Data":"这篇文章中，我介绍了："}]},{"ID":"20240201213635-a9b5qoy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-a9b5qoy","updated":"20240201213635"},"Children":[{"ID":"20240201213636-m49i9ry","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213636-m49i9ry","updated":"20240201213636"},"Children":[{"ID":"20240201213637-2qjwtsl","Type":"NodeParagraph","Properties":{"id":"20240201213637-2qjwtsl","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"什么是 JWT?"}]}]},{"ID":"20240201213638-h5cdaqw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-h5cdaqw","updated":"20240201213638"},"Children":[{"ID":"20240201213639-9hre1eh","Type":"NodeParagraph","Properties":{"id":"20240201213639-9hre1eh","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"JWT 由哪些部分组成？"}]}]},{"ID":"20240201213640-7g4mt6w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-7g4mt6w","updated":"20240201213640"},"Children":[{"ID":"20240201213641-45sqedz","Type":"NodeParagraph","Properties":{"id":"20240201213641-45sqedz","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"如何基于 JWT 进行身份验证？"}]}]},{"ID":"20240201213642-7dwqdjr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-7dwqdjr","updated":"20240201213642"},"Children":[{"ID":"20240201213643-oq16jfy","Type":"NodeParagraph","Properties":{"id":"20240201213643-oq16jfy","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"JWT 如何防止 Token 被篡改？"}]}]},{"ID":"20240201213644-6mfiz2h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213644-6mfiz2h","updated":"20240201213644"},"Children":[{"ID":"20240201213645-lfotlw3","Type":"NodeParagraph","Properties":{"id":"20240201213645-lfotlw3","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"如何加强 JWT 的安全性？"}]}]}]},{"ID":"20240201213646-wst81cb","Type":"NodeParagraph","Properties":{"id":"20240201213646-wst81cb","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"这篇文章，我们一起探讨一下 JWT 身份认证的优缺点以及常见问题的解决办法。"}]},{"ID":"20240201213647-v77i5i6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213647-v77i5i6","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JWT 的优势"}]},{"ID":"20240201213648-92ralmd","Type":"NodeParagraph","Properties":{"id":"20240201213648-92ralmd","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"相比于 Session 认证的方式来说，使用 JWT 进行身份认证主要有下面 4 个优势。"}]},{"ID":"20240201213649-810n5y3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213649-810n5y3","updated":"20240201213649"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"无状态"}]},{"ID":"20240201213650-i0883vm","Type":"NodeParagraph","Properties":{"id":"20240201213650-i0883vm","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用性和伸缩性，大大减轻了服务端的压力。"}]},{"ID":"20240201213651-htzcwid","Type":"NodeParagraph","Properties":{"id":"20240201213651-htzcwid","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"不过，也正是由于 JWT 的无状态，也导致了它最大的缺点："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不可控！"}]},{"ID":"20240201213652-th05lp0","Type":"NodeParagraph","Properties":{"id":"20240201213652-th05lp0","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"就比如说，我们想要在 JWT 有效期内废弃一个 JWT 或者更改它的权限的话，并不会立即生效，通常需要等到有效期过后才可以。再比如说，当用户 Logout 的话，JWT 也还有效。除非，我们在后端增加额外的处理逻辑比如将失效的 JWT 存储起来，后端先验证 JWT 是否有效再进行处理。具体的解决办法，我们会在后面的内容中详细介绍到，这里只是简单提一下。"}]},{"ID":"20240201213653-1ba32f7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213653-1ba32f7","updated":"20240201213653"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有效避免了 CSRF 攻击"}]},{"ID":"20240201213654-poqnjho","Type":"NodeParagraph","Properties":{"id":"20240201213654-poqnjho","updated":"20240201213654"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CSRF（Cross Site Request Forgery）"},{"Type":"NodeText","Data":" 一般被翻译为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"跨站请求伪造"},{"Type":"NodeText","Data":"，属于网络攻击领域范围。相比于 SQL 脚本注入、XSS 等安全攻击方式，CSRF 的知名度并没有它们高。但是，它的确是我们开发系统时必须要考虑的安全隐患。就连业内技术标杆 Google 的产品 Gmail 也曾在 2007 年的时候爆出过 CSRF 漏洞，这给 Gmail 的用户造成了很大的损失。"}]},{"ID":"20240201213655-fu0x8ky","Type":"NodeParagraph","Properties":{"id":"20240201213655-fu0x8ky","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那么究竟什么是跨站请求伪造呢？"},{"Type":"NodeText","Data":" 简单来说就是用你的身份去做一些不好的事情（发送一些对你不友好的请求比如恶意转账）。"}]},{"ID":"20240201213656-6bb630g","Type":"NodeParagraph","Properties":{"id":"20240201213656-6bb630g","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"举个简单的例子：小壮登录了某网上银行，他来到了网上银行的帖子区，看到一个帖子下面有一个链接写着“科学理财，年盈利率过万”，小壮好奇的点开了这个链接，结果发现自己的账户少了 10000 元。这是这么回事呢？原来黑客在链接中藏了一个请求，这个请求直接利用小壮的身份给银行发送了一个转账请求，也就是通过你的 Cookie 向银行发出请求。"}]},{"ID":"20240201213657-nxqarji","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"aHRtbA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213657-nxqarji","updated":"20240201213657"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aHRtbA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003ca src=\"http://www.mybank.com/Transfer?bankId=11\u0026money=10000\"\n  \u003e科学理财，年盈利率过万\u003c/a\n\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213658-hj7u7jo","Type":"NodeParagraph","Properties":{"id":"20240201213658-hj7u7jo","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"CSRF 攻击需要依赖 Cookie ，Session 认证中 Cookie 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SessionID"},{"Type":"NodeText","Data":" 是由浏览器发送到服务端的，只要发出请求，Cookie 就会被携带。借助这个特性，即使黑客无法获取你的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SessionID"},{"Type":"NodeText","Data":"，只要让你误点攻击链接，就可以达到攻击效果。"}]},{"ID":"20240201213659-2lcibjh","Type":"NodeParagraph","Properties":{"id":"20240201213659-2lcibjh","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"另外，并不是必须点击链接才可以达到攻击效果，很多时候，只要你打开了某个页面，CSRF 攻击就会发生。"}]},{"ID":"20240201213660-2k80v2x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"aHRtbA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213660-2k80v2x","updated":"20240201213660"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aHRtbA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cimg src=\"http://www.mybank.com/Transfer?bankId=11\u0026money=10000\" /\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213661-xcj39yv","Type":"NodeParagraph","Properties":{"id":"20240201213661-xcj39yv","updated":"20240201213661"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那为什么 JWT 不会存在这种问题呢？"}]},{"ID":"20240201213662-0eoizh4","Type":"NodeParagraph","Properties":{"id":"20240201213662-0eoizh4","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"一般情况下我们使用 JWT 的话，在我们登录成功获得 JWT 之后，一般会选择存放在 localStorage 中。前端的每一个请求后续都会附带上这个 JWT，整个过程压根不会涉及到 Cookie。因此，即使你点击了非法链接发送了请求到服务端，这个非法请求也是不会携带 JWT 的，所以这个请求将是非法的。"}]},{"ID":"20240201213663-dywh0oe","Type":"NodeParagraph","Properties":{"id":"20240201213663-dywh0oe","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"总结来说就一句话："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用 JWT 进行身份验证不需要依赖 Cookie ，因此可以避免 CSRF 攻击。"}]},{"ID":"20240201213664-rfhkvoa","Type":"NodeParagraph","Properties":{"id":"20240201213664-rfhkvoa","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"不过，这样也会存在 XSS 攻击的风险。为了避免 XSS 攻击，你可以选择将 JWT 存储在标记为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"httpOnly"},{"Type":"NodeText","Data":" 的 Cookie 中。但是，这样又导致了你必须自己提供 CSRF 保护，因此，实际项目中我们通常也不会这么做。"}]},{"ID":"20240201213665-t61hezc","Type":"NodeParagraph","Properties":{"id":"20240201213665-t61hezc","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"常见的避免 XSS 攻击的方式是过滤掉请求中存在 XSS 攻击风险的可疑字符串。"}]},{"ID":"20240201213666-9pwluyj","Type":"NodeParagraph","Properties":{"id":"20240201213666-9pwluyj","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"在 Spring 项目中，我们一般是通过创建 XSS 过滤器来实现的。"}]},{"ID":"20240201213667-2k5ucng","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213667-2k5ucng","updated":"20240201213667"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class XSSFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n        XSSRequestWrapper wrappedRequest =\n          new XSSRequestWrapper((HttpServletRequest) request);\n        chain.doFilter(wrappedRequest, response);\n    }\n\n    // other methods\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213668-qwcnqjt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213668-qwcnqjt","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"适合移动端应用"}]},{"ID":"20240201213669-f40byh2","Type":"NodeParagraph","Properties":{"id":"20240201213669-f40byh2","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"使用 Session 进行身份认证的话，需要保存一份信息在服务器端，而且这种方式会依赖到 Cookie（需要 Cookie 保存 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SessionId"},{"Type":"NodeText","Data":"），所以不适合移动端。"}]},{"ID":"20240201213670-zz184gz","Type":"NodeParagraph","Properties":{"id":"20240201213670-zz184gz","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"但是，使用 JWT 进行身份认证就不会存在这种问题，因为只要 JWT 可以被客户端存储就能够使用，而且 JWT 还可以跨语言使用。"}]},{"ID":"20240201213671-4wwu5wa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213671-4wwu5wa","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"单点登录友好"}]},{"ID":"20240201213672-cndtc04","Type":"NodeParagraph","Properties":{"id":"20240201213672-cndtc04","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"使用 Session 进行身份认证的话，实现单点登录，需要我们把用户的 Session 信息保存在一台电脑上，并且还会遇到常见的 Cookie 跨域的问题。但是，使用 JWT 进行认证的话， JWT 被保存在客户端，不会存在这些问题。"}]},{"ID":"20240201213673-wjbt0nv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213673-wjbt0nv","updated":"20240201213673"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JWT 身份认证常见问题及解决办法"}]},{"ID":"20240201213674-eav62or","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213674-eav62or","updated":"20240201213674"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注销登录等场景下 JWT 还有效"}]},{"ID":"20240201213675-j4zsqey","Type":"NodeParagraph","Properties":{"id":"20240201213675-j4zsqey","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"与之类似的具体相关场景有："}]},{"ID":"20240201213676-2j28wxo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213676-2j28wxo","updated":"20240201213676"},"Children":[{"ID":"20240201213677-4wka5hw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213677-4wka5hw","updated":"20240201213677"},"Children":[{"ID":"20240201213678-5tgraki","Type":"NodeParagraph","Properties":{"id":"20240201213678-5tgraki","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"退出登录;"}]}]},{"ID":"20240201213679-p77aiqt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-p77aiqt","updated":"20240201213679"},"Children":[{"ID":"20240201213680-23h9b9r","Type":"NodeParagraph","Properties":{"id":"20240201213680-23h9b9r","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"修改密码;"}]}]},{"ID":"20240201213681-ecd3ygt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-ecd3ygt","updated":"20240201213681"},"Children":[{"ID":"20240201213682-hi49vvu","Type":"NodeParagraph","Properties":{"id":"20240201213682-hi49vvu","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"服务端修改了某个用户具有的权限或者角色；"}]}]},{"ID":"20240201213683-c586i3k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213683-c586i3k","updated":"20240201213683"},"Children":[{"ID":"20240201213684-w7ugold","Type":"NodeParagraph","Properties":{"id":"20240201213684-w7ugold","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"用户的帐户被封禁/删除；"}]}]},{"ID":"20240201213685-zh1oq7p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213685-zh1oq7p","updated":"20240201213685"},"Children":[{"ID":"20240201213686-6f8z7d4","Type":"NodeParagraph","Properties":{"id":"20240201213686-6f8z7d4","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"用户被服务端强制注销；"}]}]},{"ID":"20240201213687-jdhtcrj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213687-jdhtcrj","updated":"20240201213687"},"Children":[{"ID":"20240201213688-0l5ncad","Type":"NodeParagraph","Properties":{"id":"20240201213688-0l5ncad","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"用户被踢下线；"}]}]},{"ID":"20240201213689-d5yisg3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213689-d5yisg3","updated":"20240201213689"},"Children":[{"ID":"20240201213690-hcdrr77","Type":"NodeParagraph","Properties":{"id":"20240201213690-hcdrr77","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213691-j2143sq","Type":"NodeParagraph","Properties":{"id":"20240201213691-j2143sq","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"这个问题不存在于 Session 认证方式中，因为在 Session 认证方式中，遇到这种情况的话服务端删除对应的 Session 记录即可。但是，使用 JWT 认证的方式就不好解决了。我们也说过了，JWT 一旦派发出去，如果后端不增加其他逻辑的话，它在失效之前都是有效的。"}]},{"ID":"20240201213692-5uuuj7t","Type":"NodeParagraph","Properties":{"id":"20240201213692-5uuuj7t","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"那我们如何解决这个问题呢？查阅了很多资料，我简单总结了下面 4 种方案："}]},{"ID":"20240201213693-9eufpcq","Type":"NodeParagraph","Properties":{"id":"20240201213693-9eufpcq","updated":"20240201213693"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、将 JWT 存入内存数据库"}]},{"ID":"20240201213694-pihvd00","Type":"NodeParagraph","Properties":{"id":"20240201213694-pihvd00","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"将 JWT 存入 DB 中，Redis 内存数据库在这里是不错的选择。如果需要让某个 JWT 失效就直接从 Redis 中删除这个 JWT 即可。但是，这样会导致每次使用 JWT 发送请求都要先从 DB 中查询 JWT 是否存在的步骤，而且违背了 JWT 的无状态原则。"}]},{"ID":"20240201213695-my238lv","Type":"NodeParagraph","Properties":{"id":"20240201213695-my238lv","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、黑名单机制"}]},{"ID":"20240201213696-rjrufzv","Type":"NodeParagraph","Properties":{"id":"20240201213696-rjrufzv","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"和上面的方式类似，使用内存数据库比如 Redis 维护一个黑名单，如果想让某个 JWT 失效的话就直接将这个 JWT 加入到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"黑名单"},{"Type":"NodeText","Data":" 即可。然后，每次使用 JWT 进行请求的话都会先判断这个 JWT 是否存在于黑名单中。"}]},{"ID":"20240201213697-vtj72li","Type":"NodeParagraph","Properties":{"id":"20240201213697-vtj72li","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"前两种方案的核心在于将有效的 JWT 存储起来或者将指定的 JWT 拉入黑名单。"}]},{"ID":"20240201213698-3jbwayr","Type":"NodeParagraph","Properties":{"id":"20240201213698-3jbwayr","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"虽然这两种方案都违背了 JWT 的无状态原则，但是一般实际项目中我们通常还是会使用这两种方案。"}]},{"ID":"20240201213699-hex01yi","Type":"NodeParagraph","Properties":{"id":"20240201213699-hex01yi","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3、修改密钥 (Secret)"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213700-2yi5sns","Type":"NodeParagraph","Properties":{"id":"20240201213700-2yi5sns","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"我们为每个用户都创建一个专属密钥，如果我们想让某个 JWT 失效，我们直接修改对应用户的密钥即可。但是，这样相比于前两种引入内存数据库带来了危害更大："}]},{"ID":"20240201213701-fgvreaa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213701-fgvreaa","updated":"20240201213701"},"Children":[{"ID":"20240201213702-vdjt6i2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213702-vdjt6i2","updated":"20240201213702"},"Children":[{"ID":"20240201213703-953gan1","Type":"NodeParagraph","Properties":{"id":"20240201213703-953gan1","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"如果服务是分布式的，则每次发出新的 JWT 时都必须在多台机器同步密钥。为此，你需要将密钥存储在数据库或其他外部服务中，这样和 Session 认证就没太大区别了。"}]}]},{"ID":"20240201213704-gcgc0e4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-gcgc0e4","updated":"20240201213704"},"Children":[{"ID":"20240201213705-v7xt40h","Type":"NodeParagraph","Properties":{"id":"20240201213705-v7xt40h","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"如果用户同时在两个浏览器打开系统，或者在手机端也打开了系统，如果它从一个地方将账号退出，那么其他地方都要重新进行登录，这是不可取的。"}]}]}]},{"ID":"20240201213706-bijkgcv","Type":"NodeParagraph","Properties":{"id":"20240201213706-bijkgcv","updated":"20240201213706"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4、保持令牌的有效期限短并经常轮换"}]},{"ID":"20240201213707-sw61mp3","Type":"NodeParagraph","Properties":{"id":"20240201213707-sw61mp3","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"很简单的一种方式。但是，会导致用户登录状态不会被持久记录，而且需要用户经常登录。"}]},{"ID":"20240201213708-smike4t","Type":"NodeParagraph","Properties":{"id":"20240201213708-smike4t","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"另外，对于修改密码后 JWT 还有效问题的解决还是比较容易的。说一种我觉得比较好的方式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用用户的密码的哈希值对 JWT 进行签名。因此，如果密码更改，则任何先前的令牌将自动无法验证。"}]},{"ID":"20240201213709-4v8g849","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213709-4v8g849","updated":"20240201213709"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JWT 的续签问题"}]},{"ID":"20240201213710-9llz2ky","Type":"NodeParagraph","Properties":{"id":"20240201213710-9llz2ky","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"JWT 有效期一般都建议设置的不太长，那么 JWT 过期后如何认证，如何实现动态刷新 JWT，避免用户经常需要重新登录？"}]},{"ID":"20240201213711-aoamao7","Type":"NodeParagraph","Properties":{"id":"20240201213711-aoamao7","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"我们先来看看在 Session 认证中一般的做法："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"假如 Session 的有效期 30 分钟，如果 30 分钟内用户有访问，就把 Session 有效期延长 30 分钟。"}]},{"ID":"20240201213712-45ab8s0","Type":"NodeParagraph","Properties":{"id":"20240201213712-45ab8s0","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"JWT 认证的话，我们应该如何解决续签问题呢？查阅了很多资料，我简单总结了下面 4 种方案："}]},{"ID":"20240201213713-8l1zpbu","Type":"NodeParagraph","Properties":{"id":"20240201213713-8l1zpbu","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、类似于 Session 认证中的做法"}]},{"ID":"20240201213714-t4r1nmr","Type":"NodeParagraph","Properties":{"id":"20240201213714-t4r1nmr","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"这种方案满足于大部分场景。假设服务端给的 JWT 有效期设置为 30 分钟，服务端每次进行校验时，如果发现 JWT 的有效期马上快过期了，服务端就重新生成 JWT 给客户端。客户端每次请求都检查新旧 JWT，如果不一致，则更新本地的 JWT。这种做法的问题是仅仅在快过期的时候请求才会更新 JWT ,对客户端不是很友好。"}]},{"ID":"20240201213715-l7513qc","Type":"NodeParagraph","Properties":{"id":"20240201213715-l7513qc","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、每次请求都返回新 JWT"}]},{"ID":"20240201213716-r6tvmx6","Type":"NodeParagraph","Properties":{"id":"20240201213716-r6tvmx6","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"这种方案的的思路很简单，但是，开销会比较大，尤其是在服务端要存储维护 JWT 的情况下。"}]},{"ID":"20240201213717-funxkh6","Type":"NodeParagraph","Properties":{"id":"20240201213717-funxkh6","updated":"20240201213717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3、JWT 有效期设置到半夜"}]},{"ID":"20240201213718-2w7zg56","Type":"NodeParagraph","Properties":{"id":"20240201213718-2w7zg56","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"这种方案是一种折衷的方案，保证了大部分用户白天可以正常登录，适用于对安全性要求不高的系统。"}]},{"ID":"20240201213719-yufdmjx","Type":"NodeParagraph","Properties":{"id":"20240201213719-yufdmjx","updated":"20240201213719"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4、用户登录返回两个 JWT"}]},{"ID":"20240201213720-h5pi3qh","Type":"NodeParagraph","Properties":{"id":"20240201213720-h5pi3qh","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"第一个是 accessJWT ，它的过期时间 JWT 本身的过期时间比如半个小时，另外一个是 refreshJWT 它的过期时间更长一点比如为 1 天。客户端登录后，将 accessJWT 和 refreshJWT 保存在本地，每次访问将 accessJWT 传给服务端。服务端校验 accessJWT 的有效性，如果过期的话，就将 refreshJWT 传给服务端。如果有效，服务端就生成新的 accessJWT 给客户端。否则，客户端就重新登录即可。"}]},{"ID":"20240201213721-rne8zwt","Type":"NodeParagraph","Properties":{"id":"20240201213721-rne8zwt","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"这种方案的不足是："}]},{"ID":"20240201213722-ego1mvf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213722-ego1mvf","updated":"20240201213722"},"Children":[{"ID":"20240201213723-cgtyttu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-cgtyttu","updated":"20240201213723"},"Children":[{"ID":"20240201213724-8j171e0","Type":"NodeParagraph","Properties":{"id":"20240201213724-8j171e0","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"需要客户端来配合；"}]}]},{"ID":"20240201213725-pz9wtcc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213725-pz9wtcc","updated":"20240201213725"},"Children":[{"ID":"20240201213726-gxpy05p","Type":"NodeParagraph","Properties":{"id":"20240201213726-gxpy05p","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"用户注销的时候需要同时保证两个 JWT 都无效；"}]}]},{"ID":"20240201213727-be4zflo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213727-be4zflo","updated":"20240201213727"},"Children":[{"ID":"20240201213728-wmj1yun","Type":"NodeParagraph","Properties":{"id":"20240201213728-wmj1yun","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"重新请求获取 JWT 的过程中会有短暂 JWT 不可用的情况（可以通过在客户端设置定时器，当 accessJWT 快过期的时候，提前去通过 refreshJWT 获取新的 accessJWT）;"}]}]},{"ID":"20240201213729-3sg0p2n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213729-3sg0p2n","updated":"20240201213729"},"Children":[{"ID":"20240201213730-byrq753","Type":"NodeParagraph","Properties":{"id":"20240201213730-byrq753","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"存在安全问题，只要拿到了未过期的 refreshJWT 就一直可以获取到 accessJWT。"}]}]}]},{"ID":"20240201213731-r203rjy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213731-r203rjy","updated":"20240201213731"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213732-4em2yz8","Type":"NodeParagraph","Properties":{"id":"20240201213732-4em2yz8","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"JWT 其中一个很重要的优势是无状态，但实际上，我们想要在实际项目中合理使用 JWT 的话，也还是需要保存 JWT 信息。"}]},{"ID":"20240201213733-oh9yv2e","Type":"NodeParagraph","Properties":{"id":"20240201213733-oh9yv2e","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"JWT 也不是银弹，也有很多缺陷，具体是选择 JWT 还是 Session 方案还是要看项目的具体需求。万万不可尬吹 JWT，而看不起其他身份认证方案。"}]},{"ID":"20240201213734-07ebll4","Type":"NodeParagraph","Properties":{"id":"20240201213734-07ebll4","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"另外，不用 JWT 直接使用普通的 Token(随机生成，不包含具体的信息) 结合 Redis 来做身份认证也是可以的。我在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/open-source-project/","TextMarkTextContent":"「优质开源项目推荐」"},{"Type":"NodeText","Data":"的第 8 期推荐过的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/dromara/sa-token","TextMarkTextContent":"Sa-Token"},{"Type":"NodeText","Data":" 这个项目是一个比较完善的 基于 JWT 的身份认证解决方案，支持自动续签、踢人下线、账号封禁、同端互斥登录等功能，感兴趣的朋友可以看看。"}]},{"ID":"20240201213735-8k2mydm","Type":"NodeParagraph","Properties":{"id":"20240201213735-8k2mydm","updated":"20240201213735"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/system-design/jwt/image-20220609170714725.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213736-2mfbbto","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213736-2mfbbto","updated":"20240201213736"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213737-1h5imma","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-1h5imma","updated":"20240201213737"},"Children":[{"ID":"20240201213738-mwk84xq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-mwk84xq","updated":"20240201213738"},"Children":[{"ID":"20240201213739-9t9kiva","Type":"NodeParagraph","Properties":{"id":"20240201213739-9t9kiva","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"JWT 超详细分析："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://learnku.com/articles/17883","TextMarkTextContent":"https://learnku.com/articles/17883"}]}]},{"ID":"20240201213740-gp3ccqp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-gp3ccqp","updated":"20240201213740"},"Children":[{"ID":"20240201213741-c6t10on","Type":"NodeParagraph","Properties":{"id":"20240201213741-c6t10on","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"How to log out when using JWT："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://medium.com/devgorilla/how-to-log-out-when-using-jwt-a8c7823e8a6","TextMarkTextContent":"https://medium.com/devgorilla/how-to-log-out-when-using-jwt-a8c7823e8a6"}]}]},{"ID":"20240201213742-zt27z0j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-zt27z0j","updated":"20240201213742"},"Children":[{"ID":"20240201213743-ioqjnrr","Type":"NodeParagraph","Properties":{"id":"20240201213743-ioqjnrr","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"CSRF protection with JSON Web JWTs："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://medium.com/@agungsantoso/csrf-protection-with-json-web-JWTs-83e0f2fcbcc","TextMarkTextContent":"https://medium.com/@agungsantoso/csrf-protection-with-json-web-JWTs-83e0f2fcbcc"}]}]},{"ID":"20240201213744-sne3s87","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-sne3s87","updated":"20240201213744"},"Children":[{"ID":"20240201213745-oiguukm","Type":"NodeParagraph","Properties":{"id":"20240201213745-oiguukm","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"Invalidating JSON Web JWTs："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://stackoverflow.com/questions/21978658/invalidating-json-web-JWTs","TextMarkTextContent":"https://stackoverflow.com/questions/21978658/invalidating-json-web-JWTs"}]}]}]},{"ID":"20240201213746-b4ob9yd","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213746-b4ob9yd","updated":"20240201213746"}}]}