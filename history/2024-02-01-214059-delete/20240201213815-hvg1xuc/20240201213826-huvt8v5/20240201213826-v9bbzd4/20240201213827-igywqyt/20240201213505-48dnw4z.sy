{"ID":"20240201213505-48dnw4z","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213505-48dnw4z","title":"schedule-task","updated":"20240201213505"},"Children":[{"ID":"20240201213506-jg36b8b","Type":"NodeThematicBreak","Properties":{"id":"20240201213506-jg36b8b","updated":"20240201213506"}},{"ID":"20240201213507-frvz61l","Type":"NodeParagraph","Properties":{"id":"20240201213507-frvz61l","updated":"20240201213507"},"Children":[{"Type":"NodeText","Data":"title: Java 定时任务详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 系统设计"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"icon: \"time\""},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]},{"ID":"20240201213508-f6hqxw0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213508-f6hqxw0","updated":"20240201213508"},"Children":[{"ID":"20240201213509-xu3t647","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213509-xu3t647","updated":"20240201213509"},"Children":[{"ID":"20240201213510-orb6pj5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213510-orb6pj5","updated":"20240201213510"},"Children":[{"ID":"20240201213511-ald9cn0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213511-ald9cn0","updated":"20240201213511"},"Children":[{"ID":"20240201213512-h979wbw","Type":"NodeParagraph","Properties":{"id":"20240201213512-h979wbw","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213513-xbv9eyd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213513-xbv9eyd","updated":"20240201213513"},"Children":[{"ID":"20240201213514-oot5cri","Type":"NodeParagraph","Properties":{"id":"20240201213514-oot5cri","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 定时任务,Quartz,Elastic-Job,XXL-JOB,PowerJob"}]}]}]}]},{"ID":"20240201213515-i2enuxg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213515-i2enuxg","updated":"20240201213515"},"Children":[{"ID":"20240201213516-l07ao5g","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213516-l07ao5g","updated":"20240201213516"},"Children":[{"ID":"20240201213517-c7mevwo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213517-c7mevwo","updated":"20240201213517"},"Children":[{"ID":"20240201213518-dw8xuf4","Type":"NodeParagraph","Properties":{"id":"20240201213518-dw8xuf4","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213519-2f6gon3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213519-2f6gon3","updated":"20240201213519"},"Children":[{"ID":"20240201213520-b8fuz25","Type":"NodeParagraph","Properties":{"id":"20240201213520-b8fuz25","updated":"20240201213520"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: XXL-JOB 2015 年推出，已经经过了很多年的考验。XXL-JOB 轻量级，并且使用起来非常简单。虽然存在性能瓶颈，但是，在绝大多数情况下，对于企业的基本需求来说是没有影响的。PowerJob 属于分布式任务调度领域里的新星，其稳定性还有待继续考察。ElasticJob 由于在架构设计上是基于 Zookeeper ，而 XXL-JOB 是基于数据库，性能方面的话，ElasticJob 略胜一筹。"}]}]}]}]}]},{"ID":"20240201213521-3n49ce7","Type":"NodeThematicBreak","Properties":{"id":"20240201213521-3n49ce7","updated":"20240201213521"}},{"ID":"20240201213522-vwb2k42","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213522-vwb2k42","updated":"20240201213522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么需要定时任务？"}]},{"ID":"20240201213523-h0auy3y","Type":"NodeParagraph","Properties":{"id":"20240201213523-h0auy3y","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"我们来看一下几个非常常见的业务场景："}]},{"ID":"20240201213524-wx731j7","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213524-wx731j7","updated":"20240201213524"},"Children":[{"ID":"20240201213525-ajp0msm","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213525-ajp0msm","updated":"20240201213525"},"Children":[{"ID":"20240201213526-mtx1x0d","Type":"NodeParagraph","Properties":{"id":"20240201213526-mtx1x0d","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"某系统凌晨 1 点要进行数据备份。"}]}]},{"ID":"20240201213527-14r655n","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213527-14r655n","updated":"20240201213527"},"Children":[{"ID":"20240201213528-m1i0bt2","Type":"NodeParagraph","Properties":{"id":"20240201213528-m1i0bt2","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"某电商平台，用户下单半个小时未支付的情况下需要自动取消订单。"}]}]},{"ID":"20240201213529-4j2m2o7","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213529-4j2m2o7","updated":"20240201213529"},"Children":[{"ID":"20240201213530-chynvfs","Type":"NodeParagraph","Properties":{"id":"20240201213530-chynvfs","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"某媒体聚合平台，每 10 分钟动态抓取某某网站的数据为自己所用。"}]}]},{"ID":"20240201213531-35kgtbj","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213531-35kgtbj","updated":"20240201213531"},"Children":[{"ID":"20240201213532-dcchpvr","Type":"NodeParagraph","Properties":{"id":"20240201213532-dcchpvr","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"某博客平台，支持定时发送文章。"}]}]},{"ID":"20240201213533-ubt5w7j","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213533-ubt5w7j","updated":"20240201213533"},"Children":[{"ID":"20240201213534-6psjugq","Type":"NodeParagraph","Properties":{"id":"20240201213534-6psjugq","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"某基金平台，每晚定时计算用户当日收益情况并推送给用户最新的数据。"}]}]},{"ID":"20240201213535-svce6kg","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213535-svce6kg","updated":"20240201213535"},"Children":[{"ID":"20240201213536-3wbpjhd","Type":"NodeParagraph","Properties":{"id":"20240201213536-3wbpjhd","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213537-51ok6zd","Type":"NodeParagraph","Properties":{"id":"20240201213537-51ok6zd","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"这些场景往往都要求我们在某个特定的时间去做某个事情，也就是定时或者延时去做某个事情。"}]},{"ID":"20240201213538-ckq5wu0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213538-ckq5wu0","updated":"20240201213538"},"Children":[{"ID":"20240201213539-7h4bbin","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213539-7h4bbin","updated":"20240201213539"},"Children":[{"ID":"20240201213540-tzy48bc","Type":"NodeParagraph","Properties":{"id":"20240201213540-tzy48bc","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"定时任务：在指定时间点执行特定的任务，例如每天早上 8 点，每周一下午 3 点等。定时任务可以用来做一些周期性的工作，如数据备份，日志清理，报表生成等。"}]}]},{"ID":"20240201213541-072p318","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-072p318","updated":"20240201213541"},"Children":[{"ID":"20240201213542-xxcf5mk","Type":"NodeParagraph","Properties":{"id":"20240201213542-xxcf5mk","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"延时任务：一定的延迟时间后执行特定的任务，例如 10 分钟后，3 小时后等。延时任务可以用来做一些异步的工作，如订单取消，推送通知，红包撤回等。"}]}]}]},{"ID":"20240201213543-lqv1n8l","Type":"NodeParagraph","Properties":{"id":"20240201213543-lqv1n8l","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"尽管二者的适用场景有所区别，但它们的核心思想都是将任务的执行时间安排在未来的某个点上，以达到预期的调度效果。"}]},{"ID":"20240201213544-21sz7oi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213544-21sz7oi","updated":"20240201213544"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"单机定时任务"}]},{"ID":"20240201213545-2j8zais","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213545-2j8zais","updated":"20240201213545"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Timer"}]},{"ID":"20240201213546-si2piuv","Type":"NodeParagraph","Properties":{"id":"20240201213546-si2piuv","updated":"20240201213546"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.Timer"},{"Type":"NodeText","Data":"是 JDK 1.3 开始就已经支持的一种定时任务的实现方式。"}]},{"ID":"20240201213547-tq0sb19","Type":"NodeParagraph","Properties":{"id":"20240201213547-tq0sb19","updated":"20240201213547"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 内部使用一个叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TaskQueue"},{"Type":"NodeText","Data":" 的类存放定时任务，它是一个基于最小堆实现的优先级队列。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TaskQueue"},{"Type":"NodeText","Data":" 会按照任务距离下一次执行时间的大小将任务排序，保证在堆顶的任务最先执行。这样在需要执行任务时，每次只需要取出堆顶的任务运行即可！"}]},{"ID":"20240201213548-j4m9kty","Type":"NodeParagraph","Properties":{"id":"20240201213548-j4m9kty","updated":"20240201213548"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 使用起来比较简单，通过下面的方式我们就能创建一个 1s 之后执行的定时任务。"}]},{"ID":"20240201213549-a041qq4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213549-a041qq4","updated":"20240201213549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 示例代码：\nTimerTask task = new TimerTask() {\n    public void run() {\n        System.out.println(\"当前时间: \" + new Date() + \"n\" +\n                \"线程名称: \" + Thread.currentThread().getName());\n    }\n};\nSystem.out.println(\"当前时间: \" + new Date() + \"n\" +\n        \"线程名称: \" + Thread.currentThread().getName());\nTimer timer = new Timer(\"Timer\");\nlong delay = 1000L;\ntimer.schedule(task, delay);\n\n\n//输出：\n当前时间: Fri May 28 15:18:47 CST 2021n线程名称: main\n当前时间: Fri May 28 15:18:48 CST 2021n线程名称: Timer\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213550-bg27k8p","Type":"NodeParagraph","Properties":{"id":"20240201213550-bg27k8p","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"不过其缺陷较多，比如一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 一个线程，这就导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 的任务的执行只能串行执行，一个任务执行时间过长的话会影响其他任务（性能非常差），再比如发生异常时任务直接停止（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 只捕获了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterruptedException"},{"Type":"NodeText","Data":" ）。"}]},{"ID":"20240201213551-vrrujva","Type":"NodeParagraph","Properties":{"id":"20240201213551-vrrujva","updated":"20240201213551"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 类上的有一段注释是这样写的："}]},{"ID":"20240201213552-ciwtpwo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"SkFWQQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213552-ciwtpwo","updated":"20240201213552"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"SkFWQQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" * This class does not offer real-time guarantees: it schedules\n * tasks using the \u003ctt\u003eObject.wait(long)\u003c/tt\u003e method.\n *Java 5.0 introduced the {@code java.util.concurrent} package and\n * one of the concurrency utilities therein is the {@link\n * java.util.concurrent.ScheduledThreadPoolExecutor\n * ScheduledThreadPoolExecutor} which is a thread pool for repeatedly\n * executing tasks at a given rate or delay.  It is effectively a more\n * versatile replacement for the {@code Timer}/{@code TimerTask}\n * combination, as it allows multiple service threads, accepts various\n * time units, and doesn't require subclassing {@code TimerTask} (just\n * implement {@code Runnable}).  Configuring {@code\n * ScheduledThreadPoolExecutor} with one thread makes it equivalent to\n * {@code Timer}.\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213553-mds0nej","Type":"NodeParagraph","Properties":{"id":"20240201213553-mds0nej","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"大概的意思就是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledThreadPoolExecutor"},{"Type":"NodeText","Data":" 支持多线程执行定时任务并且功能更强大，是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 的替代品。"}]},{"ID":"20240201213554-ii3ahc0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213554-ii3ahc0","updated":"20240201213554"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ScheduledExecutorService"}]},{"ID":"20240201213555-oz4azt6","Type":"NodeParagraph","Properties":{"id":"20240201213555-oz4azt6","updated":"20240201213555"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledExecutorService"},{"Type":"NodeText","Data":" 是一个接口，有多个实现类，比较常用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledThreadPoolExecutor"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213556-tt7b5dj","Type":"NodeParagraph","Properties":{"id":"20240201213556-tt7b5dj","updated":"20240201213556"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/20210607154324712.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213557-mo2fl6j","Type":"NodeParagraph","Properties":{"id":"20240201213557-mo2fl6j","updated":"20240201213557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledThreadPoolExecutor"},{"Type":"NodeText","Data":" 本身就是一个线程池，支持任务并发执行。并且，其内部使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayedWorkQueue"},{"Type":"NodeText","Data":" 作为任务队列。"}]},{"ID":"20240201213558-p089gt0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213558-p089gt0","updated":"20240201213558"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 示例代码：\nTimerTask repeatedTask = new TimerTask() {\n    @SneakyThrows\n    public void run() {\n        System.out.println(\"当前时间: \" + new Date() + \"n\" +\n                \"线程名称: \" + Thread.currentThread().getName());\n    }\n};\nSystem.out.println(\"当前时间: \" + new Date() + \"n\" +\n        \"线程名称: \" + Thread.currentThread().getName());\nScheduledExecutorService executor = Executors.newScheduledThreadPool(3);\nlong delay  = 1000L;\nlong period = 1000L;\nexecutor.scheduleAtFixedRate(repeatedTask, delay, period, TimeUnit.MILLISECONDS);\nThread.sleep(delay + period * 5);\nexecutor.shutdown();\n//输出：\n当前时间: Fri May 28 15:40:46 CST 2021n线程名称: main\n当前时间: Fri May 28 15:40:47 CST 2021n线程名称: pool-1-thread-1\n当前时间: Fri May 28 15:40:48 CST 2021n线程名称: pool-1-thread-1\n当前时间: Fri May 28 15:40:49 CST 2021n线程名称: pool-1-thread-2\n当前时间: Fri May 28 15:40:50 CST 2021n线程名称: pool-1-thread-2\n当前时间: Fri May 28 15:40:51 CST 2021n线程名称: pool-1-thread-2\n当前时间: Fri May 28 15:40:52 CST 2021n线程名称: pool-1-thread-2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213559-joc9hv9","Type":"NodeParagraph","Properties":{"id":"20240201213559-joc9hv9","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"不论是使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":" 还是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledExecutorService"},{"Type":"NodeText","Data":" 都无法使用 Cron 表达式指定任务执行的具体时间。"}]},{"ID":"20240201213560-jd611gx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213560-jd611gx","updated":"20240201213560"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"DelayQueue"}]},{"ID":"20240201213561-i4fdo3e","Type":"NodeParagraph","Properties":{"id":"20240201213561-i4fdo3e","updated":"20240201213561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayQueue"},{"Type":"NodeText","Data":" 是 JUC 包("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent)"},{"Type":"NodeText","Data":"为我们提供的延迟队列，用于实现延时任务比如订单下单 15 分钟未支付直接取消。它是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BlockingQueue"},{"Type":"NodeText","Data":" 的一种，底层是一个基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityQueue"},{"Type":"NodeText","Data":" 实现的一个无界队列，是线程安全的。关于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityQueue"},{"Type":"NodeText","Data":"可以参考笔者编写的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/collection/priorityqueue-source-code.html","TextMarkTextContent":"PriorityQueue 源码分析"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213562-0jbc37n","Type":"NodeParagraph","Properties":{"id":"20240201213562-0jbc37n","updated":"20240201213562"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"BlockingQueue 的实现类","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/blocking-queue-hierarchy.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213563-0b6q4wv","Type":"NodeParagraph","Properties":{"id":"20240201213563-0b6q4wv","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayQueue"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer/TimerTask"},{"Type":"NodeText","Data":" 都可以用于实现定时任务调度，但是它们的实现方式不同。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayQueue"},{"Type":"NodeText","Data":" 是基于优先级队列和堆排序算法实现的，可以实现多个任务按照时间先后顺序执行；而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer/TimerTask"},{"Type":"NodeText","Data":" 是基于单线程实现的，只能按照任务的执行顺序依次执行，如果某个任务执行时间过长，会影响其他任务的执行。另外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayQueue"},{"Type":"NodeText","Data":" 还支持动态添加和移除任务，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer/TimerTask"},{"Type":"NodeText","Data":" 只能在创建时指定任务。"}]},{"ID":"20240201213564-anfoy30","Type":"NodeParagraph","Properties":{"id":"20240201213564-anfoy30","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayQueue"},{"Type":"NodeText","Data":" 的详细介绍，请参考我写的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://javaguide.cn/java/collection/delayqueue-source-code.html","TextMarkTextContent":"DelayQueue"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/collection/delayqueue-source-code.html","TextMarkTextContent":" 源码分析"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213565-kkt2r9n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213565-kkt2r9n","updated":"20240201213565"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Task"}]},{"ID":"20240201213566-zpev1ee","Type":"NodeParagraph","Properties":{"id":"20240201213566-zpev1ee","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"我们直接通过 Spring 提供的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Scheduled"},{"Type":"NodeText","Data":" 注解即可定义定时任务，非常方便！"}]},{"ID":"20240201213567-g9hbmg8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213567-g9hbmg8","updated":"20240201213567"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * cron：使用Cron表达式。　每分钟的1，2秒运行\n */\n@Scheduled(cron = \"1-2 * * * * ? \")\npublic void reportCurrentTimeWithCronExpression() {\n  log.info(\"Cron Expression: The time is now {}\", dateFormat.format(new Date()));\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213568-ezvp1te","Type":"NodeParagraph","Properties":{"id":"20240201213568-ezvp1te","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"我在大学那会做的一个 SSM 的企业级项目，就是用的 Spring Task 来做的定时任务。"}]},{"ID":"20240201213569-en9cjc1","Type":"NodeParagraph","Properties":{"id":"20240201213569-en9cjc1","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"并且，Spring Task 还是支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cron 表达式"},{"Type":"NodeText","Data":" 的。Cron 表达式主要用于定时作业(定时任务)系统定义执行时间或执行频率的表达式，非常厉害，你可以通过 Cron 表达式进行设置定时任务每天或者每个月什么时候执行等等操作。咱们要学习定时任务的话，Cron 表达式是一定是要重点关注的。推荐一个在线 Cron 表达式生成器："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://cron.qqe2.com/","TextMarkTextContent":"http://cron.qqe2.com/"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213570-z7ck1md","Type":"NodeParagraph","Properties":{"id":"20240201213570-z7ck1md","updated":"20240201213570"},"Children":[{"Type":"NodeText","Data":"但是，Spring 自带的定时调度只支持单机，并且提供的功能比较单一。之前写过一篇文章:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==\u0026mid=2247485563\u0026idx=1\u0026sn=7419341f04036a10b141b74624a3f8c9\u0026chksm=cea247b0f9d5cea6440759e6d49b4e77d06f4c99470243a10c1463834e873ca90266413fbc92\u0026token=2133161636\u0026lang=zh_CN#rd","TextMarkTextContent":"《5 分钟搞懂如何在 Spring Boot 中 Schedule Tasks》"},{"Type":"NodeText","Data":" ，不了解的小伙伴可以参考一下。"}]},{"ID":"20240201213571-fvup7v2","Type":"NodeParagraph","Properties":{"id":"20240201213571-fvup7v2","updated":"20240201213571"},"Children":[{"Type":"NodeText","Data":"Spring Task 底层是基于 JDK 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledThreadPoolExecutor"},{"Type":"NodeText","Data":" 线程池来实现的。"}]},{"ID":"20240201213572-q0grcil","Type":"NodeParagraph","Properties":{"id":"20240201213572-q0grcil","updated":"20240201213572"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优缺点总结："}]},{"ID":"20240201213573-rf1wyf5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-rf1wyf5","updated":"20240201213573"},"Children":[{"ID":"20240201213574-zi5h5vh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-zi5h5vh","updated":"20240201213574"},"Children":[{"ID":"20240201213575-v13r20n","Type":"NodeParagraph","Properties":{"id":"20240201213575-v13r20n","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"优点：简单，轻量，支持 Cron 表达式"}]}]},{"ID":"20240201213576-1zl4xpi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-1zl4xpi","updated":"20240201213576"},"Children":[{"ID":"20240201213577-rvdv3ag","Type":"NodeParagraph","Properties":{"id":"20240201213577-rvdv3ag","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"缺点：功能单一"}]}]}]},{"ID":"20240201213578-g09f973","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213578-g09f973","updated":"20240201213578"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"时间轮"}]},{"ID":"20240201213579-pm3uqbf","Type":"NodeParagraph","Properties":{"id":"20240201213579-pm3uqbf","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"Kafka、Dubbo、ZooKeeper、Netty、Caffeine、Akka 中都有对时间轮的实现。"}]},{"ID":"20240201213580-hoze265","Type":"NodeParagraph","Properties":{"id":"20240201213580-hoze265","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"时间轮简单来说就是一个环形的队列（底层一般基于数组实现），队列中的每一个元素（时间格）都可以存放一个定时任务列表。"}]},{"ID":"20240201213581-w2fe90g","Type":"NodeParagraph","Properties":{"id":"20240201213581-w2fe90g","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"时间轮中的每个时间格代表了时间轮的基本时间跨度或者说时间精度，假如时间一秒走一个时间格的话，那么这个时间轮的最高精度就是 1 秒（也就是说 3 s 和 3.9s 会在同一个时间格中）。"}]},{"ID":"20240201213582-wdoz7mz","Type":"NodeParagraph","Properties":{"id":"20240201213582-wdoz7mz","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"下图是一个有 12 个时间格的时间轮，转完一圈需要 12 s。当我们需要新建一个 3s 后执行的定时任务，只需要将定时任务放在下标为 3 的时间格中即可。当我们需要新建一个 9s 后执行的定时任务，只需要将定时任务放在下标为 9 的时间格中即可。"}]},{"ID":"20240201213583-e81p9lh","Type":"NodeParagraph","Properties":{"id":"20240201213583-e81p9lh","updated":"20240201213583"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/one-layers-of-time-wheel.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213584-nfg0nc6","Type":"NodeParagraph","Properties":{"id":"20240201213584-nfg0nc6","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"那当我们需要创建一个 13s 后执行的定时任务怎么办呢？这个时候可以引入一叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"圈数/轮数"},{"Type":"NodeText","Data":" 的概念，也就是说这个任务还是放在下标为 1 的时间格中， 不过它的圈数为 2 。"}]},{"ID":"20240201213585-ube5r1d","Type":"NodeParagraph","Properties":{"id":"20240201213585-ube5r1d","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"除了增加圈数这种方法之外，还有一种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多层次时间轮"},{"Type":"NodeText","Data":" （类似手表），Kafka 采用的就是这种方案。"}]},{"ID":"20240201213586-qqjipkt","Type":"NodeParagraph","Properties":{"id":"20240201213586-qqjipkt","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"针对下图的时间轮，我来举一个例子便于大家理解。"}]},{"ID":"20240201213587-snqyuwo","Type":"NodeParagraph","Properties":{"id":"20240201213587-snqyuwo","updated":"20240201213587"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/three-layers-of-time-wheel.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213588-incl8dj","Type":"NodeParagraph","Properties":{"id":"20240201213588-incl8dj","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"上图的时间轮(ms -\u003e s)，第 1 层的时间精度为 1 ，第 2 层的时间精度为 20 ，第 3 层的时间精度为 400。假如我们需要添加一个 350s 后执行的任务 A 的话（当前时间是 0s），这个任务会被放在第 2 层（因为第二层的时间跨度为 20"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":"20=400\u003e350）的第 350/20=17 个时间格子。"}]},{"ID":"20240201213589-ulrt0jq","Type":"NodeParagraph","Properties":{"id":"20240201213589-ulrt0jq","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"当第一层转了 17 圈之后，时间过去了 340s ，第 2 层的指针此时来到第 17 个时间格子。此时，第 2 层第 17 个格子的任务会被移动到第 1 层。"}]},{"ID":"20240201213590-lpecgmk","Type":"NodeParagraph","Properties":{"id":"20240201213590-lpecgmk","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"任务 A 当前是 10s 之后执行，因此它会被移动到第 1 层的第 10 个时间格子。"}]},{"ID":"20240201213591-yxf946m","Type":"NodeParagraph","Properties":{"id":"20240201213591-yxf946m","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"这里在层与层之间的移动也叫做时间轮的升降级。参考手表来理解就好！"}]},{"ID":"20240201213592-66vvdo6","Type":"NodeParagraph","Properties":{"id":"20240201213592-66vvdo6","updated":"20240201213592"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间轮比较适合任务数量比较多的定时任务场景，它的任务写入和执行的时间复杂度都是 0（1）。"}]},{"ID":"20240201213593-cv48jhx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213593-cv48jhx","updated":"20240201213593"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式定时任务"}]},{"ID":"20240201213594-a50hafi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213594-a50hafi","updated":"20240201213594"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis"}]},{"ID":"20240201213595-0auxv14","Type":"NodeParagraph","Properties":{"id":"20240201213595-0auxv14","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"Redis 是可以用来做延时任务的，基于 Redis 实现延时任务的功能无非就下面两种方案："}]},{"ID":"20240201213596-g8eaj00","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213596-g8eaj00","updated":"20240201213596"},"Children":[{"ID":"20240201213597-6c3ycab","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213597-6c3ycab","updated":"20240201213597"},"Children":[{"ID":"20240201213598-nnf38io","Type":"NodeParagraph","Properties":{"id":"20240201213598-nnf38io","updated":"20240201213598"},"Children":[{"Type":"NodeText","Data":"Redis 过期事件监听"}]}]},{"ID":"20240201213599-wd93o3z","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213599-wd93o3z","updated":"20240201213599"},"Children":[{"ID":"20240201213600-34j1sx8","Type":"NodeParagraph","Properties":{"id":"20240201213600-34j1sx8","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"Redisson 内置的延时队列"}]}]}]},{"ID":"20240201213601-kfeurvf","Type":"NodeParagraph","Properties":{"id":"20240201213601-kfeurvf","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"这部分内容的详细介绍我放在了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/zhuanlan/back-end-interview-high-frequency-system-design-and-scenario-questions.html","TextMarkTextContent":"《后端面试高频系统设计\u0026amp;场景题》"},{"Type":"NodeText","Data":"中，有需要的同学可以进入星球后阅读学习。篇幅太多，这里就不重复分享了。"}]},{"ID":"20240201213602-4oqdbo2","Type":"NodeParagraph","Properties":{"id":"20240201213602-4oqdbo2","updated":"20240201213602"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"《后端面试高频系统设计\u0026场景题》","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/xingqiu/back-end-interview-high-frequency-system-design-and-scenario-questions-fengmian.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213603-n39k55y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213603-n39k55y","updated":"20240201213603"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MQ"}]},{"ID":"20240201213604-cpv5mt9","Type":"NodeParagraph","Properties":{"id":"20240201213604-cpv5mt9","updated":"20240201213604"},"Children":[{"Type":"NodeText","Data":"大部分消息队列，例如 RocketMQ、RabbitMQ，都支持定时/延时消息。定时消息和延时消息本质其实是相同的，都是服务端根据消息设置的定时时间在某一固定时刻将消息投递给消费者消费。"}]},{"ID":"20240201213605-xsfhv60","Type":"NodeParagraph","Properties":{"id":"20240201213605-xsfhv60","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"不过，在使用 MQ 定时消息之前一定要看清楚其使用限制，以免不适合项目需求，例如 RocketMQ 定时时长最大值默认为 24 小时且不支持自定义修改、只支持 18 个 Level 的延时并不支持任意时间。"}]},{"ID":"20240201213606-tvbpgym","Type":"NodeParagraph","Properties":{"id":"20240201213606-tvbpgym","updated":"20240201213606"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优缺点总结："}]},{"ID":"20240201213607-0zkyd28","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213607-0zkyd28","updated":"20240201213607"},"Children":[{"ID":"20240201213608-pmrwgeo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-pmrwgeo","updated":"20240201213608"},"Children":[{"ID":"20240201213609-10mft9j","Type":"NodeParagraph","Properties":{"id":"20240201213609-10mft9j","updated":"20240201213609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：可以与 Spring 集成、支持分布式、支持集群、性能不错"}]}]},{"ID":"20240201213610-gfzywy6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-gfzywy6","updated":"20240201213610"},"Children":[{"ID":"20240201213611-nunhqiv","Type":"NodeParagraph","Properties":{"id":"20240201213611-nunhqiv","updated":"20240201213611"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：功能性较差、不灵活、需要保障消息可靠性"}]}]}]},{"ID":"20240201213612-65uur7o","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213612-65uur7o","updated":"20240201213612"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式任务调度框架"}]},{"ID":"20240201213613-2p8o83s","Type":"NodeParagraph","Properties":{"id":"20240201213613-2p8o83s","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"如果我们需要一些高级特性比如支持任务在分布式场景下的分片和高可用的话，我们就需要用到分布式任务调度框架了。"}]},{"ID":"20240201213614-dyfmfte","Type":"NodeParagraph","Properties":{"id":"20240201213614-dyfmfte","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"通常情况下，一个分布式定时任务的执行往往涉及到下面这些角色："}]},{"ID":"20240201213615-pq236k8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213615-pq236k8","updated":"20240201213615"},"Children":[{"ID":"20240201213616-07mqhcn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-07mqhcn","updated":"20240201213616"},"Children":[{"ID":"20240201213617-4ta080y","Type":"NodeParagraph","Properties":{"id":"20240201213617-4ta080y","updated":"20240201213617"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任务"},{"Type":"NodeText","Data":"：首先肯定是要执行的任务，这个任务就是具体的业务逻辑比如定时发送文章。"}]}]},{"ID":"20240201213618-ft3cgfy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213618-ft3cgfy","updated":"20240201213618"},"Children":[{"ID":"20240201213619-kbug07m","Type":"NodeParagraph","Properties":{"id":"20240201213619-kbug07m","updated":"20240201213619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"调度器"},{"Type":"NodeText","Data":"：其次是调度中心，调度中心主要负责任务管理，会分配任务给执行器。"}]}]},{"ID":"20240201213620-fyicjcv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-fyicjcv","updated":"20240201213620"},"Children":[{"ID":"20240201213621-u2pm341","Type":"NodeParagraph","Properties":{"id":"20240201213621-u2pm341","updated":"20240201213621"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"执行器"},{"Type":"NodeText","Data":"：最后就是执行器，执行器接收调度器分派的任务并执行。"}]}]}]},{"ID":"20240201213622-xddffu3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213622-xddffu3","updated":"20240201213622"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Quartz"}]},{"ID":"20240201213623-4v67roy","Type":"NodeParagraph","Properties":{"id":"20240201213623-4v67roy","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"一个很火的开源任务调度框架，完全由 Java 写成。Quartz 可以说是 Java 定时任务领域的老大哥或者说参考标准，其他的任务调度框架基本都是基于 Quartz 开发的，比如当当网的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"elastic-job"},{"Type":"NodeText","Data":"就是基于 Quartz 二次开发之后的分布式调度解决方案。"}]},{"ID":"20240201213624-92ruu44","Type":"NodeParagraph","Properties":{"id":"20240201213624-92ruu44","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"使用 Quartz 可以很方便地与 Spring 集成，并且支持动态添加任务和集群。但是，Quartz 使用起来也比较麻烦，API 繁琐。"}]},{"ID":"20240201213625-626jfh0","Type":"NodeParagraph","Properties":{"id":"20240201213625-626jfh0","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"并且，Quartz 并没有内置 UI 管理控制台，不过你可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/zhaopeiym/quartzui","TextMarkTextContent":"quartzui"},{"Type":"NodeText","Data":" 这个开源项目来解决这个问题。"}]},{"ID":"20240201213626-2prn8fd","Type":"NodeParagraph","Properties":{"id":"20240201213626-2prn8fd","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"另外，Quartz 虽然也支持分布式任务。但是，它是在数据库层面，通过数据库的锁机制做的，有非常多的弊端比如系统侵入性严重、节点负载不均衡。有点伪分布式的味道。"}]},{"ID":"20240201213627-niqmb4x","Type":"NodeParagraph","Properties":{"id":"20240201213627-niqmb4x","updated":"20240201213627"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优缺点总结："}]},{"ID":"20240201213628-nhl0fme","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-nhl0fme","updated":"20240201213628"},"Children":[{"ID":"20240201213629-3vq47xh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-3vq47xh","updated":"20240201213629"},"Children":[{"ID":"20240201213630-04togyu","Type":"NodeParagraph","Properties":{"id":"20240201213630-04togyu","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"优点：可以与 Spring 集成，并且支持动态添加任务和集群。"}]}]},{"ID":"20240201213631-5btpmgg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-5btpmgg","updated":"20240201213631"},"Children":[{"ID":"20240201213632-rlkxhf6","Type":"NodeParagraph","Properties":{"id":"20240201213632-rlkxhf6","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"缺点：分布式支持不友好，不支持任务可视化管理、使用麻烦（相比于其他同类型框架来说）"}]}]}]},{"ID":"20240201213633-ikp2cye","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213633-ikp2cye","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Elastic-Job"}]},{"ID":"20240201213634-r8cpbqe","Type":"NodeParagraph","Properties":{"id":"20240201213634-r8cpbqe","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"ElasticJob 当当网开源的一个面向互联网生态和海量任务的分布式调度解决方案，由两个相互独立的子项目 ElasticJob-Lite 和 ElasticJob-Cloud 组成。"}]},{"ID":"20240201213635-8759n1r","Type":"NodeParagraph","Properties":{"id":"20240201213635-8759n1r","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"ElasticJob-Lite 和 ElasticJob-Cloud 两者的对比如下："}]},{"ID":"20240201213636-14jv6rx","Type":"NodeTable","Data":"|          | ElasticJob-Lite | ElasticJob-Cloud  |\n| :------- | :-------------- | ----------------- |\n| 无中心化 | 是              | 否                |\n| 资源分配 | 不支持          | 支持              |\n| 作业模式 | 常驻            | 常驻 + 瞬时       |\n| 部署依赖 | ZooKeeper       | ZooKeeper + Mesos |","TableAligns":[1,1,0],"Properties":{"id":"20240201213636-14jv6rx","updated":"20240201213636"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ElasticJob-Lite"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ElasticJob-Cloud"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"无中心化"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"是"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"否"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"资源分配"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"作业模式"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"常驻"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"常驻 + 瞬时"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"部署依赖"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ZooKeeper"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ZooKeeper + Mesos"}]}]}]},{"ID":"20240201213637-fl5234m","Type":"NodeParagraph","Properties":{"id":"20240201213637-fl5234m","updated":"20240201213637"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ElasticJob"},{"Type":"NodeText","Data":" 支持任务在分布式场景下的分片和高可用、任务可视化管理等功能。"}]},{"ID":"20240201213638-edj4457","Type":"NodeParagraph","Properties":{"id":"20240201213638-edj4457","updated":"20240201213638"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/elasticjob-feature-list.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213639-p3y4mas","Type":"NodeParagraph","Properties":{"id":"20240201213639-p3y4mas","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"ElasticJob-Lite 的架构设计如下图所示："}]},{"ID":"20240201213640-j6rf144","Type":"NodeParagraph","Properties":{"id":"20240201213640-j6rf144","updated":"20240201213640"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ElasticJob-Lite 的架构设计","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/elasticjob-lite-architecture-design.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213641-y5ywh37","Type":"NodeParagraph","Properties":{"id":"20240201213641-y5ywh37","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"从上图可以看出，Elastic-Job 没有调度中心这一概念，而是使用 ZooKeeper 作为注册中心，注册中心负责协调分配任务到不同的节点上。"}]},{"ID":"20240201213642-hkz3h4x","Type":"NodeParagraph","Properties":{"id":"20240201213642-hkz3h4x","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"Elastic-Job 中的定时调度都是由执行器自行触发，这种设计也被称为去中心化设计（调度和处理都是执行器单独完成）。"}]},{"ID":"20240201213643-aqqpb6o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213643-aqqpb6o","updated":"20240201213643"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\n@ElasticJobConf(name = \"dayJob\", cron = \"0/10 * * * * ?\", shardingTotalCount = 2,\n        shardingItemParameters = \"0=AAAA,1=BBBB\", description = \"简单任务\", failover = true)\npublic class TestJob implements SimpleJob {\n    @Override\n    public void execute(ShardingContext shardingContext) {\n        log.info(\"TestJob任务名：【{}】, 片数：【{}】, param=【{}】\", shardingContext.getJobName(), shardingContext.getShardingTotalCount(),\n                shardingContext.getShardingParameter());\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213644-6xqt426","Type":"NodeParagraph","Properties":{"id":"20240201213644-6xqt426","updated":"20240201213644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"相关地址："}]},{"ID":"20240201213645-rbxp681","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-rbxp681","updated":"20240201213645"},"Children":[{"ID":"20240201213646-2yrzssc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-2yrzssc","updated":"20240201213646"},"Children":[{"ID":"20240201213647-2dj2jmy","Type":"NodeParagraph","Properties":{"id":"20240201213647-2dj2jmy","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"GitHub 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/shardingsphere-elasticjob%E3%80%82","TextMarkTextContent":"https://github.com/apache/shardingsphere-elasticjob。"}]}]},{"ID":"20240201213648-6j1oeg9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-6j1oeg9","updated":"20240201213648"},"Children":[{"ID":"20240201213649-xy8cpo7","Type":"NodeParagraph","Properties":{"id":"20240201213649-xy8cpo7","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"官方网站："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://shardingsphere.apache.org/elasticjob/index_zh.html","TextMarkTextContent":"https://shardingsphere.apache.org/elasticjob/index_zh.html"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213650-kriksjo","Type":"NodeParagraph","Properties":{"id":"20240201213650-kriksjo","updated":"20240201213650"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优缺点总结："}]},{"ID":"20240201213651-skynihz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-skynihz","updated":"20240201213651"},"Children":[{"ID":"20240201213652-my6ol87","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-my6ol87","updated":"20240201213652"},"Children":[{"ID":"20240201213653-x06r0zt","Type":"NodeParagraph","Properties":{"id":"20240201213653-x06r0zt","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"优点：可以与 Spring 集成、支持分布式、支持集群、性能不错、支持任务可视化管理"}]}]},{"ID":"20240201213654-csfq4pd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-csfq4pd","updated":"20240201213654"},"Children":[{"ID":"20240201213655-l2uamw1","Type":"NodeParagraph","Properties":{"id":"20240201213655-l2uamw1","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"缺点：依赖了额外的中间件比如 Zookeeper（复杂度增加，可靠性降低、维护成本变高）"}]}]}]},{"ID":"20240201213656-4vk2zqw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213656-4vk2zqw","updated":"20240201213656"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"XXL-JOB"}]},{"ID":"20240201213657-ijuoz0j","Type":"NodeParagraph","Properties":{"id":"20240201213657-ijuoz0j","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 于 2015 年开源，是一款优秀的轻量级分布式任务调度框架，支持任务可视化管理、弹性扩容缩容、任务失败重试和告警、任务分片等功能，"}]},{"ID":"20240201213658-krshsnd","Type":"NodeParagraph","Properties":{"id":"20240201213658-krshsnd","updated":"20240201213658"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/xxljob-feature-list.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213659-2v0kbu0","Type":"NodeParagraph","Properties":{"id":"20240201213659-2v0kbu0","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 官网介绍，其解决了很多 Quartz 的不足。"}]},{"ID":"20240201213660-1purz9p","Type":"NodeBlockquote","Properties":{"id":"20240201213660-1purz9p","updated":"20240201213660"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213661-t081ngb","Type":"NodeParagraph","Properties":{"id":"20240201213661-t081ngb","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"Quartz 作为开源作业调度中的佼佼者，是作业调度的首选。但是集群环境中 Quartz 采用 API 的方式对任务进行管理，从而可以避免上述问题，但是同样存在以下问题："}]},{"ID":"20240201213662-ecee4v3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-ecee4v3","updated":"20240201213662"},"Children":[{"ID":"20240201213663-kcvai2p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-kcvai2p","updated":"20240201213663"},"Children":[{"ID":"20240201213664-q4gj1or","Type":"NodeParagraph","Properties":{"id":"20240201213664-q4gj1or","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"问题一：调用 API 的的方式操作任务，不人性化；"}]}]},{"ID":"20240201213665-1ar01a6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-1ar01a6","updated":"20240201213665"},"Children":[{"ID":"20240201213666-g263gcb","Type":"NodeParagraph","Properties":{"id":"20240201213666-g263gcb","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"问题二：需要持久化业务 QuartzJobBean 到底层数据表中，系统侵入性相当严重。"}]}]},{"ID":"20240201213667-t2ucqpm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-t2ucqpm","updated":"20240201213667"},"Children":[{"ID":"20240201213668-o0qadzk","Type":"NodeParagraph","Properties":{"id":"20240201213668-o0qadzk","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"问题三：调度逻辑和 QuartzJobBean 耦合在同一个项目中，这将导致一个问题，在调度任务数量逐渐增多，同时调度任务逻辑逐渐加重的情况下，此时调度系统的性能将大大受限于业务；"}]}]},{"ID":"20240201213669-va60mjs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-va60mjs","updated":"20240201213669"},"Children":[{"ID":"20240201213670-wrshtam","Type":"NodeParagraph","Properties":{"id":"20240201213670-wrshtam","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"问题四：quartz 底层以“抢占式”获取 DB 锁并由抢占成功节点负责运行任务，会导致节点负载悬殊非常大；而 XXL-JOB 通过执行器实现“协同分配式”运行任务，充分发挥集群优势，负载各节点均衡。"}]}]}]},{"ID":"20240201213671-dcezd0n","Type":"NodeParagraph","Properties":{"id":"20240201213671-dcezd0n","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"XXL-JOB 弥补了 quartz 的上述不足之处。"}]}]},{"ID":"20240201213672-ngm9vub","Type":"NodeParagraph","Properties":{"id":"20240201213672-ngm9vub","updated":"20240201213672"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 的架构设计如下图所示："}]},{"ID":"20240201213673-gx7zu98","Type":"NodeParagraph","Properties":{"id":"20240201213673-gx7zu98","updated":"20240201213673"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/xxljob-architecture-design-v2.1.0.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213674-pbqv1q4","Type":"NodeParagraph","Properties":{"id":"20240201213674-pbqv1q4","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"从上图可以看出，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"调度中心"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"执行器"},{"Type":"NodeText","Data":" 两大部分组成。调度中心主要负责任务管理、执行器管理以及日志管理。执行器主要是接收调度信号并处理。另外，调度中心进行任务调度时，是通过自研 RPC 来实现的。"}]},{"ID":"20240201213675-3vyfwsp","Type":"NodeParagraph","Properties":{"id":"20240201213675-3vyfwsp","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"不同于 Elastic-Job 的去中心化设计， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 的这种设计也被称为中心化设计（调度中心调度多个执行器执行任务）。"}]},{"ID":"20240201213676-xlcrkf1","Type":"NodeParagraph","Properties":{"id":"20240201213676-xlcrkf1","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Quzrtz"},{"Type":"NodeText","Data":" 类似 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 也是基于数据库锁调度任务，存在性能瓶颈。不过，一般在任务量不是特别大的情况下，没有什么影响的，可以满足绝大部分公司的要求。"}]},{"ID":"20240201213677-if5hfaa","Type":"NodeParagraph","Properties":{"id":"20240201213677-if5hfaa","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"不要被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 的架构图给吓着了，实际上，我们要用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXL-JOB"},{"Type":"NodeText","Data":" 的话，只需要重写 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IJobHandler"},{"Type":"NodeText","Data":" 自定义任务执行逻辑就可以了，非常易用！"}]},{"ID":"20240201213678-bj9gyn5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213678-bj9gyn5","updated":"20240201213678"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@JobHandler(value=\"myApiJobHandler\")\n@Component\npublic class MyApiJobHandler extends IJobHandler {\n\n    @Override\n    public ReturnT\u003cString\u003e execute(String param) throws Exception {\n        //......\n        return ReturnT.SUCCESS;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213679-47btemp","Type":"NodeParagraph","Properties":{"id":"20240201213679-47btemp","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"还可以直接基于注解定义任务。"}]},{"ID":"20240201213680-84n4kj2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213680-84n4kj2","updated":"20240201213680"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@XxlJob(\"myAnnotationJobHandler\")\npublic ReturnT\u003cString\u003e myAnnotationJobHandler(String param) throws Exception {\n  //......\n  return ReturnT.SUCCESS;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213681-or08pve","Type":"NodeParagraph","Properties":{"id":"20240201213681-or08pve","updated":"20240201213681"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/xxljob-admin-task-management.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213682-besw6s2","Type":"NodeParagraph","Properties":{"id":"20240201213682-besw6s2","updated":"20240201213682"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"相关地址："}]},{"ID":"20240201213683-bdg0bz9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213683-bdg0bz9","updated":"20240201213683"},"Children":[{"ID":"20240201213684-k00polu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213684-k00polu","updated":"20240201213684"},"Children":[{"ID":"20240201213685-nr58mfv","Type":"NodeParagraph","Properties":{"id":"20240201213685-nr58mfv","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"GitHub 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/xuxueli/xxl-job/%E3%80%82","TextMarkTextContent":"https://github.com/xuxueli/xxl-job/。"}]}]},{"ID":"20240201213686-2mdb9w9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213686-2mdb9w9","updated":"20240201213686"},"Children":[{"ID":"20240201213687-grzctqf","Type":"NodeParagraph","Properties":{"id":"20240201213687-grzctqf","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"官方介绍："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.xuxueli.com/xxl-job/","TextMarkTextContent":"https://www.xuxueli.com/xxl-job/"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213688-iyqxvz2","Type":"NodeParagraph","Properties":{"id":"20240201213688-iyqxvz2","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优缺点总结："}]},{"ID":"20240201213689-0bzykwy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213689-0bzykwy","updated":"20240201213689"},"Children":[{"ID":"20240201213690-sauymku","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-sauymku","updated":"20240201213690"},"Children":[{"ID":"20240201213691-7ui71vp","Type":"NodeParagraph","Properties":{"id":"20240201213691-7ui71vp","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"优点：开箱即用（学习成本比较低）、与 Spring 集成、支持分布式、支持集群、支持任务可视化管理。"}]}]},{"ID":"20240201213692-278o6jf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-278o6jf","updated":"20240201213692"},"Children":[{"ID":"20240201213693-e71uwf2","Type":"NodeParagraph","Properties":{"id":"20240201213693-e71uwf2","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"缺点：不支持动态添加任务（如果一定想要动态创建任务也是支持的，参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/xuxueli/xxl-job/issues/277","TextMarkTextContent":"xxl-job issue277"},{"Type":"NodeText","Data":"）。"}]}]}]},{"ID":"20240201213694-vrd20rt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213694-vrd20rt","updated":"20240201213694"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"PowerJob"}]},{"ID":"20240201213695-2i6mtxm","Type":"NodeParagraph","Properties":{"id":"20240201213695-2i6mtxm","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"非常值得关注的一个分布式任务调度框架，分布式任务调度领域的新星。目前，已经有很多公司接入比如 OPPO、京东、中通、思科。"}]},{"ID":"20240201213696-v4u39m4","Type":"NodeParagraph","Properties":{"id":"20240201213696-v4u39m4","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"这个框架的诞生也挺有意思的，PowerJob 的作者当时在阿里巴巴实习过，阿里巴巴那会使用的是内部自研的 SchedulerX（阿里云付费产品）。实习期满之后，PowerJob 的作者离开了阿里巴巴。想着说自研一个 SchedulerX，防止哪天 SchedulerX 满足不了需求，于是 PowerJob 就诞生了。"}]},{"ID":"20240201213697-agv651e","Type":"NodeParagraph","Properties":{"id":"20240201213697-agv651e","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"更多关于 PowerJob 的故事，小伙伴们可以去看看 PowerJob 作者的视频 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/BV1SK411A7F3/","TextMarkTextContent":"《我和我的任务调度中间件》"},{"Type":"NodeText","Data":"。简单点概括就是：“游戏没啥意思了，我要扛起了新一代分布式任务调度与计算框架的大旗！”。"}]},{"ID":"20240201213698-f3htw6c","Type":"NodeParagraph","Properties":{"id":"20240201213698-f3htw6c","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"由于 SchedulerX 属于人民币产品，我这里就不过多介绍。PowerJob 官方也对比过其和 QuartZ、XXL-JOB 以及 SchedulerX。"}]},{"ID":"20240201213699-2pbpt25","Type":"NodeTable","Data":"|                | QuartZ                                      | xxl-job                                    | SchedulerX 2.0                                       | PowerJob                                                        |\n| -------------- | ------------------------------------------- | ------------------------------------------ | ---------------------------------------------------- | --------------------------------------------------------------- |\n| 定时类型       | CRON                                        | CRON                                       | CRON、固定频率、固定延迟、OpenAPI                    | **CRON、固定频率、固定延迟、OpenAPI**                           |\n| 任务类型       | 内置 Java                                   | 内置 Java、GLUE Java、Shell、Python 等脚本 | 内置 Java、外置 Java（FatJar）、Shell、Python 等脚本 | **内置 Java、外置 Java（容器）、Shell、Python 等脚本**          |\n| 分布式计算     | 无                                          | 静态分片                                   | MapReduce 动态分片                                   | **MapReduce 动态分片**                                          |\n| 在线任务治理   | 不支持                                      | 支持                                       | 支持                                                 | **支持**                                                        |\n| 日志白屏化     | 不支持                                      | 支持                                       | 不支持                                               | **支持**                                                        |\n| 调度方式及性能 | 基于数据库锁，有性能瓶颈                    | 基于数据库锁，有性能瓶颈                   | 不详                                                 | **无锁化设计，性能强劲无上限**                                  |\n| 报警监控       | 无                                          | 邮件                                       | 短信                                                 | **WebHook、邮件、钉钉与自定义扩展**                             |\n| 系统依赖       | JDBC 支持的关系型数据库（MySQL、Oracle...） | MySQL                                      | 人民币                                               | **任意 Spring Data Jpa 支持的关系型数据库（MySQL、Oracle...）** |\n| DAG 工作流     | 不支持                                      | 不支持                                     | 支持                                                 | **支持**                                                        |","TableAligns":[0,0,0,0,0],"Properties":{"id":"20240201213699-2pbpt25","updated":"20240201213699"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"QuartZ"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"xxl-job"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"SchedulerX 2.0"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"PowerJob"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"定时类型"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"CRON"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"CRON"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"CRON、固定频率、固定延迟、OpenAPI"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CRON、固定频率、固定延迟、OpenAPI"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"任务类型"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"内置 Java"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"内置 Java、GLUE Java、Shell、Python 等脚本"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"内置 Java、外置 Java（FatJar）、Shell、Python 等脚本"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内置 Java、外置 Java（容器）、Shell、Python 等脚本"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"分布式计算"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"无"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"静态分片"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"MapReduce 动态分片"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MapReduce 动态分片"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"在线任务治理"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"支持"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"日志白屏化"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"支持"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"调度方式及性能"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"基于数据库锁，有性能瓶颈"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"基于数据库锁，有性能瓶颈"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不详"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"无锁化设计，性能强劲无上限"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"报警监控"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"无"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"邮件"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"短信"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"WebHook、邮件、钉钉与自定义扩展"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"系统依赖"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JDBC 支持的关系型数据库（MySQL、Oracle...）"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"MySQL"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"人民币"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任意 Spring Data Jpa 支持的关系型数据库（MySQL、Oracle...）"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"DAG 工作流"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"支持"}]}]}]},{"ID":"20240201213700-7f7aljz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213700-7f7aljz","updated":"20240201213700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"定时任务方案总结"}]},{"ID":"20240201213701-k40xpbj","Type":"NodeParagraph","Properties":{"id":"20240201213701-k40xpbj","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"单机定时任务的常见解决方案有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Timer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledExecutorService"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayQueue"},{"Type":"NodeText","Data":"、Spring Task 和时间轮，其中最常用也是比较推荐使用的是时间轮。另外，这几种单机定时任务解决方案同样可以实现延时任务。"}]},{"ID":"20240201213702-slrlws2","Type":"NodeParagraph","Properties":{"id":"20240201213702-slrlws2","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"Redis 和 MQ 虽然可以实现分布式定时任务，但这两者本身不是专门用来做分布式定时任务的，它们并不提供较为完整和强大的分布式定时任务的功能。而且，两者不太适合执行周期性的定时任务，因为它们只能保证消息被消费一次，而不能保证消息被消费多次。因此，它们更适合执行一次性的延时任务，例如订单取消、红包撤回。实际项目中，MQ 延时任务用的更多一些，可以降低业务之间的耦合度。"}]},{"ID":"20240201213703-il41fib","Type":"NodeParagraph","Properties":{"id":"20240201213703-il41fib","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"Quartz、Elastic-Job、XXL-JOB 和 PowerJob 这几个是专门用来做分布式调度的框架，提供的分布式定时任务的功能更为完善和强大，更加适合执行周期性的定时任务。除了 Quartz 之外，另外三者都是支持任务可视化管理的。"}]},{"ID":"20240201213704-21576g5","Type":"NodeParagraph","Properties":{"id":"20240201213704-21576g5","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"XXL-JOB 2015 年推出，已经经过了很多年的考验。XXL-JOB 轻量级，并且使用起来非常简单。虽然存在性能瓶颈，但是，在绝大多数情况下，对于企业的基本需求来说是没有影响的。PowerJob 属于分布式任务调度领域里的新星，其稳定性还有待继续考察。ElasticJob 由于在架构设计上是基于 Zookeeper ，而 XXL-JOB 是基于数据库，性能方面的话，ElasticJob 略胜一筹。"}]},{"ID":"20240201213705-p4sp42t","Type":"NodeParagraph","Properties":{"id":"20240201213705-p4sp42t","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"这篇文章并没有介绍到实际使用，但是，并不代表实际使用不重要。我在写这篇文章之前，已经动手写过相应的 Demo。像 Quartz，我在大学那会就用过。不过，当时用的是 Spring 。为了能够更好地体验，我自己又在 Spring Boot 上实际体验了一下。如果你并没有实际使用某个框架，就直接说它并不好用的话，是站不住脚的。"}]},{"ID":"20240201213706-e8ka2vb","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213706-e8ka2vb","updated":"20240201213706"}}]}