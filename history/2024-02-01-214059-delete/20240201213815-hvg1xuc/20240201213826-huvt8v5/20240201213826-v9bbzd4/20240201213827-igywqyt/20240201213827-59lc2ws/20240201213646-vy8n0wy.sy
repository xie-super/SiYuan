{"ID":"20240201213646-vy8n0wy","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213646-vy8n0wy","title":"unit-test","updated":"20240201213646"},"Children":[{"ID":"20240201213647-hphw9uz","Type":"NodeThematicBreak","Properties":{"id":"20240201213647-hphw9uz","updated":"20240201213647"}},{"ID":"20240201213648-1re2vxc","Type":"NodeParagraph","Properties":{"id":"20240201213648-1re2vxc","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"title: 单元测试到底是什么？应该怎么做？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 代码质量"}]},{"ID":"20240201213649-rjveamm","Type":"NodeThematicBreak","Properties":{"id":"20240201213649-rjveamm","updated":"20240201213649"}},{"ID":"20240201213650-a7urdpm","Type":"NodeBlockquote","Properties":{"id":"20240201213650-a7urdpm","updated":"20240201213650"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213651-7us0svs","Type":"NodeParagraph","Properties":{"id":"20240201213651-7us0svs","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"本文重构完善自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.jianshu.com/p/fa41fb80d2b8","TextMarkTextContent":"谈谈为什么写单元测试 - 键盘男 - 2016"},{"Type":"NodeText","Data":"这篇文章。"}]}]},{"ID":"20240201213652-ikzrjl7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213652-ikzrjl7","updated":"20240201213652"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"何谓单元测试？"}]},{"ID":"20240201213653-lb48s46","Type":"NodeParagraph","Properties":{"id":"20240201213653-lb48s46","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"维基百科是这样介绍单元测试的："}]},{"ID":"20240201213654-gyl1rhi","Type":"NodeBlockquote","Properties":{"id":"20240201213654-gyl1rhi","updated":"20240201213654"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213655-ibmn2i7","Type":"NodeParagraph","Properties":{"id":"20240201213655-ibmn2i7","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"在计算机编程中，单元测试（Unit Testing）是针对程序模块（软件设计的最小单位）进行的正确性检验测试工作。"}]},{"ID":"20240201213656-4kfqn61","Type":"NodeParagraph","Properties":{"id":"20240201213656-4kfqn61","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"程序单元是应用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最小可测试部件"},{"Type":"NodeText","Data":" 。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。"}]}]},{"ID":"20240201213657-fui9izx","Type":"NodeParagraph","Properties":{"id":"20240201213657-fui9izx","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"由于每个单元有独立的逻辑，在做单元测试时，为了隔离外部依赖，确保这些依赖不影响验证逻辑，我们经常会用到 Fake、Stub 与 Mock 。"}]},{"ID":"20240201213658-swx0c2m","Type":"NodeParagraph","Properties":{"id":"20240201213658-swx0c2m","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"关于 Fake、Mock 与 Stub 这几个概念的解读，可以看看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/26942686","TextMarkTextContent":"测试中 Fakes、Mocks 以及 Stubs 概念明晰 - 王下邀月熊 - 2018"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213659-6ko328w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213659-6ko328w","updated":"20240201213659"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么需要单元测试？"}]},{"ID":"20240201213660-hesmweq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213660-hesmweq","updated":"20240201213660"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为重构保驾护航"}]},{"ID":"20240201213661-cj39oye","Type":"NodeParagraph","Properties":{"id":"20240201213661-cj39oye","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"我在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./refactoring.md","TextMarkTextContent":"重构"},{"Type":"NodeText","Data":"这篇文章中这样写到："}]},{"ID":"20240201213662-buq4on7","Type":"NodeBlockquote","Properties":{"id":"20240201213662-buq4on7","updated":"20240201213662"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213663-a3ia2gx","Type":"NodeParagraph","Properties":{"id":"20240201213663-a3ia2gx","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"单元测试可以为重构提供信心，降低重构的成本。我们要像重视生产代码那样，重视单元测试。"}]}]},{"ID":"20240201213664-hg3o0x3","Type":"NodeParagraph","Properties":{"id":"20240201213664-hg3o0x3","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"每个开发者都会经历重构，重构后把代码改坏了的情况并不少见，很可能你只是修改了一个很简单的方法就导致系统出现了一个比较严重的错误。"}]},{"ID":"20240201213665-gxum3uz","Type":"NodeParagraph","Properties":{"id":"20240201213665-gxum3uz","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"如果有了单元测试的话，就不会存在这个隐患了。写完一个类，把单元测试写了，确保这个类逻辑正确；写第二个类，单元测试……写 100 个类，道理一样，每个类做到第一点“保证逻辑正确性”，100 个类拼在一起肯定不出问题。你大可以放心一边重构，一边运行 APP；而不是整体重构完，提心吊胆地 run。"}]},{"ID":"20240201213666-ydo08zv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213666-ydo08zv","updated":"20240201213666"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"提高代码质量"}]},{"ID":"20240201213667-sfcit63","Type":"NodeParagraph","Properties":{"id":"20240201213667-sfcit63","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"由于每个单元有独立的逻辑，做单元测试时需要隔离外部依赖，确保这些依赖不影响验证逻辑。因为要把各种依赖分离，单元测试会促进工程进行组件拆分，整理工程依赖关系，更大程度减少代码耦合。这样写出来的代码，更好维护，更好扩展，从而提高代码质量。"}]},{"ID":"20240201213668-0d2ttia","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213668-0d2ttia","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"减少 bug"}]},{"ID":"20240201213669-376icdm","Type":"NodeParagraph","Properties":{"id":"20240201213669-376icdm","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"一个机器，由各种细小的零件组成，如果其中某件零件坏了，机器运行故障。必须保证每个零件都按设计图要求的规格，机器才能正常运行。"}]},{"ID":"20240201213670-er056q0","Type":"NodeParagraph","Properties":{"id":"20240201213670-er056q0","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"一个可单元测试的工程，会把业务、功能分割成规模更小、有独立的逻辑部件，称为单元。单元测试的目标，就是保证各个单元的逻辑正确性。单元测试保障工程各个“零件”按“规格”（需求）执行，从而保证整个“机器”（项目）运行正确，最大限度减少 bug。"}]},{"ID":"20240201213671-9rn6orz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213671-9rn6orz","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"快速定位 bug"}]},{"ID":"20240201213672-6itrxmu","Type":"NodeParagraph","Properties":{"id":"20240201213672-6itrxmu","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"如果程序有 bug，我们运行一次全部单元测试，找到不通过的测试，可以很快地定位对应的执行代码。修复代码后，运行对应的单元测试；如还不通过，继续修改，运行测试……直到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"测试通过"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213673-6m87srr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213673-6m87srr","updated":"20240201213673"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"持续集成依赖单元测试"}]},{"ID":"20240201213674-1fhchef","Type":"NodeParagraph","Properties":{"id":"20240201213674-1fhchef","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"持续集成需要依赖单元测试，当持续集成服务自动构建新代码之后，会自动运行单元测试来发现代码错误。"}]},{"ID":"20240201213675-l73xa9y","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213675-l73xa9y","updated":"20240201213675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"谁逼你写单元测试？"}]},{"ID":"20240201213676-wyscgkj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213676-wyscgkj","updated":"20240201213676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"领导要求"}]},{"ID":"20240201213677-6yj9eel","Type":"NodeParagraph","Properties":{"id":"20240201213677-6yj9eel","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"有些经验丰富的领导，或多或少都会要求团队写单元测试。对于有一定工作经验的队友，这要求挺合理；对于经验尚浅的、毕业生，恐怕要死要活了，连代码都写不好，还要写单元测试，are you kidding me？"}]},{"ID":"20240201213678-gr4pol7","Type":"NodeParagraph","Properties":{"id":"20240201213678-gr4pol7","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"培训新人单元测试用法，是一项艰巨的任务。新人代码风格未形成，也不知道单元测试多重要，强制单元测试会让他们感到困惑，没办法按自己思路写代码。"}]},{"ID":"20240201213679-eyk5bbe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213679-eyk5bbe","updated":"20240201213679"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"大牛都写单元测试"}]},{"ID":"20240201213680-0mkaxew","Type":"NodeParagraph","Properties":{"id":"20240201213680-0mkaxew","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"国外很多家喻户晓的开源项目，都有大量单元测试。例如，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://link.jianshu.com?t=https://github.com/square/retrofit/tree/master/retrofit/src/test/java/retrofit2","TextMarkTextContent":"retrofit"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://link.jianshu.com?t=https://github.com/square/okhttp/tree/master/okhttp-tests/src/test/java/okhttp3","TextMarkTextContent":"okhttp"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://link.jianshu.com?t=https://github.com/JakeWharton/butterknife/tree/master/butterknife-compiler/src/test/java/butterknife","TextMarkTextContent":"butterknife"},{"Type":"NodeText","Data":"…… 国外大牛都写单元测试，我们也写吧！"}]},{"ID":"20240201213681-sner5ri","Type":"NodeParagraph","Properties":{"id":"20240201213681-sner5ri","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"很多读者都有这种想法，一开始满腔热血。当真要对自己项目单元测试时，便困难重重，很大原因是项目对单元测试不友好。最后只能对一些不痛不痒的工具类做单元测试，久而久之，当初美好愿望也不了了之。"}]},{"ID":"20240201213682-ew1ewqy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213682-ew1ewqy","updated":"20240201213682"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"保住面子"}]},{"ID":"20240201213683-f8dgn7h","Type":"NodeParagraph","Properties":{"id":"20240201213683-f8dgn7h","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"都是有些许年经验的老鸟，还天天被测试同学追 bug，好意思么？花多一点时间写单元测试，确保没低级 bug，还能彰显大牛风范，何乐而不为？"}]},{"ID":"20240201213684-bqqs8ro","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213684-bqqs8ro","updated":"20240201213684"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"心虚"}]},{"ID":"20240201213685-v8ay252","Type":"NodeParagraph","Properties":{"id":"20240201213685-v8ay252","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"笔者也是个不太相信自己代码的人，总觉得哪里会突然冒出莫名其妙的 bug，也怕别人不小心改了自己的代码（被害妄想症），新版本上线提心吊胆……花点时间写单元测试，有事没事跑一下测试，确保原逻辑没问题，至少能睡安稳一点。"}]},{"ID":"20240201213686-r2pd4t2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213686-r2pd4t2","updated":"20240201213686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"TDD 测试驱动开发"}]},{"ID":"20240201213687-jearuhx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213687-jearuhx","updated":"20240201213687"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何谓 TDD？"}]},{"ID":"20240201213688-tgpb8vl","Type":"NodeParagraph","Properties":{"id":"20240201213688-tgpb8vl","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"TDD 即 Test-Driven Development（ 测试驱动开发），这是敏捷开发的一项核心实践和技术，也是一种设计方法论。"}]},{"ID":"20240201213689-xcd1kti","Type":"NodeParagraph","Properties":{"id":"20240201213689-xcd1kti","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"TDD 原理是开发功能代码之前，先编写测试用例代码，然后针对测试用例编写功能代码，使其能够通过。"}]},{"ID":"20240201213690-gbs41rw","Type":"NodeParagraph","Properties":{"id":"20240201213690-gbs41rw","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"TDD 的节奏：“红 - 绿 - 重构”。"}]},{"ID":"20240201213691-1lkeed3","Type":"NodeParagraph","Properties":{"id":"20240201213691-1lkeed3","updated":"20240201213691"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/resource/image/09/7f/090e1fc6aff08b4aa66376f776c2337f.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213692-sezffe2","Type":"NodeParagraph","Properties":{"id":"20240201213692-sezffe2","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"由于 TDD 对开发人员要求非常高，跟传统开发思维不一样，因此实施起来相当困难。"}]},{"ID":"20240201213693-5gutllk","Type":"NodeParagraph","Properties":{"id":"20240201213693-5gutllk","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"TDD 在很多人眼中是不实用的，一来他们并不理解测试“驱动”开发的含义，但更重要的是，他们很少会做任务分解。而任务分解是做好 TDD 的关键点。只有把任务分解到可以测试的地步，才能够有针对性地写测试。"}]},{"ID":"20240201213694-ps6pcfz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213694-ps6pcfz","updated":"20240201213694"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"TDD 优缺点分析"}]},{"ID":"20240201213695-d5kipm6","Type":"NodeParagraph","Properties":{"id":"20240201213695-d5kipm6","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"测试驱动开发有好处也有坏处。因为每个测试用例都是根据需求来的，或者说把一个大需求分解成若干小需求编写测试用例，所以测试用例写出来后，开发者写的执行代码，必须满足测试用例。如果测试不通过，则修改执行代码，直到测试用例通过。"}]},{"ID":"20240201213696-a9a5bn1","Type":"NodeParagraph","Properties":{"id":"20240201213696-a9a5bn1","updated":"20240201213696"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213697-prqgyw2","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213697-prqgyw2","updated":"20240201213697"},"Children":[{"ID":"20240201213698-w1xpo75","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213698-w1xpo75","updated":"20240201213698"},"Children":[{"ID":"20240201213699-owy35xv","Type":"NodeParagraph","Properties":{"id":"20240201213699-owy35xv","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"帮你整理需求，梳理思路；"}]}]},{"ID":"20240201213700-68z4slg","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213700-68z4slg","updated":"20240201213700"},"Children":[{"ID":"20240201213701-5dd9lu4","Type":"NodeParagraph","Properties":{"id":"20240201213701-5dd9lu4","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"帮你设计出更合理的接口（空想的话很容易设计出屎）；"}]}]},{"ID":"20240201213702-5w6iexo","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213702-5w6iexo","updated":"20240201213702"},"Children":[{"ID":"20240201213703-gjojejh","Type":"NodeParagraph","Properties":{"id":"20240201213703-gjojejh","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"减小代码出现 bug 的概率；"}]}]},{"ID":"20240201213704-vg3v8bw","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213704-vg3v8bw","updated":"20240201213704"},"Children":[{"ID":"20240201213705-0gkqnn2","Type":"NodeParagraph","Properties":{"id":"20240201213705-0gkqnn2","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"提高开发效率（前提是正确且熟练使用 TDD）。"}]}]}]},{"ID":"20240201213706-5g3nutu","Type":"NodeParagraph","Properties":{"id":"20240201213706-5g3nutu","updated":"20240201213706"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213707-jsfll2i","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213707-jsfll2i","updated":"20240201213707"},"Children":[{"ID":"20240201213708-pc67kur","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213708-pc67kur","updated":"20240201213708"},"Children":[{"ID":"20240201213709-axmkaiu","Type":"NodeParagraph","Properties":{"id":"20240201213709-axmkaiu","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"能用好 TDD 的人非常少，看似简单，实则门槛很高；"}]}]},{"ID":"20240201213710-w1y9kr1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213710-w1y9kr1","updated":"20240201213710"},"Children":[{"ID":"20240201213711-r5a8dq8","Type":"NodeParagraph","Properties":{"id":"20240201213711-r5a8dq8","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"投入开发资源（时间和精力）通常会更多；"}]}]},{"ID":"20240201213712-vwbfzcr","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213712-vwbfzcr","updated":"20240201213712"},"Children":[{"ID":"20240201213713-3bycu4y","Type":"NodeParagraph","Properties":{"id":"20240201213713-3bycu4y","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"由于测试用例在未进行代码设计前写；很有可能限制开发者对代码整体设计；"}]}]},{"ID":"20240201213714-qpfz8a8","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213714-qpfz8a8","updated":"20240201213714"},"Children":[{"ID":"20240201213715-qttwsf1","Type":"NodeParagraph","Properties":{"id":"20240201213715-qttwsf1","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"可能引起开发人员不满情绪，我觉得这点很严重，毕竟不是人人都喜欢单元测试，尽管单元测试会带给我们相当多的好处。"}]}]}]},{"ID":"20240201213716-5yrohc9","Type":"NodeParagraph","Properties":{"id":"20240201213716-5yrohc9","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/24997923","TextMarkTextContent":"如何用正确的姿势打开 TDD？ - 陈天 - 2017"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213717-xl3ql8b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213717-xl3ql8b","updated":"20240201213717"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"单测框架如何选择？"}]},{"ID":"20240201213718-ksgu2n2","Type":"NodeParagraph","Properties":{"id":"20240201213718-ksgu2n2","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"对于单测来说，目前常用的单测框架有：JUnit、Mockito、Spock、PowerMock、JMockit、TestableMock 等等。"}]},{"ID":"20240201213719-b77n7nl","Type":"NodeParagraph","Properties":{"id":"20240201213719-b77n7nl","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"JUnit 几乎是默认选择，但是其不支持 Mock，因此我们还需要选择一个 Mock 工具。Mockito 和 Spock 是最主流的两款 Mock 工具，一般都是在这两者中选择。"}]},{"ID":"20240201213720-7k371hr","Type":"NodeParagraph","Properties":{"id":"20240201213720-7k371hr","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"究竟是选择 Mockito 还是 Spock 呢？我这里做了一些简单的对比分析："}]},{"ID":"20240201213721-oqqws2n","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213721-oqqws2n","updated":"20240201213721"},"Children":[{"ID":"20240201213722-scl5z4f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213722-scl5z4f","updated":"20240201213722"},"Children":[{"ID":"20240201213723-apa9iqh","Type":"NodeParagraph","Properties":{"id":"20240201213723-apa9iqh","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"Spock 没办法 Mock 静态方法和私有方法 ，Mockito 3.4.0 以后，支持静态方法的 Mock，具体可以看这个 issue："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/mockito/mockito/issues/1013%EF%BC%8C%E5%85%B7%E4%BD%93%E6%95%99%E7%A8%8B%E5%8F%AF%E4%BB%A5%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%9Ahttps://www.baeldung.com/mockito-mock-static-methods%E3%80%82","TextMarkTextContent":"https://github.com/mockito/mockito/issues/1013，具体教程可以看这篇文章：https://www.baeldung.com/mockito-mock-static-methods。"}]}]},{"ID":"20240201213724-5dzrcv0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213724-5dzrcv0","updated":"20240201213724"},"Children":[{"ID":"20240201213725-ctzecn1","Type":"NodeParagraph","Properties":{"id":"20240201213725-ctzecn1","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"Spock 基于 Groovy，写出来的测试代码更清晰易读，比较规范(自带 given-when-then 的常用测试结构规范)。Mockito 没有具体的结构规范，需要项目组自己约定一个或者遵守比较好的测试代码实践。通常来说，同样的测试用例，Spock 的代码要更简洁。"}]}]},{"ID":"20240201213726-pxjs2k9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213726-pxjs2k9","updated":"20240201213726"},"Children":[{"ID":"20240201213727-vogf0il","Type":"NodeParagraph","Properties":{"id":"20240201213727-vogf0il","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"Mockito 使用的人群更广泛，稳定可靠。并且，Mockito 是 SpringBoot Test 默认集成的 Mock 工具。"}]}]}]},{"ID":"20240201213728-6py1js5","Type":"NodeParagraph","Properties":{"id":"20240201213728-6py1js5","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"Mockito 和 Spock 都是非常不错的 Mock 工具，相对来说，Mockito 的适用性更强一些。"}]},{"ID":"20240201213729-18o3pkx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213729-18o3pkx","updated":"20240201213729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213730-srmf2ta","Type":"NodeParagraph","Properties":{"id":"20240201213730-srmf2ta","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"单元测试确实会带给你相当多的好处，但不是立刻体验出来。正如买重疾保险，交了很多保费，没病没痛，十几年甚至几十年都用不上，最好就是一辈子用不上理赔，身体健康最重要。单元测试也一样，写了可以买个放心，对代码的一种保障，有 bug 尽快测出来，没 bug 就最好，总不能说“写那么多单元测试，结果测不出 bug，浪费时间”吧？"}]},{"ID":"20240201213731-mmbmqv1","Type":"NodeParagraph","Properties":{"id":"20240201213731-mmbmqv1","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"以下是个人对单元测试一些建议："}]},{"ID":"20240201213732-6p9pyno","Type":"NodeBlockquote","Properties":{"id":"20240201213732-6p9pyno","updated":"20240201213732"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213733-n5ds1nv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-n5ds1nv","updated":"20240201213733"},"Children":[{"ID":"20240201213734-0803veo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-0803veo","updated":"20240201213734"},"Children":[{"ID":"20240201213735-f1wtdlb","Type":"NodeParagraph","Properties":{"id":"20240201213735-f1wtdlb","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"越重要的代码，越要写单元测试；"}]}]},{"ID":"20240201213736-bbqsaxf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213736-bbqsaxf","updated":"20240201213736"},"Children":[{"ID":"20240201213737-gzgl0kp","Type":"NodeParagraph","Properties":{"id":"20240201213737-gzgl0kp","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"代码做不到单元测试，多思考如何改进，而不是放弃；"}]}]},{"ID":"20240201213738-63x5455","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-63x5455","updated":"20240201213738"},"Children":[{"ID":"20240201213739-b59gqdy","Type":"NodeParagraph","Properties":{"id":"20240201213739-b59gqdy","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"边写业务代码，边写单元测试，而不是完成整个新功能后再写；"}]}]},{"ID":"20240201213740-grwjy1s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-grwjy1s","updated":"20240201213740"},"Children":[{"ID":"20240201213741-x4463mq","Type":"NodeParagraph","Properties":{"id":"20240201213741-x4463mq","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"多思考如何改进、简化测试代码。"}]}]},{"ID":"20240201213742-tdhrbe7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-tdhrbe7","updated":"20240201213742"},"Children":[{"ID":"20240201213743-0dh7gxg","Type":"NodeParagraph","Properties":{"id":"20240201213743-0dh7gxg","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"测试代码需要随着生产代码的演进而重构或者修改，如果测试不能保持整洁，只会越来越难修改。"}]}]}]}]},{"ID":"20240201213744-pg9wr5o","Type":"NodeParagraph","Properties":{"id":"20240201213744-pg9wr5o","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"作为一名经验丰富的程序员，写单元测试更多的是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对自己的代码负责"},{"Type":"NodeText","Data":"。有测试用例的代码，别人更容易看懂，以后别人接手你的代码时，也可能放心做改动。"}]},{"ID":"20240201213745-t6lwm5k","Type":"NodeParagraph","Properties":{"id":"20240201213745-t6lwm5k","updated":"20240201213745"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多敲代码实践，多跟有单元测试经验的工程师交流"},{"Type":"NodeText","Data":"，你会发现写单元测试获得的收益会更多。"}]},{"ID":"20240201213746-em8k7p2","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213746-em8k7p2","updated":"20240201213746"}}]}