{"ID":"20240201213534-1tamne2","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213534-1tamne2","title":"mybatis-interview","updated":"20240201213534"},"Children":[{"ID":"20240201213535-zeqorri","Type":"NodeThematicBreak","Properties":{"id":"20240201213535-zeqorri","updated":"20240201213535"}},{"ID":"20240201213536-voyh1zt","Type":"NodeParagraph","Properties":{"id":"20240201213536-voyh1zt","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"title: MyBatis常见面试题总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 框架"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"icon: \"database\""},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213537-sbew0yy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213537-sbew0yy","updated":"20240201213537"},"Children":[{"ID":"20240201213538-q0swkpa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213538-q0swkpa","updated":"20240201213538"},"Children":[{"ID":"20240201213539-iblhrys","Type":"NodeParagraph","Properties":{"id":"20240201213539-iblhrys","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"MyBatis"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213540-1f4c8em","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-1f4c8em","updated":"20240201213540"},"Children":[{"ID":"20240201213541-zuyvg95","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-zuyvg95","updated":"20240201213541"},"Children":[{"ID":"20240201213542-pw0xhd6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213542-pw0xhd6","updated":"20240201213542"},"Children":[{"ID":"20240201213543-eleym2z","Type":"NodeParagraph","Properties":{"id":"20240201213543-eleym2z","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213544-giztuke","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213544-giztuke","updated":"20240201213544"},"Children":[{"ID":"20240201213545-j00fk8l","Type":"NodeParagraph","Properties":{"id":"20240201213545-j00fk8l","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: MyBatis"}]}]}]}]},{"ID":"20240201213546-5u81hou","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-5u81hou","updated":"20240201213546"},"Children":[{"ID":"20240201213547-pgkaubl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213547-pgkaubl","updated":"20240201213547"},"Children":[{"ID":"20240201213548-ex6lucy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213548-ex6lucy","updated":"20240201213548"},"Children":[{"ID":"20240201213549-hsz4oqc","Type":"NodeParagraph","Properties":{"id":"20240201213549-hsz4oqc","updated":"20240201213549"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213550-whh1lnx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213550-whh1lnx","updated":"20240201213550"},"Children":[{"ID":"20240201213551-w69ls26","Type":"NodeParagraph","Properties":{"id":"20240201213551-w69ls26","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 几道常见的 MyBatis 常见"}]}]}]}]}]},{"ID":"20240201213552-uopfzv2","Type":"NodeThematicBreak","Properties":{"id":"20240201213552-uopfzv2","updated":"20240201213552"}},{"ID":"20240201213553-paidx89","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @small-advertisement.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213553-paidx89","updated":"20240201213553"}},{"ID":"20240201213554-on3ce5g","Type":"NodeBlockquote","Properties":{"id":"20240201213554-on3ce5g","updated":"20240201213554"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213555-rmubmp6","Type":"NodeParagraph","Properties":{"id":"20240201213555-rmubmp6","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"本篇文章由 JavaGuide 收集自网络，原出处不明。"}]},{"ID":"20240201213556-yahw59a","Type":"NodeParagraph","Properties":{"id":"20240201213556-yahw59a","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"比起这些枯燥的面试题，我更建议你看看文末推荐的 MyBatis 优质好文。"}]}]},{"ID":"20240201213557-etmiwee","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213557-etmiwee","updated":"20240201213557"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","TextMarkType":"tag","TextMarkTextContent":"{}"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"$","Properties":{"id":""}}]},{"Type":"NodeText","Data":"{} 的区别是什么？"}]},{"ID":"20240201213558-bjyc4sj","Type":"NodeParagraph","Properties":{"id":"20240201213558-bjyc4sj","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"注：这道题是面试官面试我同事的。"}]},{"ID":"20240201213559-pmuspls","Type":"NodeParagraph","Properties":{"id":"20240201213559-pmuspls","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"答："}]},{"ID":"20240201213560-reswgmu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-reswgmu","updated":"20240201213560"},"Children":[{"ID":"20240201213561-sdnly6y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213561-sdnly6y","updated":"20240201213561"},"Children":[{"ID":"20240201213562-fgik5a5","Type":"NodeParagraph","Properties":{"id":"20240201213562-fgik5a5","updated":"20240201213562"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"${}"},{"Type":"NodeText","Data":"是 Properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于原样文本替换，可以替换任意内容，比如"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"$","Properties":{"id":""}}]},{"Type":"NodeText","Data":"{driver}会被原样替换为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"com.mysql.jdbc. Driver"},{"Type":"NodeText","Data":"。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"一个实例：根据参数按任意字段排序："}]}]}]},{"ID":"20240201213563-agpw0ju","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213563-agpw0ju","updated":"20240201213563"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"select * from users order by ${orderCols}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213564-vtja4rk","Type":"NodeParagraph","Properties":{"id":"20240201213564-vtja4rk","updated":"20240201213564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"orderCols"},{"Type":"NodeText","Data":"可以是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name desc"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name,sex asc"},{"Type":"NodeText","Data":"等，实现灵活的排序。"}]},{"ID":"20240201213565-f7lizee","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213565-f7lizee","updated":"20240201213565"},"Children":[{"ID":"20240201213566-gkn6h51","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-gkn6h51","updated":"20240201213566"},"Children":[{"ID":"20240201213567-5pqyxnu","Type":"NodeParagraph","Properties":{"id":"20240201213567-5pqyxnu","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"#{}"},{"Type":"NodeText","Data":"是 sql 的参数占位符，MyBatis 会将 sql 中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"#{}"},{"Type":"NodeText","Data":"替换为? 号，在 sql 执行前会使用 PreparedStatement 的参数设置方法，按序给 sql 的? 号占位符设置参数值，比如 ps.setInt(0, parameterValue)，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"#{item.name}"},{"Type":"NodeText","Data":" 的取值方式为使用反射从参数对象中获取 item 对象的 name 属性值，相当于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"param.getItem().getName()"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213568-8l8o2hw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213568-8l8o2hw","updated":"20240201213568"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"xml 映射文件中，除了常见的 select、insert、update、delete 标签之外，还有哪些标签？"}]},{"ID":"20240201213569-ji47qr4","Type":"NodeParagraph","Properties":{"id":"20240201213569-ji47qr4","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"注：这道题是京东面试官面试我时问的。"}]},{"ID":"20240201213570-wntlnpa","Type":"NodeParagraph","Properties":{"id":"20240201213570-wntlnpa","updated":"20240201213570"},"Children":[{"Type":"NodeText","Data":"答：还有很多其他的标签， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;resultMap\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;parameterMap\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;sql\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;include\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;selectKey\u0026gt;"},{"Type":"NodeText","Data":" ，加上动态 sql 的 9 个标签， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"trim|where|set|foreach|if|choose|when|otherwise|bind"},{"Type":"NodeText","Data":" 等，其中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;sql\u0026gt;"},{"Type":"NodeText","Data":" 为 sql 片段标签，通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;include\u0026gt;"},{"Type":"NodeText","Data":" 标签引入 sql 片段， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;selectKey\u0026gt;"},{"Type":"NodeText","Data":" 为不支持自增的主键生成策略标签。"}]},{"ID":"20240201213571-73tay4f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213571-73tay4f","updated":"20240201213571"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dao 接口的工作原理是什么？Dao 接口里的方法，参数不同时，方法能重载吗？"}]},{"ID":"20240201213572-xui9u3p","Type":"NodeParagraph","Properties":{"id":"20240201213572-xui9u3p","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"注：这道题也是京东面试官面试我被问的。"}]},{"ID":"20240201213573-3iovnzb","Type":"NodeParagraph","Properties":{"id":"20240201213573-3iovnzb","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"答：最佳实践中，通常一个 xml 映射文件，都会写一个 Dao 接口与之对应。Dao 接口就是人们常说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mapper"},{"Type":"NodeText","Data":" 接口，接口的全限名，就是映射文件中的 namespace 的值，接口的方法名，就是映射文件中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedStatement"},{"Type":"NodeText","Data":" 的 id 值，接口方法内的参数，就是传递给 sql 的参数。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mapper"},{"Type":"NodeText","Data":" 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为 key 值，可唯一定位一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedStatement"},{"Type":"NodeText","Data":" ，举例："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"com.mybatis3.mappers. StudentDao.findStudentById"},{"Type":"NodeText","Data":" ，可以唯一找到 namespace 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"com.mybatis3.mappers. StudentDao"},{"Type":"NodeText","Data":" 下面 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"id = findStudentById"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedStatement"},{"Type":"NodeText","Data":" 。在 MyBatis 中，每一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;select\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;insert\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;update\u0026gt;"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;delete\u0026gt;"},{"Type":"NodeText","Data":" 标签，都会被解析为一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedStatement"},{"Type":"NodeText","Data":" 对象。"}]},{"ID":"20240201213574-4xnffjg","Type":"NodeParagraph","Properties":{"id":"20240201213574-4xnffjg","updated":"20240201213574"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"Dao 接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。"}]},{"ID":"20240201213575-vbipapd","Type":"NodeParagraph","Properties":{"id":"20240201213575-vbipapd","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"Dao 接口里的方法可以重载，但是 Mybatis 的 xml 里面的 ID 不允许重复。"}]},{"ID":"20240201213576-snmqyie","Type":"NodeParagraph","Properties":{"id":"20240201213576-snmqyie","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"Mybatis 版本 3.3.0，亲测如下："}]},{"ID":"20240201213577-lnfo5jh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213577-lnfo5jh","updated":"20240201213577"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * Mapper接口里面方法重载\n */\npublic interface StuMapper {\n\n List\u003cStudent\u003e getAllStu();\n\n List\u003cStudent\u003e getAllStu(@Param(\"id\") Integer id);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213578-lz5ypoy","Type":"NodeParagraph","Properties":{"id":"20240201213578-lz5ypoy","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"然后在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StuMapper.xml"},{"Type":"NodeText","Data":" 中利用 Mybatis 的动态 sql 就可以实现。"}]},{"ID":"20240201213579-x09gmlp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213579-x09gmlp","updated":"20240201213579"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cselect id=\"getAllStu\" resultType=\"com.pojo.Student\"\u003e\n  select * from student\n  \u003cwhere\u003e\n    \u003cif test=\"id != null\"\u003e\n      id = #{id}\n    \u003c/if\u003e\n  \u003c/where\u003e\n\u003c/select\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213580-pkqkkif","Type":"NodeParagraph","Properties":{"id":"20240201213580-pkqkkif","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"能正常运行，并能得到相应的结果，这样就实现了在 Dao 接口中写重载方法。"}]},{"ID":"20240201213581-5c5mr3i","Type":"NodeParagraph","Properties":{"id":"20240201213581-5c5mr3i","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Mybatis 的 Dao 接口可以有多个重载方法，但是多个接口对应的映射必须只有一个，否则启动会报错。"}]},{"ID":"20240201213582-vx7mtra","Type":"NodeParagraph","Properties":{"id":"20240201213582-vx7mtra","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"相关 issue："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1122","TextMarkTextContent":"更正：Dao 接口里的方法可以重载，但是 Mybatis 的 xml 里面的 ID 不允许重复！"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213583-phcokm4","Type":"NodeParagraph","Properties":{"id":"20240201213583-phcokm4","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"Dao 接口的工作原理是 JDK 动态代理，MyBatis 运行时会使用 JDK 动态代理为 Dao 接口生成代理 proxy 对象，代理对象 proxy 会拦截接口方法，转而执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedStatement"},{"Type":"NodeText","Data":" 所代表的 sql，然后将 sql 执行结果返回。"}]},{"ID":"20240201213584-2i26924","Type":"NodeParagraph","Properties":{"id":"20240201213584-2i26924","updated":"20240201213584"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"补充"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213585-q977000","Type":"NodeParagraph","Properties":{"id":"20240201213585-q977000","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"Dao 接口方法可以重载，但是需要满足以下条件："}]},{"ID":"20240201213586-inff0vi","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213586-inff0vi","updated":"20240201213586"},"Children":[{"ID":"20240201213587-0gw4btc","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213587-0gw4btc","updated":"20240201213587"},"Children":[{"ID":"20240201213588-553y8zm","Type":"NodeParagraph","Properties":{"id":"20240201213588-553y8zm","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"仅有一个无参方法和一个有参方法"}]}]},{"ID":"20240201213589-r7jueew","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213589-r7jueew","updated":"20240201213589"},"Children":[{"ID":"20240201213590-lv6kswp","Type":"NodeParagraph","Properties":{"id":"20240201213590-lv6kswp","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"多个有参方法时，参数数量必须一致。且使用相同的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Param"},{"Type":"NodeText","Data":" ，或者使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"param1"},{"Type":"NodeText","Data":" 这种"}]}]}]},{"ID":"20240201213591-nueykue","Type":"NodeParagraph","Properties":{"id":"20240201213591-nueykue","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"测试如下"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213592-y20hqou","Type":"NodeParagraph","Properties":{"id":"20240201213592-y20hqou","updated":"20240201213592"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PersonDao.java"}]},{"ID":"20240201213593-5g5blzc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213593-5g5blzc","updated":"20240201213593"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Person queryById();\n\nPerson queryById(@Param(\"id\") Long id);\n\nPerson queryById(@Param(\"id\") Long id, @Param(\"name\") String name);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213594-sq1ok83","Type":"NodeParagraph","Properties":{"id":"20240201213594-sq1ok83","updated":"20240201213594"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PersonMapper.xml"}]},{"ID":"20240201213595-t9mnght","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213595-t9mnght","updated":"20240201213595"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cselect id=\"queryById\" resultMap=\"PersonMap\"\u003e\n    select\n      id, name, age, address\n    from person\n    \u003cwhere\u003e\n        \u003cif test=\"id != null\"\u003e\n            id = #{id}\n        \u003c/if\u003e\n        \u003cif test=\"name != null and name != ''\"\u003e\n            name = #{name}\n        \u003c/if\u003e\n    \u003c/where\u003e\n    limit 1\n\u003c/select\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213596-3owg95u","Type":"NodeParagraph","Properties":{"id":"20240201213596-3owg95u","updated":"20240201213596"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.apache.ibatis.scripting.xmltags. DynamicContext. ContextAccessor#getProperty"},{"Type":"NodeText","Data":" 方法用于获取 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;if\u0026gt;"},{"Type":"NodeText","Data":" 标签中的条件值"}]},{"ID":"20240201213597-yb23s00","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213597-yb23s00","updated":"20240201213597"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public Object getProperty(Map context, Object target, Object name) {\n  Map map = (Map) target;\n\n  Object result = map.get(name);\n  if (map.containsKey(name) || result != null) {\n    return result;\n  }\n\n  Object parameterObject = map.get(PARAMETER_OBJECT_KEY);\n  if (parameterObject instanceof Map) {\n    return ((Map)parameterObject).get(name);\n  }\n\n  return null;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213598-odi1q4m","Type":"NodeParagraph","Properties":{"id":"20240201213598-odi1q4m","updated":"20240201213598"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parameterObject"},{"Type":"NodeText","Data":" 为 map，存放的是 Dao 接口中参数相关信息。"}]},{"ID":"20240201213599-6yybe3b","Type":"NodeParagraph","Properties":{"id":"20240201213599-6yybe3b","updated":"20240201213599"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"((Map)parameterObject).get(name)"},{"Type":"NodeText","Data":" 方法如下"}]},{"ID":"20240201213600-8cknm4g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213600-8cknm4g","updated":"20240201213600"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public V get(Object key) {\n  if (!super.containsKey(key)) {\n    throw new BindingException(\"Parameter '\" + key + \"' not found. Available parameters are \" + keySet());\n  }\n  return super.get(key);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213601-dq4ctvc","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213601-dq4ctvc","updated":"20240201213601"},"Children":[{"ID":"20240201213602-hrmdjek","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213602-hrmdjek","updated":"20240201213602"},"Children":[{"ID":"20240201213603-hikfjet","Type":"NodeParagraph","Properties":{"id":"20240201213603-hikfjet","updated":"20240201213603"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"queryById()"},{"Type":"NodeText","Data":"方法执行时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parameterObject"},{"Type":"NodeText","Data":"为 null，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getProperty"},{"Type":"NodeText","Data":"方法返回 null 值，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;if\u0026gt;"},{"Type":"NodeText","Data":"标签获取的所有条件值都为 null，所有条件不成立，动态 sql 可以正常执行。"}]}]},{"ID":"20240201213604-qhwvfz9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213604-qhwvfz9","updated":"20240201213604"},"Children":[{"ID":"20240201213605-ifmb6g7","Type":"NodeParagraph","Properties":{"id":"20240201213605-ifmb6g7","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"queryById(1L)"},{"Type":"NodeText","Data":"方法执行时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parameterObject"},{"Type":"NodeText","Data":"为 map，包含了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"id"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"param1"},{"Type":"NodeText","Data":"两个 key 值。当获取"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;if\u0026gt;"},{"Type":"NodeText","Data":"标签中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"的属性值时，进入"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"((Map)parameterObject).get(name)"},{"Type":"NodeText","Data":"方法中，map 中 key 不包含"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"，所以抛出异常。"}]}]},{"ID":"20240201213606-33idluw","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213606-33idluw","updated":"20240201213606"},"Children":[{"ID":"20240201213607-6kxew5x","Type":"NodeParagraph","Properties":{"id":"20240201213607-6kxew5x","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"queryById(1L,\u0026quot;1\u0026quot;)"},{"Type":"NodeText","Data":"方法执行时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parameterObject"},{"Type":"NodeText","Data":"中包含"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"id"},{"Type":"NodeText","Data":","},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"param1"},{"Type":"NodeText","Data":","},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":","},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"param2"},{"Type":"NodeText","Data":"四个 key 值，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"id"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"属性都可以获取到，动态 sql 正常执行。"}]}]}]},{"ID":"20240201213608-ihp0x52","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213608-ihp0x52","updated":"20240201213608"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 是如何进行分页的？分页插件的原理是什么？"}]},{"ID":"20240201213609-b0csyqw","Type":"NodeParagraph","Properties":{"id":"20240201213609-b0csyqw","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213610-3tkelb4","Type":"NodeParagraph","Properties":{"id":"20240201213610-3tkelb4","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"答："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"(1)"},{"Type":"NodeText","Data":" MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"(2)"},{"Type":"NodeText","Data":" 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"(3)"},{"Type":"NodeText","Data":" 也可以使用分页插件来完成物理分页。"}]},{"ID":"20240201213611-j7f21ll","Type":"NodeParagraph","Properties":{"id":"20240201213611-j7f21ll","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。"}]},{"ID":"20240201213612-4si6ak4","Type":"NodeParagraph","Properties":{"id":"20240201213612-4si6ak4","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"举例："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select _ from student"},{"Type":"NodeText","Data":" ，拦截 sql 后重写为："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select t._ from （select \\* from student）t limit 0，10"}]},{"ID":"20240201213613-on6cwsw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213613-on6cwsw","updated":"20240201213613"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"简述 MyBatis 的插件运行原理，以及如何编写一个插件"}]},{"ID":"20240201213614-0j090rv","Type":"NodeParagraph","Properties":{"id":"20240201213614-0j090rv","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213615-t9lj6bv","Type":"NodeParagraph","Properties":{"id":"20240201213615-t9lj6bv","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"答：MyBatis 仅可以编写针对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ParameterHandler"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ResultSetHandler"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StatementHandler"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executor"},{"Type":"NodeText","Data":" 这 4 种接口的插件，MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InvocationHandler"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invoke()"},{"Type":"NodeText","Data":" 方法，当然，只会拦截那些你指定需要拦截的方法。"}]},{"ID":"20240201213616-3x19x24","Type":"NodeParagraph","Properties":{"id":"20240201213616-3x19x24","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"实现 MyBatis 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Interceptor"},{"Type":"NodeText","Data":" 接口并复写 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"intercept()"},{"Type":"NodeText","Data":" 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。"}]},{"ID":"20240201213617-hejnzdg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213617-hejnzdg","updated":"20240201213617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 执行批量插入，能返回数据库主键列表吗？"}]},{"ID":"20240201213618-vmhtbm0","Type":"NodeParagraph","Properties":{"id":"20240201213618-vmhtbm0","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213619-kwoluo0","Type":"NodeParagraph","Properties":{"id":"20240201213619-kwoluo0","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"答：能，JDBC 都能，MyBatis 当然也能。"}]},{"ID":"20240201213620-qgesqai","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213620-qgesqai","updated":"20240201213620"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 动态 sql 是做什么的？都有哪些动态 sql？能简述一下动态 sql 的执行原理不？"}]},{"ID":"20240201213621-wqkrlwv","Type":"NodeParagraph","Properties":{"id":"20240201213621-wqkrlwv","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213622-6cu5s7y","Type":"NodeParagraph","Properties":{"id":"20240201213622-6cu5s7y","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"答：MyBatis 动态 sql 可以让我们在 xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能。其执行原理为，使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。"}]},{"ID":"20240201213623-65acs16","Type":"NodeParagraph","Properties":{"id":"20240201213623-65acs16","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"MyBatis 提供了 9 种动态 sql 标签:"}]},{"ID":"20240201213624-bvyvpgq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213624-bvyvpgq","updated":"20240201213624"},"Children":[{"ID":"20240201213625-g96u1k0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-g96u1k0","updated":"20240201213625"},"Children":[{"ID":"20240201213626-b3dst0x","Type":"NodeParagraph","Properties":{"id":"20240201213626-b3dst0x","updated":"20240201213626"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;if\u0026gt;\u0026lt;/if\u0026gt;"}]}]},{"ID":"20240201213627-z7iil5m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-z7iil5m","updated":"20240201213627"},"Children":[{"ID":"20240201213628-w95uqaz","Type":"NodeParagraph","Properties":{"id":"20240201213628-w95uqaz","updated":"20240201213628"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;where\u0026gt;\u0026lt;/where\u0026gt;(trim,set)"}]}]},{"ID":"20240201213629-sje3o1g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-sje3o1g","updated":"20240201213629"},"Children":[{"ID":"20240201213630-sjrqq02","Type":"NodeParagraph","Properties":{"id":"20240201213630-sjrqq02","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;choose\u0026gt;\u0026lt;/choose\u0026gt;（when, otherwise）"}]}]},{"ID":"20240201213631-nm07vxl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-nm07vxl","updated":"20240201213631"},"Children":[{"ID":"20240201213632-bmgawad","Type":"NodeParagraph","Properties":{"id":"20240201213632-bmgawad","updated":"20240201213632"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;foreach\u0026gt;\u0026lt;/foreach\u0026gt;"}]}]},{"ID":"20240201213633-7ho35oq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213633-7ho35oq","updated":"20240201213633"},"Children":[{"ID":"20240201213634-ja7psmx","Type":"NodeParagraph","Properties":{"id":"20240201213634-ja7psmx","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;bind/\u0026gt;"}]}]}]},{"ID":"20240201213635-fzxzecs","Type":"NodeParagraph","Properties":{"id":"20240201213635-fzxzecs","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"关于 MyBatis 动态 SQL 的详细介绍，请看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000039335704","TextMarkTextContent":"Mybatis 系列全解（八）：Mybatis 的 9 大动态 SQL 标签你知道几个？"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213636-36wzumn","Type":"NodeParagraph","Properties":{"id":"20240201213636-36wzumn","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"关于这些动态 SQL 的具体使用方法，请看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cloud.tencent.com/developer/article/1943349","TextMarkTextContent":"Mybatis【13】-- Mybatis 动态 sql 标签怎么使用？"}]},{"ID":"20240201213637-wluvd6z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213637-wluvd6z","updated":"20240201213637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？"}]},{"ID":"20240201213638-6qg4r35","Type":"NodeParagraph","Properties":{"id":"20240201213638-6qg4r35","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213639-nipoezw","Type":"NodeParagraph","Properties":{"id":"20240201213639-nipoezw","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"答：第一种是使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;resultMap\u0026gt;"},{"Type":"NodeText","Data":" 标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用 sql 列的别名功能，将列别名书写为对象属性名，比如 T_NAME AS NAME，对象属性名一般是 name，小写，但是列名不区分大小写，MyBatis 会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成 T_NAME AS NaMe，MyBatis 一样可以正常工作。"}]},{"ID":"20240201213640-1u7qsa5","Type":"NodeParagraph","Properties":{"id":"20240201213640-1u7qsa5","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"有了列名与属性名的映射关系后，MyBatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。"}]},{"ID":"20240201213641-ra795vx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213641-ra795vx","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别"}]},{"ID":"20240201213642-20cav3u","Type":"NodeParagraph","Properties":{"id":"20240201213642-20cav3u","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213643-e4rufjt","Type":"NodeParagraph","Properties":{"id":"20240201213643-e4rufjt","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"答：能，MyBatis 不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询，多对一查询，其实就是一对一查询，只需要把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"selectOne()"},{"Type":"NodeText","Data":" 修改为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"selectList()"},{"Type":"NodeText","Data":" 即可；多对多查询，其实就是一对多查询，只需要把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"selectOne()"},{"Type":"NodeText","Data":" 修改为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"selectList()"},{"Type":"NodeText","Data":" 即可。"}]},{"ID":"20240201213644-v4owbxw","Type":"NodeParagraph","Properties":{"id":"20240201213644-v4owbxw","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"关联对象查询，有两种实现方式，一种是单独发送一个 sql 去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用 join 查询，一部分列是 A 对象的属性值，另外一部分列是关联对象 B 的属性值，好处是只发一个 sql 查询，就可以把主对象和其关联对象查出来。"}]},{"ID":"20240201213645-7mscv98","Type":"NodeParagraph","Properties":{"id":"20240201213645-7mscv98","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"那么问题来了，join 查询出来 100 条记录，如何确定主对象是 5 个，而不是 100 个？其去重复的原理是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;resultMap\u0026gt;"},{"Type":"NodeText","Data":" 标签内的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;id\u0026gt;"},{"Type":"NodeText","Data":" 子标签，指定了唯一确定一条记录的 id 列，MyBatis 根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;id\u0026gt;"},{"Type":"NodeText","Data":" 列值来完成 100 条记录的去重复功能， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;id\u0026gt;"},{"Type":"NodeText","Data":" 可以有多个，代表了联合主键的语意。"}]},{"ID":"20240201213646-7icpfm1","Type":"NodeParagraph","Properties":{"id":"20240201213646-7icpfm1","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。"}]},{"ID":"20240201213647-04btxn5","Type":"NodeParagraph","Properties":{"id":"20240201213647-04btxn5","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"举例：下面 join 查询出来 6 条记录，一、二列是 Teacher 对象列，第三列为 Student 对象列，MyBatis 去重复处理后，结果为 1 个老师 6 个学生，而不是 6 个老师 6 个学生。"}]},{"ID":"20240201213648-5ch5mb3","Type":"NodeTable","Data":"| t_id | t_name  | s_id |\n| ---- | ------- | ---- |\n| 1    | teacher | 38   |\n| 1    | teacher | 39   |\n| 1    | teacher | 40   |\n| 1    | teacher | 41   |\n| 1    | teacher | 42   |\n| 1    | teacher | 43   |","TableAligns":[0,0,0],"Properties":{"id":"20240201213648-5ch5mb3","updated":"20240201213648"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"t_id"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"t_name"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"s_id"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"teacher"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"38"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"teacher"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"39"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"teacher"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"40"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"teacher"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"41"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"teacher"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"42"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"teacher"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"43"}]}]}]},{"ID":"20240201213649-rkguxcb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213649-rkguxcb","updated":"20240201213649"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？"}]},{"ID":"20240201213650-y9msl74","Type":"NodeParagraph","Properties":{"id":"20240201213650-y9msl74","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213651-dstnk61","Type":"NodeParagraph","Properties":{"id":"20240201213651-dstnk61","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"答：MyBatis 仅支持 association 关联对象和 collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在 MyBatis 配置文件中，可以配置是否启用延迟加载 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lazyLoadingEnabled=true|false。"}]},{"ID":"20240201213652-zwbh1e6","Type":"NodeParagraph","Properties":{"id":"20240201213652-zwbh1e6","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"它的原理是，使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CGLIB"},{"Type":"NodeText","Data":" 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"a.getB().getName()"},{"Type":"NodeText","Data":" ，拦截器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invoke()"},{"Type":"NodeText","Data":" 方法发现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"a.getB()"},{"Type":"NodeText","Data":" 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"a.getB().getName()"},{"Type":"NodeText","Data":" 方法的调用。这就是延迟加载的基本原理。"}]},{"ID":"20240201213653-ewnk82r","Type":"NodeParagraph","Properties":{"id":"20240201213653-ewnk82r","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"当然了，不光是 MyBatis，几乎所有的包括 Hibernate，支持延迟加载的原理都是一样的。"}]},{"ID":"20240201213654-9xpcrq6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213654-9xpcrq6","updated":"20240201213654"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 的 xml 映射文件中，不同的 xml 映射文件，id 是否可以重复？"}]},{"ID":"20240201213655-isah0cd","Type":"NodeParagraph","Properties":{"id":"20240201213655-isah0cd","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213656-cc0la0u","Type":"NodeParagraph","Properties":{"id":"20240201213656-cc0la0u","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"答：不同的 xml 映射文件，如果配置了 namespace，那么 id 可以重复；如果没有配置 namespace，那么 id 不能重复；毕竟 namespace 不是必须的，只是最佳实践而已。"}]},{"ID":"20240201213657-udv8bj9","Type":"NodeParagraph","Properties":{"id":"20240201213657-udv8bj9","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"原因就是 namespace+id 是作为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Map\u0026lt;String, MappedStatement\u0026gt;"},{"Type":"NodeText","Data":" 的 key 使用的，如果没有 namespace，就剩下 id，那么，id 重复会导致数据互相覆盖。有了 namespace，自然 id 就可以重复，namespace 不同，namespace+id 自然也就不同。"}]},{"ID":"20240201213658-4xtvfrk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213658-4xtvfrk","updated":"20240201213658"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 中如何执行批处理？"}]},{"ID":"20240201213659-efz1mjq","Type":"NodeParagraph","Properties":{"id":"20240201213659-efz1mjq","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"注：我出的。"}]},{"ID":"20240201213660-qseg3ri","Type":"NodeParagraph","Properties":{"id":"20240201213660-qseg3ri","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"答：使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BatchExecutor"},{"Type":"NodeText","Data":" 完成批处理。"}]},{"ID":"20240201213661-jiffe90","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213661-jiffe90","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 都有哪些 Executor 执行器？它们之间的区别是什么？"}]},{"ID":"20240201213662-elrrcj0","Type":"NodeParagraph","Properties":{"id":"20240201213662-elrrcj0","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"注：我出的"}]},{"ID":"20240201213663-ns2k9sk","Type":"NodeParagraph","Properties":{"id":"20240201213663-ns2k9sk","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"答：MyBatis 有三种基本的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executor"},{"Type":"NodeText","Data":" 执行器："}]},{"ID":"20240201213664-m4hjovp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-m4hjovp","updated":"20240201213664"},"Children":[{"ID":"20240201213665-mssminn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-mssminn","updated":"20240201213665"},"Children":[{"ID":"20240201213666-etutgkx","Type":"NodeParagraph","Properties":{"id":"20240201213666-etutgkx","updated":"20240201213666"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SimpleExecutor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 每执行一次 update 或 select，就开启一个 Statement 对象，用完立刻关闭 Statement 对象。"}]}]},{"ID":"20240201213667-czg2v52","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-czg2v52","updated":"20240201213667"},"Children":[{"ID":"20240201213668-nvbcxmk","Type":"NodeParagraph","Properties":{"id":"20240201213668-nvbcxmk","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ReuseExecutor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 执行 update 或 select，以 sql 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map\u003cString, Statement\u003e内，供下一次使用。简言之，就是重复使用 Statement 对象。"}]}]},{"ID":"20240201213669-qcq8qga","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-qcq8qga","updated":"20240201213669"},"Children":[{"ID":"20240201213670-6gbz559","Type":"NodeParagraph","Properties":{"id":"20240201213670-6gbz559","updated":"20240201213670"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"BatchExecutor"},{"Type":"NodeText","Data":"：执行 update（没有 select，JDBC 批处理不支持 select），将所有 sql 都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch()完毕后，等待逐一执行 executeBatch()批处理。与 JDBC 批处理相同。"}]}]}]},{"ID":"20240201213671-4ygj7rc","Type":"NodeParagraph","Properties":{"id":"20240201213671-4ygj7rc","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"作用范围："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executor"},{"Type":"NodeText","Data":" 的这些特点，都严格限制在 SqlSession 生命周期范围内。"}]},{"ID":"20240201213672-5ufubc3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213672-5ufubc3","updated":"20240201213672"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 中如何指定使用哪一种 Executor 执行器？"}]},{"ID":"20240201213673-4gdq0c4","Type":"NodeParagraph","Properties":{"id":"20240201213673-4gdq0c4","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"注：我出的"}]},{"ID":"20240201213674-19yign3","Type":"NodeParagraph","Properties":{"id":"20240201213674-19yign3","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"答：在 MyBatis 配置文件中，可以指定默认的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExecutorType"},{"Type":"NodeText","Data":" 执行器类型，也可以手动给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DefaultSqlSessionFactory"},{"Type":"NodeText","Data":" 的创建 SqlSession 的方法传递 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExecutorType"},{"Type":"NodeText","Data":" 类型参数。"}]},{"ID":"20240201213675-wav5mkk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213675-wav5mkk","updated":"20240201213675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 是否可以映射 Enum 枚举类？"}]},{"ID":"20240201213676-l5effyk","Type":"NodeParagraph","Properties":{"id":"20240201213676-l5effyk","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"注：我出的"}]},{"ID":"20240201213677-j0fr6hq","Type":"NodeParagraph","Properties":{"id":"20240201213677-j0fr6hq","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"答：MyBatis 可以映射枚举类，不单可以映射枚举类，MyBatis 可以映射任何对象到表的一列上。映射方式为自定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TypeHandler"},{"Type":"NodeText","Data":" ，实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TypeHandler"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setParameter()"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getResult()"},{"Type":"NodeText","Data":" 接口方法。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TypeHandler"},{"Type":"NodeText","Data":" 有两个作用："}]},{"ID":"20240201213678-8m0py4p","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213678-8m0py4p","updated":"20240201213678"},"Children":[{"ID":"20240201213679-rh3ktlc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-rh3ktlc","updated":"20240201213679"},"Children":[{"ID":"20240201213680-3byeodt","Type":"NodeParagraph","Properties":{"id":"20240201213680-3byeodt","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"一是完成从 javaType 至 jdbcType 的转换；"}]}]},{"ID":"20240201213681-9fnp52a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-9fnp52a","updated":"20240201213681"},"Children":[{"ID":"20240201213682-qhy1fcn","Type":"NodeParagraph","Properties":{"id":"20240201213682-qhy1fcn","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"二是完成 jdbcType 至 javaType 的转换，体现为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setParameter()"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getResult()"},{"Type":"NodeText","Data":" 两个方法，分别代表设置 sql 问号占位符参数和获取列查询结果。"}]}]}]},{"ID":"20240201213683-yrorb2x","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213683-yrorb2x","updated":"20240201213683"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"MyBatis 映射文件中，如果 A 标签通过 include 引用了 B 标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在 A 标签的前面？"}]},{"ID":"20240201213684-gfa2lor","Type":"NodeParagraph","Properties":{"id":"20240201213684-gfa2lor","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"注：我出的"}]},{"ID":"20240201213685-gq8z7j6","Type":"NodeParagraph","Properties":{"id":"20240201213685-gq8z7j6","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"答：虽然 MyBatis 解析 xml 映射文件是按照顺序解析的，但是，被引用的 B 标签依然可以定义在任何地方，MyBatis 都可以正确识别。"}]},{"ID":"20240201213686-56fmf17","Type":"NodeParagraph","Properties":{"id":"20240201213686-56fmf17","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"原理是，MyBatis 解析 A 标签，发现 A 标签引用了 B 标签，但是 B 标签尚未解析到，尚不存在，此时，MyBatis 会将 A 标签标记为未解析状态，然后继续解析余下的标签，包含 B 标签，待所有标签解析完毕，MyBatis 会重新解析那些被标记为未解析的标签，此时再解析 A 标签时，B 标签已经存在，A 标签也就可以正常解析完成了。"}]},{"ID":"20240201213687-f6tg9uk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213687-f6tg9uk","updated":"20240201213687"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"简述 MyBatis 的 xml 映射文件和 MyBatis 内部数据结构之间的映射关系？"}]},{"ID":"20240201213688-l2zgz08","Type":"NodeParagraph","Properties":{"id":"20240201213688-l2zgz08","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"注：我出的"}]},{"ID":"20240201213689-qdvwved","Type":"NodeParagraph","Properties":{"id":"20240201213689-qdvwved","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"答：MyBatis 将所有 xml 配置信息都封装到 All-In-One 重量级对象 Configuration 内部。在 xml 映射文件中， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;parameterMap\u0026gt;"},{"Type":"NodeText","Data":" 标签会被解析为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ParameterMap"},{"Type":"NodeText","Data":" 对象，其每个子元素会被解析为 ParameterMapping 对象。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;resultMap\u0026gt;"},{"Type":"NodeText","Data":" 标签会被解析为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ResultMap"},{"Type":"NodeText","Data":" 对象，其每个子元素会被解析为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ResultMapping"},{"Type":"NodeText","Data":" 对象。每一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;select\u0026gt;、\u0026lt;insert\u0026gt;、\u0026lt;update\u0026gt;、\u0026lt;delete\u0026gt;"},{"Type":"NodeText","Data":" 标签均会被解析为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedStatement"},{"Type":"NodeText","Data":" 对象，标签内的 sql 会被解析为 BoundSql 对象。"}]},{"ID":"20240201213690-4ei84n9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213690-4ei84n9","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么说 MyBatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？"}]},{"ID":"20240201213691-lhgm0ns","Type":"NodeParagraph","Properties":{"id":"20240201213691-lhgm0ns","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"注：我出的"}]},{"ID":"20240201213692-6ezrlc0","Type":"NodeParagraph","Properties":{"id":"20240201213692-6ezrlc0","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"答：Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而 MyBatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 ORM 映射工具。"}]},{"ID":"20240201213693-yh1xtmh","Type":"NodeParagraph","Properties":{"id":"20240201213693-yh1xtmh","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"面试题看似都很简单，但是想要能正确回答上来，必定是研究过源码且深入的人，而不是仅会使用的人或者用的很熟的人，以上所有面试题及其答案所涉及的内容，在我的 MyBatis 系列博客中都有详细讲解和原理分析。"}]},{"ID":"20240201213694-5wwtnk0","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213694-5wwtnk0","updated":"20240201213694"}},{"ID":"20240201213695-7j3g21l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213695-7j3g21l","updated":"20240201213695"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"文章推荐"}]},{"ID":"20240201213696-xwz4es9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-xwz4es9","updated":"20240201213696"},"Children":[{"ID":"20240201213697-uh4xa0h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213697-uh4xa0h","updated":"20240201213697"},"Children":[{"ID":"20240201213698-knqdye9","Type":"NodeParagraph","Properties":{"id":"20240201213698-knqdye9","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7273516671574687759","TextMarkTextContent":"2W 字全面剖析 Mybatis 中的 9 种设计模式"}]}]},{"ID":"20240201213699-eoe7d5b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213699-eoe7d5b","updated":"20240201213699"},"Children":[{"ID":"20240201213700-g01e1zp","Type":"NodeParagraph","Properties":{"id":"20240201213700-g01e1zp","updated":"20240201213700"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/WUEAdFDwZsZ4EKO8ix0ijg","TextMarkTextContent":"从零开始实现一个 MyBatis 加解密插件"}]}]},{"ID":"20240201213701-l0hpyjz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213701-l0hpyjz","updated":"20240201213701"},"Children":[{"ID":"20240201213702-fhe1v2n","Type":"NodeParagraph","Properties":{"id":"20240201213702-fhe1v2n","updated":"20240201213702"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7051910683264286750","TextMarkTextContent":"MyBatis 最全使用指南"}]}]},{"ID":"20240201213703-t4lcjju","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-t4lcjju","updated":"20240201213703"},"Children":[{"ID":"20240201213704-vmxq4pf","Type":"NodeParagraph","Properties":{"id":"20240201213704-vmxq4pf","updated":"20240201213704"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7269390456530190376","TextMarkTextContent":"脑洞打开！第一次看到这样使用 MyBatis 的，看得我一愣一愣的。"}]}]},{"ID":"20240201213705-2dbm6uk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-2dbm6uk","updated":"20240201213705"},"Children":[{"ID":"20240201213706-7agwl28","Type":"NodeParagraph","Properties":{"id":"20240201213706-7agwl28","updated":"20240201213706"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7264921613551730722","TextMarkTextContent":"MyBatis 居然也有并发问题"}]}]}]}]}