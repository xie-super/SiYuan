{"ID":"20240201213411-vt6ombo","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213411-vt6ombo","title":"spring-transaction","updated":"20240201213411"},"Children":[{"ID":"20240201213412-b6erlzo","Type":"NodeThematicBreak","Properties":{"id":"20240201213412-b6erlzo","updated":"20240201213412"}},{"ID":"20240201213413-exdg9n1","Type":"NodeParagraph","Properties":{"id":"20240201213413-exdg9n1","updated":"20240201213413"},"Children":[{"Type":"NodeText","Data":"title: Spring 事务详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 框架"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213414-cjy7okj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213414-cjy7okj","updated":"20240201213414"},"Children":[{"ID":"20240201213415-tpbv4q3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213415-tpbv4q3","updated":"20240201213415"},"Children":[{"ID":"20240201213416-4hk2eq4","Type":"NodeParagraph","Properties":{"id":"20240201213416-4hk2eq4","updated":"20240201213416"},"Children":[{"Type":"NodeText","Data":"Spring"}]}]}]},{"ID":"20240201213417-ivt5c20","Type":"NodeThematicBreak","Properties":{"id":"20240201213417-ivt5c20","updated":"20240201213417"}},{"ID":"20240201213418-obonqv3","Type":"NodeParagraph","Properties":{"id":"20240201213418-obonqv3","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"前段时间答应读者的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring 事务"},{"Type":"NodeText","Data":" 分析总结终于来了。这部分内容比较重要，不论是对于工作还是面试，但是网上比较好的参考资料比较少。"}]},{"ID":"20240201213419-6w9z3zv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213419-6w9z3zv","updated":"20240201213419"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是事务？"}]},{"ID":"20240201213420-nwqr8v1","Type":"NodeParagraph","Properties":{"id":"20240201213420-nwqr8v1","updated":"20240201213420"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务是逻辑上的一组操作，要么都执行，要么都不执行。"}]},{"ID":"20240201213421-vi25r6p","Type":"NodeParagraph","Properties":{"id":"20240201213421-vi25r6p","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"相信大家应该都能背上面这句话了，下面我结合我们日常的真实开发来谈一谈。"}]},{"ID":"20240201213422-oyvvwjd","Type":"NodeParagraph","Properties":{"id":"20240201213422-oyvvwjd","updated":"20240201213422"},"Children":[{"Type":"NodeText","Data":"我们系统的每个业务方法可能包括了多个原子性的数据库操作，比如下面的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"savePerson()"},{"Type":"NodeText","Data":" 方法中就有两个原子性的数据库操作。这些原子性的数据库操作是有依赖的，它们要么都执行，要不就都不执行。"}]},{"ID":"20240201213423-6gdie8w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213423-6gdie8w","updated":"20240201213423"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"  public void savePerson() {\n    personDao.save(person);\n    personDetailDao.save(personDetail);\n  }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213424-i8gnb5p","Type":"NodeParagraph","Properties":{"id":"20240201213424-i8gnb5p","updated":"20240201213424"},"Children":[{"Type":"NodeText","Data":"另外，需要格外注意的是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务能否生效数据库引擎是否支持事务是关键。比如常用的 MySQL 数据库默认使用支持事务的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"innodb"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"引擎。但是，如果把数据库引擎变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"myisam"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，那么程序也就不再支持事务了！"}]},{"ID":"20240201213425-7s7r7nh","Type":"NodeParagraph","Properties":{"id":"20240201213425-7s7r7nh","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作就是："}]},{"ID":"20240201213426-k1dk2on","Type":"NodeBlockquote","Properties":{"id":"20240201213426-k1dk2on","updated":"20240201213426"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213427-znrmxzg","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213427-znrmxzg","updated":"20240201213427"},"Children":[{"ID":"20240201213428-5jvi0z7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213428-5jvi0z7","updated":"20240201213428"},"Children":[{"ID":"20240201213429-6i9hfpt","Type":"NodeParagraph","Properties":{"id":"20240201213429-6i9hfpt","updated":"20240201213429"},"Children":[{"Type":"NodeText","Data":"将小明的余额减少 1000 元。"}]}]},{"ID":"20240201213430-hx4vlek","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213430-hx4vlek","updated":"20240201213430"},"Children":[{"ID":"20240201213431-ferzp02","Type":"NodeParagraph","Properties":{"id":"20240201213431-ferzp02","updated":"20240201213431"},"Children":[{"Type":"NodeText","Data":"将小红的余额增加 1000 元。"}]}]}]}]},{"ID":"20240201213432-1xrwugl","Type":"NodeParagraph","Properties":{"id":"20240201213432-1xrwugl","updated":"20240201213432"},"Children":[{"Type":"NodeText","Data":"万一在这两个操作之间突然出现错误比如银行系统崩溃或者网络故障，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。"}]},{"ID":"20240201213433-xsnq4jk","Type":"NodeParagraph","Properties":{"id":"20240201213433-xsnq4jk","updated":"20240201213433"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"事务示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/mysql/%E4%BA%8B%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213434-0ijoyvx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213434-0ijoyvx","updated":"20240201213434"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class OrdersService {\n  private AccountDao accountDao;\n\n  public void setOrdersDao(AccountDao accountDao) {\n    this.accountDao = accountDao;\n  }\n\n  @Transactional(propagation = Propagation.REQUIRED,\n                isolation = Isolation.DEFAULT, readOnly = false, timeout = -1)\n  public void accountMoney() {\n    //小红账户多1000\n    accountDao.addMoney(1000,xiaohong);\n    //模拟突然出现的异常，比如银行中可能为突然停电等等\n    //如果没有配置事务管理的话会造成，小红账户多了1000而小明账户没有少钱\n    int i = 10 / 0;\n    //小王账户少1000\n    accountDao.reduceMoney(1000,xiaoming);\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213435-36dt2ti","Type":"NodeParagraph","Properties":{"id":"20240201213435-36dt2ti","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"另外，数据库事务的 ACID 四大特性是事务的基础，下面简单来了解一下。"}]},{"ID":"20240201213436-fs5aofa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213436-fs5aofa","updated":"20240201213436"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务的特性（ACID）了解么?"}]},{"ID":"20240201213437-sazi0bp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213437-sazi0bp","updated":"20240201213437"},"Children":[{"ID":"20240201213438-ydl3f0a","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213438-ydl3f0a","updated":"20240201213438"},"Children":[{"ID":"20240201213439-7bmb5rd","Type":"NodeParagraph","Properties":{"id":"20240201213439-7bmb5rd","updated":"20240201213439"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原子性"},{"Type":"NodeText","Data":"（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Atomicity"},{"Type":"NodeText","Data":"）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；"}]}]},{"ID":"20240201213440-15abbu0","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213440-15abbu0","updated":"20240201213440"},"Children":[{"ID":"20240201213441-bfalj8q","Type":"NodeParagraph","Properties":{"id":"20240201213441-bfalj8q","updated":"20240201213441"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性"},{"Type":"NodeText","Data":"（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consistency"},{"Type":"NodeText","Data":"）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；"}]}]},{"ID":"20240201213442-94pglrm","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213442-94pglrm","updated":"20240201213442"},"Children":[{"ID":"20240201213443-74owrvi","Type":"NodeParagraph","Properties":{"id":"20240201213443-74owrvi","updated":"20240201213443"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"隔离性"},{"Type":"NodeText","Data":"（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Isolation"},{"Type":"NodeText","Data":"）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；"}]}]},{"ID":"20240201213444-yh2162j","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213444-yh2162j","updated":"20240201213444"},"Children":[{"ID":"20240201213445-96054c1","Type":"NodeParagraph","Properties":{"id":"20240201213445-96054c1","updated":"20240201213445"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久性"},{"Type":"NodeText","Data":"（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Durability"},{"Type":"NodeText","Data":"）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。"}]}]}]},{"ID":"20240201213446-rfeodpz","Type":"NodeParagraph","Properties":{"id":"20240201213446-rfeodpz","updated":"20240201213446"},"Children":[{"Type":"NodeText","Data":"🌈 这里要额外补充一点："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！"},{"Type":"NodeText","Data":" 想必大家也和我一样，被 ACID 这个概念被误导了很久! 我也是看周志明老师的公开课"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/opencourse/intro/100064201","TextMarkTextContent":"《周志明的软件架构课》"},{"Type":"NodeText","Data":"才搞清楚的（多看好书！！！）。"}]},{"ID":"20240201213447-9cunxdo","Type":"NodeParagraph","Properties":{"id":"20240201213447-9cunxdo","updated":"20240201213447"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"AID-\u003eC","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/mysql/AID-\u003eC.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213448-htlxb3y","Type":"NodeParagraph","Properties":{"id":"20240201213448-htlxb3y","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"另外，DDIA 也就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://book.douban.com/subject/30329536/","TextMarkTextContent":"《Designing Data-Intensive Application（数据密集型应用系统设计）》"},{"Type":"NodeText","Data":" 的作者在他的这本书中如是说："}]},{"ID":"20240201213449-o748m6m","Type":"NodeBlockquote","Properties":{"id":"20240201213449-o748m6m","updated":"20240201213449"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213450-h4cwgdu","Type":"NodeParagraph","Properties":{"id":"20240201213450-h4cwgdu","updated":"20240201213450"},"Children":[{"Type":"NodeText","Data":"Atomicity, isolation, and durability are properties of the database, whereas consis‐ tency (in the ACID sense) is a property of the application. The application may rely on the database’s atomicity and isolation properties in order to achieve consistency, but it’s not up to the database alone."}]},{"ID":"20240201213451-4iurs6r","Type":"NodeParagraph","Properties":{"id":"20240201213451-4iurs6r","updated":"20240201213451"},"Children":[{"Type":"NodeText","Data":"翻译过来的意思是：原子性，隔离性和持久性是数据库的属性，而一致性（在 ACID 意义上）是应用程序的属性。应用可能依赖数据库的原子性和隔离属性来实现一致性，但这并不仅取决于数据库。因此，字母 C 不属于 ACID 。"}]}]},{"ID":"20240201213452-f6ooo95","Type":"NodeParagraph","Properties":{"id":"20240201213452-f6ooo95","updated":"20240201213452"},"Children":[{"Type":"NodeText","Data":"《Designing Data-Intensive Application（数据密集型应用系统设计）》这本书强推一波，值得读很多遍！豆瓣有接近 90% 的人看了这本书之后给了五星好评。另外，中文翻译版本已经在 GitHub 开源，地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Vonng/ddia","TextMarkTextContent":"https://github.com/Vonng/ddia"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213453-z57tfo0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213453-z57tfo0","updated":"20240201213453"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"详谈 Spring 对事务的支持"}]},{"ID":"20240201213454-d0e53fg","Type":"NodeBlockquote","Properties":{"id":"20240201213454-d0e53fg","updated":"20240201213454"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213455-38bk3lq","Type":"NodeParagraph","Properties":{"id":"20240201213455-38bk3lq","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"⚠️ 再提醒一次：你的程序是否支持事务首先取决于数据库 ，比如使用 MySQL 的话，如果你选择的是 innodb 引擎，那么恭喜你，是可以支持事务的。但是，如果你的 MySQL 数据库使用的是 myisam 引擎的话，那不好意思，从根上就是不支持事务的。"}]}]},{"ID":"20240201213456-yphdpxf","Type":"NodeParagraph","Properties":{"id":"20240201213456-yphdpxf","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"这里再多提一下一个非常重要的知识点："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL 怎么保证原子性的？"}]},{"ID":"20240201213457-mkhywub","Type":"NodeParagraph","Properties":{"id":"20240201213457-mkhywub","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"我们知道如果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"回滚"},{"Type":"NodeText","Data":"，在 MySQL 中，恢复机制是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"回滚日志（undo log）"},{"Type":"NodeText","Data":" 实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"回滚日志"},{"Type":"NodeText","Data":" 中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来回滚之前未完成的事务。"}]},{"ID":"20240201213458-ws44509","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213458-ws44509","updated":"20240201213458"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 支持两种方式的事务管理"}]},{"ID":"20240201213459-uucu79v","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213459-uucu79v","updated":"20240201213459"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"编程式事务管理"}]},{"ID":"20240201213460-rttfx10","Type":"NodeParagraph","Properties":{"id":"20240201213460-rttfx10","updated":"20240201213460"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionTemplate"},{"Type":"NodeText","Data":"或者"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionManager"},{"Type":"NodeText","Data":"手动管理事务，实际应用中很少使用，但是对于你理解 Spring 事务管理原理有帮助。"}]},{"ID":"20240201213461-yem04ol","Type":"NodeParagraph","Properties":{"id":"20240201213461-yem04ol","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionTemplate"},{"Type":"NodeText","Data":" 进行编程式事务管理的示例代码如下："}]},{"ID":"20240201213462-g9n11sd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213462-g9n11sd","updated":"20240201213462"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Autowired\nprivate TransactionTemplate transactionTemplate;\npublic void testTransaction() {\n\n        transactionTemplate.execute(new TransactionCallbackWithoutResult() {\n            @Override\n            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {\n\n                try {\n\n                    // ....  业务代码\n                } catch (Exception e){\n                    //回滚\n                    transactionStatus.setRollbackOnly();\n                }\n\n            }\n        });\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213463-5rnk9ls","Type":"NodeParagraph","Properties":{"id":"20240201213463-5rnk9ls","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionManager"},{"Type":"NodeText","Data":" 进行编程式事务管理的示例代码如下："}]},{"ID":"20240201213464-n0lo5vd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213464-n0lo5vd","updated":"20240201213464"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Autowired\nprivate PlatformTransactionManager transactionManager;\n\npublic void testTransaction() {\n\n  TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionDefinition());\n          try {\n               // ....  业务代码\n              transactionManager.commit(status);\n          } catch (Exception e) {\n              transactionManager.rollback(status);\n          }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213465-2eg20ep","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213465-2eg20ep","updated":"20240201213465"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"声明式事务管理"}]},{"ID":"20240201213466-fv21rwn","Type":"NodeParagraph","Properties":{"id":"20240201213466-fv21rwn","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"推荐使用（代码侵入性最小），实际是通过 AOP 实现（基于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的全注解方式使用最多）。"}]},{"ID":"20240201213467-d1jt4bl","Type":"NodeParagraph","Properties":{"id":"20240201213467-d1jt4bl","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":"注解进行事务管理的示例代码如下："}]},{"ID":"20240201213468-b1ehae6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213468-b1ehae6","updated":"20240201213468"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Transactional(propagation = Propagation.REQUIRED)\npublic void aMethod {\n  //do something\n  B b = new B();\n  C c = new C();\n  b.bMethod();\n  c.cMethod();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213469-79bgojl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213469-79bgojl","updated":"20240201213469"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务管理接口介绍"}]},{"ID":"20240201213470-nw8cp5i","Type":"NodeParagraph","Properties":{"id":"20240201213470-nw8cp5i","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"Spring 框架中，事务管理相关最重要的 3 个接口如下："}]},{"ID":"20240201213471-3feh2f9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-3feh2f9","updated":"20240201213471"},"Children":[{"ID":"20240201213472-k2ik2ta","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213472-k2ik2ta","updated":"20240201213472"},"Children":[{"ID":"20240201213473-ap3t5x2","Type":"NodeParagraph","Properties":{"id":"20240201213473-ap3t5x2","updated":"20240201213473"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeText","Data":"：（平台）事务管理器，Spring 事务策略的核心。"}]}]},{"ID":"20240201213474-bcl8ig1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213474-bcl8ig1","updated":"20240201213474"},"Children":[{"ID":"20240201213475-zfqu9y1","Type":"NodeParagraph","Properties":{"id":"20240201213475-zfqu9y1","updated":"20240201213475"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":"：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。"}]}]},{"ID":"20240201213476-lsyqj1y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213476-lsyqj1y","updated":"20240201213476"},"Children":[{"ID":"20240201213477-jn4696o","Type":"NodeParagraph","Properties":{"id":"20240201213477-jn4696o","updated":"20240201213477"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionStatus"},{"Type":"NodeText","Data":"：事务运行状态。"}]}]}]},{"ID":"20240201213478-imbe0eu","Type":"NodeParagraph","Properties":{"id":"20240201213478-imbe0eu","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"我们可以把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeText","Data":" 接口可以被看作是事务上层的管理者，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionStatus"},{"Type":"NodeText","Data":" 这两个接口可以看作是事务的描述。"}]},{"ID":"20240201213479-hwweyn4","Type":"NodeParagraph","Properties":{"id":"20240201213479-hwweyn4","updated":"20240201213479"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeText","Data":" 会根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":" 的定义比如事务超时时间、隔离级别、传播行为等来进行事务管理 ，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionStatus"},{"Type":"NodeText","Data":" 接口则提供了一些方法来获取事务相应的状态比如是否新事务、是否可以回滚等等。"}]},{"ID":"20240201213480-5e5r6l5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213480-5e5r6l5","updated":"20240201213480"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"PlatformTransactionManager:事务管理接口"}]},{"ID":"20240201213481-sbgoj02","Type":"NodeParagraph","Properties":{"id":"20240201213481-sbgoj02","updated":"20240201213481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring 并不直接管理事务，而是提供了多种事务管理器"},{"Type":"NodeText","Data":" 。Spring 事务管理器的接口是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213482-mttx63h","Type":"NodeParagraph","Properties":{"id":"20240201213482-mttx63h","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"通过这个接口，Spring 为各个平台如：JDBC("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DataSourceTransactionManager"},{"Type":"NodeText","Data":")、Hibernate("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HibernateTransactionManager"},{"Type":"NodeText","Data":")、JPA("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"JpaTransactionManager"},{"Type":"NodeText","Data":")等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。"}]},{"ID":"20240201213483-vgad5ez","Type":"NodeParagraph","Properties":{"id":"20240201213483-vgad5ez","updated":"20240201213483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 接口的具体实现如下:"}]},{"ID":"20240201213484-jr9a8m3","Type":"NodeParagraph","Properties":{"id":"20240201213484-jr9a8m3","updated":"20240201213484"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/PlatformTransactionManager-20240201213827-ijwz3nz.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213485-owjv2ha","Type":"NodeParagraph","Properties":{"id":"20240201213485-owjv2ha","updated":"20240201213485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeText","Data":"接口中定义了三个方法："}]},{"ID":"20240201213486-szo2s58","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213486-szo2s58","updated":"20240201213486"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package org.springframework.transaction;\n\nimport org.springframework.lang.Nullable;\n\npublic interface PlatformTransactionManager {\n    //获得事务\n    TransactionStatus getTransaction(@Nullable TransactionDefinition var1) throws TransactionException;\n    //提交事务\n    void commit(TransactionStatus var1) throws TransactionException;\n    //回滚事务\n    void rollback(TransactionStatus var1) throws TransactionException;\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213487-jbelfy5","Type":"NodeParagraph","Properties":{"id":"20240201213487-jbelfy5","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这里多插一嘴。为什么要定义或者说抽象出来"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这个接口呢？"}]},{"ID":"20240201213488-u2ey19n","Type":"NodeParagraph","Properties":{"id":"20240201213488-u2ey19n","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"主要是因为要将事务管理行为抽象出来，然后不同的平台去实现它，这样我们可以保证提供给外部的行为不变，方便我们扩展。"}]},{"ID":"20240201213489-s4thecw","Type":"NodeParagraph","Properties":{"id":"20240201213489-s4thecw","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"我前段时间在我的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html","TextMarkTextContent":"知识星球"},{"Type":"NodeText","Data":"分享过："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“为什么我们要用接口？”"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213490-8ui5d5a","Type":"NodeBlockquote","Properties":{"id":"20240201213490-8ui5d5a","updated":"20240201213490"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213491-q9164wd","Type":"NodeParagraph","Properties":{"id":"20240201213491-q9164wd","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"《设计模式》（GOF 那本）这本书在很多年前都提到过说要基于接口而非实现编程，你真的知道为什么要基于接口编程么？"}]},{"ID":"20240201213492-b2ps9yj","Type":"NodeParagraph","Properties":{"id":"20240201213492-b2ps9yj","updated":"20240201213492"},"Children":[{"Type":"NodeText","Data":"纵观开源框架和项目的源码，接口是它们不可或缺的重要组成部分。要理解为什么要用接口，首先要搞懂接口提供了什么功能。我们可以把接口理解为提供了一系列功能列表的约定，接口本身不提供功能，它只定义行为。但是谁要用，就要先实现我，遵守我的约定，然后再自己去实现我定义的要实现的功能。"}]},{"ID":"20240201213493-ri72y5a","Type":"NodeParagraph","Properties":{"id":"20240201213493-ri72y5a","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"举个例子，我上个项目有发送短信的需求，为此，我们定了一个接口，接口只有两个方法:"}]},{"ID":"20240201213494-6t7jfmj","Type":"NodeParagraph","Properties":{"id":"20240201213494-6t7jfmj","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"1.发送短信 2.处理发送结果的方法。"}]},{"ID":"20240201213495-cp8bslo","Type":"NodeParagraph","Properties":{"id":"20240201213495-cp8bslo","updated":"20240201213495"},"Children":[{"Type":"NodeText","Data":"刚开始我们用的是阿里云短信服务，然后我们实现这个接口完成了一个阿里云短信的服务。后来，我们突然又换到了别的短信服务平台，我们这个时候只需要再实现这个接口即可。这样保证了我们提供给外部的行为不变。几乎不需要改变什么代码，我们就轻松完成了需求的转变，提高了代码的灵活性和可扩展性。"}]},{"ID":"20240201213496-8pbcmit","Type":"NodeParagraph","Properties":{"id":"20240201213496-8pbcmit","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"什么时候用接口？当你要实现的功能模块设计抽象行为的时候，比如发送短信的服务，图床的存储服务等等。"}]}]},{"ID":"20240201213497-j88pd2s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213497-j88pd2s","updated":"20240201213497"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"TransactionDefinition:事务属性"}]},{"ID":"20240201213498-6ppwmas","Type":"NodeParagraph","Properties":{"id":"20240201213498-6ppwmas","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"事务管理器接口 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"PlatformTransactionManager"},{"Type":"NodeText","Data":" 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"getTransaction(TransactionDefinition definition)"},{"Type":"NodeText","Data":" 方法来得到一个事务，这个方法里面的参数是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":" 类 ，这个类就定义了一些基本的事务属性。"}]},{"ID":"20240201213499-va54rl4","Type":"NodeParagraph","Properties":{"id":"20240201213499-va54rl4","updated":"20240201213499"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是事务属性呢？"},{"Type":"NodeText","Data":" 事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。"}]},{"ID":"20240201213500-i0ltw7a","Type":"NodeParagraph","Properties":{"id":"20240201213500-i0ltw7a","updated":"20240201213500"},"Children":[{"Type":"NodeText","Data":"事务属性包含了 5 个方面："}]},{"ID":"20240201213501-kmhcbb9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213501-kmhcbb9","updated":"20240201213501"},"Children":[{"ID":"20240201213502-7txhiw0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-7txhiw0","updated":"20240201213502"},"Children":[{"ID":"20240201213503-ytp4gjy","Type":"NodeParagraph","Properties":{"id":"20240201213503-ytp4gjy","updated":"20240201213503"},"Children":[{"Type":"NodeText","Data":"隔离级别"}]}]},{"ID":"20240201213504-2azu78q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-2azu78q","updated":"20240201213504"},"Children":[{"ID":"20240201213505-u9znltq","Type":"NodeParagraph","Properties":{"id":"20240201213505-u9znltq","updated":"20240201213505"},"Children":[{"Type":"NodeText","Data":"传播行为"}]}]},{"ID":"20240201213506-drsi648","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213506-drsi648","updated":"20240201213506"},"Children":[{"ID":"20240201213507-7id3izv","Type":"NodeParagraph","Properties":{"id":"20240201213507-7id3izv","updated":"20240201213507"},"Children":[{"Type":"NodeText","Data":"回滚规则"}]}]},{"ID":"20240201213508-gl8s4e9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213508-gl8s4e9","updated":"20240201213508"},"Children":[{"ID":"20240201213509-9xv1t15","Type":"NodeParagraph","Properties":{"id":"20240201213509-9xv1t15","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"是否只读"}]}]},{"ID":"20240201213510-73ywp3n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213510-73ywp3n","updated":"20240201213510"},"Children":[{"ID":"20240201213511-6w0wi6s","Type":"NodeParagraph","Properties":{"id":"20240201213511-6w0wi6s","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"事务超时"}]}]}]},{"ID":"20240201213512-n707c8u","Type":"NodeParagraph","Properties":{"id":"20240201213512-n707c8u","updated":"20240201213512"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":" 接口中定义了 5 个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等。"}]},{"ID":"20240201213513-u2t2c5e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213513-u2t2c5e","updated":"20240201213513"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package org.springframework.transaction;\n\nimport org.springframework.lang.Nullable;\n\npublic interface TransactionDefinition {\n    int PROPAGATION_REQUIRED = 0;\n    int PROPAGATION_SUPPORTS = 1;\n    int PROPAGATION_MANDATORY = 2;\n    int PROPAGATION_REQUIRES_NEW = 3;\n    int PROPAGATION_NOT_SUPPORTED = 4;\n    int PROPAGATION_NEVER = 5;\n    int PROPAGATION_NESTED = 6;\n    int ISOLATION_DEFAULT = -1;\n    int ISOLATION_READ_UNCOMMITTED = 1;\n    int ISOLATION_READ_COMMITTED = 2;\n    int ISOLATION_REPEATABLE_READ = 4;\n    int ISOLATION_SERIALIZABLE = 8;\n    int TIMEOUT_DEFAULT = -1;\n    // 返回事务的传播行为，默认值为 REQUIRED。\n    int getPropagationBehavior();\n    //返回事务的隔离级别，默认值是 DEFAULT\n    int getIsolationLevel();\n    // 返回事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。\n    int getTimeout();\n    // 返回是否为只读事务，默认值为 false\n    boolean isReadOnly();\n\n    @Nullable\n    String getName();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213514-grdjfaa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213514-grdjfaa","updated":"20240201213514"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"TransactionStatus:事务状态"}]},{"ID":"20240201213515-704wwen","Type":"NodeParagraph","Properties":{"id":"20240201213515-704wwen","updated":"20240201213515"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionStatus"},{"Type":"NodeText","Data":"接口用来记录事务的状态 该接口定义了一组方法,用来获取或判断事务的相应状态信息。"}]},{"ID":"20240201213516-ibam9ts","Type":"NodeParagraph","Properties":{"id":"20240201213516-ibam9ts","updated":"20240201213516"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PlatformTransactionManager.getTransaction(…)"},{"Type":"NodeText","Data":"方法返回一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionStatus"},{"Type":"NodeText","Data":" 对象。"}]},{"ID":"20240201213517-co2yqkf","Type":"NodeParagraph","Properties":{"id":"20240201213517-co2yqkf","updated":"20240201213517"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TransactionStatus 接口内容如下："}]},{"ID":"20240201213518-y2b5qer","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213518-y2b5qer","updated":"20240201213518"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface TransactionStatus{\n    boolean isNewTransaction(); // 是否是新的事务\n    boolean hasSavepoint(); // 是否有恢复点\n    void setRollbackOnly();  // 设置为只回滚\n    boolean isRollbackOnly(); // 是否为只回滚\n    boolean isCompleted; // 是否已完成\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213519-20qdxo3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213519-20qdxo3","updated":"20240201213519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务属性详解"}]},{"ID":"20240201213520-5srd96a","Type":"NodeParagraph","Properties":{"id":"20240201213520-5srd96a","updated":"20240201213520"},"Children":[{"Type":"NodeText","Data":"实际业务开发中，大家一般都是使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解来开启事务，很多人并不清楚这个参数里面的参数是什么意思，有什么用。为了更好的在项目中使用事务管理，强烈推荐好好阅读一下下面的内容。"}]},{"ID":"20240201213521-c7hiaxu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213521-c7hiaxu","updated":"20240201213521"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务传播行为"}]},{"ID":"20240201213522-fgjwd0h","Type":"NodeParagraph","Properties":{"id":"20240201213522-fgjwd0h","updated":"20240201213522"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务传播行为是为了解决业务层方法之间互相调用的事务问题"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213523-es4v954","Type":"NodeParagraph","Properties":{"id":"20240201213523-es4v954","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。"}]},{"ID":"20240201213524-e4pcy6d","Type":"NodeParagraph","Properties":{"id":"20240201213524-e4pcy6d","updated":"20240201213524"},"Children":[{"Type":"NodeText","Data":"举个例子：我们在 A 类的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"方法中调用了 B 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":" 方法。这个时候就涉及到业务层方法之间互相调用的事务问题。如果我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"如果发生异常需要回滚，如何配置事务传播行为才能让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"也跟着回滚呢？这个时候就需要事务传播行为的知识了，如果你不知道的话一定要好好看一下。"}]},{"ID":"20240201213525-38utti9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213525-38utti9","updated":"20240201213525"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\nClass A {\n    @Autowired\n    B b;\n    @Transactional(propagation = Propagation.xxx)\n    public void aMethod {\n        //do something\n        b.bMethod();\n    }\n}\n\n@Service\nClass B {\n    @Transactional(propagation = Propagation.xxx)\n    public void bMethod {\n       //do something\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213526-vdq3y50","Type":"NodeParagraph","Properties":{"id":"20240201213526-vdq3y50","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":"定义中包括了如下几个表示传播行为的常量："}]},{"ID":"20240201213527-a4fisr8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213527-a4fisr8","updated":"20240201213527"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface TransactionDefinition {\n    int PROPAGATION_REQUIRED = 0;\n    int PROPAGATION_SUPPORTS = 1;\n    int PROPAGATION_MANDATORY = 2;\n    int PROPAGATION_REQUIRES_NEW = 3;\n    int PROPAGATION_NOT_SUPPORTED = 4;\n    int PROPAGATION_NEVER = 5;\n    int PROPAGATION_NESTED = 6;\n    ......\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213528-tv3vbcq","Type":"NodeParagraph","Properties":{"id":"20240201213528-tv3vbcq","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"不过，为了方便使用，Spring 相应地定义了一个枚举类："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation"}]},{"ID":"20240201213529-40um52k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213529-40um52k","updated":"20240201213529"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package org.springframework.transaction.annotation;\n\nimport org.springframework.transaction.TransactionDefinition;\n\npublic enum Propagation {\n\n    REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),\n\n    SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),\n\n    MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),\n\n    REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),\n\n    NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),\n\n    NEVER(TransactionDefinition.PROPAGATION_NEVER),\n\n    NESTED(TransactionDefinition.PROPAGATION_NESTED);\n\n    private final int value;\n\n    Propagation(int value) {\n        this.value = value;\n    }\n\n    public int value() {\n        return this.value;\n    }\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213530-kwjrt01","Type":"NodeParagraph","Properties":{"id":"20240201213530-kwjrt01","updated":"20240201213530"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"正确的事务传播行为可能的值如下"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213531-3umkzyg","Type":"NodeParagraph","Properties":{"id":"20240201213531-3umkzyg","updated":"20240201213531"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_REQUIRED"}]},{"ID":"20240201213532-hu2kpmv","Type":"NodeParagraph","Properties":{"id":"20240201213532-hu2kpmv","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"使用的最多的一个事务传播行为，我们平时经常使用的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":"注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。也就是说："}]},{"ID":"20240201213533-r8af411","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213533-r8af411","updated":"20240201213533"},"Children":[{"ID":"20240201213534-x2cvns8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213534-x2cvns8","updated":"20240201213534"},"Children":[{"ID":"20240201213535-ztsmqw6","Type":"NodeParagraph","Properties":{"id":"20240201213535-ztsmqw6","updated":"20240201213535"},"Children":[{"Type":"NodeText","Data":"如果外部方法没有开启事务的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation.REQUIRED"},{"Type":"NodeText","Data":"修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。"}]}]},{"ID":"20240201213536-d7k2593","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213536-d7k2593","updated":"20240201213536"},"Children":[{"ID":"20240201213537-8bbgm50","Type":"NodeParagraph","Properties":{"id":"20240201213537-8bbgm50","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"如果外部方法开启事务并且被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation.REQUIRED"},{"Type":"NodeText","Data":"的话，所有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation.REQUIRED"},{"Type":"NodeText","Data":"修饰的内部方法和外部方法均属于同一事务 ，只要一个方法回滚，整个事务均回滚。"}]}]}]},{"ID":"20240201213538-g8nhpq0","Type":"NodeParagraph","Properties":{"id":"20240201213538-g8nhpq0","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"举个例子：如果我们上面的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"使用的都是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PROPAGATION_REQUIRED"},{"Type":"NodeText","Data":"传播行为的话，两者使用的就是同一个事务，只要其中一个方法回滚，整个事务均回滚。"}]},{"ID":"20240201213539-wuft7w6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213539-wuft7w6","updated":"20240201213539"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\nClass A {\n    @Autowired\n    B b;\n    @Transactional(propagation = Propagation.REQUIRED)\n    public void aMethod {\n        //do something\n        b.bMethod();\n    }\n}\n@Service\nClass B {\n    @Transactional(propagation = Propagation.REQUIRED)\n    public void bMethod {\n       //do something\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213540-i53rhfz","Type":"NodeParagraph","Properties":{"id":"20240201213540-i53rhfz","updated":"20240201213540"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"2.TransactionDefinition.PROPAGATION_REQUIRES_NEW"}]},{"ID":"20240201213541-co7npqy","Type":"NodeParagraph","Properties":{"id":"20240201213541-co7npqy","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation.REQUIRES_NEW"},{"Type":"NodeText","Data":"修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。"}]},{"ID":"20240201213542-fkjvc7u","Type":"NodeParagraph","Properties":{"id":"20240201213542-fkjvc7u","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"举个例子：如果我们上面的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PROPAGATION_REQUIRES_NEW"},{"Type":"NodeText","Data":"事务传播行为修饰，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod"},{"Type":"NodeText","Data":"还是用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PROPAGATION_REQUIRED"},{"Type":"NodeText","Data":"修饰的话。如果"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"发生异常回滚，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"不会跟着回滚，因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"开启了独立的事务。但是，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"抛出了未被捕获的异常并且这个异常满足事务回滚规则的话,"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"同样也会回滚，因为这个异常被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"的事务管理机制检测到了。"}]},{"ID":"20240201213543-atuydkg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213543-atuydkg","updated":"20240201213543"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\nClass A {\n    @Autowired\n    B b;\n    @Transactional(propagation = Propagation.REQUIRED)\n    public void aMethod {\n        //do something\n        b.bMethod();\n    }\n}\n\n@Service\nClass B {\n    @Transactional(propagation = Propagation.REQUIRES_NEW)\n    public void bMethod {\n       //do something\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213544-idm7mv9","Type":"NodeParagraph","Properties":{"id":"20240201213544-idm7mv9","updated":"20240201213544"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NESTED"},{"Type":"NodeText","Data":":"}]},{"ID":"20240201213545-n1op5p8","Type":"NodeParagraph","Properties":{"id":"20240201213545-n1op5p8","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"如果当前存在事务，就在嵌套事务内执行；如果当前没有事务，就执行与"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_REQUIRED"},{"Type":"NodeText","Data":"类似的操作。也就是说："}]},{"ID":"20240201213546-a3ai3gf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-a3ai3gf","updated":"20240201213546"},"Children":[{"ID":"20240201213547-frbjbiu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213547-frbjbiu","updated":"20240201213547"},"Children":[{"ID":"20240201213548-1n5vkok","Type":"NodeParagraph","Properties":{"id":"20240201213548-1n5vkok","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"在外部方法开启事务的情况下，在内部开启一个新的事务，作为嵌套事务存在。"}]}]},{"ID":"20240201213549-0vqe8z4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-0vqe8z4","updated":"20240201213549"},"Children":[{"ID":"20240201213550-0n0o10z","Type":"NodeParagraph","Properties":{"id":"20240201213550-0n0o10z","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"如果外部方法无事务，则单独开启一个事务，与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PROPAGATION_REQUIRED"},{"Type":"NodeText","Data":" 类似。"}]}]}]},{"ID":"20240201213551-zlc8ghy","Type":"NodeParagraph","Properties":{"id":"20240201213551-zlc8ghy","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"这里还是简单举个例子：如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":" 回滚的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":"不会回滚。如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aMethod()"},{"Type":"NodeText","Data":" 回滚的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bMethod()"},{"Type":"NodeText","Data":"会回滚。"}]},{"ID":"20240201213552-1uk6rqf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213552-1uk6rqf","updated":"20240201213552"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\nClass A {\n    @Autowired\n    B b;\n    @Transactional(propagation = Propagation.REQUIRED)\n    public void aMethod {\n        //do something\n        b.bMethod();\n    }\n}\n\n@Service\nClass B {\n    @Transactional(propagation = Propagation.NESTED)\n    public void bMethod {\n       //do something\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213553-pjbm9di","Type":"NodeParagraph","Properties":{"id":"20240201213553-pjbm9di","updated":"20240201213553"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_MANDATORY"}]},{"ID":"20240201213554-xkfx8ve","Type":"NodeParagraph","Properties":{"id":"20240201213554-xkfx8ve","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）"}]},{"ID":"20240201213555-mia6mq7","Type":"NodeParagraph","Properties":{"id":"20240201213555-mia6mq7","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"这个使用的很少，就不举例子来说了。"}]},{"ID":"20240201213556-taxo2e1","Type":"NodeParagraph","Properties":{"id":"20240201213556-taxo2e1","updated":"20240201213556"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚，这里不对照案例讲解了，使用的很少。"}]},{"ID":"20240201213557-dkrgfoc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213557-dkrgfoc","updated":"20240201213557"},"Children":[{"ID":"20240201213558-mnyidec","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-mnyidec","updated":"20240201213558"},"Children":[{"ID":"20240201213559-u2kca66","Type":"NodeParagraph","Properties":{"id":"20240201213559-u2kca66","updated":"20240201213559"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_SUPPORTS"},{"Type":"NodeText","Data":": 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。"}]}]},{"ID":"20240201213560-66dm3yw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-66dm3yw","updated":"20240201213560"},"Children":[{"ID":"20240201213561-7esilq2","Type":"NodeParagraph","Properties":{"id":"20240201213561-7esilq2","updated":"20240201213561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NOT_SUPPORTED"},{"Type":"NodeText","Data":": 以非事务方式运行，如果当前存在事务，则把当前事务挂起。"}]}]},{"ID":"20240201213562-vc3kghm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-vc3kghm","updated":"20240201213562"},"Children":[{"ID":"20240201213563-j1yj2v7","Type":"NodeParagraph","Properties":{"id":"20240201213563-j1yj2v7","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NEVER"},{"Type":"NodeText","Data":": 以非事务方式运行，如果当前存在事务，则抛出异常。"}]}]}]},{"ID":"20240201213564-yla58r1","Type":"NodeParagraph","Properties":{"id":"20240201213564-yla58r1","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"更多关于事务传播行为的内容请看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==\u0026mid=2247486668\u0026idx=2\u0026sn=0381e8c836442f46bdc5367170234abb\u0026chksm=cea24307f9d5ca11c96943b3ccfa1fc70dc97dd87d9c540388581f8fe6d805ff548dff5f6b5b\u0026token=1776990505\u0026lang=zh_CN#rd","TextMarkTextContent":"《太难了~面试官让我结合案例讲讲自己对 Spring 事务传播行为的理解。》"}]},{"ID":"20240201213565-dxgnjt3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213565-dxgnjt3","updated":"20240201213565"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务隔离级别"}]},{"ID":"20240201213566-w94wm2c","Type":"NodeParagraph","Properties":{"id":"20240201213566-w94wm2c","updated":"20240201213566"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":" 接口中定义了五个表示隔离级别的常量："}]},{"ID":"20240201213567-5sfn7as","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213567-5sfn7as","updated":"20240201213567"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface TransactionDefinition {\n    ......\n    int ISOLATION_DEFAULT = -1;\n    int ISOLATION_READ_UNCOMMITTED = 1;\n    int ISOLATION_READ_COMMITTED = 2;\n    int ISOLATION_REPEATABLE_READ = 4;\n    int ISOLATION_SERIALIZABLE = 8;\n    ......\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213568-rv4syf3","Type":"NodeParagraph","Properties":{"id":"20240201213568-rv4syf3","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"和事务传播行为那块一样，为了方便使用，Spring 也相应地定义了一个枚举类："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Isolation"}]},{"ID":"20240201213569-4zv1g2o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213569-4zv1g2o","updated":"20240201213569"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public enum Isolation {\n\n  DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),\n\n  READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),\n\n  READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),\n\n  REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),\n\n  SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\n  private final int value;\n\n  Isolation(int value) {\n    this.value = value;\n  }\n\n  public int value() {\n    return this.value;\n  }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213570-kdx547e","Type":"NodeParagraph","Properties":{"id":"20240201213570-kdx547e","updated":"20240201213570"},"Children":[{"Type":"NodeText","Data":"下面我依次对每一种事务隔离级别进行介绍："}]},{"ID":"20240201213571-xu0dihh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-xu0dihh","updated":"20240201213571"},"Children":[{"ID":"20240201213572-h9i35z6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-h9i35z6","updated":"20240201213572"},"Children":[{"ID":"20240201213573-bbu7l2q","Type":"NodeParagraph","Properties":{"id":"20240201213573-bbu7l2q","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_DEFAULT"},{"Type":"NodeText","Data":" :使用后端数据库默认的隔离级别，MySQL 默认采用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"REPEATABLE_READ"},{"Type":"NodeText","Data":" 隔离级别 Oracle 默认采用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"READ_COMMITTED"},{"Type":"NodeText","Data":" 隔离级别."}]}]},{"ID":"20240201213574-kkdamxz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-kkdamxz","updated":"20240201213574"},"Children":[{"ID":"20240201213575-ibc2z7d","Type":"NodeParagraph","Properties":{"id":"20240201213575-ibc2z7d","updated":"20240201213575"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_READ_UNCOMMITTED"},{"Type":"NodeText","Data":" :最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可能会导致脏读、幻读或不可重复读"}]}]},{"ID":"20240201213576-8zgj8jl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-8zgj8jl","updated":"20240201213576"},"Children":[{"ID":"20240201213577-p36d5mg","Type":"NodeParagraph","Properties":{"id":"20240201213577-p36d5mg","updated":"20240201213577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_READ_COMMITTED"},{"Type":"NodeText","Data":" : 允许读取并发事务已经提交的数据，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以阻止脏读，但是幻读或不可重复读仍有可能发生"}]}]},{"ID":"20240201213578-4rqvbxy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213578-4rqvbxy","updated":"20240201213578"},"Children":[{"ID":"20240201213579-e43vrw7","Type":"NodeParagraph","Properties":{"id":"20240201213579-e43vrw7","updated":"20240201213579"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_REPEATABLE_READ"},{"Type":"NodeText","Data":" : 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以阻止脏读和不可重复读，但幻读仍有可能发生。"}]}]},{"ID":"20240201213580-9wwz53y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-9wwz53y","updated":"20240201213580"},"Children":[{"ID":"20240201213581-ta4o1a9","Type":"NodeParagraph","Properties":{"id":"20240201213581-ta4o1a9","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_SERIALIZABLE"},{"Type":"NodeText","Data":" : 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"该级别可以防止脏读、不可重复读以及幻读"},{"Type":"NodeText","Data":"。但是这将严重影响程序的性能。通常情况下也不会用到该级别。"}]}]}]},{"ID":"20240201213582-oudaszc","Type":"NodeParagraph","Properties":{"id":"20240201213582-oudaszc","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/mysql/transaction-isolation-level.html","TextMarkTextContent":"MySQL 事务隔离级别详解"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213583-jwewlkn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213583-jwewlkn","updated":"20240201213583"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务超时属性"}]},{"ID":"20240201213584-lx7h4lo","Type":"NodeParagraph","Properties":{"id":"20240201213584-lx7h4lo","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition"},{"Type":"NodeText","Data":" 中以 int 的值来表示超时时间，其单位是秒，默认值为-1，这表示事务的超时时间取决于底层事务系统或者没有超时时间。"}]},{"ID":"20240201213585-562jlif","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213585-562jlif","updated":"20240201213585"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务只读属性"}]},{"ID":"20240201213586-alta5r0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213586-alta5r0","updated":"20240201213586"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package org.springframework.transaction;\n\nimport org.springframework.lang.Nullable;\n\npublic interface TransactionDefinition {\n    ......\n    // 返回是否为只读事务，默认值为 false\n    boolean isReadOnly();\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213587-cn8slzx","Type":"NodeParagraph","Properties":{"id":"20240201213587-cn8slzx","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"对于只有读取数据查询的事务，可以指定事务类型为 readonly，即只读事务。只读事务不涉及数据的修改，数据库会提供一些优化手段，适合用在有多条数据库查询操作的方法中。"}]},{"ID":"20240201213588-8d8g8wo","Type":"NodeParagraph","Properties":{"id":"20240201213588-8d8g8wo","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"很多人就会疑问了，为什么我一个数据查询操作还要启用事务支持呢？"}]},{"ID":"20240201213589-na8b7oj","Type":"NodeParagraph","Properties":{"id":"20240201213589-na8b7oj","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"拿 MySQL 的 innodb 举例子，根据官网 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dev.mysql.com/doc/refman/5.7/en/innodb-autocommit-commit-rollback.html","TextMarkTextContent":"https://dev.mysql.com/doc/refman/5.7/en/innodb-autocommit-commit-rollback.html"},{"Type":"NodeText","Data":" 描述："}]},{"ID":"20240201213590-fwihlae","Type":"NodeBlockquote","Properties":{"id":"20240201213590-fwihlae","updated":"20240201213590"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213591-6ehlnav","Type":"NodeParagraph","Properties":{"id":"20240201213591-6ehlnav","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"MySQL 默认对每一个新建立的连接都启用了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"autocommit"},{"Type":"NodeText","Data":"模式。在该模式下，每一个发送到 MySQL 服务器的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sql"},{"Type":"NodeText","Data":"语句都会在一个单独的事务中进行处理，执行结束后会自动提交事务，并开启一个新的事务。"}]}]},{"ID":"20240201213592-fdm5pwf","Type":"NodeParagraph","Properties":{"id":"20240201213592-fdm5pwf","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"但是，如果你给方法加上了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Transactional"},{"Type":"NodeText","Data":"注解的话，这个方法执行的所有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sql"},{"Type":"NodeText","Data":"会被放在一个事务中。如果声明了只读事务的话，数据库就会去优化它的执行，并不会带来其他的什么收益。"}]},{"ID":"20240201213593-gsbsmt3","Type":"NodeParagraph","Properties":{"id":"20240201213593-gsbsmt3","updated":"20240201213593"},"Children":[{"Type":"NodeText","Data":"如果不加"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Transactional"},{"Type":"NodeText","Data":"，每条"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sql"},{"Type":"NodeText","Data":"会开启一个单独的事务，中间被其它事务改了数据，都会实时读取到最新值。"}]},{"ID":"20240201213594-6czv7dj","Type":"NodeParagraph","Properties":{"id":"20240201213594-6czv7dj","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"分享一下关于事务只读属性，其他人的解答："}]},{"ID":"20240201213595-8tstiuo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213595-8tstiuo","updated":"20240201213595"},"Children":[{"ID":"20240201213596-ysqorm6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213596-ysqorm6","updated":"20240201213596"},"Children":[{"ID":"20240201213597-b9dcqbz","Type":"NodeParagraph","Properties":{"id":"20240201213597-b9dcqbz","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持 SQL 执行期间的读一致性；"}]}]},{"ID":"20240201213598-l589sk3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213598-l589sk3","updated":"20240201213598"},"Children":[{"ID":"20240201213599-ckw0nyo","Type":"NodeParagraph","Properties":{"id":"20240201213599-ckw0nyo","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询 SQL 必须保证整体的读一致性，否则，在前条 SQL 查询之后，后条 SQL 查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持"}]}]}]},{"ID":"20240201213600-qnau6d0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213600-qnau6d0","updated":"20240201213600"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务回滚规则"}]},{"ID":"20240201213601-e2p0wvc","Type":"NodeParagraph","Properties":{"id":"20240201213601-e2p0wvc","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":" 的子类）时才会回滚，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Error"},{"Type":"NodeText","Data":" 也会导致事务回滚，但是，在遇到检查型（Checked）异常时不会回滚。"}]},{"ID":"20240201213602-dn13f48","Type":"NodeParagraph","Properties":{"id":"20240201213602-dn13f48","updated":"20240201213602"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/roollbackFor-20240201213827-ysg9xvi.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213603-ye956af","Type":"NodeParagraph","Properties":{"id":"20240201213603-ye956af","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"如果你想要回滚你定义的特定的异常类型的话，可以这样："}]},{"ID":"20240201213604-mmceoib","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213604-mmceoib","updated":"20240201213604"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Transactional(rollbackFor= MyException.class)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213605-el1gkvi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213605-el1gkvi","updated":"20240201213605"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Transactional 注解使用详解"}]},{"ID":"20240201213606-lw3116q","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213606-lw3116q","updated":"20240201213606"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的作用范围"}]},{"ID":"20240201213607-8e4pexh","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213607-8e4pexh","updated":"20240201213607"},"Children":[{"ID":"20240201213608-r7wo07u","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213608-r7wo07u","updated":"20240201213608"},"Children":[{"ID":"20240201213609-aghwbsw","Type":"NodeParagraph","Properties":{"id":"20240201213609-aghwbsw","updated":"20240201213609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法"},{"Type":"NodeText","Data":"：推荐将注解使用于方法上，不过需要注意的是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"该注解只能应用到 public 方法上，否则不生效。"}]}]},{"ID":"20240201213610-rwg9sms","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213610-rwg9sms","updated":"20240201213610"},"Children":[{"ID":"20240201213611-ws6zo95","Type":"NodeParagraph","Properties":{"id":"20240201213611-ws6zo95","updated":"20240201213611"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类"},{"Type":"NodeText","Data":"：如果这个注解使用在类上的话，表明该注解对该类中所有的 public 方法都生效。"}]}]},{"ID":"20240201213612-cauf049","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213612-cauf049","updated":"20240201213612"},"Children":[{"ID":"20240201213613-0d26sxa","Type":"NodeParagraph","Properties":{"id":"20240201213613-0d26sxa","updated":"20240201213613"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"接口"},{"Type":"NodeText","Data":"：不推荐在接口上使用。"}]}]}]},{"ID":"20240201213614-4jazxrz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213614-4jazxrz","updated":"20240201213614"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的常用配置参数"}]},{"ID":"20240201213615-1li15us","Type":"NodeParagraph","Properties":{"id":"20240201213615-1li15us","updated":"20240201213615"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":"注解源码如下，里面包含了基本事务属性的配置："}]},{"ID":"20240201213616-9wilgxi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213616-9wilgxi","updated":"20240201213616"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@Documented\npublic @interface Transactional {\n\n  @AliasFor(\"transactionManager\")\n  String value() default \"\";\n\n  @AliasFor(\"value\")\n  String transactionManager() default \"\";\n\n  Propagation propagation() default Propagation.REQUIRED;\n\n  Isolation isolation() default Isolation.DEFAULT;\n\n  int timeout() default TransactionDefinition.TIMEOUT_DEFAULT;\n\n  boolean readOnly() default false;\n\n  Class\u003c? extends Throwable\u003e[] rollbackFor() default {};\n\n  String[] rollbackForClassName() default {};\n\n  Class\u003c? extends Throwable\u003e[] noRollbackFor() default {};\n\n  String[] noRollbackForClassName() default {};\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213617-do9li7z","Type":"NodeParagraph","Properties":{"id":"20240201213617-do9li7z","updated":"20240201213617"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Transactional"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的常用配置参数总结（只列出了 5 个我平时比较常用的）："}]},{"ID":"20240201213618-6e80ek8","Type":"NodeTable","Data":"| 属性名      | 说明                                                                                         |\n| :---------- | :------------------------------------------------------------------------------------------- |\n| propagation | 事务的传播行为，默认值为 REQUIRED，可选的值在上面介绍过                                      |\n| isolation   | 事务的隔离级别，默认值采用 DEFAULT，可选的值在上面介绍过                                     |\n| timeout     | 事务的超时时间，默认值为-1（不会超时）。如果超过该时间限制但事务还没有完成，则自动回滚事务。 |\n| readOnly    | 指定事务是否为只读事务，默认值为 false。                                                     |\n| rollbackFor | 用于指定能够触发事务回滚的异常类型，并且可以指定多个异常类型。                               |","TableAligns":[1,1],"Properties":{"id":"20240201213618-6e80ek8","updated":"20240201213618"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"属性名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"说明"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"propagation"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"事务的传播行为，默认值为 REQUIRED，可选的值在上面介绍过"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"isolation"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"事务的隔离级别，默认值采用 DEFAULT，可选的值在上面介绍过"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"timeout"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"事务的超时时间，默认值为-1（不会超时）。如果超过该时间限制但事务还没有完成，则自动回滚事务。"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"readOnly"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"指定事务是否为只读事务，默认值为 false。"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"rollbackFor"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"用于指定能够触发事务回滚的异常类型，并且可以指定多个异常类型。"}]}]}]},{"ID":"20240201213619-hnbsrkc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213619-hnbsrkc","updated":"20240201213619"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 事务注解原理"}]},{"ID":"20240201213620-tfzftdi","Type":"NodeParagraph","Properties":{"id":"20240201213620-tfzftdi","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"面试中在问 AOP 的时候可能会被问到的一个问题。简单说下吧！"}]},{"ID":"20240201213621-qgq964w","Type":"NodeParagraph","Properties":{"id":"20240201213621-qgq964w","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"我们知道，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Transactional"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的工作机制是基于 AOP 实现的，AOP 又是使用动态代理实现的。如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理，如果目标对象没有实现了接口,会使用 CGLIB 动态代理。"}]},{"ID":"20240201213622-houjiok","Type":"NodeParagraph","Properties":{"id":"20240201213622-houjiok","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"🤐 多提一嘴："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"createAopProxy()"},{"Type":"NodeText","Data":" 方法 决定了是使用 JDK 还是 Cglib 来做动态代理，源码如下："}]},{"ID":"20240201213623-cqjwx05","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213623-cqjwx05","updated":"20240201213623"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {\n\n  @Override\n  public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n    if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {\n      Class\u003c?\u003e targetClass = config.getTargetClass();\n      if (targetClass == null) {\n        throw new AopConfigException(\"TargetSource cannot determine target class: \" +\n            \"Either an interface or a target is required for proxy creation.\");\n      }\n      if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {\n        return new JdkDynamicAopProxy(config);\n      }\n      return new ObjenesisCglibAopProxy(config);\n    }\n    else {\n      return new JdkDynamicAopProxy(config);\n    }\n  }\n  .......\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213624-7ceucou","Type":"NodeParagraph","Properties":{"id":"20240201213624-7ceucou","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"如果一个类或者一个类中的 public 方法上被标注"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的话，Spring 容器就会在启动的时候为其创建一个代理类，在调用被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的 public 方法的时候，实际调用的是，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionInterceptor"},{"Type":"NodeText","Data":" 类中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invoke()"},{"Type":"NodeText","Data":"方法。这个方法的作用就是在目标方法之前开启事务，方法执行过程中如果遇到异常的时候回滚事务，方法调用完成之后提交事务。"}]},{"ID":"20240201213625-3tprctl","Type":"NodeBlockquote","Properties":{"id":"20240201213625-3tprctl","updated":"20240201213625"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213626-y66vio9","Type":"NodeParagraph","Properties":{"id":"20240201213626-y66vio9","updated":"20240201213626"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionInterceptor"},{"Type":"NodeText","Data":" 类中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invoke()"},{"Type":"NodeText","Data":"方法内部实际调用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionAspectSupport"},{"Type":"NodeText","Data":" 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invokeWithinTransaction()"},{"Type":"NodeText","Data":"方法。由于新版本的 Spring 对这部分重写很大，而且用到了很多响应式编程的知识，这里就不列源码了。"}]}]},{"ID":"20240201213627-2vgmyei","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213627-2vgmyei","updated":"20240201213627"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AOP 自调用问题"}]},{"ID":"20240201213628-l34rwaa","Type":"NodeParagraph","Properties":{"id":"20240201213628-l34rwaa","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"当一个方法被标记了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的时候，Spring 事务管理器只会在被其他类方法调用的时候生效，而不会在一个类中方法调用生效。"}]},{"ID":"20240201213629-5ykv5qx","Type":"NodeParagraph","Properties":{"id":"20240201213629-5ykv5qx","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"这是因为 Spring AOP 工作原理决定的。因为 Spring AOP 使用动态代理来实现事务的管理，它会在运行的时候为带有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的方法生成代理对象，并在方法调用的前后应用事物逻辑。如果该方法被其他类调用我们的代理对象就会拦截方法调用并处理事务。但是在一个类中的其他方法内部调用的时候，我们代理对象就无法拦截到这个内部调用，因此事务也就失效了。"}]},{"ID":"20240201213630-rikwuze","Type":"NodeParagraph","Properties":{"id":"20240201213630-rikwuze","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":" 类中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"method1()"},{"Type":"NodeText","Data":"调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"method2()"},{"Type":"NodeText","Data":"就会导致"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"method2()"},{"Type":"NodeText","Data":"的事务失效。"}]},{"ID":"20240201213631-7af64q6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213631-7af64q6","updated":"20240201213631"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n\nprivate void method1() {\n     method2();\n     //......\n}\n@Transactional\n public void method2() {\n     //......\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213632-ao7n1ux","Type":"NodeParagraph","Properties":{"id":"20240201213632-ao7n1ux","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"解决办法就是避免同一类中自调用或者使用 AspectJ 取代 Spring AOP 代理。"}]},{"ID":"20240201213633-mksicjg","Type":"NodeParagraph","Properties":{"id":"20240201213633-mksicjg","updated":"20240201213633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/2091","TextMarkTextContent":"issue #2091"},{"Type":"NodeText","Data":"补充了一个例子："}]},{"ID":"20240201213634-aj912li","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213634-aj912li","updated":"20240201213634"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n\nprivate void method1() {\n     ((MyService)AopContext.currentProxy()).method2(); // 先获取该类的代理对象，然后通过代理对象调用method2。\n     //......\n}\n@Transactional\n public void method2() {\n     //......\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213635-ue1j1c8","Type":"NodeParagraph","Properties":{"id":"20240201213635-ue1j1c8","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"上面的代码确实可以在自调用的时候开启事务，但是这是因为使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AopContext.currentProxy()"},{"Type":"NodeText","Data":" 方法来获取当前类的代理对象，然后通过代理对象调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"method2()"},{"Type":"NodeText","Data":"。这样就相当于从外部调用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"method2()"},{"Type":"NodeText","Data":"，所以事务注解才会生效。我们一般也不会在代码中这么写，所以可以忽略这个特殊的例子。"}]},{"ID":"20240201213636-ses1l1s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213636-ses1l1s","updated":"20240201213636"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的使用注意事项总结"}]},{"ID":"20240201213637-bjgzipv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-bjgzipv","updated":"20240201213637"},"Children":[{"ID":"20240201213638-fiins58","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-fiins58","updated":"20240201213638"},"Children":[{"ID":"20240201213639-1jrabtp","Type":"NodeParagraph","Properties":{"id":"20240201213639-1jrabtp","updated":"20240201213639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；"}]}]},{"ID":"20240201213640-fe5jlim","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-fe5jlim","updated":"20240201213640"},"Children":[{"ID":"20240201213641-jqfpkxh","Type":"NodeParagraph","Properties":{"id":"20240201213641-jqfpkxh","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"避免同一个类中调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的方法，这样会导致事务失效；"}]}]},{"ID":"20240201213642-fa1149g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-fa1149g","updated":"20240201213642"},"Children":[{"ID":"20240201213643-915iv1m","Type":"NodeParagraph","Properties":{"id":"20240201213643-915iv1m","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"正确的设置 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"rollbackFor"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"propagation"},{"Type":"NodeText","Data":" 属性，否则事务可能会回滚失败;"}]}]},{"ID":"20240201213644-c8mv28c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213644-c8mv28c","updated":"20240201213644"},"Children":[{"ID":"20240201213645-a56m4rz","Type":"NodeParagraph","Properties":{"id":"20240201213645-a56m4rz","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的方法所在的类必须被 Spring 管理，否则不生效；"}]}]},{"ID":"20240201213646-yh42bte","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-yh42bte","updated":"20240201213646"},"Children":[{"ID":"20240201213647-b0qsm4e","Type":"NodeParagraph","Properties":{"id":"20240201213647-b0qsm4e","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"底层使用的数据库必须支持事务机制，否则不生效；"}]}]},{"ID":"20240201213648-s5tskte","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-s5tskte","updated":"20240201213648"},"Children":[{"ID":"20240201213649-062w4cj","Type":"NodeParagraph","Properties":{"id":"20240201213649-062w4cj","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213650-12zklxx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213650-12zklxx","updated":"20240201213650"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213651-d68ds7x","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-d68ds7x","updated":"20240201213651"},"Children":[{"ID":"20240201213652-n7b52k9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-n7b52k9","updated":"20240201213652"},"Children":[{"ID":"20240201213653-fm3sg2h","Type":"NodeParagraph","Properties":{"id":"20240201213653-fm3sg2h","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"[总结]Spring 事务管理中@Transactional 的参数:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.mobabel.net/spring事务管理中transactional的参数/","TextMarkTextContent":"http://www.mobabel.net/spring 事务管理中 transactional 的参数/"}]}]},{"ID":"20240201213654-6yv24bt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-6yv24bt","updated":"20240201213654"},"Children":[{"ID":"20240201213655-kv67p78","Type":"NodeParagraph","Properties":{"id":"20240201213655-kv67p78","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"Spring 官方文档："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html","TextMarkTextContent":"https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html"}]}]},{"ID":"20240201213656-fggucy2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-fggucy2","updated":"20240201213656"},"Children":[{"ID":"20240201213657-uq3yi78","Type":"NodeParagraph","Properties":{"id":"20240201213657-uq3yi78","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"《Spring5 高级编程》"}]}]},{"ID":"20240201213658-8r0zers","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-8r0zers","updated":"20240201213658"},"Children":[{"ID":"20240201213659-29bl5fj","Type":"NodeParagraph","Properties":{"id":"20240201213659-29bl5fj","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"透彻的掌握 Spring 中@transactional 的使用: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html","TextMarkTextContent":"https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html"}]}]},{"ID":"20240201213660-rthhmfm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213660-rthhmfm","updated":"20240201213660"},"Children":[{"ID":"20240201213661-lpnmnd1","Type":"NodeParagraph","Properties":{"id":"20240201213661-lpnmnd1","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"Spring 事务的传播特性："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/love-somnus/Spring/wiki/Spring事务的传播特性","TextMarkTextContent":"https://github.com/love-somnus/Spring/wiki/Spring 事务的传播特性"}]}]},{"ID":"20240201213662-uipu1yu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-uipu1yu","updated":"20240201213662"},"Children":[{"ID":"20240201213663-u2tk4jo","Type":"NodeParagraph","Properties":{"id":"20240201213663-u2tk4jo","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000013341344","TextMarkTextContent":"Spring 事务传播行为详解"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000013341344","TextMarkTextContent":"https://segmentfault.com/a/1190000013341344"}]}]},{"ID":"20240201213664-gckkyo2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-gckkyo2","updated":"20240201213664"},"Children":[{"ID":"20240201213665-f8nzn83","Type":"NodeParagraph","Properties":{"id":"20240201213665-f8nzn83","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"全面分析 Spring 的编程式事务管理及声明式事务管理："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/index.html","TextMarkTextContent":"https://www.ibm.com/developerworks/cn/education/opensource/os-cn-spring-trans/index.html"}]}]}]},{"ID":"20240201213666-bxxpctl","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213666-bxxpctl","updated":"20240201213666"}}]}