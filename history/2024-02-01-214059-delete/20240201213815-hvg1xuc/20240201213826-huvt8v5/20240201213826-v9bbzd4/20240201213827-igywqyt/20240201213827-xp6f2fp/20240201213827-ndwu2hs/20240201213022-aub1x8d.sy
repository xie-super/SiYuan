{"ID":"20240201213022-aub1x8d","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213022-aub1x8d","title":"spring-knowledge-and-questions-summary","updated":"20240201213022"},"Children":[{"ID":"20240201213023-ohlrkpd","Type":"NodeThematicBreak","Properties":{"id":"20240201213023-ohlrkpd","updated":"20240201213023"}},{"ID":"20240201213024-orfdclw","Type":"NodeParagraph","Properties":{"id":"20240201213024-orfdclw","updated":"20240201213024"},"Children":[{"Type":"NodeText","Data":"title: Spring常见面试题总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 框架"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213025-7vvly8m","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213025-7vvly8m","updated":"20240201213025"},"Children":[{"ID":"20240201213026-l1y69rw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213026-l1y69rw","updated":"20240201213026"},"Children":[{"ID":"20240201213027-gs8h096","Type":"NodeParagraph","Properties":{"id":"20240201213027-gs8h096","updated":"20240201213027"},"Children":[{"Type":"NodeText","Data":"Spring"}]}]}]},{"ID":"20240201213028-x1gtxdf","Type":"NodeThematicBreak","Properties":{"id":"20240201213028-x1gtxdf","updated":"20240201213028"}},{"ID":"20240201213029-kcaq5w8","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @small-advertisement.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213029-kcaq5w8","updated":"20240201213029"}},{"ID":"20240201213030-j2zmqrb","Type":"NodeParagraph","Properties":{"id":"20240201213030-j2zmqrb","updated":"20240201213030"},"Children":[{"Type":"NodeText","Data":"这篇文章主要是想通过一些问题，加深大家对于 Spring 的理解，所以不会涉及太多的代码！"}]},{"ID":"20240201213031-mr2z4yj","Type":"NodeParagraph","Properties":{"id":"20240201213031-mr2z4yj","updated":"20240201213031"},"Children":[{"Type":"NodeText","Data":"下面的很多问题我自己在使用 Spring 的过程中也并没有注意，自己也是临时查阅了很多资料和书籍补上的。网上也有一些很多关于 Spring 常见问题/面试题整理的文章，我感觉大部分都是互相 copy，而且很多问题也不是很好，有些回答也存在问题。所以，自己花了一周的业余时间整理了一下，希望对大家有帮助。"}]},{"ID":"20240201213032-ali6674","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213032-ali6674","updated":"20240201213032"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 基础"}]},{"ID":"20240201213033-oznbpul","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213033-oznbpul","updated":"20240201213033"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Spring 框架?"}]},{"ID":"20240201213034-pqs7l7l","Type":"NodeParagraph","Properties":{"id":"20240201213034-pqs7l7l","updated":"20240201213034"},"Children":[{"Type":"NodeText","Data":"Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。"}]},{"ID":"20240201213035-x92pd04","Type":"NodeParagraph","Properties":{"id":"20240201213035-x92pd04","updated":"20240201213035"},"Children":[{"Type":"NodeText","Data":"我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 IoC（Inversion of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。"}]},{"ID":"20240201213036-pw6gblw","Type":"NodeParagraph","Properties":{"id":"20240201213036-pw6gblw","updated":"20240201213036"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/38ef122122de4375abcd27c3de8f60b4.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213037-8isstf5","Type":"NodeParagraph","Properties":{"id":"20240201213037-8isstf5","updated":"20240201213037"},"Children":[{"Type":"NodeText","Data":"Spring 最核心的思想就是不重新造轮子，开箱即用，提高开发效率。"}]},{"ID":"20240201213038-kxj4cxq","Type":"NodeParagraph","Properties":{"id":"20240201213038-kxj4cxq","updated":"20240201213038"},"Children":[{"Type":"NodeText","Data":"Spring 翻译过来就是春天的意思，可见其目标和使命就是为 Java 程序员带来春天啊！感动！"}]},{"ID":"20240201213039-398k6xh","Type":"NodeParagraph","Properties":{"id":"20240201213039-398k6xh","updated":"20240201213039"},"Children":[{"Type":"NodeText","Data":"🤐 多提一嘴："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"语言的流行通常需要一个杀手级的应用，Spring 就是 Java 生态的一个杀手级的应用框架。"}]},{"ID":"20240201213040-a91f6t4","Type":"NodeParagraph","Properties":{"id":"20240201213040-a91f6t4","updated":"20240201213040"},"Children":[{"Type":"NodeText","Data":"Spring 提供的核心功能主要是 IoC 和 AOP。学习 Spring ，一定要把 IoC 和 AOP 的核心思想搞懂！"}]},{"ID":"20240201213041-zcgbf11","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213041-zcgbf11","updated":"20240201213041"},"Children":[{"ID":"20240201213042-upcmjgq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213042-upcmjgq","updated":"20240201213042"},"Children":[{"ID":"20240201213043-ams7uut","Type":"NodeParagraph","Properties":{"id":"20240201213043-ams7uut","updated":"20240201213043"},"Children":[{"Type":"NodeText","Data":"Spring 官网："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://spring.io/","TextMarkTextContent":"https://spring.io/"}]}]},{"ID":"20240201213044-jlsilsv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213044-jlsilsv","updated":"20240201213044"},"Children":[{"ID":"20240201213045-gk0halj","Type":"NodeParagraph","Properties":{"id":"20240201213045-gk0halj","updated":"20240201213045"},"Children":[{"Type":"NodeText","Data":"GitHub 地址： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/spring-projects/spring-framework","TextMarkTextContent":"https://github.com/spring-projects/spring-framework"}]}]}]},{"ID":"20240201213046-kf7pv2f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213046-kf7pv2f","updated":"20240201213046"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 包含的模块有哪些？"}]},{"ID":"20240201213047-ik4dz7c","Type":"NodeParagraph","Properties":{"id":"20240201213047-ik4dz7c","updated":"20240201213047"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring4.x 版本"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213048-xp0nq1l","Type":"NodeParagraph","Properties":{"id":"20240201213048-xp0nq1l","updated":"20240201213048"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring4.x主要模块","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/jvme0c60b4606711fc4a0b6faf03230247a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213049-qrp35ll","Type":"NodeParagraph","Properties":{"id":"20240201213049-qrp35ll","updated":"20240201213049"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring5.x 版本"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213050-a0d3x66","Type":"NodeParagraph","Properties":{"id":"20240201213050-a0d3x66","updated":"20240201213050"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring5.x主要模块","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/20200831175708.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213051-vli2meg","Type":"NodeParagraph","Properties":{"id":"20240201213051-vli2meg","updated":"20240201213051"},"Children":[{"Type":"NodeText","Data":"Spring5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。"}]},{"ID":"20240201213052-kshiix8","Type":"NodeParagraph","Properties":{"id":"20240201213052-kshiix8","updated":"20240201213052"},"Children":[{"Type":"NodeText","Data":"Spring 各个模块的依赖关系如下："}]},{"ID":"20240201213053-x18ijng","Type":"NodeParagraph","Properties":{"id":"20240201213053-x18ijng","updated":"20240201213053"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring 各个模块的依赖关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/20200902100038.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213054-4tob7dq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213054-4tob7dq","updated":"20240201213054"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Core Container"}]},{"ID":"20240201213055-gimw65y","Type":"NodeParagraph","Properties":{"id":"20240201213055-gimw65y","updated":"20240201213055"},"Children":[{"Type":"NodeText","Data":"Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC 依赖注入功能的支持。Spring 其他所有的功能基本都需要依赖于该模块，我们从上面那张 Spring 各个模块的依赖关系图就可以看出来。"}]},{"ID":"20240201213056-3q4f9ie","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213056-3q4f9ie","updated":"20240201213056"},"Children":[{"ID":"20240201213057-pq0snqj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213057-pq0snqj","updated":"20240201213057"},"Children":[{"ID":"20240201213058-10nvh5b","Type":"NodeParagraph","Properties":{"id":"20240201213058-10nvh5b","updated":"20240201213058"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-core"},{"Type":"NodeText","Data":"：Spring 框架基本的核心工具类。"}]}]},{"ID":"20240201213059-12ueqgf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213059-12ueqgf","updated":"20240201213059"},"Children":[{"ID":"20240201213060-45s5xdo","Type":"NodeParagraph","Properties":{"id":"20240201213060-45s5xdo","updated":"20240201213060"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-beans"},{"Type":"NodeText","Data":"：提供对 bean 的创建、配置和管理等功能的支持。"}]}]},{"ID":"20240201213061-i9xccqh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213061-i9xccqh","updated":"20240201213061"},"Children":[{"ID":"20240201213062-g3w1uz1","Type":"NodeParagraph","Properties":{"id":"20240201213062-g3w1uz1","updated":"20240201213062"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-context"},{"Type":"NodeText","Data":"：提供对国际化、事件传播、资源加载等功能的支持。"}]}]},{"ID":"20240201213063-ixjida2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213063-ixjida2","updated":"20240201213063"},"Children":[{"ID":"20240201213064-aun7zjq","Type":"NodeParagraph","Properties":{"id":"20240201213064-aun7zjq","updated":"20240201213064"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-expression"},{"Type":"NodeText","Data":"：提供对表达式语言（Spring Expression Language） SpEL 的支持，只依赖于 core 模块，不依赖于其他模块，可以单独使用。"}]}]}]},{"ID":"20240201213065-lm68xga","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213065-lm68xga","updated":"20240201213065"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AOP"}]},{"ID":"20240201213066-h921obe","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213066-h921obe","updated":"20240201213066"},"Children":[{"ID":"20240201213067-zfgchzk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213067-zfgchzk","updated":"20240201213067"},"Children":[{"ID":"20240201213068-0ox9umf","Type":"NodeParagraph","Properties":{"id":"20240201213068-0ox9umf","updated":"20240201213068"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-aspects"},{"Type":"NodeText","Data":"：该模块为与 AspectJ 的集成提供支持。"}]}]},{"ID":"20240201213069-ltlsc4p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213069-ltlsc4p","updated":"20240201213069"},"Children":[{"ID":"20240201213070-yp64cf7","Type":"NodeParagraph","Properties":{"id":"20240201213070-yp64cf7","updated":"20240201213070"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-aop"},{"Type":"NodeText","Data":"：提供了面向切面的编程实现。"}]}]},{"ID":"20240201213071-a9ukaol","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213071-a9ukaol","updated":"20240201213071"},"Children":[{"ID":"20240201213072-xqp72n1","Type":"NodeParagraph","Properties":{"id":"20240201213072-xqp72n1","updated":"20240201213072"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-instrument"},{"Type":"NodeText","Data":"：提供了为 JVM 添加代理（agent）的功能。 具体来讲，它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递类文 件，就像这些文件是被类加载器加载的一样。没有理解也没关系，这个模块的使用场景非常有限。"}]}]}]},{"ID":"20240201213073-o0xic13","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213073-o0xic13","updated":"20240201213073"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Data Access/Integration"}]},{"ID":"20240201213074-204xk43","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213074-204xk43","updated":"20240201213074"},"Children":[{"ID":"20240201213075-gmifnh1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213075-gmifnh1","updated":"20240201213075"},"Children":[{"ID":"20240201213076-jwp9pts","Type":"NodeParagraph","Properties":{"id":"20240201213076-jwp9pts","updated":"20240201213076"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-jdbc"},{"Type":"NodeText","Data":"：提供了对数据库访问的抽象 JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java 程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。"}]}]},{"ID":"20240201213077-a1jwl9n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213077-a1jwl9n","updated":"20240201213077"},"Children":[{"ID":"20240201213078-kj6g59m","Type":"NodeParagraph","Properties":{"id":"20240201213078-kj6g59m","updated":"20240201213078"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-tx"},{"Type":"NodeText","Data":"：提供对事务的支持。"}]}]},{"ID":"20240201213079-90mdilp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213079-90mdilp","updated":"20240201213079"},"Children":[{"ID":"20240201213080-jibvru6","Type":"NodeParagraph","Properties":{"id":"20240201213080-jibvru6","updated":"20240201213080"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-orm"},{"Type":"NodeText","Data":"：提供对 Hibernate、JPA、iBatis 等 ORM 框架的支持。"}]}]},{"ID":"20240201213081-sbtrf90","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213081-sbtrf90","updated":"20240201213081"},"Children":[{"ID":"20240201213082-3kjmjyd","Type":"NodeParagraph","Properties":{"id":"20240201213082-3kjmjyd","updated":"20240201213082"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-oxm"},{"Type":"NodeText","Data":"：提供一个抽象层支撑 OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和 XStream 等。"}]}]},{"ID":"20240201213083-ef9rpne","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213083-ef9rpne","updated":"20240201213083"},"Children":[{"ID":"20240201213084-r4u27nd","Type":"NodeParagraph","Properties":{"id":"20240201213084-r4u27nd","updated":"20240201213084"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-jms"},{"Type":"NodeText","Data":" : 消息服务。自 Spring Framework 4.1 以后，它还提供了对 spring-messaging 模块的继承。"}]}]}]},{"ID":"20240201213085-5dekyf1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213085-5dekyf1","updated":"20240201213085"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Web"}]},{"ID":"20240201213086-yw1valr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213086-yw1valr","updated":"20240201213086"},"Children":[{"ID":"20240201213087-q8j852n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213087-q8j852n","updated":"20240201213087"},"Children":[{"ID":"20240201213088-ok21ttc","Type":"NodeParagraph","Properties":{"id":"20240201213088-ok21ttc","updated":"20240201213088"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-web"},{"Type":"NodeText","Data":"：对 Web 功能的实现提供一些最基础的支持。"}]}]},{"ID":"20240201213089-kr9ugq8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213089-kr9ugq8","updated":"20240201213089"},"Children":[{"ID":"20240201213090-j3p9wd9","Type":"NodeParagraph","Properties":{"id":"20240201213090-j3p9wd9","updated":"20240201213090"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-webmvc"},{"Type":"NodeText","Data":"：提供对 Spring MVC 的实现。"}]}]},{"ID":"20240201213091-311ofb8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213091-311ofb8","updated":"20240201213091"},"Children":[{"ID":"20240201213092-czb4fz3","Type":"NodeParagraph","Properties":{"id":"20240201213092-czb4fz3","updated":"20240201213092"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-websocket"},{"Type":"NodeText","Data":"：提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信。"}]}]},{"ID":"20240201213093-vub9xxd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213093-vub9xxd","updated":"20240201213093"},"Children":[{"ID":"20240201213094-p0u2r33","Type":"NodeParagraph","Properties":{"id":"20240201213094-p0u2r33","updated":"20240201213094"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-webflux"},{"Type":"NodeText","Data":"：提供对 WebFlux 的支持。WebFlux 是 Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步。"}]}]}]},{"ID":"20240201213095-j5eq3gk","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213095-j5eq3gk","updated":"20240201213095"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Messaging"}]},{"ID":"20240201213096-f3d3h0m","Type":"NodeParagraph","Properties":{"id":"20240201213096-f3d3h0m","updated":"20240201213096"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-messaging"},{"Type":"NodeText","Data":" 是从 Spring4.0 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。"}]},{"ID":"20240201213097-vmi1mcr","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213097-vmi1mcr","updated":"20240201213097"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Test"}]},{"ID":"20240201213098-h9n3507","Type":"NodeParagraph","Properties":{"id":"20240201213098-h9n3507","updated":"20240201213098"},"Children":[{"Type":"NodeText","Data":"Spring 团队提倡测试驱动开发（TDD）。有了控制反转 (IoC)的帮助，单元测试和集成测试变得更简单。"}]},{"ID":"20240201213099-o9qgepv","Type":"NodeParagraph","Properties":{"id":"20240201213099-o9qgepv","updated":"20240201213099"},"Children":[{"Type":"NodeText","Data":"Spring 的测试模块对 JUnit（单元测试框架）、TestNG（类似 JUnit）、Mockito（主要用来 Mock 对象）、PowerMock（解决 Mockito 的问题比如无法模拟 final, static， private 方法）等等常用的测试框架支持的都比较好。"}]},{"ID":"20240201213100-p2rii9f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213100-p2rii9f","updated":"20240201213100"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring,Spring MVC,Spring Boot 之间什么关系?"}]},{"ID":"20240201213101-n1pfkdy","Type":"NodeParagraph","Properties":{"id":"20240201213101-n1pfkdy","updated":"20240201213101"},"Children":[{"Type":"NodeText","Data":"很多人对 Spring,Spring MVC,Spring Boot 这三者傻傻分不清楚！这里简单介绍一下这三者，其实很简单，没有什么高深的东西。"}]},{"ID":"20240201213102-k8ixuny","Type":"NodeParagraph","Properties":{"id":"20240201213102-k8ixuny","updated":"20240201213102"},"Children":[{"Type":"NodeText","Data":"Spring 包含了多个功能模块（上面刚刚提到过），其中最重要的是 Spring-Core（主要提供 IoC 依赖注入功能的支持） 模块， Spring 中的其他模块（比如 Spring MVC）的功能实现基本都需要依赖于该模块。"}]},{"ID":"20240201213103-khwlhiu","Type":"NodeParagraph","Properties":{"id":"20240201213103-khwlhiu","updated":"20240201213103"},"Children":[{"Type":"NodeText","Data":"下图对应的是 Spring4.x 版本。目前最新的 5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。"}]},{"ID":"20240201213104-sp2ygjc","Type":"NodeParagraph","Properties":{"id":"20240201213104-sp2ygjc","updated":"20240201213104"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring主要模块","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/jvme0c60b4606711fc4a0b6faf03230247a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213105-1o2fkw5","Type":"NodeParagraph","Properties":{"id":"20240201213105-1o2fkw5","updated":"20240201213105"},"Children":[{"Type":"NodeText","Data":"Spring MVC 是 Spring 中的一个很重要的模块，主要赋予 Spring 快速构建 MVC 架构的 Web 程序的能力。MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。"}]},{"ID":"20240201213106-oi3bg56","Type":"NodeParagraph","Properties":{"id":"20240201213106-oi3bg56","updated":"20240201213106"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/image-20210809181452421.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213107-5d5asm9","Type":"NodeParagraph","Properties":{"id":"20240201213107-5d5asm9","updated":"20240201213107"},"Children":[{"Type":"NodeText","Data":"使用 Spring 进行开发各种配置过于麻烦比如开启某些 Spring 特性时，需要用 XML 或 Java 进行显式配置。于是，Spring Boot 诞生了！"}]},{"ID":"20240201213108-kv458la","Type":"NodeParagraph","Properties":{"id":"20240201213108-kv458la","updated":"20240201213108"},"Children":[{"Type":"NodeText","Data":"Spring 旨在简化 J2EE 企业应用程序开发。Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。"}]},{"ID":"20240201213109-fgu2w9e","Type":"NodeParagraph","Properties":{"id":"20240201213109-fgu2w9e","updated":"20240201213109"},"Children":[{"Type":"NodeText","Data":"Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用！"}]},{"ID":"20240201213110-m7l0dji","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213110-m7l0dji","updated":"20240201213110"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring IoC"}]},{"ID":"20240201213111-39rip13","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213111-39rip13","updated":"20240201213111"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"谈谈自己对于 Spring IoC 的了解"}]},{"ID":"20240201213112-pr2h5ca","Type":"NodeParagraph","Properties":{"id":"20240201213112-pr2h5ca","updated":"20240201213112"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"IoC（Inversion of Control:控制反转）"},{"Type":"NodeText","Data":" 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。"}]},{"ID":"20240201213113-qw3u6q2","Type":"NodeParagraph","Properties":{"id":"20240201213113-qw3u6q2","updated":"20240201213113"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么叫控制反转？"}]},{"ID":"20240201213114-vtoe049","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213114-vtoe049","updated":"20240201213114"},"Children":[{"ID":"20240201213115-qgctbju","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213115-qgctbju","updated":"20240201213115"},"Children":[{"ID":"20240201213116-riuzzzf","Type":"NodeParagraph","Properties":{"id":"20240201213116-riuzzzf","updated":"20240201213116"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"控制"},{"Type":"NodeText","Data":"：指的是对象创建（实例化、管理）的权力"}]}]},{"ID":"20240201213117-9v3ynlk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213117-9v3ynlk","updated":"20240201213117"},"Children":[{"ID":"20240201213118-h5ghr2g","Type":"NodeParagraph","Properties":{"id":"20240201213118-h5ghr2g","updated":"20240201213118"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"反转"},{"Type":"NodeText","Data":"：控制权交给外部环境（Spring 框架、IoC 容器）"}]}]}]},{"ID":"20240201213119-8fnsm8w","Type":"NodeParagraph","Properties":{"id":"20240201213119-8fnsm8w","updated":"20240201213119"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"IoC 图解","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/frc-365faceb5697f04f31399937c059c162.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213120-5tps6ox","Type":"NodeParagraph","Properties":{"id":"20240201213120-5tps6ox","updated":"20240201213120"},"Children":[{"Type":"NodeText","Data":"将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。"}]},{"ID":"20240201213121-mhazb2c","Type":"NodeParagraph","Properties":{"id":"20240201213121-mhazb2c","updated":"20240201213121"},"Children":[{"Type":"NodeText","Data":"在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。"}]},{"ID":"20240201213122-mvdyk2h","Type":"NodeParagraph","Properties":{"id":"20240201213122-mvdyk2h","updated":"20240201213122"},"Children":[{"Type":"NodeText","Data":"在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。"}]},{"ID":"20240201213123-orbtal2","Type":"NodeParagraph","Properties":{"id":"20240201213123-orbtal2","updated":"20240201213123"},"Children":[{"Type":"NodeText","Data":"Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。"}]},{"ID":"20240201213124-ncyqtp4","Type":"NodeParagraph","Properties":{"id":"20240201213124-ncyqtp4","updated":"20240201213124"},"Children":[{"Type":"NodeText","Data":"相关阅读："}]},{"ID":"20240201213125-7q3yre6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213125-7q3yre6","updated":"20240201213125"},"Children":[{"ID":"20240201213126-4jfctim","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213126-4jfctim","updated":"20240201213126"},"Children":[{"ID":"20240201213127-wqe1njv","Type":"NodeParagraph","Properties":{"id":"20240201213127-wqe1njv","updated":"20240201213127"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javadoop.com/post/spring-ioc","TextMarkTextContent":"IoC 源码阅读"}]}]},{"ID":"20240201213128-r8el7ao","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213128-r8el7ao","updated":"20240201213128"},"Children":[{"ID":"20240201213129-lvyvsum","Type":"NodeParagraph","Properties":{"id":"20240201213129-lvyvsum","updated":"20240201213129"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./ioc-and-aop.md","TextMarkTextContent":"IoC \u0026amp; AOP 详解（快速搞懂）"}]}]}]},{"ID":"20240201213130-mel8y0z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213130-mel8y0z","updated":"20240201213130"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Spring Bean？"}]},{"ID":"20240201213131-bnn2hme","Type":"NodeParagraph","Properties":{"id":"20240201213131-bnn2hme","updated":"20240201213131"},"Children":[{"Type":"NodeText","Data":"简单来说，Bean 代指的就是那些被 IoC 容器所管理的对象。"}]},{"ID":"20240201213132-2ir0n7j","Type":"NodeParagraph","Properties":{"id":"20240201213132-2ir0n7j","updated":"20240201213132"},"Children":[{"Type":"NodeText","Data":"我们需要告诉 IoC 容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是 XML 文件、注解或者 Java 配置类。"}]},{"ID":"20240201213133-nvgbwbe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213133-nvgbwbe","updated":"20240201213133"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003c!-- Constructor-arg with 'value' attribute --\u003e\n\u003cbean id=\"...\" class=\"...\"\u003e\n   \u003cconstructor-arg value=\"...\"/\u003e\n\u003c/bean\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213134-d94o54g","Type":"NodeParagraph","Properties":{"id":"20240201213134-d94o54g","updated":"20240201213134"},"Children":[{"Type":"NodeText","Data":"下图简单地展示了 IoC 容器如何使用配置元数据来管理对象。"}]},{"ID":"20240201213135-5w9vtw4","Type":"NodeParagraph","Properties":{"id":"20240201213135-5w9vtw4","updated":"20240201213135"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/062b422bd7ac4d53afd28fb74b2bc94d.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213136-rgusxdi","Type":"NodeParagraph","Properties":{"id":"20240201213136-rgusxdi","updated":"20240201213136"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.beans"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.context"},{"Type":"NodeText","Data":" 这两个包是 IoC 实现的基础，如果想要研究 IoC 相关的源码的话，可以去看看"}]},{"ID":"20240201213137-kjrf22j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213137-kjrf22j","updated":"20240201213137"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"将一个类声明为 Bean 的注解有哪些?"}]},{"ID":"20240201213138-xhi0kgt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213138-xhi0kgt","updated":"20240201213138"},"Children":[{"ID":"20240201213139-wa0lwc7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213139-wa0lwc7","updated":"20240201213139"},"Children":[{"ID":"20240201213140-mqy8r8y","Type":"NodeParagraph","Properties":{"id":"20240201213140-mqy8r8y","updated":"20240201213140"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"：通用的注解，可标注任意类为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring"},{"Type":"NodeText","Data":" 组件。如果一个 Bean 不知道属于哪个层，可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 注解标注。"}]}]},{"ID":"20240201213141-eavgqu6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213141-eavgqu6","updated":"20240201213141"},"Children":[{"ID":"20240201213142-ck8glcr","Type":"NodeParagraph","Properties":{"id":"20240201213142-ck8glcr","updated":"20240201213142"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Repository"},{"Type":"NodeText","Data":" : 对应持久层即 Dao 层，主要用于数据库相关操作。"}]}]},{"ID":"20240201213143-nb27lz8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213143-nb27lz8","updated":"20240201213143"},"Children":[{"ID":"20240201213144-7nvct3w","Type":"NodeParagraph","Properties":{"id":"20240201213144-7nvct3w","updated":"20240201213144"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Service"},{"Type":"NodeText","Data":" : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。"}]}]},{"ID":"20240201213145-h4anhce","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213145-h4anhce","updated":"20240201213145"},"Children":[{"ID":"20240201213146-5xmwew5","Type":"NodeParagraph","Properties":{"id":"20240201213146-5xmwew5","updated":"20240201213146"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Controller"},{"Type":"NodeText","Data":" : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Service"},{"Type":"NodeText","Data":" 层返回数据给前端页面。"}]}]}]},{"ID":"20240201213147-ir8p3ta","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213147-ir8p3ta","updated":"20240201213147"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Component 和 @Bean 的区别是什么？"}]},{"ID":"20240201213148-3yxjjgn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213148-3yxjjgn","updated":"20240201213148"},"Children":[{"ID":"20240201213149-8el5ks5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213149-8el5ks5","updated":"20240201213149"},"Children":[{"ID":"20240201213150-sibiy2n","Type":"NodeParagraph","Properties":{"id":"20240201213150-sibiy2n","updated":"20240201213150"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 注解作用于类，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"注解作用于方法。"}]}]},{"ID":"20240201213151-3psq24n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213151-3psq24n","updated":"20240201213151"},"Children":[{"ID":"20240201213152-3arg7e2","Type":"NodeParagraph","Properties":{"id":"20240201213152-3arg7e2","updated":"20240201213152"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":" 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":" 注解通常是我们在标有该注解的方法中定义产生这个 bean,"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。"}]}]},{"ID":"20240201213153-n1jw49e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213153-n1jw49e","updated":"20240201213153"},"Children":[{"ID":"20240201213154-xy0zlqp","Type":"NodeParagraph","Properties":{"id":"20240201213154-xy0zlqp","updated":"20240201213154"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":" 注解比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 注解的自定义性更强，而且很多地方我们只能通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":" 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring"},{"Type":"NodeText","Data":"容器时，则只能通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"来实现。"}]}]}]},{"ID":"20240201213155-ehvblqy","Type":"NodeParagraph","Properties":{"id":"20240201213155-ehvblqy","updated":"20240201213155"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"注解使用示例："}]},{"ID":"20240201213156-0ul82pz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213156-0ul82pz","updated":"20240201213156"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class AppConfig {\n    @Bean\n    public TransferService transferService() {\n        return new TransferServiceImpl();\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213157-uzinp2f","Type":"NodeParagraph","Properties":{"id":"20240201213157-uzinp2f","updated":"20240201213157"},"Children":[{"Type":"NodeText","Data":"上面的代码相当于下面的 xml 配置"}]},{"ID":"20240201213158-t5o7dws","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213158-t5o7dws","updated":"20240201213158"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cbeans\u003e\n    \u003cbean id=\"transferService\" class=\"com.acme.TransferServiceImpl\"/\u003e\n\u003c/beans\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213159-kqimej4","Type":"NodeParagraph","Properties":{"id":"20240201213159-kqimej4","updated":"20240201213159"},"Children":[{"Type":"NodeText","Data":"下面这个例子是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 无法实现的。"}]},{"ID":"20240201213160-q6crlu3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213160-q6crlu3","updated":"20240201213160"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Bean\npublic OneService getService(status) {\n    case (status)  {\n        when 1:\n                return new serviceImpl1();\n        when 2:\n                return new serviceImpl2();\n        when 3:\n                return new serviceImpl3();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213161-gy3suou","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213161-gy3suou","updated":"20240201213161"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注入 Bean 的注解有哪些？"}]},{"ID":"20240201213162-dw50hv4","Type":"NodeParagraph","Properties":{"id":"20240201213162-dw50hv4","updated":"20240201213162"},"Children":[{"Type":"NodeText","Data":"Spring 内置的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 以及 JDK 内置的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Inject"},{"Type":"NodeText","Data":" 都可以用于注入 Bean。"}]},{"ID":"20240201213163-3cupr6w","Type":"NodeTable","Data":"| Annotation   | Package                            | Source       |\n| ------------ | ---------------------------------- | ------------ |\n| `@Autowired` | `org.springframework.bean.factory` | Spring 2.5+  |\n| `@Resource`  | `javax.annotation`                 | Java JSR-250 |\n| `@Inject`    | `javax.inject`                     | Java JSR-330 |","TableAligns":[0,0,0],"Properties":{"id":"20240201213163-3cupr6w","updated":"20240201213163"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Annotation"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Package"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Source"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.bean.factory"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Spring 2.5+"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"javax.annotation"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java JSR-250"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Inject"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"javax.inject"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java JSR-330"}]}]}]},{"ID":"20240201213164-xdue45g","Type":"NodeParagraph","Properties":{"id":"20240201213164-xdue45g","updated":"20240201213164"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"使用的比较多一些。"}]},{"ID":"20240201213165-1qrc5yt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213165-1qrc5yt","updated":"20240201213165"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Autowired 和 @Resource 的区别是什么？"}]},{"ID":"20240201213166-8tmsjs3","Type":"NodeParagraph","Properties":{"id":"20240201213166-8tmsjs3","updated":"20240201213166"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Autowired"},{"Type":"NodeText","Data":" 属于 Spring 内置的注解，默认的注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入 Bean （接口的实现类）。"}]},{"ID":"20240201213167-8uwl395","Type":"NodeParagraph","Properties":{"id":"20240201213167-8uwl395","updated":"20240201213167"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这会有什么问题呢？"},{"Type":"NodeText","Data":" 当一个接口存在多个实现类的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"这种方式就无法正确注入对象了，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。"}]},{"ID":"20240201213168-5dkuync","Type":"NodeParagraph","Properties":{"id":"20240201213168-5dkuync","updated":"20240201213168"},"Children":[{"Type":"NodeText","Data":"这种情况下，注入方式会变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"smsService"},{"Type":"NodeText","Data":" 就是我这里所说的名称，这样应该比较好理解了吧。"}]},{"ID":"20240201213169-b7vdhkl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213169-b7vdhkl","updated":"20240201213169"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// smsService 就是我们上面所说的名称\n@Autowired\nprivate SmsService smsService;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213170-b5ig23o","Type":"NodeParagraph","Properties":{"id":"20240201213170-b5ig23o","updated":"20240201213170"},"Children":[{"Type":"NodeText","Data":"举个例子，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SmsService"},{"Type":"NodeText","Data":" 接口有两个实现类: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SmsServiceImpl1"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SmsServiceImpl2"},{"Type":"NodeText","Data":"，且它们都已经被 Spring 容器所管理。"}]},{"ID":"20240201213171-2q5e622","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213171-2q5e622","updated":"20240201213171"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 报错，byName 和 byType 都无法匹配到 bean\n@Autowired\nprivate SmsService smsService;\n// 正确注入 SmsServiceImpl1 对象对应的 bean\n@Autowired\nprivate SmsService smsServiceImpl1;\n// 正确注入  SmsServiceImpl1 对象对应的 bean\n// smsServiceImpl1 就是我们上面所说的名称\n@Autowired\n@Qualifier(value = \"smsServiceImpl1\")\nprivate SmsService smsService;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213172-75kg40g","Type":"NodeParagraph","Properties":{"id":"20240201213172-75kg40g","updated":"20240201213172"},"Children":[{"Type":"NodeText","Data":"我们还是建议通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeText","Data":" 注解来显式指定名称而不是依赖变量的名称。"}]},{"ID":"20240201213173-4a5f30e","Type":"NodeParagraph","Properties":{"id":"20240201213173-4a5f30e","updated":"20240201213173"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"属于 JDK 提供的注解，默认注入方式为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"。如果无法通过名称匹配到对应的 Bean 的话，注入方式会变为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213174-ev54mav","Type":"NodeParagraph","Properties":{"id":"20240201213174-ev54mav","updated":"20240201213174"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 有两个比较重要且日常开发常用的属性："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"（名称）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"（类型）。"}]},{"ID":"20240201213175-jndc04z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213175-jndc04z","updated":"20240201213175"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public @interface Resource {\n    String name() default \"\";\n    Class\u003c?\u003e type() default Object.class;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213176-k3xv1bc","Type":"NodeParagraph","Properties":{"id":"20240201213176-k3xv1bc","updated":"20240201213176"},"Children":[{"Type":"NodeText","Data":"如果仅指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 属性则注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"，如果仅指定"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"属性则注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"，如果同时指定"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"属性（不建议这么做）则注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"+"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213177-cwl4091","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213177-cwl4091","updated":"20240201213177"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 报错，byName 和 byType 都无法匹配到 bean\n@Resource\nprivate SmsService smsService;\n// 正确注入 SmsServiceImpl1 对象对应的 bean\n@Resource\nprivate SmsService smsServiceImpl1;\n// 正确注入 SmsServiceImpl1 对象对应的 bean（比较推荐这种方式）\n@Resource(name = \"smsServiceImpl1\")\nprivate SmsService smsService;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213178-oommvfw","Type":"NodeParagraph","Properties":{"id":"20240201213178-oommvfw","updated":"20240201213178"},"Children":[{"Type":"NodeText","Data":"简单总结一下："}]},{"ID":"20240201213179-ok4yluz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213179-ok4yluz","updated":"20240201213179"},"Children":[{"ID":"20240201213180-waz3upw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213180-waz3upw","updated":"20240201213180"},"Children":[{"ID":"20240201213181-xt6avlm","Type":"NodeParagraph","Properties":{"id":"20240201213181-xt6avlm","updated":"20240201213181"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 是 Spring 提供的注解，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 是 JDK 提供的注解。"}]}]},{"ID":"20240201213182-7rvdv4i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213182-7rvdv4i","updated":"20240201213182"},"Children":[{"ID":"20240201213183-qg32m59","Type":"NodeParagraph","Properties":{"id":"20240201213183-qg32m59","updated":"20240201213183"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Autowired"},{"Type":"NodeText","Data":" 默认的注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"（根据类型进行匹配），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"默认注入方式为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"（根据名称进行匹配）。"}]}]},{"ID":"20240201213184-qb3qzje","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213184-qb3qzje","updated":"20240201213184"},"Children":[{"ID":"20240201213185-zqhmsak","Type":"NodeParagraph","Properties":{"id":"20240201213185-zqhmsak","updated":"20240201213185"},"Children":[{"Type":"NodeText","Data":"当一个接口存在多个实现类的情况下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"都需要通过名称才能正确匹配到对应的 Bean。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Autowired"},{"Type":"NodeText","Data":" 可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeText","Data":" 注解来显式指定名称，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 属性来显式指定名称。"}]}]},{"ID":"20240201213186-fdck483","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213186-fdck483","updated":"20240201213186"},"Children":[{"ID":"20240201213187-1mlypuv","Type":"NodeParagraph","Properties":{"id":"20240201213187-1mlypuv","updated":"20240201213187"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 支持在构造函数、方法、字段和参数上使用。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。"}]}]}]},{"ID":"20240201213188-okw9p24","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213188-okw9p24","updated":"20240201213188"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Bean 的作用域有哪些?"}]},{"ID":"20240201213189-1lbwmcb","Type":"NodeParagraph","Properties":{"id":"20240201213189-1lbwmcb","updated":"20240201213189"},"Children":[{"Type":"NodeText","Data":"Spring 中 Bean 的作用域通常有下面几种："}]},{"ID":"20240201213190-5g0zmmj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213190-5g0zmmj","updated":"20240201213190"},"Children":[{"ID":"20240201213191-veeqplw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213191-veeqplw","updated":"20240201213191"},"Children":[{"ID":"20240201213192-w79ignn","Type":"NodeParagraph","Properties":{"id":"20240201213192-w79ignn","updated":"20240201213192"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"singleton"},{"Type":"NodeText","Data":" : IoC 容器中只有唯一的 bean 实例。Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。"}]}]},{"ID":"20240201213193-6gnux2s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213193-6gnux2s","updated":"20240201213193"},"Children":[{"ID":"20240201213194-pxu4khk","Type":"NodeParagraph","Properties":{"id":"20240201213194-pxu4khk","updated":"20240201213194"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"prototype"},{"Type":"NodeText","Data":" : 每次获取都会创建一个新的 bean 实例。也就是说，连续 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getBean()"},{"Type":"NodeText","Data":" 两次，得到的是不同的 Bean 实例。"}]}]},{"ID":"20240201213195-b5kj3bl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213195-b5kj3bl","updated":"20240201213195"},"Children":[{"ID":"20240201213196-esk39ft","Type":"NodeParagraph","Properties":{"id":"20240201213196-esk39ft","updated":"20240201213196"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"request"},{"Type":"NodeText","Data":" （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。"}]}]},{"ID":"20240201213197-lv7g25r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213197-lv7g25r","updated":"20240201213197"},"Children":[{"ID":"20240201213198-iydd7zm","Type":"NodeParagraph","Properties":{"id":"20240201213198-iydd7zm","updated":"20240201213198"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"session"},{"Type":"NodeText","Data":" （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。"}]}]},{"ID":"20240201213199-ieo9mq5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213199-ieo9mq5","updated":"20240201213199"},"Children":[{"ID":"20240201213200-pj08m9u","Type":"NodeParagraph","Properties":{"id":"20240201213200-pj08m9u","updated":"20240201213200"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"application/global-session"},{"Type":"NodeText","Data":" （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。"}]}]},{"ID":"20240201213201-8hvbhrq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213201-8hvbhrq","updated":"20240201213201"},"Children":[{"ID":"20240201213202-mcbzsnk","Type":"NodeParagraph","Properties":{"id":"20240201213202-mcbzsnk","updated":"20240201213202"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"websocket"},{"Type":"NodeText","Data":" （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。"}]}]}]},{"ID":"20240201213203-i2k3a4i","Type":"NodeParagraph","Properties":{"id":"20240201213203-i2k3a4i","updated":"20240201213203"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何配置 bean 的作用域呢？"}]},{"ID":"20240201213204-au44v5p","Type":"NodeParagraph","Properties":{"id":"20240201213204-au44v5p","updated":"20240201213204"},"Children":[{"Type":"NodeText","Data":"xml 方式："}]},{"ID":"20240201213205-vhkkp7o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213205-vhkkp7o","updated":"20240201213205"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cbean id=\"...\" class=\"...\" scope=\"singleton\"\u003e\u003c/bean\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213206-mc8kp44","Type":"NodeParagraph","Properties":{"id":"20240201213206-mc8kp44","updated":"20240201213206"},"Children":[{"Type":"NodeText","Data":"注解方式："}]},{"ID":"20240201213207-kvhomf0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213207-kvhomf0","updated":"20240201213207"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Bean\n@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic Person personPrototype() {\n    return new Person();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213208-bwx5kx6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213208-bwx5kx6","updated":"20240201213208"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Bean 是线程安全的吗？"}]},{"ID":"20240201213209-u9to9y5","Type":"NodeParagraph","Properties":{"id":"20240201213209-u9to9y5","updated":"20240201213209"},"Children":[{"Type":"NodeText","Data":"Spring 框架中的 Bean 是否线程安全，取决于其作用域和状态。"}]},{"ID":"20240201213210-ka5pew5","Type":"NodeParagraph","Properties":{"id":"20240201213210-ka5pew5","updated":"20240201213210"},"Children":[{"Type":"NodeText","Data":"我们这里以最常用的两种作用域 prototype 和 singleton 为例介绍。几乎所有场景的 Bean 作用域都是使用默认的 singleton ，重点关注 singleton 作用域即可。"}]},{"ID":"20240201213211-v1jcfdx","Type":"NodeParagraph","Properties":{"id":"20240201213211-v1jcfdx","updated":"20240201213211"},"Children":[{"Type":"NodeText","Data":"prototype 作用域下，每次获取都会创建一个新的 bean 实例，不存在资源竞争问题，所以不存在线程安全问题。singleton 作用域下，IoC 容器中只有唯一的 bean 实例，可能会存在资源竞争问题（取决于 Bean 是否有状态）。如果这个 bean 是有状态的话，那就存在线程安全问题（有状态 Bean 是指包含可变的成员变量的对象）。"}]},{"ID":"20240201213212-dz200uo","Type":"NodeParagraph","Properties":{"id":"20240201213212-dz200uo","updated":"20240201213212"},"Children":[{"Type":"NodeText","Data":"不过，大部分 Bean 实际都是无状态（没有定义可变的成员变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。"}]},{"ID":"20240201213213-0xocedb","Type":"NodeParagraph","Properties":{"id":"20240201213213-0xocedb","updated":"20240201213213"},"Children":[{"Type":"NodeText","Data":"对于有状态单例 Bean 的线程安全问题，常见的有两种解决办法："}]},{"ID":"20240201213214-3e7lm1d","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213214-3e7lm1d","updated":"20240201213214"},"Children":[{"ID":"20240201213215-4vacvne","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213215-4vacvne","updated":"20240201213215"},"Children":[{"ID":"20240201213216-1ij4sm5","Type":"NodeParagraph","Properties":{"id":"20240201213216-1ij4sm5","updated":"20240201213216"},"Children":[{"Type":"NodeText","Data":"在 Bean 中尽量避免定义可变的成员变量。"}]}]},{"ID":"20240201213217-g3qt0w9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213217-g3qt0w9","updated":"20240201213217"},"Children":[{"ID":"20240201213218-htsap27","Type":"NodeParagraph","Properties":{"id":"20240201213218-htsap27","updated":"20240201213218"},"Children":[{"Type":"NodeText","Data":"在类中定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 成员变量，将需要的可变成员变量保存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 中（推荐的一种方式）。"}]}]}]},{"ID":"20240201213219-egdgj2i","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213219-egdgj2i","updated":"20240201213219"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Bean 的生命周期了解么?"}]},{"ID":"20240201213220-jvtrz4l","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213220-jvtrz4l","updated":"20240201213220"},"Children":[{"ID":"20240201213221-1l7n2f4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213221-1l7n2f4","updated":"20240201213221"},"Children":[{"ID":"20240201213222-qi24hmv","Type":"NodeParagraph","Properties":{"id":"20240201213222-qi24hmv","updated":"20240201213222"},"Children":[{"Type":"NodeText","Data":"Bean 容器找到配置文件中 Spring Bean 的定义。"}]}]},{"ID":"20240201213223-au6tnao","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213223-au6tnao","updated":"20240201213223"},"Children":[{"ID":"20240201213224-gcqu1es","Type":"NodeParagraph","Properties":{"id":"20240201213224-gcqu1es","updated":"20240201213224"},"Children":[{"Type":"NodeText","Data":"Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。"}]}]},{"ID":"20240201213225-343qob3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213225-343qob3","updated":"20240201213225"},"Children":[{"ID":"20240201213226-8y8126b","Type":"NodeParagraph","Properties":{"id":"20240201213226-8y8126b","updated":"20240201213226"},"Children":[{"Type":"NodeText","Data":"如果涉及到一些属性值 利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set()"},{"Type":"NodeText","Data":"方法设置一些属性值。"}]}]},{"ID":"20240201213227-sju8dml","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213227-sju8dml","updated":"20240201213227"},"Children":[{"ID":"20240201213228-m8swyv2","Type":"NodeParagraph","Properties":{"id":"20240201213228-m8swyv2","updated":"20240201213228"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanNameAware"},{"Type":"NodeText","Data":" 接口，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setBeanName()"},{"Type":"NodeText","Data":"方法，传入 Bean 的名字。"}]}]},{"ID":"20240201213229-kmrhjgk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213229-kmrhjgk","updated":"20240201213229"},"Children":[{"ID":"20240201213230-ocpf4i9","Type":"NodeParagraph","Properties":{"id":"20240201213230-ocpf4i9","updated":"20240201213230"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanClassLoaderAware"},{"Type":"NodeText","Data":" 接口，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setBeanClassLoader()"},{"Type":"NodeText","Data":"方法，传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassLoader"},{"Type":"NodeText","Data":"对象的实例。"}]}]},{"ID":"20240201213231-yp9s2ax","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213231-yp9s2ax","updated":"20240201213231"},"Children":[{"ID":"20240201213232-7tbd2xw","Type":"NodeParagraph","Properties":{"id":"20240201213232-7tbd2xw","updated":"20240201213232"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactoryAware"},{"Type":"NodeText","Data":" 接口，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setBeanFactory()"},{"Type":"NodeText","Data":"方法，传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"对象的实例。"}]}]},{"ID":"20240201213233-hkyqwph","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213233-hkyqwph","updated":"20240201213233"},"Children":[{"ID":"20240201213234-90t3jla","Type":"NodeParagraph","Properties":{"id":"20240201213234-90t3jla","updated":"20240201213234"},"Children":[{"Type":"NodeText","Data":"与上面的类似，如果实现了其他 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"*.Aware"},{"Type":"NodeText","Data":"接口，就调用相应的方法。"}]}]},{"ID":"20240201213235-hhu93ux","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213235-hhu93ux","updated":"20240201213235"},"Children":[{"ID":"20240201213236-wqyeeog","Type":"NodeParagraph","Properties":{"id":"20240201213236-wqyeeog","updated":"20240201213236"},"Children":[{"Type":"NodeText","Data":"如果有和加载这个 Bean 的 Spring 容器相关的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanPostProcessor"},{"Type":"NodeText","Data":" 对象，执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"postProcessBeforeInitialization()"},{"Type":"NodeText","Data":" 方法"}]}]},{"ID":"20240201213237-zmh61sh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213237-zmh61sh","updated":"20240201213237"},"Children":[{"ID":"20240201213238-hbg3fjm","Type":"NodeParagraph","Properties":{"id":"20240201213238-hbg3fjm","updated":"20240201213238"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InitializingBean"},{"Type":"NodeText","Data":"接口，执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"afterPropertiesSet()"},{"Type":"NodeText","Data":"方法。"}]}]},{"ID":"20240201213239-npdtv3l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213239-npdtv3l","updated":"20240201213239"},"Children":[{"ID":"20240201213240-h36q1ve","Type":"NodeParagraph","Properties":{"id":"20240201213240-h36q1ve","updated":"20240201213240"},"Children":[{"Type":"NodeText","Data":"如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。"}]}]},{"ID":"20240201213241-s1mwn7r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213241-s1mwn7r","updated":"20240201213241"},"Children":[{"ID":"20240201213242-3kwkfv2","Type":"NodeParagraph","Properties":{"id":"20240201213242-3kwkfv2","updated":"20240201213242"},"Children":[{"Type":"NodeText","Data":"如果有和加载这个 Bean 的 Spring 容器相关的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanPostProcessor"},{"Type":"NodeText","Data":" 对象，执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"postProcessAfterInitialization()"},{"Type":"NodeText","Data":" 方法"}]}]},{"ID":"20240201213243-mtd0lqf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213243-mtd0lqf","updated":"20240201213243"},"Children":[{"ID":"20240201213244-kafdb6j","Type":"NodeParagraph","Properties":{"id":"20240201213244-kafdb6j","updated":"20240201213244"},"Children":[{"Type":"NodeText","Data":"当要销毁 Bean 的时候，如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DisposableBean"},{"Type":"NodeText","Data":" 接口，执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"destroy()"},{"Type":"NodeText","Data":" 方法。"}]}]},{"ID":"20240201213245-gqsmovk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213245-gqsmovk","updated":"20240201213245"},"Children":[{"ID":"20240201213246-8nmywvx","Type":"NodeParagraph","Properties":{"id":"20240201213246-8nmywvx","updated":"20240201213246"},"Children":[{"Type":"NodeText","Data":"当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。"}]}]}]},{"ID":"20240201213247-ut8ptja","Type":"NodeParagraph","Properties":{"id":"20240201213247-ut8ptja","updated":"20240201213247"},"Children":[{"Type":"NodeText","Data":"图示："}]},{"ID":"20240201213248-nse3a1s","Type":"NodeParagraph","Properties":{"id":"20240201213248-nse3a1s","updated":"20240201213248"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring Bean 生命周期","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://images.xiaozhuanlan.com/photo/2019/24bc2bad3ce28144d60d9e0a2edf6c7f.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213249-f0dr96n","Type":"NodeParagraph","Properties":{"id":"20240201213249-f0dr96n","updated":"20240201213249"},"Children":[{"Type":"NodeText","Data":"与之比较类似的中文版本:"}]},{"ID":"20240201213250-wwh810g","Type":"NodeParagraph","Properties":{"id":"20240201213250-wwh810g","updated":"20240201213250"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring Bean 生命周期","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://images.xiaozhuanlan.com/photo/2019/b5d264565657a5395c2781081a7483e1.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213251-y3xv71k","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213251-y3xv71k","updated":"20240201213251"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AoP"}]},{"ID":"20240201213252-ig01ybb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213252-ig01ybb","updated":"20240201213252"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"谈谈自己对于 AOP 的了解"}]},{"ID":"20240201213253-gxgkv0x","Type":"NodeParagraph","Properties":{"id":"20240201213253-gxgkv0x","updated":"20240201213253"},"Children":[{"Type":"NodeText","Data":"AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。"}]},{"ID":"20240201213254-r64b6yh","Type":"NodeParagraph","Properties":{"id":"20240201213254-r64b6yh","updated":"20240201213254"},"Children":[{"Type":"NodeText","Data":"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK Proxy"},{"Type":"NodeText","Data":"，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cglib"},{"Type":"NodeText","Data":" 生成一个被代理对象的子类来作为代理，如下图所示："}]},{"ID":"20240201213255-ci8hv33","Type":"NodeParagraph","Properties":{"id":"20240201213255-ci8hv33","updated":"20240201213255"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"SpringAOPProcess","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/230ae587a322d6e4d09510161987d346.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213256-26ykbdl","Type":"NodeParagraph","Properties":{"id":"20240201213256-26ykbdl","updated":"20240201213256"},"Children":[{"Type":"NodeText","Data":"当然你也可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AspectJ"},{"Type":"NodeText","Data":" ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。"}]},{"ID":"20240201213257-qzkkjun","Type":"NodeParagraph","Properties":{"id":"20240201213257-qzkkjun","updated":"20240201213257"},"Children":[{"Type":"NodeText","Data":"AOP 切面编程涉及到的一些专业术语："}]},{"ID":"20240201213258-9kp9c0u","Type":"NodeTable","Data":"| 术语              |                                 含义                                  |\n| :---------------- | :-------------------------------------------------------------------: |\n| 目标(Target)      |                             被通知的对象                              |\n| 代理(Proxy)       |                 向目标对象应用通知之后创建的代理对象                  |\n| 连接点(JoinPoint) |             目标对象的所属类中，定义的所有方法均为连接点              |\n| 切入点(Pointcut)  | 被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点） |\n| 通知(Advice)      |      增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情      |\n| 切面(Aspect)      |                     切入点(Pointcut)+通知(Advice)                     |\n| Weaving(织入)     |           将通知应用到目标对象，进而生成代理对象的过程动作            |","TableAligns":[1,2],"Properties":{"id":"20240201213258-9kp9c0u","updated":"20240201213258"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"术语"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"含义"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"目标(Target)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"被通知的对象"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"代理(Proxy)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"向目标对象应用通知之后创建的代理对象"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"连接点(JoinPoint)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"目标对象的所属类中，定义的所有方法均为连接点"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"切入点(Pointcut)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点）"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"通知(Advice)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"切面(Aspect)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"切入点(Pointcut)+通知(Advice)"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Weaving(织入)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将通知应用到目标对象，进而生成代理对象的过程动作"}]}]}]},{"ID":"20240201213259-th3ymfl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213259-th3ymfl","updated":"20240201213259"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AOP 和 AspectJ AOP 有什么区别？"}]},{"ID":"20240201213260-cr1dm06","Type":"NodeParagraph","Properties":{"id":"20240201213260-cr1dm06","updated":"20240201213260"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。"},{"Type":"NodeText","Data":" Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。"}]},{"ID":"20240201213261-mceljcp","Type":"NodeParagraph","Properties":{"id":"20240201213261-mceljcp","updated":"20240201213261"},"Children":[{"Type":"NodeText","Data":"Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，"}]},{"ID":"20240201213262-ucd3tkx","Type":"NodeParagraph","Properties":{"id":"20240201213262-ucd3tkx","updated":"20240201213262"},"Children":[{"Type":"NodeText","Data":"如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。"}]},{"ID":"20240201213263-jdxwkgu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213263-jdxwkgu","updated":"20240201213263"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AspectJ 定义的通知类型有哪些？"}]},{"ID":"20240201213264-eetqfqy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213264-eetqfqy","updated":"20240201213264"},"Children":[{"ID":"20240201213265-krtno02","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213265-krtno02","updated":"20240201213265"},"Children":[{"ID":"20240201213266-n75828l","Type":"NodeParagraph","Properties":{"id":"20240201213266-n75828l","updated":"20240201213266"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Before"},{"Type":"NodeText","Data":"（前置通知）：目标对象的方法调用之前触发"}]}]},{"ID":"20240201213267-s1ccly2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213267-s1ccly2","updated":"20240201213267"},"Children":[{"ID":"20240201213268-g2dtwd2","Type":"NodeParagraph","Properties":{"id":"20240201213268-g2dtwd2","updated":"20240201213268"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"After"},{"Type":"NodeText","Data":" （后置通知）：目标对象的方法调用之后触发"}]}]},{"ID":"20240201213269-pvraczw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213269-pvraczw","updated":"20240201213269"},"Children":[{"ID":"20240201213270-7hmoiqz","Type":"NodeParagraph","Properties":{"id":"20240201213270-7hmoiqz","updated":"20240201213270"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AfterReturning"},{"Type":"NodeText","Data":"（返回通知）：目标对象的方法调用完成，在返回结果值之后触发"}]}]},{"ID":"20240201213271-g9gn72t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213271-g9gn72t","updated":"20240201213271"},"Children":[{"ID":"20240201213272-5ch76a0","Type":"NodeParagraph","Properties":{"id":"20240201213272-5ch76a0","updated":"20240201213272"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AfterThrowing"},{"Type":"NodeText","Data":"（异常通知）：目标对象的方法运行中抛出 / 触发异常后触发。AfterReturning 和 AfterThrowing 两者互斥。如果方法调用成功无异常，则会有返回值；如果方法抛出了异常，则不会有返回值。"}]}]},{"ID":"20240201213273-ba3idt2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213273-ba3idt2","updated":"20240201213273"},"Children":[{"ID":"20240201213274-tmptoo7","Type":"NodeParagraph","Properties":{"id":"20240201213274-tmptoo7","updated":"20240201213274"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Around"},{"Type":"NodeText","Data":" （环绕通知）：编程式控制目标对象的方法调用。环绕通知是所有通知类型中可操作范围最大的一种，因为它可以直接拿到目标对象，以及要执行的方法，所以环绕通知可以任意的在目标对象的方法调用前后搞事，甚至不调用目标对象的方法"}]}]}]},{"ID":"20240201213275-z5dmow7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213275-z5dmow7","updated":"20240201213275"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"多个切面的执行顺序如何控制？"}]},{"ID":"20240201213276-1papi3n","Type":"NodeParagraph","Properties":{"id":"20240201213276-1papi3n","updated":"20240201213276"},"Children":[{"Type":"NodeText","Data":"1、通常使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Order"},{"Type":"NodeText","Data":" 注解直接定义切面顺序"}]},{"ID":"20240201213277-ng8wp5r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213277-ng8wp5r","updated":"20240201213277"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 值越小优先级越高\n@Order(3)\n@Component\n@Aspect\npublic class LoggingAspect implements Ordered {\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213278-rm84hpy","Type":"NodeParagraph","Properties":{"id":"20240201213278-rm84hpy","updated":"20240201213278"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Ordered"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 接口重写 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"getOrder"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 方法。"}]},{"ID":"20240201213279-hsd3es0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213279-hsd3es0","updated":"20240201213279"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\n@Aspect\npublic class LoggingAspect implements Ordered {\n\n    // ....\n\n    @Override\n    public int getOrder() {\n        // 返回值越小优先级越高\n        return 1;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213280-l1aolnf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213280-l1aolnf","updated":"20240201213280"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring MVC"}]},{"ID":"20240201213281-4e7r5ce","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213281-4e7r5ce","updated":"20240201213281"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"说说自己对于 Spring MVC 了解?"}]},{"ID":"20240201213282-c36hwad","Type":"NodeParagraph","Properties":{"id":"20240201213282-c36hwad","updated":"20240201213282"},"Children":[{"Type":"NodeText","Data":"MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。"}]},{"ID":"20240201213283-v3vyuhl","Type":"NodeParagraph","Properties":{"id":"20240201213283-v3vyuhl","updated":"20240201213283"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/image-20210809181452421.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213284-ucki6jp","Type":"NodeParagraph","Properties":{"id":"20240201213284-ucki6jp","updated":"20240201213284"},"Children":[{"Type":"NodeText","Data":"网上有很多人说 MVC 不是设计模式，只是软件设计规范，我个人更倾向于 MVC 同样是众多设计模式中的一种。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/iluwatar/java-design-patterns","TextMarkTextContent":"java-design-patterns"},{"Type":"NodeText","Data":" 项目中就有关于 MVC 的相关介绍。"}]},{"ID":"20240201213285-sr0n8kh","Type":"NodeParagraph","Properties":{"id":"20240201213285-sr0n8kh","updated":"20240201213285"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/159b3d3e70dd45e6afa81bf06d09264e.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213286-89lm5zj","Type":"NodeParagraph","Properties":{"id":"20240201213286-89lm5zj","updated":"20240201213286"},"Children":[{"Type":"NodeText","Data":"想要真正理解 Spring MVC，我们先来看看 Model 1 和 Model 2 这两个没有 Spring MVC 的时代。"}]},{"ID":"20240201213287-t77juzz","Type":"NodeParagraph","Properties":{"id":"20240201213287-t77juzz","updated":"20240201213287"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Model 1 时代"}]},{"ID":"20240201213288-hh0pqy5","Type":"NodeParagraph","Properties":{"id":"20240201213288-hh0pqy5","updated":"20240201213288"},"Children":[{"Type":"NodeText","Data":"很多学 Java 后端比较晚的朋友可能并没有接触过 Model 1 时代下的 JavaWeb 应用开发。在 Model1 模式下，整个 Web 应用几乎全部用 JSP 页面组成，只用少量的 JavaBean 来处理数据库连接、访问等操作。"}]},{"ID":"20240201213289-x1z1b9p","Type":"NodeParagraph","Properties":{"id":"20240201213289-x1z1b9p","updated":"20240201213289"},"Children":[{"Type":"NodeText","Data":"这个模式下 JSP 即是控制层（Controller）又是表现层（View）。显而易见，这种模式存在很多问题。比如控制逻辑和表现逻辑混杂在一起，导致代码重用率极低；再比如前端和后端相互依赖，难以进行测试维护并且开发效率极低。"}]},{"ID":"20240201213290-pddqf25","Type":"NodeParagraph","Properties":{"id":"20240201213290-pddqf25","updated":"20240201213290"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"mvc-mode1","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/mvc-mode1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213291-sqmcdxj","Type":"NodeParagraph","Properties":{"id":"20240201213291-sqmcdxj","updated":"20240201213291"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Model 2 时代"}]},{"ID":"20240201213292-7owxatg","Type":"NodeParagraph","Properties":{"id":"20240201213292-7owxatg","updated":"20240201213292"},"Children":[{"Type":"NodeText","Data":"学过 Servlet 并做过相关 Demo 的朋友应该了解“Java Bean(Model)+ JSP（View）+Servlet（Controller） ”这种开发模式，这就是早期的 JavaWeb MVC 开发模式。"}]},{"ID":"20240201213293-5x0m1oj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213293-5x0m1oj","updated":"20240201213293"},"Children":[{"ID":"20240201213294-zd03ll5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213294-zd03ll5","updated":"20240201213294"},"Children":[{"ID":"20240201213295-5ip8oyk","Type":"NodeParagraph","Properties":{"id":"20240201213295-5ip8oyk","updated":"20240201213295"},"Children":[{"Type":"NodeText","Data":"Model:系统涉及的数据，也就是 dao 和 bean。"}]}]},{"ID":"20240201213296-pez9fl3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213296-pez9fl3","updated":"20240201213296"},"Children":[{"ID":"20240201213297-lguco11","Type":"NodeParagraph","Properties":{"id":"20240201213297-lguco11","updated":"20240201213297"},"Children":[{"Type":"NodeText","Data":"View：展示模型中的数据，只是用来展示。"}]}]},{"ID":"20240201213298-3j91qzq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213298-3j91qzq","updated":"20240201213298"},"Children":[{"ID":"20240201213299-lisy1ra","Type":"NodeParagraph","Properties":{"id":"20240201213299-lisy1ra","updated":"20240201213299"},"Children":[{"Type":"NodeText","Data":"Controller：接受用户请求，并将请求发送至 Model，最后返回数据给 JSP 并展示给用户"}]}]}]},{"ID":"20240201213300-1fjol6u","Type":"NodeParagraph","Properties":{"id":"20240201213300-1fjol6u","updated":"20240201213300"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/mvc-model2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213301-rn5vxfi","Type":"NodeParagraph","Properties":{"id":"20240201213301-rn5vxfi","updated":"20240201213301"},"Children":[{"Type":"NodeText","Data":"Model2 模式下还存在很多问题，Model2 的抽象和封装程度还远远不够，使用 Model2 进行开发时不可避免地会重复造轮子，这就大大降低了程序的可维护性和复用性。"}]},{"ID":"20240201213302-kgzpooi","Type":"NodeParagraph","Properties":{"id":"20240201213302-kgzpooi","updated":"20240201213302"},"Children":[{"Type":"NodeText","Data":"于是，很多 JavaWeb 开发相关的 MVC 框架应运而生比如 Struts2，但是 Struts2 比较笨重。"}]},{"ID":"20240201213303-o8cirw7","Type":"NodeParagraph","Properties":{"id":"20240201213303-o8cirw7","updated":"20240201213303"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring MVC 时代"}]},{"ID":"20240201213304-hbz948m","Type":"NodeParagraph","Properties":{"id":"20240201213304-hbz948m","updated":"20240201213304"},"Children":[{"Type":"NodeText","Data":"随着 Spring 轻量级开发框架的流行，Spring 生态圈出现了 Spring MVC 框架， Spring MVC 是当前最优秀的 MVC 框架。相比于 Struts2 ， Spring MVC 使用更加简单和方便，开发效率更高，并且 Spring MVC 运行速度更快。"}]},{"ID":"20240201213305-lo01fcr","Type":"NodeParagraph","Properties":{"id":"20240201213305-lo01fcr","updated":"20240201213305"},"Children":[{"Type":"NodeText","Data":"MVC 是一种设计模式，Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的 Web 层的开发，并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层(控制层，返回数据给前台页面)。"}]},{"ID":"20240201213306-v8ml983","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213306-v8ml983","updated":"20240201213306"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring MVC 的核心组件有哪些？"}]},{"ID":"20240201213307-fki4nld","Type":"NodeParagraph","Properties":{"id":"20240201213307-fki4nld","updated":"20240201213307"},"Children":[{"Type":"NodeText","Data":"记住了下面这些组件，也就记住了 SpringMVC 的工作原理。"}]},{"ID":"20240201213308-n8jvnw4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213308-n8jvnw4","updated":"20240201213308"},"Children":[{"ID":"20240201213309-0c90j7z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213309-0c90j7z","updated":"20240201213309"},"Children":[{"ID":"20240201213310-t9uo18v","Type":"NodeParagraph","Properties":{"id":"20240201213310-t9uo18v","updated":"20240201213310"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"核心的中央处理器"},{"Type":"NodeText","Data":"，负责接收请求、分发，并给予客户端响应。"}]}]},{"ID":"20240201213311-mxpb44u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213311-mxpb44u","updated":"20240201213311"},"Children":[{"ID":"20240201213312-krijmrr","Type":"NodeParagraph","Properties":{"id":"20240201213312-krijmrr","updated":"20240201213312"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理器映射器"},{"Type":"NodeText","Data":"，根据 URL 去匹配查找能处理的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" ，并会将请求涉及到的拦截器和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 一起封装。"}]}]},{"ID":"20240201213313-rdi666g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213313-rdi666g","updated":"20240201213313"},"Children":[{"ID":"20240201213314-j3gz0p5","Type":"NodeParagraph","Properties":{"id":"20240201213314-j3gz0p5","updated":"20240201213314"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"HandlerAdapter"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理器适配器"},{"Type":"NodeText","Data":"，根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" 找到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" ，适配执行对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"；"}]}]},{"ID":"20240201213315-jsyqbdz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213315-jsyqbdz","updated":"20240201213315"},"Children":[{"ID":"20240201213316-5oi30zt","Type":"NodeParagraph","Properties":{"id":"20240201213316-5oi30zt","updated":"20240201213316"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求处理器"},{"Type":"NodeText","Data":"，处理实际请求的处理器。"}]}]},{"ID":"20240201213317-6sjtwud","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213317-6sjtwud","updated":"20240201213317"},"Children":[{"ID":"20240201213318-gamki5k","Type":"NodeParagraph","Properties":{"id":"20240201213318-gamki5k","updated":"20240201213318"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ViewResolver"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"视图解析器"},{"Type":"NodeText","Data":"，根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 响应客户端"}]}]}]},{"ID":"20240201213319-n5ic7v5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213319-n5ic7v5","updated":"20240201213319"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SpringMVC 工作原理了解吗?"}]},{"ID":"20240201213320-9a9ncb4","Type":"NodeParagraph","Properties":{"id":"20240201213320-9a9ncb4","updated":"20240201213320"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring MVC 原理如下图所示："}]},{"ID":"20240201213321-bcg9ci1","Type":"NodeBlockquote","Properties":{"id":"20240201213321-bcg9ci1","updated":"20240201213321"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213322-f3oiikh","Type":"NodeParagraph","Properties":{"id":"20240201213322-f3oiikh","updated":"20240201213322"},"Children":[{"Type":"NodeText","Data":"SpringMVC 工作原理的图解我没有自己画，直接图省事在网上找了一个非常清晰直观的，原出处不明。"}]}]},{"ID":"20240201213323-ihpxs9h","Type":"NodeParagraph","Properties":{"id":"20240201213323-ihpxs9h","updated":"20240201213323"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/de6d2b213f112297298f3e223bf08f28.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213324-g3rlfry","Type":"NodeParagraph","Properties":{"id":"20240201213324-g3rlfry","updated":"20240201213324"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"流程说明（重要）："}]},{"ID":"20240201213325-uj7bhcf","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213325-uj7bhcf","updated":"20240201213325"},"Children":[{"ID":"20240201213326-c6sdmm9","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213326-c6sdmm9","updated":"20240201213326"},"Children":[{"ID":"20240201213327-uyrabhw","Type":"NodeParagraph","Properties":{"id":"20240201213327-uyrabhw","updated":"20240201213327"},"Children":[{"Type":"NodeText","Data":"客户端（浏览器）发送请求， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":"拦截请求。"}]}]},{"ID":"20240201213328-qncz9jz","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213328-qncz9jz","updated":"20240201213328"},"Children":[{"ID":"20240201213329-b4irnu4","Type":"NodeParagraph","Properties":{"id":"20240201213329-b4irnu4","updated":"20240201213329"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 根据请求信息调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" 根据 URL 去匹配查找能处理的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"（也就是我们平常说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 控制器） ，并会将请求涉及到的拦截器和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 一起封装。"}]}]},{"ID":"20240201213330-wwxsy7k","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213330-wwxsy7k","updated":"20240201213330"},"Children":[{"ID":"20240201213331-crdujzc","Type":"NodeParagraph","Properties":{"id":"20240201213331-crdujzc","updated":"20240201213331"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerAdapter"},{"Type":"NodeText","Data":"适配器执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213332-o9eor3w","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213332-o9eor3w","updated":"20240201213332"},"Children":[{"ID":"20240201213333-bhmoo5p","Type":"NodeParagraph","Properties":{"id":"20240201213333-bhmoo5p","updated":"20240201213333"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 完成对用户请求的处理后，会返回一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ModelAndView"},{"Type":"NodeText","Data":" 对象给"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ModelAndView"},{"Type":"NodeText","Data":" 顾名思义，包含了数据模型以及相应的视图的信息。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Model"},{"Type":"NodeText","Data":" 是返回的数据对象，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":" 是个逻辑上的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213334-4xpiorj","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213334-4xpiorj","updated":"20240201213334"},"Children":[{"ID":"20240201213335-9o0gd6a","Type":"NodeParagraph","Properties":{"id":"20240201213335-9o0gd6a","updated":"20240201213335"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ViewResolver"},{"Type":"NodeText","Data":" 会根据逻辑 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":" 查找实际的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213336-oxt8h44","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213336-oxt8h44","updated":"20240201213336"},"Children":[{"ID":"20240201213337-aygsxnk","Type":"NodeParagraph","Properties":{"id":"20240201213337-aygsxnk","updated":"20240201213337"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispaterServlet"},{"Type":"NodeText","Data":" 把返回的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Model"},{"Type":"NodeText","Data":" 传给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":"（视图渲染）。"}]}]},{"ID":"20240201213338-8k5qrfw","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213338-8k5qrfw","updated":"20240201213338"},"Children":[{"ID":"20240201213339-8moq2sx","Type":"NodeParagraph","Properties":{"id":"20240201213339-8moq2sx","updated":"20240201213339"},"Children":[{"Type":"NodeText","Data":"把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":" 返回给请求者（浏览器）"}]}]}]},{"ID":"20240201213340-edql0cv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213340-edql0cv","updated":"20240201213340"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"统一异常处理怎么做？"}]},{"ID":"20240201213341-vxvtc6r","Type":"NodeParagraph","Properties":{"id":"20240201213341-vxvtc6r","updated":"20240201213341"},"Children":[{"Type":"NodeText","Data":"推荐使用注解的方式统一异常处理，具体会使用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ControllerAdvice"},{"Type":"NodeText","Data":" + "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":" 这两个注解 。"}]},{"ID":"20240201213342-mvxrk44","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213342-mvxrk44","updated":"20240201213342"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@ControllerAdvice\n@ResponseBody\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(BaseException.class)\n    public ResponseEntity\u003c?\u003e handleAppException(BaseException ex, HttpServletRequest request) {\n      //......\n    }\n\n    @ExceptionHandler(value = ResourceNotFoundException.class)\n    public ResponseEntity\u003cErrorReponse\u003e handleResourceNotFoundException(ResourceNotFoundException ex, HttpServletRequest request) {\n      //......\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213343-62hdv4r","Type":"NodeParagraph","Properties":{"id":"20240201213343-62hdv4r","updated":"20240201213343"},"Children":[{"Type":"NodeText","Data":"这种异常处理方式下，会给所有或者指定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 织入异常处理的逻辑（AOP），当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 中的方法抛出异常的时候，由被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":" 注解修饰的方法进行处理。"}]},{"ID":"20240201213344-vfa29si","Type":"NodeParagraph","Properties":{"id":"20240201213344-vfa29si","updated":"20240201213344"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExceptionHandlerMethodResolver"},{"Type":"NodeText","Data":" 中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getMappedMethod"},{"Type":"NodeText","Data":" 方法决定了异常具体被哪个被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":" 注解修饰的方法处理异常。"}]},{"ID":"20240201213345-bo4r98a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213345-bo4r98a","updated":"20240201213345"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Nullable\n  private Method getMappedMethod(Class\u003c? extends Throwable\u003e exceptionType) {\n    List\u003cClass\u003c? extends Throwable\u003e\u003e matches = new ArrayList\u003c\u003e();\n    //找到可以处理的所有异常信息。mappedMethods 中存放了异常和处理异常的方法的对应关系\n    for (Class\u003c? extends Throwable\u003e mappedException : this.mappedMethods.keySet()) {\n      if (mappedException.isAssignableFrom(exceptionType)) {\n        matches.add(mappedException);\n      }\n    }\n    // 不为空说明有方法处理异常\n    if (!matches.isEmpty()) {\n      // 按照匹配程度从小到大排序\n      matches.sort(new ExceptionDepthComparator(exceptionType));\n      // 返回处理异常的方法\n      return this.mappedMethods.get(matches.get(0));\n    }\n    else {\n      return null;\n    }\n  }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213346-9pv9z4b","Type":"NodeParagraph","Properties":{"id":"20240201213346-9pv9z4b","updated":"20240201213346"},"Children":[{"Type":"NodeText","Data":"从源代码看出："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"getMappedMethod()"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"会首先找到可以匹配处理异常的所有方法信息，然后对其进行从小到大的排序，最后取最小的那一个匹配的方法(即匹配度最高的那个)。"}]},{"ID":"20240201213347-vscmj8n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213347-vscmj8n","updated":"20240201213347"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 框架中用到了哪些设计模式？"}]},{"ID":"20240201213348-l3j3yr1","Type":"NodeBlockquote","Properties":{"id":"20240201213348-l3j3yr1","updated":"20240201213348"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213349-w2ee5ye","Type":"NodeParagraph","Properties":{"id":"20240201213349-w2ee5ye","updated":"20240201213349"},"Children":[{"Type":"NodeText","Data":"关于下面这些设计模式的详细介绍，可以看我写的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/system-design/framework/spring/spring-design-patterns-summary.html","TextMarkTextContent":"Spring 中的设计模式详解"},{"Type":"NodeText","Data":" 这篇文章。"}]}]},{"ID":"20240201213350-ajzyp9f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213350-ajzyp9f","updated":"20240201213350"},"Children":[{"ID":"20240201213351-4n4frh9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213351-4n4frh9","updated":"20240201213351"},"Children":[{"ID":"20240201213352-q6cdf0u","Type":"NodeParagraph","Properties":{"id":"20240201213352-q6cdf0u","updated":"20240201213352"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"工厂设计模式"},{"Type":"NodeText","Data":" : Spring 使用工厂模式通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 创建 bean 对象。"}]}]},{"ID":"20240201213353-v2oxr7x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213353-v2oxr7x","updated":"20240201213353"},"Children":[{"ID":"20240201213354-2aqfj0s","Type":"NodeParagraph","Properties":{"id":"20240201213354-2aqfj0s","updated":"20240201213354"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"代理设计模式"},{"Type":"NodeText","Data":" : Spring AOP 功能的实现。"}]}]},{"ID":"20240201213355-8n5m8fu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213355-8n5m8fu","updated":"20240201213355"},"Children":[{"ID":"20240201213356-n8mzir1","Type":"NodeParagraph","Properties":{"id":"20240201213356-n8mzir1","updated":"20240201213356"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单例设计模式"},{"Type":"NodeText","Data":" : Spring 中的 Bean 默认都是单例的。"}]}]},{"ID":"20240201213357-tou1nsz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213357-tou1nsz","updated":"20240201213357"},"Children":[{"ID":"20240201213358-uywkrr8","Type":"NodeParagraph","Properties":{"id":"20240201213358-uywkrr8","updated":"20240201213358"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"模板方法模式"},{"Type":"NodeText","Data":" : Spring 中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"jdbcTemplate"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hibernateTemplate"},{"Type":"NodeText","Data":" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。"}]}]},{"ID":"20240201213359-wo6ojtl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213359-wo6ojtl","updated":"20240201213359"},"Children":[{"ID":"20240201213360-51zs51d","Type":"NodeParagraph","Properties":{"id":"20240201213360-51zs51d","updated":"20240201213360"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"包装器设计模式"},{"Type":"NodeText","Data":" : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。"}]}]},{"ID":"20240201213361-b3jcwad","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213361-b3jcwad","updated":"20240201213361"},"Children":[{"ID":"20240201213362-la4jp1x","Type":"NodeParagraph","Properties":{"id":"20240201213362-la4jp1x","updated":"20240201213362"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"观察者模式:"},{"Type":"NodeText","Data":" Spring 事件驱动模型就是观察者模式很经典的一个应用。"}]}]},{"ID":"20240201213363-gygv8l4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213363-gygv8l4","updated":"20240201213363"},"Children":[{"ID":"20240201213364-t6mnya8","Type":"NodeParagraph","Properties":{"id":"20240201213364-t6mnya8","updated":"20240201213364"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器模式"},{"Type":"NodeText","Data":" : Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213365-r0z9qur","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213365-r0z9qur","updated":"20240201213365"},"Children":[{"ID":"20240201213366-y8cs2t4","Type":"NodeParagraph","Properties":{"id":"20240201213366-y8cs2t4","updated":"20240201213366"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213367-623dutj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213367-623dutj","updated":"20240201213367"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务"}]},{"ID":"20240201213368-o2d9rcy","Type":"NodeParagraph","Properties":{"id":"20240201213368-o2d9rcy","updated":"20240201213368"},"Children":[{"Type":"NodeText","Data":"关于 Spring 事务的详细介绍，可以看我写的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/system-design/framework/spring/spring-transaction.html","TextMarkTextContent":"Spring 事务详解"},{"Type":"NodeText","Data":" 这篇文章。"}]},{"ID":"20240201213369-9k09ise","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213369-9k09ise","updated":"20240201213369"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 管理事务的方式有几种？"}]},{"ID":"20240201213370-xgx2bzv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213370-xgx2bzv","updated":"20240201213370"},"Children":[{"ID":"20240201213371-zxry62t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213371-zxry62t","updated":"20240201213371"},"Children":[{"ID":"20240201213372-ivlevkp","Type":"NodeParagraph","Properties":{"id":"20240201213372-ivlevkp","updated":"20240201213372"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编程式事务"},{"Type":"NodeText","Data":"：在代码中硬编码(在分布式系统中推荐使用) : 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionTemplate"},{"Type":"NodeText","Data":"或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionManager"},{"Type":"NodeText","Data":" 手动管理事务，事务范围过大会出现事务未提交导致超时，因此事务要比锁的粒度更小。"}]}]},{"ID":"20240201213373-wpknerw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213373-wpknerw","updated":"20240201213373"},"Children":[{"ID":"20240201213374-6y0l3ei","Type":"NodeParagraph","Properties":{"id":"20240201213374-6y0l3ei","updated":"20240201213374"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"声明式事务"},{"Type":"NodeText","Data":"：在 XML 配置文件中配置或者直接基于注解（单体应用或者简单业务系统推荐使用） : 实际是通过 AOP 实现（基于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的全注解方式使用最多）"}]}]}]},{"ID":"20240201213375-udqxdrc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213375-udqxdrc","updated":"20240201213375"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务中哪几种事务传播行为?"}]},{"ID":"20240201213376-fpx7si3","Type":"NodeParagraph","Properties":{"id":"20240201213376-fpx7si3","updated":"20240201213376"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务传播行为是为了解决业务层方法之间互相调用的事务问题"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213377-s0ay2ec","Type":"NodeParagraph","Properties":{"id":"20240201213377-s0ay2ec","updated":"20240201213377"},"Children":[{"Type":"NodeText","Data":"当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。"}]},{"ID":"20240201213378-kp7tcpc","Type":"NodeParagraph","Properties":{"id":"20240201213378-kp7tcpc","updated":"20240201213378"},"Children":[{"Type":"NodeText","Data":"正确的事务传播行为可能的值如下:"}]},{"ID":"20240201213379-g174n8i","Type":"NodeParagraph","Properties":{"id":"20240201213379-g174n8i","updated":"20240201213379"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_REQUIRED"}]},{"ID":"20240201213380-lqno1wb","Type":"NodeParagraph","Properties":{"id":"20240201213380-lqno1wb","updated":"20240201213380"},"Children":[{"Type":"NodeText","Data":"使用的最多的一个事务传播行为，我们平时经常使用的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":"注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。"}]},{"ID":"20240201213381-spo2g0c","Type":"NodeParagraph","Properties":{"id":"20240201213381-spo2g0c","updated":"20240201213381"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"2.TransactionDefinition.PROPAGATION_REQUIRES_NEW"}]},{"ID":"20240201213382-10vilkw","Type":"NodeParagraph","Properties":{"id":"20240201213382-10vilkw","updated":"20240201213382"},"Children":[{"Type":"NodeText","Data":"创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation.REQUIRES_NEW"},{"Type":"NodeText","Data":"修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。"}]},{"ID":"20240201213383-1ewd23p","Type":"NodeParagraph","Properties":{"id":"20240201213383-1ewd23p","updated":"20240201213383"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NESTED"}]},{"ID":"20240201213384-brizh10","Type":"NodeParagraph","Properties":{"id":"20240201213384-brizh10","updated":"20240201213384"},"Children":[{"Type":"NodeText","Data":"如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_REQUIRED"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213385-ogbygfz","Type":"NodeParagraph","Properties":{"id":"20240201213385-ogbygfz","updated":"20240201213385"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_MANDATORY"}]},{"ID":"20240201213386-dgjjkg9","Type":"NodeParagraph","Properties":{"id":"20240201213386-dgjjkg9","updated":"20240201213386"},"Children":[{"Type":"NodeText","Data":"如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）"}]},{"ID":"20240201213387-biufypv","Type":"NodeParagraph","Properties":{"id":"20240201213387-biufypv","updated":"20240201213387"},"Children":[{"Type":"NodeText","Data":"这个使用的很少。"}]},{"ID":"20240201213388-8oh0u80","Type":"NodeParagraph","Properties":{"id":"20240201213388-8oh0u80","updated":"20240201213388"},"Children":[{"Type":"NodeText","Data":"若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚："}]},{"ID":"20240201213389-zeute3t","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213389-zeute3t","updated":"20240201213389"},"Children":[{"ID":"20240201213390-nb1iopr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213390-nb1iopr","updated":"20240201213390"},"Children":[{"ID":"20240201213391-fmmr7co","Type":"NodeParagraph","Properties":{"id":"20240201213391-fmmr7co","updated":"20240201213391"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_SUPPORTS"},{"Type":"NodeText","Data":": 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。"}]}]},{"ID":"20240201213392-m9ufotc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213392-m9ufotc","updated":"20240201213392"},"Children":[{"ID":"20240201213393-el6uc5j","Type":"NodeParagraph","Properties":{"id":"20240201213393-el6uc5j","updated":"20240201213393"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NOT_SUPPORTED"},{"Type":"NodeText","Data":": 以非事务方式运行，如果当前存在事务，则把当前事务挂起。"}]}]},{"ID":"20240201213394-hhiest9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213394-hhiest9","updated":"20240201213394"},"Children":[{"ID":"20240201213395-d9zltxj","Type":"NodeParagraph","Properties":{"id":"20240201213395-d9zltxj","updated":"20240201213395"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NEVER"},{"Type":"NodeText","Data":": 以非事务方式运行，如果当前存在事务，则抛出异常。"}]}]}]},{"ID":"20240201213396-tvkydcy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213396-tvkydcy","updated":"20240201213396"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务中的隔离级别有哪几种?"}]},{"ID":"20240201213397-esnzs3w","Type":"NodeParagraph","Properties":{"id":"20240201213397-esnzs3w","updated":"20240201213397"},"Children":[{"Type":"NodeText","Data":"和事务传播行为这块一样，为了方便使用，Spring 也相应地定义了一个枚举类："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Isolation"}]},{"ID":"20240201213398-b6gj342","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213398-b6gj342","updated":"20240201213398"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public enum Isolation {\n\n    DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),\n    READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),\n    READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),\n    REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),\n    SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\n    private final int value;\n\n    Isolation(int value) {\n        this.value = value;\n    }\n\n    public int value() {\n        return this.value;\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213399-tbs9nyx","Type":"NodeParagraph","Properties":{"id":"20240201213399-tbs9nyx","updated":"20240201213399"},"Children":[{"Type":"NodeText","Data":"下面我依次对每一种事务隔离级别进行介绍："}]},{"ID":"20240201213400-jgv9306","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213400-jgv9306","updated":"20240201213400"},"Children":[{"ID":"20240201213401-7zuylrv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213401-7zuylrv","updated":"20240201213401"},"Children":[{"ID":"20240201213402-5fxfegz","Type":"NodeParagraph","Properties":{"id":"20240201213402-5fxfegz","updated":"20240201213402"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_DEFAULT"},{"Type":"NodeText","Data":" :使用后端数据库默认的隔离级别，MySQL 默认采用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"REPEATABLE_READ"},{"Type":"NodeText","Data":" 隔离级别 Oracle 默认采用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"READ_COMMITTED"},{"Type":"NodeText","Data":" 隔离级别."}]}]},{"ID":"20240201213403-2fsdx66","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213403-2fsdx66","updated":"20240201213403"},"Children":[{"ID":"20240201213404-0k29ahs","Type":"NodeParagraph","Properties":{"id":"20240201213404-0k29ahs","updated":"20240201213404"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_READ_UNCOMMITTED"},{"Type":"NodeText","Data":" :最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可能会导致脏读、幻读或不可重复读"}]}]},{"ID":"20240201213405-aik4sm0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213405-aik4sm0","updated":"20240201213405"},"Children":[{"ID":"20240201213406-fk1yqs0","Type":"NodeParagraph","Properties":{"id":"20240201213406-fk1yqs0","updated":"20240201213406"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_READ_COMMITTED"},{"Type":"NodeText","Data":" : 允许读取并发事务已经提交的数据，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以阻止脏读，但是幻读或不可重复读仍有可能发生"}]}]},{"ID":"20240201213407-nfwbmeg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213407-nfwbmeg","updated":"20240201213407"},"Children":[{"ID":"20240201213408-wj3h9e7","Type":"NodeParagraph","Properties":{"id":"20240201213408-wj3h9e7","updated":"20240201213408"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_REPEATABLE_READ"},{"Type":"NodeText","Data":" : 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以阻止脏读和不可重复读，但幻读仍有可能发生。"}]}]},{"ID":"20240201213409-s5msi83","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213409-s5msi83","updated":"20240201213409"},"Children":[{"ID":"20240201213410-ulpdu82","Type":"NodeParagraph","Properties":{"id":"20240201213410-ulpdu82","updated":"20240201213410"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_SERIALIZABLE"},{"Type":"NodeText","Data":" : 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"该级别可以防止脏读、不可重复读以及幻读"},{"Type":"NodeText","Data":"。但是这将严重影响程序的性能。通常情况下也不会用到该级别。"}]}]}]},{"ID":"20240201213411-fm6ck5z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213411-fm6ck5z","updated":"20240201213411"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Transactional(rollbackFor = Exception.class)注解了解吗？"}]},{"ID":"20240201213412-9r860us","Type":"NodeParagraph","Properties":{"id":"20240201213412-9r860us","updated":"20240201213412"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Exception"},{"Type":"NodeText","Data":" 分为运行时异常 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":" 和非运行时异常。事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。"}]},{"ID":"20240201213413-4hsyif6","Type":"NodeParagraph","Properties":{"id":"20240201213413-4hsyif6","updated":"20240201213413"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。"}]},{"ID":"20240201213414-ctrkg7q","Type":"NodeParagraph","Properties":{"id":"20240201213414-ctrkg7q","updated":"20240201213414"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解默认回滚策略是只有在遇到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":"(运行时异常) 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Error"},{"Type":"NodeText","Data":" 时才会回滚事务，而不会回滚 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Checked Exception"},{"Type":"NodeText","Data":"（受检查异常）。这是因为 Spring 认为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":"和 Error 是不可预期的错误，而受检异常是可预期的错误，可以通过业务逻辑来处理。"}]},{"ID":"20240201213415-xfxxiky","Type":"NodeParagraph","Properties":{"id":"20240201213415-xfxxiky","updated":"20240201213415"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/spring-transactional-rollbackfor.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213416-1y4jx0f","Type":"NodeParagraph","Properties":{"id":"20240201213416-1y4jx0f","updated":"20240201213416"},"Children":[{"Type":"NodeText","Data":"如果想要修改默认的回滚策略，可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"rollbackFor"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"noRollbackFor"},{"Type":"NodeText","Data":" 属性来指定哪些异常需要回滚，哪些异常不需要回滚。例如，如果想要让所有的异常都回滚事务，可以使用如下的注解："}]},{"ID":"20240201213417-oowq2sa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213417-oowq2sa","updated":"20240201213417"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Transactional(rollbackFor = Exception.class)\npublic void someMethod() {\n// some business logic\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213418-jlxaqny","Type":"NodeParagraph","Properties":{"id":"20240201213418-jlxaqny","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"如果想要让某些特定的异常不回滚事务，可以使用如下的注解："}]},{"ID":"20240201213419-644h3ei","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213419-644h3ei","updated":"20240201213419"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Transactional(noRollbackFor = CustomException.class)\npublic void someMethod() {\n// some business logic\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213420-5j3ecbg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213420-5j3ecbg","updated":"20240201213420"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Data JPA"}]},{"ID":"20240201213421-hoqfvjq","Type":"NodeParagraph","Properties":{"id":"20240201213421-hoqfvjq","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"JPA 重要的是实战，这里仅对小部分知识点进行总结。"}]},{"ID":"20240201213422-skza3xt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213422-skza3xt","updated":"20240201213422"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何使用 JPA 在数据库中非持久化一个字段？"}]},{"ID":"20240201213423-b6qtcho","Type":"NodeParagraph","Properties":{"id":"20240201213423-b6qtcho","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"假如我们有下面一个类："}]},{"ID":"20240201213424-uffr7ua","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213424-uffr7ua","updated":"20240201213424"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Entity(name=\"USER\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"ID\")\n    private Long id;\n\n    @Column(name=\"USER_NAME\")\n    private String userName;\n\n    @Column(name=\"PASSWORD\")\n    private String password;\n\n    private String secrect;\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213425-oc046em","Type":"NodeParagraph","Properties":{"id":"20240201213425-oc046em","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"如果我们想让"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"secrect"},{"Type":"NodeText","Data":" 这个字段不被持久化，也就是不被数据库存储怎么办？我们可以采用下面几种方法："}]},{"ID":"20240201213426-py3ymtf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213426-py3ymtf","updated":"20240201213426"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static String transient1; // not persistent because of static\nfinal String transient2 = \"Satish\"; // not persistent because of final\ntransient String transient3; // not persistent because of transient\n@Transient\nString transient4; // not persistent because of @Transient\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213427-pg82fto","Type":"NodeParagraph","Properties":{"id":"20240201213427-pg82fto","updated":"20240201213427"},"Children":[{"Type":"NodeText","Data":"一般使用后面两种方式比较多，我个人使用注解的方式比较多。"}]},{"ID":"20240201213428-lyw6wgf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213428-lyw6wgf","updated":"20240201213428"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JPA 的审计功能是做什么的？有什么用？"}]},{"ID":"20240201213429-qscdz1j","Type":"NodeParagraph","Properties":{"id":"20240201213429-qscdz1j","updated":"20240201213429"},"Children":[{"Type":"NodeText","Data":"审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时间创建的、最后修改人是谁、最后修改时间是什么时候。"}]},{"ID":"20240201213430-n67lpeu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213430-n67lpeu","updated":"20240201213430"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@MappedSuperclass\n@EntityListeners(value = AuditingEntityListener.class)\npublic abstract class AbstractAuditBase {\n\n    @CreatedDate\n    @Column(updatable = false)\n    @JsonIgnore\n    private Instant createdAt;\n\n    @LastModifiedDate\n    @JsonIgnore\n    private Instant updatedAt;\n\n    @CreatedBy\n    @Column(updatable = false)\n    @JsonIgnore\n    private String createdBy;\n\n    @LastModifiedBy\n    @JsonIgnore\n    private String updatedBy;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213431-21tyxa6","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213431-21tyxa6","updated":"20240201213431"},"Children":[{"ID":"20240201213432-9i6sdle","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213432-9i6sdle","updated":"20240201213432"},"Children":[{"ID":"20240201213433-ixo8ter","Type":"NodeParagraph","Properties":{"id":"20240201213433-ixo8ter","updated":"20240201213433"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@CreatedDate"},{"Type":"NodeText","Data":": 表示该字段为创建时间字段，在这个实体被 insert 的时候，会设置值"}]}]},{"ID":"20240201213434-vmp07pd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213434-vmp07pd","updated":"20240201213434"},"Children":[{"ID":"20240201213435-i49vlzr","Type":"NodeParagraph","Properties":{"id":"20240201213435-i49vlzr","updated":"20240201213435"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@CreatedBy"},{"Type":"NodeText","Data":" :表示该字段为创建人，在这个实体被 insert 的时候，会设置值"}]},{"ID":"20240201213436-zdzoxjl","Type":"NodeParagraph","Properties":{"id":"20240201213436-zdzoxjl","updated":"20240201213436"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@LastModifiedDate"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@LastModifiedBy"},{"Type":"NodeText","Data":"同理。"}]}]}]},{"ID":"20240201213437-haczpev","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213437-haczpev","updated":"20240201213437"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实体之间的关联关系注解有哪些？"}]},{"ID":"20240201213438-4x9h3et","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213438-4x9h3et","updated":"20240201213438"},"Children":[{"ID":"20240201213439-mj103lf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213439-mj103lf","updated":"20240201213439"},"Children":[{"ID":"20240201213440-m3bcpjv","Type":"NodeParagraph","Properties":{"id":"20240201213440-m3bcpjv","updated":"20240201213440"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@OneToOne"},{"Type":"NodeText","Data":" : 一对一。"}]}]},{"ID":"20240201213441-l175xvs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213441-l175xvs","updated":"20240201213441"},"Children":[{"ID":"20240201213442-d87iy04","Type":"NodeParagraph","Properties":{"id":"20240201213442-d87iy04","updated":"20240201213442"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ManyToMany"},{"Type":"NodeText","Data":"：多对多。"}]}]},{"ID":"20240201213443-c9q7hgn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213443-c9q7hgn","updated":"20240201213443"},"Children":[{"ID":"20240201213444-b9ynh65","Type":"NodeParagraph","Properties":{"id":"20240201213444-b9ynh65","updated":"20240201213444"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@OneToMany"},{"Type":"NodeText","Data":" : 一对多。"}]}]},{"ID":"20240201213445-1viv4fe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213445-1viv4fe","updated":"20240201213445"},"Children":[{"ID":"20240201213446-za5aya8","Type":"NodeParagraph","Properties":{"id":"20240201213446-za5aya8","updated":"20240201213446"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ManyToOne"},{"Type":"NodeText","Data":"：多对一。"}]}]}]},{"ID":"20240201213447-l2zocfh","Type":"NodeParagraph","Properties":{"id":"20240201213447-l2zocfh","updated":"20240201213447"},"Children":[{"Type":"NodeText","Data":"利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ManyToOne"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@OneToMany"},{"Type":"NodeText","Data":" 也可以表达多对多的关联关系。"}]},{"ID":"20240201213448-1889lzj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213448-1889lzj","updated":"20240201213448"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Security"}]},{"ID":"20240201213449-4a5khv7","Type":"NodeParagraph","Properties":{"id":"20240201213449-4a5khv7","updated":"20240201213449"},"Children":[{"Type":"NodeText","Data":"Spring Security 重要的是实战，这里仅对小部分知识点进行总结。"}]},{"ID":"20240201213450-molnvpb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213450-molnvpb","updated":"20240201213450"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有哪些控制请求访问权限的方法？"}]},{"ID":"20240201213451-l4c7ybj","Type":"NodeParagraph","Properties":{"id":"20240201213451-l4c7ybj","updated":"20240201213451"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/image-20220728201854641.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213452-agpy03k","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213452-agpy03k","updated":"20240201213452"},"Children":[{"ID":"20240201213453-frzjb3y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213453-frzjb3y","updated":"20240201213453"},"Children":[{"ID":"20240201213454-ryxg8eq","Type":"NodeParagraph","Properties":{"id":"20240201213454-ryxg8eq","updated":"20240201213454"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permitAll()"},{"Type":"NodeText","Data":"：无条件允许任何形式访问，不管你登录还是没有登录。"}]}]},{"ID":"20240201213455-keml1fp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213455-keml1fp","updated":"20240201213455"},"Children":[{"ID":"20240201213456-fnkp6ww","Type":"NodeParagraph","Properties":{"id":"20240201213456-fnkp6ww","updated":"20240201213456"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"anonymous()"},{"Type":"NodeText","Data":"：允许匿名访问，也就是没有登录才可以访问。"}]}]},{"ID":"20240201213457-nty0csm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213457-nty0csm","updated":"20240201213457"},"Children":[{"ID":"20240201213458-38hqn2j","Type":"NodeParagraph","Properties":{"id":"20240201213458-38hqn2j","updated":"20240201213458"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"denyAll()"},{"Type":"NodeText","Data":"：无条件决绝任何形式的访问。"}]}]},{"ID":"20240201213459-wo5p7dc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213459-wo5p7dc","updated":"20240201213459"},"Children":[{"ID":"20240201213460-7ivxxwe","Type":"NodeParagraph","Properties":{"id":"20240201213460-7ivxxwe","updated":"20240201213460"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"authenticated()"},{"Type":"NodeText","Data":"：只允许已认证的用户访问。"}]}]},{"ID":"20240201213461-yw9uric","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213461-yw9uric","updated":"20240201213461"},"Children":[{"ID":"20240201213462-rtaae3k","Type":"NodeParagraph","Properties":{"id":"20240201213462-rtaae3k","updated":"20240201213462"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"fullyAuthenticated()"},{"Type":"NodeText","Data":"：只允许已经登录或者通过 remember-me 登录的用户访问。"}]}]},{"ID":"20240201213463-yty01cg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-yty01cg","updated":"20240201213463"},"Children":[{"ID":"20240201213464-51t8p5h","Type":"NodeParagraph","Properties":{"id":"20240201213464-51t8p5h","updated":"20240201213464"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasRole(String)"},{"Type":"NodeText","Data":" : 只允许指定的角色访问。"}]}]},{"ID":"20240201213465-my5e4z6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-my5e4z6","updated":"20240201213465"},"Children":[{"ID":"20240201213466-2r1holl","Type":"NodeParagraph","Properties":{"id":"20240201213466-2r1holl","updated":"20240201213466"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasAnyRole(String)"},{"Type":"NodeText","Data":" : 指定一个或者多个角色，满足其一的用户即可访问。"}]}]},{"ID":"20240201213467-eso8dza","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213467-eso8dza","updated":"20240201213467"},"Children":[{"ID":"20240201213468-5lzjhtq","Type":"NodeParagraph","Properties":{"id":"20240201213468-5lzjhtq","updated":"20240201213468"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasAuthority(String)"},{"Type":"NodeText","Data":"：只允许具有指定权限的用户访问"}]}]},{"ID":"20240201213469-pujbr5e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-pujbr5e","updated":"20240201213469"},"Children":[{"ID":"20240201213470-p5l7dso","Type":"NodeParagraph","Properties":{"id":"20240201213470-p5l7dso","updated":"20240201213470"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasAnyAuthority(String)"},{"Type":"NodeText","Data":"：指定一个或者多个权限，满足其一的用户即可访问。"}]}]},{"ID":"20240201213471-y7djkz1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-y7djkz1","updated":"20240201213471"},"Children":[{"ID":"20240201213472-k1bejxe","Type":"NodeParagraph","Properties":{"id":"20240201213472-k1bejxe","updated":"20240201213472"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasIpAddress(String)"},{"Type":"NodeText","Data":" : 只允许指定 ip 的用户访问。"}]}]}]},{"ID":"20240201213473-4vf66ql","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213473-4vf66ql","updated":"20240201213473"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"hasRole 和 hasAuthority 有区别吗？"}]},{"ID":"20240201213474-iaxamx6","Type":"NodeParagraph","Properties":{"id":"20240201213474-iaxamx6","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"可以看看松哥的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/GTNOa2k9_n_H0w24upClRw","TextMarkTextContent":"Spring Security 中的 hasRole 和 hasAuthority 有区别吗？"},{"Type":"NodeText","Data":"，介绍的比较详细。"}]},{"ID":"20240201213475-63j2op6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213475-63j2op6","updated":"20240201213475"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何对密码进行加密？"}]},{"ID":"20240201213476-huht8rx","Type":"NodeParagraph","Properties":{"id":"20240201213476-huht8rx","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"如果我们需要保存密码这类敏感数据到数据库的话，需要先加密再保存。"}]},{"ID":"20240201213477-v5oc00m","Type":"NodeParagraph","Properties":{"id":"20240201213477-v5oc00m","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"Spring Security 提供了多种加密算法的实现，开箱即用，非常方便。这些加密算法实现类的父类是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PasswordEncoder"},{"Type":"NodeText","Data":" ，如果你想要自己实现一个加密算法的话，也需要继承 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PasswordEncoder"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213478-y0yiidf","Type":"NodeParagraph","Properties":{"id":"20240201213478-y0yiidf","updated":"20240201213478"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PasswordEncoder"},{"Type":"NodeText","Data":" 接口一共也就 3 个必须实现的方法。"}]},{"ID":"20240201213479-6oqv74n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213479-6oqv74n","updated":"20240201213479"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface PasswordEncoder {\n    // 加密也就是对原始密码进行编码\n    String encode(CharSequence var1);\n    // 比对原始密码和数据库中保存的密码\n    boolean matches(CharSequence var1, String var2);\n    // 判断加密密码是否需要再次进行加密，默认返回 false\n    default boolean upgradeEncoding(String encodedPassword) {\n        return false;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213480-hl9hmi0","Type":"NodeParagraph","Properties":{"id":"20240201213480-hl9hmi0","updated":"20240201213480"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/image-20220728183540954.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213481-2dphxj4","Type":"NodeParagraph","Properties":{"id":"20240201213481-2dphxj4","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"官方推荐使用基于 bcrypt 强哈希函数的加密算法实现类。"}]},{"ID":"20240201213482-i0avrfp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213482-i0avrfp","updated":"20240201213482"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何优雅更换系统使用的加密算法？"}]},{"ID":"20240201213483-1dip6ro","Type":"NodeParagraph","Properties":{"id":"20240201213483-1dip6ro","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"如果我们在开发过程中，突然发现现有的加密算法无法满足我们的需求，需要更换成另外一个加密算法，这个时候应该怎么办呢？"}]},{"ID":"20240201213484-vk146wa","Type":"NodeParagraph","Properties":{"id":"20240201213484-vk146wa","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"推荐的做法是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelegatingPasswordEncoder"},{"Type":"NodeText","Data":" 兼容多种不同的密码加密方案，以适应不同的业务需求。"}]},{"ID":"20240201213485-6kfk6tp","Type":"NodeParagraph","Properties":{"id":"20240201213485-6kfk6tp","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"从名字也能看出来，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelegatingPasswordEncoder"},{"Type":"NodeText","Data":" 其实就是一个代理类，并非是一种全新的加密算法，它做的事情就是代理上面提到的加密算法实现类。在 Spring Security 5.0 之后，默认就是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelegatingPasswordEncoder"},{"Type":"NodeText","Data":" 进行密码加密的。"}]},{"ID":"20240201213486-4itsz5n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213486-4itsz5n","updated":"20240201213486"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213487-nnhzyd9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213487-nnhzyd9","updated":"20240201213487"},"Children":[{"ID":"20240201213488-oex23qs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213488-oex23qs","updated":"20240201213488"},"Children":[{"ID":"20240201213489-atpu0xh","Type":"NodeParagraph","Properties":{"id":"20240201213489-atpu0xh","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"《Spring 技术内幕》"}]}]},{"ID":"20240201213490-k70ju29","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213490-k70ju29","updated":"20240201213490"},"Children":[{"ID":"20240201213491-2vq5zjt","Type":"NodeParagraph","Properties":{"id":"20240201213491-2vq5zjt","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"《从零开始深入学习 Spring》："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/book/6857911863016390663","TextMarkTextContent":"https://juejin.cn/book/6857911863016390663"}]}]},{"ID":"20240201213492-6mhvhpo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213492-6mhvhpo","updated":"20240201213492"},"Children":[{"ID":"20240201213493-z2tfysc","Type":"NodeParagraph","Properties":{"id":"20240201213493-z2tfysc","updated":"20240201213493"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.cnblogs.com/wmyskxz/p/8820371.html","TextMarkTextContent":"http://www.cnblogs.com/wmyskxz/p/8820371.html"}]}]},{"ID":"20240201213494-nff682z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213494-nff682z","updated":"20240201213494"},"Children":[{"ID":"20240201213495-8bj9ke8","Type":"NodeParagraph","Properties":{"id":"20240201213495-8bj9ke8","updated":"20240201213495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.journaldev.com/2696/spring-interview-questions-and-answers","TextMarkTextContent":"https://www.journaldev.com/2696/spring-interview-questions-and-answers"}]}]},{"ID":"20240201213496-zs6eltd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213496-zs6eltd","updated":"20240201213496"},"Children":[{"ID":"20240201213497-jc25w8c","Type":"NodeParagraph","Properties":{"id":"20240201213497-jc25w8c","updated":"20240201213497"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.edureka.co/blog/interview-questions/spring-interview-questions/","TextMarkTextContent":"https://www.edureka.co/blog/interview-questions/spring-interview-questions/"}]}]},{"ID":"20240201213498-87v1xc9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213498-87v1xc9","updated":"20240201213498"},"Children":[{"ID":"20240201213499-5f1xwr1","Type":"NodeParagraph","Properties":{"id":"20240201213499-5f1xwr1","updated":"20240201213499"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/clwydjgs/p/9317849.html","TextMarkTextContent":"https://www.cnblogs.com/clwydjgs/p/9317849.html"}]}]},{"ID":"20240201213500-h0hfolv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213500-h0hfolv","updated":"20240201213500"},"Children":[{"ID":"20240201213501-ojhnb65","Type":"NodeParagraph","Properties":{"id":"20240201213501-ojhnb65","updated":"20240201213501"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://howtodoinjava.com/interview-questions/top-spring-interview-questions-with-answers/","TextMarkTextContent":"https://howtodoinjava.com/interview-questions/top-spring-interview-questions-with-answers/"}]}]},{"ID":"20240201213502-1wmq5j5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-1wmq5j5","updated":"20240201213502"},"Children":[{"ID":"20240201213503-zqwfujw","Type":"NodeParagraph","Properties":{"id":"20240201213503-zqwfujw","updated":"20240201213503"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.tomaszezula.com/2014/02/09/spring-series-part-5-component-vs-bean/","TextMarkTextContent":"http://www.tomaszezula.com/2014/02/09/spring-series-part-5-component-vs-bean/"}]}]},{"ID":"20240201213504-pfxck9x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-pfxck9x","updated":"20240201213504"},"Children":[{"ID":"20240201213505-prhasif","Type":"NodeParagraph","Properties":{"id":"20240201213505-prhasif","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://stackoverflow.com/questions/34172888/difference-between-bean-and-autowired","TextMarkTextContent":"https://stackoverflow.com/questions/34172888/difference-between-bean-and-autowired"}]}]}]},{"ID":"20240201213506-pgisma0","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213506-pgisma0","updated":"20240201213506"}}]}