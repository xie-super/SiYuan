{"ID":"20240201213618-zbeuh7q","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213618-zbeuh7q","title":"spring-boot-auto-assembly-principles","updated":"20240201213618"},"Children":[{"ID":"20240201213619-jgprmnd","Type":"NodeThematicBreak","Properties":{"id":"20240201213619-jgprmnd","updated":"20240201213619"}},{"ID":"20240201213620-91yhiy0","Type":"NodeParagraph","Properties":{"id":"20240201213620-91yhiy0","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"title: SpringBoot 自动装配原理详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 框架"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213621-8r3n05q","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-8r3n05q","updated":"20240201213621"},"Children":[{"ID":"20240201213622-wweqcf1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-wweqcf1","updated":"20240201213622"},"Children":[{"ID":"20240201213623-bp9a0jr","Type":"NodeParagraph","Properties":{"id":"20240201213623-bp9a0jr","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"SpringBoot"}]}]}]},{"ID":"20240201213624-y6beozi","Type":"NodeThematicBreak","Properties":{"id":"20240201213624-y6beozi","updated":"20240201213624"}},{"ID":"20240201213625-pnixowa","Type":"NodeBlockquote","Properties":{"id":"20240201213625-pnixowa","updated":"20240201213625"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213626-254t6yb","Type":"NodeParagraph","Properties":{"id":"20240201213626-254t6yb","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"作者："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Miki-byte-1024","TextMarkTextContent":"Miki-byte-1024"},{"Type":"NodeText","Data":" \u0026 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb","TextMarkTextContent":"Snailclimb"}]}]},{"ID":"20240201213627-d0iytmz","Type":"NodeParagraph","Properties":{"id":"20240201213627-d0iytmz","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"每次问到 Spring Boot， 面试官非常喜欢问这个问题：“讲述一下 SpringBoot 自动装配原理？”。"}]},{"ID":"20240201213628-49ys64x","Type":"NodeParagraph","Properties":{"id":"20240201213628-49ys64x","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"我觉得我们可以从以下几个方面回答："}]},{"ID":"20240201213629-6hmttp9","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213629-6hmttp9","updated":"20240201213629"},"Children":[{"ID":"20240201213630-i2ldo4f","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213630-i2ldo4f","updated":"20240201213630"},"Children":[{"ID":"20240201213631-6leij8c","Type":"NodeParagraph","Properties":{"id":"20240201213631-6leij8c","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"什么是 SpringBoot 自动装配？"}]}]},{"ID":"20240201213632-c0d4wkj","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213632-c0d4wkj","updated":"20240201213632"},"Children":[{"ID":"20240201213633-2cvfa1x","Type":"NodeParagraph","Properties":{"id":"20240201213633-2cvfa1x","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"SpringBoot 是如何实现自动装配的？如何实现按需加载？"}]}]},{"ID":"20240201213634-g7b32l1","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213634-g7b32l1","updated":"20240201213634"},"Children":[{"ID":"20240201213635-kfa1384","Type":"NodeParagraph","Properties":{"id":"20240201213635-kfa1384","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"如何实现一个 Starter？"}]}]}]},{"ID":"20240201213636-duq974z","Type":"NodeParagraph","Properties":{"id":"20240201213636-duq974z","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"篇幅问题，这篇文章并没有深入，小伙伴们也可以直接使用 debug 的方式去看看 SpringBoot 自动装配部分的源代码。"}]},{"ID":"20240201213637-4h4wv1h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213637-4h4wv1h","updated":"20240201213637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"前言"}]},{"ID":"20240201213638-sclm84m","Type":"NodeParagraph","Properties":{"id":"20240201213638-sclm84m","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"使用过 Spring 的小伙伴，一定有被 XML 配置统治的恐惧。即使 Spring 后面引入了基于注解的配置，我们在开启某些 Spring 特性或者引入第三方依赖的时候，还是需要用 XML 或 Java 进行显式配置。"}]},{"ID":"20240201213639-hkwxdg4","Type":"NodeParagraph","Properties":{"id":"20240201213639-hkwxdg4","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"举个例子。没有 Spring Boot 的时候，我们写一个 RestFul Web 服务，还首先需要进行如下配置。"}]},{"ID":"20240201213640-84ob18m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213640-84ob18m","updated":"20240201213640"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class RESTConfiguration\n{\n    @Bean\n    public View jsonTemplate() {\n        MappingJackson2JsonView view = new MappingJackson2JsonView();\n        view.setPrettyPrint(true);\n        return view;\n    }\n\n    @Bean\n    public ViewResolver viewResolver() {\n        return new BeanNameViewResolver();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213641-vqea0t3","Type":"NodeParagraph","Properties":{"id":"20240201213641-vqea0t3","updated":"20240201213641"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"spring-servlet.xml"}]},{"ID":"20240201213642-wv5ryu5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213642-wv5ryu5","updated":"20240201213642"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cbeans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context/ http://www.springframework.org/schema/context/spring-context.xsd\n    http://www.springframework.org/schema/mvc/ http://www.springframework.org/schema/mvc/spring-mvc.xsd\"\u003e\n\n    \u003ccontext:component-scan base-package=\"com.howtodoinjava.demo\" /\u003e\n    \u003cmvc:annotation-driven /\u003e\n\n    \u003c!-- JSON Support --\u003e\n    \u003cbean name=\"viewResolver\" class=\"org.springframework.web.servlet.view.BeanNameViewResolver\"/\u003e\n    \u003cbean name=\"jsonTemplate\" class=\"org.springframework.web.servlet.view.json.MappingJackson2JsonView\"/\u003e\n\n\u003c/beans\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213643-x6k1hy9","Type":"NodeParagraph","Properties":{"id":"20240201213643-x6k1hy9","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"但是，Spring Boot 项目，我们只需要添加相关依赖，无需配置，通过启动下面的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法即可。"}]},{"ID":"20240201213644-1pxwgin","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213644-1pxwgin","updated":"20240201213644"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213645-e3tg4nq","Type":"NodeParagraph","Properties":{"id":"20240201213645-e3tg4nq","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"并且，我们通过 Spring Boot 的全局配置文件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"application.properties"},{"Type":"NodeText","Data":"或"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"application.yml"},{"Type":"NodeText","Data":"即可对项目进行设置比如更换端口号，配置 JPA 属性等等。"}]},{"ID":"20240201213646-br8dhzg","Type":"NodeParagraph","Properties":{"id":"20240201213646-br8dhzg","updated":"20240201213646"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么 Spring Boot 使用起来这么酸爽呢？"},{"Type":"NodeText","Data":" 这得益于其自动装配。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"自动装配可以说是 Spring Boot 的核心，那究竟什么是自动装配呢？"}]},{"ID":"20240201213647-gn7ckbk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213647-gn7ckbk","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 SpringBoot 自动装配？"}]},{"ID":"20240201213648-fq9cwqs","Type":"NodeParagraph","Properties":{"id":"20240201213648-fq9cwqs","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"我们现在提到自动装配的时候，一般会和 Spring Boot 联系在一起。但是，实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化。"}]},{"ID":"20240201213649-im6z1vi","Type":"NodeBlockquote","Properties":{"id":"20240201213649-im6z1vi","updated":"20240201213649"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213650-nkcq44b","Type":"NodeParagraph","Properties":{"id":"20240201213650-nkcq44b","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"},{"Type":"NodeText","Data":"文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。"}]}]},{"ID":"20240201213651-1jkwkip","Type":"NodeParagraph","Properties":{"id":"20240201213651-1jkwkip","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"没有 Spring Boot 的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，Spring Boot 中，我们直接引入一个 starter 即可。比如你想要在项目中使用 redis 的话，直接在项目中引入对应的 starter 即可。"}]},{"ID":"20240201213652-d3em387","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213652-d3em387","updated":"20240201213652"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cdependency\u003e\n    \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n    \u003cartifactId\u003espring-boot-starter-data-redis\u003c/artifactId\u003e\n\u003c/dependency\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213653-406k0xy","Type":"NodeParagraph","Properties":{"id":"20240201213653-406k0xy","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"引入 starter 之后，我们通过少量注解和一些简单的配置就能使用第三方组件提供的功能了。"}]},{"ID":"20240201213654-5nxq7wn","Type":"NodeParagraph","Properties":{"id":"20240201213654-5nxq7wn","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"在我看来，自动装配可以简单理解为："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过注解或者一些简单的配置就能在 Spring Boot 的帮助下实现某块功能。"}]},{"ID":"20240201213655-y8fjilt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213655-y8fjilt","updated":"20240201213655"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"SpringBoot 是如何实现自动装配的？"}]},{"ID":"20240201213656-n37x5xf","Type":"NodeParagraph","Properties":{"id":"20240201213656-n37x5xf","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"我们先看一下 SpringBoot 的核心注解 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SpringBootApplication"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213657-c2cq5fd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213657-c2cq5fd","updated":"20240201213657"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n\u003c1.\u003e@SpringBootConfiguration\n\u003c2.\u003e@ComponentScan\n\u003c3.\u003e@EnableAutoConfiguration\npublic @interface SpringBootApplication {\n\n}\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Configuration //实际上它也是一个配置类\npublic @interface SpringBootConfiguration {\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213658-z1ckavr","Type":"NodeParagraph","Properties":{"id":"20240201213658-z1ckavr","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"大概可以把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@SpringBootApplication"},{"Type":"NodeText","Data":"看作是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Configuration"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@EnableAutoConfiguration"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":" 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是："}]},{"ID":"20240201213659-i86p0dd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-i86p0dd","updated":"20240201213659"},"Children":[{"ID":"20240201213660-8gslrhn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213660-8gslrhn","updated":"20240201213660"},"Children":[{"ID":"20240201213661-9twwf2s","Type":"NodeParagraph","Properties":{"id":"20240201213661-9twwf2s","updated":"20240201213661"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@EnableAutoConfiguration"},{"Type":"NodeText","Data":"：启用 SpringBoot 的自动配置机制"}]}]},{"ID":"20240201213662-92c9snu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-92c9snu","updated":"20240201213662"},"Children":[{"ID":"20240201213663-cx14ctz","Type":"NodeParagraph","Properties":{"id":"20240201213663-cx14ctz","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Configuration"},{"Type":"NodeText","Data":"：允许在上下文中注册额外的 bean 或导入其他配置类"}]}]},{"ID":"20240201213664-mxrhro2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-mxrhro2","updated":"20240201213664"},"Children":[{"ID":"20240201213665-23s3ree","Type":"NodeParagraph","Properties":{"id":"20240201213665-23s3ree","updated":"20240201213665"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"：扫描被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" ("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Service"},{"Type":"NodeText","Data":","},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Controller"},{"Type":"NodeText","Data":")注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TypeExcludeFilter"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AutoConfigurationExcludeFilter"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213666-ubvq1uw","Type":"NodeParagraph","Properties":{"id":"20240201213666-ubvq1uw","updated":"20240201213666"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/bcc73490afbe4c6ba62acde6a94ffdfd~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213667-q2yjwkq","Type":"NodeParagraph","Properties":{"id":"20240201213667-q2yjwkq","updated":"20240201213667"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@EnableAutoConfiguration"},{"Type":"NodeText","Data":" 是实现自动装配的重要注解，我们以这个注解入手。"}]},{"ID":"20240201213668-sjdtz5m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213668-sjdtz5m","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@EnableAutoConfiguration:实现自动装配的核心注解"}]},{"ID":"20240201213669-bz9zcfq","Type":"NodeParagraph","Properties":{"id":"20240201213669-bz9zcfq","updated":"20240201213669"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EnableAutoConfiguration"},{"Type":"NodeText","Data":" 只是一个简单地注解，自动装配核心功能的实现实际是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AutoConfigurationImportSelector"},{"Type":"NodeText","Data":"类。"}]},{"ID":"20240201213670-dgdq3mj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213670-dgdq3mj","updated":"20240201213670"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage //作用：将main包下的所有组件注册到容器中\n@Import({AutoConfigurationImportSelector.class}) //加载自动装配类 xxxAutoconfiguration\npublic @interface EnableAutoConfiguration {\n    String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n    Class\u003c?\u003e[] exclude() default {};\n\n    String[] excludeName() default {};\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213671-e11omwk","Type":"NodeParagraph","Properties":{"id":"20240201213671-e11omwk","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"我们现在重点分析下"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AutoConfigurationImportSelector"},{"Type":"NodeText","Data":" 类到底做了什么？"}]},{"ID":"20240201213672-w04z4ag","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213672-w04z4ag","updated":"20240201213672"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AutoConfigurationImportSelector:加载自动装配类"}]},{"ID":"20240201213673-881kq5i","Type":"NodeParagraph","Properties":{"id":"20240201213673-881kq5i","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AutoConfigurationImportSelector"},{"Type":"NodeText","Data":"类的继承体系如下："}]},{"ID":"20240201213674-9mwshwr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213674-9mwshwr","updated":"20240201213674"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n\n}\n\npublic interface DeferredImportSelector extends ImportSelector {\n\n}\n\npublic interface ImportSelector {\n    String[] selectImports(AnnotationMetadata var1);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213675-nstu7az","Type":"NodeParagraph","Properties":{"id":"20240201213675-nstu7az","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"可以看出，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AutoConfigurationImportSelector"},{"Type":"NodeText","Data":" 类实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ImportSelector"},{"Type":"NodeText","Data":"接口，也就实现了这个接口中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"selectImports"},{"Type":"NodeText","Data":"方法，该方法主要用于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213676-7yqxwkn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213676-7yqxwkn","updated":"20240201213676"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final String[] NO_IMPORTS = new String[0];\n\npublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n        // \u003c1\u003e.判断自动装配开关是否打开\n        if (!this.isEnabled(annotationMetadata)) {\n            return NO_IMPORTS;\n        } else {\n          //\u003c2\u003e.获取所有需要装配的bean\n            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);\n            return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n        }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213677-oyfj37c","Type":"NodeParagraph","Properties":{"id":"20240201213677-oyfj37c","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"这里我们需要重点关注一下"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getAutoConfigurationEntry()"},{"Type":"NodeText","Data":"方法，这个方法主要负责加载自动配置类的。"}]},{"ID":"20240201213678-dknmptp","Type":"NodeParagraph","Properties":{"id":"20240201213678-dknmptp","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"该方法调用链如下："}]},{"ID":"20240201213679-3w2gun8","Type":"NodeParagraph","Properties":{"id":"20240201213679-3w2gun8","updated":"20240201213679"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/3c1200712655443ca4b38500d615bb70~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213680-6j3lxxr","Type":"NodeParagraph","Properties":{"id":"20240201213680-6j3lxxr","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"现在我们结合"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getAutoConfigurationEntry()"},{"Type":"NodeText","Data":"的源码来详细分析一下："}]},{"ID":"20240201213681-7bv785k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213681-7bv785k","updated":"20240201213681"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final AutoConfigurationEntry EMPTY_ENTRY = new AutoConfigurationEntry();\n\nAutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {\n        //\u003c1\u003e.\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            //\u003c2\u003e.\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            //\u003c3\u003e.\n            List\u003cString\u003e configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            //\u003c4\u003e.\n            configurations = this.removeDuplicates(configurations);\n            Set\u003cString\u003e exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.filter(configurations, autoConfigurationMetadata);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213682-b529ylm","Type":"NodeParagraph","Properties":{"id":"20240201213682-b529ylm","updated":"20240201213682"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 1 步"},{"Type":"NodeText","Data":":"}]},{"ID":"20240201213683-xf2ex83","Type":"NodeParagraph","Properties":{"id":"20240201213683-xf2ex83","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"判断自动装配开关是否打开。默认"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"spring.boot.enableautoconfiguration=true"},{"Type":"NodeText","Data":"，可在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"application.properties"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"application.yml"},{"Type":"NodeText","Data":" 中设置"}]},{"ID":"20240201213684-rr76z8z","Type":"NodeParagraph","Properties":{"id":"20240201213684-rr76z8z","updated":"20240201213684"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/77aa6a3727ea4392870f5cccd09844ab~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213685-juhf8ja","Type":"NodeParagraph","Properties":{"id":"20240201213685-juhf8ja","updated":"20240201213685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 2 步"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213686-jjjxjg2","Type":"NodeParagraph","Properties":{"id":"20240201213686-jjjxjg2","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"用于获取"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EnableAutoConfiguration"},{"Type":"NodeText","Data":"注解中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"exclude"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"excludeName"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213687-un41x9h","Type":"NodeParagraph","Properties":{"id":"20240201213687-un41x9h","updated":"20240201213687"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/3d6ec93bbda1453aa08c52b49516c05a~tplv-k3u1fbpfcp-zoom-1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213688-zrk41q7","Type":"NodeParagraph","Properties":{"id":"20240201213688-zrk41q7","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 3 步"}]},{"ID":"20240201213689-h5uybsq","Type":"NodeParagraph","Properties":{"id":"20240201213689-h5uybsq","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"获取需要自动装配的所有配置类，读取"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"}]},{"ID":"20240201213690-443s5kr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213690-443s5kr","updated":"20240201213690"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213691-uvir7uc","Type":"NodeParagraph","Properties":{"id":"20240201213691-uvir7uc","updated":"20240201213691"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/58c51920efea4757aa1ec29c6d5f9e36~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213692-mxuek84","Type":"NodeParagraph","Properties":{"id":"20240201213692-mxuek84","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"从下图可以看到这个文件的配置内容都被我们读取到了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XXXAutoConfiguration"},{"Type":"NodeText","Data":"的作用就是按需加载组件。"}]},{"ID":"20240201213693-sixr97t","Type":"NodeParagraph","Properties":{"id":"20240201213693-sixr97t","updated":"20240201213693"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/94d6e1a060ac41db97043e1758789026~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213694-8l0c8rg","Type":"NodeParagraph","Properties":{"id":"20240201213694-8l0c8rg","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"不光是这个依赖下的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"},{"Type":"NodeText","Data":"被读取到，所有 Spring Boot Starter 下的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"},{"Type":"NodeText","Data":"都会被读取到。"}]},{"ID":"20240201213695-8blk773","Type":"NodeParagraph","Properties":{"id":"20240201213695-8blk773","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"所以，你可以清楚滴看到， druid 数据库连接池的 Spring Boot Starter 就创建了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"},{"Type":"NodeText","Data":"文件。"}]},{"ID":"20240201213696-0rhuuu1","Type":"NodeParagraph","Properties":{"id":"20240201213696-0rhuuu1","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"如果，我们自己要创建一个 Spring Boot Starter，这一步是必不可少的。"}]},{"ID":"20240201213697-31s53j4","Type":"NodeParagraph","Properties":{"id":"20240201213697-31s53j4","updated":"20240201213697"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/68fa66aeee474b0385f94d23bcfe1745~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213698-azz75vu","Type":"NodeParagraph","Properties":{"id":"20240201213698-azz75vu","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 4 步"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213699-pvaw1a4","Type":"NodeParagraph","Properties":{"id":"20240201213699-pvaw1a4","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"到这里可能面试官会问你:“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"spring.factories"},{"Type":"NodeText","Data":"中这么多配置，每次启动都要全部加载么？”。"}]},{"ID":"20240201213700-cum40ii","Type":"NodeParagraph","Properties":{"id":"20240201213700-cum40ii","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"很明显，这是不现实的。我们 debug 到后面你会发现，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"configurations"},{"Type":"NodeText","Data":" 的值变小了。"}]},{"ID":"20240201213701-hf7ju8g","Type":"NodeParagraph","Properties":{"id":"20240201213701-hf7ju8g","updated":"20240201213701"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/267f8231ae2e48d982154140af6437b0~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213702-1i59g0a","Type":"NodeParagraph","Properties":{"id":"20240201213702-1i59g0a","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"因为，这一步有经历了一遍筛选，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnXXX"},{"Type":"NodeText","Data":" 中的所有条件都满足，该类才会生效。"}]},{"ID":"20240201213703-m65ctsl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213703-m65ctsl","updated":"20240201213703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\n// 检查相关的类：RabbitTemplate 和 Channel是否存在\n// 存在才会加载\n@ConditionalOnClass({ RabbitTemplate.class, Channel.class })\n@EnableConfigurationProperties(RabbitProperties.class)\n@Import(RabbitAnnotationDrivenConfiguration.class)\npublic class RabbitAutoConfiguration {\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213704-req6o4f","Type":"NodeParagraph","Properties":{"id":"20240201213704-req6o4f","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"有兴趣的童鞋可以详细了解下 Spring Boot 提供的条件注解"}]},{"ID":"20240201213705-fwi3yji","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-fwi3yji","updated":"20240201213705"},"Children":[{"ID":"20240201213706-60axg0h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-60axg0h","updated":"20240201213706"},"Children":[{"ID":"20240201213707-hrmy6jk","Type":"NodeParagraph","Properties":{"id":"20240201213707-hrmy6jk","updated":"20240201213707"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnBean"},{"Type":"NodeText","Data":"：当容器里有指定 Bean 的条件下"}]}]},{"ID":"20240201213708-kd0bthc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-kd0bthc","updated":"20240201213708"},"Children":[{"ID":"20240201213709-xdgwv3e","Type":"NodeParagraph","Properties":{"id":"20240201213709-xdgwv3e","updated":"20240201213709"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnMissingBean"},{"Type":"NodeText","Data":"：当容器里没有指定 Bean 的情况下"}]}]},{"ID":"20240201213710-e2rxklw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213710-e2rxklw","updated":"20240201213710"},"Children":[{"ID":"20240201213711-dljosp9","Type":"NodeParagraph","Properties":{"id":"20240201213711-dljosp9","updated":"20240201213711"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnSingleCandidate"},{"Type":"NodeText","Data":"：当指定 Bean 在容器中只有一个，或者虽然有多个但是指定首选 Bean"}]}]},{"ID":"20240201213712-gwvmrdd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-gwvmrdd","updated":"20240201213712"},"Children":[{"ID":"20240201213713-km9xizh","Type":"NodeParagraph","Properties":{"id":"20240201213713-km9xizh","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnClass"},{"Type":"NodeText","Data":"：当类路径下有指定类的条件下"}]}]},{"ID":"20240201213714-bwc6c5e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213714-bwc6c5e","updated":"20240201213714"},"Children":[{"ID":"20240201213715-cx3rjhu","Type":"NodeParagraph","Properties":{"id":"20240201213715-cx3rjhu","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnMissingClass"},{"Type":"NodeText","Data":"：当类路径下没有指定类的条件下"}]}]},{"ID":"20240201213716-1hee2fl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213716-1hee2fl","updated":"20240201213716"},"Children":[{"ID":"20240201213717-531hu60","Type":"NodeParagraph","Properties":{"id":"20240201213717-531hu60","updated":"20240201213717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnProperty"},{"Type":"NodeText","Data":"：指定的属性是否有指定的值"}]}]},{"ID":"20240201213718-84rfw6e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-84rfw6e","updated":"20240201213718"},"Children":[{"ID":"20240201213719-pt6w76t","Type":"NodeParagraph","Properties":{"id":"20240201213719-pt6w76t","updated":"20240201213719"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnResource"},{"Type":"NodeText","Data":"：类路径是否有指定的值"}]}]},{"ID":"20240201213720-9wveccy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213720-9wveccy","updated":"20240201213720"},"Children":[{"ID":"20240201213721-sev15v7","Type":"NodeParagraph","Properties":{"id":"20240201213721-sev15v7","updated":"20240201213721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnExpression"},{"Type":"NodeText","Data":"：基于 SpEL 表达式作为判断条件"}]}]},{"ID":"20240201213722-x7bdrs4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213722-x7bdrs4","updated":"20240201213722"},"Children":[{"ID":"20240201213723-nqk0436","Type":"NodeParagraph","Properties":{"id":"20240201213723-nqk0436","updated":"20240201213723"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnJava"},{"Type":"NodeText","Data":"：基于 Java 版本作为判断条件"}]}]},{"ID":"20240201213724-tg2nw2s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213724-tg2nw2s","updated":"20240201213724"},"Children":[{"ID":"20240201213725-ubirvoc","Type":"NodeParagraph","Properties":{"id":"20240201213725-ubirvoc","updated":"20240201213725"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnJndi"},{"Type":"NodeText","Data":"：在 JNDI 存在的条件下差在指定的位置"}]}]},{"ID":"20240201213726-wann88b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213726-wann88b","updated":"20240201213726"},"Children":[{"ID":"20240201213727-t9ridso","Type":"NodeParagraph","Properties":{"id":"20240201213727-t9ridso","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnNotWebApplication"},{"Type":"NodeText","Data":"：当前项目不是 Web 项目的条件下"}]}]},{"ID":"20240201213728-lm0ilfb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213728-lm0ilfb","updated":"20240201213728"},"Children":[{"ID":"20240201213729-0lrd0n4","Type":"NodeParagraph","Properties":{"id":"20240201213729-0lrd0n4","updated":"20240201213729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ConditionalOnWebApplication"},{"Type":"NodeText","Data":"：当前项目是 Web 项 目的条件下"}]}]}]},{"ID":"20240201213730-53qg727","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213730-53qg727","updated":"20240201213730"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何实现一个 Starter"}]},{"ID":"20240201213731-9kg2xcy","Type":"NodeParagraph","Properties":{"id":"20240201213731-9kg2xcy","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"光说不练假把式，现在就来撸一个 starter，实现自定义线程池"}]},{"ID":"20240201213732-s47l5pq","Type":"NodeParagraph","Properties":{"id":"20240201213732-s47l5pq","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"第一步，创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"threadpool-spring-boot-starter"},{"Type":"NodeText","Data":"工程"}]},{"ID":"20240201213733-n481vda","Type":"NodeParagraph","Properties":{"id":"20240201213733-n481vda","updated":"20240201213733"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/1ff0ebe7844f40289eb60213af72c5a6~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213734-mtclhtk","Type":"NodeParagraph","Properties":{"id":"20240201213734-mtclhtk","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"第二步，引入 Spring Boot 相关依赖"}]},{"ID":"20240201213735-gakas2e","Type":"NodeParagraph","Properties":{"id":"20240201213735-gakas2e","updated":"20240201213735"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/5e14254276604f87b261e5a80a354cc0~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213736-06jqbwe","Type":"NodeParagraph","Properties":{"id":"20240201213736-06jqbwe","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"第三步，创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolAutoConfiguration"}]},{"ID":"20240201213737-tvui633","Type":"NodeParagraph","Properties":{"id":"20240201213737-tvui633","updated":"20240201213737"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/1843f1d12c5649fba85fd7b4e4a59e39~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213738-gh14xed","Type":"NodeParagraph","Properties":{"id":"20240201213738-gh14xed","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"第四步，在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"threadpool-spring-boot-starter"},{"Type":"NodeText","Data":"工程的 resources 包下创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"},{"Type":"NodeText","Data":"文件"}]},{"ID":"20240201213739-h7wiys8","Type":"NodeParagraph","Properties":{"id":"20240201213739-h7wiys8","updated":"20240201213739"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/97b738321f1542ea8140484d6aaf0728~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213740-e5x6y3u","Type":"NodeParagraph","Properties":{"id":"20240201213740-e5x6y3u","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"最后新建工程引入"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"threadpool-spring-boot-starter"}]},{"ID":"20240201213741-pfjwuo8","Type":"NodeParagraph","Properties":{"id":"20240201213741-pfjwuo8","updated":"20240201213741"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/edcdd8595a024aba85b6bb20d0e3fed4~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213742-8gtntlu","Type":"NodeParagraph","Properties":{"id":"20240201213742-8gtntlu","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"测试通过！！！"}]},{"ID":"20240201213743-42laamo","Type":"NodeParagraph","Properties":{"id":"20240201213743-42laamo","updated":"20240201213743"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/framework/spring/9a265eea4de742a6bbdbbaa75f437307~tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213744-ide8ipa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213744-ide8ipa","updated":"20240201213744"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213745-8bbixpf","Type":"NodeParagraph","Properties":{"id":"20240201213745-8bbixpf","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"Spring Boot 通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@EnableAutoConfiguration"},{"Type":"NodeText","Data":"开启自动装配，通过 SpringFactoriesLoader 最终加载"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/spring.factories"},{"Type":"NodeText","Data":"中的自动配置类实现自动装配，自动配置类其实就是通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Conditional"},{"Type":"NodeText","Data":"按需加载的配置类，想要其生效必须引入"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"spring-boot-starter-xxx"},{"Type":"NodeText","Data":"包实现起步依赖"}]},{"ID":"20240201213746-d6s1ai6","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213746-d6s1ai6","updated":"20240201213746"}}]}