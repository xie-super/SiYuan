{"ID":"20240201213536-xxiuqu2","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213536-xxiuqu2","title":"spring-design-patterns-summary","updated":"20240201213536"},"Children":[{"ID":"20240201213537-wl5uzkv","Type":"NodeThematicBreak","Properties":{"id":"20240201213537-wl5uzkv","updated":"20240201213537"}},{"ID":"20240201213538-ydet0qj","Type":"NodeParagraph","Properties":{"id":"20240201213538-ydet0qj","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"title: Spring 中的设计模式详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 框架"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213539-rv6qdfb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213539-rv6qdfb","updated":"20240201213539"},"Children":[{"ID":"20240201213540-1qour2x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-1qour2x","updated":"20240201213540"},"Children":[{"ID":"20240201213541-ju27cvj","Type":"NodeParagraph","Properties":{"id":"20240201213541-ju27cvj","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"Spring"}]}]}]},{"ID":"20240201213542-u24n5z6","Type":"NodeThematicBreak","Properties":{"id":"20240201213542-u24n5z6","updated":"20240201213542"}},{"ID":"20240201213543-87zkc9n","Type":"NodeParagraph","Properties":{"id":"20240201213543-87zkc9n","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"“JDK 中用到了哪些设计模式? Spring 中用到了哪些设计模式? ”这两个问题，在面试中比较常见。"}]},{"ID":"20240201213544-o4mofal","Type":"NodeParagraph","Properties":{"id":"20240201213544-o4mofal","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"我在网上搜索了一下关于 Spring 中设计模式的讲解几乎都是千篇一律，而且大部分都年代久远。所以，花了几天时间自己总结了一下。"}]},{"ID":"20240201213545-920v7td","Type":"NodeParagraph","Properties":{"id":"20240201213545-920v7td","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"由于我的个人能力有限，文中如有任何错误各位都可以指出。另外，文章篇幅有限，对于设计模式以及一些源码的解读我只是一笔带过，这篇文章的主要目的是回顾一下 Spring 中的设计模式。"}]},{"ID":"20240201213546-bof5gfx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213546-bof5gfx","updated":"20240201213546"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"控制反转(IoC)和依赖注入(DI)"}]},{"ID":"20240201213547-euf8fvj","Type":"NodeParagraph","Properties":{"id":"20240201213547-euf8fvj","updated":"20240201213547"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"IoC(Inversion of Control,控制反转)"},{"Type":"NodeText","Data":" 是 Spring 中一个非常非常重要的概念，它不是什么技术，而是一种解耦的设计思想。IoC 的主要目的是借助于“第三方”(Spring 中的 IoC 容器) 实现具有依赖关系的对象之间的解耦(IOC 容器管理对象，你只管使用即可)，从而降低代码之间的耦合度。"}]},{"ID":"20240201213548-uu5tr5l","Type":"NodeParagraph","Properties":{"id":"20240201213548-uu5tr5l","updated":"20240201213548"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"IoC 是一个原则，而不是一个模式，以下模式（但不限于）实现了 IoC 原则。"}]},{"ID":"20240201213549-w81gko4","Type":"NodeParagraph","Properties":{"id":"20240201213549-w81gko4","updated":"20240201213549"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ioc-patterns","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/ioc-patterns.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213550-qwlptz8","Type":"NodeParagraph","Properties":{"id":"20240201213550-qwlptz8","updated":"20240201213550"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。"},{"Type":"NodeText","Data":" IoC 容器负责创建对象，将对象连接在一起，配置这些对象，并从创建中处理这些对象的整个生命周期，直到它们被完全销毁。"}]},{"ID":"20240201213551-55v0lfc","Type":"NodeParagraph","Properties":{"id":"20240201213551-55v0lfc","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"在实际项目中一个 Service 类如果有几百甚至上千个类作为它的底层，我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IOC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。"}]},{"ID":"20240201213552-rxlvr4b","Type":"NodeBlockquote","Properties":{"id":"20240201213552-rxlvr4b","updated":"20240201213552"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213553-3hzvikx","Type":"NodeParagraph","Properties":{"id":"20240201213553-3hzvikx","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"关于 Spring IOC 的理解，推荐看这一下知乎的一个回答："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/23277575/answer/169698662","TextMarkTextContent":"https://www.zhihu.com/question/23277575/answer/169698662"},{"Type":"NodeText","Data":" ，非常不错。"}]}]},{"ID":"20240201213554-xzg0ref","Type":"NodeParagraph","Properties":{"id":"20240201213554-xzg0ref","updated":"20240201213554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"控制反转怎么理解呢?"},{"Type":"NodeText","Data":" 举个例子：\"对象 a 依赖了对象 b，当对象 a 需要使用 对象 b 的时候必须自己去创建。但是当系统引入了 IOC 容器后， 对象 a 和对象 b 之间就失去了直接的联系。这个时候，当对象 a 需要使用 对象 b 的时候， 我们可以指定 IOC 容器去创建一个对象 b 注入到对象 a 中\"。 对象 a 获得依赖对象 b 的过程,由主动行为变为了被动行为，控制权反转，这就是控制反转名字的由来。"}]},{"ID":"20240201213555-1pagrbd","Type":"NodeParagraph","Properties":{"id":"20240201213555-1pagrbd","updated":"20240201213555"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"DI(Dependency Inject,依赖注入)是实现控制反转的一种设计模式，依赖注入就是将实例变量传入到一个对象中去。"}]},{"ID":"20240201213556-22sljmm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213556-22sljmm","updated":"20240201213556"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"工厂设计模式"}]},{"ID":"20240201213557-fxcjvca","Type":"NodeParagraph","Properties":{"id":"20240201213557-fxcjvca","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"Spring 使用工厂模式可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 创建 bean 对象。"}]},{"ID":"20240201213558-rsw1758","Type":"NodeParagraph","Properties":{"id":"20240201213558-rsw1758","updated":"20240201213558"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"两者对比："}]},{"ID":"20240201213559-207udop","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213559-207udop","updated":"20240201213559"},"Children":[{"ID":"20240201213560-gu9c2ko","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-gu9c2ko","updated":"20240201213560"},"Children":[{"ID":"20240201213561-jlojzr3","Type":"NodeParagraph","Properties":{"id":"20240201213561-jlojzr3","updated":"20240201213561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"：延迟注入(使用到某个 bean 的时候才会注入),相比于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 来说会占用更少的内存，程序启动速度更快。"}]}]},{"ID":"20240201213562-ekpt3gn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-ekpt3gn","updated":"20240201213562"},"Children":[{"ID":"20240201213563-3q11le1","Type":"NodeParagraph","Properties":{"id":"20240201213563-3q11le1","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":"：容器启动的时候，不管你用没用到，一次性创建所有 bean 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":" 仅提供了最基本的依赖注入支持，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 扩展了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":" ,除了有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"的功能还有额外更多功能，所以一般开发人员使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":"会更多。"}]}]}]},{"ID":"20240201213564-evrk92v","Type":"NodeParagraph","Properties":{"id":"20240201213564-evrk92v","updated":"20240201213564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 的三个实现类："}]},{"ID":"20240201213565-wt2yrp5","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213565-wt2yrp5","updated":"20240201213565"},"Children":[{"ID":"20240201213566-ffpl5qq","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213566-ffpl5qq","updated":"20240201213566"},"Children":[{"ID":"20240201213567-x88vq2b","Type":"NodeParagraph","Properties":{"id":"20240201213567-x88vq2b","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassPathXmlApplication"},{"Type":"NodeText","Data":"：把上下文文件当成类路径资源。"}]}]},{"ID":"20240201213568-z27tzwh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213568-z27tzwh","updated":"20240201213568"},"Children":[{"ID":"20240201213569-85ybpfq","Type":"NodeParagraph","Properties":{"id":"20240201213569-85ybpfq","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileSystemXmlApplication"},{"Type":"NodeText","Data":"：从文件系统中的 XML 文件载入上下文定义信息。"}]}]},{"ID":"20240201213570-uh3py2j","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213570-uh3py2j","updated":"20240201213570"},"Children":[{"ID":"20240201213571-gdf5ymo","Type":"NodeParagraph","Properties":{"id":"20240201213571-gdf5ymo","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XmlWebApplicationContext"},{"Type":"NodeText","Data":"：从 Web 系统中的 XML 文件载入上下文定义信息。"}]}]}]},{"ID":"20240201213572-m9leo8n","Type":"NodeParagraph","Properties":{"id":"20240201213572-m9leo8n","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"Example:"}]},{"ID":"20240201213573-v7cgl1k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213573-v7cgl1k","updated":"20240201213573"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.FileSystemXmlApplicationContext;\n\npublic class App {\n  public static void main(String[] args) {\n    ApplicationContext context = new FileSystemXmlApplicationContext(\n        \"C:/work/IOC Containers/springframework.applicationcontext/src/main/resources/bean-factory-config.xml\");\n\n    HelloApplicationContext obj = (HelloApplicationContext) context.getBean(\"helloApplicationContext\");\n    obj.getMsg();\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213574-7hg9y0c","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213574-7hg9y0c","updated":"20240201213574"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"单例设计模式"}]},{"ID":"20240201213575-qdaqawv","Type":"NodeParagraph","Properties":{"id":"20240201213575-qdaqawv","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。"}]},{"ID":"20240201213576-svfxw9z","Type":"NodeParagraph","Properties":{"id":"20240201213576-svfxw9z","updated":"20240201213576"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用单例模式的好处"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213577-m1bow6i","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-m1bow6i","updated":"20240201213577"},"Children":[{"ID":"20240201213578-5jmgowg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213578-5jmgowg","updated":"20240201213578"},"Children":[{"ID":"20240201213579-7ujwkx4","Type":"NodeParagraph","Properties":{"id":"20240201213579-7ujwkx4","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；"}]}]},{"ID":"20240201213580-ub693nf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-ub693nf","updated":"20240201213580"},"Children":[{"ID":"20240201213581-xwbb4a8","Type":"NodeParagraph","Properties":{"id":"20240201213581-xwbb4a8","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。"}]}]}]},{"ID":"20240201213582-vykqp55","Type":"NodeParagraph","Properties":{"id":"20240201213582-vykqp55","updated":"20240201213582"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring 中 bean 的默认作用域就是 singleton(单例)的。"},{"Type":"NodeText","Data":" 除了 singleton 作用域，Spring 中 bean 还有下面几种作用域："}]},{"ID":"20240201213583-lngkyjc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-lngkyjc","updated":"20240201213583"},"Children":[{"ID":"20240201213584-npzwzgp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213584-npzwzgp","updated":"20240201213584"},"Children":[{"ID":"20240201213585-tpu2agy","Type":"NodeParagraph","Properties":{"id":"20240201213585-tpu2agy","updated":"20240201213585"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"prototype"},{"Type":"NodeText","Data":" : 每次获取都会创建一个新的 bean 实例。也就是说，连续 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getBean()"},{"Type":"NodeText","Data":" 两次，得到的是不同的 Bean 实例。"}]}]},{"ID":"20240201213586-ymztcel","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213586-ymztcel","updated":"20240201213586"},"Children":[{"ID":"20240201213587-mb357ar","Type":"NodeParagraph","Properties":{"id":"20240201213587-mb357ar","updated":"20240201213587"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"request"},{"Type":"NodeText","Data":" （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。"}]}]},{"ID":"20240201213588-ppt1dmm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213588-ppt1dmm","updated":"20240201213588"},"Children":[{"ID":"20240201213589-eoysd3y","Type":"NodeParagraph","Properties":{"id":"20240201213589-eoysd3y","updated":"20240201213589"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"session"},{"Type":"NodeText","Data":" （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。"}]}]},{"ID":"20240201213590-4dd3tdm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213590-4dd3tdm","updated":"20240201213590"},"Children":[{"ID":"20240201213591-a4k2aj9","Type":"NodeParagraph","Properties":{"id":"20240201213591-a4k2aj9","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"application/global-session"},{"Type":"NodeText","Data":" （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），，该 bean 仅在当前应用启动时间内有效。"}]}]},{"ID":"20240201213592-r86x88g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-r86x88g","updated":"20240201213592"},"Children":[{"ID":"20240201213593-z7poef4","Type":"NodeParagraph","Properties":{"id":"20240201213593-z7poef4","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"websocket"},{"Type":"NodeText","Data":" （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。"}]}]}]},{"ID":"20240201213594-6t2uxlv","Type":"NodeParagraph","Properties":{"id":"20240201213594-6t2uxlv","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"Spring 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConcurrentHashMap"},{"Type":"NodeText","Data":" 实现单例注册表的特殊方式实现单例模式。"}]},{"ID":"20240201213595-zh69jn3","Type":"NodeParagraph","Properties":{"id":"20240201213595-zh69jn3","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"Spring 实现单例的核心代码如下："}]},{"ID":"20240201213596-gr61e1l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213596-gr61e1l","updated":"20240201213596"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 通过 ConcurrentHashMap（线程安全） 实现单例注册表\nprivate final Map\u003cString, Object\u003e singletonObjects = new ConcurrentHashMap\u003cString, Object\u003e(64);\n\npublic Object getSingleton(String beanName, ObjectFactory\u003c?\u003e singletonFactory) {\n        Assert.notNull(beanName, \"'beanName' must not be null\");\n        synchronized (this.singletonObjects) {\n            // 检查缓存中是否存在实例\n            Object singletonObject = this.singletonObjects.get(beanName);\n            if (singletonObject == null) {\n                //...省略了很多代码\n                try {\n                    singletonObject = singletonFactory.getObject();\n                }\n                //...省略了很多代码\n                // 如果实例对象在不存在，我们注册到单例注册表中。\n                addSingleton(beanName, singletonObject);\n            }\n            return (singletonObject != NULL_OBJECT ? singletonObject : null);\n        }\n    }\n    //将对象添加到单例注册表\n    protected void addSingleton(String beanName, Object singletonObject) {\n            synchronized (this.singletonObjects) {\n                this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));\n\n            }\n        }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213597-9c7y77o","Type":"NodeParagraph","Properties":{"id":"20240201213597-9c7y77o","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单例 Bean 存在线程安全问题吗？"}]},{"ID":"20240201213598-9iy0oef","Type":"NodeParagraph","Properties":{"id":"20240201213598-9iy0oef","updated":"20240201213598"},"Children":[{"Type":"NodeText","Data":"大部分时候我们并没有在项目中使用多线程，所以很少有人会关注这个问题。单例 Bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候是存在资源竞争的。"}]},{"ID":"20240201213599-2ssfli7","Type":"NodeParagraph","Properties":{"id":"20240201213599-2ssfli7","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"常见的有两种解决办法："}]},{"ID":"20240201213600-7eok0ka","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213600-7eok0ka","updated":"20240201213600"},"Children":[{"ID":"20240201213601-2m3f98x","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213601-2m3f98x","updated":"20240201213601"},"Children":[{"ID":"20240201213602-msxvwm0","Type":"NodeParagraph","Properties":{"id":"20240201213602-msxvwm0","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"在 Bean 中尽量避免定义可变的成员变量。"}]}]},{"ID":"20240201213603-psdqz4d","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213603-psdqz4d","updated":"20240201213603"},"Children":[{"ID":"20240201213604-mil25ct","Type":"NodeParagraph","Properties":{"id":"20240201213604-mil25ct","updated":"20240201213604"},"Children":[{"Type":"NodeText","Data":"在类中定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 成员变量，将需要的可变成员变量保存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 中（推荐的一种方式）。"}]}]}]},{"ID":"20240201213605-admjtjb","Type":"NodeParagraph","Properties":{"id":"20240201213605-admjtjb","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"不过，大部分 Bean 实际都是无状态（没有实例变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。"}]},{"ID":"20240201213606-nblm8tr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213606-nblm8tr","updated":"20240201213606"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"代理设计模式"}]},{"ID":"20240201213607-oahezur","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213607-oahezur","updated":"20240201213607"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"代理模式在 AOP 中的应用"}]},{"ID":"20240201213608-9067bcf","Type":"NodeParagraph","Properties":{"id":"20240201213608-9067bcf","updated":"20240201213608"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AOP(Aspect-Oriented Programming，面向切面编程)"},{"Type":"NodeText","Data":" 能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。"}]},{"ID":"20240201213609-bw287y3","Type":"NodeParagraph","Properties":{"id":"20240201213609-bw287y3","updated":"20240201213609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring AOP 就是基于动态代理的"},{"Type":"NodeText","Data":"，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK Proxy"},{"Type":"NodeText","Data":" 去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cglib"},{"Type":"NodeText","Data":" 生成一个被代理对象的子类来作为代理，如下图所示："}]},{"ID":"20240201213610-tv38as7","Type":"NodeParagraph","Properties":{"id":"20240201213610-tv38as7","updated":"20240201213610"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"SpringAOPProcess","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/SpringAOPProcess.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213611-f04ltnj","Type":"NodeParagraph","Properties":{"id":"20240201213611-f04ltnj","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"当然，你也可以使用 AspectJ ,Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。"}]},{"ID":"20240201213612-jwjqhh5","Type":"NodeParagraph","Properties":{"id":"20240201213612-jwjqhh5","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。"}]},{"ID":"20240201213613-p6r1avn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213613-p6r1avn","updated":"20240201213613"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AOP 和 AspectJ AOP 有什么区别?"}]},{"ID":"20240201213614-8eiugc4","Type":"NodeParagraph","Properties":{"id":"20240201213614-8eiugc4","updated":"20240201213614"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。"},{"Type":"NodeText","Data":" Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。"}]},{"ID":"20240201213615-s64jkn4","Type":"NodeParagraph","Properties":{"id":"20240201213615-s64jkn4","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，"}]},{"ID":"20240201213616-utcsixn","Type":"NodeParagraph","Properties":{"id":"20240201213616-utcsixn","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。"}]},{"ID":"20240201213617-zvllwq9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213617-zvllwq9","updated":"20240201213617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"模板方法"}]},{"ID":"20240201213618-yjwvm3w","Type":"NodeParagraph","Properties":{"id":"20240201213618-yjwvm3w","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。"}]},{"ID":"20240201213619-3ryijtq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213619-3ryijtq","updated":"20240201213619"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public abstract class Template {\n    //这是我们的模板方法\n    public final void TemplateMethod(){\n        PrimitiveOperation1();\n        PrimitiveOperation2();\n        PrimitiveOperation3();\n    }\n\n    protected void  PrimitiveOperation1(){\n        //当前类实现\n    }\n\n    //被子类实现的方法\n    protected abstract void PrimitiveOperation2();\n    protected abstract void PrimitiveOperation3();\n\n}\npublic class TemplateImpl extends Template {\n\n    @Override\n    public void PrimitiveOperation2() {\n        //当前类实现\n    }\n\n    @Override\n    public void PrimitiveOperation3() {\n        //当前类实现\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213620-5fei333","Type":"NodeParagraph","Properties":{"id":"20240201213620-5fei333","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"Spring 中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"JdbcTemplate"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HibernateTemplate"},{"Type":"NodeText","Data":" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring 并没有使用这种方式，而是使用 Callback 模式与模板方法模式配合，既达到了代码复用的效果，同时增加了灵活性。"}]},{"ID":"20240201213621-ehs9kw7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213621-ehs9kw7","updated":"20240201213621"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"观察者模式"}]},{"ID":"20240201213622-9k7uy60","Type":"NodeParagraph","Properties":{"id":"20240201213622-9k7uy60","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，依赖这个对象的所有对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。Spring 事件驱动模型非常有用，在很多场景都可以解耦我们的代码。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。"}]},{"ID":"20240201213623-b9ww7i1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213623-b9ww7i1","updated":"20240201213623"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事件驱动模型中的三种角色"}]},{"ID":"20240201213624-oajtb52","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213624-oajtb52","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事件角色"}]},{"ID":"20240201213625-3lq92wn","Type":"NodeParagraph","Properties":{"id":"20240201213625-3lq92wn","updated":"20240201213625"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEvent"},{"Type":"NodeText","Data":" ("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.context"},{"Type":"NodeText","Data":"包下)充当事件的角色,这是一个抽象类，它继承了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.EventObject"},{"Type":"NodeText","Data":"并实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.io.Serializable"},{"Type":"NodeText","Data":"接口。"}]},{"ID":"20240201213626-isnbpi8","Type":"NodeParagraph","Properties":{"id":"20240201213626-isnbpi8","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"Spring 中默认存在以下事件，他们都是对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContextEvent"},{"Type":"NodeText","Data":" 的实现(继承自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContextEvent"},{"Type":"NodeText","Data":")："}]},{"ID":"20240201213627-4qqtgwn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-4qqtgwn","updated":"20240201213627"},"Children":[{"ID":"20240201213628-7l1t2or","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-7l1t2or","updated":"20240201213628"},"Children":[{"ID":"20240201213629-frotqrz","Type":"NodeParagraph","Properties":{"id":"20240201213629-frotqrz","updated":"20240201213629"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ContextStartedEvent"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 启动后触发的事件;"}]}]},{"ID":"20240201213630-ffn14x3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-ffn14x3","updated":"20240201213630"},"Children":[{"ID":"20240201213631-j2sd07o","Type":"NodeParagraph","Properties":{"id":"20240201213631-j2sd07o","updated":"20240201213631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ContextStoppedEvent"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 停止后触发的事件;"}]}]},{"ID":"20240201213632-ptn7ixz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213632-ptn7ixz","updated":"20240201213632"},"Children":[{"ID":"20240201213633-sppf16g","Type":"NodeParagraph","Properties":{"id":"20240201213633-sppf16g","updated":"20240201213633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ContextRefreshedEvent"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 初始化或刷新完成后触发的事件;"}]}]},{"ID":"20240201213634-kvcu8oo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213634-kvcu8oo","updated":"20240201213634"},"Children":[{"ID":"20240201213635-ca4xq40","Type":"NodeParagraph","Properties":{"id":"20240201213635-ca4xq40","updated":"20240201213635"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ContextClosedEvent"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 关闭后触发的事件。"}]}]}]},{"ID":"20240201213636-hyht1nr","Type":"NodeParagraph","Properties":{"id":"20240201213636-hyht1nr","updated":"20240201213636"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ApplicationEvent-Subclass","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/ApplicationEvent-Subclass.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213637-1xx6npq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213637-1xx6npq","updated":"20240201213637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事件监听者角色"}]},{"ID":"20240201213638-3jkl3za","Type":"NodeParagraph","Properties":{"id":"20240201213638-3jkl3za","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationListener"},{"Type":"NodeText","Data":" 充当了事件监听者角色，它是一个接口，里面只定义了一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"onApplicationEvent（）"},{"Type":"NodeText","Data":"方法来处理"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEvent"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationListener"},{"Type":"NodeText","Data":"接口类源码如下，可以看出接口定义看出接口中的事件只要实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEvent"},{"Type":"NodeText","Data":"就可以了。所以，在 Spring 中我们只要实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationListener"},{"Type":"NodeText","Data":" 接口的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"onApplicationEvent()"},{"Type":"NodeText","Data":" 方法即可完成监听事件"}]},{"ID":"20240201213639-zfmuhdh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213639-zfmuhdh","updated":"20240201213639"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package org.springframework.context;\nimport java.util.EventListener;\n@FunctionalInterface\npublic interface ApplicationListener\u003cE extends ApplicationEvent\u003e extends EventListener {\n    void onApplicationEvent(E var1);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213640-88spdc2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213640-88spdc2","updated":"20240201213640"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事件发布者角色"}]},{"ID":"20240201213641-syfghuf","Type":"NodeParagraph","Properties":{"id":"20240201213641-syfghuf","updated":"20240201213641"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEventPublisher"},{"Type":"NodeText","Data":" 充当了事件的发布者，它也是一个接口。"}]},{"ID":"20240201213642-6fasiwl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213642-6fasiwl","updated":"20240201213642"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@FunctionalInterface\npublic interface ApplicationEventPublisher {\n    default void publishEvent(ApplicationEvent event) {\n        this.publishEvent((Object)event);\n    }\n\n    void publishEvent(Object var1);\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213643-ktauxxh","Type":"NodeParagraph","Properties":{"id":"20240201213643-ktauxxh","updated":"20240201213643"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEventPublisher"},{"Type":"NodeText","Data":" 接口的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"publishEvent（）"},{"Type":"NodeText","Data":"这个方法在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractApplicationContext"},{"Type":"NodeText","Data":"类中被实现，阅读这个方法的实现，你会发现实际上事件真正是通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEventMulticaster"},{"Type":"NodeText","Data":"来广播出去的。具体内容过多，就不在这里分析了，后面可能会单独写一篇文章提到。"}]},{"ID":"20240201213644-t381t09","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213644-t381t09","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 的事件流程总结"}]},{"ID":"20240201213645-aiiynlh","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213645-aiiynlh","updated":"20240201213645"},"Children":[{"ID":"20240201213646-lv09u1r","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213646-lv09u1r","updated":"20240201213646"},"Children":[{"ID":"20240201213647-82yx627","Type":"NodeParagraph","Properties":{"id":"20240201213647-82yx627","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"定义一个事件: 实现一个继承自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEvent"},{"Type":"NodeText","Data":"，并且写相应的构造函数；"}]}]},{"ID":"20240201213648-pmsp12t","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213648-pmsp12t","updated":"20240201213648"},"Children":[{"ID":"20240201213649-oudunmo","Type":"NodeParagraph","Properties":{"id":"20240201213649-oudunmo","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"定义一个事件监听者：实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationListener"},{"Type":"NodeText","Data":" 接口，重写 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"onApplicationEvent()"},{"Type":"NodeText","Data":" 方法；"}]}]},{"ID":"20240201213650-n8wq17l","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213650-n8wq17l","updated":"20240201213650"},"Children":[{"ID":"20240201213651-h6zyiko","Type":"NodeParagraph","Properties":{"id":"20240201213651-h6zyiko","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"使用事件发布者发布消息: 可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationEventPublisher"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"publishEvent()"},{"Type":"NodeText","Data":" 方法发布消息。"}]}]}]},{"ID":"20240201213652-yv9xlht","Type":"NodeParagraph","Properties":{"id":"20240201213652-yv9xlht","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"Example:"}]},{"ID":"20240201213653-45tbxfi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213653-45tbxfi","updated":"20240201213653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 定义一个事件,继承自ApplicationEvent并且写相应的构造函数\npublic class DemoEvent extends ApplicationEvent{\n    private static final long serialVersionUID = 1L;\n\n    private String message;\n\n    public DemoEvent(Object source,String message){\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n         return message;\n          }\n\n\n// 定义一个事件监听者,实现ApplicationListener接口，重写 onApplicationEvent() 方法；\n@Component\npublic class DemoListener implements ApplicationListener\u003cDemoEvent\u003e{\n\n    //使用onApplicationEvent接收消息\n    @Override\n    public void onApplicationEvent(DemoEvent event) {\n        String msg = event.getMessage();\n        System.out.println(\"接收到的信息是：\"+msg);\n    }\n\n}\n// 发布事件，可以通过ApplicationEventPublisher  的 publishEvent() 方法发布消息。\n@Component\npublic class DemoPublisher {\n\n    @Autowired\n    ApplicationContext applicationContext;\n\n    public void publish(String message){\n        //发布事件\n        applicationContext.publishEvent(new DemoEvent(this, message));\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213654-7skrldx","Type":"NodeParagraph","Properties":{"id":"20240201213654-7skrldx","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DemoPublisher"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"publish()"},{"Type":"NodeText","Data":" 方法的时候，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"demoPublisher.publish(\u0026quot;你好\u0026quot;)"},{"Type":"NodeText","Data":" ，控制台就会打印出:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"接收到的信息是：你好"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213655-sd1e6bi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213655-sd1e6bi","updated":"20240201213655"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"适配器模式"}]},{"ID":"20240201213656-3wgrtrg","Type":"NodeParagraph","Properties":{"id":"20240201213656-3wgrtrg","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"适配器模式(Adapter Pattern) 将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作。"}]},{"ID":"20240201213657-sz03wa0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213657-sz03wa0","updated":"20240201213657"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AOP 中的适配器模式"}]},{"ID":"20240201213658-pm3bxm5","Type":"NodeParagraph","Properties":{"id":"20240201213658-pm3bxm5","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"我们知道 Spring AOP 的实现是基于代理模式，但是 Spring AOP 的增强或通知(Advice)使用到了适配器模式，与之相关的接口是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AdvisorAdapter"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213659-hjtghp1","Type":"NodeParagraph","Properties":{"id":"20240201213659-hjtghp1","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"Advice 常用的类型有："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeforeAdvice"},{"Type":"NodeText","Data":"（目标方法调用前,前置通知）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AfterAdvice"},{"Type":"NodeText","Data":"（目标方法调用后,后置通知）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AfterReturningAdvice"},{"Type":"NodeText","Data":"(目标方法执行结束后，return 之前)等等。每个类型 Advice（通知）都有对应的拦截器:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodBeforeAdviceInterceptor"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AfterReturningAdviceInterceptor"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThrowsAdviceInterceptor"},{"Type":"NodeText","Data":" 等等。"}]},{"ID":"20240201213660-ho3hbaf","Type":"NodeParagraph","Properties":{"id":"20240201213660-ho3hbaf","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"Spring 预定义的通知要通过对应的适配器，适配成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodInterceptor"},{"Type":"NodeText","Data":" 接口(方法拦截器)类型的对象（如："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodBeforeAdviceAdapter"},{"Type":"NodeText","Data":" 通过调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getInterceptor"},{"Type":"NodeText","Data":" 方法，将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodBeforeAdvice"},{"Type":"NodeText","Data":" 适配成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodBeforeAdviceInterceptor"},{"Type":"NodeText","Data":" ）。"}]},{"ID":"20240201213661-fkw113j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213661-fkw113j","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring MVC 中的适配器模式"}]},{"ID":"20240201213662-s6cz802","Type":"NodeParagraph","Properties":{"id":"20240201213662-s6cz802","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"在 Spring MVC 中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 根据请求信息调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":"，解析请求对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"。解析到对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"（也就是我们平常说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 控制器）后，开始由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerAdapter"},{"Type":"NodeText","Data":" 适配器处理。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerAdapter"},{"Type":"NodeText","Data":" 作为期望接口，具体的适配器实现类用于对目标类进行适配，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 作为需要适配的类。"}]},{"ID":"20240201213663-9e6s1yt","Type":"NodeParagraph","Properties":{"id":"20240201213663-9e6s1yt","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么要在 Spring MVC 中使用适配器模式？"}]},{"ID":"20240201213664-kgtla8w","Type":"NodeParagraph","Properties":{"id":"20240201213664-kgtla8w","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"Spring MVC 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 种类众多，不同类型的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 通过不同的方法来对请求进行处理。如果不利用适配器模式的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 直接获取对应类型的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":"，需要的自行来判断，像下面这段代码一样："}]},{"ID":"20240201213665-be1xwf8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213665-be1xwf8","updated":"20240201213665"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"if(mappedHandler.getHandler() instanceof MultiActionController){\n   ((MultiActionController)mappedHandler.getHandler()).xxx\n}else if(mappedHandler.getHandler() instanceof XXX){\n    ...\n}else if(...){\n   ...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213666-usghbg4","Type":"NodeParagraph","Properties":{"id":"20240201213666-usghbg4","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"假如我们再增加一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":"类型就要在上面代码中再加入一行 判断语句，这种形式就使得程序难以维护，也违反了设计模式中的开闭原则 – 对扩展开放，对修改关闭。"}]},{"ID":"20240201213667-41an7bd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213667-41an7bd","updated":"20240201213667"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"装饰者模式"}]},{"ID":"20240201213668-g8jt4t4","Type":"NodeParagraph","Properties":{"id":"20240201213668-g8jt4t4","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"装饰者模式可以动态地给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。简单点儿说就是当我们需要修改原有的功能，但我们又不愿直接去修改原有的代码时，设计一个 Decorator 套在原有代码外面。其实在 JDK 中就有很多地方用到了装饰者模式，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":"家族，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 类下有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileInputStream"},{"Type":"NodeText","Data":" (读取文件)、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":" (增加缓存,使读取文件速度大大提升)等子类都在不修改"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 代码的情况下扩展了它的功能。"}]},{"ID":"20240201213669-qc3dzpx","Type":"NodeParagraph","Properties":{"id":"20240201213669-qc3dzpx","updated":"20240201213669"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"装饰者模式示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/Decorator.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213670-6shn204","Type":"NodeParagraph","Properties":{"id":"20240201213670-6shn204","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"Spring 中配置 DataSource 的时候，DataSource 可能是不同的数据库和数据源。我们能否根据客户的需求在少修改原有类的代码下动态切换不同的数据源？这个时候就要用到装饰者模式(这一点我自己还没太理解具体原理)。Spring 中用到的包装器模式在类名上含有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Wrapper"},{"Type":"NodeText","Data":"或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Decorator"},{"Type":"NodeText","Data":"。这些类基本上都是动态地给一个对象添加一些额外的职责"}]},{"ID":"20240201213671-vvstegf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213671-vvstegf","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213672-cypmqu9","Type":"NodeParagraph","Properties":{"id":"20240201213672-cypmqu9","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"Spring 框架中用到了哪些设计模式？"}]},{"ID":"20240201213673-afuzk15","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213673-afuzk15","updated":"20240201213673"},"Children":[{"ID":"20240201213674-lm2do0v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213674-lm2do0v","updated":"20240201213674"},"Children":[{"ID":"20240201213675-0q15us5","Type":"NodeParagraph","Properties":{"id":"20240201213675-0q15us5","updated":"20240201213675"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"工厂设计模式"},{"Type":"NodeText","Data":" : Spring 使用工厂模式通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 创建 bean 对象。"}]}]},{"ID":"20240201213676-qwgzb0u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213676-qwgzb0u","updated":"20240201213676"},"Children":[{"ID":"20240201213677-ms34vz5","Type":"NodeParagraph","Properties":{"id":"20240201213677-ms34vz5","updated":"20240201213677"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"代理设计模式"},{"Type":"NodeText","Data":" : Spring AOP 功能的实现。"}]}]},{"ID":"20240201213678-a723hav","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213678-a723hav","updated":"20240201213678"},"Children":[{"ID":"20240201213679-4vroz2f","Type":"NodeParagraph","Properties":{"id":"20240201213679-4vroz2f","updated":"20240201213679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单例设计模式"},{"Type":"NodeText","Data":" : Spring 中的 Bean 默认都是单例的。"}]}]},{"ID":"20240201213680-8ckms6f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213680-8ckms6f","updated":"20240201213680"},"Children":[{"ID":"20240201213681-zzej429","Type":"NodeParagraph","Properties":{"id":"20240201213681-zzej429","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"模板方法模式"},{"Type":"NodeText","Data":" : Spring 中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"jdbcTemplate"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hibernateTemplate"},{"Type":"NodeText","Data":" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。"}]}]},{"ID":"20240201213682-h9j8r4e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213682-h9j8r4e","updated":"20240201213682"},"Children":[{"ID":"20240201213683-qattlgs","Type":"NodeParagraph","Properties":{"id":"20240201213683-qattlgs","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"包装器设计模式"},{"Type":"NodeText","Data":" : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。"}]}]},{"ID":"20240201213684-nngv1k6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213684-nngv1k6","updated":"20240201213684"},"Children":[{"ID":"20240201213685-q1fug9p","Type":"NodeParagraph","Properties":{"id":"20240201213685-q1fug9p","updated":"20240201213685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"观察者模式:"},{"Type":"NodeText","Data":" Spring 事件驱动模型就是观察者模式很经典的一个应用。"}]}]},{"ID":"20240201213686-78p53fc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213686-78p53fc","updated":"20240201213686"},"Children":[{"ID":"20240201213687-kwyzhb6","Type":"NodeParagraph","Properties":{"id":"20240201213687-kwyzhb6","updated":"20240201213687"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器模式"},{"Type":"NodeText","Data":" :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213688-yzc9rym","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213688-yzc9rym","updated":"20240201213688"},"Children":[{"ID":"20240201213689-bayjsn4","Type":"NodeParagraph","Properties":{"id":"20240201213689-bayjsn4","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213690-knosmwd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213690-knosmwd","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213691-934f5yc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213691-934f5yc","updated":"20240201213691"},"Children":[{"ID":"20240201213692-xvc1esj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-xvc1esj","updated":"20240201213692"},"Children":[{"ID":"20240201213693-ikzai7y","Type":"NodeParagraph","Properties":{"id":"20240201213693-ikzai7y","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"《Spring 技术内幕》"}]}]},{"ID":"20240201213694-fx7z3bo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-fx7z3bo","updated":"20240201213694"},"Children":[{"ID":"20240201213695-0ay9zs3","Type":"NodeParagraph","Properties":{"id":"20240201213695-0ay9zs3","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.eduonix.com/java-programming-2/learn-design-patterns-used-spring-framework/","TextMarkTextContent":"https://blog.eduonix.com/java-programming-2/learn-design-patterns-used-spring-framework/"}]}]},{"ID":"20240201213696-lxys692","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-lxys692","updated":"20240201213696"},"Children":[{"ID":"20240201213697-z13ubsw","Type":"NodeParagraph","Properties":{"id":"20240201213697-z13ubsw","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"\u003chttp://blog.yeamin.top/2018/03/27/单例模式-Spring%20 单例实现原理分析/\u003e"}]}]},{"ID":"20240201213698-rvs97e3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-rvs97e3","updated":"20240201213698"},"Children":[{"ID":"20240201213699-rkrpnqr","Type":"NodeParagraph","Properties":{"id":"20240201213699-rkrpnqr","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.tutorialsteacher.com/ioc/inversion-of-control","TextMarkTextContent":"https://www.tutorialsteacher.com/ioc/inversion-of-control"}]}]},{"ID":"20240201213700-wsc3v14","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-wsc3v14","updated":"20240201213700"},"Children":[{"ID":"20240201213701-0rjh3zz","Type":"NodeParagraph","Properties":{"id":"20240201213701-0rjh3zz","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html","TextMarkTextContent":"https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html"}]}]},{"ID":"20240201213702-43w6bit","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213702-43w6bit","updated":"20240201213702"},"Children":[{"ID":"20240201213703-ny1p3yi","Type":"NodeParagraph","Properties":{"id":"20240201213703-ny1p3yi","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/post/5a8eb261f265da4e9e307230","TextMarkTextContent":"https://juejin.im/post/5a8eb261f265da4e9e307230"}]}]},{"ID":"20240201213704-254uc4h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-254uc4h","updated":"20240201213704"},"Children":[{"ID":"20240201213705-xdtreql","Type":"NodeParagraph","Properties":{"id":"20240201213705-xdtreql","updated":"20240201213705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/post/5ba28986f265da0abc2b6084","TextMarkTextContent":"https://juejin.im/post/5ba28986f265da0abc2b6084"}]}]}]},{"ID":"20240201213706-8aj74ni","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213706-8aj74ni","updated":"20240201213706"}}]}