{"ID":"20240201213612-1ubkgn1","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213612-1ubkgn1","title":"bloom-filter","updated":"20240201213612"},"Children":[{"ID":"20240201213613-7wu5x0g","Type":"NodeThematicBreak","Properties":{"id":"20240201213613-7wu5x0g","updated":"20240201213613"}},{"ID":"20240201213614-6rt56od","Type":"NodeParagraph","Properties":{"id":"20240201213614-6rt56od","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"title: 布隆过滤器"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 计算机基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213615-bv9knnl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213615-bv9knnl","updated":"20240201213615"},"Children":[{"ID":"20240201213616-hg6x09c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-hg6x09c","updated":"20240201213616"},"Children":[{"ID":"20240201213617-yss7tmb","Type":"NodeParagraph","Properties":{"id":"20240201213617-yss7tmb","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"数据结构"}]}]}]},{"ID":"20240201213618-g99ri4e","Type":"NodeThematicBreak","Properties":{"id":"20240201213618-g99ri4e","updated":"20240201213618"}},{"ID":"20240201213619-fetkabg","Type":"NodeParagraph","Properties":{"id":"20240201213619-fetkabg","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"布隆过滤器相信大家没用过的话，也已经听过了。"}]},{"ID":"20240201213620-iwtu83n","Type":"NodeParagraph","Properties":{"id":"20240201213620-iwtu83n","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"布隆过滤器主要是为了解决海量数据的存在性问题。对于海量数据中判定某个数据是否存在且容忍轻微误差这一场景（比如缓存穿透、海量数据去重）来说，非常适合。"}]},{"ID":"20240201213621-6x3rcz6","Type":"NodeParagraph","Properties":{"id":"20240201213621-6x3rcz6","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"文章内容概览："}]},{"ID":"20240201213622-2hev2le","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213622-2hev2le","updated":"20240201213622"},"Children":[{"ID":"20240201213623-ypkzi2v","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213623-ypkzi2v","updated":"20240201213623"},"Children":[{"ID":"20240201213624-xq9d2ot","Type":"NodeParagraph","Properties":{"id":"20240201213624-xq9d2ot","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"什么是布隆过滤器？"}]}]},{"ID":"20240201213625-yu2amni","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213625-yu2amni","updated":"20240201213625"},"Children":[{"ID":"20240201213626-eq1uhwh","Type":"NodeParagraph","Properties":{"id":"20240201213626-eq1uhwh","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"布隆过滤器的原理介绍。"}]}]},{"ID":"20240201213627-99eus3k","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213627-99eus3k","updated":"20240201213627"},"Children":[{"ID":"20240201213628-xyacfc7","Type":"NodeParagraph","Properties":{"id":"20240201213628-xyacfc7","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"布隆过滤器使用场景。"}]}]},{"ID":"20240201213629-bymmf8t","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213629-bymmf8t","updated":"20240201213629"},"Children":[{"ID":"20240201213630-khr8ysq","Type":"NodeParagraph","Properties":{"id":"20240201213630-khr8ysq","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"通过 Java 编程手动实现布隆过滤器。"}]}]},{"ID":"20240201213631-rdegvy9","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213631-rdegvy9","updated":"20240201213631"},"Children":[{"ID":"20240201213632-533c7as","Type":"NodeParagraph","Properties":{"id":"20240201213632-533c7as","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"利用 Google 开源的 Guava 中自带的布隆过滤器。"}]}]},{"ID":"20240201213633-90wlo1a","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213633-90wlo1a","updated":"20240201213633"},"Children":[{"ID":"20240201213634-ixrg03u","Type":"NodeParagraph","Properties":{"id":"20240201213634-ixrg03u","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"Redis 中的布隆过滤器。"}]}]}]},{"ID":"20240201213635-xujcp3b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213635-xujcp3b","updated":"20240201213635"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是布隆过滤器？"}]},{"ID":"20240201213636-g2q8swy","Type":"NodeParagraph","Properties":{"id":"20240201213636-g2q8swy","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"首先，我们需要了解布隆过滤器的概念。"}]},{"ID":"20240201213637-ji6m4hq","Type":"NodeParagraph","Properties":{"id":"20240201213637-ji6m4hq","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"布隆过滤器（Bloom Filter，BF）是一个叫做 Bloom 的老哥于 1970 年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。"}]},{"ID":"20240201213638-4w1yxb5","Type":"NodeParagraph","Properties":{"id":"20240201213638-4w1yxb5","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是 0 或者 1（代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。这样来算的话，申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 KB ≈ 122KB 的空间。"}]},{"ID":"20240201213639-2mi9hxm","Type":"NodeParagraph","Properties":{"id":"20240201213639-2mi9hxm","updated":"20240201213639"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"位数组","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213640-cdjwiul","Type":"NodeParagraph","Properties":{"id":"20240201213640-cdjwiul","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"总结："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一个名叫 Bloom 的人提出了一种来检索元素是否在给定大集合中的数据结构，这种数据结构是高效且性能很好的，但缺点是具有一定的错误识别率和删除难度。并且，理论情况下，添加到集合中的元素越多，误报的可能性就越大。"}]},{"ID":"20240201213641-ndtf7j4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213641-ndtf7j4","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"布隆过滤器的原理介绍"}]},{"ID":"20240201213642-sj76lf6","Type":"NodeParagraph","Properties":{"id":"20240201213642-sj76lf6","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当一个元素加入布隆过滤器中的时候，会进行如下操作："}]},{"ID":"20240201213643-fe4ecs2","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213643-fe4ecs2","updated":"20240201213643"},"Children":[{"ID":"20240201213644-e9sdzmx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213644-e9sdzmx","updated":"20240201213644"},"Children":[{"ID":"20240201213645-gyxx1v1","Type":"NodeParagraph","Properties":{"id":"20240201213645-gyxx1v1","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。"}]}]},{"ID":"20240201213646-gfs4tqc","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213646-gfs4tqc","updated":"20240201213646"},"Children":[{"ID":"20240201213647-77imnev","Type":"NodeParagraph","Properties":{"id":"20240201213647-77imnev","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"根据得到的哈希值，在位数组中把对应下标的值置为 1。"}]}]}]},{"ID":"20240201213648-mlo9kmn","Type":"NodeParagraph","Properties":{"id":"20240201213648-mlo9kmn","updated":"20240201213648"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作："}]},{"ID":"20240201213649-lfe8svc","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213649-lfe8svc","updated":"20240201213649"},"Children":[{"ID":"20240201213650-a2wh59c","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213650-a2wh59c","updated":"20240201213650"},"Children":[{"ID":"20240201213651-rn5zmf8","Type":"NodeParagraph","Properties":{"id":"20240201213651-rn5zmf8","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"对给定元素再次进行相同的哈希计算；"}]}]},{"ID":"20240201213652-wd406ed","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213652-wd406ed","updated":"20240201213652"},"Children":[{"ID":"20240201213653-siy93zz","Type":"NodeParagraph","Properties":{"id":"20240201213653-siy93zz","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。"}]}]}]},{"ID":"20240201213654-ftzok8k","Type":"NodeParagraph","Properties":{"id":"20240201213654-ftzok8k","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"Bloom Filter 的简单原理图如下："}]},{"ID":"20240201213655-8gdpgne","Type":"NodeParagraph","Properties":{"id":"20240201213655-8gdpgne","updated":"20240201213655"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Bloom Filter 的简单原理示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-simple-schematic-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213656-spwwnpd","Type":"NodeParagraph","Properties":{"id":"20240201213656-spwwnpd","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"如图所示，当字符串存储要加入到布隆过滤器中时，该字符串首先由多个哈希函数生成不同的哈希值，然后将对应的位数组的下标设置为 1（当位数组初始化时，所有位置均为 0）。当第二次存储相同字符串时，因为先前的对应位置已设置为 1，所以很容易知道此值已经存在（去重非常方便）。"}]},{"ID":"20240201213657-o654ond","Type":"NodeParagraph","Properties":{"id":"20240201213657-o654ond","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"如果我们需要判断某个字符串是否在布隆过滤器中时，只需要对给定字符串再次进行相同的哈希计算，得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。"}]},{"ID":"20240201213658-g57vd6e","Type":"NodeParagraph","Properties":{"id":"20240201213658-g57vd6e","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不同的字符串可能哈希出来的位置相同，这种情况我们可以适当增加位数组大小或者调整我们的哈希函数。"}]},{"ID":"20240201213659-qoelkl0","Type":"NodeParagraph","Properties":{"id":"20240201213659-qoelkl0","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"综上，我们可以得出："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。"}]},{"ID":"20240201213660-y9j7qlp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213660-y9j7qlp","updated":"20240201213660"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"布隆过滤器使用场景"}]},{"ID":"20240201213661-cbh6tus","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213661-cbh6tus","updated":"20240201213661"},"Children":[{"ID":"20240201213662-kohassq","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213662-kohassq","updated":"20240201213662"},"Children":[{"ID":"20240201213663-78p74h3","Type":"NodeParagraph","Properties":{"id":"20240201213663-78p74h3","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"判断给定数据是否存在：比如判断一个数字是否存在于包含大量数字的数字集中（数字集很大，上亿）、 防止缓存穿透（判断请求的数据是否有效避免直接绕过缓存请求数据库）等等、邮箱的垃圾邮件过滤（判断一个邮件地址是否在垃圾邮件列表中）、黑名单功能（判断一个 IP 地址或手机号码是否在黑名单中）等等。"}]}]},{"ID":"20240201213664-2382in8","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213664-2382in8","updated":"20240201213664"},"Children":[{"ID":"20240201213665-b8ni3ee","Type":"NodeParagraph","Properties":{"id":"20240201213665-b8ni3ee","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"去重：比如爬给定网址的时候对已经爬取过的 URL 去重、对巨量的 QQ 号/订单号去重。"}]}]}]},{"ID":"20240201213666-xc4t5n4","Type":"NodeParagraph","Properties":{"id":"20240201213666-xc4t5n4","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"去重场景也需要用到判断给定数据是否存在，因此布隆过滤器主要是为了解决海量数据的存在性问题。"}]},{"ID":"20240201213667-aqd84z5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213667-aqd84z5","updated":"20240201213667"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"编码实战"}]},{"ID":"20240201213668-xbuj05f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213668-xbuj05f","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"通过 Java 编程手动实现布隆过滤器"}]},{"ID":"20240201213669-w3347uf","Type":"NodeParagraph","Properties":{"id":"20240201213669-w3347uf","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"我们上面已经说了布隆过滤器的原理，知道了布隆过滤器的原理之后就可以自己手动实现一个了。"}]},{"ID":"20240201213670-iw2sr5f","Type":"NodeParagraph","Properties":{"id":"20240201213670-iw2sr5f","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"如果你想要手动实现一个的话，你需要："}]},{"ID":"20240201213671-f0r3toy","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213671-f0r3toy","updated":"20240201213671"},"Children":[{"ID":"20240201213672-lhhh42i","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213672-lhhh42i","updated":"20240201213672"},"Children":[{"ID":"20240201213673-wcx69yb","Type":"NodeParagraph","Properties":{"id":"20240201213673-wcx69yb","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"一个合适大小的位数组保存数据"}]}]},{"ID":"20240201213674-x1ldjft","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213674-x1ldjft","updated":"20240201213674"},"Children":[{"ID":"20240201213675-7gjy25n","Type":"NodeParagraph","Properties":{"id":"20240201213675-7gjy25n","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"几个不同的哈希函数"}]}]},{"ID":"20240201213676-95h7nxs","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213676-95h7nxs","updated":"20240201213676"},"Children":[{"ID":"20240201213677-fct4jiv","Type":"NodeParagraph","Properties":{"id":"20240201213677-fct4jiv","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"添加元素到位数组（布隆过滤器）的方法实现"}]}]},{"ID":"20240201213678-9cc9cqo","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213678-9cc9cqo","updated":"20240201213678"},"Children":[{"ID":"20240201213679-cm13773","Type":"NodeParagraph","Properties":{"id":"20240201213679-cm13773","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"判断给定元素是否存在于位数组（布隆过滤器）的方法实现。"}]}]}]},{"ID":"20240201213680-sq6nkkb","Type":"NodeParagraph","Properties":{"id":"20240201213680-sq6nkkb","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"下面给出一个我觉得写的还算不错的代码（参考网上已有代码改进得到，对于所有类型对象皆适用）："}]},{"ID":"20240201213681-mbuqpq8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213681-mbuqpq8","updated":"20240201213681"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.BitSet;\n\npublic class MyBloomFilter {\n\n    /**\n     * 位数组的大小\n     */\n    private static final int DEFAULT_SIZE = 2 \u003c\u003c 24;\n    /**\n     * 通过这个数组可以创建 6 个不同的哈希函数\n     */\n    private static final int[] SEEDS = new int[]{3, 13, 46, 71, 91, 134};\n\n    /**\n     * 位数组。数组中的元素只能是 0 或者 1\n     */\n    private BitSet bits = new BitSet(DEFAULT_SIZE);\n\n    /**\n     * 存放包含 hash 函数的类的数组\n     */\n    private SimpleHash[] func = new SimpleHash[SEEDS.length];\n\n    /**\n     * 初始化多个包含 hash 函数的类的数组，每个类中的 hash 函数都不一样\n     */\n    public MyBloomFilter() {\n        // 初始化多个不同的 Hash 函数\n        for (int i = 0; i \u003c SEEDS.length; i++) {\n            func[i] = new SimpleHash(DEFAULT_SIZE, SEEDS[i]);\n        }\n    }\n\n    /**\n     * 添加元素到位数组\n     */\n    public void add(Object value) {\n        for (SimpleHash f : func) {\n            bits.set(f.hash(value), true);\n        }\n    }\n\n    /**\n     * 判断指定元素是否存在于位数组\n     */\n    public boolean contains(Object value) {\n        boolean ret = true;\n        for (SimpleHash f : func) {\n            ret = ret \u0026\u0026 bits.get(f.hash(value));\n        }\n        return ret;\n    }\n\n    /**\n     * 静态内部类。用于 hash 操作！\n     */\n    public static class SimpleHash {\n\n        private int cap;\n        private int seed;\n\n        public SimpleHash(int cap, int seed) {\n            this.cap = cap;\n            this.seed = seed;\n        }\n\n        /**\n         * 计算 hash 值\n         */\n        public int hash(Object value) {\n            int h;\n            return (value == null) ? 0 : Math.abs(seed * (cap - 1) \u0026 ((h = value.hashCode()) ^ (h \u003e\u003e\u003e 16)));\n        }\n\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213682-ity5pnv","Type":"NodeParagraph","Properties":{"id":"20240201213682-ity5pnv","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"测试："}]},{"ID":"20240201213683-mbjaz4y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213683-mbjaz4y","updated":"20240201213683"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String value1 = \"https://javaguide.cn/\";\nString value2 = \"https://github.com/Snailclimb\";\nMyBloomFilter filter = new MyBloomFilter();\nSystem.out.println(filter.contains(value1));\nSystem.out.println(filter.contains(value2));\nfilter.add(value1);\nfilter.add(value2);\nSystem.out.println(filter.contains(value1));\nSystem.out.println(filter.contains(value2));\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213684-ohf2c2t","Type":"NodeParagraph","Properties":{"id":"20240201213684-ohf2c2t","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"Output:"}]},{"ID":"20240201213685-z45qm56","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213685-z45qm56","updated":"20240201213685"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"false\nfalse\ntrue\ntrue\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213686-sysafq8","Type":"NodeParagraph","Properties":{"id":"20240201213686-sysafq8","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"测试："}]},{"ID":"20240201213687-vgo0gyw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213687-vgo0gyw","updated":"20240201213687"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Integer value1 = 13423;\nInteger value2 = 22131;\nMyBloomFilter filter = new MyBloomFilter();\nSystem.out.println(filter.contains(value1));\nSystem.out.println(filter.contains(value2));\nfilter.add(value1);\nfilter.add(value2);\nSystem.out.println(filter.contains(value1));\nSystem.out.println(filter.contains(value2));\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213688-0p0p6l3","Type":"NodeParagraph","Properties":{"id":"20240201213688-0p0p6l3","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"Output:"}]},{"ID":"20240201213689-id5qdd8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213689-id5qdd8","updated":"20240201213689"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"false\nfalse\ntrue\ntrue\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213690-u3ikvcy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213690-u3ikvcy","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"利用 Google 开源的 Guava 中自带的布隆过滤器"}]},{"ID":"20240201213691-pz0ib67","Type":"NodeParagraph","Properties":{"id":"20240201213691-pz0ib67","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"自己实现的目的主要是为了让自己搞懂布隆过滤器的原理，Guava 中布隆过滤器的实现算是比较权威的，所以实际项目中我们不需要手动实现一个布隆过滤器。"}]},{"ID":"20240201213692-8mm57la","Type":"NodeParagraph","Properties":{"id":"20240201213692-8mm57la","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"首先我们需要在项目中引入 Guava 的依赖："}]},{"ID":"20240201213693-o2bk64q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213693-o2bk64q","updated":"20240201213693"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cdependency\u003e\n    \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n    \u003cartifactId\u003eguava\u003c/artifactId\u003e\n    \u003cversion\u003e28.0-jre\u003c/version\u003e\n\u003c/dependency\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213694-rv3ez0n","Type":"NodeParagraph","Properties":{"id":"20240201213694-rv3ez0n","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"实际使用如下："}]},{"ID":"20240201213695-hn9nz0q","Type":"NodeParagraph","Properties":{"id":"20240201213695-hn9nz0q","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"我们创建了一个最多存放 最多 1500 个整数的布隆过滤器，并且我们可以容忍误判的概率为百分之（0.01）"}]},{"ID":"20240201213696-0lfgkkg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213696-0lfgkkg","updated":"20240201213696"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建布隆过滤器对象\nBloomFilter\u003cInteger\u003e filter = BloomFilter.create(\n    Funnels.integerFunnel(),\n    1500,\n    0.01);\n// 判断指定元素是否存在\nSystem.out.println(filter.mightContain(1));\nSystem.out.println(filter.mightContain(2));\n// 将元素添加进布隆过滤器\nfilter.put(1);\nfilter.put(2);\nSystem.out.println(filter.mightContain(1));\nSystem.out.println(filter.mightContain(2));\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213697-302i5o4","Type":"NodeParagraph","Properties":{"id":"20240201213697-302i5o4","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"在我们的示例中，当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mightContain()"},{"Type":"NodeText","Data":" 方法返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"true"},{"Type":"NodeText","Data":" 时，我们可以 99％确定该元素在过滤器中，当过滤器返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"false"},{"Type":"NodeText","Data":" 时，我们可以 100％确定该元素不存在于过滤器中。"}]},{"ID":"20240201213698-wc8radl","Type":"NodeParagraph","Properties":{"id":"20240201213698-wc8radl","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Guava 提供的布隆过滤器的实现还是很不错的（想要详细了解的可以看一下它的源码实现），但是它有一个重大的缺陷就是只能单机使用（另外，容量扩展也不容易），而现在互联网一般都是分布式的场景。为了解决这个问题，我们就需要用到 Redis 中的布隆过滤器了。"}]},{"ID":"20240201213699-g0qlyzs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213699-g0qlyzs","updated":"20240201213699"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 中的布隆过滤器"}]},{"ID":"20240201213700-xm5df79","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213700-xm5df79","updated":"20240201213700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"介绍"}]},{"ID":"20240201213701-k0e5vub","Type":"NodeParagraph","Properties":{"id":"20240201213701-k0e5vub","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"Redis v4.0 之后有了 Module（模块/插件） 功能，Redis Modules 让 Redis 可以使用外部模块扩展其功能 。布隆过滤器就是其中的 Module。详情可以查看 Redis 官方对 Redis Modules 的介绍："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://redis.io/modules","TextMarkTextContent":"https://redis.io/modules"}]},{"ID":"20240201213702-7i2kfpp","Type":"NodeParagraph","Properties":{"id":"20240201213702-7i2kfpp","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"另外，官网推荐了一个 RedisBloom 作为 Redis 布隆过滤器的 Module，地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/RedisBloom/RedisBloom","TextMarkTextContent":"https://github.com/RedisBloom/RedisBloom"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其他还有："}]},{"ID":"20240201213703-fqyiks7","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-fqyiks7","updated":"20240201213703"},"Children":[{"ID":"20240201213704-a57v50t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-a57v50t","updated":"20240201213704"},"Children":[{"ID":"20240201213705-dtd3a99","Type":"NodeParagraph","Properties":{"id":"20240201213705-dtd3a99","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"redis-lua-scaling-bloom-filter（lua 脚本实现）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter","TextMarkTextContent":"https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter"}]}]},{"ID":"20240201213706-9hdaqo8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-9hdaqo8","updated":"20240201213706"},"Children":[{"ID":"20240201213707-gvste1i","Type":"NodeParagraph","Properties":{"id":"20240201213707-gvste1i","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"pyreBloom（Python 中的快速 Redis 布隆过滤器）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/seomoz/pyreBloom","TextMarkTextContent":"https://github.com/seomoz/pyreBloom"}]}]},{"ID":"20240201213708-6k69jmm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-6k69jmm","updated":"20240201213708"},"Children":[{"ID":"20240201213709-3xakc9v","Type":"NodeParagraph","Properties":{"id":"20240201213709-3xakc9v","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213710-66gcubu","Type":"NodeParagraph","Properties":{"id":"20240201213710-66gcubu","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"RedisBloom 提供了多种语言的客户端支持，包括：Python、Java、JavaScript 和 PHP。"}]},{"ID":"20240201213711-10qcn6j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213711-10qcn6j","updated":"20240201213711"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Docker 安装"}]},{"ID":"20240201213712-4tajh37","Type":"NodeParagraph","Properties":{"id":"20240201213712-4tajh37","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"如果我们需要体验 Redis 中的布隆过滤器非常简单，通过 Docker 就可以了！我们直接在 Google 搜索 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"docker redis bloomfilter"},{"Type":"NodeText","Data":" 然后在排除广告的第一条搜素结果就找到了我们想要的答案（这是我平常解决问题的一种方式，分享一下），具体地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://hub.docker.com/r/redislabs/rebloom/","TextMarkTextContent":"https://hub.docker.com/r/redislabs/rebloom/"},{"Type":"NodeText","Data":" （介绍的很详细 ）。"}]},{"ID":"20240201213713-pls0qut","Type":"NodeParagraph","Properties":{"id":"20240201213713-pls0qut","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体操作如下："}]},{"ID":"20240201213714-sgh8stb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213714-sgh8stb","updated":"20240201213714"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"➜  ~ docker run -p 6379:6379 --name redis-redisbloom redislabs/rebloom:latest\n➜  ~ docker exec -it redis-redisbloom bash\nroot@21396d02c252:/data# redis-cli\n127.0.0.1:6379\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213715-a72akex","Type":"NodeParagraph","Properties":{"id":"20240201213715-a72akex","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意：当前 rebloom 镜像已经被废弃，官方推荐使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://hub.docker.com/r/redis/redis-stack","TextMarkTextContent":"redis-stack"}]},{"ID":"20240201213716-8ozj3tj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213716-8ozj3tj","updated":"20240201213716"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常用命令一览"}]},{"ID":"20240201213717-7qgrs8r","Type":"NodeBlockquote","Properties":{"id":"20240201213717-7qgrs8r","updated":"20240201213717"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213718-hsns72x","Type":"NodeParagraph","Properties":{"id":"20240201213718-hsns72x","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"注意：key : 布隆过滤器的名称，item : 添加的元素。"}]}]},{"ID":"20240201213719-1t3o3z2","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213719-1t3o3z2","updated":"20240201213719"},"Children":[{"ID":"20240201213720-93pxpzw","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213720-93pxpzw","updated":"20240201213720"},"Children":[{"ID":"20240201213721-0goe9bg","Type":"NodeParagraph","Properties":{"id":"20240201213721-0goe9bg","updated":"20240201213721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.ADD"},{"Type":"NodeText","Data":"：将元素添加到布隆过滤器中，如果该过滤器尚不存在，则创建该过滤器。格式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.ADD {key} {item}"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213722-wdy30q7","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213722-wdy30q7","updated":"20240201213722"},"Children":[{"ID":"20240201213723-kge51c1","Type":"NodeParagraph","Properties":{"id":"20240201213723-kge51c1","updated":"20240201213723"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.MADD"},{"Type":"NodeText","Data":" : 将一个或多个元素添加到“布隆过滤器”中，并创建一个尚不存在的过滤器。该命令的操作方式"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.ADD"},{"Type":"NodeText","Data":"与之相同，只不过它允许多个输入并返回多个值。格式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.MADD {key} {item} [item ...]"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213724-vxgy308","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213724-vxgy308","updated":"20240201213724"},"Children":[{"ID":"20240201213725-02fbrj1","Type":"NodeParagraph","Properties":{"id":"20240201213725-02fbrj1","updated":"20240201213725"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.EXISTS"},{"Type":"NodeText","Data":" : 确定元素是否在布隆过滤器中存在。格式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.EXISTS {key} {item}"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213726-4ww4s0z","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213726-4ww4s0z","updated":"20240201213726"},"Children":[{"ID":"20240201213727-ac8qizn","Type":"NodeParagraph","Properties":{"id":"20240201213727-ac8qizn","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.MEXISTS"},{"Type":"NodeText","Data":"：确定一个或者多个元素是否在布隆过滤器中存在格式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.MEXISTS {key} {item} [item ...]"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213728-iijg8by","Type":"NodeParagraph","Properties":{"id":"20240201213728-iijg8by","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"另外， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.RESERVE"},{"Type":"NodeText","Data":" 命令需要单独介绍一下："}]},{"ID":"20240201213729-7ztqsh2","Type":"NodeParagraph","Properties":{"id":"20240201213729-7ztqsh2","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"这个命令的格式如下："}]},{"ID":"20240201213730-j3ihkrm","Type":"NodeParagraph","Properties":{"id":"20240201213730-j3ihkrm","updated":"20240201213730"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BF.RESERVE {key} {error_rate} {capacity} [EXPANSION expansion]"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213731-76bhb7e","Type":"NodeParagraph","Properties":{"id":"20240201213731-76bhb7e","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"下面简单介绍一下每个参数的具体含义："}]},{"ID":"20240201213732-spi6xbw","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213732-spi6xbw","updated":"20240201213732"},"Children":[{"ID":"20240201213733-a6nuie1","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213733-a6nuie1","updated":"20240201213733"},"Children":[{"ID":"20240201213734-qf2rkci","Type":"NodeParagraph","Properties":{"id":"20240201213734-qf2rkci","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"key：布隆过滤器的名称"}]}]},{"ID":"20240201213735-ukqsdw1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213735-ukqsdw1","updated":"20240201213735"},"Children":[{"ID":"20240201213736-nekk7ow","Type":"NodeParagraph","Properties":{"id":"20240201213736-nekk7ow","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"error_rate : 期望的误报率。该值必须介于 0 到 1 之间。例如，对于期望的误报率 0.1％（1000 中为 1），error_rate 应该设置为 0.001。该数字越接近零，则每个项目的内存消耗越大，并且每个操作的 CPU 使用率越高。"}]}]},{"ID":"20240201213737-izjrdae","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213737-izjrdae","updated":"20240201213737"},"Children":[{"ID":"20240201213738-c5j6c1w","Type":"NodeParagraph","Properties":{"id":"20240201213738-c5j6c1w","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"capacity: 过滤器的容量。当实际存储的元素个数超过这个值之后，性能将开始下降。实际的降级将取决于超出限制的程度。随着过滤器元素数量呈指数增长，性能将线性下降。"}]}]}]},{"ID":"20240201213739-7c1xjqy","Type":"NodeParagraph","Properties":{"id":"20240201213739-7c1xjqy","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"可选参数："}]},{"ID":"20240201213740-9znu1zb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-9znu1zb","updated":"20240201213740"},"Children":[{"ID":"20240201213741-dcdzp3w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-dcdzp3w","updated":"20240201213741"},"Children":[{"ID":"20240201213742-imlwpqn","Type":"NodeParagraph","Properties":{"id":"20240201213742-imlwpqn","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"expansion"},{"Type":"NodeText","Data":"。默认扩展值为 2。这意味着每个后续子过滤器将是前一个子过滤器的两倍。"}]}]}]},{"ID":"20240201213743-w8kqpf6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213743-w8kqpf6","updated":"20240201213743"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实际使用"}]},{"ID":"20240201213744-848huvk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2hlbGw=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213744-848huvk","updated":"20240201213744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e BF.ADD myFilter java\n(integer) 1\n127.0.0.1:6379\u003e BF.ADD myFilter javaguide\n(integer) 1\n127.0.0.1:6379\u003e BF.EXISTS myFilter java\n(integer) 1\n127.0.0.1:6379\u003e BF.EXISTS myFilter javaguide\n(integer) 1\n127.0.0.1:6379\u003e BF.EXISTS myFilter github\n(integer) 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213745-73wmb42","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-73wmb42","updated":"20240201213745"}}]}