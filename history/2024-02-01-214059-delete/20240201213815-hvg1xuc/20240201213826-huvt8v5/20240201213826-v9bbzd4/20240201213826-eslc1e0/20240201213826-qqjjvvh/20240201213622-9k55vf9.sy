{"ID":"20240201213622-9k55vf9","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213622-9k55vf9","title":"tcp-reliability-guarantee","updated":"20240201213622"},"Children":[{"ID":"20240201213623-2d0336h","Type":"NodeThematicBreak","Properties":{"id":"20240201213623-2d0336h","updated":"20240201213623"}},{"ID":"20240201213624-x96n9t5","Type":"NodeParagraph","Properties":{"id":"20240201213624-x96n9t5","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"title: TCP 传输可靠性保障（传输层）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 计算机基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213625-7nonxes","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-7nonxes","updated":"20240201213625"},"Children":[{"ID":"20240201213626-meidx7j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213626-meidx7j","updated":"20240201213626"},"Children":[{"ID":"20240201213627-af3ca0e","Type":"NodeParagraph","Properties":{"id":"20240201213627-af3ca0e","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"计算机网络"}]}]}]},{"ID":"20240201213628-avtsmkd","Type":"NodeThematicBreak","Properties":{"id":"20240201213628-avtsmkd","updated":"20240201213628"}},{"ID":"20240201213629-rhzsek2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213629-rhzsek2","updated":"20240201213629"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"TCP 如何保证传输的可靠性？"}]},{"ID":"20240201213630-m6f9rxv","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213630-m6f9rxv","updated":"20240201213630"},"Children":[{"ID":"20240201213631-44dl3rr","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213631-44dl3rr","updated":"20240201213631"},"Children":[{"ID":"20240201213632-l46zktr","Type":"NodeParagraph","Properties":{"id":"20240201213632-l46zktr","updated":"20240201213632"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基于数据块传输"},{"Type":"NodeText","Data":"：应用数据被分割成 TCP 认为最适合发送的数据块，再传输给网络层，数据块被称为报文段或段。"}]}]},{"ID":"20240201213633-ohltkcx","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213633-ohltkcx","updated":"20240201213633"},"Children":[{"ID":"20240201213634-fwk51m6","Type":"NodeParagraph","Properties":{"id":"20240201213634-fwk51m6","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对失序数据包重新排序以及去重"},{"Type":"NodeText","Data":"：TCP 为了保证不发生丢包，就给每个包一个序列号，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据就可以实现数据包去重。"}]}]},{"ID":"20240201213635-v6vlqgv","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213635-v6vlqgv","updated":"20240201213635"},"Children":[{"ID":"20240201213636-h4s7qhn","Type":"NodeParagraph","Properties":{"id":"20240201213636-h4s7qhn","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"校验和"},{"Type":"NodeText","Data":" : TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。"}]}]},{"ID":"20240201213637-uyul7k2","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213637-uyul7k2","updated":"20240201213637"},"Children":[{"ID":"20240201213638-shboe75","Type":"NodeParagraph","Properties":{"id":"20240201213638-shboe75","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重传机制"},{"Type":"NodeText","Data":" : 在数据包丢失或延迟的情况下，重新发送数据包，直到收到对方的确认应答（ACK）。TCP 重传机制主要有：基于计时器的重传（也就是超时重传）、快速重传（基于接收端的反馈信息来引发重传）、SACK（在快速重传的基础上，返回最近收到的报文段的序列号范围，这样客户端就知道，哪些数据包已经到达服务器了）、D-SACK（重复 SACK，在 SACK 的基础上，额外携带信息，告知发送方有哪些数据包自己重复接收了）。关于重传机制的详细介绍，可以查看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/101702312","TextMarkTextContent":"详解 TCP 超时与重传机制"},{"Type":"NodeText","Data":"这篇文章。"}]}]},{"ID":"20240201213639-0widrm2","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213639-0widrm2","updated":"20240201213639"},"Children":[{"ID":"20240201213640-66wuadx","Type":"NodeParagraph","Properties":{"id":"20240201213640-66wuadx","updated":"20240201213640"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"流量控制"},{"Type":"NodeText","Data":" : TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。"}]}]},{"ID":"20240201213641-xf83d9b","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213641-xf83d9b","updated":"20240201213641"},"Children":[{"ID":"20240201213642-gldn7ap","Type":"NodeParagraph","Properties":{"id":"20240201213642-gldn7ap","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拥塞控制"},{"Type":"NodeText","Data":" : 当网络拥塞时，减少数据的发送。TCP 在发送数据的时候，需要考虑两个因素：一是接收方的接收能力，二是网络的拥塞程度。接收方的接收能力由滑动窗口表示，表示接收方还有多少缓冲区可以用来接收数据。网络的拥塞程度由拥塞窗口表示，它是发送方根据网络状况自己维护的一个值，表示发送方认为可以在网络中传输的数据量。发送方发送数据的大小是滑动窗口和拥塞窗口的最小值，这样可以保证发送方既不会超过接收方的接收能力，也不会造成网络的过度拥塞。"}]}]}]},{"ID":"20240201213643-ormhyj2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213643-ormhyj2","updated":"20240201213643"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"TCP 如何实现流量控制？"}]},{"ID":"20240201213644-sofhyq8","Type":"NodeParagraph","Properties":{"id":"20240201213644-sofhyq8","updated":"20240201213644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。"},{"Type":"NodeText","Data":" 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。"}]},{"ID":"20240201213645-jifl33l","Type":"NodeParagraph","Properties":{"id":"20240201213645-jifl33l","updated":"20240201213645"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么需要流量控制?"},{"Type":"NodeText","Data":" 这是因为双方在通信的时候，发送方的速率与接收方的速率是不一定相等，如果发送方的发送速率太快，会导致接收方处理不过来。如果接收方处理不过来的话，就只能把处理不过来的数据存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"接收缓冲区(Receiving Buffers)"},{"Type":"NodeText","Data":" 里（失序的数据包也会被存放在缓存区里）。如果缓存区满了发送方还在狂发数据的话，接收方只能把收到的数据包丢掉。出现丢包问题的同时又疯狂浪费着珍贵的网络资源。因此，我们需要控制发送方的发送速率，让接收方与发送方处于一种动态平衡才好。"}]},{"ID":"20240201213646-ti23545","Type":"NodeParagraph","Properties":{"id":"20240201213646-ti23545","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"这里需要注意的是（常见误区）："}]},{"ID":"20240201213647-ke5ig7x","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-ke5ig7x","updated":"20240201213647"},"Children":[{"ID":"20240201213648-kddx0qd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-kddx0qd","updated":"20240201213648"},"Children":[{"ID":"20240201213649-ep9fbw8","Type":"NodeParagraph","Properties":{"id":"20240201213649-ep9fbw8","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"发送端不等同于客户端"}]}]},{"ID":"20240201213650-taexuo5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-taexuo5","updated":"20240201213650"},"Children":[{"ID":"20240201213651-lxtm95j","Type":"NodeParagraph","Properties":{"id":"20240201213651-lxtm95j","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"接收端不等同于服务端"}]}]}]},{"ID":"20240201213652-me5eglr","Type":"NodeParagraph","Properties":{"id":"20240201213652-me5eglr","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"TCP 为全双工(Full-Duplex, FDX)通信，双方可以进行双向通信，客户端和服务端既可能是发送端又可能是服务端。因此，两端各有一个发送缓冲区与接收缓冲区，两端都各自维护一个发送窗口和一个接收窗口。接收窗口大小取决于应用、系统、硬件的限制（TCP 传输速率不能大于应用的数据处理速率）。通信双方的发送窗口和接收窗口的要求相同"}]},{"ID":"20240201213653-37uqagr","Type":"NodeParagraph","Properties":{"id":"20240201213653-37uqagr","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TCP 发送窗口可以划分成四个部分"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213654-siao734","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213654-siao734","updated":"20240201213654"},"Children":[{"ID":"20240201213655-o28nmcp","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213655-o28nmcp","updated":"20240201213655"},"Children":[{"ID":"20240201213656-9j88xy6","Type":"NodeParagraph","Properties":{"id":"20240201213656-9j88xy6","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"已经发送并且确认的 TCP 段（已经发送并确认）；"}]}]},{"ID":"20240201213657-zter05v","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213657-zter05v","updated":"20240201213657"},"Children":[{"ID":"20240201213658-droowg8","Type":"NodeParagraph","Properties":{"id":"20240201213658-droowg8","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"已经发送但是没有确认的 TCP 段（已经发送未确认）；"}]}]},{"ID":"20240201213659-phbkf3d","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213659-phbkf3d","updated":"20240201213659"},"Children":[{"ID":"20240201213660-9q5vrhb","Type":"NodeParagraph","Properties":{"id":"20240201213660-9q5vrhb","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"未发送但是接收方准备接收的 TCP 段（可以发送）；"}]}]},{"ID":"20240201213661-frem8x0","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213661-frem8x0","updated":"20240201213661"},"Children":[{"ID":"20240201213662-azt86px","Type":"NodeParagraph","Properties":{"id":"20240201213662-azt86px","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"未发送并且接收方也并未准备接受的 TCP 段（不可发送）。"}]}]}]},{"ID":"20240201213663-amph7xq","Type":"NodeParagraph","Properties":{"id":"20240201213663-amph7xq","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TCP 发送窗口结构图示"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213664-a0xreyt","Type":"NodeParagraph","Properties":{"id":"20240201213664-a0xreyt","updated":"20240201213664"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"TCP发送窗口结构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-send-window.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213665-p44ljpi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-p44ljpi","updated":"20240201213665"},"Children":[{"ID":"20240201213666-m2rtzjm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213666-m2rtzjm","updated":"20240201213666"},"Children":[{"ID":"20240201213667-6b95js4","Type":"NodeParagraph","Properties":{"id":"20240201213667-6b95js4","updated":"20240201213667"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SND.WND"},{"Type":"NodeText","Data":"：发送窗口。"}]}]},{"ID":"20240201213668-4v3my99","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213668-4v3my99","updated":"20240201213668"},"Children":[{"ID":"20240201213669-885x3h4","Type":"NodeParagraph","Properties":{"id":"20240201213669-885x3h4","updated":"20240201213669"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SND.UNA"},{"Type":"NodeText","Data":"：Send Unacknowledged 指针，指向发送窗口的第一个字节。"}]}]},{"ID":"20240201213670-csn0n3z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-csn0n3z","updated":"20240201213670"},"Children":[{"ID":"20240201213671-658o6ol","Type":"NodeParagraph","Properties":{"id":"20240201213671-658o6ol","updated":"20240201213671"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SND.NXT"},{"Type":"NodeText","Data":"：Send Next 指针，指向可用窗口的第一个字节。"}]}]}]},{"ID":"20240201213672-b94tz2x","Type":"NodeParagraph","Properties":{"id":"20240201213672-b94tz2x","updated":"20240201213672"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可用窗口大小"},{"Type":"NodeText","Data":" = "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SND.UNA + SND.WND - SND.NXT"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213673-q6xqoxk","Type":"NodeParagraph","Properties":{"id":"20240201213673-q6xqoxk","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TCP 接收窗口可以划分成三个部分"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213674-rtaz75q","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213674-rtaz75q","updated":"20240201213674"},"Children":[{"ID":"20240201213675-xr3w9bj","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213675-xr3w9bj","updated":"20240201213675"},"Children":[{"ID":"20240201213676-2x2st9x","Type":"NodeParagraph","Properties":{"id":"20240201213676-2x2st9x","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"已经接收并且已经确认的 TCP 段（已经接收并确认）；"}]}]},{"ID":"20240201213677-7m7zjm5","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213677-7m7zjm5","updated":"20240201213677"},"Children":[{"ID":"20240201213678-9wtz3lg","Type":"NodeParagraph","Properties":{"id":"20240201213678-9wtz3lg","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"等待接收且允许发送方发送 TCP 段（可以接收未确认）；"}]}]},{"ID":"20240201213679-g40ys8r","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213679-g40ys8r","updated":"20240201213679"},"Children":[{"ID":"20240201213680-d18pdsh","Type":"NodeParagraph","Properties":{"id":"20240201213680-d18pdsh","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"不可接收且不允许发送方发送 TCP 段（不可接收）。"}]}]}]},{"ID":"20240201213681-jff9sed","Type":"NodeParagraph","Properties":{"id":"20240201213681-jff9sed","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TCP 接收窗口结构图示"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213682-wo31cg6","Type":"NodeParagraph","Properties":{"id":"20240201213682-wo31cg6","updated":"20240201213682"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"TCP接收窗口结构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-receive-window.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213683-8o7ckx7","Type":"NodeParagraph","Properties":{"id":"20240201213683-8o7ckx7","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"接收窗口的大小是根据接收端处理数据的速度动态调整的。"},{"Type":"NodeText","Data":" 如果接收端读取数据快，接收窗口可能会扩大。 否则，它可能会缩小。"}]},{"ID":"20240201213684-konds7i","Type":"NodeParagraph","Properties":{"id":"20240201213684-konds7i","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"另外，这里的滑动窗口大小只是为了演示使用，实际窗口大小通常会远远大于这个值。"}]},{"ID":"20240201213685-mq984pt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213685-mq984pt","updated":"20240201213685"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"TCP 的拥塞控制是怎么实现的？"}]},{"ID":"20240201213686-n6mh1gv","Type":"NodeParagraph","Properties":{"id":"20240201213686-n6mh1gv","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。"}]},{"ID":"20240201213687-35hydud","Type":"NodeParagraph","Properties":{"id":"20240201213687-35hydud","updated":"20240201213687"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"TCP的拥塞控制","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-congestion-control.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213688-7ygu4n5","Type":"NodeParagraph","Properties":{"id":"20240201213688-7ygu4n5","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"为了进行拥塞控制，TCP 发送方要维持一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拥塞窗口(cwnd)"},{"Type":"NodeText","Data":" 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。"}]},{"ID":"20240201213689-nlt4058","Type":"NodeParagraph","Properties":{"id":"20240201213689-nlt4058","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"TCP 的拥塞控制采用了四种算法，即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"慢开始"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拥塞避免"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快重传"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快恢复"},{"Type":"NodeText","Data":"。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。"}]},{"ID":"20240201213690-twpwti6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-twpwti6","updated":"20240201213690"},"Children":[{"ID":"20240201213691-9gsu8z1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213691-9gsu8z1","updated":"20240201213691"},"Children":[{"ID":"20240201213692-m79g5zq","Type":"NodeParagraph","Properties":{"id":"20240201213692-m79g5zq","updated":"20240201213692"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"慢开始："},{"Type":"NodeText","Data":" 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd 初始值为 1，每经过一个传播轮次，cwnd 加倍。"}]}]},{"ID":"20240201213693-iqngfb7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-iqngfb7","updated":"20240201213693"},"Children":[{"ID":"20240201213694-7el1phm","Type":"NodeParagraph","Properties":{"id":"20240201213694-7el1phm","updated":"20240201213694"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拥塞避免："},{"Type":"NodeText","Data":" 拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送方的 cwnd 加 1."}]}]},{"ID":"20240201213695-1we9225","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-1we9225","updated":"20240201213695"},"Children":[{"ID":"20240201213696-o7lq7r5","Type":"NodeParagraph","Properties":{"id":"20240201213696-o7lq7r5","updated":"20240201213696"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快重传与快恢复："},{"Type":"NodeText","Data":" 在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。"}]}]}]},{"ID":"20240201213697-d3ewiab","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213697-d3ewiab","updated":"20240201213697"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ARQ 协议了解吗?"}]},{"ID":"20240201213698-l42q8gd","Type":"NodeParagraph","Properties":{"id":"20240201213698-l42q8gd","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"自动重传请求"},{"Type":"NodeText","Data":"（Automatic Repeat-reQuest，ARQ）是 OSI 模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认信息（Acknowledgements，就是我们常说的 ACK），它通常会重新发送，直到收到确认或者重试超过一定的次数。"}]},{"ID":"20240201213699-2r4evkx","Type":"NodeParagraph","Properties":{"id":"20240201213699-2r4evkx","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"ARQ 包括停止等待 ARQ 协议和连续 ARQ 协议。"}]},{"ID":"20240201213700-62rczlr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213700-62rczlr","updated":"20240201213700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"停止等待 ARQ 协议"}]},{"ID":"20240201213701-fprpspw","Type":"NodeParagraph","Properties":{"id":"20240201213701-fprpspw","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复 ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组；"}]},{"ID":"20240201213702-omzfeyz","Type":"NodeParagraph","Properties":{"id":"20240201213702-omzfeyz","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。"}]},{"ID":"20240201213703-1shzd88","Type":"NodeParagraph","Properties":{"id":"20240201213703-1shzd88","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1) 无差错情况:"}]},{"ID":"20240201213704-kepo8pg","Type":"NodeParagraph","Properties":{"id":"20240201213704-kepo8pg","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。"}]},{"ID":"20240201213705-3n0t2l1","Type":"NodeParagraph","Properties":{"id":"20240201213705-3n0t2l1","updated":"20240201213705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2) 出现差错情况（超时重传）:"}]},{"ID":"20240201213706-pwugank","Type":"NodeParagraph","Properties":{"id":"20240201213706-pwugank","updated":"20240201213706"},"Children":[{"Type":"NodeText","Data":"停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"自动重传请求 ARQ"},{"Type":"NodeText","Data":" 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。"}]},{"ID":"20240201213707-zh8wenl","Type":"NodeParagraph","Properties":{"id":"20240201213707-zh8wenl","updated":"20240201213707"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3) 确认丢失和确认迟到"}]},{"ID":"20240201213708-b6hluhu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-b6hluhu","updated":"20240201213708"},"Children":[{"ID":"20240201213709-838lnw2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213709-838lnw2","updated":"20240201213709"},"Children":[{"ID":"20240201213710-wyikur1","Type":"NodeParagraph","Properties":{"id":"20240201213710-wyikur1","updated":"20240201213710"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"确认丢失"},{"Type":"NodeText","Data":"：确认消息在传输过程丢失。当 A 发送 M1 消息，B 收到后，B 向 A 发送了一个 M1 确认消息，但却在传输过程中丢失。而 A 并不知道，在超时计时过后，A 重传 M1 消息，B 再次收到该消息后采取以下两点措施：1. 丢弃这个重复的 M1 消息，不向上层交付。 2. 向 A 发送确认消息。（不会认为已经发送过了，就不再发送。A 能重传，就证明 B 的确认消息丢失）。"}]}]},{"ID":"20240201213711-7m3sbfr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213711-7m3sbfr","updated":"20240201213711"},"Children":[{"ID":"20240201213712-4klb7a5","Type":"NodeParagraph","Properties":{"id":"20240201213712-4klb7a5","updated":"20240201213712"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"确认迟到"},{"Type":"NodeText","Data":"：确认消息在传输过程中迟到。A 发送 M1 消息，B 收到并发送确认。在超时时间内没有收到确认消息，A 重传 M1 消息，B 仍然收到并继续发送确认消息（B 收到了 2 份 M1）。此时 A 收到了 B 第二次发送的确认消息。接着发送其他数据。过了一会，A 收到了 B 第一次发送的对 M1 的确认消息（A 也收到了 2 份确认消息）。处理如下：1. A 收到重复的确认后，直接丢弃。2. B 收到重复的 M1 后，也直接丢弃重复的 M1。"}]}]}]},{"ID":"20240201213713-0dydw6v","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213713-0dydw6v","updated":"20240201213713"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"连续 ARQ 协议"}]},{"ID":"20240201213714-qaknubk","Type":"NodeParagraph","Properties":{"id":"20240201213714-qaknubk","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。"}]},{"ID":"20240201213715-2fejxql","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213715-2fejxql","updated":"20240201213715"},"Children":[{"ID":"20240201213716-xkspsyh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213716-xkspsyh","updated":"20240201213716"},"Children":[{"ID":"20240201213717-ecbmowb","Type":"NodeParagraph","Properties":{"id":"20240201213717-ecbmowb","updated":"20240201213717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点："},{"Type":"NodeText","Data":" 信道利用率高，容易实现，即使确认丢失，也不必重传。"}]}]},{"ID":"20240201213718-0vawpk1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-0vawpk1","updated":"20240201213718"},"Children":[{"ID":"20240201213719-aqiob7p","Type":"NodeParagraph","Properties":{"id":"20240201213719-aqiob7p","updated":"20240201213719"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点："},{"Type":"NodeText","Data":" 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5 条 消息，中间第三条丢失（3 号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。"}]}]}]},{"ID":"20240201213720-uz6sfjf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213720-uz6sfjf","updated":"20240201213720"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"超时重传如何实现？超时重传时间怎么确定？"}]},{"ID":"20240201213721-6zut912","Type":"NodeParagraph","Properties":{"id":"20240201213721-6zut912","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"当发送方发送数据之后，它启动一个定时器，等待目的端确认收到这个报文段。接收端实体对已成功收到的包发回一个相应的确认信息（ACK）。如果发送端实体在合理的往返时延（RTT）内未收到确认消息，那么对应的数据包就被假设为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/丢包","TextMarkTextContent":"已丢失"},{"Type":"NodeText","Data":"并进行重传。"}]},{"ID":"20240201213722-9f4y641","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213722-9f4y641","updated":"20240201213722"},"Children":[{"ID":"20240201213723-jm405rm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-jm405rm","updated":"20240201213723"},"Children":[{"ID":"20240201213724-6imyx70","Type":"NodeParagraph","Properties":{"id":"20240201213724-6imyx70","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"RTT（Round Trip Time）：往返时间，也就是数据包从发出去到收到对应 ACK 的时间。"}]}]},{"ID":"20240201213725-o06uw6y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213725-o06uw6y","updated":"20240201213725"},"Children":[{"ID":"20240201213726-spfr6qq","Type":"NodeParagraph","Properties":{"id":"20240201213726-spfr6qq","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"RTO（Retransmission Time Out）：重传超时时间，即从数据发送时刻算起，超过这个时间便执行重传。"}]}]}]},{"ID":"20240201213727-tywesbr","Type":"NodeParagraph","Properties":{"id":"20240201213727-tywesbr","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"RTO 的确定是一个关键问题，因为它直接影响到 TCP 的性能和效率。如果 RTO 设置得太小，会导致不必要的重传，增加网络负担；如果 RTO 设置得太大，会导致数据传输的延迟，降低吞吐量。因此，RTO 应该根据网络的实际状况，动态地进行调整。"}]},{"ID":"20240201213728-1fx32r0","Type":"NodeParagraph","Properties":{"id":"20240201213728-1fx32r0","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"RTT 的值会随着网络的波动而变化，所以 TCP 不能直接使用 RTT 作为 RTO。为了动态地调整 RTO，TCP 协议采用了一些算法，如加权移动平均（EWMA）算法，Karn 算法，Jacobson 算法等，这些算法都是根据往返时延（RTT）的测量和变化来估计 RTO 的值。"}]},{"ID":"20240201213729-d93wow3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213729-d93wow3","updated":"20240201213729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213730-l3x4ghg","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213730-l3x4ghg","updated":"20240201213730"},"Children":[{"ID":"20240201213731-7fddkpf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213731-7fddkpf","updated":"20240201213731"},"Children":[{"ID":"20240201213732-41g9qvg","Type":"NodeParagraph","Properties":{"id":"20240201213732-41g9qvg","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"《计算机网络（第 7 版）》"}]}]},{"ID":"20240201213733-fowwkr7","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213733-fowwkr7","updated":"20240201213733"},"Children":[{"ID":"20240201213734-dkk65co","Type":"NodeParagraph","Properties":{"id":"20240201213734-dkk65co","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"《图解 HTTP》"}]}]},{"ID":"20240201213735-rbr6bvk","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213735-rbr6bvk","updated":"20240201213735"},"Children":[{"ID":"20240201213736-c8vzguc","Type":"NodeParagraph","Properties":{"id":"20240201213736-c8vzguc","updated":"20240201213736"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.9tut.com/tcp-and-udp-tutorial","TextMarkTextContent":"https://www.9tut.com/tcp-and-udp-tutorial"}]}]},{"ID":"20240201213737-q7m5kr0","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213737-q7m5kr0","updated":"20240201213737"},"Children":[{"ID":"20240201213738-ljjp4x1","Type":"NodeParagraph","Properties":{"id":"20240201213738-ljjp4x1","updated":"20240201213738"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/wolverinn/Waking-Up/blob/master/Computer Network.md","TextMarkTextContent":"https://github.com/wolverinn/Waking-Up/blob/master/Computer%20Network.md"}]}]},{"ID":"20240201213739-2mxnhfp","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213739-2mxnhfp","updated":"20240201213739"},"Children":[{"ID":"20240201213740-gl7cank","Type":"NodeParagraph","Properties":{"id":"20240201213740-gl7cank","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"TCP Flow Control—"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.brianstorti.com/tcp-flow-control/","TextMarkTextContent":"https://www.brianstorti.com/tcp-flow-control/"}]}]},{"ID":"20240201213741-o0do9ss","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213741-o0do9ss","updated":"20240201213741"},"Children":[{"ID":"20240201213742-f69h8oi","Type":"NodeParagraph","Properties":{"id":"20240201213742-f69h8oi","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"TCP 流量控制(Flow Control)："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://notfalse.net/24/tcp-flow-control","TextMarkTextContent":"https://notfalse.net/24/tcp-flow-control"}]}]},{"ID":"20240201213743-ztssluf","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213743-ztssluf","updated":"20240201213743"},"Children":[{"ID":"20240201213744-846p4oy","Type":"NodeParagraph","Properties":{"id":"20240201213744-846p4oy","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"TCP 之滑动窗口原理 : "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cloud.tencent.com/developer/article/1857363","TextMarkTextContent":"https://cloud.tencent.com/developer/article/1857363"}]}]}]},{"ID":"20240201213745-4rxm83s","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-4rxm83s","updated":"20240201213745"}}]}