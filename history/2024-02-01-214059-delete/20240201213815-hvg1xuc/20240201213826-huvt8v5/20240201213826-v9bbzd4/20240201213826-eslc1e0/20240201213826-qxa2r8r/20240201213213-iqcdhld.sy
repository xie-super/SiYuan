{"ID":"20240201213213-iqcdhld","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213213-iqcdhld","title":"operating-system-basic-questions-01","updated":"20240201213213"},"Children":[{"ID":"20240201213214-o9v4z36","Type":"NodeThematicBreak","Properties":{"id":"20240201213214-o9v4z36","updated":"20240201213214"}},{"ID":"20240201213215-1v5cu5e","Type":"NodeParagraph","Properties":{"id":"20240201213215-1v5cu5e","updated":"20240201213215"},"Children":[{"Type":"NodeText","Data":"title: 操作系统常见面试题总结(上)"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 计算机基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213216-thdukel","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213216-thdukel","updated":"20240201213216"},"Children":[{"ID":"20240201213217-f7z2xyy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213217-f7z2xyy","updated":"20240201213217"},"Children":[{"ID":"20240201213218-315jinl","Type":"NodeParagraph","Properties":{"id":"20240201213218-315jinl","updated":"20240201213218"},"Children":[{"Type":"NodeText","Data":"操作系统"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213219-nynl8z3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213219-nynl8z3","updated":"20240201213219"},"Children":[{"ID":"20240201213220-sa63pzn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213220-sa63pzn","updated":"20240201213220"},"Children":[{"ID":"20240201213221-h6b18np","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213221-h6b18np","updated":"20240201213221"},"Children":[{"ID":"20240201213222-3qzpci0","Type":"NodeParagraph","Properties":{"id":"20240201213222-3qzpci0","updated":"20240201213222"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213223-epajbs4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213223-epajbs4","updated":"20240201213223"},"Children":[{"ID":"20240201213224-bk3zlli","Type":"NodeParagraph","Properties":{"id":"20240201213224-bk3zlli","updated":"20240201213224"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 操作系统,进程,进程通信方式,死锁,操作系统内存管理,块表,多级页表,虚拟内存,页面置换算法"}]}]}]}]},{"ID":"20240201213225-eixbo7z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213225-eixbo7z","updated":"20240201213225"},"Children":[{"ID":"20240201213226-f3yyvf7","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213226-f3yyvf7","updated":"20240201213226"},"Children":[{"ID":"20240201213227-ljqt9yd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213227-ljqt9yd","updated":"20240201213227"},"Children":[{"ID":"20240201213228-vz7s9kx","Type":"NodeParagraph","Properties":{"id":"20240201213228-vz7s9kx","updated":"20240201213228"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213229-hkbakmn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213229-hkbakmn","updated":"20240201213229"},"Children":[{"ID":"20240201213230-jkfg0mb","Type":"NodeParagraph","Properties":{"id":"20240201213230-jkfg0mb","updated":"20240201213230"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 很多读者抱怨计算操作系统的知识点比较繁杂，自己也没有多少耐心去看，但是面试的时候又经常会遇到。所以，我带着我整理好的操作系统的常见问题来啦！这篇文章总结了一些我觉得比较重要的操作系统相关的问题比如进程管理、内存管理、虚拟内存等等。"}]}]}]}]}]},{"ID":"20240201213231-2nzoq60","Type":"NodeThematicBreak","Properties":{"id":"20240201213231-2nzoq60","updated":"20240201213231"}},{"ID":"20240201213232-5mclhdx","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @small-advertisement.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213232-5mclhdx","updated":"20240201213232"}},{"ID":"20240201213233-vwad4pi","Type":"NodeParagraph","Properties":{"id":"20240201213233-vwad4pi","updated":"20240201213233"},"Children":[{"Type":"NodeText","Data":"很多读者抱怨计算操作系统的知识点比较繁杂，自己也没有多少耐心去看，但是面试的时候又经常会遇到。所以，我带着我整理好的操作系统的常见问题来啦！这篇文章总结了一些我觉得比较重要的操作系统相关的问题比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"用户态和内核态、系统调用、进程和线程、死锁、内存管理、虚拟内存、文件系统"},{"Type":"NodeText","Data":"等等。"}]},{"ID":"20240201213234-1e5xoh4","Type":"NodeParagraph","Properties":{"id":"20240201213234-1e5xoh4","updated":"20240201213234"},"Children":[{"Type":"NodeText","Data":"这篇文章只是对一些操作系统比较重要概念的一个概览，深入学习的话，建议大家还是老老实实地去看书。另外， 这篇文章的很多内容参考了《现代操作系统》第三版这本书，非常感谢。"}]},{"ID":"20240201213235-ctvrnuv","Type":"NodeParagraph","Properties":{"id":"20240201213235-ctvrnuv","updated":"20240201213235"},"Children":[{"Type":"NodeText","Data":"开始本文的内容之前，我们先聊聊为什么要学习操作系统。"}]},{"ID":"20240201213236-o2ia02w","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213236-o2ia02w","updated":"20240201213236"},"Children":[{"ID":"20240201213237-blsq7vc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213237-blsq7vc","updated":"20240201213237"},"Children":[{"ID":"20240201213238-b5jkj2q","Type":"NodeParagraph","Properties":{"id":"20240201213238-b5jkj2q","updated":"20240201213238"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从对个人能力方面提升来说"},{"Type":"NodeText","Data":"：操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。比如说我们开发的系统使用的缓存（比如 Redis）和操作系统的高速缓存就很像。CPU 中的高速缓存有很多种，不过大部分都是为了解决 CPU 处理速度和内存处理速度不对等的问题。我们还可以把内存看作外存的高速缓存，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。同样地，我们使用的 Redis 缓存就是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。高速缓存一般会按照局部性原理（2-8 原则）根据相应的淘汰算法保证缓存中的数据是经常会被访问的。我们平常使用的 Redis 缓存很多时候也会按照 2-8 原则去做，很多淘汰算法都和操作系统中的类似。既说了 2-8 原则，那就不得不提命中率了，这是所有缓存概念都通用的。简单来说也就是你要访问的数据有多少能直接在缓存中直接找到。命中率高的话，一般表明你的缓存设计比较合理，系统处理速度也相对较快。"}]}]},{"ID":"20240201213239-rqyszfg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213239-rqyszfg","updated":"20240201213239"},"Children":[{"ID":"20240201213240-3whqv6k","Type":"NodeParagraph","Properties":{"id":"20240201213240-3whqv6k","updated":"20240201213240"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从面试角度来说"},{"Type":"NodeText","Data":"：尤其是校招，对于操作系统方面知识的考察是非常非常多的。"}]}]}]},{"ID":"20240201213241-5azboc0","Type":"NodeParagraph","Properties":{"id":"20240201213241-5azboc0","updated":"20240201213241"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"简单来说，学习操作系统能够提高自己思考的深度以及对技术的理解力，并且，操作系统方面的知识也是面试必备。"}]},{"ID":"20240201213242-05ilne8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213242-05ilne8","updated":"20240201213242"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"操作系统基础"}]},{"ID":"20240201213243-psrfq1q","Type":"NodeParagraph","Properties":{"id":"20240201213243-psrfq1q","updated":"20240201213243"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/2020-8/image-20200807161118901.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213244-y24c9j3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213244-y24c9j3","updated":"20240201213244"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是操作系统？"}]},{"ID":"20240201213245-96xujv4","Type":"NodeParagraph","Properties":{"id":"20240201213245-96xujv4","updated":"20240201213245"},"Children":[{"Type":"NodeText","Data":"通过以下四点可以概括操作系统到底是什么："}]},{"ID":"20240201213246-mw4ziy0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213246-mw4ziy0","updated":"20240201213246"},"Children":[{"ID":"20240201213247-rass0xb","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213247-rass0xb","updated":"20240201213247"},"Children":[{"ID":"20240201213248-d2o5rfr","Type":"NodeParagraph","Properties":{"id":"20240201213248-d2o5rfr","updated":"20240201213248"},"Children":[{"Type":"NodeText","Data":"操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机的基石。"}]}]},{"ID":"20240201213249-i4ylb76","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213249-i4ylb76","updated":"20240201213249"},"Children":[{"ID":"20240201213250-byjn6ta","Type":"NodeParagraph","Properties":{"id":"20240201213250-byjn6ta","updated":"20240201213250"},"Children":[{"Type":"NodeText","Data":"操作系统本质上是一个运行在计算机上的软件程序 ，主要用于管理计算机硬件和软件资源。 举例：运行在你电脑上的所有应用程序都通过操作系统来调用系统内存以及磁盘等等硬件。"}]}]},{"ID":"20240201213251-gu448l7","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213251-gu448l7","updated":"20240201213251"},"Children":[{"ID":"20240201213252-fp12wyc","Type":"NodeParagraph","Properties":{"id":"20240201213252-fp12wyc","updated":"20240201213252"},"Children":[{"Type":"NodeText","Data":"操作系统存在屏蔽了硬件层的复杂性。 操作系统就像是硬件使用的负责人，统筹着各种相关事项。"}]}]},{"ID":"20240201213253-975gqsh","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213253-975gqsh","updated":"20240201213253"},"Children":[{"ID":"20240201213254-c71d5qh","Type":"NodeParagraph","Properties":{"id":"20240201213254-c71d5qh","updated":"20240201213254"},"Children":[{"Type":"NodeText","Data":"操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。"}]}]}]},{"ID":"20240201213255-ypqyd0s","Type":"NodeParagraph","Properties":{"id":"20240201213255-ypqyd0s","updated":"20240201213255"},"Children":[{"Type":"NodeText","Data":"很多人容易把操作系统的内核（Kernel）和中央处理器（CPU，Central Processing Unit）弄混。你可以简单从下面两点来区别："}]},{"ID":"20240201213256-a2jdqzp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213256-a2jdqzp","updated":"20240201213256"},"Children":[{"ID":"20240201213257-dtcblov","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213257-dtcblov","updated":"20240201213257"},"Children":[{"ID":"20240201213258-aswuiqp","Type":"NodeParagraph","Properties":{"id":"20240201213258-aswuiqp","updated":"20240201213258"},"Children":[{"Type":"NodeText","Data":"操作系统的内核（Kernel）属于操作系统层面，而 CPU 属于硬件。"}]}]},{"ID":"20240201213259-16ljyw1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213259-16ljyw1","updated":"20240201213259"},"Children":[{"ID":"20240201213260-ass7i7w","Type":"NodeParagraph","Properties":{"id":"20240201213260-ass7i7w","updated":"20240201213260"},"Children":[{"Type":"NodeText","Data":"CPU 主要提供运算，处理各种指令的能力。内核（Kernel）主要负责系统管理比如内存管理，它屏蔽了对硬件的操作。"}]}]}]},{"ID":"20240201213261-z6aoqau","Type":"NodeParagraph","Properties":{"id":"20240201213261-z6aoqau","updated":"20240201213261"},"Children":[{"Type":"NodeText","Data":"下图清晰说明了应用程序、内核、CPU 这三者的关系。"}]},{"ID":"20240201213262-sl5jbm0","Type":"NodeParagraph","Properties":{"id":"20240201213262-sl5jbm0","updated":"20240201213262"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Kernel_Layout","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/2020-8/Kernel_Layout.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213263-poar69u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213263-poar69u","updated":"20240201213263"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"操作系统主要有哪些功能？"}]},{"ID":"20240201213264-b8u9nzv","Type":"NodeParagraph","Properties":{"id":"20240201213264-b8u9nzv","updated":"20240201213264"},"Children":[{"Type":"NodeText","Data":"从资源管理的角度来看，操作系统有 6 大功能："}]},{"ID":"20240201213265-s12z3bn","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213265-s12z3bn","updated":"20240201213265"},"Children":[{"ID":"20240201213266-am7fgj7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213266-am7fgj7","updated":"20240201213266"},"Children":[{"ID":"20240201213267-8ux4v4c","Type":"NodeParagraph","Properties":{"id":"20240201213267-8ux4v4c","updated":"20240201213267"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程和线程的管理"},{"Type":"NodeText","Data":"：进程的创建、撤销、阻塞、唤醒，进程间的通信等。"}]}]},{"ID":"20240201213268-w2fnh9x","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213268-w2fnh9x","updated":"20240201213268"},"Children":[{"ID":"20240201213269-875089h","Type":"NodeParagraph","Properties":{"id":"20240201213269-875089h","updated":"20240201213269"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存储管理"},{"Type":"NodeText","Data":"：内存的分配和管理、外存（磁盘等）的分配和管理等。"}]}]},{"ID":"20240201213270-hfgekt0","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213270-hfgekt0","updated":"20240201213270"},"Children":[{"ID":"20240201213271-ktmvqvu","Type":"NodeParagraph","Properties":{"id":"20240201213271-ktmvqvu","updated":"20240201213271"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"文件管理"},{"Type":"NodeText","Data":"：文件的读、写、创建及删除等。"}]}]},{"ID":"20240201213272-fcc7zu2","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213272-fcc7zu2","updated":"20240201213272"},"Children":[{"ID":"20240201213273-tie63k8","Type":"NodeParagraph","Properties":{"id":"20240201213273-tie63k8","updated":"20240201213273"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"设备管理"},{"Type":"NodeText","Data":"：完成设备（输入输出设备和外部存储设备等）的请求或释放，以及设备启动等功能。"}]}]},{"ID":"20240201213274-e22b5ix","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213274-e22b5ix","updated":"20240201213274"},"Children":[{"ID":"20240201213275-m38zn2j","Type":"NodeParagraph","Properties":{"id":"20240201213275-m38zn2j","updated":"20240201213275"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"网络管理"},{"Type":"NodeText","Data":"：操作系统负责管理计算机网络的使用。网络是计算机系统中连接不同计算机的方式，操作系统需要管理计算机网络的配置、连接、通信和安全等，以提供高效可靠的网络服务。"}]}]},{"ID":"20240201213276-704leut","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213276-704leut","updated":"20240201213276"},"Children":[{"ID":"20240201213277-32csths","Type":"NodeParagraph","Properties":{"id":"20240201213277-32csths","updated":"20240201213277"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全管理"},{"Type":"NodeText","Data":"：用户的身份认证、访问控制、文件加密等，以防止非法用户对系统资源的访问和操作。"}]}]}]},{"ID":"20240201213278-nun7wjk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213278-nun7wjk","updated":"20240201213278"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的操作系统有哪些？"}]},{"ID":"20240201213279-zp4gcn3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213279-zp4gcn3","updated":"20240201213279"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Windows"}]},{"ID":"20240201213280-udtvpo1","Type":"NodeParagraph","Properties":{"id":"20240201213280-udtvpo1","updated":"20240201213280"},"Children":[{"Type":"NodeText","Data":"目前最流行的个人桌面操作系统 ，不做多的介绍，大家都清楚。界面简单易操作，软件生态非常好。"}]},{"ID":"20240201213281-5eupfuo","Type":"NodeParagraph","Properties":{"id":"20240201213281-5eupfuo","updated":"20240201213281"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"玩玩电脑游戏还是必须要有 Windows 的，所以我现在是一台 Windows 用于玩游戏，一台 Mac 用于平时日常开发和学习使用。"}]},{"ID":"20240201213282-bv3zffv","Type":"NodeParagraph","Properties":{"id":"20240201213282-bv3zffv","updated":"20240201213282"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"windows","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/windows-20240201213826-m33raoq.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213283-3nuowig","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213283-3nuowig","updated":"20240201213283"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Unix"}]},{"ID":"20240201213284-bkzo95r","Type":"NodeParagraph","Properties":{"id":"20240201213284-bkzo95r","updated":"20240201213284"},"Children":[{"Type":"NodeText","Data":"最早的多用户、多任务操作系统 。后面崛起的 Linux 在很多方面都参考了 Unix。"}]},{"ID":"20240201213285-nkyvuoq","Type":"NodeParagraph","Properties":{"id":"20240201213285-nkyvuoq","updated":"20240201213285"},"Children":[{"Type":"NodeText","Data":"目前这款操作系统已经逐渐逐渐退出操作系统的舞台。"}]},{"ID":"20240201213286-bu6r71f","Type":"NodeParagraph","Properties":{"id":"20240201213286-bu6r71f","updated":"20240201213286"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"unix","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/unix-20240201213826-x8lskdg.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213287-dfh5bqa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213287-dfh5bqa","updated":"20240201213287"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Linux"}]},{"ID":"20240201213288-kzyo1o7","Type":"NodeParagraph","Properties":{"id":"20240201213288-kzyo1o7","updated":"20240201213288"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Linux 是一套免费使用、开源的类 Unix 操作系统。"},{"Type":"NodeText","Data":" Linux 存在着许多不同的发行版本，但它们都使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Linux 内核"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213289-2mz8dls","Type":"NodeBlockquote","Properties":{"id":"20240201213289-2mz8dls","updated":"20240201213289"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213290-a6xmy6s","Type":"NodeParagraph","Properties":{"id":"20240201213290-a6xmy6s","updated":"20240201213290"},"Children":[{"Type":"NodeText","Data":"严格来讲，Linux 这个词本身只表示 Linux 内核，在 GNU/Linux 系统中，Linux 实际就是 Linux 内核，而该系统的其余部分主要是由 GNU 工程编写和提供的程序组成。单独的 Linux 内核并不能成为一个可以正常工作的操作系统。"}]},{"ID":"20240201213291-kvip0pq","Type":"NodeParagraph","Properties":{"id":"20240201213291-kvip0pq","updated":"20240201213291"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"很多人更倾向使用 “GNU/Linux” 一词来表达人们通常所说的 “Linux”。"}]}]},{"ID":"20240201213292-awat4at","Type":"NodeParagraph","Properties":{"id":"20240201213292-awat4at","updated":"20240201213292"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Linux 操作系统","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux/linux.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213293-op0wyf9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213293-op0wyf9","updated":"20240201213293"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Mac OS"}]},{"ID":"20240201213294-ryzv3lq","Type":"NodeParagraph","Properties":{"id":"20240201213294-ryzv3lq","updated":"20240201213294"},"Children":[{"Type":"NodeText","Data":"苹果自家的操作系统，编程体验和 Linux 相当，但是界面、软件生态以及用户体验各方面都要比 Linux 操作系统更好。"}]},{"ID":"20240201213295-3fq86ev","Type":"NodeParagraph","Properties":{"id":"20240201213295-3fq86ev","updated":"20240201213295"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"macos","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/macos-20240201213826-4up2y1j.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213296-wbd13ho","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213296-wbd13ho","updated":"20240201213296"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"用户态和内核态"}]},{"ID":"20240201213297-kawozdo","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213297-kawozdo","updated":"20240201213297"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是用户态和内核态？"}]},{"ID":"20240201213298-tpcnlq2","Type":"NodeParagraph","Properties":{"id":"20240201213298-tpcnlq2","updated":"20240201213298"},"Children":[{"Type":"NodeText","Data":"根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别："}]},{"ID":"20240201213299-p1xfrwc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213299-p1xfrwc","updated":"20240201213299"},"Children":[{"ID":"20240201213300-hah0uo9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213300-hah0uo9","updated":"20240201213300"},"Children":[{"ID":"20240201213301-dvvt7t1","Type":"NodeParagraph","Properties":{"id":"20240201213301-dvvt7t1","updated":"20240201213301"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"用户态(User Mode)"},{"Type":"NodeText","Data":" : 用户态运行的进程可以直接读取用户程序的数据，拥有较低的权限。当应用程序需要执行某些需要特殊权限的操作，例如读写磁盘、网络通信等，就需要向操作系统发起系统调用请求，进入内核态。"}]}]},{"ID":"20240201213302-16u2q9i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213302-16u2q9i","updated":"20240201213302"},"Children":[{"ID":"20240201213303-f95ty4t","Type":"NodeParagraph","Properties":{"id":"20240201213303-f95ty4t","updated":"20240201213303"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内核态(Kernel Mode)"},{"Type":"NodeText","Data":"：内核态运行的进程几乎可以访问计算机的任何资源包括系统的内存空间、设备、驱动程序等，不受限制，拥有非常高的权限。当操作系统接收到进程的系统调用请求时，就会从用户态切换到内核态，执行相应的系统调用，并将结果返回给进程，最后再从内核态切换回用户态。"}]}]}]},{"ID":"20240201213304-y954s4u","Type":"NodeParagraph","Properties":{"id":"20240201213304-y954s4u","updated":"20240201213304"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"用户态和内核态","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/usermode-and-kernelmode.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213305-mbw87cc","Type":"NodeParagraph","Properties":{"id":"20240201213305-mbw87cc","updated":"20240201213305"},"Children":[{"Type":"NodeText","Data":"内核态相比用户态拥有更高的特权级别，因此能够执行更底层、更敏感的操作。不过，由于进入内核态需要付出较高的开销（需要进行一系列的上下文切换和权限检查），应该尽量减少进入内核态的次数，以提高系统的性能和稳定性。"}]},{"ID":"20240201213306-lmb9o2s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213306-lmb9o2s","updated":"20240201213306"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要有用户态和内核态？只有一个内核态不行么？"}]},{"ID":"20240201213307-9vucbgu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213307-9vucbgu","updated":"20240201213307"},"Children":[{"ID":"20240201213308-pfkto3d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213308-pfkto3d","updated":"20240201213308"},"Children":[{"ID":"20240201213309-6ajmayf","Type":"NodeParagraph","Properties":{"id":"20240201213309-6ajmayf","updated":"20240201213309"},"Children":[{"Type":"NodeText","Data":"在 CPU 的所有指令中，有一些指令是比较危险的比如内存分配、设置时钟、IO 处理等，如果所有的程序都能使用这些指令的话，会对系统的正常运行造成灾难性地影响。因此，我们需要限制这些危险指令只能内核态运行。这些只能由操作系统内核态执行的指令也被叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"特权指令"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213310-03nukd4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213310-03nukd4","updated":"20240201213310"},"Children":[{"ID":"20240201213311-oh4i8ya","Type":"NodeParagraph","Properties":{"id":"20240201213311-oh4i8ya","updated":"20240201213311"},"Children":[{"Type":"NodeText","Data":"如果计算机系统中只有一个内核态，那么所有程序或进程都必须共享系统资源，例如内存、CPU、硬盘等，这将导致系统资源的竞争和冲突，从而影响系统性能和效率。并且，这样也会让系统的安全性降低，毕竟所有程序或进程都具有相同的特权级别和访问权限。"}]}]}]},{"ID":"20240201213312-hj8jsp2","Type":"NodeParagraph","Properties":{"id":"20240201213312-hj8jsp2","updated":"20240201213312"},"Children":[{"Type":"NodeText","Data":"因此，同时具有用户态和内核态主要是为了保证计算机系统的安全性、稳定性和性能。"}]},{"ID":"20240201213313-i74xjt6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213313-i74xjt6","updated":"20240201213313"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"用户态和内核态是如何切换的？"}]},{"ID":"20240201213314-23n4r38","Type":"NodeParagraph","Properties":{"id":"20240201213314-23n4r38","updated":"20240201213314"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"用户态切换到内核态的 3 种方式","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/the-way-switch-between-user-mode-and-kernel-mode.drawio.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213315-5ikwhh4","Type":"NodeParagraph","Properties":{"id":"20240201213315-5ikwhh4","updated":"20240201213315"},"Children":[{"Type":"NodeText","Data":"用户态切换到内核态的 3 种方式："}]},{"ID":"20240201213316-533lnr3","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213316-533lnr3","updated":"20240201213316"},"Children":[{"ID":"20240201213317-80u0xsx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213317-80u0xsx","updated":"20240201213317"},"Children":[{"ID":"20240201213318-5jks3zv","Type":"NodeParagraph","Properties":{"id":"20240201213318-5jks3zv","updated":"20240201213318"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"系统调用（Trap）"},{"Type":"NodeText","Data":"：用户态进程 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主动"},{"Type":"NodeText","Data":" 要求切换到内核态的一种方式，主要是为了使用内核态才能做的事情比如读取磁盘资源。系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现。"}]}]},{"ID":"20240201213319-xphfc93","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213319-xphfc93","updated":"20240201213319"},"Children":[{"ID":"20240201213320-5h5441s","Type":"NodeParagraph","Properties":{"id":"20240201213320-5h5441s","updated":"20240201213320"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"中断（Interrupt）"},{"Type":"NodeText","Data":"：当外围设备完成用户请求的操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。"}]}]},{"ID":"20240201213321-nyy6phe","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213321-nyy6phe","updated":"20240201213321"},"Children":[{"ID":"20240201213322-5kopyx8","Type":"NodeParagraph","Properties":{"id":"20240201213322-5kopyx8","updated":"20240201213322"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异常（Exception）"},{"Type":"NodeText","Data":"：当 CPU 在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。"}]}]}]},{"ID":"20240201213323-0kqxc72","Type":"NodeParagraph","Properties":{"id":"20240201213323-0kqxc72","updated":"20240201213323"},"Children":[{"Type":"NodeText","Data":"在系统的处理上，中断和异常类似，都是通过中断向量表来找到相应的处理程序进行处理。区别在于，中断来自处理器外部，不是由任何一条专门的指令造成，而异常是执行当前指令的结果。"}]},{"ID":"20240201213324-51chdp1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213324-51chdp1","updated":"20240201213324"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"系统调用"}]},{"ID":"20240201213325-15gj4yc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213325-15gj4yc","updated":"20240201213325"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是系统调用？"}]},{"ID":"20240201213326-ie6rykc","Type":"NodeParagraph","Properties":{"id":"20240201213326-ie6rykc","updated":"20240201213326"},"Children":[{"Type":"NodeText","Data":"我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的内核态级别的子功能咋办呢？那就需要系统调用了！"}]},{"ID":"20240201213327-rwk1s07","Type":"NodeParagraph","Properties":{"id":"20240201213327-rwk1s07","updated":"20240201213327"},"Children":[{"Type":"NodeText","Data":"也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。"}]},{"ID":"20240201213328-rouq4bo","Type":"NodeParagraph","Properties":{"id":"20240201213328-rouq4bo","updated":"20240201213328"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"系统调用","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/system-call.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213329-yxa6x1q","Type":"NodeParagraph","Properties":{"id":"20240201213329-yxa6x1q","updated":"20240201213329"},"Children":[{"Type":"NodeText","Data":"这些系统调用按功能大致可分为如下几类："}]},{"ID":"20240201213330-2gexhei","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213330-2gexhei","updated":"20240201213330"},"Children":[{"ID":"20240201213331-5yaiyqp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213331-5yaiyqp","updated":"20240201213331"},"Children":[{"ID":"20240201213332-saqx9sc","Type":"NodeParagraph","Properties":{"id":"20240201213332-saqx9sc","updated":"20240201213332"},"Children":[{"Type":"NodeText","Data":"设备管理：完成设备（输入输出设备和外部存储设备等）的请求或释放，以及设备启动等功能。"}]}]},{"ID":"20240201213333-138kui7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213333-138kui7","updated":"20240201213333"},"Children":[{"ID":"20240201213334-lxhvoho","Type":"NodeParagraph","Properties":{"id":"20240201213334-lxhvoho","updated":"20240201213334"},"Children":[{"Type":"NodeText","Data":"文件管理：完成文件的读、写、创建及删除等功能。"}]}]},{"ID":"20240201213335-bmbnkpj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213335-bmbnkpj","updated":"20240201213335"},"Children":[{"ID":"20240201213336-p2y2cus","Type":"NodeParagraph","Properties":{"id":"20240201213336-p2y2cus","updated":"20240201213336"},"Children":[{"Type":"NodeText","Data":"进程管理：进程的创建、撤销、阻塞、唤醒，进程间的通信等功能。"}]}]},{"ID":"20240201213337-2j9mlc2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213337-2j9mlc2","updated":"20240201213337"},"Children":[{"ID":"20240201213338-0bvr52s","Type":"NodeParagraph","Properties":{"id":"20240201213338-0bvr52s","updated":"20240201213338"},"Children":[{"Type":"NodeText","Data":"内存管理：完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。"}]}]}]},{"ID":"20240201213339-9i45c47","Type":"NodeParagraph","Properties":{"id":"20240201213339-9i45c47","updated":"20240201213339"},"Children":[{"Type":"NodeText","Data":"系统调用和普通库函数调用非常相似，只是系统调用由操作系统内核提供，运行于内核态，而普通的库函数调用由函数库或用户自己提供，运行于用户态。"}]},{"ID":"20240201213340-92rbvbf","Type":"NodeParagraph","Properties":{"id":"20240201213340-92rbvbf","updated":"20240201213340"},"Children":[{"Type":"NodeText","Data":"总结：系统调用是应用程序与操作系统之间进行交互的一种方式，通过系统调用，应用程序可以访问操作系统底层资源例如文件、设备、网络等。"}]},{"ID":"20240201213341-8a5jdxe","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213341-8a5jdxe","updated":"20240201213341"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"系统调用的过程了解吗？"}]},{"ID":"20240201213342-cxpjx51","Type":"NodeParagraph","Properties":{"id":"20240201213342-cxpjx51","updated":"20240201213342"},"Children":[{"Type":"NodeText","Data":"系统调用的过程可以简单分为以下几个步骤："}]},{"ID":"20240201213343-8dm9nou","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213343-8dm9nou","updated":"20240201213343"},"Children":[{"ID":"20240201213344-oc73ttv","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213344-oc73ttv","updated":"20240201213344"},"Children":[{"ID":"20240201213345-o6kpkup","Type":"NodeParagraph","Properties":{"id":"20240201213345-o6kpkup","updated":"20240201213345"},"Children":[{"Type":"NodeText","Data":"用户态的程序发起系统调用，因为系统调用中涉及一些特权指令（只能由操作系统内核态执行的指令），用户态程序权限不足，因此会中断执行，也就是 Trap（Trap 是一种中断）。"}]}]},{"ID":"20240201213346-15zf3wt","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213346-15zf3wt","updated":"20240201213346"},"Children":[{"ID":"20240201213347-oss7a99","Type":"NodeParagraph","Properties":{"id":"20240201213347-oss7a99","updated":"20240201213347"},"Children":[{"Type":"NodeText","Data":"发生中断后，当前 CPU 执行的程序会中断，跳转到中断处理程序。内核程序开始执行，也就是开始处理系统调用。"}]}]},{"ID":"20240201213348-6pg2ag7","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213348-6pg2ag7","updated":"20240201213348"},"Children":[{"ID":"20240201213349-ct46q9y","Type":"NodeParagraph","Properties":{"id":"20240201213349-ct46q9y","updated":"20240201213349"},"Children":[{"Type":"NodeText","Data":"内核处理完成后，主动触发 Trap，这样会再次发生中断，切换回用户态工作。"}]}]}]},{"ID":"20240201213350-of0x9gp","Type":"NodeParagraph","Properties":{"id":"20240201213350-of0x9gp","updated":"20240201213350"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"系统调用的过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/system-call-procedure.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213351-2yl9eo9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213351-2yl9eo9","updated":"20240201213351"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程和线程"}]},{"ID":"20240201213352-rdyecuy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213352-rdyecuy","updated":"20240201213352"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是进程和线程？"}]},{"ID":"20240201213353-089dp29","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213353-089dp29","updated":"20240201213353"},"Children":[{"ID":"20240201213354-8s56jjw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213354-8s56jjw","updated":"20240201213354"},"Children":[{"ID":"20240201213355-agbka5g","Type":"NodeParagraph","Properties":{"id":"20240201213355-agbka5g","updated":"20240201213355"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程（Process）"},{"Type":"NodeText","Data":" 是指计算机中正在运行的一个程序实例。举例：你打开的微信就是一个进程。"}]}]},{"ID":"20240201213356-j6tzk0j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213356-j6tzk0j","updated":"20240201213356"},"Children":[{"ID":"20240201213357-bobc9qf","Type":"NodeParagraph","Properties":{"id":"20240201213357-bobc9qf","updated":"20240201213357"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程（Thread）"},{"Type":"NodeText","Data":" 也被称为轻量级进程，更加轻量。多个线程可以在同一个进程中同时执行，并且共享进程的资源比如内存空间、文件句柄、网络连接等。举例：你打开的微信里就有一个线程专门用来拉取别人发你的最新的消息。"}]}]}]},{"ID":"20240201213358-pqx1cv5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213358-pqx1cv5","updated":"20240201213358"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程和线程的区别是什么？"}]},{"ID":"20240201213359-8vu5xlh","Type":"NodeParagraph","Properties":{"id":"20240201213359-8vu5xlh","updated":"20240201213359"},"Children":[{"Type":"NodeText","Data":"下图是 Java 内存区域，我们从 JVM 的角度来说一下线程和进程之间的关系吧！"}]},{"ID":"20240201213360-7urxo2n","Type":"NodeParagraph","Properties":{"id":"20240201213360-7urxo2n","updated":"20240201213360"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Java 运行时数据区域（JDK1.8 之后）","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213361-d20yl91","Type":"NodeParagraph","Properties":{"id":"20240201213361-d20yl91","updated":"20240201213361"},"Children":[{"Type":"NodeText","Data":"从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"堆"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法区 (JDK1.8 之后的元空间)"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"资源，但是每个线程有自己的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"程序计数器"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机栈"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本地方法栈"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213362-eak5l58","Type":"NodeParagraph","Properties":{"id":"20240201213362-eak5l58","updated":"20240201213362"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"总结："}]},{"ID":"20240201213363-gdwiwiu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213363-gdwiwiu","updated":"20240201213363"},"Children":[{"ID":"20240201213364-34z7mrw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213364-34z7mrw","updated":"20240201213364"},"Children":[{"ID":"20240201213365-ws8189r","Type":"NodeParagraph","Properties":{"id":"20240201213365-ws8189r","updated":"20240201213365"},"Children":[{"Type":"NodeText","Data":"线程是进程划分成的更小的运行单位,一个进程在其执行的过程中可以产生多个线程。"}]}]},{"ID":"20240201213366-1j3f1kb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213366-1j3f1kb","updated":"20240201213366"},"Children":[{"ID":"20240201213367-bpp5v6s","Type":"NodeParagraph","Properties":{"id":"20240201213367-bpp5v6s","updated":"20240201213367"},"Children":[{"Type":"NodeText","Data":"线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。"}]}]},{"ID":"20240201213368-zdwrsjc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213368-zdwrsjc","updated":"20240201213368"},"Children":[{"ID":"20240201213369-b5k22nc","Type":"NodeParagraph","Properties":{"id":"20240201213369-b5k22nc","updated":"20240201213369"},"Children":[{"Type":"NodeText","Data":"线程执行开销小，但不利于资源的管理和保护；而进程正相反。"}]}]}]},{"ID":"20240201213370-6tcq480","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213370-6tcq480","updated":"20240201213370"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有了进程为什么还需要线程?"}]},{"ID":"20240201213371-h5ptrln","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213371-h5ptrln","updated":"20240201213371"},"Children":[{"ID":"20240201213372-pp9yr0s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213372-pp9yr0s","updated":"20240201213372"},"Children":[{"ID":"20240201213373-xeu2u19","Type":"NodeParagraph","Properties":{"id":"20240201213373-xeu2u19","updated":"20240201213373"},"Children":[{"Type":"NodeText","Data":"进程切换是一个开销很大的操作，线程切换的成本较低。"}]}]},{"ID":"20240201213374-yic31zp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213374-yic31zp","updated":"20240201213374"},"Children":[{"ID":"20240201213375-dh6g9n4","Type":"NodeParagraph","Properties":{"id":"20240201213375-dh6g9n4","updated":"20240201213375"},"Children":[{"Type":"NodeText","Data":"线程更轻量，一个进程可以创建多个线程。"}]}]},{"ID":"20240201213376-8hsx4tz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213376-8hsx4tz","updated":"20240201213376"},"Children":[{"ID":"20240201213377-nok3oct","Type":"NodeParagraph","Properties":{"id":"20240201213377-nok3oct","updated":"20240201213377"},"Children":[{"Type":"NodeText","Data":"多个线程可以并发处理不同的任务，更有效地利用了多处理器和多核计算机。而进程只能在一个时间干一件事，如果在执行过程中遇到阻塞问题比如 IO 阻塞就会挂起直到结果返回。"}]}]},{"ID":"20240201213378-xxaks5t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213378-xxaks5t","updated":"20240201213378"},"Children":[{"ID":"20240201213379-p1mseqv","Type":"NodeParagraph","Properties":{"id":"20240201213379-p1mseqv","updated":"20240201213379"},"Children":[{"Type":"NodeText","Data":"同一进程内的线程共享内存和文件，因此它们之间相互通信无须调用内核。"}]}]}]},{"ID":"20240201213380-eca5te2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213380-eca5te2","updated":"20240201213380"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要使用多线程?"}]},{"ID":"20240201213381-2yjuuem","Type":"NodeParagraph","Properties":{"id":"20240201213381-2yjuuem","updated":"20240201213381"},"Children":[{"Type":"NodeText","Data":"先从总体上来说："}]},{"ID":"20240201213382-4rye9qb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213382-4rye9qb","updated":"20240201213382"},"Children":[{"ID":"20240201213383-8khao3w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213383-8khao3w","updated":"20240201213383"},"Children":[{"ID":"20240201213384-b1p9ydk","Type":"NodeParagraph","Properties":{"id":"20240201213384-b1p9ydk","updated":"20240201213384"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从计算机底层来说："},{"Type":"NodeText","Data":" 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。"}]}]},{"ID":"20240201213385-3yqbvc0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213385-3yqbvc0","updated":"20240201213385"},"Children":[{"ID":"20240201213386-byqttgq","Type":"NodeParagraph","Properties":{"id":"20240201213386-byqttgq","updated":"20240201213386"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从当代互联网发展趋势来说："},{"Type":"NodeText","Data":" 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。"}]}]}]},{"ID":"20240201213387-uv0hpjt","Type":"NodeParagraph","Properties":{"id":"20240201213387-uv0hpjt","updated":"20240201213387"},"Children":[{"Type":"NodeText","Data":"再深入到计算机底层来探讨："}]},{"ID":"20240201213388-ds26ygv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213388-ds26ygv","updated":"20240201213388"},"Children":[{"ID":"20240201213389-p8wcimo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213389-p8wcimo","updated":"20240201213389"},"Children":[{"ID":"20240201213390-diqkdc9","Type":"NodeParagraph","Properties":{"id":"20240201213390-diqkdc9","updated":"20240201213390"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单核时代"},{"Type":"NodeText","Data":"：在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。"}]}]},{"ID":"20240201213391-m8wpx60","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213391-m8wpx60","updated":"20240201213391"},"Children":[{"ID":"20240201213392-2n7wsul","Type":"NodeParagraph","Properties":{"id":"20240201213392-2n7wsul","updated":"20240201213392"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多核时代"},{"Type":"NodeText","Data":": 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）。"}]}]}]},{"ID":"20240201213393-as0ziji","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213393-as0ziji","updated":"20240201213393"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程间的同步的方式有哪些？"}]},{"ID":"20240201213394-azcrall","Type":"NodeParagraph","Properties":{"id":"20240201213394-azcrall","updated":"20240201213394"},"Children":[{"Type":"NodeText","Data":"线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。"}]},{"ID":"20240201213395-aqn9nxk","Type":"NodeParagraph","Properties":{"id":"20240201213395-aqn9nxk","updated":"20240201213395"},"Children":[{"Type":"NodeText","Data":"下面是几种常见的线程同步的方式："}]},{"ID":"20240201213396-1hb0uw8","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213396-1hb0uw8","updated":"20240201213396"},"Children":[{"ID":"20240201213397-jbn4n9t","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213397-jbn4n9t","updated":"20240201213397"},"Children":[{"ID":"20240201213398-23ttxtr","Type":"NodeParagraph","Properties":{"id":"20240201213398-23ttxtr","updated":"20240201213398"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥锁(Mutex)"},{"Type":"NodeText","Data":"：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 关键词和各种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Lock"},{"Type":"NodeText","Data":" 都是这种机制。"}]}]},{"ID":"20240201213399-54adwa1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213399-54adwa1","updated":"20240201213399"},"Children":[{"ID":"20240201213400-np9yx1u","Type":"NodeParagraph","Properties":{"id":"20240201213400-np9yx1u","updated":"20240201213400"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读写锁（Read-Write Lock）"},{"Type":"NodeText","Data":"：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。"}]}]},{"ID":"20240201213401-841zk1h","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213401-841zk1h","updated":"20240201213401"},"Children":[{"ID":"20240201213402-qg3qrt3","Type":"NodeParagraph","Properties":{"id":"20240201213402-qg3qrt3","updated":"20240201213402"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"信号量(Semaphore)"},{"Type":"NodeText","Data":"：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。"}]}]},{"ID":"20240201213403-cfd4w62","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213403-cfd4w62","updated":"20240201213403"},"Children":[{"ID":"20240201213404-wiv0c41","Type":"NodeParagraph","Properties":{"id":"20240201213404-wiv0c41","updated":"20240201213404"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"屏障（Barrier）"},{"Type":"NodeText","Data":"：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 是这种机制。"}]}]},{"ID":"20240201213405-chcknoq","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213405-chcknoq","updated":"20240201213405"},"Children":[{"ID":"20240201213406-zvr5oig","Type":"NodeParagraph","Properties":{"id":"20240201213406-zvr5oig","updated":"20240201213406"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事件(Event)"},{"Type":"NodeText","Data":" :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。"}]}]}]},{"ID":"20240201213407-uoryrw0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213407-uoryrw0","updated":"20240201213407"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"PCB 是什么？包含哪些信息？"}]},{"ID":"20240201213408-0igqnzn","Type":"NodeParagraph","Properties":{"id":"20240201213408-0igqnzn","updated":"20240201213408"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"PCB（Process Control Block）"},{"Type":"NodeText","Data":" 即进程控制块，是操作系统中用来管理和跟踪进程的数据结构，每个进程都对应着一个独立的 PCB。你可以将 PCB 视为进程的大脑。"}]},{"ID":"20240201213409-19gt3zr","Type":"NodeParagraph","Properties":{"id":"20240201213409-19gt3zr","updated":"20240201213409"},"Children":[{"Type":"NodeText","Data":"当操作系统创建一个新进程时，会为该进程分配一个唯一的进程 ID，并且为该进程创建一个对应的进程控制块。当进程执行时，PCB 中的信息会不断变化，操作系统会根据这些信息来管理和调度进程。"}]},{"ID":"20240201213410-es8r0xe","Type":"NodeParagraph","Properties":{"id":"20240201213410-es8r0xe","updated":"20240201213410"},"Children":[{"Type":"NodeText","Data":"PCB 主要包含下面几部分的内容："}]},{"ID":"20240201213411-8xcdir3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213411-8xcdir3","updated":"20240201213411"},"Children":[{"ID":"20240201213412-34p7wau","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213412-34p7wau","updated":"20240201213412"},"Children":[{"ID":"20240201213413-uzhe3xr","Type":"NodeParagraph","Properties":{"id":"20240201213413-uzhe3xr","updated":"20240201213413"},"Children":[{"Type":"NodeText","Data":"进程的描述信息，包括进程的名称、标识符等等；"}]}]},{"ID":"20240201213414-4oom7kz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213414-4oom7kz","updated":"20240201213414"},"Children":[{"ID":"20240201213415-8emzzx2","Type":"NodeParagraph","Properties":{"id":"20240201213415-8emzzx2","updated":"20240201213415"},"Children":[{"Type":"NodeText","Data":"进程的调度信息，包括进程阻塞原因、进程状态（就绪、运行、阻塞等）、进程优先级（标识进程的重要程度）等等；"}]}]},{"ID":"20240201213416-oloalkz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213416-oloalkz","updated":"20240201213416"},"Children":[{"ID":"20240201213417-iki5hhy","Type":"NodeParagraph","Properties":{"id":"20240201213417-iki5hhy","updated":"20240201213417"},"Children":[{"Type":"NodeText","Data":"进程对资源的需求情况，包括 CPU 时间、内存空间、I/O 设备等等。"}]}]},{"ID":"20240201213418-paq9a8w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213418-paq9a8w","updated":"20240201213418"},"Children":[{"ID":"20240201213419-u0a3v5w","Type":"NodeParagraph","Properties":{"id":"20240201213419-u0a3v5w","updated":"20240201213419"},"Children":[{"Type":"NodeText","Data":"进程打开的文件信息，包括文件描述符、文件类型、打开模式等等。"}]}]},{"ID":"20240201213420-g9kjr69","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213420-g9kjr69","updated":"20240201213420"},"Children":[{"ID":"20240201213421-rcd23ro","Type":"NodeParagraph","Properties":{"id":"20240201213421-rcd23ro","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"处理机的状态信息（由处理机的各种寄存器中的内容组成的），包括通用寄存器、指令计数器、程序状态字 PSW、用户栈指针。"}]}]},{"ID":"20240201213422-9e76dio","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213422-9e76dio","updated":"20240201213422"},"Children":[{"ID":"20240201213423-ftruwlu","Type":"NodeParagraph","Properties":{"id":"20240201213423-ftruwlu","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213424-ibhuoi2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213424-ibhuoi2","updated":"20240201213424"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程有哪几种状态?"}]},{"ID":"20240201213425-dvm1rwy","Type":"NodeParagraph","Properties":{"id":"20240201213425-dvm1rwy","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"我们一般把进程大致分为 5 种状态，这一点和线程很像！"}]},{"ID":"20240201213426-5ric3z1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213426-5ric3z1","updated":"20240201213426"},"Children":[{"ID":"20240201213427-vu384eb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213427-vu384eb","updated":"20240201213427"},"Children":[{"ID":"20240201213428-lx00m4r","Type":"NodeParagraph","Properties":{"id":"20240201213428-lx00m4r","updated":"20240201213428"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建状态(new)"},{"Type":"NodeText","Data":"：进程正在被创建，尚未到就绪状态。"}]}]},{"ID":"20240201213429-trevkqs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213429-trevkqs","updated":"20240201213429"},"Children":[{"ID":"20240201213430-foa3x1j","Type":"NodeParagraph","Properties":{"id":"20240201213430-foa3x1j","updated":"20240201213430"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"就绪状态(ready)"},{"Type":"NodeText","Data":"：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。"}]}]},{"ID":"20240201213431-0g7ge8i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213431-0g7ge8i","updated":"20240201213431"},"Children":[{"ID":"20240201213432-1nqzyat","Type":"NodeParagraph","Properties":{"id":"20240201213432-1nqzyat","updated":"20240201213432"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"运行状态(running)"},{"Type":"NodeText","Data":"：进程正在处理器上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。"}]}]},{"ID":"20240201213433-gklea04","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213433-gklea04","updated":"20240201213433"},"Children":[{"ID":"20240201213434-83oonaf","Type":"NodeParagraph","Properties":{"id":"20240201213434-83oonaf","updated":"20240201213434"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"阻塞状态(waiting)"},{"Type":"NodeText","Data":"：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。"}]}]},{"ID":"20240201213435-79r7rz7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213435-79r7rz7","updated":"20240201213435"},"Children":[{"ID":"20240201213436-e8kjsoy","Type":"NodeParagraph","Properties":{"id":"20240201213436-e8kjsoy","updated":"20240201213436"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"结束状态(terminated)"},{"Type":"NodeText","Data":"：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。"}]}]}]},{"ID":"20240201213437-96szc1w","Type":"NodeParagraph","Properties":{"id":"20240201213437-96szc1w","updated":"20240201213437"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"进程状态图转换图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/state-transition-of-process.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213438-xjv7w74","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213438-xjv7w74","updated":"20240201213438"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程间的通信方式有哪些？"}]},{"ID":"20240201213439-sabym89","Type":"NodeBlockquote","Properties":{"id":"20240201213439-sabym89","updated":"20240201213439"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213440-8ox8jgg","Type":"NodeParagraph","Properties":{"id":"20240201213440-8ox8jgg","updated":"20240201213440"},"Children":[{"Type":"NodeText","Data":"下面这部分总结参考了:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.jianshu.com/p/c1015f5ffa74","TextMarkTextContent":"《进程间通信 IPC (InterProcess Communication)》"},{"Type":"NodeText","Data":" 这篇文章，推荐阅读，总结的非常不错。"}]}]},{"ID":"20240201213441-2st0ta9","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213441-2st0ta9","updated":"20240201213441"},"Children":[{"ID":"20240201213442-t6t02gf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213442-t6t02gf","updated":"20240201213442"},"Children":[{"ID":"20240201213443-fomrlmw","Type":"NodeParagraph","Properties":{"id":"20240201213443-fomrlmw","updated":"20240201213443"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"管道/匿名管道(Pipes)"},{"Type":"NodeText","Data":"：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。"}]}]},{"ID":"20240201213444-dkb08jm","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213444-dkb08jm","updated":"20240201213444"},"Children":[{"ID":"20240201213445-2muq0w1","Type":"NodeParagraph","Properties":{"id":"20240201213445-2muq0w1","updated":"20240201213445"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有名管道(Named Pipes)"},{"Type":"NodeText","Data":" : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先进先出(First In First Out)"},{"Type":"NodeText","Data":" 。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。"}]}]},{"ID":"20240201213446-vjeay9k","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213446-vjeay9k","updated":"20240201213446"},"Children":[{"ID":"20240201213447-h5byhjf","Type":"NodeParagraph","Properties":{"id":"20240201213447-h5byhjf","updated":"20240201213447"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"信号(Signal)"},{"Type":"NodeText","Data":"：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；"}]}]},{"ID":"20240201213448-rd8tajr","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213448-rd8tajr","updated":"20240201213448"},"Children":[{"ID":"20240201213449-ooj3z3y","Type":"NodeParagraph","Properties":{"id":"20240201213449-ooj3z3y","updated":"20240201213449"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列(Message Queuing)"},{"Type":"NodeText","Data":"：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。"}]}]},{"ID":"20240201213450-u5f2i1y","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213450-u5f2i1y","updated":"20240201213450"},"Children":[{"ID":"20240201213451-9hipycc","Type":"NodeParagraph","Properties":{"id":"20240201213451-9hipycc","updated":"20240201213451"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"信号量(Semaphores)"},{"Type":"NodeText","Data":"：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。"}]}]},{"ID":"20240201213452-s7wtl4g","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213452-s7wtl4g","updated":"20240201213452"},"Children":[{"ID":"20240201213453-x9gxo2f","Type":"NodeParagraph","Properties":{"id":"20240201213453-x9gxo2f","updated":"20240201213453"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"共享内存(Shared memory)"},{"Type":"NodeText","Data":"：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。"}]}]},{"ID":"20240201213454-oa7binm","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213454-oa7binm","updated":"20240201213454"},"Children":[{"ID":"20240201213455-binjn2v","Type":"NodeParagraph","Properties":{"id":"20240201213455-binjn2v","updated":"20240201213455"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"套接字(Sockets)"},{"Type":"NodeText","Data":" : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。"}]}]}]},{"ID":"20240201213456-9tqzzdx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213456-9tqzzdx","updated":"20240201213456"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程的调度算法有哪些?"}]},{"ID":"20240201213457-87170v8","Type":"NodeParagraph","Properties":{"id":"20240201213457-87170v8","updated":"20240201213457"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"常见进程调度算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/scheduling-algorithms-of-process.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213458-q0rf81r","Type":"NodeParagraph","Properties":{"id":"20240201213458-q0rf81r","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"这是一个很重要的知识点！为了确定首先执行哪个进程以及最后执行哪个进程以实现最大 CPU 利用率，计算机科学家已经定义了一些算法，它们是："}]},{"ID":"20240201213459-fx19puu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213459-fx19puu","updated":"20240201213459"},"Children":[{"ID":"20240201213460-cld9jfd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-cld9jfd","updated":"20240201213460"},"Children":[{"ID":"20240201213461-s7zbs2c","Type":"NodeParagraph","Properties":{"id":"20240201213461-s7zbs2c","updated":"20240201213461"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先到先服务调度算法(FCFS，First Come, First Served)"},{"Type":"NodeText","Data":" : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。"}]}]},{"ID":"20240201213462-cf7nr0i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213462-cf7nr0i","updated":"20240201213462"},"Children":[{"ID":"20240201213463-0ycdtww","Type":"NodeParagraph","Properties":{"id":"20240201213463-0ycdtww","updated":"20240201213463"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"短作业优先的调度算法(SJF，Shortest Job First)"},{"Type":"NodeText","Data":" : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。"}]}]},{"ID":"20240201213464-44g4a0m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-44g4a0m","updated":"20240201213464"},"Children":[{"ID":"20240201213465-52ho2fs","Type":"NodeParagraph","Properties":{"id":"20240201213465-52ho2fs","updated":"20240201213465"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间片轮转调度算法（RR，Round-Robin）"},{"Type":"NodeText","Data":" : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。"}]}]},{"ID":"20240201213466-ns7opzu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213466-ns7opzu","updated":"20240201213466"},"Children":[{"ID":"20240201213467-mtkluwg","Type":"NodeParagraph","Properties":{"id":"20240201213467-mtkluwg","updated":"20240201213467"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多级反馈队列调度算法（MFQ，Multi-level Feedback Queue）"},{"Type":"NodeText","Data":"：前面介绍的几种进程调度的算法都有一定的局限性。如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"短进程优先的调度算法，仅照顾了短进程而忽略了长进程"},{"Type":"NodeText","Data":" 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"被公认的一种较好的进程调度算法"},{"Type":"NodeText","Data":"，UNIX 操作系统采取的便是这种调度算法。"}]}]},{"ID":"20240201213468-isy0xl9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213468-isy0xl9","updated":"20240201213468"},"Children":[{"ID":"20240201213469-48pjzft","Type":"NodeParagraph","Properties":{"id":"20240201213469-48pjzft","updated":"20240201213469"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优先级调度算法（Priority）"},{"Type":"NodeText","Data":"：为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。"}]}]}]},{"ID":"20240201213470-7hma0pq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213470-7hma0pq","updated":"20240201213470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是僵尸进程和孤儿进程？"}]},{"ID":"20240201213471-g3eip3i","Type":"NodeParagraph","Properties":{"id":"20240201213471-g3eip3i","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"在 Unix/Linux 系统中，子进程通常是通过 fork()系统调用创建的，该调用会创建一个新的进程，该进程是原有进程的一个副本。子进程和父进程的运行是相互独立的，它们各自拥有自己的 PCB，即使父进程结束了，子进程仍然可以继续运行。"}]},{"ID":"20240201213472-wmmw0hs","Type":"NodeParagraph","Properties":{"id":"20240201213472-wmmw0hs","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"当一个进程调用 exit()系统调用结束自己的生命时，内核会释放该进程的所有资源，包括打开的文件、占用的内存等，但是该进程对应的 PCB 依然存在于系统中。这些信息只有在父进程调用 wait()或 waitpid()系统调用时才会被释放，以便让父进程得到子进程的状态信息。"}]},{"ID":"20240201213473-pmnb3vh","Type":"NodeParagraph","Properties":{"id":"20240201213473-pmnb3vh","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"这样的设计可以让父进程在子进程结束时得到子进程的状态信息，并且可以防止出现“僵尸进程”（即子进程结束后 PCB 仍然存在但父进程无法得到状态信息的情况）。"}]},{"ID":"20240201213474-dxnwq2q","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213474-dxnwq2q","updated":"20240201213474"},"Children":[{"ID":"20240201213475-6k9pt4c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213475-6k9pt4c","updated":"20240201213475"},"Children":[{"ID":"20240201213476-v9hr754","Type":"NodeParagraph","Properties":{"id":"20240201213476-v9hr754","updated":"20240201213476"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"僵尸进程"},{"Type":"NodeText","Data":"：子进程已经终止，但是其父进程仍在运行，且父进程没有调用 wait()或 waitpid()等系统调用来获取子进程的状态信息，释放子进程占用的资源，导致子进程的 PCB 依然存在于系统中，但无法被进一步使用。这种情况下，子进程被称为“僵尸进程”。避免僵尸进程的产生，父进程需要及时调用 wait()或 waitpid()系统调用来回收子进程。"}]}]},{"ID":"20240201213477-etzqvki","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213477-etzqvki","updated":"20240201213477"},"Children":[{"ID":"20240201213478-epfbc02","Type":"NodeParagraph","Properties":{"id":"20240201213478-epfbc02","updated":"20240201213478"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"孤儿进程"},{"Type":"NodeText","Data":"：一个进程的父进程已经终止或者不存在，但是该进程仍在运行。这种情况下，该进程就是孤儿进程。孤儿进程通常是由于父进程意外终止或未及时调用 wait()或 waitpid()等系统调用来回收子进程导致的。为了避免孤儿进程占用系统资源，操作系统会将孤儿进程的父进程设置为 init 进程（进程号为 1），由 init 进程来回收孤儿进程的资源。"}]}]}]},{"ID":"20240201213479-mbfsvhy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213479-mbfsvhy","updated":"20240201213479"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何查看是否有僵尸进程？"}]},{"ID":"20240201213480-8h2pibf","Type":"NodeParagraph","Properties":{"id":"20240201213480-8h2pibf","updated":"20240201213480"},"Children":[{"Type":"NodeText","Data":"Linux 下可以使用 Top 命令查找，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zombie"},{"Type":"NodeText","Data":" 值表示僵尸进程的数量，为 0 则代表没有僵尸进程。"}]},{"ID":"20240201213481-cnardgb","Type":"NodeParagraph","Properties":{"id":"20240201213481-cnardgb","updated":"20240201213481"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"僵尸进程查看","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/zombie-process-view.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213482-t30ucu3","Type":"NodeParagraph","Properties":{"id":"20240201213482-t30ucu3","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"下面这个命令可以定位僵尸进程以及该僵尸进程的父进程："}]},{"ID":"20240201213483-urw37to","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213483-urw37to","updated":"20240201213483"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ps -A -ostat,ppid,pid,cmd |grep -e '^[Zz]'\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213484-gx76j5b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213484-gx76j5b","updated":"20240201213484"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁"}]},{"ID":"20240201213485-vi2tv5v","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213485-vi2tv5v","updated":"20240201213485"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是死锁？"}]},{"ID":"20240201213486-yoyz8xb","Type":"NodeParagraph","Properties":{"id":"20240201213486-yoyz8xb","updated":"20240201213486"},"Children":[{"Type":"NodeText","Data":"死锁（Deadlock）描述的是这样一种情况：多个进程/线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于进程/线程被无限期地阻塞，因此程序不可能正常终止。"}]},{"ID":"20240201213487-q1v0bi2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213487-q1v0bi2","updated":"20240201213487"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"能列举一个操作系统发生死锁的例子吗？"}]},{"ID":"20240201213488-vu9a6z4","Type":"NodeParagraph","Properties":{"id":"20240201213488-vu9a6z4","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"假设有两个进程 A 和 B，以及两个资源 X 和 Y，它们的分配情况如下："}]},{"ID":"20240201213489-olcmb4k","Type":"NodeTable","Data":"| 进程 | 占用资源 | 需求资源 |\n| ---- | -------- | -------- |\n| A    | X        | Y        |\n| B    | Y        | X        |","TableAligns":[0,0,0],"Properties":{"id":"20240201213489-olcmb4k","updated":"20240201213489"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"进程"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"占用资源"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"需求资源"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"A"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"X"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Y"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"B"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Y"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"X"}]}]}]},{"ID":"20240201213490-sc4l7yk","Type":"NodeParagraph","Properties":{"id":"20240201213490-sc4l7yk","updated":"20240201213490"},"Children":[{"Type":"NodeText","Data":"此时，进程 A 占用资源 X 并且请求资源 Y，而进程 B 已经占用了资源 Y 并请求资源 X。两个进程都在等待对方释放资源，无法继续执行，陷入了死锁状态。"}]},{"ID":"20240201213491-uxy4t7o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213491-uxy4t7o","updated":"20240201213491"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"产生死锁的四个必要条件是什么?"}]},{"ID":"20240201213492-zk9rkr0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213492-zk9rkr0","updated":"20240201213492"},"Children":[{"ID":"20240201213493-mm2zpog","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213493-mm2zpog","updated":"20240201213493"},"Children":[{"ID":"20240201213494-s74mt83","Type":"NodeParagraph","Properties":{"id":"20240201213494-s74mt83","updated":"20240201213494"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥"},{"Type":"NodeText","Data":"：资源必须处于非共享模式，即一次只有一个进程可以使用。如果另一进程申请该资源，那么必须等待直到该资源被释放为止。"}]}]},{"ID":"20240201213495-fakoc5x","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213495-fakoc5x","updated":"20240201213495"},"Children":[{"ID":"20240201213496-fraciz7","Type":"NodeParagraph","Properties":{"id":"20240201213496-fraciz7","updated":"20240201213496"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"占有并等待"},{"Type":"NodeText","Data":"：一个进程至少应该占有一个资源，并等待另一资源，而该资源被其他进程所占有。"}]}]},{"ID":"20240201213497-pxh2dfe","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213497-pxh2dfe","updated":"20240201213497"},"Children":[{"ID":"20240201213498-xhprzo4","Type":"NodeParagraph","Properties":{"id":"20240201213498-xhprzo4","updated":"20240201213498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非抢占"},{"Type":"NodeText","Data":"：资源不能被抢占。只能在持有资源的进程完成任务后，该资源才会被释放。"}]}]},{"ID":"20240201213499-7j0a4f3","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213499-7j0a4f3","updated":"20240201213499"},"Children":[{"ID":"20240201213500-frsfqwq","Type":"NodeParagraph","Properties":{"id":"20240201213500-frsfqwq","updated":"20240201213500"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"循环等待"},{"Type":"NodeText","Data":"：有一组等待进程 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"{P0, P1,..., Pn}"},{"Type":"NodeText","Data":"， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P0"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P1"},{"Type":"NodeText","Data":" 占有，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P1"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P2"},{"Type":"NodeText","Data":" 占有，……，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pn-1"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pn"},{"Type":"NodeText","Data":" 占有，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pn"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P0"},{"Type":"NodeText","Data":" 占有。"}]}]}]},{"ID":"20240201213501-6skywzm","Type":"NodeParagraph","Properties":{"id":"20240201213501-6skywzm","updated":"20240201213501"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意 ⚠️"},{"Type":"NodeText","Data":"：这四个条件是产生死锁的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"必要条件"},{"Type":"NodeText","Data":" ，也就是说只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。"}]},{"ID":"20240201213502-d4hh2an","Type":"NodeParagraph","Properties":{"id":"20240201213502-d4hh2an","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"下面是百度百科对必要条件的解释："}]},{"ID":"20240201213503-z57v09d","Type":"NodeBlockquote","Properties":{"id":"20240201213503-z57v09d","updated":"20240201213503"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213504-dd5vru8","Type":"NodeParagraph","Properties":{"id":"20240201213504-dd5vru8","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"如果没有事物情况 A，则必然没有事物情况 B，也就是说如果有事物情况 B 则一定有事物情况 A，那么 A 就是 B 的必要条件。从逻辑学上看，B 能推导出 A，A 就是 B 的必要条件，等价于 B 是 A 的充分条件。"}]}]},{"ID":"20240201213505-3782skk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213505-3782skk","updated":"20240201213505"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"能写一个模拟产生死锁的代码吗？"}]},{"ID":"20240201213506-2m5wg3f","Type":"NodeParagraph","Properties":{"id":"20240201213506-2m5wg3f","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"下面通过一个实际的例子来模拟下图展示的线程死锁："}]},{"ID":"20240201213507-s1wwd3s","Type":"NodeParagraph","Properties":{"id":"20240201213507-s1wwd3s","updated":"20240201213507"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"线程死锁示意图 ","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/2019-4%E6%AD%BB%E9%94%811-20230814005444749.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213508-ngjhuvx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213508-ngjhuvx","updated":"20240201213508"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class DeadLockDemo {\n    private static Object resource1 = new Object();//资源 1\n    private static Object resource2 = new Object();//资源 2\n\n    public static void main(String[] args) {\n        new Thread(() -\u003e {\n            synchronized (resource1) {\n                System.out.println(Thread.currentThread() + \"get resource1\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource2\");\n                synchronized (resource2) {\n                    System.out.println(Thread.currentThread() + \"get resource2\");\n                }\n            }\n        }, \"线程 1\").start();\n\n        new Thread(() -\u003e {\n            synchronized (resource2) {\n                System.out.println(Thread.currentThread() + \"get resource2\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource1\");\n                synchronized (resource1) {\n                    System.out.println(Thread.currentThread() + \"get resource1\");\n                }\n            }\n        }, \"线程 2\").start();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213509-5tpivv9","Type":"NodeParagraph","Properties":{"id":"20240201213509-5tpivv9","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"Output"}]},{"ID":"20240201213510-en1upsj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213510-en1upsj","updated":"20240201213510"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Thread[线程 1,5,main]get resource1\nThread[线程 2,5,main]get resource2\nThread[线程 1,5,main]waiting get resource2\nThread[线程 2,5,main]waiting get resource1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213511-36158lt","Type":"NodeParagraph","Properties":{"id":"20240201213511-36158lt","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"线程 A 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized (resource1)"},{"Type":"NodeText","Data":" 获得 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"resource1"},{"Type":"NodeText","Data":" 的监视器锁，然后通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread.sleep(1000);"},{"Type":"NodeText","Data":"让线程 A 休眠 1s 为的是让线程 B 得到执行然后获取到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"resource2"},{"Type":"NodeText","Data":" 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。"}]},{"ID":"20240201213512-ie4xs6z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213512-ie4xs6z","updated":"20240201213512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"解决死锁的方法"}]},{"ID":"20240201213513-m0gmh4q","Type":"NodeParagraph","Properties":{"id":"20240201213513-m0gmh4q","updated":"20240201213513"},"Children":[{"Type":"NodeText","Data":"解决死锁的方法可以从多个角度去分析，一般的情况下，有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防，避免，检测和解除四种"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213514-gj3uvv0","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213514-gj3uvv0","updated":"20240201213514"},"Children":[{"ID":"20240201213515-2g9m451","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213515-2g9m451","updated":"20240201213515"},"Children":[{"ID":"20240201213516-yfq6tpw","Type":"NodeParagraph","Properties":{"id":"20240201213516-yfq6tpw","updated":"20240201213516"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防"},{"Type":"NodeText","Data":" 是采用某种策略，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"限制并发进程对资源的请求"},{"Type":"NodeText","Data":"，从而使得死锁的必要条件在系统执行的任何时间上都不满足。"}]}]},{"ID":"20240201213517-ui22l69","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213517-ui22l69","updated":"20240201213517"},"Children":[{"ID":"20240201213518-jxz7k8s","Type":"NodeParagraph","Properties":{"id":"20240201213518-jxz7k8s","updated":"20240201213518"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免"},{"Type":"NodeText","Data":"则是系统在分配资源时，根据资源的使用情况"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提前做出预测"},{"Type":"NodeText","Data":"，从而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免死锁的发生"}]}]},{"ID":"20240201213519-pm6p2xq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213519-pm6p2xq","updated":"20240201213519"},"Children":[{"ID":"20240201213520-o8ahof5","Type":"NodeParagraph","Properties":{"id":"20240201213520-o8ahof5","updated":"20240201213520"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"检测"},{"Type":"NodeText","Data":"是指系统设有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"专门的机构"},{"Type":"NodeText","Data":"，当死锁发生时，该机构能够检测死锁的发生，并精确地确定与死锁有关的进程和资源。"}]}]},{"ID":"20240201213521-nxuvxr3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213521-nxuvxr3","updated":"20240201213521"},"Children":[{"ID":"20240201213522-sotskx2","Type":"NodeParagraph","Properties":{"id":"20240201213522-sotskx2","updated":"20240201213522"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解除"},{"Type":"NodeText","Data":" 是与检测相配套的一种措施，用于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"将进程从死锁状态下解脱出来"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213523-q6pl847","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213523-q6pl847","updated":"20240201213523"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的预防"}]},{"ID":"20240201213524-e8l1i94","Type":"NodeParagraph","Properties":{"id":"20240201213524-e8l1i94","updated":"20240201213524"},"Children":[{"Type":"NodeText","Data":"死锁四大必要条件上面都已经列出来了，很显然，只要破坏四个必要条件中的任何一个就能够预防死锁的发生。"}]},{"ID":"20240201213525-jmkc2fb","Type":"NodeParagraph","Properties":{"id":"20240201213525-jmkc2fb","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"破坏第一个条件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥条件"},{"Type":"NodeText","Data":"：使得资源是可以同时访问的，这是种简单的方法，磁盘就可以用这种方法管理，但是我们要知道，有很多资源 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"往往是不能同时访问的"},{"Type":"NodeText","Data":" ，所以这种做法在大多数的场合是行不通的。"}]},{"ID":"20240201213526-sqneqgx","Type":"NodeParagraph","Properties":{"id":"20240201213526-sqneqgx","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"破坏第三个条件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非抢占"},{"Type":"NodeText","Data":"：也就是说可以采用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"剥夺式调度算法"},{"Type":"NodeText","Data":"，但剥夺式调度方法目前一般仅适用于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主存资源"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理器资源"},{"Type":"NodeText","Data":" 的分配，并不适用于所有的资源，会导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源利用率下降"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213527-jszhc83","Type":"NodeParagraph","Properties":{"id":"20240201213527-jszhc83","updated":"20240201213527"},"Children":[{"Type":"NodeText","Data":"所以一般比较实用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防死锁的方法"},{"Type":"NodeText","Data":"，是通过考虑破坏第二个条件和第四个条件。"}]},{"ID":"20240201213528-8rwmr4g","Type":"NodeParagraph","Properties":{"id":"20240201213528-8rwmr4g","updated":"20240201213528"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、静态分配策略"}]},{"ID":"20240201213529-cic7cke","Type":"NodeParagraph","Properties":{"id":"20240201213529-cic7cke","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"静态分配策略可以破坏死锁产生的第二个条件（占有并等待）。所谓静态分配策略，就是指一个进程必须在执行前就申请到它所需要的全部资源，并且知道它所要的资源都得到满足之后才开始执行。进程要么占有所有的资源然后开始执行，要么不占有资源，不会出现占有一些资源等待一些资源的情况。"}]},{"ID":"20240201213530-6uqxfqz","Type":"NodeParagraph","Properties":{"id":"20240201213530-6uqxfqz","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"静态分配策略逻辑简单，实现也很容易，但这种策略 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"严重地降低了资源利用率"},{"Type":"NodeText","Data":"，因为在每个进程所占有的资源中，有些资源是在比较靠后的执行时间里采用的，甚至有些资源是在额外的情况下才使用的，这样就可能造成一个进程占有了一些 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"几乎不用的资源而使其他需要该资源的进程产生等待"},{"Type":"NodeText","Data":" 的情况。"}]},{"ID":"20240201213531-hr71xks","Type":"NodeParagraph","Properties":{"id":"20240201213531-hr71xks","updated":"20240201213531"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、层次分配策略"}]},{"ID":"20240201213532-6jtmxap","Type":"NodeParagraph","Properties":{"id":"20240201213532-6jtmxap","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"层次分配策略破坏了产生死锁的第四个条件(循环等待)。在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源，按这种策略，是不可能出现循环等待链的，因为那样的话，就出现了已经申请了较高层的资源，反而去申请了较低层的资源，不符合层次分配策略，证明略。"}]},{"ID":"20240201213533-d79mkge","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213533-d79mkge","updated":"20240201213533"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的避免"}]},{"ID":"20240201213534-gzrdymh","Type":"NodeParagraph","Properties":{"id":"20240201213534-gzrdymh","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"上面提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"破坏"},{"Type":"NodeText","Data":" 死锁产生的四个必要条件之一就可以成功 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防系统发生死锁"},{"Type":"NodeText","Data":" ，但是会导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"低效的进程运行"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源使用率"},{"Type":"NodeText","Data":" 。而死锁的避免相反，它的角度是允许系统中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同时存在四个必要条件"},{"Type":"NodeText","Data":" ，只要掌握并发进程中与每个进程有关的资源动态申请情况，做出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"明智和合理的选择"},{"Type":"NodeText","Data":" ，仍然可以避免死锁，因为四大条件仅仅是产生死锁的必要条件。"}]},{"ID":"20240201213535-dqqmgu1","Type":"NodeParagraph","Properties":{"id":"20240201213535-dqqmgu1","updated":"20240201213535"},"Children":[{"Type":"NodeText","Data":"我们将系统的状态分为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全状态"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不安全状态"},{"Type":"NodeText","Data":" ，每当在未申请者分配资源前先测试系统状态，若把系统资源分配给申请者会产生死锁，则拒绝分配，否则接受申请，并为它分配资源。"}]},{"ID":"20240201213536-eq6v10q","Type":"NodeBlockquote","Properties":{"id":"20240201213536-eq6v10q","updated":"20240201213536"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213537-3ayz3os","Type":"NodeParagraph","Properties":{"id":"20240201213537-3ayz3os","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"如果操作系统能够保证所有的进程在有限的时间内得到需要的全部资源，则称系统处于安全状态，否则说系统是不安全的。很显然，系统处于安全状态则不会发生死锁，系统若处于不安全状态则可能发生死锁。"}]}]},{"ID":"20240201213538-weos6eg","Type":"NodeParagraph","Properties":{"id":"20240201213538-weos6eg","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"那么如何保证系统保持在安全状态呢？通过算法，其中最具有代表性的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免死锁算法"},{"Type":"NodeText","Data":" 就是 Dijkstra 的银行家算法，银行家算法用一句话表达就是：当一个进程申请使用资源的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"银行家算法"},{"Type":"NodeText","Data":" 通过先 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"试探"},{"Type":"NodeText","Data":" 分配给该进程资源，然后通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全性算法"},{"Type":"NodeText","Data":" 判断分配后系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待，若能够进入到安全的状态，则就 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"真的分配资源给该进程"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213539-2bk9w0q","Type":"NodeParagraph","Properties":{"id":"20240201213539-2bk9w0q","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"银行家算法详情可见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/qq_33414271/article/details/80245715","TextMarkTextContent":"《一句话+一张图说清楚——银行家算法》"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213540-svfrhtn","Type":"NodeParagraph","Properties":{"id":"20240201213540-svfrhtn","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"操作系统教程书中讲述的银行家算法也比较清晰，可以一看."}]},{"ID":"20240201213541-rlpuerw","Type":"NodeParagraph","Properties":{"id":"20240201213541-rlpuerw","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"死锁的避免(银行家算法)改善了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源使用率低的问题"},{"Type":"NodeText","Data":" ，但是它要不断地检测每个进程对各类资源的占用和申请情况，以及做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全性检查"},{"Type":"NodeText","Data":" ，需要花费较多的时间。"}]},{"ID":"20240201213542-cvkn18w","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213542-cvkn18w","updated":"20240201213542"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的检测"}]},{"ID":"20240201213543-a3uff96","Type":"NodeParagraph","Properties":{"id":"20240201213543-a3uff96","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"对资源的分配加以限制可以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防和避免"},{"Type":"NodeText","Data":" 死锁的发生，但是都不利于各进程对系统资源的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"充分共享"},{"Type":"NodeText","Data":"。解决死锁问题的另一条途径是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁检测和解除"},{"Type":"NodeText","Data":" (这里突然联想到了乐观锁和悲观锁，感觉死锁的检测和解除就像是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"乐观锁"},{"Type":"NodeText","Data":" ，分配资源时不去提前管会不会发生死锁了，等到真的死锁出现了再来解决嘛，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁的预防和避免"},{"Type":"NodeText","Data":" 更像是悲观锁，总是觉得死锁会出现，所以在分配资源的时候就很谨慎)。"}]},{"ID":"20240201213544-aleo6hq","Type":"NodeParagraph","Properties":{"id":"20240201213544-aleo6hq","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"这种方法对资源的分配不加以任何限制，也不采取死锁避免措施，但系统 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定时地运行一个 “死锁检测”"},{"Type":"NodeText","Data":" 的程序，判断系统内是否出现死锁，如果检测到系统发生了死锁，再采取措施去解除它。"}]},{"ID":"20240201213545-z8j4ypj","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213545-z8j4ypj","updated":"20240201213545"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程-资源分配图"}]},{"ID":"20240201213546-zhshdlk","Type":"NodeParagraph","Properties":{"id":"20240201213546-zhshdlk","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"操作系统中的每一刻时刻的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"系统状态"},{"Type":"NodeText","Data":"都可以用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程-资源分配图"},{"Type":"NodeText","Data":"来表示，进程-资源分配图是描述进程和资源申请及分配关系的一种有向图，可用于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"检测系统是否处于死锁状态"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213547-rgs3xtb","Type":"NodeParagraph","Properties":{"id":"20240201213547-rgs3xtb","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"用一个方框表示每一个资源类，方框中的黑点表示该资源类中的各个资源，每个键进程用一个圆圈表示，用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有向边"},{"Type":"NodeText","Data":" 来表示"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程申请资源和资源被分配的情况"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213548-avorxev","Type":"NodeParagraph","Properties":{"id":"20240201213548-avorxev","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"图中 2-21 是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程-资源分配图"},{"Type":"NodeText","Data":"的一个例子，其中共有三个资源类，每个进程的资源占有和申请情况已清楚地表示在图中。在这个例子中，由于存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"占有和等待资源的环路"},{"Type":"NodeText","Data":" ，导致一组进程永远处于等待资源的状态，发生了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213549-s1z0xjo","Type":"NodeParagraph","Properties":{"id":"20240201213549-s1z0xjo","updated":"20240201213549"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"进程-资源分配图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/process-resource-allocation-diagram.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213550-mp0rvgo","Type":"NodeParagraph","Properties":{"id":"20240201213550-mp0rvgo","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"进程-资源分配图中存在环路并不一定是发生了死锁。因为循环等待资源仅仅是死锁发生的必要条件，而不是充分条件。图 2-22 便是一个有环路而无死锁的例子。虽然进程 P1 和进程 P3 分别占用了一个资源 R1 和一个资源 R2，并且因为等待另一个资源 R2 和另一个资源 R1 形成了环路，但进程 P2 和进程 P4 分别占有了一个资源 R1 和一个资源 R2，它们申请的资源得到了满足，在有限的时间里会归还资源，于是进程 P1 或 P3 都能获得另一个所需的资源，环路自动解除，系统也就不存在死锁状态了。"}]},{"ID":"20240201213551-5olok27","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213551-5olok27","updated":"20240201213551"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁检测步骤"}]},{"ID":"20240201213552-uu9rgh8","Type":"NodeParagraph","Properties":{"id":"20240201213552-uu9rgh8","updated":"20240201213552"},"Children":[{"Type":"NodeText","Data":"知道了死锁检测的原理，我们可以利用下列步骤编写一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁检测"},{"Type":"NodeText","Data":" 程序，检测系统是否产生了死锁。"}]},{"ID":"20240201213553-eez0fnj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213553-eez0fnj","updated":"20240201213553"},"Children":[{"ID":"20240201213554-c7upadk","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213554-c7upadk","updated":"20240201213554"},"Children":[{"ID":"20240201213555-2ldi9zv","Type":"NodeParagraph","Properties":{"id":"20240201213555-2ldi9zv","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"如果进程-资源分配图中无环路，则此时系统没有发生死锁"}]}]},{"ID":"20240201213556-9ssolkw","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213556-9ssolkw","updated":"20240201213556"},"Children":[{"ID":"20240201213557-vx620vl","Type":"NodeParagraph","Properties":{"id":"20240201213557-vx620vl","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"如果进程-资源分配图中有环路，且每个资源类仅有一个资源，则系统中已经发生了死锁。"}]}]},{"ID":"20240201213558-9vlzaji","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213558-9vlzaji","updated":"20240201213558"},"Children":[{"ID":"20240201213559-1bhp6ax","Type":"NodeParagraph","Properties":{"id":"20240201213559-1bhp6ax","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"既不阻塞又非独立的进程"},{"Type":"NodeText","Data":" ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消除所有的边"},{"Type":"NodeText","Data":" ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拓扑排序"},{"Type":"NodeText","Data":")"}]}]}]},{"ID":"20240201213560-0z3w5bq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213560-0z3w5bq","updated":"20240201213560"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的解除"}]},{"ID":"20240201213561-5ra10ad","Type":"NodeParagraph","Properties":{"id":"20240201213561-5ra10ad","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"当死锁检测程序检测到存在死锁发生时，应设法让其解除，让系统从死锁状态中恢复过来，常用的解除死锁的方法有以下四种："}]},{"ID":"20240201213562-6m9vr6n","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213562-6m9vr6n","updated":"20240201213562"},"Children":[{"ID":"20240201213563-16ixst4","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213563-16ixst4","updated":"20240201213563"},"Children":[{"ID":"20240201213564-oimmrzq","Type":"NodeParagraph","Properties":{"id":"20240201213564-oimmrzq","updated":"20240201213564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"立即结束所有进程的执行，重新启动操作系统"},{"Type":"NodeText","Data":"：这种方法简单，但以前所在的工作全部作废，损失很大。"}]}]},{"ID":"20240201213565-xr5ljsf","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213565-xr5ljsf","updated":"20240201213565"},"Children":[{"ID":"20240201213566-4q04gma","Type":"NodeParagraph","Properties":{"id":"20240201213566-4q04gma","updated":"20240201213566"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"撤销涉及死锁的所有进程，解除死锁后继续运行"},{"Type":"NodeText","Data":"：这种方法能彻底打破"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁的循环等待"},{"Type":"NodeText","Data":"条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。"}]}]},{"ID":"20240201213567-g644x6a","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213567-g644x6a","updated":"20240201213567"},"Children":[{"ID":"20240201213568-t0geu3o","Type":"NodeParagraph","Properties":{"id":"20240201213568-t0geu3o","updated":"20240201213568"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"逐个撤销涉及死锁的进程，回收其资源直至死锁解除。"}]}]},{"ID":"20240201213569-df8horg","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213569-df8horg","updated":"20240201213569"},"Children":[{"ID":"20240201213570-3kl0b6f","Type":"NodeParagraph","Properties":{"id":"20240201213570-3kl0b6f","updated":"20240201213570"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"抢占资源"},{"Type":"NodeText","Data":"：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除。"}]}]}]},{"ID":"20240201213571-kf3hyvd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213571-kf3hyvd","updated":"20240201213571"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213572-56vx5kt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-56vx5kt","updated":"20240201213572"},"Children":[{"ID":"20240201213573-44p0fj9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-44p0fj9","updated":"20240201213573"},"Children":[{"ID":"20240201213574-zwsapfl","Type":"NodeParagraph","Properties":{"id":"20240201213574-zwsapfl","updated":"20240201213574"},"Children":[{"Type":"NodeText","Data":"《计算机操作系统—汤小丹》第四版"}]}]},{"ID":"20240201213575-e7j1bui","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-e7j1bui","updated":"20240201213575"},"Children":[{"ID":"20240201213576-5m0temu","Type":"NodeParagraph","Properties":{"id":"20240201213576-5m0temu","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"《深入理解计算机系统》"}]}]},{"ID":"20240201213577-651xxzj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-651xxzj","updated":"20240201213577"},"Children":[{"ID":"20240201213578-6646b5h","Type":"NodeParagraph","Properties":{"id":"20240201213578-6646b5h","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"《重学操作系统》"}]}]},{"ID":"20240201213579-sdp885f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213579-sdp885f","updated":"20240201213579"},"Children":[{"ID":"20240201213580-jrl8kq9","Type":"NodeParagraph","Properties":{"id":"20240201213580-jrl8kq9","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"操作系统为什么要分用户态和内核态："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/chen134225/article/details/81783980","TextMarkTextContent":"https://blog.csdn.net/chen134225/article/details/81783980"}]}]},{"ID":"20240201213581-7n4madx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-7n4madx","updated":"20240201213581"},"Children":[{"ID":"20240201213582-khdqien","Type":"NodeParagraph","Properties":{"id":"20240201213582-khdqien","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"从根上理解用户态与内核态："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/6923863670132850701","TextMarkTextContent":"https://juejin.cn/post/6923863670132850701"}]}]},{"ID":"20240201213583-rnnu3we","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-rnnu3we","updated":"20240201213583"},"Children":[{"ID":"20240201213584-n129jcr","Type":"NodeParagraph","Properties":{"id":"20240201213584-n129jcr","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"什么是僵尸进程与孤儿进程："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/a745233700/article/details/120715371","TextMarkTextContent":"https://blog.csdn.net/a745233700/article/details/120715371"}]}]}]},{"ID":"20240201213585-ffhb8z9","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213585-ffhb8z9","updated":"20240201213585"}}]}