{"ID":"20240201213159-rpxwifc","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213159-rpxwifc","title":"operating-system-basic-questions-02","updated":"20240201213159"},"Children":[{"ID":"20240201213160-0ht0i8o","Type":"NodeThematicBreak","Properties":{"id":"20240201213160-0ht0i8o","updated":"20240201213160"}},{"ID":"20240201213161-vhu3sw5","Type":"NodeParagraph","Properties":{"id":"20240201213161-vhu3sw5","updated":"20240201213161"},"Children":[{"Type":"NodeText","Data":"title: 操作系统常见面试题总结(下)"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 计算机基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213162-nbybtgb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213162-nbybtgb","updated":"20240201213162"},"Children":[{"ID":"20240201213163-tphchei","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213163-tphchei","updated":"20240201213163"},"Children":[{"ID":"20240201213164-gt7jegj","Type":"NodeParagraph","Properties":{"id":"20240201213164-gt7jegj","updated":"20240201213164"},"Children":[{"Type":"NodeText","Data":"操作系统"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213165-f7lbobj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213165-f7lbobj","updated":"20240201213165"},"Children":[{"ID":"20240201213166-n035xsg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213166-n035xsg","updated":"20240201213166"},"Children":[{"ID":"20240201213167-zkc6gs7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213167-zkc6gs7","updated":"20240201213167"},"Children":[{"ID":"20240201213168-0kdmhzq","Type":"NodeParagraph","Properties":{"id":"20240201213168-0kdmhzq","updated":"20240201213168"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213169-smif6n7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213169-smif6n7","updated":"20240201213169"},"Children":[{"ID":"20240201213170-x1znoyk","Type":"NodeParagraph","Properties":{"id":"20240201213170-x1znoyk","updated":"20240201213170"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 操作系统,进程,进程通信方式,死锁,操作系统内存管理,块表,多级页表,虚拟内存,页面置换算法"}]}]}]}]},{"ID":"20240201213171-fufgpeq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213171-fufgpeq","updated":"20240201213171"},"Children":[{"ID":"20240201213172-7naty1n","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213172-7naty1n","updated":"20240201213172"},"Children":[{"ID":"20240201213173-yxnnz1z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213173-yxnnz1z","updated":"20240201213173"},"Children":[{"ID":"20240201213174-ov87lqj","Type":"NodeParagraph","Properties":{"id":"20240201213174-ov87lqj","updated":"20240201213174"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213175-0vr4nma","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213175-0vr4nma","updated":"20240201213175"},"Children":[{"ID":"20240201213176-cvgxrje","Type":"NodeParagraph","Properties":{"id":"20240201213176-cvgxrje","updated":"20240201213176"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 很多读者抱怨计算操作系统的知识点比较繁杂，自己也没有多少耐心去看，但是面试的时候又经常会遇到。所以，我带着我整理好的操作系统的常见问题来啦！这篇文章总结了一些我觉得比较重要的操作系统相关的问题比如进程管理、内存管理、虚拟内存等等。"}]}]}]}]}]},{"ID":"20240201213177-4o2800n","Type":"NodeThematicBreak","Properties":{"id":"20240201213177-4o2800n","updated":"20240201213177"}},{"ID":"20240201213178-emdriiu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213178-emdriiu","updated":"20240201213178"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"内存管理"}]},{"ID":"20240201213179-xxqx0x0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213179-xxqx0x0","updated":"20240201213179"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"内存管理主要做了什么？"}]},{"ID":"20240201213180-vcd7t0r","Type":"NodeParagraph","Properties":{"id":"20240201213180-vcd7t0r","updated":"20240201213180"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"内存管理主要做的事情","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/memory-management-roles.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213181-ei9fzhy","Type":"NodeParagraph","Properties":{"id":"20240201213181-ei9fzhy","updated":"20240201213181"},"Children":[{"Type":"NodeText","Data":"操作系统的内存管理非常重要，主要负责下面这些事情："}]},{"ID":"20240201213182-6y5kbvp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213182-6y5kbvp","updated":"20240201213182"},"Children":[{"ID":"20240201213183-nxwyk9w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213183-nxwyk9w","updated":"20240201213183"},"Children":[{"ID":"20240201213184-deooj2k","Type":"NodeParagraph","Properties":{"id":"20240201213184-deooj2k","updated":"20240201213184"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存的分配与回收"},{"Type":"NodeText","Data":"：对进程所需的内存进行分配和释放，malloc 函数：申请内存，free 函数：释放内存。"}]}]},{"ID":"20240201213185-ve36r1f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213185-ve36r1f","updated":"20240201213185"},"Children":[{"ID":"20240201213186-3s3ckk5","Type":"NodeParagraph","Properties":{"id":"20240201213186-3s3ckk5","updated":"20240201213186"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"地址转换"},{"Type":"NodeText","Data":"：将程序中的虚拟地址转换成内存中的物理地址。"}]}]},{"ID":"20240201213187-gevhofd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213187-gevhofd","updated":"20240201213187"},"Children":[{"ID":"20240201213188-io8rate","Type":"NodeParagraph","Properties":{"id":"20240201213188-io8rate","updated":"20240201213188"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存扩充"},{"Type":"NodeText","Data":"：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存。"}]}]},{"ID":"20240201213189-bnkyi6n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213189-bnkyi6n","updated":"20240201213189"},"Children":[{"ID":"20240201213190-68retp2","Type":"NodeParagraph","Properties":{"id":"20240201213190-68retp2","updated":"20240201213190"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存映射"},{"Type":"NodeText","Data":"：将一个文件直接映射到进程的进程空间中，这样可以通过内存指针用读写内存的办法直接存取文件内容，速度更快。"}]}]},{"ID":"20240201213191-wpvnxuy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213191-wpvnxuy","updated":"20240201213191"},"Children":[{"ID":"20240201213192-9btc4wm","Type":"NodeParagraph","Properties":{"id":"20240201213192-9btc4wm","updated":"20240201213192"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存优化"},{"Type":"NodeText","Data":"：通过调整内存分配策略和回收算法来优化内存使用效率。"}]}]},{"ID":"20240201213193-ybl4oxy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213193-ybl4oxy","updated":"20240201213193"},"Children":[{"ID":"20240201213194-wj5wn4a","Type":"NodeParagraph","Properties":{"id":"20240201213194-wj5wn4a","updated":"20240201213194"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存安全"},{"Type":"NodeText","Data":"：保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性。"}]}]},{"ID":"20240201213195-ua0rtyo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213195-ua0rtyo","updated":"20240201213195"},"Children":[{"ID":"20240201213196-ujwvcw5","Type":"NodeParagraph","Properties":{"id":"20240201213196-ujwvcw5","updated":"20240201213196"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213197-1x2dg1f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213197-1x2dg1f","updated":"20240201213197"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是内存碎片？"}]},{"ID":"20240201213198-0k20vv4","Type":"NodeParagraph","Properties":{"id":"20240201213198-0k20vv4","updated":"20240201213198"},"Children":[{"Type":"NodeText","Data":"内存碎片是由内存的申请和释放产生的，通常分为下面两种："}]},{"ID":"20240201213199-32btg1k","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213199-32btg1k","updated":"20240201213199"},"Children":[{"ID":"20240201213200-cbt91sx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213200-cbt91sx","updated":"20240201213200"},"Children":[{"ID":"20240201213201-la5pv7o","Type":"NodeParagraph","Properties":{"id":"20240201213201-la5pv7o","updated":"20240201213201"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内部内存碎片(Internal Memory Fragmentation，简称为内存碎片)"},{"Type":"NodeText","Data":"：已经分配给进程使用但未被使用的内存。导致内部内存碎片的主要原因是，当采用固定比例比如 2 的幂次方进行内存分配时，进程所分配的内存可能会比其实际所需要的大。举个例子，一个进程只需要 65 字节的内存，但为其分配了 128（2^7） 大小的内存，那 63 字节的内存就成为了内部内存碎片。"}]}]},{"ID":"20240201213202-x360gkj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213202-x360gkj","updated":"20240201213202"},"Children":[{"ID":"20240201213203-i1nxrg8","Type":"NodeParagraph","Properties":{"id":"20240201213203-i1nxrg8","updated":"20240201213203"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"外部内存碎片(External Memory Fragmentation，简称为外部碎片)"},{"Type":"NodeText","Data":"：由于未分配的连续内存区域太小，以至于不能满足任意进程所需要的内存分配请求，这些小片段且不连续的内存空间被称为外部碎片。也就是说，外部内存碎片指的是那些并未分配给进程但又不能使用的内存。我们后面介绍的分段机制就会导致外部内存碎片。"}]}]}]},{"ID":"20240201213204-mlub44z","Type":"NodeParagraph","Properties":{"id":"20240201213204-mlub44z","updated":"20240201213204"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"内存碎片","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/internal-and-external-fragmentation.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213205-bco9k0q","Type":"NodeParagraph","Properties":{"id":"20240201213205-bco9k0q","updated":"20240201213205"},"Children":[{"Type":"NodeText","Data":"内存碎片会导致内存利用率下降，如何减少内存碎片是内存管理要非常重视的一件事情。"}]},{"ID":"20240201213206-1sc8tr2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213206-1sc8tr2","updated":"20240201213206"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的内存管理方式有哪些？"}]},{"ID":"20240201213207-wlc5w6a","Type":"NodeParagraph","Properties":{"id":"20240201213207-wlc5w6a","updated":"20240201213207"},"Children":[{"Type":"NodeText","Data":"内存管理方式可以简单分为下面两种："}]},{"ID":"20240201213208-53qxmts","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213208-53qxmts","updated":"20240201213208"},"Children":[{"ID":"20240201213209-112gjl0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213209-112gjl0","updated":"20240201213209"},"Children":[{"ID":"20240201213210-opi6onq","Type":"NodeParagraph","Properties":{"id":"20240201213210-opi6onq","updated":"20240201213210"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"连续内存管理"},{"Type":"NodeText","Data":"：为一个用户程序分配一个连续的内存空间，内存利用率一般不高。"}]}]},{"ID":"20240201213211-1veigf1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213211-1veigf1","updated":"20240201213211"},"Children":[{"ID":"20240201213212-x3n1fe2","Type":"NodeParagraph","Properties":{"id":"20240201213212-x3n1fe2","updated":"20240201213212"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非连续内存管理"},{"Type":"NodeText","Data":"：允许一个程序使用的内存分布在离散或者说不相邻的内存中，相对更加灵活一些。"}]}]}]},{"ID":"20240201213213-icbszos","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213213-icbszos","updated":"20240201213213"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"连续内存管理"}]},{"ID":"20240201213214-t5mv6pn","Type":"NodeParagraph","Properties":{"id":"20240201213214-t5mv6pn","updated":"20240201213214"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"块式管理"},{"Type":"NodeText","Data":" 是早期计算机操作系统的一种连续内存管理方式，存在严重的内存碎片问题。块式管理会将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为内部内存碎片。除了内部内存碎片之外，由于两个内存块之间可能还会有外部内存碎片，这些不连续的外部内存碎片由于太小了无法再进行分配。"}]},{"ID":"20240201213215-hj090ig","Type":"NodeParagraph","Properties":{"id":"20240201213215-hj090ig","updated":"20240201213215"},"Children":[{"Type":"NodeText","Data":"在 Linux 系统中，连续内存管理采用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"伙伴系统（Buddy System）算法"},{"Type":"NodeText","Data":" 来实现，这是一种经典的连续内存分配算法，可以有效解决外部内存碎片的问题。伙伴系统的主要思想是将内存按 2 的幂次划分（每一块内存大小都是 2 的幂次比如 2^6=64 KB），并将相邻的内存块组合成一对伙伴（注意："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"必须是相邻的才是伙伴"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213216-mon5jri","Type":"NodeParagraph","Properties":{"id":"20240201213216-mon5jri","updated":"20240201213216"},"Children":[{"Type":"NodeText","Data":"当进行内存分配时，伙伴系统会尝试找到大小最合适的内存块。如果找到的内存块过大，就将其一分为二，分成两个大小相等的伙伴块。如果还是大的话，就继续切分，直到到达合适的大小为止。"}]},{"ID":"20240201213217-ixq2prd","Type":"NodeParagraph","Properties":{"id":"20240201213217-ixq2prd","updated":"20240201213217"},"Children":[{"Type":"NodeText","Data":"假设两块相邻的内存块都被释放，系统会将这两个内存块合并，进而形成一个更大的内存块，以便后续的内存分配。这样就可以减少内存碎片的问题，提高内存利用率。"}]},{"ID":"20240201213218-215zcxo","Type":"NodeParagraph","Properties":{"id":"20240201213218-215zcxo","updated":"20240201213218"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"伙伴系统（Buddy System）内存管理","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/linux-buddy-system.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213219-del46lt","Type":"NodeParagraph","Properties":{"id":"20240201213219-del46lt","updated":"20240201213219"},"Children":[{"Type":"NodeText","Data":"虽然解决了外部内存碎片的问题，但伙伴系统仍然存在内存利用率不高的问题（内部内存碎片）。这主要是因为伙伴系统只能分配大小为 2"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"n 的内存块，因此当需要分配的内存大小不是 2"},{"Type":"NodeText","Data":"n 的整数倍时，会浪费一定的内存空间。举个例子：如果要分配 65 大小的内存快，依然需要分配 2^7=128 大小的内存块。"}]},{"ID":"20240201213220-pzh3ezh","Type":"NodeParagraph","Properties":{"id":"20240201213220-pzh3ezh","updated":"20240201213220"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"伙伴系统内存浪费问题","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/buddy-system-memory-waste.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213221-fgu0geh","Type":"NodeParagraph","Properties":{"id":"20240201213221-fgu0geh","updated":"20240201213221"},"Children":[{"Type":"NodeText","Data":"对于内部内存碎片的问题，Linux 采用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SLAB"},{"Type":"NodeText","Data":" 进行解决。由于这部分内容不是本篇文章的重点，这里就不详细介绍了。"}]},{"ID":"20240201213222-xl9t2mf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213222-xl9t2mf","updated":"20240201213222"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"非连续内存管理"}]},{"ID":"20240201213223-vm824am","Type":"NodeParagraph","Properties":{"id":"20240201213223-vm824am","updated":"20240201213223"},"Children":[{"Type":"NodeText","Data":"非连续内存管理存在下面 3 种方式："}]},{"ID":"20240201213224-un4lat6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213224-un4lat6","updated":"20240201213224"},"Children":[{"ID":"20240201213225-v98xeej","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213225-v98xeej","updated":"20240201213225"},"Children":[{"ID":"20240201213226-08sa5b9","Type":"NodeParagraph","Properties":{"id":"20240201213226-08sa5b9","updated":"20240201213226"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段式管理"},{"Type":"NodeText","Data":"：以段(—段连续的物理内存)的形式管理/分配物理内存。应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。"}]}]},{"ID":"20240201213227-u6woy7l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213227-u6woy7l","updated":"20240201213227"},"Children":[{"ID":"20240201213228-k4wyvde","Type":"NodeParagraph","Properties":{"id":"20240201213228-k4wyvde","updated":"20240201213228"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页式管理"},{"Type":"NodeText","Data":"：把物理内存分为连续等长的物理页，应用程序的虚拟地址空间也被划分为连续等长的虚拟页，是现代操作系统广泛使用的一种内存管理方式。"}]}]},{"ID":"20240201213229-1bro0mq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213229-1bro0mq","updated":"20240201213229"},"Children":[{"ID":"20240201213230-aqok8y5","Type":"NodeParagraph","Properties":{"id":"20240201213230-aqok8y5","updated":"20240201213230"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段页式管理机制"},{"Type":"NodeText","Data":"：结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页。"}]}]}]},{"ID":"20240201213231-33bkrcv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213231-33bkrcv","updated":"20240201213231"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟内存"}]},{"ID":"20240201213232-l1w40sd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213232-l1w40sd","updated":"20240201213232"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是虚拟内存?有什么用？"}]},{"ID":"20240201213233-8fjvc32","Type":"NodeParagraph","Properties":{"id":"20240201213233-8fjvc32","updated":"20240201213233"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存(Virtual Memory)"},{"Type":"NodeText","Data":" 是计算机系统内存管理非常重要的一个技术，本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理。"}]},{"ID":"20240201213234-tvfn6a9","Type":"NodeParagraph","Properties":{"id":"20240201213234-tvfn6a9","updated":"20240201213234"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"虚拟内存作为进程访问主存的桥梁","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/xingqiu/virtual-memory.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213235-5vghd73","Type":"NodeParagraph","Properties":{"id":"20240201213235-5vghd73","updated":"20240201213235"},"Children":[{"Type":"NodeText","Data":"总结来说，虚拟内存主要提供了下面这些能力："}]},{"ID":"20240201213236-zfo3bq9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213236-zfo3bq9","updated":"20240201213236"},"Children":[{"ID":"20240201213237-kz1u2gc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213237-kz1u2gc","updated":"20240201213237"},"Children":[{"ID":"20240201213238-nukze3u","Type":"NodeParagraph","Properties":{"id":"20240201213238-nukze3u","updated":"20240201213238"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"隔离进程"},{"Type":"NodeText","Data":"：物理内存通过虚拟地址空间访问，虚拟地址空间与进程一一对应。每个进程都认为自己拥有了整个物理内存，进程之间彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。"}]}]},{"ID":"20240201213239-5cb0lhm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213239-5cb0lhm","updated":"20240201213239"},"Children":[{"ID":"20240201213240-8wz9b7w","Type":"NodeParagraph","Properties":{"id":"20240201213240-8wz9b7w","updated":"20240201213240"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提升物理内存利用率"},{"Type":"NodeText","Data":"：有了虚拟地址空间后，操作系统只需要将进程当前正在使用的部分数据或指令加载入物理内存。"}]}]},{"ID":"20240201213241-x36teyz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213241-x36teyz","updated":"20240201213241"},"Children":[{"ID":"20240201213242-1o36zwd","Type":"NodeParagraph","Properties":{"id":"20240201213242-1o36zwd","updated":"20240201213242"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"简化内存管理"},{"Type":"NodeText","Data":"：进程都有一个一致且私有的虚拟地址空间，程序员不用和真正的物理内存打交道，而是借助虚拟地址空间访问物理内存，从而简化了内存管理。"}]}]},{"ID":"20240201213243-y3zqrs1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213243-y3zqrs1","updated":"20240201213243"},"Children":[{"ID":"20240201213244-0jq9s9p","Type":"NodeParagraph","Properties":{"id":"20240201213244-0jq9s9p","updated":"20240201213244"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多个进程共享物理内存"},{"Type":"NodeText","Data":"：进程在运行过程中，会加载许多操作系统的动态库。这些库对于每个进程而言都是公用的，它们在内存中实际只会加载一份，这部分称为共享内存。"}]}]},{"ID":"20240201213245-bz3ru9h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213245-bz3ru9h","updated":"20240201213245"},"Children":[{"ID":"20240201213246-k81bedi","Type":"NodeParagraph","Properties":{"id":"20240201213246-k81bedi","updated":"20240201213246"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提高内存使用安全性"},{"Type":"NodeText","Data":"：控制进程对物理内存的访问，隔离不同进程的访问权限，提高系统的安全性。"}]}]},{"ID":"20240201213247-4aebgff","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213247-4aebgff","updated":"20240201213247"},"Children":[{"ID":"20240201213248-1bkjvfi","Type":"NodeParagraph","Properties":{"id":"20240201213248-1bkjvfi","updated":"20240201213248"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提供更大的可使用内存空间"},{"Type":"NodeText","Data":"：可以让程序拥有超过系统物理内存大小的可用内存空间。这是因为当物理内存不够用时，可以利用磁盘充当，将物理内存页（通常大小为 4 KB）保存到磁盘文件（会影响读写速度），数据或代码页会根据需要在物理内存与磁盘之间移动。"}]}]}]},{"ID":"20240201213249-t7hs576","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213249-t7hs576","updated":"20240201213249"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"没有虚拟内存有什么问题？"}]},{"ID":"20240201213250-px1n5l1","Type":"NodeParagraph","Properties":{"id":"20240201213250-px1n5l1","updated":"20240201213250"},"Children":[{"Type":"NodeText","Data":"如果没有虚拟内存的话，程序直接访问和操作的都是物理内存，看似少了一层中介，但多了很多问题。"}]},{"ID":"20240201213251-ut8740f","Type":"NodeParagraph","Properties":{"id":"20240201213251-ut8740f","updated":"20240201213251"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体有什么问题呢？"},{"Type":"NodeText","Data":" 这里举几个例子说明(参考虚拟内存提供的能力回答这个问题)："}]},{"ID":"20240201213252-9dp992j","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213252-9dp992j","updated":"20240201213252"},"Children":[{"ID":"20240201213253-n0autuy","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213253-n0autuy","updated":"20240201213253"},"Children":[{"ID":"20240201213254-jf7sxp6","Type":"NodeParagraph","Properties":{"id":"20240201213254-jf7sxp6","updated":"20240201213254"},"Children":[{"Type":"NodeText","Data":"用户程序可以访问任意物理内存，可能会不小心操作到系统运行必需的内存，进而造成操作系统崩溃，严重影响系统的安全。"}]}]},{"ID":"20240201213255-phauzqu","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213255-phauzqu","updated":"20240201213255"},"Children":[{"ID":"20240201213256-r23wmvl","Type":"NodeParagraph","Properties":{"id":"20240201213256-r23wmvl","updated":"20240201213256"},"Children":[{"Type":"NodeText","Data":"同时运行多个程序容易崩溃。比如你想同时运行一个微信和一个 QQ 音乐，微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就可能会造成微信这个程序会崩溃。"}]}]},{"ID":"20240201213257-rfzo3jp","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213257-rfzo3jp","updated":"20240201213257"},"Children":[{"ID":"20240201213258-y01p2ym","Type":"NodeParagraph","Properties":{"id":"20240201213258-y01p2ym","updated":"20240201213258"},"Children":[{"Type":"NodeText","Data":"程序运行过程中使用的所有数据或指令都要载入物理内存，根据局部性原理，其中很大一部分可能都不会用到，白白占用了宝贵的物理内存资源。"}]}]},{"ID":"20240201213259-qi5us4l","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213259-qi5us4l","updated":"20240201213259"},"Children":[{"ID":"20240201213260-ta08l93","Type":"NodeParagraph","Properties":{"id":"20240201213260-ta08l93","updated":"20240201213260"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213261-vi0qcc1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213261-vi0qcc1","updated":"20240201213261"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是虚拟地址和物理地址？"}]},{"ID":"20240201213262-tw1vksn","Type":"NodeParagraph","Properties":{"id":"20240201213262-tw1vksn","updated":"20240201213262"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"物理地址（Physical Address）"},{"Type":"NodeText","Data":" 是真正的物理内存中地址，更具体点来说是内存地址寄存器中的地址。程序中访问的内存地址不是物理地址，而是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟地址（Virtual Address）"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213263-gqlue31","Type":"NodeParagraph","Properties":{"id":"20240201213263-gqlue31","updated":"20240201213263"},"Children":[{"Type":"NodeText","Data":"也就是说，我们编程开发的时候实际就是在和虚拟地址打交道。比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的虚拟地址。"}]},{"ID":"20240201213264-n8ensjw","Type":"NodeParagraph","Properties":{"id":"20240201213264-n8ensjw","updated":"20240201213264"},"Children":[{"Type":"NodeText","Data":"操作系统一般通过 CPU 芯片中的一个重要组件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MMU(Memory Management Unit，内存管理单元)"},{"Type":"NodeText","Data":" 将虚拟地址转换为物理地址，这个过程被称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"地址翻译/地址转换（Address Translation）"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213265-36hypew","Type":"NodeParagraph","Properties":{"id":"20240201213265-36hypew","updated":"20240201213265"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"地址翻译过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/physical-virtual-address-translation.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213266-aa3b59n","Type":"NodeParagraph","Properties":{"id":"20240201213266-aa3b59n","updated":"20240201213266"},"Children":[{"Type":"NodeText","Data":"通过 MMU 将虚拟地址转换为物理地址后，再通过总线传到物理内存设备，进而完成相应的物理内存读写请求。"}]},{"ID":"20240201213267-n1w5sx2","Type":"NodeParagraph","Properties":{"id":"20240201213267-n1w5sx2","updated":"20240201213267"},"Children":[{"Type":"NodeText","Data":"MMU 将虚拟地址翻译为物理地址的主要机制有两种: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分段机制"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分页机制"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213268-0xxvpiv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213268-0xxvpiv","updated":"20240201213268"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是虚拟地址空间和物理地址空间？"}]},{"ID":"20240201213269-lh5mors","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213269-lh5mors","updated":"20240201213269"},"Children":[{"ID":"20240201213270-qr1ztwg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213270-qr1ztwg","updated":"20240201213270"},"Children":[{"ID":"20240201213271-zvlcrti","Type":"NodeParagraph","Properties":{"id":"20240201213271-zvlcrti","updated":"20240201213271"},"Children":[{"Type":"NodeText","Data":"虚拟地址空间是虚拟地址的集合，是虚拟内存的范围。每一个进程都有一个一致且私有的虚拟地址空间。"}]}]},{"ID":"20240201213272-hbg2id1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213272-hbg2id1","updated":"20240201213272"},"Children":[{"ID":"20240201213273-ny5diwt","Type":"NodeParagraph","Properties":{"id":"20240201213273-ny5diwt","updated":"20240201213273"},"Children":[{"Type":"NodeText","Data":"物理地址空间是物理地址的集合，是物理内存的范围。"}]}]}]},{"ID":"20240201213274-qju3gvy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213274-qju3gvy","updated":"20240201213274"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟地址与物理内存地址是如何映射的？"}]},{"ID":"20240201213275-yx4nf73","Type":"NodeParagraph","Properties":{"id":"20240201213275-yx4nf73","updated":"20240201213275"},"Children":[{"Type":"NodeText","Data":"MMU 将虚拟地址翻译为物理地址的主要机制有 3 种:"}]},{"ID":"20240201213276-ao9qfsb","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213276-ao9qfsb","updated":"20240201213276"},"Children":[{"ID":"20240201213277-lz3um5a","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213277-lz3um5a","updated":"20240201213277"},"Children":[{"ID":"20240201213278-qqe09g4","Type":"NodeParagraph","Properties":{"id":"20240201213278-qqe09g4","updated":"20240201213278"},"Children":[{"Type":"NodeText","Data":"分段机制"}]}]},{"ID":"20240201213279-7zacobd","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213279-7zacobd","updated":"20240201213279"},"Children":[{"ID":"20240201213280-8d1xi1o","Type":"NodeParagraph","Properties":{"id":"20240201213280-8d1xi1o","updated":"20240201213280"},"Children":[{"Type":"NodeText","Data":"分页机制"}]}]},{"ID":"20240201213281-daxggxe","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213281-daxggxe","updated":"20240201213281"},"Children":[{"ID":"20240201213282-5ljuldq","Type":"NodeParagraph","Properties":{"id":"20240201213282-5ljuldq","updated":"20240201213282"},"Children":[{"Type":"NodeText","Data":"段页机制"}]}]}]},{"ID":"20240201213283-3k9vo1d","Type":"NodeParagraph","Properties":{"id":"20240201213283-3k9vo1d","updated":"20240201213283"},"Children":[{"Type":"NodeText","Data":"其中，现代操作系统广泛采用分页机制，需要重点关注！"}]},{"ID":"20240201213284-kjaizf8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213284-kjaizf8","updated":"20240201213284"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分段机制"}]},{"ID":"20240201213285-cy2cpnq","Type":"NodeParagraph","Properties":{"id":"20240201213285-cy2cpnq","updated":"20240201213285"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分段机制（Segmentation）"},{"Type":"NodeText","Data":" 以段(—段 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"连续"},{"Type":"NodeText","Data":" 的物理内存)的形式管理/分配物理内存。应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。"}]},{"ID":"20240201213286-lukjrhh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213286-lukjrhh","updated":"20240201213286"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"段表有什么用？地址翻译过程是怎样的？"}]},{"ID":"20240201213287-kqs2iqj","Type":"NodeParagraph","Properties":{"id":"20240201213287-kqs2iqj","updated":"20240201213287"},"Children":[{"Type":"NodeText","Data":"分段管理通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段表（Segment Table）"},{"Type":"NodeText","Data":" 映射虚拟地址和物理地址。"}]},{"ID":"20240201213288-om2qjbf","Type":"NodeParagraph","Properties":{"id":"20240201213288-om2qjbf","updated":"20240201213288"},"Children":[{"Type":"NodeText","Data":"分段机制下的虚拟地址由两部分组成："}]},{"ID":"20240201213289-147efas","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213289-147efas","updated":"20240201213289"},"Children":[{"ID":"20240201213290-owpu3s6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213290-owpu3s6","updated":"20240201213290"},"Children":[{"ID":"20240201213291-tukky42","Type":"NodeParagraph","Properties":{"id":"20240201213291-tukky42","updated":"20240201213291"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段号"},{"Type":"NodeText","Data":"：标识着该虚拟地址属于整个虚拟地址空间中的哪一个段。"}]}]},{"ID":"20240201213292-igkk9lh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213292-igkk9lh","updated":"20240201213292"},"Children":[{"ID":"20240201213293-2t796sh","Type":"NodeParagraph","Properties":{"id":"20240201213293-2t796sh","updated":"20240201213293"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段内偏移量"},{"Type":"NodeText","Data":"：相对于该段起始地址的偏移量。"}]}]}]},{"ID":"20240201213294-8dc6014","Type":"NodeParagraph","Properties":{"id":"20240201213294-8dc6014","updated":"20240201213294"},"Children":[{"Type":"NodeText","Data":"具体的地址翻译过程如下："}]},{"ID":"20240201213295-n5vfk2d","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213295-n5vfk2d","updated":"20240201213295"},"Children":[{"ID":"20240201213296-kmpf9xk","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213296-kmpf9xk","updated":"20240201213296"},"Children":[{"ID":"20240201213297-ncvjj67","Type":"NodeParagraph","Properties":{"id":"20240201213297-ncvjj67","updated":"20240201213297"},"Children":[{"Type":"NodeText","Data":"MMU 首先解析得到虚拟地址中的段号；"}]}]},{"ID":"20240201213298-a7szzrv","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213298-a7szzrv","updated":"20240201213298"},"Children":[{"ID":"20240201213299-nhltuh5","Type":"NodeParagraph","Properties":{"id":"20240201213299-nhltuh5","updated":"20240201213299"},"Children":[{"Type":"NodeText","Data":"通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）；"}]}]},{"ID":"20240201213300-dhq4vcx","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213300-dhq4vcx","updated":"20240201213300"},"Children":[{"ID":"20240201213301-6xyqy0x","Type":"NodeParagraph","Properties":{"id":"20240201213301-6xyqy0x","updated":"20240201213301"},"Children":[{"Type":"NodeText","Data":"从段信息中取出该段的起始地址（物理地址）加上虚拟地址中的段内偏移量得到最终的物理地址。"}]}]}]},{"ID":"20240201213302-7qci1fg","Type":"NodeParagraph","Properties":{"id":"20240201213302-7qci1fg","updated":"20240201213302"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"分段机制下的地址翻译过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/segment-virtual-address-composition.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213303-hjnlg7z","Type":"NodeParagraph","Properties":{"id":"20240201213303-hjnlg7z","updated":"20240201213303"},"Children":[{"Type":"NodeText","Data":"段表中还存有诸如段长(可用于检查虚拟地址是否超出合法范围)、段类型（该段的类型，例如代码段、数据段等）等信息。"}]},{"ID":"20240201213304-0ecg864","Type":"NodeParagraph","Properties":{"id":"20240201213304-0ecg864","updated":"20240201213304"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过段号一定要找到对应的段表项吗？得到最终的物理地址后对应的物理内存一定存在吗？"}]},{"ID":"20240201213305-lzlfzc8","Type":"NodeParagraph","Properties":{"id":"20240201213305-lzlfzc8","updated":"20240201213305"},"Children":[{"Type":"NodeText","Data":"不一定。段表项可能并不存在："}]},{"ID":"20240201213306-zw8wsdr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213306-zw8wsdr","updated":"20240201213306"},"Children":[{"ID":"20240201213307-8q11do2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213307-8q11do2","updated":"20240201213307"},"Children":[{"ID":"20240201213308-l7srvej","Type":"NodeParagraph","Properties":{"id":"20240201213308-l7srvej","updated":"20240201213308"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段表项被删除"},{"Type":"NodeText","Data":"：软件错误、软件恶意行为等情况可能会导致段表项被删除。"}]}]},{"ID":"20240201213309-6auczh8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213309-6auczh8","updated":"20240201213309"},"Children":[{"ID":"20240201213310-yoft3eb","Type":"NodeParagraph","Properties":{"id":"20240201213310-yoft3eb","updated":"20240201213310"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段表项还未创建"},{"Type":"NodeText","Data":"：如果系统内存不足或者无法分配到连续的物理内存块就会导致段表项无法被创建。"}]}]}]},{"ID":"20240201213311-r2xluy1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213311-r2xluy1","updated":"20240201213311"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分段机制为什么会导致内存外部碎片？"}]},{"ID":"20240201213312-12ah7m8","Type":"NodeParagraph","Properties":{"id":"20240201213312-12ah7m8","updated":"20240201213312"},"Children":[{"Type":"NodeText","Data":"分段机制容易出现外部内存碎片，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。从而造成物理内存资源利用率的降低。"}]},{"ID":"20240201213313-oj54ffb","Type":"NodeParagraph","Properties":{"id":"20240201213313-oj54ffb","updated":"20240201213313"},"Children":[{"Type":"NodeText","Data":"举个例子：假设可用物理内存为 5G 的系统使用分段机制分配内存。现在有 4 个进程，每个进程的内存占用情况如下："}]},{"ID":"20240201213314-1btl7ix","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213314-1btl7ix","updated":"20240201213314"},"Children":[{"ID":"20240201213315-dsvazjs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213315-dsvazjs","updated":"20240201213315"},"Children":[{"ID":"20240201213316-3ta6256","Type":"NodeParagraph","Properties":{"id":"20240201213316-3ta6256","updated":"20240201213316"},"Children":[{"Type":"NodeText","Data":"进程 1：0~1G（第 1 段）"}]}]},{"ID":"20240201213317-kgdp4qx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213317-kgdp4qx","updated":"20240201213317"},"Children":[{"ID":"20240201213318-9q7vpm4","Type":"NodeParagraph","Properties":{"id":"20240201213318-9q7vpm4","updated":"20240201213318"},"Children":[{"Type":"NodeText","Data":"进程 2：1~3G（第 2 段）"}]}]},{"ID":"20240201213319-an7glfa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213319-an7glfa","updated":"20240201213319"},"Children":[{"ID":"20240201213320-mw0a9gg","Type":"NodeParagraph","Properties":{"id":"20240201213320-mw0a9gg","updated":"20240201213320"},"Children":[{"Type":"NodeText","Data":"进程 3：3~4.5G（第 3 段）"}]}]},{"ID":"20240201213321-ayvu08s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213321-ayvu08s","updated":"20240201213321"},"Children":[{"ID":"20240201213322-9sc8y6z","Type":"NodeParagraph","Properties":{"id":"20240201213322-9sc8y6z","updated":"20240201213322"},"Children":[{"Type":"NodeText","Data":"进程 4：4.5~5G（第 4 段）"}]}]}]},{"ID":"20240201213323-edbfz6x","Type":"NodeParagraph","Properties":{"id":"20240201213323-edbfz6x","updated":"20240201213323"},"Children":[{"Type":"NodeText","Data":"此时，我们关闭了进程 1 和进程 4，则第 1 段和第 4 段的内存会被释放，空闲物理内存还有 1.5G。由于这 1.5G 物理内存并不是连续的，导致没办法将空闲的物理内存分配给一个需要 1.5G 物理内存的进程。"}]},{"ID":"20240201213324-kzvysga","Type":"NodeParagraph","Properties":{"id":"20240201213324-kzvysga","updated":"20240201213324"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"分段机制导致外部内存碎片","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/segment-external-memory-fragmentation.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213325-wz4scsj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213325-wz4scsj","updated":"20240201213325"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分页机制"}]},{"ID":"20240201213326-mhj9b56","Type":"NodeParagraph","Properties":{"id":"20240201213326-mhj9b56","updated":"20240201213326"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分页机制（Paging）"},{"Type":"NodeText","Data":" 把主存（物理内存）分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页。现代操作系统广泛采用分页机制。"}]},{"ID":"20240201213327-u243lep","Type":"NodeParagraph","Properties":{"id":"20240201213327-u243lep","updated":"20240201213327"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意：这里的页是连续等长的，不同于分段机制下不同长度的段。"}]},{"ID":"20240201213328-y4s3lhn","Type":"NodeParagraph","Properties":{"id":"20240201213328-y4s3lhn","updated":"20240201213328"},"Children":[{"Type":"NodeText","Data":"在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上，因此可以实现物理内存资源的离散分配。分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理，可有效避免分段机制中外部内存碎片的问题。"}]},{"ID":"20240201213329-htvwmw0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213329-htvwmw0","updated":"20240201213329"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"页表有什么用？地址翻译过程是怎样的？"}]},{"ID":"20240201213330-ibh36ar","Type":"NodeParagraph","Properties":{"id":"20240201213330-ibh36ar","updated":"20240201213330"},"Children":[{"Type":"NodeText","Data":"分页管理通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页表（Page Table）"},{"Type":"NodeText","Data":" 映射虚拟地址和物理地址。我这里画了一张基于单级页表进行地址翻译的示意图。"}]},{"ID":"20240201213331-ff20p3m","Type":"NodeParagraph","Properties":{"id":"20240201213331-ff20p3m","updated":"20240201213331"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"单级页表","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/page-table.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213332-bbrod2w","Type":"NodeParagraph","Properties":{"id":"20240201213332-bbrod2w","updated":"20240201213332"},"Children":[{"Type":"NodeText","Data":"在分页机制下，每个应用程序都会有一个对应的页表。"}]},{"ID":"20240201213333-gvhq8v5","Type":"NodeParagraph","Properties":{"id":"20240201213333-gvhq8v5","updated":"20240201213333"},"Children":[{"Type":"NodeText","Data":"分页机制下的虚拟地址由两部分组成："}]},{"ID":"20240201213334-s72k6tu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213334-s72k6tu","updated":"20240201213334"},"Children":[{"ID":"20240201213335-bba0ixi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213335-bba0ixi","updated":"20240201213335"},"Children":[{"ID":"20240201213336-uv6gw1b","Type":"NodeParagraph","Properties":{"id":"20240201213336-uv6gw1b","updated":"20240201213336"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页号"},{"Type":"NodeText","Data":"：通过虚拟页号可以从页表中取出对应的物理页号；"}]}]},{"ID":"20240201213337-2kor6cf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213337-2kor6cf","updated":"20240201213337"},"Children":[{"ID":"20240201213338-1fgjzwo","Type":"NodeParagraph","Properties":{"id":"20240201213338-1fgjzwo","updated":"20240201213338"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页内偏移量"},{"Type":"NodeText","Data":"：物理页起始地址+页内偏移量=物理内存地址。"}]}]}]},{"ID":"20240201213339-8hpdlp4","Type":"NodeParagraph","Properties":{"id":"20240201213339-8hpdlp4","updated":"20240201213339"},"Children":[{"Type":"NodeText","Data":"具体的地址翻译过程如下："}]},{"ID":"20240201213340-6hha2q3","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213340-6hha2q3","updated":"20240201213340"},"Children":[{"ID":"20240201213341-58gddb3","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213341-58gddb3","updated":"20240201213341"},"Children":[{"ID":"20240201213342-ikd115s","Type":"NodeParagraph","Properties":{"id":"20240201213342-ikd115s","updated":"20240201213342"},"Children":[{"Type":"NodeText","Data":"MMU 首先解析得到虚拟地址中的虚拟页号；"}]}]},{"ID":"20240201213343-t051koq","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213343-t051koq","updated":"20240201213343"},"Children":[{"ID":"20240201213344-bueof1f","Type":"NodeParagraph","Properties":{"id":"20240201213344-bueof1f","updated":"20240201213344"},"Children":[{"Type":"NodeText","Data":"通过虚拟页号去该应用程序的页表中取出对应的物理页号（找到对应的页表项）；"}]}]},{"ID":"20240201213345-6b105af","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213345-6b105af","updated":"20240201213345"},"Children":[{"ID":"20240201213346-kazvooi","Type":"NodeParagraph","Properties":{"id":"20240201213346-kazvooi","updated":"20240201213346"},"Children":[{"Type":"NodeText","Data":"用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址。"}]}]}]},{"ID":"20240201213347-bmk65fs","Type":"NodeParagraph","Properties":{"id":"20240201213347-bmk65fs","updated":"20240201213347"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"分页机制下的地址翻译过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/paging-virtual-address-composition.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213348-dqde6hu","Type":"NodeParagraph","Properties":{"id":"20240201213348-dqde6hu","updated":"20240201213348"},"Children":[{"Type":"NodeText","Data":"页表中还存有诸如访问标志（标识该页面有没有被访问过）、脏数据标识位等信息。"}]},{"ID":"20240201213349-qppch1s","Type":"NodeParagraph","Properties":{"id":"20240201213349-qppch1s","updated":"20240201213349"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过虚拟页号一定要找到对应的物理页号吗？找到了物理页号得到最终的物理地址后对应的物理页一定存在吗？"}]},{"ID":"20240201213350-321fmsg","Type":"NodeParagraph","Properties":{"id":"20240201213350-321fmsg","updated":"20240201213350"},"Children":[{"Type":"NodeText","Data":"不一定！可能会存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页缺失"},{"Type":"NodeText","Data":" 。也就是说，物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）。关于页缺失的内容，后面会详细介绍到。"}]},{"ID":"20240201213351-mv96awl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213351-mv96awl","updated":"20240201213351"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"单级页表有什么问题？为什么需要多级页表？"}]},{"ID":"20240201213352-w819iwb","Type":"NodeParagraph","Properties":{"id":"20240201213352-w819iwb","updated":"20240201213352"},"Children":[{"Type":"NodeText","Data":"以 32 位的环境为例，虚拟地址空间范围共有 2"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"32（4G）。假设 一个页的大小是 2"},{"Type":"NodeText","Data":"12（4KB），那页表项共有 4G / 4K = 2^20 个。每个页表项为一个地址，占用 4 字节，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"2^20 * 2^2 / 1024 * 1024= 4MB"},{"Type":"NodeText","Data":"。也就是说一个程序啥都不干，页表大小就得占用 4M。"}]},{"ID":"20240201213353-usoklvo","Type":"NodeParagraph","Properties":{"id":"20240201213353-usoklvo","updated":"20240201213353"},"Children":[{"Type":"NodeText","Data":"系统运行的应用程序多起来的话，页表的开销还是非常大的。而且，绝大部分应用程序可能只能用到页表中的几项，其他的白白浪费了。"}]},{"ID":"20240201213354-z4uysag","Type":"NodeParagraph","Properties":{"id":"20240201213354-z4uysag","updated":"20240201213354"},"Children":[{"Type":"NodeText","Data":"为了解决这个问题，操作系统引入了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多级页表"},{"Type":"NodeText","Data":" ，多级页表对应多个页表，每个页表也前一个页表相关联。32 位系统一般为二级页表，64 位系统一般为四级页表。"}]},{"ID":"20240201213355-6u6voxd","Type":"NodeParagraph","Properties":{"id":"20240201213355-6u6voxd","updated":"20240201213355"},"Children":[{"Type":"NodeText","Data":"这里以二级页表为例进行介绍：二级列表分为一级页表和二级页表。一级页表共有 1024 个页表项，一级页表又关联二级页表，二级页表同样共有 1024 个页表项。二级页表中的一级页表项是一对多的关系，二级页表按需加载（只会用到很少一部分二级页表），进而节省空间占用。"}]},{"ID":"20240201213356-wtrm2me","Type":"NodeParagraph","Properties":{"id":"20240201213356-wtrm2me","updated":"20240201213356"},"Children":[{"Type":"NodeText","Data":"假设只需要 2 个二级页表，那两级页表的内存占用情况为: 4KB（一级页表占用） + 4KB "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 2（二级页表占用） = 12 KB。"}]},{"ID":"20240201213357-1gqhwcq","Type":"NodeParagraph","Properties":{"id":"20240201213357-1gqhwcq","updated":"20240201213357"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"多级页表","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/multilevel-page-table.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213358-lqp0t3r","Type":"NodeParagraph","Properties":{"id":"20240201213358-lqp0t3r","updated":"20240201213358"},"Children":[{"Type":"NodeText","Data":"多级页表属于时间换空间的典型场景，利用增加页表查询的次数减少页表占用的空间。"}]},{"ID":"20240201213359-9oodg9k","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213359-9oodg9k","updated":"20240201213359"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"TLB 有什么用？使用 TLB 之后的地址翻译流程是怎样的？"}]},{"ID":"20240201213360-m13xk41","Type":"NodeParagraph","Properties":{"id":"20240201213360-m13xk41","updated":"20240201213360"},"Children":[{"Type":"NodeText","Data":"为了提高虚拟地址到物理地址的转换速度，操作系统在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页表方案"},{"Type":"NodeText","Data":" 基础之上引入了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"转址旁路缓存(Translation Lookaside Buffer，TLB，也被称为快表)"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213361-9lit2b2","Type":"NodeParagraph","Properties":{"id":"20240201213361-9lit2b2","updated":"20240201213361"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"加入 TLB 之后的地址翻译","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/physical-virtual-address-translation-mmu.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213362-9qxds6r","Type":"NodeParagraph","Properties":{"id":"20240201213362-9qxds6r","updated":"20240201213362"},"Children":[{"Type":"NodeText","Data":"在主流的 AArch64 和 x86-64 体系结构下，TLB 属于 (Memory Management Unit，内存管理单元) 内部的单元，本质上就是一块高速缓存（Cache），缓存了虚拟页号到物理页号的映射关系，你可以将其简单看作是存储着键（虚拟页号）值（物理页号）对的哈希表。"}]},{"ID":"20240201213363-jw0h9rz","Type":"NodeParagraph","Properties":{"id":"20240201213363-jw0h9rz","updated":"20240201213363"},"Children":[{"Type":"NodeText","Data":"使用 TLB 之后的地址翻译流程是这样的："}]},{"ID":"20240201213364-6jgospf","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213364-6jgospf","updated":"20240201213364"},"Children":[{"ID":"20240201213365-78jv52b","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213365-78jv52b","updated":"20240201213365"},"Children":[{"ID":"20240201213366-aky5pct","Type":"NodeParagraph","Properties":{"id":"20240201213366-aky5pct","updated":"20240201213366"},"Children":[{"Type":"NodeText","Data":"用虚拟地址中的虚拟页号作为 key 去 TLB 中查询；"}]}]},{"ID":"20240201213367-5r0aglo","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213367-5r0aglo","updated":"20240201213367"},"Children":[{"ID":"20240201213368-k01jrrb","Type":"NodeParagraph","Properties":{"id":"20240201213368-k01jrrb","updated":"20240201213368"},"Children":[{"Type":"NodeText","Data":"如果能查到对应的物理页的话，就不用再查询页表了，这种情况称为 TLB 命中（TLB hit)。"}]}]},{"ID":"20240201213369-7v86m32","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213369-7v86m32","updated":"20240201213369"},"Children":[{"ID":"20240201213370-ehxr8dw","Type":"NodeParagraph","Properties":{"id":"20240201213370-ehxr8dw","updated":"20240201213370"},"Children":[{"Type":"NodeText","Data":"如果不能查到对应的物理页的话，还是需要去查询主存中的页表，同时将页表中的该映射表项添加到 TLB 中，这种情况称为 TLB 未命中（TLB miss)。"}]}]},{"ID":"20240201213371-b0htbl0","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213371-b0htbl0","updated":"20240201213371"},"Children":[{"ID":"20240201213372-8exjon5","Type":"NodeParagraph","Properties":{"id":"20240201213372-8exjon5","updated":"20240201213372"},"Children":[{"Type":"NodeText","Data":"当 TLB 填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。"}]}]}]},{"ID":"20240201213373-ihzse4b","Type":"NodeParagraph","Properties":{"id":"20240201213373-ihzse4b","updated":"20240201213373"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"使用 TLB 之后的地址翻译流程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/page-table-tlb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213374-t3jh8ca","Type":"NodeParagraph","Properties":{"id":"20240201213374-t3jh8ca","updated":"20240201213374"},"Children":[{"Type":"NodeText","Data":"由于页表也在主存中，因此在没有 TLB 之前，每次读写内存数据时 CPU 要访问两次主存。有了 TLB 之后，对于存在于 TLB 中的页表数据只需要访问一次主存即可。"}]},{"ID":"20240201213375-3rwyit6","Type":"NodeParagraph","Properties":{"id":"20240201213375-3rwyit6","updated":"20240201213375"},"Children":[{"Type":"NodeText","Data":"TLB 的设计思想非常简单，但命中率往往非常高，效果很好。这就是因为被频繁访问的页就是其中的很小一部分。"}]},{"ID":"20240201213376-04985q2","Type":"NodeParagraph","Properties":{"id":"20240201213376-04985q2","updated":"20240201213376"},"Children":[{"Type":"NodeText","Data":"看完了之后你会发现快表和我们平时经常在开发系统中使用的缓存（比如 Redis）很像，的确是这样的，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。"}]},{"ID":"20240201213377-xg9icg9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213377-xg9icg9","updated":"20240201213377"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"换页机制有什么用？"}]},{"ID":"20240201213378-zrundea","Type":"NodeParagraph","Properties":{"id":"20240201213378-zrundea","updated":"20240201213378"},"Children":[{"Type":"NodeText","Data":"换页机制的思想是当物理内存不够用的时候，操作系统选择将一些物理页的内容放到磁盘上去，等要用到的时候再将它们读取到物理内存中。也就是说，换页机制利用磁盘这种较低廉的存储设备扩展的物理内存。"}]},{"ID":"20240201213379-w7h2pym","Type":"NodeParagraph","Properties":{"id":"20240201213379-w7h2pym","updated":"20240201213379"},"Children":[{"Type":"NodeText","Data":"这也就解释了一个日常使用电脑常见的问题：为什么操作系统中所有进程运行所需的物理内存即使比真实的物理内存要大一些，这些进程也是可以正常运行的，只是运行速度会变慢。"}]},{"ID":"20240201213380-2ocvl9n","Type":"NodeParagraph","Properties":{"id":"20240201213380-2ocvl9n","updated":"20240201213380"},"Children":[{"Type":"NodeText","Data":"这同样是一种时间换空间的策略，你用 CPU 的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的物理内存空间来支持程序的运行。"}]},{"ID":"20240201213381-1wjsbj4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213381-1wjsbj4","updated":"20240201213381"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是页缺失？"}]},{"ID":"20240201213382-v6gt3z3","Type":"NodeParagraph","Properties":{"id":"20240201213382-v6gt3z3","updated":"20240201213382"},"Children":[{"Type":"NodeText","Data":"根据维基百科:"}]},{"ID":"20240201213383-rfes6ei","Type":"NodeBlockquote","Properties":{"id":"20240201213383-rfes6ei","updated":"20240201213383"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213384-8krxibd","Type":"NodeParagraph","Properties":{"id":"20240201213384-8krxibd","updated":"20240201213384"},"Children":[{"Type":"NodeText","Data":"页缺失（Page Fault，又名硬错误、硬中断、分页错误、寻页缺失、缺页中断、页故障等）指的是当软件试图访问已映射在虚拟地址空间中，但是目前并未被加载在物理内存中的一个分页时，由 MMU 所发出的中断。"}]}]},{"ID":"20240201213385-3g5tahq","Type":"NodeParagraph","Properties":{"id":"20240201213385-3g5tahq","updated":"20240201213385"},"Children":[{"Type":"NodeText","Data":"常见的页缺失有下面这两种："}]},{"ID":"20240201213386-n54ugyz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213386-n54ugyz","updated":"20240201213386"},"Children":[{"ID":"20240201213387-t1fxady","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213387-t1fxady","updated":"20240201213387"},"Children":[{"ID":"20240201213388-umuikz8","Type":"NodeParagraph","Properties":{"id":"20240201213388-umuikz8","updated":"20240201213388"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"硬性页缺失（Hard Page Fault）"},{"Type":"NodeText","Data":"：物理内存中没有对应的物理页。于是，Page Fault Handler 会指示 CPU 从已经打开的磁盘文件中读取相应的内容到物理内存，而后交由 MMU 建立相应的虚拟页和物理页的映射关系。"}]}]},{"ID":"20240201213389-lb808g6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213389-lb808g6","updated":"20240201213389"},"Children":[{"ID":"20240201213390-z7fk02p","Type":"NodeParagraph","Properties":{"id":"20240201213390-z7fk02p","updated":"20240201213390"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"软性页缺失（Soft Page Fault）"},{"Type":"NodeText","Data":"：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，Page Fault Handler 会指示 MMU 建立相应的虚拟页和物理页的映射关系。"}]}]}]},{"ID":"20240201213391-yu0md8h","Type":"NodeParagraph","Properties":{"id":"20240201213391-yu0md8h","updated":"20240201213391"},"Children":[{"Type":"NodeText","Data":"发生上面这两种缺页错误的时候，应用程序访问的是有效的物理内存，只是出现了物理页缺失或者虚拟页和物理页的映射关系未建立的问题。如果应用程序访问的是无效的物理内存的话，还会出现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"无效缺页错误（Invalid Page Fault）"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213392-5yu2z1r","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213392-5yu2z1r","updated":"20240201213392"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的页面置换算法有哪些?"}]},{"ID":"20240201213393-yqchppd","Type":"NodeParagraph","Properties":{"id":"20240201213393-yqchppd","updated":"20240201213393"},"Children":[{"Type":"NodeText","Data":"当发生硬性页缺失时，如果物理内存中没有空闲的物理页面可用的话。操作系统就必须将物理内存中的一个物理页淘汰出去，这样就可以腾出空间来加载新的页面了。"}]},{"ID":"20240201213394-ym9pw8r","Type":"NodeParagraph","Properties":{"id":"20240201213394-ym9pw8r","updated":"20240201213394"},"Children":[{"Type":"NodeText","Data":"用来选择淘汰哪一个物理页的规则叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页面置换算法"},{"Type":"NodeText","Data":" ，我们可以把页面置换算法看成是淘汰物物理页的规则。"}]},{"ID":"20240201213395-fqsqcyv","Type":"NodeParagraph","Properties":{"id":"20240201213395-fqsqcyv","updated":"20240201213395"},"Children":[{"Type":"NodeText","Data":"页缺失太频繁的发生会非常影响性能，一个好的页面置换算法应该是可以减少页缺失出现的次数。"}]},{"ID":"20240201213396-1iv4agk","Type":"NodeParagraph","Properties":{"id":"20240201213396-1iv4agk","updated":"20240201213396"},"Children":[{"Type":"NodeText","Data":"常见的页面置换算法有下面这 5 种（其他还有很多页面置换算法都是基于这些算法改进得来的）："}]},{"ID":"20240201213397-q9ykblk","Type":"NodeParagraph","Properties":{"id":"20240201213397-q9ykblk","updated":"20240201213397"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"常见的页面置换算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/image-20230409113009139.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213398-w09hngs","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213398-w09hngs","updated":"20240201213398"},"Children":[{"ID":"20240201213399-mp0pjjb","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213399-mp0pjjb","updated":"20240201213399"},"Children":[{"ID":"20240201213400-lw4f32j","Type":"NodeParagraph","Properties":{"id":"20240201213400-lw4f32j","updated":"20240201213400"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最佳页面置换算法（OPT，Optimal）"},{"Type":"NodeText","Data":"：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。"}]}]},{"ID":"20240201213401-9hu1vaa","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213401-9hu1vaa","updated":"20240201213401"},"Children":[{"ID":"20240201213402-lwq7s1z","Type":"NodeParagraph","Properties":{"id":"20240201213402-lwq7s1z","updated":"20240201213402"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先进先出页面置换算法（FIFO，First In First Out）"},{"Type":"NodeText","Data":" : 最简单的一种页面置换算法，总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。该算法易于实现和理解，一般只需要通过一个 FIFO 队列即可需求。不过，它的性能并不是很好。"}]}]},{"ID":"20240201213403-7vp040m","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213403-7vp040m","updated":"20240201213403"},"Children":[{"ID":"20240201213404-a3tr817","Type":"NodeParagraph","Properties":{"id":"20240201213404-a3tr817","updated":"20240201213404"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最近最久未使用页面置换算法（LRU ，Least Recently Used）"},{"Type":"NodeText","Data":"：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。LRU 算法是根据各页之前的访问情况来实现，因此是易于实现的。OPT 算法是根据各页未来的访问情况来实现，因此是不可实现的。"}]}]},{"ID":"20240201213405-75eykc6","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213405-75eykc6","updated":"20240201213405"},"Children":[{"ID":"20240201213406-3dswgya","Type":"NodeParagraph","Properties":{"id":"20240201213406-3dswgya","updated":"20240201213406"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最少使用页面置换算法（LFU，Least Frequently Used）"},{"Type":"NodeText","Data":" : 和 LRU 算法比较像，不过该置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。"}]}]},{"ID":"20240201213407-agg6d8z","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213407-agg6d8z","updated":"20240201213407"},"Children":[{"ID":"20240201213408-swzk5i0","Type":"NodeParagraph","Properties":{"id":"20240201213408-swzk5i0","updated":"20240201213408"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时钟页面置换算法（Clock）"},{"Type":"NodeText","Data":"：可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。"}]}]}]},{"ID":"20240201213409-wfm4diz","Type":"NodeParagraph","Properties":{"id":"20240201213409-wfm4diz","updated":"20240201213409"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"FIFO 页面置换算法性能为何不好？"}]},{"ID":"20240201213410-t5mpzvq","Type":"NodeParagraph","Properties":{"id":"20240201213410-t5mpzvq","updated":"20240201213410"},"Children":[{"Type":"NodeText","Data":"主要原因主要有二："}]},{"ID":"20240201213411-t3vp59u","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213411-t3vp59u","updated":"20240201213411"},"Children":[{"ID":"20240201213412-d0ir3wi","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213412-d0ir3wi","updated":"20240201213412"},"Children":[{"ID":"20240201213413-3jkckcj","Type":"NodeParagraph","Properties":{"id":"20240201213413-3jkckcj","updated":"20240201213413"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"经常访问或者需要长期存在的页面会被频繁调入调出"},{"Type":"NodeText","Data":"：较早调入的页往往是经常被访问或者需要长期存在的页，这些页会被反复调入和调出。"}]}]},{"ID":"20240201213414-yl82xhg","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213414-yl82xhg","updated":"20240201213414"},"Children":[{"ID":"20240201213415-yxlfje1","Type":"NodeParagraph","Properties":{"id":"20240201213415-yxlfje1","updated":"20240201213415"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存在 Belady 现象"},{"Type":"NodeText","Data":"：被置换的页面并不是进程不会访问的，有时就会出现分配的页面数增多但缺页率反而提高的异常现象。出现该异常的原因是因为 FIFO 算法只考虑了页面进入内存的顺序，而没有考虑页面访问的频率和紧迫性。"}]}]}]},{"ID":"20240201213416-i3253oa","Type":"NodeParagraph","Properties":{"id":"20240201213416-i3253oa","updated":"20240201213416"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"哪一种页面置换算法实际用的比较多？"}]},{"ID":"20240201213417-6kqovjg","Type":"NodeParagraph","Properties":{"id":"20240201213417-6kqovjg","updated":"20240201213417"},"Children":[{"Type":"NodeText","Data":"LRU 算法是实际使用中应用的比较多，也被认为是最接近 OPT 的页面置换算法。"}]},{"ID":"20240201213418-5ecw203","Type":"NodeParagraph","Properties":{"id":"20240201213418-5ecw203","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"不过，需要注意的是，实际应用中这些算法会被做一些改进，就比如 InnoDB Buffer Pool（ InnoDB 缓冲池，MySQL 数据库中用于管理缓存页面的机制）就改进了传统的 LRU 算法，使用了一种称为\"Adaptive LRU\"的算法（同时结合了 LRU 和 LFU 算法的思想）。"}]},{"ID":"20240201213419-02vonfo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213419-02vonfo","updated":"20240201213419"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分页机制和分段机制有哪些共同点和区别？"}]},{"ID":"20240201213420-8cxumh1","Type":"NodeParagraph","Properties":{"id":"20240201213420-8cxumh1","updated":"20240201213420"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"共同点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213421-nhdsnh5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213421-nhdsnh5","updated":"20240201213421"},"Children":[{"ID":"20240201213422-s63fuf3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213422-s63fuf3","updated":"20240201213422"},"Children":[{"ID":"20240201213423-57tok33","Type":"NodeParagraph","Properties":{"id":"20240201213423-57tok33","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"都是非连续内存管理的方式。"}]}]},{"ID":"20240201213424-xe2cv9c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213424-xe2cv9c","updated":"20240201213424"},"Children":[{"ID":"20240201213425-tvagvxm","Type":"NodeParagraph","Properties":{"id":"20240201213425-tvagvxm","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"都采用了地址映射的方法，将虚拟地址映射到物理地址，以实现对内存的管理和保护。"}]}]}]},{"ID":"20240201213426-p5qc4p5","Type":"NodeParagraph","Properties":{"id":"20240201213426-p5qc4p5","updated":"20240201213426"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"区别"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213427-22medbn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213427-22medbn","updated":"20240201213427"},"Children":[{"ID":"20240201213428-7uc114g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213428-7uc114g","updated":"20240201213428"},"Children":[{"ID":"20240201213429-jyngymg","Type":"NodeParagraph","Properties":{"id":"20240201213429-jyngymg","updated":"20240201213429"},"Children":[{"Type":"NodeText","Data":"分页机制以页面为单位进行内存管理，而分段机制以段为单位进行内存管理。页的大小是固定的，由操作系统决定，通常为 2 的幂次方。而段的大小不固定，取决于我们当前运行的程序。"}]}]},{"ID":"20240201213430-t2q1tq1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213430-t2q1tq1","updated":"20240201213430"},"Children":[{"ID":"20240201213431-qs095x8","Type":"NodeParagraph","Properties":{"id":"20240201213431-qs095x8","updated":"20240201213431"},"Children":[{"Type":"NodeText","Data":"页是物理单位，即操作系统将物理内存划分成固定大小的页面，每个页面的大小通常是 2 的幂次方，例如 4KB、8KB 等等。而段则是逻辑单位，是为了满足程序对内存空间的逻辑需求而设计的，通常根据程序中数据和代码的逻辑结构来划分。"}]}]},{"ID":"20240201213432-6hnhbzd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213432-6hnhbzd","updated":"20240201213432"},"Children":[{"ID":"20240201213433-3ooj4aj","Type":"NodeParagraph","Properties":{"id":"20240201213433-3ooj4aj","updated":"20240201213433"},"Children":[{"Type":"NodeText","Data":"分段机制容易出现外部内存碎片，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。分页机制解决了外部内存碎片的问题，但仍然可能会出现内部内存碎片。"}]}]},{"ID":"20240201213434-pn3ca1s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213434-pn3ca1s","updated":"20240201213434"},"Children":[{"ID":"20240201213435-52sbbd0","Type":"NodeParagraph","Properties":{"id":"20240201213435-52sbbd0","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息。"}]}]},{"ID":"20240201213436-mrlstud","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213436-mrlstud","updated":"20240201213436"},"Children":[{"ID":"20240201213437-4llg9se","Type":"NodeParagraph","Properties":{"id":"20240201213437-4llg9se","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"分页机制对程序没有任何要求，程序只需要按照虚拟地址进行访问即可；而分段机制需要程序员将程序分为多个段，并且显式地使用段寄存器来访问不同的段。"}]}]}]},{"ID":"20240201213438-m2hculq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213438-m2hculq","updated":"20240201213438"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"段页机制"}]},{"ID":"20240201213439-ccdhl22","Type":"NodeParagraph","Properties":{"id":"20240201213439-ccdhl22","updated":"20240201213439"},"Children":[{"Type":"NodeText","Data":"结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页。"}]},{"ID":"20240201213440-4rmmqg4","Type":"NodeParagraph","Properties":{"id":"20240201213440-4rmmqg4","updated":"20240201213440"},"Children":[{"Type":"NodeText","Data":"在段页式机制下，地址翻译的过程分为两个步骤："}]},{"ID":"20240201213441-51o7yxj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213441-51o7yxj","updated":"20240201213441"},"Children":[{"ID":"20240201213442-jxjn8m5","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213442-jxjn8m5","updated":"20240201213442"},"Children":[{"ID":"20240201213443-7v24d8t","Type":"NodeParagraph","Properties":{"id":"20240201213443-7v24d8t","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"段式地址映射。"}]}]},{"ID":"20240201213444-nsghh43","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213444-nsghh43","updated":"20240201213444"},"Children":[{"ID":"20240201213445-i3rpyx4","Type":"NodeParagraph","Properties":{"id":"20240201213445-i3rpyx4","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"页式地址映射。"}]}]}]},{"ID":"20240201213446-p0n54k7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213446-p0n54k7","updated":"20240201213446"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"局部性原理"}]},{"ID":"20240201213447-1jpexis","Type":"NodeParagraph","Properties":{"id":"20240201213447-1jpexis","updated":"20240201213447"},"Children":[{"Type":"NodeText","Data":"要想更好地理解虚拟内存技术，必须要知道计算机中著名的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"局部性原理（Locality Principle）"},{"Type":"NodeText","Data":"。另外，局部性原理既适用于程序结构，也适用于数据结构，是非常重要的一个概念。"}]},{"ID":"20240201213448-5fu55if","Type":"NodeParagraph","Properties":{"id":"20240201213448-5fu55if","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"局部性原理是指在程序执行过程中，数据和指令的访问存在一定的空间和时间上的局部性特点。其中，时间局部性是指一个数据项或指令在一段时间内被反复使用的特点，空间局部性是指一个数据项或指令在一段时间内与其相邻的数据项或指令被反复使用的特点。"}]},{"ID":"20240201213449-gol2glc","Type":"NodeParagraph","Properties":{"id":"20240201213449-gol2glc","updated":"20240201213449"},"Children":[{"Type":"NodeText","Data":"在分页机制中，页表的作用是将虚拟地址转换为物理地址，从而完成内存访问。在这个过程中，局部性原理的作用体现在两个方面："}]},{"ID":"20240201213450-0qv7b63","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213450-0qv7b63","updated":"20240201213450"},"Children":[{"ID":"20240201213451-zu069tx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213451-zu069tx","updated":"20240201213451"},"Children":[{"ID":"20240201213452-s4wllcu","Type":"NodeParagraph","Properties":{"id":"20240201213452-s4wllcu","updated":"20240201213452"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间局部性"},{"Type":"NodeText","Data":"：由于程序中存在一定的循环或者重复操作，因此会反复访问同一个页或一些特定的页，这就体现了时间局部性的特点。为了利用时间局部性，分页机制中通常采用缓存机制来提高页面的命中率，即将最近访问过的一些页放入缓存中，如果下一次访问的页已经在缓存中，就不需要再次访问内存，而是直接从缓存中读取。"}]}]},{"ID":"20240201213453-2wnlxsy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213453-2wnlxsy","updated":"20240201213453"},"Children":[{"ID":"20240201213454-4errdp7","Type":"NodeParagraph","Properties":{"id":"20240201213454-4errdp7","updated":"20240201213454"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"空间局部性"},{"Type":"NodeText","Data":"：由于程序中数据和指令的访问通常是具有一定的空间连续性的，因此当访问某个页时，往往会顺带访问其相邻的一些页。为了利用空间局部性，分页机制中通常采用预取技术来预先将相邻的一些页读入内存缓存中，以便在未来访问时能够直接使用，从而提高访问速度。"}]}]}]},{"ID":"20240201213455-acz2l2c","Type":"NodeParagraph","Properties":{"id":"20240201213455-acz2l2c","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"总之，局部性原理是计算机体系结构设计的重要原则之一，也是许多优化算法的基础。在分页机制中，利用时间局部性和空间局部性，采用缓存和预取技术，可以提高页面的命中率，从而提高内存访问效率"}]},{"ID":"20240201213456-lx3h343","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213456-lx3h343","updated":"20240201213456"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"文件系统"}]},{"ID":"20240201213457-tbrfoht","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213457-tbrfoht","updated":"20240201213457"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"文件系统主要做了什么？"}]},{"ID":"20240201213458-omxfeut","Type":"NodeParagraph","Properties":{"id":"20240201213458-omxfeut","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"文件系统主要负责管理和组织计算机存储设备上的文件和目录，其功能包括以下几个方面："}]},{"ID":"20240201213459-clr7ipp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213459-clr7ipp","updated":"20240201213459"},"Children":[{"ID":"20240201213460-tfxm40f","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213460-tfxm40f","updated":"20240201213460"},"Children":[{"ID":"20240201213461-hu1xv90","Type":"NodeParagraph","Properties":{"id":"20240201213461-hu1xv90","updated":"20240201213461"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存储管理"},{"Type":"NodeText","Data":"：将文件数据存储到物理存储介质中，并且管理空间分配，以确保每个文件都有足够的空间存储，并避免文件之间发生冲突。"}]}]},{"ID":"20240201213462-rbinw9y","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213462-rbinw9y","updated":"20240201213462"},"Children":[{"ID":"20240201213463-xses4wi","Type":"NodeParagraph","Properties":{"id":"20240201213463-xses4wi","updated":"20240201213463"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"文件管理"},{"Type":"NodeText","Data":"：文件的创建、删除、移动、重命名、压缩、加密、共享等等。"}]}]},{"ID":"20240201213464-9jdnbn4","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213464-9jdnbn4","updated":"20240201213464"},"Children":[{"ID":"20240201213465-9y9x5cj","Type":"NodeParagraph","Properties":{"id":"20240201213465-9y9x5cj","updated":"20240201213465"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"目录管理"},{"Type":"NodeText","Data":"：目录的创建、删除、移动、重命名等等。"}]}]},{"ID":"20240201213466-qvi3qj1","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213466-qvi3qj1","updated":"20240201213466"},"Children":[{"ID":"20240201213467-pg3hvv3","Type":"NodeParagraph","Properties":{"id":"20240201213467-pg3hvv3","updated":"20240201213467"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"文件访问控制"},{"Type":"NodeText","Data":"：管理不同用户或进程对文件的访问权限，以确保用户只能访问其被授权访问的文件，以保证文件的安全性和保密性。"}]}]}]},{"ID":"20240201213468-8xppsnd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213468-8xppsnd","updated":"20240201213468"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"硬链接和软链接有什么区别？"}]},{"ID":"20240201213469-g1z6377","Type":"NodeParagraph","Properties":{"id":"20240201213469-g1z6377","updated":"20240201213469"},"Children":[{"Type":"NodeText","Data":"在 Linux/类 Unix 系统上，文件链接（File Link）是一种特殊的文件类型，可以在文件系统中指向另一个文件。常见的文件链接类型有两种："}]},{"ID":"20240201213470-arctdwz","Type":"NodeParagraph","Properties":{"id":"20240201213470-arctdwz","updated":"20240201213470"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、硬链接（Hard Link）"}]},{"ID":"20240201213471-3kwju80","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-3kwju80","updated":"20240201213471"},"Children":[{"ID":"20240201213472-z847l4f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213472-z847l4f","updated":"20240201213472"},"Children":[{"ID":"20240201213473-0na1g1k","Type":"NodeParagraph","Properties":{"id":"20240201213473-0na1g1k","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"在 Linux/类 Unix 文件系统中，每个文件和目录都有一个唯一的索引节点（inode）号，用来标识该文件或目录。硬链接通过 inode 节点号建立连接，硬链接和源文件的 inode 节点号相同，两者对文件系统来说是完全平等的（可以看作是互为硬链接，源头是同一份文件），删除其中任何一个对另外一个没有影响，可以通过给文件设置硬链接文件来防止重要文件被误删。"}]}]},{"ID":"20240201213474-a58vzxt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213474-a58vzxt","updated":"20240201213474"},"Children":[{"ID":"20240201213475-m0wh85u","Type":"NodeParagraph","Properties":{"id":"20240201213475-m0wh85u","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"只有删除了源文件和所有对应的硬链接文件，该文件才会被真正删除。"}]}]},{"ID":"20240201213476-3bjm5yc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213476-3bjm5yc","updated":"20240201213476"},"Children":[{"ID":"20240201213477-sd74a9a","Type":"NodeParagraph","Properties":{"id":"20240201213477-sd74a9a","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"硬链接具有一些限制，不能对目录以及不存在的文件创建硬链接，并且，硬链接也不能跨越文件系统。"}]}]},{"ID":"20240201213478-jpwwte6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213478-jpwwte6","updated":"20240201213478"},"Children":[{"ID":"20240201213479-ozbd7k1","Type":"NodeParagraph","Properties":{"id":"20240201213479-ozbd7k1","updated":"20240201213479"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ln"},{"Type":"NodeText","Data":" 命令用于创建硬链接。"}]}]}]},{"ID":"20240201213480-o843hlw","Type":"NodeParagraph","Properties":{"id":"20240201213480-o843hlw","updated":"20240201213480"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、软链接（Symbolic Link 或 Symlink）"}]},{"ID":"20240201213481-icml58m","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213481-icml58m","updated":"20240201213481"},"Children":[{"ID":"20240201213482-6clszgh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213482-6clszgh","updated":"20240201213482"},"Children":[{"ID":"20240201213483-p3g3r03","Type":"NodeParagraph","Properties":{"id":"20240201213483-p3g3r03","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"软链接和源文件的 inode 节点号不同，而是指向一个文件路径。"}]}]},{"ID":"20240201213484-6utgo0b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213484-6utgo0b","updated":"20240201213484"},"Children":[{"ID":"20240201213485-58gcmdn","Type":"NodeParagraph","Properties":{"id":"20240201213485-58gcmdn","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"源文件删除后，软链接依然存在，但是指向的是一个无效的文件路径。"}]}]},{"ID":"20240201213486-8fyofuf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213486-8fyofuf","updated":"20240201213486"},"Children":[{"ID":"20240201213487-00oefhn","Type":"NodeParagraph","Properties":{"id":"20240201213487-00oefhn","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"软连接类似于 Windows 系统中的快捷方式。"}]}]},{"ID":"20240201213488-hf63xwf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213488-hf63xwf","updated":"20240201213488"},"Children":[{"ID":"20240201213489-xndy0j5","Type":"NodeParagraph","Properties":{"id":"20240201213489-xndy0j5","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"不同于硬链接，可以对目录或者不存在的文件创建软链接，并且，软链接可以跨越文件系统。"}]}]},{"ID":"20240201213490-vkbw196","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213490-vkbw196","updated":"20240201213490"},"Children":[{"ID":"20240201213491-smvszap","Type":"NodeParagraph","Properties":{"id":"20240201213491-smvszap","updated":"20240201213491"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ln -s"},{"Type":"NodeText","Data":" 命令用于创建软链接。"}]}]}]},{"ID":"20240201213492-61e4um2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213492-61e4um2","updated":"20240201213492"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"硬链接为什么不能跨文件系统？"}]},{"ID":"20240201213493-m1dvu6e","Type":"NodeParagraph","Properties":{"id":"20240201213493-m1dvu6e","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"我们之前提到过，硬链接是通过 inode 节点号建立连接的，而硬链接和源文件共享相同的 inode 节点号。"}]},{"ID":"20240201213494-g931r1z","Type":"NodeParagraph","Properties":{"id":"20240201213494-g931r1z","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"然而，每个文件系统都有自己的独立 inode 表，且每个 inode 表只维护该文件系统内的 inode。如果在不同的文件系统之间创建硬链接，可能会导致 inode 节点号冲突的问题，即目标文件的 inode 节点号已经在该文件系统中被使用。"}]},{"ID":"20240201213495-a7fquq9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213495-a7fquq9","updated":"20240201213495"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"提高文件系统性能的方式有哪些？"}]},{"ID":"20240201213496-l5aou15","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213496-l5aou15","updated":"20240201213496"},"Children":[{"ID":"20240201213497-gi2gae2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213497-gi2gae2","updated":"20240201213497"},"Children":[{"ID":"20240201213498-xhnni8f","Type":"NodeParagraph","Properties":{"id":"20240201213498-xhnni8f","updated":"20240201213498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优化硬件"},{"Type":"NodeText","Data":"：使用高速硬件设备（如 SSD、NVMe）替代传统的机械硬盘，使用 RAID（Redundant Array of Inexpensive Disks）等技术提高磁盘性能。"}]}]},{"ID":"20240201213499-1wq9t9o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213499-1wq9t9o","updated":"20240201213499"},"Children":[{"ID":"20240201213500-8xbgkdc","Type":"NodeParagraph","Properties":{"id":"20240201213500-8xbgkdc","updated":"20240201213500"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"选择合适的文件系统选型"},{"Type":"NodeText","Data":"：不同的文件系统具有不同的特性，对于不同的应用场景选择合适的文件系统可以提高系统性能。"}]}]},{"ID":"20240201213501-646b3x2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213501-646b3x2","updated":"20240201213501"},"Children":[{"ID":"20240201213502-8y3cv5b","Type":"NodeParagraph","Properties":{"id":"20240201213502-8y3cv5b","updated":"20240201213502"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"运用缓存"},{"Type":"NodeText","Data":"：访问磁盘的效率比较低，可以运用缓存来减少磁盘的访问次数。不过，需要注意缓存命中率，缓存命中率过低的话，效果太差。"}]}]},{"ID":"20240201213503-2emiczu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213503-2emiczu","updated":"20240201213503"},"Children":[{"ID":"20240201213504-6ca6snn","Type":"NodeParagraph","Properties":{"id":"20240201213504-6ca6snn","updated":"20240201213504"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免磁盘过度使用"},{"Type":"NodeText","Data":"：注意磁盘的使用率，避免将磁盘用满，尽量留一些剩余空间，以免对文件系统的性能产生负面影响。"}]}]},{"ID":"20240201213505-9xb9kau","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213505-9xb9kau","updated":"20240201213505"},"Children":[{"ID":"20240201213506-aah3aam","Type":"NodeParagraph","Properties":{"id":"20240201213506-aah3aam","updated":"20240201213506"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对磁盘进行合理的分区"},{"Type":"NodeText","Data":"：合理的磁盘分区方案，能够使文件系统在不同的区域存储文件，从而减少文件碎片，提高文件读写性能。"}]}]}]},{"ID":"20240201213507-wx2c000","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213507-wx2c000","updated":"20240201213507"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的磁盘调度算法有哪些？"}]},{"ID":"20240201213508-zktde54","Type":"NodeParagraph","Properties":{"id":"20240201213508-zktde54","updated":"20240201213508"},"Children":[{"Type":"NodeText","Data":"磁盘调度算法是操作系统中对磁盘访问请求进行排序和调度的算法，其目的是提高磁盘的访问效率。"}]},{"ID":"20240201213509-3wxzm7c","Type":"NodeParagraph","Properties":{"id":"20240201213509-3wxzm7c","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"一次磁盘读写操作的时间由磁盘寻道/寻找时间、延迟时间和传输时间决定。磁盘调度算法可以通过改变到达磁盘请求的处理顺序，减少磁盘寻道时间和延迟时间。"}]},{"ID":"20240201213510-3f7s4wl","Type":"NodeParagraph","Properties":{"id":"20240201213510-3f7s4wl","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"常见的磁盘调度算法有下面这 6 种（其他还有很多磁盘调度算法都是基于这些算法改进得来的）："}]},{"ID":"20240201213511-8aq6nng","Type":"NodeParagraph","Properties":{"id":"20240201213511-8aq6nng","updated":"20240201213511"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"常见的磁盘调度算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/operating-system/disk-scheduling-algorithms.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213512-guwpshv","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213512-guwpshv","updated":"20240201213512"},"Children":[{"ID":"20240201213513-6o3abql","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213513-6o3abql","updated":"20240201213513"},"Children":[{"ID":"20240201213514-flzymif","Type":"NodeParagraph","Properties":{"id":"20240201213514-flzymif","updated":"20240201213514"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先来先服务算法（First-Come First-Served，FCFS）"},{"Type":"NodeText","Data":"：按照请求到达磁盘调度器的顺序进行处理，先到达的请求的先被服务。FCFS 算法实现起来比较简单，不存在算法开销。不过，由于没有考虑磁头移动的路径和方向，平均寻道时间较长。同时，该算法容易出现饥饿问题，即一些后到的磁盘请求可能需要等待很长时间才能得到服务。"}]}]},{"ID":"20240201213515-ljrxsog","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213515-ljrxsog","updated":"20240201213515"},"Children":[{"ID":"20240201213516-lzvxx93","Type":"NodeParagraph","Properties":{"id":"20240201213516-lzvxx93","updated":"20240201213516"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最短寻道时间优先算法（Shortest Seek Time First，SSTF）"},{"Type":"NodeText","Data":"：也被称为最佳服务优先（Shortest Service Time First，SSTF）算法，优先选择距离当前磁头位置最近的请求进行服务。SSTF 算法能够最小化磁头的寻道时间，但容易出现饥饿问题，即磁头附近的请求不断被服务，远离磁头的请求长时间得不到响应。实际应用中，需要优化一下该算法的实现，避免出现饥饿问题。"}]}]},{"ID":"20240201213517-fgwckup","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213517-fgwckup","updated":"20240201213517"},"Children":[{"ID":"20240201213518-vz6h6wo","Type":"NodeParagraph","Properties":{"id":"20240201213518-vz6h6wo","updated":"20240201213518"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"扫描算法（SCAN）"},{"Type":"NodeText","Data":"：也被称为电梯（Elevator）算法，基本思想和电梯非常类似。磁头沿着一个方向扫描磁盘，如果经过的磁道有请求就处理，直到到达磁盘的边界，然后改变移动方向，依此往复。SCAN 算法能够保证所有的请求得到服务，解决了饥饿问题。但是，如果磁头从一个方向刚扫描完，请求才到的话。这个请求就需要等到磁头从相反方向过来之后才能得到处理。"}]}]},{"ID":"20240201213519-2wls1vq","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213519-2wls1vq","updated":"20240201213519"},"Children":[{"ID":"20240201213520-c2hmf3g","Type":"NodeParagraph","Properties":{"id":"20240201213520-c2hmf3g","updated":"20240201213520"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"循环扫描算法（Circular Scan，C-SCAN）"},{"Type":"NodeText","Data":"：SCAN 算法的变体，只在磁盘的一侧进行扫描，并且只按照一个方向扫描，直到到达磁盘边界，然后回到磁盘起点，重新开始循环。"}]}]},{"ID":"20240201213521-0e1kyrq","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213521-0e1kyrq","updated":"20240201213521"},"Children":[{"ID":"20240201213522-nli7yd1","Type":"NodeParagraph","Properties":{"id":"20240201213522-nli7yd1","updated":"20240201213522"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"边扫描边观察算法（LOOK）"},{"Type":"NodeText","Data":"：SCAN 算法中磁头到了磁盘的边界才改变移动方向，这样可能会做很多无用功，因为磁头移动方向上可能已经没有请求需要处理了。LOOK 算法对 SCAN 算法进行了改进，如果磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向，依此往复。也就是边扫描边观察指定方向上还有无请求，因此叫 LOOK。"}]}]},{"ID":"20240201213523-icc1sum","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213523-icc1sum","updated":"20240201213523"},"Children":[{"ID":"20240201213524-gegarpv","Type":"NodeParagraph","Properties":{"id":"20240201213524-gegarpv","updated":"20240201213524"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"均衡循环扫描算法（C-LOOK）"},{"Type":"NodeText","Data":"：C-SCAN 只有到达磁盘边界时才能改变磁头移动方向，并且磁头返回时也需要返回到磁盘起点，这样可能会做很多无用功。C-LOOK 算法对 C-SCAN 算法进行了改进，如果磁头移动的方向上已经没有磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。"}]}]}]},{"ID":"20240201213525-gxyzvdi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213525-gxyzvdi","updated":"20240201213525"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213526-j80mork","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213526-j80mork","updated":"20240201213526"},"Children":[{"ID":"20240201213527-t8nqs86","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213527-t8nqs86","updated":"20240201213527"},"Children":[{"ID":"20240201213528-b1i2ass","Type":"NodeParagraph","Properties":{"id":"20240201213528-b1i2ass","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"《计算机操作系统—汤小丹》第四版"}]}]},{"ID":"20240201213529-5x9px6s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213529-5x9px6s","updated":"20240201213529"},"Children":[{"ID":"20240201213530-0weri4o","Type":"NodeParagraph","Properties":{"id":"20240201213530-0weri4o","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"《深入理解计算机系统》"}]}]},{"ID":"20240201213531-c8ly3ac","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213531-c8ly3ac","updated":"20240201213531"},"Children":[{"ID":"20240201213532-4whzp14","Type":"NodeParagraph","Properties":{"id":"20240201213532-4whzp14","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"《重学操作系统》"}]}]},{"ID":"20240201213533-akxcoto","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213533-akxcoto","updated":"20240201213533"},"Children":[{"ID":"20240201213534-6s2fdmu","Type":"NodeParagraph","Properties":{"id":"20240201213534-6s2fdmu","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"《现代操作系统原理与实现》"}]}]},{"ID":"20240201213535-6g6c0nz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213535-6g6c0nz","updated":"20240201213535"},"Children":[{"ID":"20240201213536-rb8rt5i","Type":"NodeParagraph","Properties":{"id":"20240201213536-rb8rt5i","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"王道考研操作系统知识点整理："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/13.html","TextMarkTextContent":"https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/13.html"}]}]},{"ID":"20240201213537-yfozcy0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213537-yfozcy0","updated":"20240201213537"},"Children":[{"ID":"20240201213538-8s58w8z","Type":"NodeParagraph","Properties":{"id":"20240201213538-8s58w8z","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"内存管理之伙伴系统与 SLAB："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/qq_44272681/article/details/124199068","TextMarkTextContent":"https://blog.csdn.net/qq_44272681/article/details/124199068"}]}]},{"ID":"20240201213539-b83i55e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213539-b83i55e","updated":"20240201213539"},"Children":[{"ID":"20240201213540-kvtu7sn","Type":"NodeParagraph","Properties":{"id":"20240201213540-kvtu7sn","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"为什么 Linux 需要虚拟内存："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://draveness.me/whys-the-design-os-virtual-memory/","TextMarkTextContent":"https://draveness.me/whys-the-design-os-virtual-memory/"}]}]},{"ID":"20240201213541-5v7s9lu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-5v7s9lu","updated":"20240201213541"},"Children":[{"ID":"20240201213542-87yquby","Type":"NodeParagraph","Properties":{"id":"20240201213542-87yquby","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"程序员的自我修养（七）：内存缺页错误："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://liam.page/2017/09/01/page-fault/","TextMarkTextContent":"https://liam.page/2017/09/01/page-fault/"}]}]},{"ID":"20240201213543-z040lnp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213543-z040lnp","updated":"20240201213543"},"Children":[{"ID":"20240201213544-q35hk5m","Type":"NodeParagraph","Properties":{"id":"20240201213544-q35hk5m","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"虚拟内存的那点事儿："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/6844903507594575886","TextMarkTextContent":"https://juejin.cn/post/6844903507594575886"}]}]}]},{"ID":"20240201213545-dg1ntde","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213545-dg1ntde","updated":"20240201213545"}}]}