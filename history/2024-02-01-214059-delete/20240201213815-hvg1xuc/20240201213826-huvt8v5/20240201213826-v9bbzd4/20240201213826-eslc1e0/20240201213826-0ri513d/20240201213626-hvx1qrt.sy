{"ID":"20240201213626-hvx1qrt","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213626-hvx1qrt","title":"string-algorithm-problems","updated":"20240201213626"},"Children":[{"ID":"20240201213627-ad6cjg4","Type":"NodeThematicBreak","Properties":{"id":"20240201213627-ad6cjg4","updated":"20240201213627"}},{"ID":"20240201213628-k0h8ycr","Type":"NodeParagraph","Properties":{"id":"20240201213628-k0h8ycr","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"title: 几道常见的字符串算法题"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 计算机基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213629-1lhieq6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-1lhieq6","updated":"20240201213629"},"Children":[{"ID":"20240201213630-rqjv3fq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-rqjv3fq","updated":"20240201213630"},"Children":[{"ID":"20240201213631-08985ft","Type":"NodeParagraph","Properties":{"id":"20240201213631-08985ft","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"算法"}]}]}]},{"ID":"20240201213632-ihcngja","Type":"NodeThematicBreak","Properties":{"id":"20240201213632-ihcngja","updated":"20240201213632"}},{"ID":"20240201213633-d6jwzjd","Type":"NodeBlockquote","Properties":{"id":"20240201213633-d6jwzjd","updated":"20240201213633"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213634-5obrfek","Type":"NodeParagraph","Properties":{"id":"20240201213634-5obrfek","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"作者：wwwxmu"}]},{"ID":"20240201213635-l5osz1t","Type":"NodeParagraph","Properties":{"id":"20240201213635-l5osz1t","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"原文地址:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.weiweiblog.cn/13string/","TextMarkTextContent":"https://www.weiweiblog.cn/13string/"}]}]},{"ID":"20240201213636-fe23udm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213636-fe23udm","updated":"20240201213636"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. KMP 算法"}]},{"ID":"20240201213637-cedcppk","Type":"NodeParagraph","Properties":{"id":"20240201213637-cedcppk","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而空间复杂度也只有 O(m)。因为“暴力搜索”的方法会反复回溯主串，导致效率低下，而 KMP 算法可以利用已经部分匹配这个有效信息，保持主串上的指针不回溯，通过修改子串的指针，让模式串尽量地移动到有效的位置。"}]},{"ID":"20240201213638-4r6wmum","Type":"NodeParagraph","Properties":{"id":"20240201213638-4r6wmum","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"具体算法细节请参考："}]},{"ID":"20240201213639-wp02rd9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-wp02rd9","updated":"20240201213639"},"Children":[{"ID":"20240201213640-w01di62","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-w01di62","updated":"20240201213640"},"Children":[{"ID":"20240201213641-cav6hfy","Type":"NodeParagraph","Properties":{"id":"20240201213641-cav6hfy","updated":"20240201213641"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/v_july_v/article/details/7041827","TextMarkTextContent":"从头到尾彻底理解 KMP:"}]}]},{"ID":"20240201213642-j96f3sb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-j96f3sb","updated":"20240201213642"},"Children":[{"ID":"20240201213643-vus1dnn","Type":"NodeParagraph","Properties":{"id":"20240201213643-vus1dnn","updated":"20240201213643"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/21923021","TextMarkTextContent":"如何更好的理解和掌握 KMP 算法?"}]}]},{"ID":"20240201213644-e4yzuzl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213644-e4yzuzl","updated":"20240201213644"},"Children":[{"ID":"20240201213645-pmrairz","Type":"NodeParagraph","Properties":{"id":"20240201213645-pmrairz","updated":"20240201213645"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.sengxian.com/algorithms/kmp","TextMarkTextContent":"KMP 算法详细解析"}]}]},{"ID":"20240201213646-aabbw8f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-aabbw8f","updated":"20240201213646"},"Children":[{"ID":"20240201213647-zvv1h1n","Type":"NodeParagraph","Properties":{"id":"20240201213647-zvv1h1n","updated":"20240201213647"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://blog.jobbole.com/76611/","TextMarkTextContent":"图解 KMP 算法"}]}]},{"ID":"20240201213648-mnafp8j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-mnafp8j","updated":"20240201213648"},"Children":[{"ID":"20240201213649-nfa4a9a","Type":"NodeParagraph","Properties":{"id":"20240201213649-nfa4a9a","updated":"20240201213649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/av3246487/?from=search\u0026seid=17173603269940723925","TextMarkTextContent":"汪都能听懂的 KMP 字符串匹配算法【双语字幕】"}]}]},{"ID":"20240201213650-gtnc1cu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-gtnc1cu","updated":"20240201213650"},"Children":[{"ID":"20240201213651-0fvy5vv","Type":"NodeParagraph","Properties":{"id":"20240201213651-0fvy5vv","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/av11866460?from=search\u0026seid=12730654434238709250","TextMarkTextContent":"KMP 字符串匹配算法 1"}]}]}]},{"ID":"20240201213652-lvnn11q","Type":"NodeParagraph","Properties":{"id":"20240201213652-lvnn11q","updated":"20240201213652"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"除此之外，再来了解一下 BM 算法！"}]},{"ID":"20240201213653-xv8h0ms","Type":"NodeBlockquote","Properties":{"id":"20240201213653-xv8h0ms","updated":"20240201213653"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213654-wiyub9d","Type":"NodeParagraph","Properties":{"id":"20240201213654-wiyub9d","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"BM 算法也是一种精确字符串匹配算法，它采用从右向左比较的方法，同时应用到了两种启发式规则，即坏字符规则 和好后缀规则 ，来决定向右跳跃的距离。基本思路就是从右往左进行字符匹配，遇到不匹配的字符后从坏字符表和好后缀表找一个最大的右移值，将模式串右移继续匹配。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"《字符串匹配的 KMP 算法》:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html","TextMarkTextContent":"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html"}]}]},{"ID":"20240201213655-2ej84ss","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213655-2ej84ss","updated":"20240201213655"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 替换空格"}]},{"ID":"20240201213656-oochdvh","Type":"NodeBlockquote","Properties":{"id":"20240201213656-oochdvh","updated":"20240201213656"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213657-9s4t2ah","Type":"NodeParagraph","Properties":{"id":"20240201213657-9s4t2ah","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"剑指 offer：请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。"}]}]},{"ID":"20240201213658-pa7lfb9","Type":"NodeParagraph","Properties":{"id":"20240201213658-pa7lfb9","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"这里我提供了两种方法：① 常规方法；② 利用 API 解决。"}]},{"ID":"20240201213659-r87y05l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213659-r87y05l","updated":"20240201213659"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//https://www.weiweiblog.cn/replacespace/\npublic class Solution {\n\n  /**\n   * 第一种方法：常规方法。利用String.charAt(i)以及String.valueOf(char).equals(\" \"\n   * )遍历字符串并判断元素是否为空格。是则替换为\"%20\",否则不替换\n   */\n  public static String replaceSpace(StringBuffer str) {\n\n    int length = str.length();\n    // System.out.println(\"length=\" + length);\n    StringBuffer result = new StringBuffer();\n    for (int i = 0; i \u003c length; i++) {\n      char b = str.charAt(i);\n      if (String.valueOf(b).equals(\" \")) {\n        result.append(\"%20\");\n      } else {\n        result.append(b);\n      }\n    }\n    return result.toString();\n\n  }\n\n  /**\n   * 第二种方法：利用API替换掉所用空格，一行代码解决问题\n   */\n  public static String replaceSpace2(StringBuffer str) {\n\n    return str.toString().replaceAll(\"\\\\s\", \"%20\");\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213660-o9en9x8","Type":"NodeParagraph","Properties":{"id":"20240201213660-o9en9x8","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"对于替换固定字符（比如空格）的情况，第二种方法其实可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"replace"},{"Type":"NodeText","Data":" 方法替换，性能更好!"}]},{"ID":"20240201213661-5hcz58c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213661-5hcz58c","updated":"20240201213661"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"str.toString().replace(\" \",\"%20\");\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213662-dd0klm5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213662-dd0klm5","updated":"20240201213662"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 最长公共前缀"}]},{"ID":"20240201213663-ip7yj0c","Type":"NodeBlockquote","Properties":{"id":"20240201213663-ip7yj0c","updated":"20240201213663"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213664-315c4f2","Type":"NodeParagraph","Properties":{"id":"20240201213664-315c4f2","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"Leetcode: 编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 \"\"。"}]}]},{"ID":"20240201213665-oa062zh","Type":"NodeParagraph","Properties":{"id":"20240201213665-oa062zh","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"示例 1:"}]},{"ID":"20240201213666-hv8u2jv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213666-hv8u2jv","updated":"20240201213666"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入: [\"flower\",\"flow\",\"flight\"]\n输出: \"fl\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213667-1v4c5t4","Type":"NodeParagraph","Properties":{"id":"20240201213667-1v4c5t4","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"示例 2:"}]},{"ID":"20240201213668-xyh5l3z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213668-xyh5l3z","updated":"20240201213668"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入: [\"dog\",\"racecar\",\"car\"]\n输出: \"\"\n解释: 输入不存在公共前缀。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213669-6ew5lg3","Type":"NodeParagraph","Properties":{"id":"20240201213669-6ew5lg3","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"思路很简单！先利用 Arrays.sort(strs)为数组排序，再将数组第一个元素和最后一个元素的字符从前往后对比即可！"}]},{"ID":"20240201213670-mz0xb0k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213670-mz0xb0k","updated":"20240201213670"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Main {\n public static String replaceSpace(String[] strs) {\n\n  // 如果检查值不合法及就返回空串\n  if (!checkStrs(strs)) {\n   return \"\";\n  }\n  // 数组长度\n  int len = strs.length;\n  // 用于保存结果\n  StringBuilder res = new StringBuilder();\n  // 给字符串数组的元素按照升序排序(包含数字的话，数字会排在前面)\n  Arrays.sort(strs);\n  int m = strs[0].length();\n  int n = strs[len - 1].length();\n  int num = Math.min(m, n);\n  for (int i = 0; i \u003c num; i++) {\n   if (strs[0].charAt(i) == strs[len - 1].charAt(i)) {\n    res.append(strs[0].charAt(i));\n   } else\n    break;\n\n  }\n  return res.toString();\n\n }\n\n private static boolean checkStrs(String[] strs) {\n  boolean flag = false;\n  if (strs != null) {\n   // 遍历strs检查元素值\n   for (int i = 0; i \u003c strs.length; i++) {\n    if (strs[i] != null \u0026\u0026 strs[i].length() != 0) {\n     flag = true;\n    } else {\n     flag = false;\n     break;\n    }\n   }\n  }\n  return flag;\n }\n\n // 测试\n public static void main(String[] args) {\n  String[] strs = { \"customer\", \"car\", \"cat\" };\n  // String[] strs = { \"customer\", \"car\", null };//空串\n  // String[] strs = {};//空串\n  // String[] strs = null;//空串\n  System.out.println(Main.replaceSpace(strs));// c\n }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213671-g5r1360","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213671-g5r1360","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. 回文串"}]},{"ID":"20240201213672-8geiig6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213672-8geiig6","updated":"20240201213672"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.1. 最长回文串"}]},{"ID":"20240201213673-n74dgdn","Type":"NodeBlockquote","Properties":{"id":"20240201213673-n74dgdn","updated":"20240201213673"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213674-mzz9p2o","Type":"NodeParagraph","Properties":{"id":"20240201213674-mzz9p2o","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"LeetCode: 给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026quot;Aa\u0026quot;"},{"Type":"NodeText","Data":"不能当做一个回文字符串。注"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"意:假设字符串的长度不会超过 1010。"}]},{"ID":"20240201213675-xltb8ak","Type":"NodeParagraph","Properties":{"id":"20240201213675-xltb8ak","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"回文串：“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。——百度百科 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://baike.baidu.com/item/%E5%9B%9E%E6%96%87%E4%B8%B2/1274921?fr=aladdin","TextMarkTextContent":"https://baike.baidu.com/item/%E5%9B%9E%E6%96%87%E4%B8%B2/1274921?fr=aladdin"}]}]},{"ID":"20240201213676-ldqe569","Type":"NodeParagraph","Properties":{"id":"20240201213676-ldqe569","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"示例 1:"}]},{"ID":"20240201213677-1k562yr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213677-1k562yr","updated":"20240201213677"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入:\n\"abccccdd\"\n\n输出:\n7\n\n解释:\n我们可以构造的最长的回文串是\"dccaccd\", 它的长度是 7。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213678-b64dnmj","Type":"NodeParagraph","Properties":{"id":"20240201213678-b64dnmj","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"我们上面已经知道了什么是回文串？现在我们考虑一下可以构成回文串的两种情况："}]},{"ID":"20240201213679-0sexcu6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-0sexcu6","updated":"20240201213679"},"Children":[{"ID":"20240201213680-4c9ncwo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213680-4c9ncwo","updated":"20240201213680"},"Children":[{"ID":"20240201213681-vakyyuz","Type":"NodeParagraph","Properties":{"id":"20240201213681-vakyyuz","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"字符出现次数为双数的组合"}]}]},{"ID":"20240201213682-ajhpulw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213682-ajhpulw","updated":"20240201213682"},"Children":[{"ID":"20240201213683-njoikd4","Type":"NodeParagraph","Properties":{"id":"20240201213683-njoikd4","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"字符出现次数为偶数的组合+单个字符中出现次数最多且为奇数次的字符"},{"Type":"NodeText","Data":" （参见 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/665","TextMarkTextContent":"issue665"},{"Type":"NodeText","Data":" ）"}]}]}]},{"ID":"20240201213684-go6mpz2","Type":"NodeParagraph","Properties":{"id":"20240201213684-go6mpz2","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"统计字符出现的次数即可，双数才能构成回文。因为允许中间一个数单独出现，比如“abcba”，所以如果最后有字母落单，总长度可以加 1。首先将字符串转变为字符数组。然后遍历该数组，判断对应字符是否在 hashset 中，如果不在就加进去，如果在就让 count++，然后移除该字符！这样就能找到出现次数为双数的字符个数。"}]},{"ID":"20240201213685-d8ce0c1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213685-d8ce0c1","updated":"20240201213685"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//https://leetcode-cn.com/problems/longest-palindrome/description/\nclass Solution {\n  public  int longestPalindrome(String s) {\n    if (s.length() == 0)\n      return 0;\n    // 用于存放字符\n    HashSet\u003cCharacter\u003e hashset = new HashSet\u003cCharacter\u003e();\n    char[] chars = s.toCharArray();\n    int count = 0;\n    for (int i = 0; i \u003c chars.length; i++) {\n      if (!hashset.contains(chars[i])) {// 如果hashset没有该字符就保存进去\n        hashset.add(chars[i]);\n      } else {// 如果有,就让count++（说明找到了一个成对的字符），然后把该字符移除\n        hashset.remove(chars[i]);\n        count++;\n      }\n    }\n    return hashset.isEmpty() ? count * 2 : count * 2 + 1;\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213686-b4gviqn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213686-b4gviqn","updated":"20240201213686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.2. 验证回文串"}]},{"ID":"20240201213687-uixbips","Type":"NodeBlockquote","Properties":{"id":"20240201213687-uixbips","updated":"20240201213687"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213688-ni8uon3","Type":"NodeParagraph","Properties":{"id":"20240201213688-ni8uon3","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"LeetCode: 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。"}]}]},{"ID":"20240201213689-3k7z2ze","Type":"NodeParagraph","Properties":{"id":"20240201213689-3k7z2ze","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"示例 1:"}]},{"ID":"20240201213690-1hwyure","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213690-1hwyure","updated":"20240201213690"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入: \"A man, a plan, a canal: Panama\"\n输出: true\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213691-vqhnd6d","Type":"NodeParagraph","Properties":{"id":"20240201213691-vqhnd6d","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"示例 2:"}]},{"ID":"20240201213692-ygsdnpo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213692-ygsdnpo","updated":"20240201213692"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入: \"race a car\"\n输出: false\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213693-1r8tkee","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213693-1r8tkee","updated":"20240201213693"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//https://leetcode-cn.com/problems/valid-palindrome/description/\nclass Solution {\n  public  boolean isPalindrome(String s) {\n    if (s.length() == 0)\n      return true;\n    int l = 0, r = s.length() - 1;\n    while (l \u003c r) {\n      // 从头和尾开始向中间遍历\n      if (!Character.isLetterOrDigit(s.charAt(l))) {// 字符不是字母和数字的情况\n        l++;\n      } else if (!Character.isLetterOrDigit(s.charAt(r))) {// 字符不是字母和数字的情况\n        r--;\n      } else {\n        // 判断二者是否相等\n        if (Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r)))\n          return false;\n        l++;\n        r--;\n      }\n    }\n    return true;\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213694-a7pi8fd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213694-a7pi8fd","updated":"20240201213694"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.3. 最长回文子串"}]},{"ID":"20240201213695-viax50q","Type":"NodeBlockquote","Properties":{"id":"20240201213695-viax50q","updated":"20240201213695"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213696-432d525","Type":"NodeParagraph","Properties":{"id":"20240201213696-432d525","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"Leetcode: LeetCode: 最长回文子串 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。"}]}]},{"ID":"20240201213697-6odvufz","Type":"NodeParagraph","Properties":{"id":"20240201213697-6odvufz","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"示例 1："}]},{"ID":"20240201213698-t3kl34r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213698-t3kl34r","updated":"20240201213698"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\"也是一个有效答案。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213699-5u31rsi","Type":"NodeParagraph","Properties":{"id":"20240201213699-5u31rsi","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"示例 2："}]},{"ID":"20240201213700-45b3ulp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213700-45b3ulp","updated":"20240201213700"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入: \"cbbd\"\n输出: \"bb\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213701-lan7k97","Type":"NodeParagraph","Properties":{"id":"20240201213701-lan7k97","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"以某个元素为中心，分别计算偶数长度的回文最大长度和奇数长度的回文最大长度。"}]},{"ID":"20240201213702-2c7pv7d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213702-2c7pv7d","updated":"20240201213702"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//https://leetcode-cn.com/problems/longest-palindromic-substring/description/\nclass Solution {\n  private int index, len;\n\n  public String longestPalindrome(String s) {\n    if (s.length() \u003c 2)\n      return s;\n    for (int i = 0; i \u003c s.length() - 1; i++) {\n      PalindromeHelper(s, i, i);\n      PalindromeHelper(s, i, i + 1);\n    }\n    return s.substring(index, index + len);\n  }\n\n  public void PalindromeHelper(String s, int l, int r) {\n    while (l \u003e= 0 \u0026\u0026 r \u003c s.length() \u0026\u0026 s.charAt(l) == s.charAt(r)) {\n      l--;\n      r++;\n    }\n    if (len \u003c r - l - 1) {\n      index = l + 1;\n      len = r - l - 1;\n    }\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213703-wxlm8n0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213703-wxlm8n0","updated":"20240201213703"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.4. 最长回文子序列"}]},{"ID":"20240201213704-sip4u6k","Type":"NodeBlockquote","Properties":{"id":"20240201213704-sip4u6k","updated":"20240201213704"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213705-vlhwc9l","Type":"NodeParagraph","Properties":{"id":"20240201213705-vlhwc9l","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"LeetCode: 最长回文子序列"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最长回文子序列和上一题最长回文子串的区别是，子串是字符串中连续的一个序列，而子序列是字符串中保持相对位置的字符序列，例如，\u0026quot;bbbb\u0026quot;可以是字符串\u0026quot;bbbab\u0026quot;的子序列但不是子串。"}]}]},{"ID":"20240201213706-6gfhnhb","Type":"NodeParagraph","Properties":{"id":"20240201213706-6gfhnhb","updated":"20240201213706"},"Children":[{"Type":"NodeText","Data":"给定一个字符串 s，找到其中最长的回文子序列。可以假设 s 的最大长度为 1000。"}]},{"ID":"20240201213707-hdthcbn","Type":"NodeParagraph","Properties":{"id":"20240201213707-hdthcbn","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"示例 1:"}]},{"ID":"20240201213708-nzw5ai0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213708-nzw5ai0","updated":"20240201213708"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入:\n\"bbbab\"\n输出:\n4\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213709-v58enh3","Type":"NodeParagraph","Properties":{"id":"20240201213709-v58enh3","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"一个可能的最长回文子序列为 \"bbbb\"。"}]},{"ID":"20240201213710-jqics7l","Type":"NodeParagraph","Properties":{"id":"20240201213710-jqics7l","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"示例 2:"}]},{"ID":"20240201213711-y6mjt81","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213711-y6mjt81","updated":"20240201213711"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入:\n\"cbbd\"\n输出:\n2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213712-vup17lo","Type":"NodeParagraph","Properties":{"id":"20240201213712-vup17lo","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"一个可能的最长回文子序列为 \"bb\"。"}]},{"ID":"20240201213713-p6f69is","Type":"NodeParagraph","Properties":{"id":"20240201213713-p6f69is","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"动态规划："},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dp[i][j] = dp[i+1][j-1] + 2 if s.charAt(i) == s.charAt(j) otherwise, dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1])"}]},{"ID":"20240201213714-uo2y20r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213714-uo2y20r","updated":"20240201213714"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public int longestPalindromeSubseq(String s) {\n        int len = s.length();\n        int [][] dp = new int[len][len];\n        for(int i = len - 1; i\u003e=0; i--){\n            dp[i][i] = 1;\n            for(int j = i+1; j \u003c len; j++){\n                if(s.charAt(i) == s.charAt(j))\n                    dp[i][j] = dp[i+1][j-1] + 2;\n                else\n                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n        return dp[0][len-1];\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213715-8rvx2yl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213715-8rvx2yl","updated":"20240201213715"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. 括号匹配深度"}]},{"ID":"20240201213716-89a2yg7","Type":"NodeBlockquote","Properties":{"id":"20240201213716-89a2yg7","updated":"20240201213716"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213717-07eyjth","Type":"NodeParagraph","Properties":{"id":"20240201213717-07eyjth","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"爱奇艺 2018 秋招 Java："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"一个合法的括号匹配序列有以下定义:"}]},{"ID":"20240201213718-g7qiw3d","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213718-g7qiw3d","updated":"20240201213718"},"Children":[{"ID":"20240201213719-6pfwtgk","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213719-6pfwtgk","updated":"20240201213719"},"Children":[{"ID":"20240201213720-4cq71pe","Type":"NodeParagraph","Properties":{"id":"20240201213720-4cq71pe","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"空串\"\"是一个合法的括号匹配序列"}]}]},{"ID":"20240201213721-cgntkx7","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213721-cgntkx7","updated":"20240201213721"},"Children":[{"ID":"20240201213722-h2ta3zp","Type":"NodeParagraph","Properties":{"id":"20240201213722-h2ta3zp","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"如果\"X\"和\"Y\"都是合法的括号匹配序列,\"XY\"也是一个合法的括号匹配序列"}]}]},{"ID":"20240201213723-py761h7","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213723-py761h7","updated":"20240201213723"},"Children":[{"ID":"20240201213724-gasua7j","Type":"NodeParagraph","Properties":{"id":"20240201213724-gasua7j","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"如果\"X\"是一个合法的括号匹配序列,那么\"(X)\"也是一个合法的括号匹配序列"}]}]},{"ID":"20240201213725-o69fvc2","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213725-o69fvc2","updated":"20240201213725"},"Children":[{"ID":"20240201213726-0bfeyrj","Type":"NodeParagraph","Properties":{"id":"20240201213726-0bfeyrj","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"每个合法的括号序列都可以由以上规则生成。"}]}]}]},{"ID":"20240201213727-u1x6wpj","Type":"NodeParagraph","Properties":{"id":"20240201213727-u1x6wpj","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"例如: \"\",\"()\",\"()()\",\"((()))\"都是合法的括号序列"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"对于一个合法的括号序列我们又有以下定义它的深度:"}]},{"ID":"20240201213728-pwv46oe","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213728-pwv46oe","updated":"20240201213728"},"Children":[{"ID":"20240201213729-x3phvtz","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213729-x3phvtz","updated":"20240201213729"},"Children":[{"ID":"20240201213730-ey1h7r7","Type":"NodeParagraph","Properties":{"id":"20240201213730-ey1h7r7","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"空串\"\"的深度是 0"}]}]},{"ID":"20240201213731-nmt3e4g","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213731-nmt3e4g","updated":"20240201213731"},"Children":[{"ID":"20240201213732-jrxq9ee","Type":"NodeParagraph","Properties":{"id":"20240201213732-jrxq9ee","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"如果字符串\"X\"的深度是 x,字符串\"Y\"的深度是 y,那么字符串\"XY\"的深度为 max(x,y)"}]}]},{"ID":"20240201213733-sobht5e","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213733-sobht5e","updated":"20240201213733"},"Children":[{"ID":"20240201213734-w9hpys3","Type":"NodeParagraph","Properties":{"id":"20240201213734-w9hpys3","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"如果\"X\"的深度是 x,那么字符串\"(X)\"的深度是 x+1"}]}]}]},{"ID":"20240201213735-l9hsvwr","Type":"NodeParagraph","Properties":{"id":"20240201213735-l9hsvwr","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"例如: \"()()()\"的深度是 1,\"((()))\"的深度是 3。牛牛现在给你一个合法的括号序列,需要你计算出其深度。"}]}]},{"ID":"20240201213736-6ytbu1j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213736-6ytbu1j","updated":"20240201213736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入描述:\n输入包括一个合法的括号序列s,s长度length(2 ≤ length ≤ 50),序列中只包含'('和')'。\n\n输出描述:\n输出一个正整数,即这个序列的深度。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213737-6ls3nbx","Type":"NodeParagraph","Properties":{"id":"20240201213737-6ls3nbx","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20240201213738-6izmckj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213738-6izmckj","updated":"20240201213738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入:\n(())\n输出:\n2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213739-hj3vb8r","Type":"NodeParagraph","Properties":{"id":"20240201213739-hj3vb8r","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"代码如下："}]},{"ID":"20240201213740-zxuz2bv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213740-zxuz2bv","updated":"20240201213740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.Scanner;\n\n/**\n * https://www.nowcoder.com/test/8246651/summary\n *\n * @author Snailclimb\n * @date 2018年9月6日\n * @Description: TODO 求给定合法括号序列的深度\n */\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    int cnt = 0, max = 0, i;\n    for (i = 0; i \u003c s.length(); ++i) {\n      if (s.charAt(i) == '(')\n        cnt++;\n      else\n        cnt--;\n      max = Math.max(max, cnt);\n    }\n    sc.close();\n    System.out.println(max);\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213741-7co4ygy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213741-7co4ygy","updated":"20240201213741"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"6. 把字符串转换成整数"}]},{"ID":"20240201213742-mbv5qie","Type":"NodeBlockquote","Properties":{"id":"20240201213742-mbv5qie","updated":"20240201213742"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213743-u59phm2","Type":"NodeParagraph","Properties":{"id":"20240201213743-u59phm2","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"剑指 offer: 将一个字符串转换成一个整数(实现 Integer.valueOf(string)的功能，但是 string 不符合数字要求时返回 0)，要求不能使用字符串转换整数的库函数。 数值为 0 或者字符串不是一个合法的数值则返回 0。"}]}]},{"ID":"20240201213744-5kqxzp2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213744-5kqxzp2","updated":"20240201213744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//https://www.weiweiblog.cn/strtoint/\npublic class Main {\n\n  public static int StrToInt(String str) {\n    if (str.length() == 0)\n      return 0;\n    char[] chars = str.toCharArray();\n    // 判断是否存在符号位\n    int flag = 0;\n    if (chars[0] == '+')\n      flag = 1;\n    else if (chars[0] == '-')\n      flag = 2;\n    int start = flag \u003e 0 ? 1 : 0;\n    int res = 0;// 保存结果\n    for (int i = start; i \u003c chars.length; i++) {\n      if (Character.isDigit(chars[i])) {// 调用Character.isDigit(char)方法判断是否是数字，是返回True，否则False\n        int temp = chars[i] - '0';\n        res = res * 10 + temp;\n      } else {\n        return 0;\n      }\n    }\n   return flag != 2 ? res : -res;\n\n  }\n\n  public static void main(String[] args) {\n    // TODO Auto-generated method stub\n    String s = \"-12312312\";\n    System.out.println(\"使用库函数转换：\" + Integer.valueOf(s));\n    int res = Main.StrToInt(s);\n    System.out.println(\"使用自己写的方法转换：\" + res);\n\n  }\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213745-k81ymz9","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-k81ymz9","updated":"20240201213745"}}]}