{"ID":"20240201213634-xls3sji","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213634-xls3sji","title":"gossip-protocl","updated":"20240201213634"},"Children":[{"ID":"20240201213635-et07zp6","Type":"NodeThematicBreak","Properties":{"id":"20240201213635-et07zp6","updated":"20240201213635"}},{"ID":"20240201213636-6hfamd7","Type":"NodeParagraph","Properties":{"id":"20240201213636-6hfamd7","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"title: Gossip 协议详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213637-l6kqfbf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-l6kqfbf","updated":"20240201213637"},"Children":[{"ID":"20240201213638-dhmq78s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-dhmq78s","updated":"20240201213638"},"Children":[{"ID":"20240201213639-gkym4ud","Type":"NodeParagraph","Properties":{"id":"20240201213639-gkym4ud","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"分布式协议\u0026算法"}]}]},{"ID":"20240201213640-fwyhx9f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-fwyhx9f","updated":"20240201213640"},"Children":[{"ID":"20240201213641-310w512","Type":"NodeParagraph","Properties":{"id":"20240201213641-310w512","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"共识算法"}]}]}]},{"ID":"20240201213642-culybc1","Type":"NodeThematicBreak","Properties":{"id":"20240201213642-culybc1","updated":"20240201213642"}},{"ID":"20240201213643-nugy9xo","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213643-nugy9xo","updated":"20240201213643"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"背景"}]},{"ID":"20240201213644-9wxqwn0","Type":"NodeParagraph","Properties":{"id":"20240201213644-9wxqwn0","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"在分布式系统中，不同的节点进行数据/信息共享是一个基本的需求。"}]},{"ID":"20240201213645-kbdxmwo","Type":"NodeParagraph","Properties":{"id":"20240201213645-kbdxmwo","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"一种比较简单粗暴的方法就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"集中式发散消息"},{"Type":"NodeText","Data":"，简单来说就是一个主节点同时共享最新信息给其他所有节点，比较适合中心化系统。这种方法的缺陷也很明显，节点多的时候不光同步消息的效率低，还太依赖与中心节点，存在单点风险问题。"}]},{"ID":"20240201213646-7h90obn","Type":"NodeParagraph","Properties":{"id":"20240201213646-7h90obn","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"于是，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分散式发散消息"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Gossip 协议"},{"Type":"NodeText","Data":" 就诞生了。"}]},{"ID":"20240201213647-ws5udc7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213647-ws5udc7","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Gossip 协议介绍"}]},{"ID":"20240201213648-6a66t3i","Type":"NodeParagraph","Properties":{"id":"20240201213648-6a66t3i","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"Gossip 直译过来就是闲话、流言蜚语的意思。流言蜚语有什么特点呢？容易被传播且传播速度还快，你传我我传他，然后大家都知道了。"}]},{"ID":"20240201213649-qbibcmk","Type":"NodeParagraph","Properties":{"id":"20240201213649-qbibcmk","updated":"20240201213649"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/gossip-20240201213826-3pg23df.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213650-hce3q9l","Type":"NodeParagraph","Properties":{"id":"20240201213650-hce3q9l","updated":"20240201213650"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Gossip 协议"},{"Type":"NodeText","Data":" 也叫 Epidemic 协议（流行病协议）或者 Epidemic propagation 算法（疫情传播算法），别名很多。不过，这些名字的特点都具有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"随机传播特性"},{"Type":"NodeText","Data":" （联想一下病毒传播、癌细胞扩散等生活中常见的情景），这也正是 Gossip 协议最主要的特点。"}]},{"ID":"20240201213651-v1e4t8d","Type":"NodeParagraph","Properties":{"id":"20240201213651-v1e4t8d","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"Gossip 协议最早是在 ACM 上的一篇 1987 年发表的论文 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dl.acm.org/doi/10.1145/41840.41841","TextMarkTextContent":"《Epidemic Algorithms for Replicated Database Maintenance》"},{"Type":"NodeText","Data":"中被提出的。根据论文标题，我们大概就能知道 Gossip 协议当时提出的主要应用是在分布式数据库系统中各个副本节点同步数据。"}]},{"ID":"20240201213652-367a2yj","Type":"NodeParagraph","Properties":{"id":"20240201213652-367a2yj","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"正如 Gossip 协议其名一样，这是一种随机且带有传染性的方式将信息传播到整个网络中，并在一定时间内，使得系统内的所有节点数据一致。"}]},{"ID":"20240201213653-n6rlmts","Type":"NodeParagraph","Properties":{"id":"20240201213653-n6rlmts","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"在 Gossip 协议下，没有所谓的中心节点，每个节点周期性地随机找一个节点互相同步彼此的信息，理论上来说，各个节点的状态最终会保持一致。"}]},{"ID":"20240201213654-a9i8bfy","Type":"NodeParagraph","Properties":{"id":"20240201213654-a9i8bfy","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"下面我们来对 Gossip 协议的定义做一个总结："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Gossip 协议是一种允许在分布式系统中共享状态的去中心化通信协议，通过这种通信协议，我们可以将信息传播给网络或集群中的所有成员。"}]},{"ID":"20240201213655-nm2d1h5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213655-nm2d1h5","updated":"20240201213655"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Gossip 协议应用"}]},{"ID":"20240201213656-c7c5r9d","Type":"NodeParagraph","Properties":{"id":"20240201213656-c7c5r9d","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"NoSQL 数据库 Redis 和 Apache Cassandra、服务网格解决方案 Consul 等知名项目都用到了 Gossip 协议，学习 Gossip 协议有助于我们搞清很多技术的底层原理。"}]},{"ID":"20240201213657-b8xy3ip","Type":"NodeParagraph","Properties":{"id":"20240201213657-b8xy3ip","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"我们这里以 Redis Cluster 为例说明 Gossip 协议的实际应用。"}]},{"ID":"20240201213658-aaivh1v","Type":"NodeParagraph","Properties":{"id":"20240201213658-aaivh1v","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"我们经常使用的分布式缓存 Redis 的官方集群解决方案（3.0 版本引入） Redis Cluster 就是基于 Gossip 协议来实现集群中各个节点数据的最终一致性。"}]},{"ID":"20240201213659-vnzli5a","Type":"NodeParagraph","Properties":{"id":"20240201213659-vnzli5a","updated":"20240201213659"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Redis 的官方集群解决方案","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/protocol/up-fcacc1eefca6e51354a5f1fc9f2919f51ec.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213660-r6hrbtp","Type":"NodeParagraph","Properties":{"id":"20240201213660-r6hrbtp","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"Redis Cluster 是一个典型的分布式系统，分布式系统中的各个节点需要互相通信。既然要相互通信就要遵循一致的通信协议，Redis Cluster 中的各个节点基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Gossip 协议"},{"Type":"NodeText","Data":" 来进行通信共享信息，每个 Redis 节点都维护了一份集群的状态信息。"}]},{"ID":"20240201213661-m1y7njr","Type":"NodeParagraph","Properties":{"id":"20240201213661-m1y7njr","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"Redis Cluster 的节点之间会相互发送多种 Gossip 消息："}]},{"ID":"20240201213662-vikaslk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-vikaslk","updated":"20240201213662"},"Children":[{"ID":"20240201213663-5h25jvz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-5h25jvz","updated":"20240201213663"},"Children":[{"ID":"20240201213664-ncv9tz5","Type":"NodeParagraph","Properties":{"id":"20240201213664-ncv9tz5","updated":"20240201213664"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MEET"},{"Type":"NodeText","Data":"：在 Redis Cluster 中的某个 Redis 节点上执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CLUSTER MEET ip port"},{"Type":"NodeText","Data":" 命令，可以向指定的 Redis 节点发送一条 MEET 信息，用于将其添加进 Redis Cluster 成为新的 Redis 节点。"}]}]},{"ID":"20240201213665-2w6b342","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-2w6b342","updated":"20240201213665"},"Children":[{"ID":"20240201213666-v501qd8","Type":"NodeParagraph","Properties":{"id":"20240201213666-v501qd8","updated":"20240201213666"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"PING/PONG"},{"Type":"NodeText","Data":"：Redis Cluster 中的节点都会定时地向其他节点发送 PING 消息，来交换各个节点状态信息，检查各个节点状态，包括在线状态、疑似下线状态 PFAIL 和已下线状态 FAIL。"}]}]},{"ID":"20240201213667-pgiijnn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-pgiijnn","updated":"20240201213667"},"Children":[{"ID":"20240201213668-a8ii5f2","Type":"NodeParagraph","Properties":{"id":"20240201213668-a8ii5f2","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"FAIL"},{"Type":"NodeText","Data":"：Redis Cluster 中的节点 A 发现 B 节点 PFAIL ，并且在下线报告的有效期限内集群中半数以上的节点将 B 节点标记为 PFAIL，节点 A 就会向集群广播一条 FAIL 消息，通知其他节点将故障节点 B 标记为 FAIL 。"}]}]},{"ID":"20240201213669-zdiofwd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-zdiofwd","updated":"20240201213669"},"Children":[{"ID":"20240201213670-vz7y732","Type":"NodeParagraph","Properties":{"id":"20240201213670-vz7y732","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213671-rbgtb0b","Type":"NodeParagraph","Properties":{"id":"20240201213671-rbgtb0b","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"下图就是主从架构的 Redis Cluster 的示意图，图中的虚线代表的就是各个节点之间使用 Gossip 进行通信 ，实线表示主从复制。"}]},{"ID":"20240201213672-ylyr1kf","Type":"NodeParagraph","Properties":{"id":"20240201213672-ylyr1kf","updated":"20240201213672"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/redis-cluster-gossip-20240201213826-v0glvf7.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213673-axskyfb","Type":"NodeParagraph","Properties":{"id":"20240201213673-axskyfb","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"有了 Redis Cluster 之后，不需要专门部署 Sentinel 集群服务了。Redis Cluster 相当于是内置了 Sentinel 机制，Redis Cluster 内部的各个 Redis 节点通过 Gossip 协议互相探测健康状态，在故障时可以自动切换。"}]},{"ID":"20240201213674-5ul7wx5","Type":"NodeParagraph","Properties":{"id":"20240201213674-5ul7wx5","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"关于 Redis Cluster 的详细介绍，可以查看这篇文章 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/redis/redis-cluster.html","TextMarkTextContent":"Redis 集群详解(付费)"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213675-kffip54","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213675-kffip54","updated":"20240201213675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Gossip 协议消息传播模式"}]},{"ID":"20240201213676-5qyrfi8","Type":"NodeParagraph","Properties":{"id":"20240201213676-5qyrfi8","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"Gossip 设计了两种可能的消息传播模式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"反熵（Anti-Entropy）"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"传谣（Rumor-Mongering）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213677-ub65ngm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213677-ub65ngm","updated":"20240201213677"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"反熵(Anti-entropy)"}]},{"ID":"20240201213678-h4oabr6","Type":"NodeParagraph","Properties":{"id":"20240201213678-h4oabr6","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"根据维基百科："}]},{"ID":"20240201213679-8gb2bht","Type":"NodeBlockquote","Properties":{"id":"20240201213679-8gb2bht","updated":"20240201213679"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213680-t4yfzuu","Type":"NodeParagraph","Properties":{"id":"20240201213680-t4yfzuu","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"熵的概念最早起源于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/物理学","TextMarkTextContent":"物理学"},{"Type":"NodeText","Data":"，用于度量一个热力学系统的混乱程度。熵最好理解为不确定性的量度而不是确定性的量度，因为越随机的信源的熵越大。"}]}]},{"ID":"20240201213681-dbgm465","Type":"NodeParagraph","Properties":{"id":"20240201213681-dbgm465","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"在这里，你可以把反熵中的熵理解为节点之间数据的混乱程度/差异性，反熵就是指消除不同节点中数据的差异，提升节点间数据的相似度，从而降低熵值。"}]},{"ID":"20240201213682-jg6ui9c","Type":"NodeParagraph","Properties":{"id":"20240201213682-jg6ui9c","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"具体是如何反熵的呢？集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据来消除两者之间的差异，实现数据的最终一致性。"}]},{"ID":"20240201213683-qax37ty","Type":"NodeParagraph","Properties":{"id":"20240201213683-qax37ty","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"在实现反熵的时候，主要有推、拉和推拉三种方式："}]},{"ID":"20240201213684-82yyair","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213684-82yyair","updated":"20240201213684"},"Children":[{"ID":"20240201213685-zlp8eq0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213685-zlp8eq0","updated":"20240201213685"},"Children":[{"ID":"20240201213686-gt8npn4","Type":"NodeParagraph","Properties":{"id":"20240201213686-gt8npn4","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"推方式，就是将自己的所有副本数据，推给对方，修复对方副本中的熵。"}]}]},{"ID":"20240201213687-mwc2fyc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213687-mwc2fyc","updated":"20240201213687"},"Children":[{"ID":"20240201213688-ir4tkgj","Type":"NodeParagraph","Properties":{"id":"20240201213688-ir4tkgj","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"拉方式，就是拉取对方的所有副本数据，修复自己副本中的熵。"}]}]},{"ID":"20240201213689-kuq8raw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213689-kuq8raw","updated":"20240201213689"},"Children":[{"ID":"20240201213690-fpnvhot","Type":"NodeParagraph","Properties":{"id":"20240201213690-fpnvhot","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"推拉就是同时修复自己副本和对方副本中的熵。"}]}]}]},{"ID":"20240201213691-jd07pie","Type":"NodeParagraph","Properties":{"id":"20240201213691-jd07pie","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"伪代码如下："}]},{"ID":"20240201213692-y7m2q94","Type":"NodeParagraph","Properties":{"id":"20240201213692-y7m2q94","updated":"20240201213692"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"反熵伪代码","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/protocol/up-df16e98bf71e872a7e1f01ca31cee93d77b.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213693-onh1itb","Type":"NodeParagraph","Properties":{"id":"20240201213693-onh1itb","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"在我们实际应用场景中，一般不会采用随机的节点进行反熵，而是需要可以的设计一个闭环。这样的话，我们能够在一个确定的时间范围内实现各个节点数据的最终一致性，而不是基于随机的概率。像 InfluxDB 就是这样来实现反熵的。"}]},{"ID":"20240201213694-f6wzm1p","Type":"NodeParagraph","Properties":{"id":"20240201213694-f6wzm1p","updated":"20240201213694"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/反熵-闭环-20240201213826-sc1yhhb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213695-cxce555","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213695-cxce555","updated":"20240201213695"},"Children":[{"ID":"20240201213696-6n18h0c","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213696-6n18h0c","updated":"20240201213696"},"Children":[{"ID":"20240201213697-ehrd3l7","Type":"NodeParagraph","Properties":{"id":"20240201213697-ehrd3l7","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"节点 A 推送数据给节点 B，节点 B 获取到节点 A 中的最新数据。"}]}]},{"ID":"20240201213698-bwip1t1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213698-bwip1t1","updated":"20240201213698"},"Children":[{"ID":"20240201213699-g2uuc9f","Type":"NodeParagraph","Properties":{"id":"20240201213699-g2uuc9f","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"节点 B 推送数据给 C，节点 C 获取到节点 A，B 中的最新数据。"}]}]},{"ID":"20240201213700-eqrxhkv","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213700-eqrxhkv","updated":"20240201213700"},"Children":[{"ID":"20240201213701-sxz7p4i","Type":"NodeParagraph","Properties":{"id":"20240201213701-sxz7p4i","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"节点 C 推送数据给 A，节点 A 获取到节点 B，C 中的最新数据。"}]}]},{"ID":"20240201213702-c5nutbg","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213702-c5nutbg","updated":"20240201213702"},"Children":[{"ID":"20240201213703-13ejafk","Type":"NodeParagraph","Properties":{"id":"20240201213703-13ejafk","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"节点 A 再推送数据给 B 形成闭环，这样节点 B 就获取到节点 C 中的最新数据。"}]}]}]},{"ID":"20240201213704-3z9t0vt","Type":"NodeParagraph","Properties":{"id":"20240201213704-3z9t0vt","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"虽然反熵很简单实用，但是，节点过多或者节点动态变化的话，反熵就不太适用了。这个时候，我们想要实现最终一致性就要靠 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"谣言传播(Rumor mongering)"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213705-v7enqiu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213705-v7enqiu","updated":"20240201213705"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"谣言传播(Rumor mongering)"}]},{"ID":"20240201213706-91imvg8","Type":"NodeParagraph","Properties":{"id":"20240201213706-91imvg8","updated":"20240201213706"},"Children":[{"Type":"NodeText","Data":"谣言传播指的是分布式系统中的一个节点一旦有了新数据之后，就会变为活跃节点，活跃节点会周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据。"}]},{"ID":"20240201213707-sc2ab9o","Type":"NodeParagraph","Properties":{"id":"20240201213707-sc2ab9o","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"如下图所示（下图来自于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://managementfromscratch.wordpress.com/2016/04/01/introduction-to-gossip/","TextMarkTextContent":"INTRODUCTION TO GOSSIP"},{"Type":"NodeText","Data":" 这篇文章）："}]},{"ID":"20240201213708-sgwn45a","Type":"NodeParagraph","Properties":{"id":"20240201213708-sgwn45a","updated":"20240201213708"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Gossip 传播示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/gossip-rumor- mongering-20240201213826-iwixcb4.gif","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213709-o2xhklq","Type":"NodeParagraph","Properties":{"id":"20240201213709-o2xhklq","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"伪代码如下："}]},{"ID":"20240201213710-dtghe9a","Type":"NodeParagraph","Properties":{"id":"20240201213710-dtghe9a","updated":"20240201213710"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/csdn/20210605170707933.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213711-2ed7s6s","Type":"NodeParagraph","Properties":{"id":"20240201213711-2ed7s6s","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"谣言传播比较适合节点数量比较多的情况，不过，这种模式下要尽量避免传播的信息包不能太大，避免网络消耗太大。"}]},{"ID":"20240201213712-ctchxxl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213712-ctchxxl","updated":"20240201213712"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213713-kju9pef","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213713-kju9pef","updated":"20240201213713"},"Children":[{"ID":"20240201213714-jf7ycdr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213714-jf7ycdr","updated":"20240201213714"},"Children":[{"ID":"20240201213715-1t7r92i","Type":"NodeParagraph","Properties":{"id":"20240201213715-1t7r92i","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"反熵（Anti-Entropy）会传播节点的所有数据，而谣言传播（Rumor-Mongering）只会传播节点新增的数据。"}]}]},{"ID":"20240201213716-q60wzai","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213716-q60wzai","updated":"20240201213716"},"Children":[{"ID":"20240201213717-ndxdwcc","Type":"NodeParagraph","Properties":{"id":"20240201213717-ndxdwcc","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"我们一般会给反熵设计一个闭环。"}]}]},{"ID":"20240201213718-uswnpgv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-uswnpgv","updated":"20240201213718"},"Children":[{"ID":"20240201213719-19lng3g","Type":"NodeParagraph","Properties":{"id":"20240201213719-19lng3g","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"谣言传播（Rumor-Mongering）比较适合节点数量比较多或者节点动态变化的场景。"}]}]}]},{"ID":"20240201213720-2fy3yuw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213720-2fy3yuw","updated":"20240201213720"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Gossip 协议优势和缺陷"}]},{"ID":"20240201213721-haokqtb","Type":"NodeParagraph","Properties":{"id":"20240201213721-haokqtb","updated":"20240201213721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优势："}]},{"ID":"20240201213722-g7mykp6","Type":"NodeParagraph","Properties":{"id":"20240201213722-g7mykp6","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"1、相比于其他分布式协议/算法来说，Gossip 协议理解起来非常简单。"}]},{"ID":"20240201213723-uiq2n9n","Type":"NodeParagraph","Properties":{"id":"20240201213723-uiq2n9n","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"2、能够容忍网络上节点的随意地增加或者减少，宕机或者重启，因为 Gossip 协议下这些节点都是平等的，去中心化的。新增加或者重启的节点在理想情况下最终是一定会和其他节点的状态达到一致。"}]},{"ID":"20240201213724-qibqjun","Type":"NodeParagraph","Properties":{"id":"20240201213724-qibqjun","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"3、速度相对较快。节点数量比较多的情况下，扩散速度比一个主节点向其他节点传播信息要更快（多播）。"}]},{"ID":"20240201213725-8a61o9f","Type":"NodeParagraph","Properties":{"id":"20240201213725-8a61o9f","updated":"20240201213725"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺陷"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213726-a873zjz","Type":"NodeParagraph","Properties":{"id":"20240201213726-a873zjz","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"1、消息需要通过多个传播的轮次才能传播到整个网络中，因此，必然会出现各节点状态不一致的情况。毕竟，Gossip 协议强调的是最终一致，至于达到各个节点的状态一致需要多长时间，谁也无从得知。"}]},{"ID":"20240201213727-nzs86ab","Type":"NodeParagraph","Properties":{"id":"20240201213727-nzs86ab","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"2、由于拜占庭将军问题，不允许存在恶意节点。"}]},{"ID":"20240201213728-qwmf0tg","Type":"NodeParagraph","Properties":{"id":"20240201213728-qwmf0tg","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"3、可能会出现消息冗余的问题。由于消息传播的随机性，同一个节点可能会重复收到相同的消息。"}]},{"ID":"20240201213729-qtodoie","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213729-qtodoie","updated":"20240201213729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213730-qh0v4y1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213730-qh0v4y1","updated":"20240201213730"},"Children":[{"ID":"20240201213731-l3pwxjm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213731-l3pwxjm","updated":"20240201213731"},"Children":[{"ID":"20240201213732-sru4w7i","Type":"NodeParagraph","Properties":{"id":"20240201213732-sru4w7i","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"Gossip 协议是一种允许在分布式系统中共享状态的通信协议，通过这种通信协议，我们可以将信息传播给网络或集群中的所有成员。"}]}]},{"ID":"20240201213733-uwr1go8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-uwr1go8","updated":"20240201213733"},"Children":[{"ID":"20240201213734-nyfh32m","Type":"NodeParagraph","Properties":{"id":"20240201213734-nyfh32m","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"Gossip 协议被 Redis、Apache Cassandra、Consul 等项目应用。"}]}]},{"ID":"20240201213735-j0lipwu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213735-j0lipwu","updated":"20240201213735"},"Children":[{"ID":"20240201213736-nyt6eta","Type":"NodeParagraph","Properties":{"id":"20240201213736-nyt6eta","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"谣言传播（Rumor-Mongering）比较适合节点数量比较多或者节点动态变化的场景。"}]}]}]},{"ID":"20240201213737-gqy4su9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213737-gqy4su9","updated":"20240201213737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213738-lxetvjs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-lxetvjs","updated":"20240201213738"},"Children":[{"ID":"20240201213739-cq01rd8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-cq01rd8","updated":"20240201213739"},"Children":[{"ID":"20240201213740-porr8kh","Type":"NodeParagraph","Properties":{"id":"20240201213740-porr8kh","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"一万字详解 Redis Cluster Gossip 协议："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000038373546","TextMarkTextContent":"https://segmentfault.com/a/1190000038373546"}]}]},{"ID":"20240201213741-135gyp8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-135gyp8","updated":"20240201213741"},"Children":[{"ID":"20240201213742-tnl7myy","Type":"NodeParagraph","Properties":{"id":"20240201213742-tnl7myy","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"《分布式协议与算法实战》"}]}]},{"ID":"20240201213743-5uq84x7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-5uq84x7","updated":"20240201213743"},"Children":[{"ID":"20240201213744-zcob6ib","Type":"NodeParagraph","Properties":{"id":"20240201213744-zcob6ib","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"《Redis 设计与实现》"}]}]}]},{"ID":"20240201213745-imqdgim","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-imqdgim","updated":"20240201213745"}}]}