{"ID":"20240201213628-0p78h53","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213628-0p78h53","title":"cap-and-base-theorem","updated":"20240201213628"},"Children":[{"ID":"20240201213629-ga3eqck","Type":"NodeThematicBreak","Properties":{"id":"20240201213629-ga3eqck","updated":"20240201213629"}},{"ID":"20240201213630-jnkcy41","Type":"NodeParagraph","Properties":{"id":"20240201213630-jnkcy41","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"title: CAP \u0026 BASE理论详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213631-urgk23d","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-urgk23d","updated":"20240201213631"},"Children":[{"ID":"20240201213632-1ydw264","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213632-1ydw264","updated":"20240201213632"},"Children":[{"ID":"20240201213633-jexbbtk","Type":"NodeParagraph","Properties":{"id":"20240201213633-jexbbtk","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"分布式理论"}]}]}]},{"ID":"20240201213634-91kzxwu","Type":"NodeThematicBreak","Properties":{"id":"20240201213634-91kzxwu","updated":"20240201213634"}},{"ID":"20240201213635-416wrwb","Type":"NodeParagraph","Properties":{"id":"20240201213635-416wrwb","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"经历过技术面试的小伙伴想必对 CAP \u0026 BASE 这个两个理论已经再熟悉不过了！"}]},{"ID":"20240201213636-0s8h0a8","Type":"NodeParagraph","Properties":{"id":"20240201213636-0s8h0a8","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"我当年参加面试的时候，不夸张地说，只要问到分布式相关的内容，面试官几乎是必定会问这两个分布式相关的理论。一是因为这两个分布式基础理论是学习分布式知识的必备前置基础，二是因为很多面试官自己比较熟悉这两个理论（方便提问）。"}]},{"ID":"20240201213637-29kjde7","Type":"NodeParagraph","Properties":{"id":"20240201213637-29kjde7","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"我们非常有必要将这两个理论搞懂，并且能够用自己的理解给别人讲出来。"}]},{"ID":"20240201213638-bww3g27","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213638-bww3g27","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"CAP 理论"}]},{"ID":"20240201213639-zysjx31","Type":"NodeParagraph","Properties":{"id":"20240201213639-zysjx31","updated":"20240201213639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86","TextMarkTextContent":"CAP 理论/定理"},{"Type":"NodeText","Data":"起源于 2000 年，由加州大学伯克利分校的 Eric Brewer 教授在分布式计算原理研讨会（PODC）上提出，因此 CAP 定理又被称作 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"布鲁尔定理（Brewer’s theorem）"}]},{"ID":"20240201213640-wi4ap0q","Type":"NodeParagraph","Properties":{"id":"20240201213640-wi4ap0q","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"2 年后，麻省理工学院的 Seth Gilbert 和 Nancy Lynch 发表了布鲁尔猜想的证明，CAP 理论正式成为分布式领域的定理。"}]},{"ID":"20240201213641-a2u2fv6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213641-a2u2fv6","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"简介"}]},{"ID":"20240201213642-jge2cap","Type":"NodeParagraph","Properties":{"id":"20240201213642-jge2cap","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CAP"},{"Type":"NodeText","Data":" 也就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Consistency（一致性）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Availability（可用性）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Partition Tolerance（分区容错性）"},{"Type":"NodeText","Data":" 这三个单词首字母组合。"}]},{"ID":"20240201213643-8r57cg7","Type":"NodeParagraph","Properties":{"id":"20240201213643-8r57cg7","updated":"20240201213643"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/2020-11/cap.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213644-7yv9b3x","Type":"NodeParagraph","Properties":{"id":"20240201213644-7yv9b3x","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"CAP 理论的提出者布鲁尔在提出 CAP 猜想的时候，并没有详细定义 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Consistency"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Availability"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Partition Tolerance"},{"Type":"NodeText","Data":" 三个单词的明确定义。"}]},{"ID":"20240201213645-8tffvz3","Type":"NodeParagraph","Properties":{"id":"20240201213645-8tffvz3","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"因此，对于 CAP 的民间解读有很多，一般比较被大家推荐的是下面 👇 这种版本的解读。"}]},{"ID":"20240201213646-wnwcsvr","Type":"NodeParagraph","Properties":{"id":"20240201213646-wnwcsvr","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个："}]},{"ID":"20240201213647-vvnowag","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-vvnowag","updated":"20240201213647"},"Children":[{"ID":"20240201213648-3yx2eld","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-3yx2eld","updated":"20240201213648"},"Children":[{"ID":"20240201213649-t079vrz","Type":"NodeParagraph","Properties":{"id":"20240201213649-t079vrz","updated":"20240201213649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性（Consistency）"},{"Type":"NodeText","Data":" : 所有节点访问同一份最新的数据副本"}]}]},{"ID":"20240201213650-6nbmv92","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-6nbmv92","updated":"20240201213650"},"Children":[{"ID":"20240201213651-5512haa","Type":"NodeParagraph","Properties":{"id":"20240201213651-5512haa","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可用性（Availability）"},{"Type":"NodeText","Data":": 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。"}]}]},{"ID":"20240201213652-ifu2mtt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-ifu2mtt","updated":"20240201213652"},"Children":[{"ID":"20240201213653-rcieo7e","Type":"NodeParagraph","Properties":{"id":"20240201213653-rcieo7e","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分区容错性（Partition Tolerance）"},{"Type":"NodeText","Data":" : 分布式系统出现网络分区的时候，仍然能够对外提供服务。"}]}]}]},{"ID":"20240201213654-n1ot39h","Type":"NodeParagraph","Properties":{"id":"20240201213654-n1ot39h","updated":"20240201213654"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是网络分区？"}]},{"ID":"20240201213655-lgk59p8","Type":"NodeParagraph","Properties":{"id":"20240201213655-lgk59p8","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"分布式系统中，多个节点之间的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"网络分区"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213656-6giyt6j","Type":"NodeParagraph","Properties":{"id":"20240201213656-6giyt6j","updated":"20240201213656"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"partition-tolerance","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/2020-11/partition-tolerance.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213657-1ft8wzm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213657-1ft8wzm","updated":"20240201213657"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"不是所谓的“3 选 2”"}]},{"ID":"20240201213658-h8d3s0y","Type":"NodeParagraph","Properties":{"id":"20240201213658-h8d3s0y","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。"}]},{"ID":"20240201213659-n6tndpc","Type":"NodeBlockquote","Properties":{"id":"20240201213659-n6tndpc","updated":"20240201213659"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213660-qugrqfm","Type":"NodeParagraph","Properties":{"id":"20240201213660-qugrqfm","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。"}]},{"ID":"20240201213661-36tfsd4","Type":"NodeParagraph","Properties":{"id":"20240201213661-36tfsd4","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。"}]}]},{"ID":"20240201213662-wnx6amn","Type":"NodeParagraph","Properties":{"id":"20240201213662-wnx6amn","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。"},{"Type":"NodeText","Data":" 比如 ZooKeeper、HBase 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。"}]},{"ID":"20240201213663-wtd5p2k","Type":"NodeParagraph","Properties":{"id":"20240201213663-wtd5p2k","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为啥不可能选择 CA 架构呢？"},{"Type":"NodeText","Data":" 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。"}]},{"ID":"20240201213664-n4fshd7","Type":"NodeParagraph","Properties":{"id":"20240201213664-n4fshd7","updated":"20240201213664"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。"}]},{"ID":"20240201213665-l3zlo4l","Type":"NodeParagraph","Properties":{"id":"20240201213665-l3zlo4l","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"另外，需要补充说明的一点是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。"}]},{"ID":"20240201213666-nhmro9q","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213666-nhmro9q","updated":"20240201213666"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CAP 实际应用案例"}]},{"ID":"20240201213667-csyu2wn","Type":"NodeParagraph","Properties":{"id":"20240201213667-csyu2wn","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"我这里以注册中心来探讨一下 CAP 的实际应用。考虑到很多小伙伴不知道注册中心是干嘛的，这里简单以 Dubbo 为例说一说。"}]},{"ID":"20240201213668-3dfy28r","Type":"NodeParagraph","Properties":{"id":"20240201213668-3dfy28r","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"下图是 Dubbo 的架构图。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注册中心 Registry 在其中扮演了什么角色呢？提供了什么服务呢？"}]},{"ID":"20240201213669-0cung6n","Type":"NodeParagraph","Properties":{"id":"20240201213669-0cung6n","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。"}]},{"ID":"20240201213670-fizd02k","Type":"NodeParagraph","Properties":{"id":"20240201213670-fizd02k","updated":"20240201213670"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/2020-11/dubbo-architecture.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213671-vjhhk5o","Type":"NodeParagraph","Properties":{"id":"20240201213671-vjhhk5o","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"常见的可以作为注册中心的组件有：ZooKeeper、Eureka、Nacos...。"}]},{"ID":"20240201213672-95wr6xd","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213672-95wr6xd","updated":"20240201213672"},"Children":[{"ID":"20240201213673-0xjofqz","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213673-0xjofqz","updated":"20240201213673"},"Children":[{"ID":"20240201213674-2dqnxbb","Type":"NodeParagraph","Properties":{"id":"20240201213674-2dqnxbb","updated":"20240201213674"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ZooKeeper 保证的是 CP。"},{"Type":"NodeText","Data":" 任何时刻对 ZooKeeper 的读请求都能得到一致性的结果，但是， ZooKeeper 不保证每次请求的可用性比如在 Leader 选举过程中或者半数以上的机器不可用的时候服务就是不可用的。"}]}]},{"ID":"20240201213675-60cd9rw","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213675-60cd9rw","updated":"20240201213675"},"Children":[{"ID":"20240201213676-hp9bfor","Type":"NodeParagraph","Properties":{"id":"20240201213676-hp9bfor","updated":"20240201213676"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Eureka 保证的则是 AP。"},{"Type":"NodeText","Data":" Eureka 在设计的时候就是优先保证 A （可用性）。在 Eureka 中不存在什么 Leader 节点，每个节点都是一样的、平等的。因此 Eureka 不会像 ZooKeeper 那样出现选举过程中或者半数以上的机器不可用的时候服务就是不可用的情况。 Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了。只不过这个节点上的数据可能并不是最新的。"}]}]},{"ID":"20240201213677-9uererk","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213677-9uererk","updated":"20240201213677"},"Children":[{"ID":"20240201213678-gtew9iy","Type":"NodeParagraph","Properties":{"id":"20240201213678-gtew9iy","updated":"20240201213678"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Nacos 不仅支持 CP 也支持 AP。"}]}]}]},{"ID":"20240201213679-0f5wn4f","Type":"NodeParagraph","Properties":{"id":"20240201213679-0f5wn4f","updated":"20240201213679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1906","TextMarkTextContent":"issue#1906"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213680-p1zkrfj","Type":"NodeParagraph","Properties":{"id":"20240201213680-p1zkrfj","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 通过可线性化（Linearizable）写入、全局 FIFO 顺序访问等机制来保障数据一致性。多节点部署的情况下， ZooKeeper 集群处于 Quorum 模式。Quorum 模式下的 ZooKeeper 集群， 是一组 ZooKeeper 服务器节点组成的集合，其中大多数节点必须同意任何变更才能被视为有效。"}]},{"ID":"20240201213681-tnxye5n","Type":"NodeParagraph","Properties":{"id":"20240201213681-tnxye5n","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"由于 Quorum 模式下的读请求不会触发各个 ZooKeeper 节点之间的数据同步，因此在某些情况下还是可能会存在读取到旧数据的情况，导致不同的客户端视图上看到的结果不同，这可能是由于网络延迟、丢包、重传等原因造成的。ZooKeeper 为了解决这个问题，提供了 Watcher 机制和版本号机制来帮助客户端检测数据的变化和版本号的变更，以保证数据的一致性。"}]},{"ID":"20240201213682-o02h1s7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213682-o02h1s7","updated":"20240201213682"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213683-0s5bdrc","Type":"NodeParagraph","Properties":{"id":"20240201213683-0s5bdrc","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"在进行分布式系统设计和开发时，我们不应该仅仅局限在 CAP 问题上，还要关注系统的扩展性、可用性等等"}]},{"ID":"20240201213684-7bmypnr","Type":"NodeParagraph","Properties":{"id":"20240201213684-7bmypnr","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"在系统发生“分区”的情况下，CAP 理论只能满足 CP 或者 AP。要注意的是，这里的前提是系统发生了“分区”"}]},{"ID":"20240201213685-wctprw5","Type":"NodeParagraph","Properties":{"id":"20240201213685-wctprw5","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"如果系统没有发生“分区”的话，节点间的网络连接通信正常的话，也就不存在 P 了。这个时候，我们就可以同时保证 C 和 A 了。"}]},{"ID":"20240201213686-t3bwozl","Type":"NodeParagraph","Properties":{"id":"20240201213686-t3bwozl","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"总结："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果系统发生“分区”，我们要考虑选择 CP 还是 AP。如果系统没有发生“分区”的话，我们要思考如何保证 CA 。"}]},{"ID":"20240201213687-kphslly","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213687-kphslly","updated":"20240201213687"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"推荐阅读"}]},{"ID":"20240201213688-qafwhhe","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213688-qafwhhe","updated":"20240201213688"},"Children":[{"ID":"20240201213689-jjp4g9y","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213689-jjp4g9y","updated":"20240201213689"},"Children":[{"ID":"20240201213690-7swql4e","Type":"NodeParagraph","Properties":{"id":"20240201213690-7swql4e","updated":"20240201213690"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://medium.com/@ravindraprasad/cap-theorem-simplified-28499a67eab4","TextMarkTextContent":"CAP 定理简化"},{"Type":"NodeText","Data":" （英文，有趣的案例）"}]}]},{"ID":"20240201213691-x60aan1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213691-x60aan1","updated":"20240201213691"},"Children":[{"ID":"20240201213692-wnmzyfm","Type":"NodeParagraph","Properties":{"id":"20240201213692-wnmzyfm","updated":"20240201213692"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/post/6844903936718012430","TextMarkTextContent":"神一样的 CAP 理论被应用在何方"},{"Type":"NodeText","Data":" （中文，列举了很多实际的例子）"}]}]},{"ID":"20240201213693-nvdsnty","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213693-nvdsnty","updated":"20240201213693"},"Children":[{"ID":"20240201213694-3ajkt08","Type":"NodeParagraph","Properties":{"id":"20240201213694-3ajkt08","updated":"20240201213694"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html","TextMarkTextContent":"请停止呼叫数据库 CP 或 AP"},{"Type":"NodeText","Data":" （英文，带给你不一样的思考）"}]}]}]},{"ID":"20240201213695-etjtebz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213695-etjtebz","updated":"20240201213695"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"BASE 理论"}]},{"ID":"20240201213696-mreh8hb","Type":"NodeParagraph","Properties":{"id":"20240201213696-mreh8hb","updated":"20240201213696"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dl.acm.org/doi/10.1145/1394127.1394128","TextMarkTextContent":"BASE 理论"},{"Type":"NodeText","Data":"起源于 2008 年， 由 eBay 的架构师 Dan Pritchett 在 ACM 上发表。"}]},{"ID":"20240201213697-4audmgz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213697-4audmgz","updated":"20240201213697"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"简介"}]},{"ID":"20240201213698-rnea3ll","Type":"NodeParagraph","Properties":{"id":"20240201213698-rnea3ll","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"BASE"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Basically Available（基本可用）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Soft-state（软状态）"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Eventually Consistent（最终一致性）"},{"Type":"NodeText","Data":" 三个短语的缩写。BASE 理论是对 CAP 中一致性 C 和可用性 A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。"}]},{"ID":"20240201213699-io0p67j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213699-io0p67j","updated":"20240201213699"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"BASE 理论的核心思想"}]},{"ID":"20240201213700-la8p0m4","Type":"NodeParagraph","Properties":{"id":"20240201213700-la8p0m4","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。"}]},{"ID":"20240201213701-nuf1qia","Type":"NodeBlockquote","Properties":{"id":"20240201213701-nuf1qia","updated":"20240201213701"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213702-xi186gr","Type":"NodeParagraph","Properties":{"id":"20240201213702-xi186gr","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"也就是牺牲数据的一致性来满足系统的高可用性，系统中一部分数据不可用或者不一致时，仍需要保持系统整体“主要可用”。"}]}]},{"ID":"20240201213703-i5lztk5","Type":"NodeParagraph","Properties":{"id":"20240201213703-i5lztk5","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。"}]},{"ID":"20240201213704-9jpnjtb","Type":"NodeParagraph","Properties":{"id":"20240201213704-9jpnjtb","updated":"20240201213704"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么这样说呢？"}]},{"ID":"20240201213705-efr7ntn","Type":"NodeParagraph","Properties":{"id":"20240201213705-efr7ntn","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"CAP 理论这节我们也说过了："}]},{"ID":"20240201213706-i0w1rh6","Type":"NodeBlockquote","Properties":{"id":"20240201213706-i0w1rh6","updated":"20240201213706"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213707-w7cetk3","Type":"NodeParagraph","Properties":{"id":"20240201213707-w7cetk3","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"如果系统没有发生“分区”的话，节点间的网络连接通信正常的话，也就不存在 P 了。这个时候，我们就可以同时保证 C 和 A 了。因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果系统发生“分区”，我们要考虑选择 CP 还是 AP。如果系统没有发生“分区”的话，我们要思考如何保证 CA 。"}]}]},{"ID":"20240201213708-8kuzxxa","Type":"NodeParagraph","Properties":{"id":"20240201213708-8kuzxxa","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"因此，AP 方案只是在系统发生分区的时候放弃一致性，而不是永远放弃一致性。在分区故障恢复后，系统应该达到最终一致性。这一点其实就是 BASE 理论延伸的地方。"}]},{"ID":"20240201213709-rwood0g","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213709-rwood0g","updated":"20240201213709"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"BASE 理论三要素"}]},{"ID":"20240201213710-ze07beo","Type":"NodeParagraph","Properties":{"id":"20240201213710-ze07beo","updated":"20240201213710"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"BASE理论三要素","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC81LzI0LzE2MzkxNDgwNmQ5ZTE1YzY?x-oss-process=image/format,png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213711-rixn39z","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213711-rixn39z","updated":"20240201213711"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"基本可用"}]},{"ID":"20240201213712-vf1e4el","Type":"NodeParagraph","Properties":{"id":"20240201213712-vf1e4el","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用。"}]},{"ID":"20240201213713-ndd55ge","Type":"NodeParagraph","Properties":{"id":"20240201213713-ndd55ge","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么叫允许损失部分可用性呢？"}]},{"ID":"20240201213714-xrjbexs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213714-xrjbexs","updated":"20240201213714"},"Children":[{"ID":"20240201213715-u3h7oa8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213715-u3h7oa8","updated":"20240201213715"},"Children":[{"ID":"20240201213716-jfvu4he","Type":"NodeParagraph","Properties":{"id":"20240201213716-jfvu4he","updated":"20240201213716"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"响应时间上的损失"},{"Type":"NodeText","Data":": 正常情况下，处理用户请求需要 0.5s 返回结果，但是由于系统出现故障，处理用户请求的时间变为 3 s。"}]}]},{"ID":"20240201213717-rwjq13v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213717-rwjq13v","updated":"20240201213717"},"Children":[{"ID":"20240201213718-75d5qv4","Type":"NodeParagraph","Properties":{"id":"20240201213718-75d5qv4","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"系统功能上的损失"},{"Type":"NodeText","Data":"：正常情况下，用户可以使用系统的全部功能，但是由于系统访问量突然剧增，系统的部分非核心功能无法使用。"}]}]}]},{"ID":"20240201213719-t47hm53","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213719-t47hm53","updated":"20240201213719"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"软状态"}]},{"ID":"20240201213720-hpzx54f","Type":"NodeParagraph","Properties":{"id":"20240201213720-hpzx54f","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"软状态指允许系统中的数据存在中间状态（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CAP 理论中的数据不一致"},{"Type":"NodeText","Data":"），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。"}]},{"ID":"20240201213721-eq531ne","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213721-eq531ne","updated":"20240201213721"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"最终一致性"}]},{"ID":"20240201213722-xvneuib","Type":"NodeParagraph","Properties":{"id":"20240201213722-xvneuib","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。"}]},{"ID":"20240201213723-6ydy4gr","Type":"NodeBlockquote","Properties":{"id":"20240201213723-6ydy4gr","updated":"20240201213723"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213724-6ldu4e7","Type":"NodeParagraph","Properties":{"id":"20240201213724-6ldu4e7","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"分布式一致性的 3 种级别："}]},{"ID":"20240201213725-vcipm4q","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213725-vcipm4q","updated":"20240201213725"},"Children":[{"ID":"20240201213726-3f5ltnn","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213726-3f5ltnn","updated":"20240201213726"},"Children":[{"ID":"20240201213727-0aa2dy7","Type":"NodeParagraph","Properties":{"id":"20240201213727-0aa2dy7","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"强一致性"},{"Type":"NodeText","Data":"：系统写入了什么，读出来的就是什么。"}]}]},{"ID":"20240201213728-jrv5sz4","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213728-jrv5sz4","updated":"20240201213728"},"Children":[{"ID":"20240201213729-r1yq12b","Type":"NodeParagraph","Properties":{"id":"20240201213729-r1yq12b","updated":"20240201213729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"弱一致性"},{"Type":"NodeText","Data":"：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。"}]}]},{"ID":"20240201213730-t4ihnlq","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213730-t4ihnlq","updated":"20240201213730"},"Children":[{"ID":"20240201213731-yn3smel","Type":"NodeParagraph","Properties":{"id":"20240201213731-yn3smel","updated":"20240201213731"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最终一致性"},{"Type":"NodeText","Data":"：弱一致性的升级版，系统会保证在一定时间内达到数据一致的状态。"}]}]}]},{"ID":"20240201213732-tgfhgwb","Type":"NodeParagraph","Properties":{"id":"20240201213732-tgfhgwb","updated":"20240201213732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。"}]}]},{"ID":"20240201213733-qc15b2a","Type":"NodeParagraph","Properties":{"id":"20240201213733-qc15b2a","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"那实现最终一致性的具体方式是什么呢? "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://gk.link/a/10rZM","TextMarkTextContent":"《分布式协议与算法实战》"},{"Type":"NodeText","Data":" 中是这样介绍："}]},{"ID":"20240201213734-77590ln","Type":"NodeBlockquote","Properties":{"id":"20240201213734-77590ln","updated":"20240201213734"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213735-pjzts0h","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213735-pjzts0h","updated":"20240201213735"},"Children":[{"ID":"20240201213736-h9vurcs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213736-h9vurcs","updated":"20240201213736"},"Children":[{"ID":"20240201213737-8fgpvgg","Type":"NodeParagraph","Properties":{"id":"20240201213737-8fgpvgg","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读时修复"},{"Type":"NodeText","Data":" : 在读取数据时，检测数据的不一致，进行修复。比如 Cassandra 的 Read Repair 实现，具体来说，在向 Cassandra 系统查询数据的时候，如果检测到不同节点的副本数据不一致，系统就自动修复数据。"}]}]},{"ID":"20240201213738-qwopnwp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-qwopnwp","updated":"20240201213738"},"Children":[{"ID":"20240201213739-mj0pjjm","Type":"NodeParagraph","Properties":{"id":"20240201213739-mj0pjjm","updated":"20240201213739"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写时修复"},{"Type":"NodeText","Data":" : 在写入数据，检测数据的不一致时，进行修复。比如 Cassandra 的 Hinted Handoff 实现。具体来说，Cassandra 集群的节点之间远程写数据的时候，如果写失败 就将数据缓存下来，然后定时重传，修复数据的不一致性。"}]}]},{"ID":"20240201213740-vzayaw2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-vzayaw2","updated":"20240201213740"},"Children":[{"ID":"20240201213741-cib8u7y","Type":"NodeParagraph","Properties":{"id":"20240201213741-cib8u7y","updated":"20240201213741"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异步修复"},{"Type":"NodeText","Data":" : 这个是最常用的方式，通过定时对账检测副本数据的一致性，并修复。"}]}]}]}]},{"ID":"20240201213742-90lv7ws","Type":"NodeParagraph","Properties":{"id":"20240201213742-90lv7ws","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"比较推荐 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写时修复"},{"Type":"NodeText","Data":"，这种方式对性能消耗比较低。"}]},{"ID":"20240201213743-h8pk9lw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213743-h8pk9lw","updated":"20240201213743"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213744-dddcz0m","Type":"NodeParagraph","Properties":{"id":"20240201213744-dddcz0m","updated":"20240201213744"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸。"}]},{"ID":"20240201213745-laf7wu3","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-laf7wu3","updated":"20240201213745"}}]}