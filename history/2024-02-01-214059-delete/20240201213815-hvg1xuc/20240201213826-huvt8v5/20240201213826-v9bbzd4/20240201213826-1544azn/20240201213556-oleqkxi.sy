{"ID":"20240201213556-oleqkxi","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213556-oleqkxi","title":"distributed-lock-implementations","updated":"20240201213556"},"Children":[{"ID":"20240201213557-aef6tf6","Type":"NodeThematicBreak","Properties":{"id":"20240201213557-aef6tf6","updated":"20240201213557"}},{"ID":"20240201213558-nwws922","Type":"NodeParagraph","Properties":{"id":"20240201213558-nwws922","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"title: 分布式锁常见实现方案总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"}]},{"ID":"20240201213559-yrkmnjo","Type":"NodeThematicBreak","Properties":{"id":"20240201213559-yrkmnjo","updated":"20240201213559"}},{"ID":"20240201213560-oupb6fy","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @small-advertisement.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213560-oupb6fy","updated":"20240201213560"}},{"ID":"20240201213561-z3ffo4k","Type":"NodeParagraph","Properties":{"id":"20240201213561-z3ffo4k","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"通常情况下，我们一般会选择基于 Redis 或者 ZooKeeper 实现分布式锁，Redis 用的要更多一点，我这里也先以 Redis 为例介绍分布式锁的实现。"}]},{"ID":"20240201213562-dwududc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213562-dwududc","updated":"20240201213562"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"基于 Redis 实现分布式锁"}]},{"ID":"20240201213563-b3kcrpu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213563-b3kcrpu","updated":"20240201213563"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何基于 Redis 实现一个最简易的分布式锁？"}]},{"ID":"20240201213564-fp8e29q","Type":"NodeParagraph","Properties":{"id":"20240201213564-fp8e29q","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"不论是本地锁还是分布式锁，核心都在于“互斥”。"}]},{"ID":"20240201213565-jvcxz0q","Type":"NodeParagraph","Properties":{"id":"20240201213565-jvcxz0q","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"在 Redis 中， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SETNX"},{"Type":"NodeText","Data":" 命令是可以帮助我们实现互斥。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SETNX"},{"Type":"NodeText","Data":" 即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SET"},{"Type":"NodeText","Data":" if "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"N"},{"Type":"NodeText","Data":"ot e"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"X"},{"Type":"NodeText","Data":"ists (对应 Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setIfAbsent"},{"Type":"NodeText","Data":" 方法)，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SETNX"},{"Type":"NodeText","Data":" 啥也不做。"}]},{"ID":"20240201213566-aai1zny","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213566-aai1zny","updated":"20240201213566"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e SETNX lockKey uniqueValue\n(integer) 1\n\u003e SETNX lockKey uniqueValue\n(integer) 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213567-mxnx49j","Type":"NodeParagraph","Properties":{"id":"20240201213567-mxnx49j","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"释放锁的话，直接通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DEL"},{"Type":"NodeText","Data":" 命令删除对应的 key 即可。"}]},{"ID":"20240201213568-1kju4ns","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213568-1kju4ns","updated":"20240201213568"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e DEL lockKey\n(integer) 1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213569-6y6pc8s","Type":"NodeParagraph","Properties":{"id":"20240201213569-6y6pc8s","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"为了防止误删到其他的锁，这里我们建议使用 Lua 脚本通过 key 对应的 value（唯一值）来判断。"}]},{"ID":"20240201213570-xo1rfrr","Type":"NodeParagraph","Properties":{"id":"20240201213570-xo1rfrr","updated":"20240201213570"},"Children":[{"Type":"NodeText","Data":"选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。"}]},{"ID":"20240201213571-gqb60yw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213571-gqb60yw","updated":"20240201213571"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 释放锁时，先比较锁对应的 value 值是否相等，避免锁的误释放\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213572-1rak987","Type":"NodeParagraph","Properties":{"id":"20240201213572-1rak987","updated":"20240201213572"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Redis 实现简易分布式锁","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-setnx.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213573-101e6qk","Type":"NodeParagraph","Properties":{"id":"20240201213573-101e6qk","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"这是一种最简易的 Redis 分布式锁实现，实现方式比较简单，性能也很高效。不过，这种方式实现分布式锁存在一些问题。就比如应用程序遇到一些问题比如释放锁的逻辑突然挂掉，可能会导致锁无法被释放，进而造成共享资源无法再被其他线程/进程访问。"}]},{"ID":"20240201213574-2ndtp4f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213574-2ndtp4f","updated":"20240201213574"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要给锁设置一个过期时间？"}]},{"ID":"20240201213575-3wqvvmo","Type":"NodeParagraph","Properties":{"id":"20240201213575-3wqvvmo","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"为了避免锁无法被释放，我们可以想到的一个解决办法就是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"给这个 key（也就是锁） 设置一个过期时间"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213576-6g2h982","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213576-6g2h982","updated":"20240201213576"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e SET lockKey uniqueValue EX 3 NX\nOK\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213577-q2s8v10","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-q2s8v10","updated":"20240201213577"},"Children":[{"ID":"20240201213578-ul3l16n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213578-ul3l16n","updated":"20240201213578"},"Children":[{"ID":"20240201213579-8cruq5n","Type":"NodeParagraph","Properties":{"id":"20240201213579-8cruq5n","updated":"20240201213579"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"lockKey"},{"Type":"NodeText","Data":"：加锁的锁名；"}]}]},{"ID":"20240201213580-6ie6luf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-6ie6luf","updated":"20240201213580"},"Children":[{"ID":"20240201213581-e0foigj","Type":"NodeParagraph","Properties":{"id":"20240201213581-e0foigj","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"uniqueValue"},{"Type":"NodeText","Data":"：能够唯一标示锁的随机字符串；"}]}]},{"ID":"20240201213582-8gh7ybf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213582-8gh7ybf","updated":"20240201213582"},"Children":[{"ID":"20240201213583-uegx284","Type":"NodeParagraph","Properties":{"id":"20240201213583-uegx284","updated":"20240201213583"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"NX"},{"Type":"NodeText","Data":"：只有当 lockKey 对应的 key 值不存在的时候才能 SET 成功；"}]}]},{"ID":"20240201213584-odrqyrx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213584-odrqyrx","updated":"20240201213584"},"Children":[{"ID":"20240201213585-ey1wnph","Type":"NodeParagraph","Properties":{"id":"20240201213585-ey1wnph","updated":"20240201213585"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"EX"},{"Type":"NodeText","Data":"：过期时间设置（秒为单位）EX 3 标示这个锁有一个 3 秒的自动过期时间。与 EX 对应的是 PX（毫秒为单位），这两个都是过期时间设置。"}]}]}]},{"ID":"20240201213586-04m8474","Type":"NodeParagraph","Properties":{"id":"20240201213586-04m8474","updated":"20240201213586"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一定要保证设置指定 key 的值和过期时间是一个原子操作！！！"},{"Type":"NodeText","Data":" 不然的话，依然可能会出现锁无法被释放的问题。"}]},{"ID":"20240201213587-g6p1ww4","Type":"NodeParagraph","Properties":{"id":"20240201213587-g6p1ww4","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"这样确实可以解决问题，不过，这种解决办法同样存在漏洞："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果操作共享资源的时间大于过期时间，就会出现锁提前过期的问题，进而导致分布式锁直接失效。如果锁的超时时间设置过长，又会影响到性能。"}]},{"ID":"20240201213588-ttqu5cs","Type":"NodeParagraph","Properties":{"id":"20240201213588-ttqu5cs","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"你或许在想："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果操作共享资源的操作还未完成，锁过期时间能够自己续期就好了！"}]},{"ID":"20240201213589-kwvue7r","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213589-kwvue7r","updated":"20240201213589"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何实现锁的优雅续期？"}]},{"ID":"20240201213590-cpbix8r","Type":"NodeParagraph","Properties":{"id":"20240201213590-cpbix8r","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"对于 Java 开发的小伙伴来说，已经有了现成的解决方案："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/redisson/redisson","TextMarkTextContent":"Redisson"},{"Type":"NodeText","Data":" 。其他语言的解决方案，可以在 Redis 官方文档中找到，地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://redis.io/topics/distlock","TextMarkTextContent":"https://redis.io/topics/distlock"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213591-txa3kvq","Type":"NodeParagraph","Properties":{"id":"20240201213591-txa3kvq","updated":"20240201213591"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Distributed locks with Redis","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/redis-distributed-lock.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213592-lndd48d","Type":"NodeParagraph","Properties":{"id":"20240201213592-lndd48d","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，不仅仅包括多种分布式锁的实现。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。"}]},{"ID":"20240201213593-z5xz2ea","Type":"NodeParagraph","Properties":{"id":"20240201213593-z5xz2ea","updated":"20240201213593"},"Children":[{"Type":"NodeText","Data":"Redisson 中的分布式锁自带自动续期机制，使用起来非常简单，原理也比较简单，其提供了一个专门用来监控和续期锁的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Watch Dog（ 看门狗）"},{"Type":"NodeText","Data":"，如果操作共享资源的线程还未执行完成的话，Watch Dog 会不断地延长锁的过期时间，进而保证锁不会因为超时而被释放。"}]},{"ID":"20240201213594-rq9ytak","Type":"NodeParagraph","Properties":{"id":"20240201213594-rq9ytak","updated":"20240201213594"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Redisson 看门狗自动续期","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-redisson-renew-expiration.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213595-2ya562l","Type":"NodeParagraph","Properties":{"id":"20240201213595-2ya562l","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"看门狗名字的由来于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getLockWatchdogTimeout()"},{"Type":"NodeText","Data":" 方法，这个方法返回的是看门狗给锁续期的过期时间，默认为 30 秒（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/redisson/redisson/releases/tag/redisson-3.17.6","TextMarkTextContent":"redisson-3.17.6"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213596-e3sdfuh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213596-e3sdfuh","updated":"20240201213596"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//默认 30秒，支持修改\nprivate long lockWatchdogTimeout = 30 * 1000;\n\npublic Config setLockWatchdogTimeout(long lockWatchdogTimeout) {\n    this.lockWatchdogTimeout = lockWatchdogTimeout;\n    return this;\n}\npublic long getLockWatchdogTimeout() {\n   return lockWatchdogTimeout;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213597-570x6vh","Type":"NodeParagraph","Properties":{"id":"20240201213597-570x6vh","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"renewExpiration()"},{"Type":"NodeText","Data":" 方法包含了看门狗的主要逻辑："}]},{"ID":"20240201213598-leoni0r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213598-leoni0r","updated":"20240201213598"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private void renewExpiration() {\n         //......\n        Timeout task = commandExecutor.getConnectionManager().newTimeout(new TimerTask() {\n            @Override\n            public void run(Timeout timeout) throws Exception {\n                //......\n                // 异步续期，基于 Lua 脚本\n                CompletionStage\u003cBoolean\u003e future = renewExpirationAsync(threadId);\n                future.whenComplete((res, e) -\u003e {\n                    if (e != null) {\n                        // 无法续期\n                        log.error(\"Can't update lock \" + getRawName() + \" expiration\", e);\n                        EXPIRATION_RENEWAL_MAP.remove(getEntryName());\n                        return;\n                    }\n\n                    if (res) {\n                        // 递归调用实现续期\n                        renewExpiration();\n                    } else {\n                        // 取消续期\n                        cancelExpirationRenewal(null);\n                    }\n                });\n            }\n         // 延迟 internalLockLeaseTime/3（默认 10s，也就是 30/3） 再调用\n        }, internalLockLeaseTime / 3, TimeUnit.MILLISECONDS);\n\n        ee.setTimeout(task);\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213599-06pevl2","Type":"NodeParagraph","Properties":{"id":"20240201213599-06pevl2","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"默认情况下，每过 10 秒，看门狗就会执行续期操作，将锁的超时时间设置为 30 秒。看门狗续期前也会先判断是否需要执行续期操作，需要才会执行续期，否则取消续期操作。"}]},{"ID":"20240201213600-3l1hjwx","Type":"NodeParagraph","Properties":{"id":"20240201213600-3l1hjwx","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"Watch Dog 通过调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"renewExpirationAsync()"},{"Type":"NodeText","Data":" 方法实现锁的异步续期："}]},{"ID":"20240201213601-7cziine","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213601-7cziine","updated":"20240201213601"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"protected CompletionStage\u003cBoolean\u003e renewExpirationAsync(long threadId) {\n    return evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,\n            // 判断是否为持锁线程，如果是就执行续期操作，就锁的过期时间设置为 30s（默认）\n            \"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \" +\n                    \"redis.call('pexpire', KEYS[1], ARGV[1]); \" +\n                    \"return 1; \" +\n                    \"end; \" +\n                    \"return 0;\",\n            Collections.singletonList(getRawName()),\n            internalLockLeaseTime, getLockName(threadId));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213602-nys7wj4","Type":"NodeParagraph","Properties":{"id":"20240201213602-nys7wj4","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"可以看出， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"renewExpirationAsync"},{"Type":"NodeText","Data":" 方法其实是调用 Lua 脚本实现的续期，这样做主要是为了保证续期操作的原子性。"}]},{"ID":"20240201213603-j0yix35","Type":"NodeParagraph","Properties":{"id":"20240201213603-j0yix35","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"我这里以 Redisson 的分布式可重入锁 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RLock"},{"Type":"NodeText","Data":" 为例来说明如何使用 Redisson 实现分布式锁："}]},{"ID":"20240201213604-uxbbjpt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213604-uxbbjpt","updated":"20240201213604"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 1.获取指定的分布式锁对象\nRLock lock = redisson.getLock(\"lock\");\n// 2.拿锁且不设置锁超时时间，具备 Watch Dog 自动续期机制\nlock.lock();\n// 3.执行业务\n...\n// 4.释放锁\nlock.unlock();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213605-weimb0e","Type":"NodeParagraph","Properties":{"id":"20240201213605-weimb0e","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"只有未指定锁超时时间，才会使用到 Watch Dog 自动续期机制。"}]},{"ID":"20240201213606-2w08ksy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213606-2w08ksy","updated":"20240201213606"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 手动给锁设置过期时间，不具备 Watch Dog 自动续期机制\nlock.lock(10, TimeUnit.SECONDS);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213607-e7thh14","Type":"NodeParagraph","Properties":{"id":"20240201213607-e7thh14","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"如果使用 Redis 来实现分布式锁的话，还是比较推荐直接基于 Redisson 来做的。"}]},{"ID":"20240201213608-wl430jv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213608-wl430jv","updated":"20240201213608"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何实现可重入锁？"}]},{"ID":"20240201213609-r7hn9tj","Type":"NodeParagraph","Properties":{"id":"20240201213609-r7hn9tj","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"所谓可重入锁指的是在一个线程中可以多次获取同一把锁，比如一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法即可重入 ，而无需重新获得锁。像 Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 都属于可重入锁。"}]},{"ID":"20240201213610-pintm7m","Type":"NodeParagraph","Properties":{"id":"20240201213610-pintm7m","updated":"20240201213610"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不可重入的分布式锁基本可以满足绝大部分业务场景了，一些特殊的场景可能会需要使用可重入的分布式锁。"}]},{"ID":"20240201213611-7cevu7b","Type":"NodeParagraph","Properties":{"id":"20240201213611-7cevu7b","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"可重入分布式锁的实现核心思路是线程在获取锁的时候判断是否为自己的锁，如果是的话，就不用再重新获取了。为此，我们可以为每个锁关联一个可重入计数器和一个占有它的线程。当可重入计数器大于 0 时，则锁被占有，需要判断占有该锁的线程和请求获取锁的线程是否为同一个。"}]},{"ID":"20240201213612-0nim33h","Type":"NodeParagraph","Properties":{"id":"20240201213612-0nim33h","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"实际项目中，我们不需要自己手动实现，推荐使用我们上面提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redisson"},{"Type":"NodeText","Data":" ，其内置了多种类型的锁比如可重入锁（Reentrant Lock）、自旋锁（Spin Lock）、公平锁（Fair Lock）、多重锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）。"}]},{"ID":"20240201213613-o11f8hx","Type":"NodeParagraph","Properties":{"id":"20240201213613-o11f8hx","updated":"20240201213613"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/redisson-readme-locks.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213614-lg58zgl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213614-lg58zgl","updated":"20240201213614"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 如何解决集群情况下分布式锁的可靠性？"}]},{"ID":"20240201213615-tmmcncs","Type":"NodeParagraph","Properties":{"id":"20240201213615-tmmcncs","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"为了避免单点故障，生产环境下的 Redis 服务通常是集群化部署的。"}]},{"ID":"20240201213616-ong9939","Type":"NodeParagraph","Properties":{"id":"20240201213616-ong9939","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"Redis 集群下，上面介绍到的分布式锁的实现会存在一些问题。由于 Redis 集群数据同步到各个节点时是异步的，如果在 Redis 主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis 主节点依然可以获取锁，所以多个应用服务就可以同时获取到锁。"}]},{"ID":"20240201213617-d94o1zy","Type":"NodeParagraph","Properties":{"id":"20240201213617-d94o1zy","updated":"20240201213617"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/redis-master-slave-distributed-lock.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213618-vvm3cl5","Type":"NodeParagraph","Properties":{"id":"20240201213618-vvm3cl5","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"针对这个问题，Redis 之父 antirez 设计了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://redis.io/topics/distlock","TextMarkTextContent":"Redlock 算法"},{"Type":"NodeText","Data":" 来解决。"}]},{"ID":"20240201213619-b5bmeay","Type":"NodeParagraph","Properties":{"id":"20240201213619-b5bmeay","updated":"20240201213619"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-redis.io-realock.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213620-8y9x5k1","Type":"NodeParagraph","Properties":{"id":"20240201213620-8y9x5k1","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"Redlock 算法的思想是让客户端向 Redis 集群中的多个独立的 Redis 实例依次请求申请加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。"}]},{"ID":"20240201213621-tcfkcbs","Type":"NodeParagraph","Properties":{"id":"20240201213621-tcfkcbs","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"即使部分 Redis 节点出现问题，只要保证 Redis 集群中有半数以上的 Redis 节点可用，分布式锁服务就是正常的。"}]},{"ID":"20240201213622-ajq9vro","Type":"NodeParagraph","Properties":{"id":"20240201213622-ajq9vro","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"Redlock 是直接操作 Redis 节点的，并不是通过 Redis 集群操作的，这样才可以避免 Redis 集群主从切换导致的锁丢失问题。"}]},{"ID":"20240201213623-m2ue0ut","Type":"NodeParagraph","Properties":{"id":"20240201213623-m2ue0ut","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"Redlock 实现比较复杂，性能比较差，发生时钟变迁的情况下还存在安全性隐患。《数据密集型应用系统设计》一书的作者 Martin Kleppmann 曾经专门发文（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html","TextMarkTextContent":"How to do distributed locking - Martin Kleppmann - 2016"},{"Type":"NodeText","Data":"）怼过 Redlock，他认为这是一个很差的分布式锁实现。感兴趣的朋友可以看看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg3NjU3NTkwMQ==\u0026mid=2247505097\u0026idx=1\u0026sn=5c03cb769c4458350f4d4a321ad51f5a\u0026source=41#wechat_redirect","TextMarkTextContent":"Redis 锁从面试连环炮聊到神仙打架"},{"Type":"NodeText","Data":"这篇文章，有详细介绍到 antirez 和 Martin Kleppmann 关于 Redlock 的激烈辩论。"}]},{"ID":"20240201213624-ff6jtyn","Type":"NodeParagraph","Properties":{"id":"20240201213624-ff6jtyn","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"实际项目中不建议使用 Redlock 算法，成本和收益不成正比。"}]},{"ID":"20240201213625-k0iinya","Type":"NodeParagraph","Properties":{"id":"20240201213625-k0iinya","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"如果不是非要实现绝对可靠的分布式锁的话，其实单机版 Redis 就完全够了，实现简单，性能也非常高。如果你必须要实现一个绝对可靠的分布式锁的话，可以基于 ZooKeeper 来做，只是性能会差一些。"}]},{"ID":"20240201213626-31jryf6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213626-31jryf6","updated":"20240201213626"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"基于 ZooKeeper 实现分布式锁"}]},{"ID":"20240201213627-pb2qlrj","Type":"NodeParagraph","Properties":{"id":"20240201213627-pb2qlrj","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"Redis 实现分布式锁性能较高，ZooKeeper 实现分布式锁可靠性更高。实际项目中，我们应该根据业务的具体需求来选择。"}]},{"ID":"20240201213628-n6id4fe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213628-n6id4fe","updated":"20240201213628"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何基于 ZooKeeper 实现分布式锁？"}]},{"ID":"20240201213629-shqrgnl","Type":"NodeParagraph","Properties":{"id":"20240201213629-shqrgnl","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 分布式锁是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时顺序节点"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Watcher（事件监听器）"},{"Type":"NodeText","Data":" 实现的。"}]},{"ID":"20240201213630-u494eki","Type":"NodeParagraph","Properties":{"id":"20240201213630-u494eki","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"获取锁："}]},{"ID":"20240201213631-tkfs0l6","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213631-tkfs0l6","updated":"20240201213631"},"Children":[{"ID":"20240201213632-fmjg63i","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213632-fmjg63i","updated":"20240201213632"},"Children":[{"ID":"20240201213633-zz9udnb","Type":"NodeParagraph","Properties":{"id":"20240201213633-zz9udnb","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"首先我们要有一个持久节点"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/locks"},{"Type":"NodeText","Data":"，客户端获取锁就是在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"locks"},{"Type":"NodeText","Data":"下创建临时顺序节点。"}]}]},{"ID":"20240201213634-xc0k535","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213634-xc0k535","updated":"20240201213634"},"Children":[{"ID":"20240201213635-g09l020","Type":"NodeParagraph","Properties":{"id":"20240201213635-g09l020","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"假设客户端 1 创建了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/locks/lock1"},{"Type":"NodeText","Data":"节点，创建成功之后，会判断 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lock1"},{"Type":"NodeText","Data":"是否是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/locks"},{"Type":"NodeText","Data":" 下最小的子节点。"}]}]},{"ID":"20240201213636-tz9km5l","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213636-tz9km5l","updated":"20240201213636"},"Children":[{"ID":"20240201213637-6qqj3ct","Type":"NodeParagraph","Properties":{"id":"20240201213637-6qqj3ct","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lock1"},{"Type":"NodeText","Data":"是最小的子节点，则获取锁成功。否则，获取锁失败。"}]}]},{"ID":"20240201213638-w3j81x9","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213638-w3j81x9","updated":"20240201213638"},"Children":[{"ID":"20240201213639-k7rgvra","Type":"NodeParagraph","Properties":{"id":"20240201213639-k7rgvra","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"如果获取锁失败，则说明有其他的客户端已经成功获取锁。客户端 1 并不会不停地循环去尝试加锁，而是在前一个节点比如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/locks/lock0"},{"Type":"NodeText","Data":"上注册一个事件监听器。这个监听器的作用是当前一个节点释放锁之后通知客户端 1（避免无效自旋），这样客户端 1 就加锁成功了。"}]}]}]},{"ID":"20240201213640-far983m","Type":"NodeParagraph","Properties":{"id":"20240201213640-far983m","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"释放锁："}]},{"ID":"20240201213641-x4w514g","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213641-x4w514g","updated":"20240201213641"},"Children":[{"ID":"20240201213642-k4cbbhx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213642-k4cbbhx","updated":"20240201213642"},"Children":[{"ID":"20240201213643-eule76e","Type":"NodeParagraph","Properties":{"id":"20240201213643-eule76e","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"成功获取锁的客户端在执行完业务流程之后，会将对应的子节点删除。"}]}]},{"ID":"20240201213644-1b2snug","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213644-1b2snug","updated":"20240201213644"},"Children":[{"ID":"20240201213645-4eggdwg","Type":"NodeParagraph","Properties":{"id":"20240201213645-4eggdwg","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"成功获取锁的客户端在出现故障之后，对应的子节点由于是临时顺序节点，也会被自动删除，避免了锁无法被释放。"}]}]},{"ID":"20240201213646-4jm6bvp","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213646-4jm6bvp","updated":"20240201213646"},"Children":[{"ID":"20240201213647-b3hp48o","Type":"NodeParagraph","Properties":{"id":"20240201213647-b3hp48o","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"我们前面说的事件监听器其实监听的就是这个子节点删除事件，子节点删除就意味着锁被释放。"}]}]}]},{"ID":"20240201213648-ctbx0dm","Type":"NodeParagraph","Properties":{"id":"20240201213648-ctbx0dm","updated":"20240201213648"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/distributed-lock-zookeeper.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213649-928x48w","Type":"NodeParagraph","Properties":{"id":"20240201213649-928x48w","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"实际项目中，推荐使用 Curator 来实现 ZooKeeper 分布式锁。Curator 是 Netflix 公司开源的一套 ZooKeeper Java 客户端框架，相比于 ZooKeeper 自带的客户端 zookeeper 来说，Curator 的封装更加完善，各种 API 都可以比较方便地使用。"}]},{"ID":"20240201213650-xfcbecr","Type":"NodeParagraph","Properties":{"id":"20240201213650-xfcbecr","updated":"20240201213650"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Curator"},{"Type":"NodeText","Data":"主要实现了下面四种锁："}]},{"ID":"20240201213651-fsq1kdi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-fsq1kdi","updated":"20240201213651"},"Children":[{"ID":"20240201213652-q4765ix","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-q4765ix","updated":"20240201213652"},"Children":[{"ID":"20240201213653-unvlos8","Type":"NodeParagraph","Properties":{"id":"20240201213653-unvlos8","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessMutex"},{"Type":"NodeText","Data":"：分布式可重入排它锁"}]}]},{"ID":"20240201213654-6pxrc3i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-6pxrc3i","updated":"20240201213654"},"Children":[{"ID":"20240201213655-x8qnrzy","Type":"NodeParagraph","Properties":{"id":"20240201213655-x8qnrzy","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessSemaphoreMutex"},{"Type":"NodeText","Data":"：分布式不可重入排它锁"}]}]},{"ID":"20240201213656-q57nk2t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-q57nk2t","updated":"20240201213656"},"Children":[{"ID":"20240201213657-ndr0u81","Type":"NodeParagraph","Properties":{"id":"20240201213657-ndr0u81","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessReadWriteLock"},{"Type":"NodeText","Data":"：分布式读写锁"}]}]},{"ID":"20240201213658-t2ir12v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-t2ir12v","updated":"20240201213658"},"Children":[{"ID":"20240201213659-pooc3r8","Type":"NodeParagraph","Properties":{"id":"20240201213659-pooc3r8","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessMultiLock"},{"Type":"NodeText","Data":"：将多个锁作为单个实体管理的容器，获取锁的时候获取所有锁，释放锁也会释放所有锁资源（忽略释放失败的锁）。"}]}]}]},{"ID":"20240201213660-lgshmk6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213660-lgshmk6","updated":"20240201213660"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CuratorFramework client = ZKUtils.getClient();\nclient.start();\n// 分布式可重入排它锁\nInterProcessLock lock1 = new InterProcessMutex(client, lockPath1);\n// 分布式不可重入排它锁\nInterProcessLock lock2 = new InterProcessSemaphoreMutex(client, lockPath2);\n// 将多个锁作为一个整体\nInterProcessMultiLock lock = new InterProcessMultiLock(Arrays.asList(lock1, lock2));\n\nif (!lock.acquire(10, TimeUnit.SECONDS)) {\n   throw new IllegalStateException(\"不能获取多锁\");\n}\nSystem.out.println(\"已获取多锁\");\nSystem.out.println(\"是否有第一个锁: \" + lock1.isAcquiredInThisProcess());\nSystem.out.println(\"是否有第二个锁: \" + lock2.isAcquiredInThisProcess());\ntry {\n    // 资源操作\n    resource.use();\n} finally {\n    System.out.println(\"释放多个锁\");\n    lock.release();\n}\nSystem.out.println(\"是否有第一个锁: \" + lock1.isAcquiredInThisProcess());\nSystem.out.println(\"是否有第二个锁: \" + lock2.isAcquiredInThisProcess());\nclient.close();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213661-t25410a","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213661-t25410a","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要用临时顺序节点？"}]},{"ID":"20240201213662-2nv6uqg","Type":"NodeParagraph","Properties":{"id":"20240201213662-2nv6uqg","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"每个数据节点在 ZooKeeper 中被称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"znode"},{"Type":"NodeText","Data":"，它是 ZooKeeper 中数据的最小单元。"}]},{"ID":"20240201213663-on5hlvw","Type":"NodeParagraph","Properties":{"id":"20240201213663-on5hlvw","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"我们通常是将 znode 分为 4 大类："}]},{"ID":"20240201213664-3fkqtil","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-3fkqtil","updated":"20240201213664"},"Children":[{"ID":"20240201213665-wdq4re9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-wdq4re9","updated":"20240201213665"},"Children":[{"ID":"20240201213666-mby2y47","Type":"NodeParagraph","Properties":{"id":"20240201213666-mby2y47","updated":"20240201213666"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久（PERSISTENT）节点"},{"Type":"NodeText","Data":"：一旦创建就一直存在即使 ZooKeeper 集群宕机，直到将其删除。"}]}]},{"ID":"20240201213667-riueaz5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-riueaz5","updated":"20240201213667"},"Children":[{"ID":"20240201213668-xcyeplr","Type":"NodeParagraph","Properties":{"id":"20240201213668-xcyeplr","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时（EPHEMERAL）节点"},{"Type":"NodeText","Data":"：临时节点的生命周期是与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"客户端会话（session）"},{"Type":"NodeText","Data":" 绑定的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"会话消失则节点消失"},{"Type":"NodeText","Data":" 。并且，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时节点只能做叶子节点"},{"Type":"NodeText","Data":" ，不能创建子节点。"}]}]},{"ID":"20240201213669-12elkln","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-12elkln","updated":"20240201213669"},"Children":[{"ID":"20240201213670-07oqvfq","Type":"NodeParagraph","Properties":{"id":"20240201213670-07oqvfq","updated":"20240201213670"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久顺序（PERSISTENT_SEQUENTIAL）节点"},{"Type":"NodeText","Data":"：除了具有持久（PERSISTENT）节点的特性之外， 子节点的名称还具有顺序性。比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/node1/app0000000001"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/node1/app0000000002"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213671-ci7yuo7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213671-ci7yuo7","updated":"20240201213671"},"Children":[{"ID":"20240201213672-rmn9ld6","Type":"NodeParagraph","Properties":{"id":"20240201213672-rmn9ld6","updated":"20240201213672"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时顺序（EPHEMERAL_SEQUENTIAL）节点"},{"Type":"NodeText","Data":"：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。"}]}]}]},{"ID":"20240201213673-qqbifai","Type":"NodeParagraph","Properties":{"id":"20240201213673-qqbifai","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"可以看出，临时节点相比持久节点，最主要的是对会话失效的情况处理不一样，临时节点会话消失则对应的节点消失。这样的话，如果客户端发生异常导致没来得及释放锁也没关系，会话失效节点自动被删除，不会发生死锁的问题。"}]},{"ID":"20240201213674-w7vou1z","Type":"NodeParagraph","Properties":{"id":"20240201213674-w7vou1z","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"使用 Redis 实现分布式锁的时候，我们是通过过期时间来避免锁无法被释放导致死锁问题的，而 ZooKeeper 直接利用临时节点的特性即可。"}]},{"ID":"20240201213675-qkkmkgo","Type":"NodeParagraph","Properties":{"id":"20240201213675-qkkmkgo","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"假设不使用顺序节点的话，所有尝试获取锁的客户端都会对持有锁的子节点加监听器。当该锁被释放之后，势必会造成所有尝试获取锁的客户端来争夺锁，这样对性能不友好。使用顺序节点之后，只需要监听前一个节点就好了，对性能更友好。"}]},{"ID":"20240201213676-rqvw0v9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213676-rqvw0v9","updated":"20240201213676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要设置对前一个节点的监听？"}]},{"ID":"20240201213677-yr66zww","Type":"NodeBlockquote","Properties":{"id":"20240201213677-yr66zww","updated":"20240201213677"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213678-0g2isj4","Type":"NodeParagraph","Properties":{"id":"20240201213678-0g2isj4","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"Watcher（事件监听器），是 ZooKeeper 中的一个很重要的特性。ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。"}]}]},{"ID":"20240201213679-ielnrth","Type":"NodeParagraph","Properties":{"id":"20240201213679-ielnrth","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"同一时间段内，可能会有很多客户端同时获取锁，但只有一个可以获取成功。如果获取锁失败，则说明有其他的客户端已经成功获取锁。获取锁失败的客户端并不会不停地循环去尝试加锁，而是在前一个节点注册一个事件监听器。"}]},{"ID":"20240201213680-0a492ld","Type":"NodeParagraph","Properties":{"id":"20240201213680-0a492ld","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"这个事件监听器的作用是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当前一个节点对应的客户端释放锁之后（也就是前一个节点被删除之后，监听的是删除事件），通知获取锁失败的客户端（唤醒等待的线程，Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"wait/notifyAll"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" ），让它尝试去获取锁，然后就成功获取锁了。"}]},{"ID":"20240201213681-k9br2a1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213681-k9br2a1","updated":"20240201213681"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何实现可重入锁？"}]},{"ID":"20240201213682-fqi6jqo","Type":"NodeParagraph","Properties":{"id":"20240201213682-fqi6jqo","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"这里以 Curator 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessMutex"},{"Type":"NodeText","Data":" 对可重入锁的实现来介绍（源码地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/curator/blob/master/curator-recipes/src/main/java/org/apache/curator/framework/recipes/locks/InterProcessMutex.java","TextMarkTextContent":"InterProcessMutex.java"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213683-0e7suqe","Type":"NodeParagraph","Properties":{"id":"20240201213683-0e7suqe","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"当我们调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessMutex#acquire"},{"Type":"NodeText","Data":"方法获取锁的时候，会调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessMutex#internalLock"},{"Type":"NodeText","Data":"方法。"}]},{"ID":"20240201213684-b2s2kn0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213684-b2s2kn0","updated":"20240201213684"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 获取可重入互斥锁，直到获取成功为止\n@Override\npublic void acquire() throws Exception {\n  if (!internalLock(-1, null)) {\n    throw new IOException(\"Lost connection while trying to acquire lock: \" + basePath);\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213685-jdax8mm","Type":"NodeParagraph","Properties":{"id":"20240201213685-jdax8mm","updated":"20240201213685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"internalLock"},{"Type":"NodeText","Data":" 方法会先获取当前请求锁的线程，然后从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"threadData"},{"Type":"NodeText","Data":"( "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConcurrentMap\u0026lt;Thread, LockData\u0026gt;"},{"Type":"NodeText","Data":" 类型)中获取当前线程对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lockData"},{"Type":"NodeText","Data":" 。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lockData"},{"Type":"NodeText","Data":" 包含锁的信息和加锁的次数，是实现可重入锁的关键。"}]},{"ID":"20240201213686-r7jgdh0","Type":"NodeParagraph","Properties":{"id":"20240201213686-r7jgdh0","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"第一次获取锁的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lockData"},{"Type":"NodeText","Data":"为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":"。获取锁成功之后，会将当前线程和对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lockData"},{"Type":"NodeText","Data":" 放到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"threadData"},{"Type":"NodeText","Data":" 中"}]},{"ID":"20240201213687-40kjobo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213687-40kjobo","updated":"20240201213687"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private boolean internalLock(long time, TimeUnit unit) throws Exception {\n  // 获取当前请求锁的线程\n  Thread currentThread = Thread.currentThread();\n  // 拿对应的 lockData\n  LockData lockData = threadData.get(currentThread);\n  // 第一次获取锁的话，lockData 为 null\n  if (lockData != null) {\n    // 当前线程获取过一次锁之后\n    // 因为当前线程的锁存在， lockCount 自增后返回，实现锁重入.\n    lockData.lockCount.incrementAndGet();\n    return true;\n  }\n  // 尝试获取锁\n  String lockPath = internals.attemptLock(time, unit, getLockNodeBytes());\n  if (lockPath != null) {\n    LockData newLockData = new LockData(currentThread, lockPath);\n     // 获取锁成功之后，将当前线程和对应的 lockData 放到 threadData 中\n    threadData.put(currentThread, newLockData);\n    return true;\n  }\n\n  return false;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213688-frwqo21","Type":"NodeParagraph","Properties":{"id":"20240201213688-frwqo21","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LockData"},{"Type":"NodeText","Data":"是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterProcessMutex"},{"Type":"NodeText","Data":"中的一个静态内部类。"}]},{"ID":"20240201213689-wsykpmx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213689-wsykpmx","updated":"20240201213689"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private final ConcurrentMap\u003cThread, LockData\u003e threadData = Maps.newConcurrentMap();\n\nprivate static class LockData\n{\n    // 当前持有锁的线程\n    final Thread owningThread;\n    // 锁对应的子节点\n    final String lockPath;\n    // 加锁的次数\n    final AtomicInteger lockCount = new AtomicInteger(1);\n\n    private LockData(Thread owningThread, String lockPath)\n    {\n      this.owningThread = owningThread;\n      this.lockPath = lockPath;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213690-31dvwe6","Type":"NodeParagraph","Properties":{"id":"20240201213690-31dvwe6","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"如果已经获取过一次锁，后面再来获取锁的话，直接就会在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"if (lockData != null)"},{"Type":"NodeText","Data":" 这里被拦下了，然后就会执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lockData.lockCount.incrementAndGet();"},{"Type":"NodeText","Data":" 将加锁次数加 1。"}]},{"ID":"20240201213691-slx2pl2","Type":"NodeParagraph","Properties":{"id":"20240201213691-slx2pl2","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"整个可重入锁的实现逻辑非常简单，直接在客户端判断当前线程有没有获取锁，有的话直接将加锁次数加 1 就可以了。"}]},{"ID":"20240201213692-3zcs81b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213692-3zcs81b","updated":"20240201213692"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213693-d4790of","Type":"NodeParagraph","Properties":{"id":"20240201213693-d4790of","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"在这篇文章中，我介绍了实现分布式锁的两种常见方式： Redis 和 ZooKeeper。至于具体选择 Redis 还是 ZooKeeper 来实现分布式锁，还是要看业务的具体需求。"}]},{"ID":"20240201213694-xveu2mp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-xveu2mp","updated":"20240201213694"},"Children":[{"ID":"20240201213695-lydc5z7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-lydc5z7","updated":"20240201213695"},"Children":[{"ID":"20240201213696-a670j3q","Type":"NodeParagraph","Properties":{"id":"20240201213696-a670j3q","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"如果对性能要求比较高的话，建议使用 Redis 实现分布式锁（优先选择 Redisson 提供的现成的分布式锁，而不是自己实现）。"}]}]},{"ID":"20240201213697-61a4dfe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213697-61a4dfe","updated":"20240201213697"},"Children":[{"ID":"20240201213698-ta895ym","Type":"NodeParagraph","Properties":{"id":"20240201213698-ta895ym","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"如果对可靠性要求比较高的话，建议使用 ZooKeeper 实现分布式锁（推荐基于 Curator 框架实现）。不过，现在很多项目都不会用到 ZooKeeper，如果单纯是因为分布式锁而引入 ZooKeeper 的话，那是不太可取的，不建议这样做，为了一个小小的功能增加了系统的复杂度。"}]}]}]},{"ID":"20240201213699-98lbted","Type":"NodeParagraph","Properties":{"id":"20240201213699-98lbted","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"最后，再分享两篇我觉得写的还不错的文章："}]},{"ID":"20240201213700-lo4c5cx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-lo4c5cx","updated":"20240201213700"},"Children":[{"ID":"20240201213701-y2lc6ps","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213701-y2lc6ps","updated":"20240201213701"},"Children":[{"ID":"20240201213702-h5zkj9p","Type":"NodeParagraph","Properties":{"id":"20240201213702-h5zkj9p","updated":"20240201213702"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/JzCHpIOiFVmBoAko58ZuGw","TextMarkTextContent":"分布式锁实现原理与最佳实践 - 阿里云开发者"}]}]},{"ID":"20240201213703-pe0jt21","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-pe0jt21","updated":"20240201213703"},"Children":[{"ID":"20240201213704-6ritggv","Type":"NodeParagraph","Properties":{"id":"20240201213704-6ritggv","updated":"20240201213704"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/-N4x6EkxwAYDGdJhwvmZLw","TextMarkTextContent":"聊聊分布式锁 - 字节跳动技术团队"}]}]}]},{"ID":"20240201213705-fkhua5j","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213705-fkhua5j","updated":"20240201213705"}}]}