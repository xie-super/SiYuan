{"ID":"20240201213401-if41rhg","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213401-if41rhg","title":"zookeeper-plus","updated":"20240201213401"},"Children":[{"ID":"20240201213402-1j7pnb6","Type":"NodeThematicBreak","Properties":{"id":"20240201213402-1j7pnb6","updated":"20240201213402"}},{"ID":"20240201213403-2dv1zay","Type":"NodeParagraph","Properties":{"id":"20240201213403-2dv1zay","updated":"20240201213403"},"Children":[{"Type":"NodeText","Data":"title: ZooKeeper相关概念总结(进阶)"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213404-vhh1qgq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213404-vhh1qgq","updated":"20240201213404"},"Children":[{"ID":"20240201213405-tgr17ko","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213405-tgr17ko","updated":"20240201213405"},"Children":[{"ID":"20240201213406-k469sph","Type":"NodeParagraph","Properties":{"id":"20240201213406-k469sph","updated":"20240201213406"},"Children":[{"Type":"NodeText","Data":"ZooKeeper"}]}]}]},{"ID":"20240201213407-lzmifix","Type":"NodeThematicBreak","Properties":{"id":"20240201213407-lzmifix","updated":"20240201213407"}},{"ID":"20240201213408-dtm5lpc","Type":"NodeBlockquote","Properties":{"id":"20240201213408-dtm5lpc","updated":"20240201213408"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213409-wiz8a9k","Type":"NodeParagraph","Properties":{"id":"20240201213409-wiz8a9k","updated":"20240201213409"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/user/5c33853851882525ea106810","TextMarkTextContent":"FrancisQ"},{"Type":"NodeText","Data":" 投稿。"}]}]},{"ID":"20240201213410-uwdwpc0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213410-uwdwpc0","updated":"20240201213410"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 ZooKeeper"}]},{"ID":"20240201213411-zthqnme","Type":"NodeParagraph","Properties":{"id":"20240201213411-zthqnme","updated":"20240201213411"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Yahoo"},{"Type":"NodeText","Data":" 开发，后来捐赠给了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Apache"},{"Type":"NodeText","Data":" ，现已成为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Apache"},{"Type":"NodeText","Data":" 顶级项目。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 是一个开源的分布式应用程序协调服务器，其为分布式系统提供一致性服务。其一致性是通过基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 算法的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 协议完成的。其主要功能包括：配置维护、分布式同步、集群管理、分布式事务等。"}]},{"ID":"20240201213412-1wafsoc","Type":"NodeParagraph","Properties":{"id":"20240201213412-1wafsoc","updated":"20240201213412"},"Children":[{"Type":"NodeText","Data":"简单来说， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式协调服务框架"},{"Type":"NodeText","Data":" 。分布式？协调服务？这啥玩意？🤔🤔"}]},{"ID":"20240201213413-y6jwsze","Type":"NodeParagraph","Properties":{"id":"20240201213413-y6jwsze","updated":"20240201213413"},"Children":[{"Type":"NodeText","Data":"其实解释到分布式这个概念的时候，我发现有些同学并不是能把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式和集群"},{"Type":"NodeText","Data":" 这两个概念很好的理解透。前段时间有同学和我探讨起分布式的东西，他说分布式不就是加机器吗？一台机器不够用再加一台抗压呗。当然加机器这种说法也无可厚非，你一个分布式系统必定涉及到多个机器，但是你别忘了，计算机学科中还有一个相似的概念—— "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Cluster"},{"Type":"NodeText","Data":" ，集群不也是加机器吗？但是 集群 和 分布式 其实就是两个完全不同的概念。"}]},{"ID":"20240201213414-p1x2mlo","Type":"NodeParagraph","Properties":{"id":"20240201213414-p1x2mlo","updated":"20240201213414"},"Children":[{"Type":"NodeText","Data":"比如，我现在有一个秒杀服务，并发量太大单机系统承受不住，那我加几台服务器也 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一样"},{"Type":"NodeText","Data":" 提供秒杀服务，这个时候就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Cluster"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 集群"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213415-gu29bwt","Type":"NodeParagraph","Properties":{"id":"20240201213415-gu29bwt","updated":"20240201213415"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"cluster","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/60263e969b9e4a0f81724b1f4d5b3d58~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213416-fk9xtoa","Type":"NodeParagraph","Properties":{"id":"20240201213416-fk9xtoa","updated":"20240201213416"},"Children":[{"Type":"NodeText","Data":"但是，我现在换一种方式，我将一个秒杀服务 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拆分成多个子服务"},{"Type":"NodeText","Data":" ，比如创建订单服务，增加积分服务，扣优惠券服务等等，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"然后我将这些子服务都部署在不同的服务器上"},{"Type":"NodeText","Data":" ，这个时候就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Distributed"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 分布式"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213417-o2vxzw9","Type":"NodeParagraph","Properties":{"id":"20240201213417-o2vxzw9","updated":"20240201213417"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"distributed","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/0d42e7b4249144b3a77a0c519216ae3d~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213418-y3m7niy","Type":"NodeParagraph","Properties":{"id":"20240201213418-y3m7niy","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"而我为什么反驳同学所说的分布式就是加机器呢？因为我认为加机器更加适用于构建集群，因为它真是只有加机器。而对于分布式来说，你首先需要将业务进行拆分，然后再加机器（不仅仅是加机器那么简单），同时你还要去解决分布式带来的一系列问题。"}]},{"ID":"20240201213419-k500a2k","Type":"NodeParagraph","Properties":{"id":"20240201213419-k500a2k","updated":"20240201213419"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/e3662ca1a09c4444b07f15dbf85c6ba8~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213420-thdd2ci","Type":"NodeParagraph","Properties":{"id":"20240201213420-thdd2ci","updated":"20240201213420"},"Children":[{"Type":"NodeText","Data":"比如各个分布式组件如何协调起来，如何减少各个系统之间的耦合度，分布式事务的处理，如何去配置整个分布式系统等等。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 主要就是解决这些问题的。"}]},{"ID":"20240201213421-oivv3yo","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213421-oivv3yo","updated":"20240201213421"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"一致性问题"}]},{"ID":"20240201213422-59m6z2m","Type":"NodeParagraph","Properties":{"id":"20240201213422-59m6z2m","updated":"20240201213422"},"Children":[{"Type":"NodeText","Data":"设计一个分布式系统必定会遇到一个问题—— "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"因为分区容忍性（partition tolerance）的存在，就必定要求我们需要在系统可用性（availability）和数据一致性（consistency）中做出权衡"},{"Type":"NodeText","Data":" 。这就是著名的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CAP"},{"Type":"NodeText","Data":" 定理。"}]},{"ID":"20240201213423-7u6qx48","Type":"NodeParagraph","Properties":{"id":"20240201213423-7u6qx48","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"理解起来其实很简单，比如说把一个班级作为整个系统，而学生是系统中的一个个独立的子系统。这个时候班里的小红小明偷偷谈恋爱被班里的大嘴巴小花发现了，小花欣喜若狂告诉了周围的人，然后小红小明谈恋爱的消息在班级里传播起来了。当在消息的传播（散布）过程中，你抓到一个同学问他们的情况，如果回答你不知道，那么说明整个班级系统出现了数据不一致的问题（因为小花已经知道这个消息了）。而如果他直接不回答你，因为整个班级有消息在进行传播（为了保证一致性，需要所有人都知道才可提供服务），这个时候就出现了系统的可用性问题。"}]},{"ID":"20240201213424-7sltzjs","Type":"NodeParagraph","Properties":{"id":"20240201213424-7sltzjs","updated":"20240201213424"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/38b9ff4b193e4487afe32c9710c6d644~tplv-k3u1fbpfcp-zoom-1-20230717160254318-20230717160259975.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213425-a0cl2vp","Type":"NodeParagraph","Properties":{"id":"20240201213425-a0cl2vp","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"而上述前者就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eureka"},{"Type":"NodeText","Data":" 的处理方式，它保证了 AP（可用性），后者就是我们今天所要讲的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 的处理方式，它保证了 CP（数据一致性）。"}]},{"ID":"20240201213426-lu8r5ou","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213426-lu8r5ou","updated":"20240201213426"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"一致性协议和算法"}]},{"ID":"20240201213427-jl4so8z","Type":"NodeParagraph","Properties":{"id":"20240201213427-jl4so8z","updated":"20240201213427"},"Children":[{"Type":"NodeText","Data":"而为了解决数据一致性问题，在科学家和程序员的不断探索中，就出现了很多的一致性协议和算法。比如 2PC（两阶段提交），3PC（三阶段提交），Paxos 算法等等。"}]},{"ID":"20240201213428-rhysy3m","Type":"NodeParagraph","Properties":{"id":"20240201213428-rhysy3m","updated":"20240201213428"},"Children":[{"Type":"NodeText","Data":"这时候请你思考一个问题，同学之间如果采用传纸条的方式去传播消息，那么就会出现一个问题——我咋知道我的小纸条有没有传到我想要传递的那个人手中呢？万一被哪个小家伙给劫持篡改了呢，对吧？"}]},{"ID":"20240201213429-y9v0t48","Type":"NodeParagraph","Properties":{"id":"20240201213429-y9v0t48","updated":"20240201213429"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/8c73e264d28b4a93878f4252e4e3e43c~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213430-xwikx5s","Type":"NodeParagraph","Properties":{"id":"20240201213430-xwikx5s","updated":"20240201213430"},"Children":[{"Type":"NodeText","Data":"这个时候就引申出一个概念—— "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拜占庭将军问题"},{"Type":"NodeText","Data":" 。它意指 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在不可靠信道上试图通过消息传递的方式达到一致性是不可能的"},{"Type":"NodeText","Data":"， 所以所有的一致性算法的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"必要前提"},{"Type":"NodeText","Data":" 就是安全可靠的消息通道。"}]},{"ID":"20240201213431-3mib6uv","Type":"NodeParagraph","Properties":{"id":"20240201213431-3mib6uv","updated":"20240201213431"},"Children":[{"Type":"NodeText","Data":"而为什么要去解决数据一致性的问题？你想想，如果一个秒杀系统将服务拆分成了下订单和加积分服务，这两个服务部署在不同的机器上了，万一在消息的传播过程中积分系统宕机了，总不能你这边下了订单却没加积分吧？你总得保证两边的数据需要一致吧？"}]},{"ID":"20240201213432-hdd0euc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213432-hdd0euc","updated":"20240201213432"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2PC（两阶段提交）"}]},{"ID":"20240201213433-yf3fcpp","Type":"NodeParagraph","Properties":{"id":"20240201213433-yf3fcpp","updated":"20240201213433"},"Children":[{"Type":"NodeText","Data":"两阶段提交是一种保证分布式系统数据一致性的协议，现在很多数据库都是采用的两阶段提交协议来完成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式事务"},{"Type":"NodeText","Data":" 的处理。"}]},{"ID":"20240201213434-hm9l4ba","Type":"NodeParagraph","Properties":{"id":"20240201213434-hm9l4ba","updated":"20240201213434"},"Children":[{"Type":"NodeText","Data":"在介绍 2PC 之前，我们先来想想分布式事务到底有什么问题呢？"}]},{"ID":"20240201213435-ix53p3x","Type":"NodeParagraph","Properties":{"id":"20240201213435-ix53p3x","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"还拿秒杀系统的下订单和加积分两个系统来举例吧（我想你们可能都吐了 🤮🤮🤮），我们此时下完订单会发个消息给积分系统告诉它下面该增加积分了。如果我们仅仅是发送一个消息也不收回复，那么我们的订单系统怎么能知道积分系统的收到消息的情况呢？如果我们增加一个收回复的过程，那么当积分系统收到消息后返回给订单系统一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Response"},{"Type":"NodeText","Data":" ，但在中间出现了网络波动，那个回复消息没有发送成功，订单系统是不是以为积分系统消息接收失败了？它是不是会回滚事务？但此时积分系统是成功收到消息的，它就会去处理消息然后给用户增加积分，这个时候就会出现积分加了但是订单没下成功。"}]},{"ID":"20240201213436-3006f0k","Type":"NodeParagraph","Properties":{"id":"20240201213436-3006f0k","updated":"20240201213436"},"Children":[{"Type":"NodeText","Data":"所以我们所需要解决的是在分布式系统中，整个调用链中，我们所有服务的数据处理要么都成功要么都失败，即所有服务的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原子性问题"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213437-8lzq4ur","Type":"NodeParagraph","Properties":{"id":"20240201213437-8lzq4ur","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"在两阶段提交中，主要涉及到两个角色，分别是协调者和参与者。"}]},{"ID":"20240201213438-ubnkrbi","Type":"NodeParagraph","Properties":{"id":"20240201213438-ubnkrbi","updated":"20240201213438"},"Children":[{"Type":"NodeText","Data":"第一阶段：当要执行一个分布式事务的时候，事务发起者首先向协调者发起事务请求，然后协调者会给所有参与者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"prepare"},{"Type":"NodeText","Data":" 请求（其中包括事务内容）告诉参与者你们需要执行事务了，如果能执行我发的事务内容那么就先执行但不提交，执行后请给我回复。然后参与者收到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"prepare"},{"Type":"NodeText","Data":" 消息后，他们会开始执行事务（但不提交），并将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Undo"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Redo"},{"Type":"NodeText","Data":" 信息记入事务日志中，之后参与者就向协调者反馈是否准备好了。"}]},{"ID":"20240201213439-kxdut2r","Type":"NodeParagraph","Properties":{"id":"20240201213439-kxdut2r","updated":"20240201213439"},"Children":[{"Type":"NodeText","Data":"第二阶段：第二阶段主要是协调者根据参与者反馈的情况来决定接下来是否可以进行事务的提交操作，即提交事务或者回滚事务。"}]},{"ID":"20240201213440-3g97qg0","Type":"NodeParagraph","Properties":{"id":"20240201213440-3g97qg0","updated":"20240201213440"},"Children":[{"Type":"NodeText","Data":"比如这个时候 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"所有的参与者"},{"Type":"NodeText","Data":" 都返回了准备好了的消息，这个时候就进行事务的提交，协调者此时会给所有的参与者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Commit"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 请求"},{"Type":"NodeText","Data":" ，当参与者收到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Commit"},{"Type":"NodeText","Data":" 请求的时候会执行前面执行的事务的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提交操作"},{"Type":"NodeText","Data":" ，提交完毕之后将给协调者发送提交成功的响应。"}]},{"ID":"20240201213441-ftx6zkn","Type":"NodeParagraph","Properties":{"id":"20240201213441-ftx6zkn","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"而如果在第一阶段并不是所有参与者都返回了准备好了的消息，那么此时协调者将会给所有参与者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"回滚事务的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"rollback"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 请求"},{"Type":"NodeText","Data":"，参与者收到之后将会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"回滚它在第一阶段所做的事务处理"},{"Type":"NodeText","Data":" ，然后再将处理情况返回给协调者，最终协调者收到响应后便给事务发起者返回处理失败的结果。"}]},{"ID":"20240201213442-kodfmkq","Type":"NodeParagraph","Properties":{"id":"20240201213442-kodfmkq","updated":"20240201213442"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"2PC流程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/1a7210167f1d4d4fb97afcec19902a59~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213443-gekvrao","Type":"NodeParagraph","Properties":{"id":"20240201213443-gekvrao","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"个人觉得 2PC 实现得还是比较鸡肋的，因为事实上它只解决了各个事务的原子性问题，随之也带来了很多的问题。"}]},{"ID":"20240201213444-82rxeas","Type":"NodeParagraph","Properties":{"id":"20240201213444-82rxeas","updated":"20240201213444"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/cc534022c7184770b9b82b2d0008432a~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213445-w92u1is","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213445-w92u1is","updated":"20240201213445"},"Children":[{"ID":"20240201213446-wi3tru2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213446-wi3tru2","updated":"20240201213446"},"Children":[{"ID":"20240201213447-b1zgb8q","Type":"NodeParagraph","Properties":{"id":"20240201213447-b1zgb8q","updated":"20240201213447"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单点故障问题"},{"Type":"NodeText","Data":"，如果协调者挂了那么整个系统都处于不可用的状态了。"}]}]},{"ID":"20240201213448-jwy9o9d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213448-jwy9o9d","updated":"20240201213448"},"Children":[{"ID":"20240201213449-p693p6x","Type":"NodeParagraph","Properties":{"id":"20240201213449-p693p6x","updated":"20240201213449"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"阻塞问题"},{"Type":"NodeText","Data":"，即当协调者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"prepare"},{"Type":"NodeText","Data":" 请求，参与者收到之后如果能处理那么它将会进行事务的处理但并不提交，这个时候会一直占用着资源不释放，如果此时协调者挂了，那么这些资源都不会再释放了，这会极大影响性能。"}]}]},{"ID":"20240201213450-c03eq0h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213450-c03eq0h","updated":"20240201213450"},"Children":[{"ID":"20240201213451-pg4a5ti","Type":"NodeParagraph","Properties":{"id":"20240201213451-pg4a5ti","updated":"20240201213451"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据不一致问题"},{"Type":"NodeText","Data":"，比如当第二阶段，协调者只发送了一部分的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commit"},{"Type":"NodeText","Data":" 请求就挂了，那么也就意味着，收到消息的参与者会进行事务的提交，而后面没收到的则不会进行事务提交，那么这时候就会产生数据不一致性问题。"}]}]}]},{"ID":"20240201213452-n65l0r6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213452-n65l0r6","updated":"20240201213452"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3PC（三阶段提交）"}]},{"ID":"20240201213453-d0j8bab","Type":"NodeParagraph","Properties":{"id":"20240201213453-d0j8bab","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"因为 2PC 存在的一系列问题，比如单点，容错机制缺陷等等，从而产生了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3PC（三阶段提交）"},{"Type":"NodeText","Data":" 。那么这三阶段又分别是什么呢？"}]},{"ID":"20240201213454-rj9zdhg","Type":"NodeBlockquote","Properties":{"id":"20240201213454-rj9zdhg","updated":"20240201213454"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213455-eabfqtz","Type":"NodeParagraph","Properties":{"id":"20240201213455-eabfqtz","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"千万不要吧 PC 理解成个人电脑了，其实他们是 phase-commit 的缩写，即阶段提交。"}]}]},{"ID":"20240201213456-neeluuc","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213456-neeluuc","updated":"20240201213456"},"Children":[{"ID":"20240201213457-0pqlv9f","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213457-0pqlv9f","updated":"20240201213457"},"Children":[{"ID":"20240201213458-u7e1akd","Type":"NodeParagraph","Properties":{"id":"20240201213458-u7e1akd","updated":"20240201213458"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CanCommit 阶段"},{"Type":"NodeText","Data":"：协调者向所有参与者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CanCommit"},{"Type":"NodeText","Data":" 请求，参与者收到请求后会根据自身情况查看是否能执行事务，如果可以则返回 YES 响应并进入预备状态，否则返回 NO 。"}]}]},{"ID":"20240201213459-cvmgsqq","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213459-cvmgsqq","updated":"20240201213459"},"Children":[{"ID":"20240201213460-fe8ry2s","Type":"NodeParagraph","Properties":{"id":"20240201213460-fe8ry2s","updated":"20240201213460"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"PreCommit 阶段"},{"Type":"NodeText","Data":"：协调者根据参与者返回的响应来决定是否可以进行下面的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PreCommit"},{"Type":"NodeText","Data":" 操作。如果上面参与者返回的都是 YES，那么协调者将向所有参与者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PreCommit"},{"Type":"NodeText","Data":" 预提交请求，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"参与者收到预提交请求后，会进行事务的执行操作，并将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Undo"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Redo"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 信息写入事务日志中"},{"Type":"NodeText","Data":" ，最后如果参与者顺利执行了事务则给协调者返回成功的响应。如果在第一阶段协调者收到了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任何一个 NO"},{"Type":"NodeText","Data":" 的信息，或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在一定时间内"},{"Type":"NodeText","Data":" 并没有收到全部的参与者的响应，那么就会中断事务，它会向所有参与者发送中断请求（abort），参与者收到中断请求之后会立即中断事务，或者在一定时间内没有收到协调者的请求，它也会中断事务。"}]}]},{"ID":"20240201213461-p7cu2lb","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213461-p7cu2lb","updated":"20240201213461"},"Children":[{"ID":"20240201213462-1spv3aq","Type":"NodeParagraph","Properties":{"id":"20240201213462-1spv3aq","updated":"20240201213462"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"DoCommit 阶段"},{"Type":"NodeText","Data":"：这个阶段其实和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"2PC"},{"Type":"NodeText","Data":" 的第二阶段差不多，如果协调者收到了所有参与者在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PreCommit"},{"Type":"NodeText","Data":" 阶段的 YES 响应，那么协调者将会给所有参与者发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DoCommit"},{"Type":"NodeText","Data":" 请求，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"参与者收到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"DoCommit"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 请求后则会进行事务的提交工作"},{"Type":"NodeText","Data":"，完成后则会给协调者返回响应，协调者收到所有参与者返回的事务提交成功的响应之后则完成事务。若协调者在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PreCommit"},{"Type":"NodeText","Data":" 阶段 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"收到了任何一个 NO 或者在一定时间内没有收到所有参与者的响应"},{"Type":"NodeText","Data":" ，那么就会进行中断请求的发送，参与者收到中断请求后则会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过上面记录的回滚日志"},{"Type":"NodeText","Data":" 来进行事务的回滚操作，并向协调者反馈回滚状况，协调者收到参与者返回的消息后，中断事务。"}]}]}]},{"ID":"20240201213463-4sxwbeq","Type":"NodeParagraph","Properties":{"id":"20240201213463-4sxwbeq","updated":"20240201213463"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"3PC流程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/80854635d48c42d896dbaa066abf5c26~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213464-rpxwzzy","Type":"NodeBlockquote","Properties":{"id":"20240201213464-rpxwzzy","updated":"20240201213464"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213465-vzpwlyx","Type":"NodeParagraph","Properties":{"id":"20240201213465-vzpwlyx","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"这里是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"3PC"},{"Type":"NodeText","Data":" 在成功的环境下的流程图，你可以看到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"3PC"},{"Type":"NodeText","Data":" 在很多地方进行了超时中断的处理，比如协调者在指定时间内未收到全部的确认消息则进行事务中断的处理，这样能 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"减少同步阻塞的时间"},{"Type":"NodeText","Data":" 。还有需要注意的是，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"3PC"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"DoCommit"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 阶段参与者如未收到协调者发送的提交事务的请求，它会在一定时间内进行事务的提交"},{"Type":"NodeText","Data":"。为什么这么做呢？是因为这个时候我们肯定"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"保证了在第一阶段所有的协调者全部返回了可以执行事务的响应"},{"Type":"NodeText","Data":"，这个时候我们有理由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"相信其他系统都能进行事务的执行和提交"},{"Type":"NodeText","Data":"，所以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不管"},{"Type":"NodeText","Data":"协调者有没有发消息给参与者，进入第三阶段参与者都会进行事务的提交操作。"}]}]},{"ID":"20240201213466-0esvfdj","Type":"NodeParagraph","Properties":{"id":"20240201213466-0esvfdj","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"总之，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"3PC"},{"Type":"NodeText","Data":" 通过一系列的超时机制很好的缓解了阻塞问题，但是最重要的一致性并没有得到根本的解决，比如在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DoCommit"},{"Type":"NodeText","Data":" 阶段，当一个参与者收到了请求之后其他参与者和协调者挂了或者出现了网络分区，这个时候收到消息的参与者都会进行事务提交，这就会出现数据不一致性问题。"}]},{"ID":"20240201213467-ltbxiid","Type":"NodeParagraph","Properties":{"id":"20240201213467-ltbxiid","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"所以，要解决一致性问题还需要靠 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 算法 ⭐️ ⭐️ ⭐️ 。"}]},{"ID":"20240201213468-dv6wyxr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213468-dv6wyxr","updated":"20240201213468"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 算法"}]},{"ID":"20240201213469-e7s2jxv","Type":"NodeParagraph","Properties":{"id":"20240201213469-e7s2jxv","updated":"20240201213469"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 算法是基于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息传递且具有高度容错特性的一致性算法"},{"Type":"NodeText","Data":"，是目前公认的解决分布式一致性问题最有效的算法之一，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"其解决的问题就是在分布式系统中如何就某个值（决议）达成一致"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213470-4zgad31","Type":"NodeParagraph","Properties":{"id":"20240201213470-4zgad31","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 中主要有三个角色，分别为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer提案者"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Acceptor表决者"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Learner学习者"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 算法和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"2PC"},{"Type":"NodeText","Data":" 一样，也有两个阶段，分别为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Prepare"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":" 阶段。"}]},{"ID":"20240201213471-y4vmzvg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213471-y4vmzvg","updated":"20240201213471"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"prepare 阶段"}]},{"ID":"20240201213472-z56a28d","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213472-z56a28d","updated":"20240201213472"},"Children":[{"ID":"20240201213473-a2pj733","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213473-a2pj733","updated":"20240201213473"},"Children":[{"ID":"20240201213474-rlg4hen","Type":"NodeParagraph","Properties":{"id":"20240201213474-rlg4hen","updated":"20240201213474"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer提案者"},{"Type":"NodeText","Data":"：负责提出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"proposal"},{"Type":"NodeText","Data":"，每个提案者在提出提案时都会首先获取到一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具有全局唯一性的、递增的提案编号 N"},{"Type":"NodeText","Data":"，即在整个集群中是唯一的编号 N，然后将该编号赋予其要提出的提案，在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第一阶段是只将提案编号发送给所有的表决者"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213475-01cci2a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213475-01cci2a","updated":"20240201213475"},"Children":[{"ID":"20240201213476-q0ux4sx","Type":"NodeParagraph","Properties":{"id":"20240201213476-q0ux4sx","updated":"20240201213476"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Acceptor表决者"},{"Type":"NodeText","Data":"：每个表决者在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":" 某提案后，会将该提案编号 N 记录在本地，这样每个表决者中保存的已经被 accept 的提案中会存在一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编号最大的提案"},{"Type":"NodeText","Data":"，其编号假设为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"maxN"},{"Type":"NodeText","Data":"。每个表决者仅会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":" 编号大于自己本地 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"maxN"},{"Type":"NodeText","Data":" 的提案，在批准提案时表决者会将以前接受过的最大编号的提案作为响应反馈给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213477-gntlfxk","Type":"NodeBlockquote","Properties":{"id":"20240201213477-gntlfxk","updated":"20240201213477"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213478-dnk5a5v","Type":"NodeParagraph","Properties":{"id":"20240201213478-dnk5a5v","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"下面是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"prepare"},{"Type":"NodeText","Data":" 阶段的流程图，你可以对照着参考一下。"}]}]},{"ID":"20240201213479-iimv45t","Type":"NodeParagraph","Properties":{"id":"20240201213479-iimv45t","updated":"20240201213479"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"paxos第一阶段","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/cd1e5f78875b4ad6b54013738f570943~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213480-tmrsy89","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213480-tmrsy89","updated":"20240201213480"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"accept 阶段"}]},{"ID":"20240201213481-a3epi7c","Type":"NodeParagraph","Properties":{"id":"20240201213481-a3epi7c","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"当一个提案被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 提出后，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 收到了超过半数的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Acceptor"},{"Type":"NodeText","Data":" 的批准（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 本身同意），那么此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 会给所有的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Acceptor"},{"Type":"NodeText","Data":" 发送真正的提案（你可以理解为第一阶段为试探），这个时候 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 就会发送提案的内容和提案编号。"}]},{"ID":"20240201213482-dj45kdl","Type":"NodeParagraph","Properties":{"id":"20240201213482-dj45kdl","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"表决者收到提案请求后会再次比较本身已经批准过的最大提案编号和该提案编号，如果该提案编号 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"大于等于"},{"Type":"NodeText","Data":" 已经批准过的最大提案编号，那么就 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":" 该提案（此时执行提案内容但不提交），随后将情况返回给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 。如果不满足则不回应或者返回 NO 。"}]},{"ID":"20240201213483-sbw2178","Type":"NodeParagraph","Properties":{"id":"20240201213483-sbw2178","updated":"20240201213483"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"paxos第二阶段1","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/dad7f51d58b24a72b249278502ec04bd~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213484-ffzeuws","Type":"NodeParagraph","Properties":{"id":"20240201213484-ffzeuws","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 收到超过半数的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":" ，那么它这个时候会向所有的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" 发送提案的提交请求。需要注意的是，因为上述仅仅是超过半数的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" 批准执行了该提案内容，其他没有批准的并没有执行该提案内容，所以这个时候需要"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"向未批准的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"acceptor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 发送提案内容和提案编号并让它无条件执行和提交"},{"Type":"NodeText","Data":"，而对于前面已经批准过该提案的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" 来说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"仅仅需要发送该提案的编号"},{"Type":"NodeText","Data":" ，让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" 执行提交就行了。"}]},{"ID":"20240201213485-ibftdi4","Type":"NodeParagraph","Properties":{"id":"20240201213485-ibftdi4","updated":"20240201213485"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"paxos第二阶段2","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/9359bbabb511472e8de04d0826967996~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213486-phgp3wy","Type":"NodeParagraph","Properties":{"id":"20240201213486-phgp3wy","updated":"20240201213486"},"Children":[{"Type":"NodeText","Data":"而如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposer"},{"Type":"NodeText","Data":" 如果没有收到超过半数的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":" 那么它将会将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"递增"},{"Type":"NodeText","Data":" 该 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Proposal"},{"Type":"NodeText","Data":" 的编号，然后 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重新进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Prepare"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 阶段"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213487-xclz4hi","Type":"NodeBlockquote","Properties":{"id":"20240201213487-xclz4hi","updated":"20240201213487"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213488-ky7avem","Type":"NodeParagraph","Properties":{"id":"20240201213488-ky7avem","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"对于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Learner"},{"Type":"NodeText","Data":" 来说如何去学习 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Acceptor"},{"Type":"NodeText","Data":" 批准的提案内容，这有很多方式，读者可以自己去了解一下，这里不做过多解释。"}]}]},{"ID":"20240201213489-9vhw3s0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213489-9vhw3s0","updated":"20240201213489"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"paxos 算法的死循环问题"}]},{"ID":"20240201213490-bntbte5","Type":"NodeParagraph","Properties":{"id":"20240201213490-bntbte5","updated":"20240201213490"},"Children":[{"Type":"NodeText","Data":"其实就有点类似于两个人吵架，小明说我是对的，小红说我才是对的，两个人据理力争的谁也不让谁 🤬🤬。"}]},{"ID":"20240201213491-ux2shrd","Type":"NodeParagraph","Properties":{"id":"20240201213491-ux2shrd","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"比如说，此时提案者 P1 提出一个方案 M1，完成了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Prepare"},{"Type":"NodeText","Data":" 阶段的工作，这个时候 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" 则批准了 M1，但是此时提案者 P2 同时也提出了一个方案 M2，它也完成了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Prepare"},{"Type":"NodeText","Data":" 阶段的工作。然后 P1 的方案已经不能在第二阶段被批准了（因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" 已经批准了比 M1 更大的 M2），所以 P1 自增方案变为 M3 重新进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Prepare"},{"Type":"NodeText","Data":" 阶段，然后 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acceptor"},{"Type":"NodeText","Data":" ，又批准了新的 M3 方案，它又不能批准 M2 了，这个时候 M2 又自增进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Prepare"},{"Type":"NodeText","Data":" 阶段。。。"}]},{"ID":"20240201213492-v8gyq15","Type":"NodeParagraph","Properties":{"id":"20240201213492-v8gyq15","updated":"20240201213492"},"Children":[{"Type":"NodeText","Data":"就这样无休无止的永远提案下去，这就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"paxos"},{"Type":"NodeText","Data":" 算法的死循环问题。"}]},{"ID":"20240201213493-4z8vkt6","Type":"NodeParagraph","Properties":{"id":"20240201213493-4z8vkt6","updated":"20240201213493"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/bc3d45941abf4fca903f7f4b69405abf~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213494-qzhotxz","Type":"NodeParagraph","Properties":{"id":"20240201213494-qzhotxz","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"那么如何解决呢？很简单，人多了容易吵架，我现在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"就允许一个能提案"},{"Type":"NodeText","Data":" 就行了。"}]},{"ID":"20240201213495-g951xh1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213495-g951xh1","updated":"20240201213495"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"引出 ZAB"}]},{"ID":"20240201213496-646l6ti","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213496-646l6ti","updated":"20240201213496"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Zookeeper 架构"}]},{"ID":"20240201213497-yt931pd","Type":"NodeParagraph","Properties":{"id":"20240201213497-yt931pd","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"作为一个优秀高效且可靠的分布式协调框架，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 在解决分布式数据一致性问题时并没有直接使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" ，而是专门定制了一致性协议叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB(ZooKeeper Atomic Broadcast)"},{"Type":"NodeText","Data":" 原子广播协议，该协议能够很好地支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"崩溃恢复"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213498-0rzswyt","Type":"NodeParagraph","Properties":{"id":"20240201213498-0rzswyt","updated":"20240201213498"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Zookeeper架构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/07bf6c1e10f84fc58a2453766ca6bd18~tplv-k3u1fbpfcp-zoom-1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213499-vz6lhqp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213499-vz6lhqp","updated":"20240201213499"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZAB 中的三个角色"}]},{"ID":"20240201213500-e9akng2","Type":"NodeParagraph","Properties":{"id":"20240201213500-e9akng2","updated":"20240201213500"},"Children":[{"Type":"NodeText","Data":"和介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 一样，在介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 协议之前，我们首先来了解一下在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 中三个主要的角色，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader 领导者"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower跟随者"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Observer观察者"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213501-ok26xha","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213501-ok26xha","updated":"20240201213501"},"Children":[{"ID":"20240201213502-drzivkg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-drzivkg","updated":"20240201213502"},"Children":[{"ID":"20240201213503-rdwqfu7","Type":"NodeParagraph","Properties":{"id":"20240201213503-rdwqfu7","updated":"20240201213503"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":"：集群中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"唯一的写请求处理者"},{"Type":"NodeText","Data":" ，能够发起投票（投票也是为了进行写请求）。"}]}]},{"ID":"20240201213504-hmfilmr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-hmfilmr","updated":"20240201213504"},"Children":[{"ID":"20240201213505-ccmkkof","Type":"NodeParagraph","Properties":{"id":"20240201213505-ccmkkof","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":"：能够接收客户端的请求，如果是读请求则可以自己处理，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果是写请求则要转发给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 。在选举过程中会参与投票，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有选举权和被选举权"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213506-rkrp81k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213506-rkrp81k","updated":"20240201213506"},"Children":[{"ID":"20240201213507-xfzf6b0","Type":"NodeParagraph","Properties":{"id":"20240201213507-xfzf6b0","updated":"20240201213507"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Observer"},{"Type":"NodeText","Data":"：就是没有选举权和被选举权的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213508-z8m6e8u","Type":"NodeParagraph","Properties":{"id":"20240201213508-z8m6e8u","updated":"20240201213508"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 协议中对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zkServer"},{"Type":"NodeText","Data":"(即上面我们说的三个角色的总称) 还有两种模式的定义，分别是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息广播"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"崩溃恢复"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213509-gb5j6h1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213509-gb5j6h1","updated":"20240201213509"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息广播模式"}]},{"ID":"20240201213510-vljxy9z","Type":"NodeParagraph","Properties":{"id":"20240201213510-vljxy9z","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"说白了就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 协议是如何处理写请求的，上面我们不是说只有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 能处理写请求嘛？那么我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Observer"},{"Type":"NodeText","Data":" 是不是也需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同步更新数据"},{"Type":"NodeText","Data":" 呢？总不能数据只在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 中更新了，其他角色都没有得到更新吧？"}]},{"ID":"20240201213511-r5czlp3","Type":"NodeParagraph","Properties":{"id":"20240201213511-r5czlp3","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"不就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在整个集群中保持数据的一致性"},{"Type":"NodeText","Data":" 嘛？如果是你，你会怎么做呢？"}]},{"ID":"20240201213512-tey4nf3","Type":"NodeParagraph","Properties":{"id":"20240201213512-tey4nf3","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"废话，第一步肯定需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 将写请求 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"广播"},{"Type":"NodeText","Data":" 出去呀，让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 问问 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Followers"},{"Type":"NodeText","Data":" 是否同意更新，如果超过半数以上的同意那么就进行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Observer"},{"Type":"NodeText","Data":" 的更新（和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paxos"},{"Type":"NodeText","Data":" 一样）。当然这么说有点虚，画张图理解一下。"}]},{"ID":"20240201213513-52ry24y","Type":"NodeParagraph","Properties":{"id":"20240201213513-52ry24y","updated":"20240201213513"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"消息广播","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/b64c7f25a5d24766889da14260005e31~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213514-bzqb7zh","Type":"NodeParagraph","Properties":{"id":"20240201213514-bzqb7zh","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"嗯。。。看起来很简单，貌似懂了 🤥🤥🤥。这两个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Queue"},{"Type":"NodeText","Data":" 哪冒出来的？答案是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZAB"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 需要让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Follower"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Observer"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 保证顺序性"},{"Type":"NodeText","Data":" 。何为顺序性，比如我现在有一个写请求 A，此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 将请求 A 广播出去，因为只需要半数同意就行，所以可能这个时候有一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" F1 因为网络原因没有收到，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 又广播了一个请求 B，因为网络原因，F1 竟然先收到了请求 B 然后才收到了请求 A，这个时候请求处理的顺序不同就会导致数据的不同，从而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"产生数据不一致问题"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213515-eyj7xgd","Type":"NodeParagraph","Properties":{"id":"20240201213515-eyj7xgd","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"所以在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 这端，它为每个其他的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zkServer"},{"Type":"NodeText","Data":" 准备了一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列"},{"Type":"NodeText","Data":" ，采用先进先出的方式发送消息。由于协议是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TCP"},{"Type":"NodeText","Data":" 来进行网络通信的，保证了消息的发送顺序性，接受顺序性也得到了保证。"}]},{"ID":"20240201213516-2udvukm","Type":"NodeParagraph","Properties":{"id":"20240201213516-2udvukm","updated":"20240201213516"},"Children":[{"Type":"NodeText","Data":"除此之外，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 中还定义了一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全局单调递增的事务 ID "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZXID"},{"Type":"NodeText","Data":" ，它是一个 64 位 long 型，其中高 32 位表示 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"epoch"},{"Type":"NodeText","Data":" 年代，低 32 位表示事务 id。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"epoch"},{"Type":"NodeText","Data":" 是会根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 的变化而变化的，当一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 挂了，新的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 上位的时候，年代（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"epoch"},{"Type":"NodeText","Data":"）就变了。而低 32 位可以简单理解为递增的事务 id。"}]},{"ID":"20240201213517-1e808f7","Type":"NodeParagraph","Properties":{"id":"20240201213517-1e808f7","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"定义这个的原因也是为了顺序性，每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"proposal"},{"Type":"NodeText","Data":" 在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 中生成后需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过其 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZXID"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 来进行排序"},{"Type":"NodeText","Data":" ，才能得到处理。"}]},{"ID":"20240201213518-rkivqcc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213518-rkivqcc","updated":"20240201213518"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"崩溃恢复模式"}]},{"ID":"20240201213519-dcbtgwf","Type":"NodeParagraph","Properties":{"id":"20240201213519-dcbtgwf","updated":"20240201213519"},"Children":[{"Type":"NodeText","Data":"说到崩溃恢复我们首先要提到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 选举算法，当系统出现崩溃影响最大应该是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 的崩溃，因为我们只有一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" ，所以当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 出现问题的时候我们势必需要重新选举 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213520-j8h4du4","Type":"NodeParagraph","Properties":{"id":"20240201213520-j8h4du4","updated":"20240201213520"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 选举可以分为两个不同的阶段，第一个是我们提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 宕机需要重新选举，第二则是当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 启动时需要进行系统的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 初始化选举。下面我先来介绍一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 是如何进行初始化选举的。"}]},{"ID":"20240201213521-suy711p","Type":"NodeParagraph","Properties":{"id":"20240201213521-suy711p","updated":"20240201213521"},"Children":[{"Type":"NodeText","Data":"假设我们集群中有 3 台机器，那也就意味着我们需要两台以上同意（超过半数）。比如这个时候我们启动了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" ，它会首先 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"投票给自己"},{"Type":"NodeText","Data":" ，投票内容为服务器的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"myid"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZXID"},{"Type":"NodeText","Data":" ，因为初始化所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZXID"},{"Type":"NodeText","Data":" 都为 0，此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 发出的投票为 (1,0)。但此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 的投票仅为 1，所以不能作为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" ，此时还在选举阶段所以整个集群处于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Looking"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 状态"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213522-o5rcp1f","Type":"NodeParagraph","Properties":{"id":"20240201213522-o5rcp1f","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"接着 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 启动了，它首先也会将投票选给自己(2,0)，并将投票信息广播出去（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":"也会，只是它那时没有其他的服务器了），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 在收到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 的投票信息后会将投票信息与自己的作比较。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"首先它会比较 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZXID"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZXID"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 大的优先为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Leader"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，如果相同则比较 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"myid"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"myid"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 大的优先作为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":"。所以此时"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 发现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 更适合做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":"，它就会将自己的投票信息更改为(2,0)然后再广播出去，之后"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 收到之后发现和自己的一样无需做更改，并且自己的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"投票已经超过半数"},{"Type":"NodeText","Data":" ，则 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"确定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"server2"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 也会将自己服务器设置为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Following"},{"Type":"NodeText","Data":" 变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":"。整个服务器就从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Looking"},{"Type":"NodeText","Data":" 变为了正常状态。"}]},{"ID":"20240201213523-6blkkv3","Type":"NodeParagraph","Properties":{"id":"20240201213523-6blkkv3","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 启动发现集群没有处于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Looking"},{"Type":"NodeText","Data":" 状态时，它会直接以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 的身份加入集群。"}]},{"ID":"20240201213524-n7atb25","Type":"NodeParagraph","Properties":{"id":"20240201213524-n7atb25","updated":"20240201213524"},"Children":[{"Type":"NodeText","Data":"还是前面三个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":" 的例子，如果在整个集群运行的过程中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 挂了，那么整个集群会如何重新选举 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 呢？其实和初始化选举差不多。"}]},{"ID":"20240201213525-3rxqsm1","Type":"NodeParagraph","Properties":{"id":"20240201213525-3rxqsm1","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"首先毫无疑问的是剩下的两个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 会将自己的状态 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Following"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Looking"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 状态"},{"Type":"NodeText","Data":" ，然后每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":" 会向初始化投票一样首先给自己投票（这不过这里的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zxid"},{"Type":"NodeText","Data":" 可能不是 0 了，这里为了方便随便取个数字）。"}]},{"ID":"20240201213526-hx4slr5","Type":"NodeParagraph","Properties":{"id":"20240201213526-hx4slr5","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"假设 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 给自己投票为(1,99)，然后广播给其他 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 首先也会给自己投票(3,95)，然后也广播给其他 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 此时会收到彼此的投票信息，和一开始选举一样，他们也会比较自己的投票和收到的投票（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zxid"},{"Type":"NodeText","Data":" 大的优先，如果相同那么就 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"myid"},{"Type":"NodeText","Data":" 大的优先）。这个时候 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 收到了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 的投票发现没自己的合适故不变，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 收到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 的投票结果后发现比自己的合适于是更改投票为(1,99)然后广播出去，最后 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 收到了发现自己的投票已经超过半数就把自己设为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 也随之变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213527-zb3g2kl","Type":"NodeBlockquote","Properties":{"id":"20240201213527-zb3g2kl","updated":"20240201213527"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213528-xrm6hif","Type":"NodeParagraph","Properties":{"id":"20240201213528-xrm6hif","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"请注意 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 为什么要设置奇数个结点？比如这里我们是三个，挂了一个我们还能正常工作，挂了两个我们就不能正常工作了（已经没有超过半数的节点数了，所以无法进行投票等操作了）。而假设我们现在有四个，挂了一个也能工作，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"但是挂了两个也不能正常工作了"},{"Type":"NodeText","Data":"，这是和三个一样的，而三个比四个还少一个，带来的效益是一样的，所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 推荐奇数个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213529-v9ll91p","Type":"NodeParagraph","Properties":{"id":"20240201213529-v9ll91p","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"那么说完了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 选举方式之后我们再来了解一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"崩溃恢复"},{"Type":"NodeText","Data":" 是什么玩意？"}]},{"ID":"20240201213530-5zjswpl","Type":"NodeParagraph","Properties":{"id":"20240201213530-5zjswpl","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"其实主要就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当集群中有机器挂了，我们整个集群如何保证数据一致性？"}]},{"ID":"20240201213531-sc0fpok","Type":"NodeParagraph","Properties":{"id":"20240201213531-sc0fpok","updated":"20240201213531"},"Children":[{"Type":"NodeText","Data":"如果只是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 挂了，而且挂的没超过半数的时候，因为我们一开始讲了在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 中会维护队列，所以不用担心后面的数据没接收到导致数据不一致性。"}]},{"ID":"20240201213532-ckzj2vv","Type":"NodeParagraph","Properties":{"id":"20240201213532-ckzj2vv","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 挂了那就麻烦了，我们肯定需要先暂停服务变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Looking"},{"Type":"NodeText","Data":" 状态然后进行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 的重新选举（上面我讲过了），但这个就要分为两种情况了，分别是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"确保已经被 Leader 提交的提案最终能够被所有的 Follower 提交"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"跳过那些已经被丢弃的提案"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213533-0ze9me7","Type":"NodeParagraph","Properties":{"id":"20240201213533-0ze9me7","updated":"20240201213533"},"Children":[{"Type":"NodeText","Data":"确保已经被 Leader 提交的提案最终能够被所有的 Follower 提交是什么意思呢？"}]},{"ID":"20240201213534-mvnze7n","Type":"NodeParagraph","Properties":{"id":"20240201213534-mvnze7n","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"假设 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader (server2)"},{"Type":"NodeText","Data":" 发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commit"},{"Type":"NodeText","Data":" 请求（忘了请看上面的消息广播模式），他发送给了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":"，然后要发给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 的时候突然挂了。这个时候重新选举的时候我们如果把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 作为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 的话，那么肯定会产生数据不一致性，因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server3"},{"Type":"NodeText","Data":" 肯定会提交刚刚 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 发送的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commit"},{"Type":"NodeText","Data":" 请求的提案，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 根本没收到所以会丢弃。"}]},{"ID":"20240201213535-u3ll99f","Type":"NodeParagraph","Properties":{"id":"20240201213535-u3ll99f","updated":"20240201213535"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"崩溃恢复","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/4b8365e80bdf441ea237847fb91236b7~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213536-d25f4sj","Type":"NodeParagraph","Properties":{"id":"20240201213536-d25f4sj","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"那怎么解决呢？"}]},{"ID":"20240201213537-uwvyjef","Type":"NodeParagraph","Properties":{"id":"20240201213537-uwvyjef","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"聪明的同学肯定会质疑，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这个时候 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"server1"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 已经不可能成为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Leader"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 了，因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"server1"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"server3"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 进行投票选举的时候会比较 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZXID"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" ，而此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"server3"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ZXID"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 肯定比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"server1"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的大了"},{"Type":"NodeText","Data":"。(不理解可以看前面的选举算法)"}]},{"ID":"20240201213538-p01454l","Type":"NodeParagraph","Properties":{"id":"20240201213538-p01454l","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"那么跳过那些已经被丢弃的提案又是什么意思呢？"}]},{"ID":"20240201213539-ak0hjk9","Type":"NodeParagraph","Properties":{"id":"20240201213539-ak0hjk9","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"假设 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader (server2)"},{"Type":"NodeText","Data":" 此时同意了提案 N1，自身提交了这个事务并且要发送给所有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commit"},{"Type":"NodeText","Data":" 的请求，却在这个时候挂了，此时肯定要重新进行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 的选举，比如说此时选 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server1"},{"Type":"NodeText","Data":" 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" （这无所谓）。但是过了一会，这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"挂掉的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Leader"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 又重新恢复了"},{"Type":"NodeText","Data":" ，此时它肯定会作为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 的身份进入集群中，需要注意的是刚刚 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server2"},{"Type":"NodeText","Data":" 已经同意提交了提案 N1，但其他 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":" 并没有收到它的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commit"},{"Type":"NodeText","Data":" 信息，所以其他 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":" 不可能再提交这个提案 N1 了，这样就会出现数据不一致性问题了，所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"该提案 N1 最终需要被抛弃掉"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213540-ezknyf0","Type":"NodeParagraph","Properties":{"id":"20240201213540-ezknyf0","updated":"20240201213540"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"崩溃恢复","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/99cdca39ad6340ae8b77e8befe94e36e~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213541-twiqh4h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213541-twiqh4h","updated":"20240201213541"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Zookeeper 的几个理论知识"}]},{"ID":"20240201213542-9jtal7b","Type":"NodeParagraph","Properties":{"id":"20240201213542-9jtal7b","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"了解了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 协议还不够，它仅仅是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 内部实现的一种方式，而我们如何通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 去做一些典型的应用场景呢？比如说集群管理，分布式锁，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Master"},{"Type":"NodeText","Data":" 选举等等。"}]},{"ID":"20240201213543-1e0i4tn","Type":"NodeParagraph","Properties":{"id":"20240201213543-1e0i4tn","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"这就涉及到如何使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 了，但在使用之前我们还需要掌握几个概念。比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据模型"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"会话机制"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ACL"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Watcher 机制"},{"Type":"NodeText","Data":" 等等。"}]},{"ID":"20240201213544-93njqps","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213544-93njqps","updated":"20240201213544"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据模型"}]},{"ID":"20240201213545-cs8gsk6","Type":"NodeParagraph","Properties":{"id":"20240201213545-cs8gsk6","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 数据存储结构与标准的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Unix"},{"Type":"NodeText","Data":" 文件系统非常相似，都是在根节点下挂很多子节点(树型)。但是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中没有文件系统中目录与文件的概念，而是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"znode"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 作为数据节点"},{"Type":"NodeText","Data":" 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"znode"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中的最小数据单元，每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"znode"},{"Type":"NodeText","Data":" 上都可以保存数据，同时还可以挂载子节点，形成一个树形化命名空间。"}]},{"ID":"20240201213546-9lxw2xk","Type":"NodeParagraph","Properties":{"id":"20240201213546-9lxw2xk","updated":"20240201213546"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"zk数据模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/663240470d524dd4ac6e68bde0b666eb~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213547-e6qew47","Type":"NodeParagraph","Properties":{"id":"20240201213547-e6qew47","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"znode"},{"Type":"NodeText","Data":" 都有自己所属的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"节点类型"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"节点状态"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213548-yweu7ok","Type":"NodeParagraph","Properties":{"id":"20240201213548-yweu7ok","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"其中节点类型可以分为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久节点"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久顺序节点"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时节点"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时顺序节点"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213549-qmsyejx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-qmsyejx","updated":"20240201213549"},"Children":[{"ID":"20240201213550-usd326j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213550-usd326j","updated":"20240201213550"},"Children":[{"ID":"20240201213551-w0nac0t","Type":"NodeParagraph","Properties":{"id":"20240201213551-w0nac0t","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"持久节点：一旦创建就一直存在，直到将其删除。"}]}]},{"ID":"20240201213552-143nqaj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-143nqaj","updated":"20240201213552"},"Children":[{"ID":"20240201213553-9lbfgr1","Type":"NodeParagraph","Properties":{"id":"20240201213553-9lbfgr1","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"持久顺序节点：一个父节点可以为其子节点 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"维护一个创建的先后顺序"},{"Type":"NodeText","Data":" ，这个顺序体现在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"节点名称"},{"Type":"NodeText","Data":" 上，是节点名称后自动添加一个由 10 位数字组成的数字串，从 0 开始计数。"}]}]},{"ID":"20240201213554-vm7f0kf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213554-vm7f0kf","updated":"20240201213554"},"Children":[{"ID":"20240201213555-yx1ib5z","Type":"NodeParagraph","Properties":{"id":"20240201213555-yx1ib5z","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"临时节点：临时节点的生命周期是与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"客户端会话"},{"Type":"NodeText","Data":" 绑定的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"会话消失则节点消失"},{"Type":"NodeText","Data":" 。临时节点 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"只能做叶子节点"},{"Type":"NodeText","Data":" ，不能创建子节点。"}]}]},{"ID":"20240201213556-0mi3u9c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-0mi3u9c","updated":"20240201213556"},"Children":[{"ID":"20240201213557-e12phh7","Type":"NodeParagraph","Properties":{"id":"20240201213557-e12phh7","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"临时顺序节点：父节点可以创建一个维持了顺序的临时节点(和前面的持久顺序性节点一样)。"}]}]}]},{"ID":"20240201213558-y51v32r","Type":"NodeParagraph","Properties":{"id":"20240201213558-y51v32r","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"节点状态中包含了很多节点的属性比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"czxid"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mzxid"},{"Type":"NodeText","Data":" 等等，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中是使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Stat"},{"Type":"NodeText","Data":" 这个类来维护的。下面我列举一些属性解释。"}]},{"ID":"20240201213559-goajhbw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213559-goajhbw","updated":"20240201213559"},"Children":[{"ID":"20240201213560-8jw0uy1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-8jw0uy1","updated":"20240201213560"},"Children":[{"ID":"20240201213561-afzg276","Type":"NodeParagraph","Properties":{"id":"20240201213561-afzg276","updated":"20240201213561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"czxid"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Created ZXID"},{"Type":"NodeText","Data":"，该数据节点被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建"},{"Type":"NodeText","Data":" 时的事务 ID。"}]}]},{"ID":"20240201213562-8uttlbu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-8uttlbu","updated":"20240201213562"},"Children":[{"ID":"20240201213563-oakbf9z","Type":"NodeParagraph","Properties":{"id":"20240201213563-oakbf9z","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mzxid"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Modified ZXID"},{"Type":"NodeText","Data":"，节点 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最后一次被更新时"},{"Type":"NodeText","Data":" 的事务 ID。"}]}]},{"ID":"20240201213564-njjei5v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213564-njjei5v","updated":"20240201213564"},"Children":[{"ID":"20240201213565-r8546ze","Type":"NodeParagraph","Properties":{"id":"20240201213565-r8546ze","updated":"20240201213565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ctime"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Created Time"},{"Type":"NodeText","Data":"，该节点被创建的时间。"}]}]},{"ID":"20240201213566-ccysmkx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-ccysmkx","updated":"20240201213566"},"Children":[{"ID":"20240201213567-upa4gio","Type":"NodeParagraph","Properties":{"id":"20240201213567-upa4gio","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mtime"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Modified Time"},{"Type":"NodeText","Data":"，该节点最后一次被修改的时间。"}]}]},{"ID":"20240201213568-zoazsky","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-zoazsky","updated":"20240201213568"},"Children":[{"ID":"20240201213569-zaacn8m","Type":"NodeParagraph","Properties":{"id":"20240201213569-zaacn8m","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"version"},{"Type":"NodeText","Data":"：节点的版本号。"}]}]},{"ID":"20240201213570-e4sc39q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-e4sc39q","updated":"20240201213570"},"Children":[{"ID":"20240201213571-14k61kc","Type":"NodeParagraph","Properties":{"id":"20240201213571-14k61kc","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cversion"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"子节点"},{"Type":"NodeText","Data":" 的版本号。"}]}]},{"ID":"20240201213572-5iyxhue","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-5iyxhue","updated":"20240201213572"},"Children":[{"ID":"20240201213573-sah1ivq","Type":"NodeParagraph","Properties":{"id":"20240201213573-sah1ivq","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aversion"},{"Type":"NodeText","Data":"：节点的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ACL"},{"Type":"NodeText","Data":" 版本号。"}]}]},{"ID":"20240201213574-5tv9yzk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-5tv9yzk","updated":"20240201213574"},"Children":[{"ID":"20240201213575-ai7kw84","Type":"NodeParagraph","Properties":{"id":"20240201213575-ai7kw84","updated":"20240201213575"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ephemeralOwner"},{"Type":"NodeText","Data":"：创建该节点的会话的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionID"},{"Type":"NodeText","Data":" ，如果该节点为持久节点，该值为 0。"}]}]},{"ID":"20240201213576-hyogavt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-hyogavt","updated":"20240201213576"},"Children":[{"ID":"20240201213577-p11ph4o","Type":"NodeParagraph","Properties":{"id":"20240201213577-p11ph4o","updated":"20240201213577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dataLength"},{"Type":"NodeText","Data":"：节点数据内容的长度。"}]}]},{"ID":"20240201213578-228fmln","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213578-228fmln","updated":"20240201213578"},"Children":[{"ID":"20240201213579-04gf99q","Type":"NodeParagraph","Properties":{"id":"20240201213579-04gf99q","updated":"20240201213579"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"numChildre"},{"Type":"NodeText","Data":"：该节点的子节点个数，如果为临时节点为 0。"}]}]},{"ID":"20240201213580-rispe1m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-rispe1m","updated":"20240201213580"},"Children":[{"ID":"20240201213581-wdcxaur","Type":"NodeParagraph","Properties":{"id":"20240201213581-wdcxaur","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"pzxid"},{"Type":"NodeText","Data":"：该节点子节点列表最后一次被修改时的事务 ID，注意是子节点的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"列表"},{"Type":"NodeText","Data":" ，不是内容。"}]}]}]},{"ID":"20240201213582-d636bph","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213582-d636bph","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"会话"}]},{"ID":"20240201213583-6fj3etr","Type":"NodeParagraph","Properties":{"id":"20240201213583-6fj3etr","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"我想这个对于后端开发的朋友肯定不陌生，不就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"session"},{"Type":"NodeText","Data":" 吗？只不过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zk"},{"Type":"NodeText","Data":" 客户端和服务端是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TCP"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 长连接"},{"Type":"NodeText","Data":" 维持的会话机制，其实对于会话来说你可以理解为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"保持连接状态"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213584-rlzbvbn","Type":"NodeParagraph","Properties":{"id":"20240201213584-rlzbvbn","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中，会话还有对应的事件，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CONNECTION_LOSS 连接丢失事件"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SESSION_MOVED 会话转移事件"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SESSION_EXPIRED 会话超时失效事件"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213585-fkk0lja","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213585-fkk0lja","updated":"20240201213585"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ACL"}]},{"ID":"20240201213586-rhevs96","Type":"NodeParagraph","Properties":{"id":"20240201213586-rhevs96","updated":"20240201213586"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ACL"},{"Type":"NodeText","Data":" 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Access Control Lists"},{"Type":"NodeText","Data":" ，它是一种权限控制。在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中定义了 5 种权限，它们分别为："}]},{"ID":"20240201213587-emr1gjv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213587-emr1gjv","updated":"20240201213587"},"Children":[{"ID":"20240201213588-ziflv3e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213588-ziflv3e","updated":"20240201213588"},"Children":[{"ID":"20240201213589-kheuo42","Type":"NodeParagraph","Properties":{"id":"20240201213589-kheuo42","updated":"20240201213589"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CREATE"},{"Type":"NodeText","Data":"：创建子节点的权限。"}]}]},{"ID":"20240201213590-jh8u9nm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213590-jh8u9nm","updated":"20240201213590"},"Children":[{"ID":"20240201213591-6svg7d1","Type":"NodeParagraph","Properties":{"id":"20240201213591-6svg7d1","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"READ"},{"Type":"NodeText","Data":"：获取节点数据和子节点列表的权限。"}]}]},{"ID":"20240201213592-lwm919s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-lwm919s","updated":"20240201213592"},"Children":[{"ID":"20240201213593-dh5nqnk","Type":"NodeParagraph","Properties":{"id":"20240201213593-dh5nqnk","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WRITE"},{"Type":"NodeText","Data":"：更新节点数据的权限。"}]}]},{"ID":"20240201213594-43x0ibe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213594-43x0ibe","updated":"20240201213594"},"Children":[{"ID":"20240201213595-cymiuwe","Type":"NodeParagraph","Properties":{"id":"20240201213595-cymiuwe","updated":"20240201213595"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DELETE"},{"Type":"NodeText","Data":"：删除子节点的权限。"}]}]},{"ID":"20240201213596-9ayw8iy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213596-9ayw8iy","updated":"20240201213596"},"Children":[{"ID":"20240201213597-8spuszn","Type":"NodeParagraph","Properties":{"id":"20240201213597-8spuszn","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ADMIN"},{"Type":"NodeText","Data":"：设置节点 ACL 的权限。"}]}]}]},{"ID":"20240201213598-je1yqv1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213598-je1yqv1","updated":"20240201213598"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Watcher 机制"}]},{"ID":"20240201213599-wuamot9","Type":"NodeParagraph","Properties":{"id":"20240201213599-wuamot9","updated":"20240201213599"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watcher"},{"Type":"NodeText","Data":" 为事件监听器，是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zk"},{"Type":"NodeText","Data":" 非常重要的一个特性，很多功能都依赖于它，它有点类似于订阅的方式，即客户端向服务端 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注册"},{"Type":"NodeText","Data":" 指定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" ，当服务端符合了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" 的某些事件或要求则会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"向客户端发送事件通知"},{"Type":"NodeText","Data":" ，客户端收到通知后找到自己定义的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watcher"},{"Type":"NodeText","Data":" 然后 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"执行相应的回调方法"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213600-s4ra78w","Type":"NodeParagraph","Properties":{"id":"20240201213600-s4ra78w","updated":"20240201213600"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"watcher机制","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/ac87b7cff7b44c63997ff0f6a7b6d2eb~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213601-pvqy9wi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213601-pvqy9wi","updated":"20240201213601"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Zookeeper 的几个典型应用场景"}]},{"ID":"20240201213602-y88yihk","Type":"NodeParagraph","Properties":{"id":"20240201213602-y88yihk","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"前面说了这么多的理论知识，你可能听得一头雾水，这些玩意有啥用？能干啥事？别急，听我慢慢道来。"}]},{"ID":"20240201213603-643ovxf","Type":"NodeParagraph","Properties":{"id":"20240201213603-643ovxf","updated":"20240201213603"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/dbc1a52b0c304bb093ef08fb1d4c704c~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213604-6fj9kx5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213604-6fj9kx5","updated":"20240201213604"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"选主"}]},{"ID":"20240201213605-1yuvpng","Type":"NodeParagraph","Properties":{"id":"20240201213605-1yuvpng","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"还记得上面我们的所说的临时节点吗？因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":" 的强一致性，能够很好地在保证 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在高并发的情况下保证节点创建的全局唯一性"},{"Type":"NodeText","Data":" (即无法重复创建同样的节点)。"}]},{"ID":"20240201213606-w9x71s3","Type":"NodeParagraph","Properties":{"id":"20240201213606-w9x71s3","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"利用这个特性，我们可以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"让多个客户端创建一个指定的节点"},{"Type":"NodeText","Data":" ，创建成功的就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213607-7zdkmjz","Type":"NodeParagraph","Properties":{"id":"20240201213607-7zdkmjz","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"但是，如果这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 挂了怎么办？？？"}]},{"ID":"20240201213608-onhj32x","Type":"NodeParagraph","Properties":{"id":"20240201213608-onhj32x","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"你想想为什么我们要创建临时节点？还记得临时节点的生命周期吗？"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 挂了是不是代表会话断了？会话断了是不是意味着这个节点没了？还记得 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" 吗？我们是不是可以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"让其他不是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"master"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的节点监听节点的状态"},{"Type":"NodeText","Data":" ，比如说我们监听这个临时节点的父节点，如果子节点个数变了就代表 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 挂了，这个时候我们 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"触发回调函数进行重新选举"},{"Type":"NodeText","Data":" ，或者我们直接监听节点的状态，我们可以通过节点是否已经失去连接来判断 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 是否挂了等等。"}]},{"ID":"20240201213609-v6oj957","Type":"NodeParagraph","Properties":{"id":"20240201213609-v6oj957","updated":"20240201213609"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"选主","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/00468757fb8f4f51875f645fbb7b25a2~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213610-cvb7uy9","Type":"NodeParagraph","Properties":{"id":"20240201213610-cvb7uy9","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"总的来说，我们可以完全 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"利用 临时节点、节点状态 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"watcher"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 来实现选主的功能"},{"Type":"NodeText","Data":"，临时节点主要用来选举，节点状态和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" 可以用来判断 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 的活性和进行重新选举。"}]},{"ID":"20240201213611-lh0qt3c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213611-lh0qt3c","updated":"20240201213611"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据发布/订阅"}]},{"ID":"20240201213612-wrzua2u","Type":"NodeParagraph","Properties":{"id":"20240201213612-wrzua2u","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"还记得 Zookeeper 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watcher"},{"Type":"NodeText","Data":" 机制吗？ Zookeeper 通过这种推拉相结合的方式实现客户端与服务端的交互：客户端向服务端注册节点，一旦相应节点的数据变更，服务端就会向“监听”该节点的客户端发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watcher"},{"Type":"NodeText","Data":" 事件通知，客户端接收到通知后需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主动"},{"Type":"NodeText","Data":" 到服务端获取最新的数据。基于这种方式，Zookeeper 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据发布/订阅"},{"Type":"NodeText","Data":" 功能。"}]},{"ID":"20240201213613-gr7qup2","Type":"NodeParagraph","Properties":{"id":"20240201213613-gr7qup2","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"一个典型的应用场景为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全局配置信息的集中管理"},{"Type":"NodeText","Data":"。 客户端在启动时会主动到 Zookeeper 服务端获取配置信息，同时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在指定节点注册一个"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watcher"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"监听"},{"Type":"NodeText","Data":"。当配置信息发生变更，服务端通知所有订阅的客户端重新获取配置信息，实现配置信息的实时更新。"}]},{"ID":"20240201213614-450a8b1","Type":"NodeParagraph","Properties":{"id":"20240201213614-450a8b1","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"上面所提到的全局配置信息通常包括机器列表信息、运行时的开关配置、数据库配置信息等。需要注意的是，这类全局配置信息通常具备以下特性："}]},{"ID":"20240201213615-ubvpww9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213615-ubvpww9","updated":"20240201213615"},"Children":[{"ID":"20240201213616-1tggw0t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-1tggw0t","updated":"20240201213616"},"Children":[{"ID":"20240201213617-s1aud4q","Type":"NodeParagraph","Properties":{"id":"20240201213617-s1aud4q","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"数据量较小"}]}]},{"ID":"20240201213618-r9v90bh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213618-r9v90bh","updated":"20240201213618"},"Children":[{"ID":"20240201213619-xr1bfrb","Type":"NodeParagraph","Properties":{"id":"20240201213619-xr1bfrb","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"数据内容在运行时动态变化"}]}]},{"ID":"20240201213620-ht4286d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-ht4286d","updated":"20240201213620"},"Children":[{"ID":"20240201213621-qv73pqb","Type":"NodeParagraph","Properties":{"id":"20240201213621-qv73pqb","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"集群中机器共享一致配置"}]}]}]},{"ID":"20240201213622-x6zjkck","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213622-x6zjkck","updated":"20240201213622"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"负载均衡"}]},{"ID":"20240201213623-nr9ukbq","Type":"NodeParagraph","Properties":{"id":"20240201213623-nr9ukbq","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"可以通过 Zookeeper 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时节点"},{"Type":"NodeText","Data":" 实现负载均衡。回顾一下临时节点的特性：当创建节点的客户端与服务端之间断开连接，即客户端会话（session）消失时，对应节点也会自动消失。因此，我们可以使用临时节点来维护 Server 的地址列表，从而保证请求不会被分配到已停机的服务上。"}]},{"ID":"20240201213624-18akry0","Type":"NodeParagraph","Properties":{"id":"20240201213624-18akry0","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"具体地，我们需要在集群的每一个 Server 中都使用 Zookeeper 客户端连接 Zookeeper 服务端，同时用 Server "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"自身的地址信息"},{"Type":"NodeText","Data":"在服务端指定目录下创建临时节点。当客户端请求调用集群服务时，首先通过 Zookeeper 获取该目录下的节点列表 （即所有可用的 Server），随后根据不同的负载均衡策略将请求转发到某一具体的 Server。"}]},{"ID":"20240201213625-jsa5jph","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213625-jsa5jph","updated":"20240201213625"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式锁"}]},{"ID":"20240201213626-5ahsvn0","Type":"NodeParagraph","Properties":{"id":"20240201213626-5ahsvn0","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"分布式锁的实现方式有很多种，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":"、数据库、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 等。个人认为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 在实现分布式锁这方面是非常非常简单的。"}]},{"ID":"20240201213627-9wkq12h","Type":"NodeParagraph","Properties":{"id":"20240201213627-9wkq12h","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"上面我们已经提到过了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"zk 在高并发的情况下保证节点创建的全局唯一性"},{"Type":"NodeText","Data":"，这玩意一看就知道能干啥了。实现互斥锁呗，又因为能在分布式的情况下，所以能实现分布式锁呗。"}]},{"ID":"20240201213628-temowjr","Type":"NodeParagraph","Properties":{"id":"20240201213628-temowjr","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"如何实现呢？这玩意其实跟选主基本一样，我们也可以利用临时节点的创建来实现。"}]},{"ID":"20240201213629-2hj8bvq","Type":"NodeParagraph","Properties":{"id":"20240201213629-2hj8bvq","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"首先肯定是如何获取锁，因为创建节点的唯一性，我们可以让多个客户端同时创建一个临时节点，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建成功的就说明获取到了锁"},{"Type":"NodeText","Data":" 。然后没有获取到锁的客户端也像上面选主的非主节点创建一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" 进行节点状态的监听，如果这个互斥锁被释放了（可能获取锁的客户端宕机了，或者那个客户端主动释放了锁）可以调用回调函数重新获得锁。"}]},{"ID":"20240201213630-c15z1sv","Type":"NodeBlockquote","Properties":{"id":"20240201213630-c15z1sv","updated":"20240201213630"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213631-y5i4jba","Type":"NodeParagraph","Properties":{"id":"20240201213631-y5i4jba","updated":"20240201213631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zk"},{"Type":"NodeText","Data":" 中不需要向 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"redis"},{"Type":"NodeText","Data":" 那样考虑锁得不到释放的问题了，因为当客户端挂了，节点也挂了，锁也释放了。是不是很简单？"}]}]},{"ID":"20240201213632-s3oe2nb","Type":"NodeParagraph","Properties":{"id":"20240201213632-s3oe2nb","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"那能不能使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 同时实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"共享锁和独占锁"},{"Type":"NodeText","Data":" 呢？答案是可以的，不过稍微有点复杂而已。"}]},{"ID":"20240201213633-s56nsfq","Type":"NodeParagraph","Properties":{"id":"20240201213633-s56nsfq","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"还记得 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有序的节点"},{"Type":"NodeText","Data":" 吗？"}]},{"ID":"20240201213634-93pcs1h","Type":"NodeParagraph","Properties":{"id":"20240201213634-93pcs1h","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"这个时候我规定所有创建节点必须有序，当你是读请求（要获取共享锁）的话，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"没有比自己更小的节点，或比自己小的节点都是读请求"},{"Type":"NodeText","Data":" ，则可以获取到读锁，然后就可以开始读了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"若比自己小的节点中有写请求"},{"Type":"NodeText","Data":" ，则当前客户端无法获取到读锁，只能等待前面的写请求完成。"}]},{"ID":"20240201213635-ubcbzzb","Type":"NodeParagraph","Properties":{"id":"20240201213635-ubcbzzb","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"如果你是写请求（获取独占锁），若 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"没有比自己更小的节点"},{"Type":"NodeText","Data":" ，则表示当前客户端可以直接获取到写锁，对数据进行修改。若发现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有比自己更小的节点，无论是读操作还是写操作，当前客户端都无法获取到写锁"},{"Type":"NodeText","Data":" ，等待所有前面的操作完成。"}]},{"ID":"20240201213636-qw9kvkl","Type":"NodeParagraph","Properties":{"id":"20240201213636-qw9kvkl","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"这就很好地同时实现了共享锁和独占锁，当然还有优化的地方，比如当一个锁得到释放它会通知所有等待的客户端从而造成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"羊群效应"},{"Type":"NodeText","Data":" 。此时你可以通过让等待的节点只监听他们前面的节点。"}]},{"ID":"20240201213637-3otbfx8","Type":"NodeParagraph","Properties":{"id":"20240201213637-3otbfx8","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"具体怎么做呢？其实也很简单，你可以让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读请求监听比自己小的最后一个写请求节点，写请求只监听比自己小的最后一个节点"},{"Type":"NodeText","Data":" ，感兴趣的小伙伴可以自己去研究一下。"}]},{"ID":"20240201213638-qvscn0k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213638-qvscn0k","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"命名服务"}]},{"ID":"20240201213639-2xnax8n","Type":"NodeParagraph","Properties":{"id":"20240201213639-2xnax8n","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"如何给一个对象设置 ID，大家可能都会想到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UUID"},{"Type":"NodeText","Data":"，但是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UUID"},{"Type":"NodeText","Data":" 最大的问题就在于它太长了。。。(太长不一定是好事，嘿嘿嘿)。那么在条件允许的情况下，我们能不能使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 来实现呢？"}]},{"ID":"20240201213640-7gdggia","Type":"NodeParagraph","Properties":{"id":"20240201213640-7gdggia","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"我们之前提到过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"树形结构"},{"Type":"NodeText","Data":" 来存储数据节点的，那也就是说，对于每个节点的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全路径"},{"Type":"NodeText","Data":"，它必定是唯一的，我们可以使用节点的全路径作为命名方式了。而且更重要的是，路径是我们可以自己定义的，这对于我们对有些有语意的对象的 ID 设置可以更加便于理解。"}]},{"ID":"20240201213641-beeo3m8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213641-beeo3m8","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"集群管理和注册中心"}]},{"ID":"20240201213642-xtl01nr","Type":"NodeParagraph","Properties":{"id":"20240201213642-xtl01nr","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"看到这里是不是觉得 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 实在是太强大了，它怎么能这么能干！"}]},{"ID":"20240201213643-u84p21w","Type":"NodeParagraph","Properties":{"id":"20240201213643-u84p21w","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"别急，它能干的事情还很多呢。可能我们会有这样的需求，我们需要了解整个集群中有多少机器在工作，我们想对集群中的每台机器的运行时状态进行数据采集，对集群中机器进行上下线操作等等。"}]},{"ID":"20240201213644-te1imcr","Type":"NodeParagraph","Properties":{"id":"20240201213644-te1imcr","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 天然支持的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" 和 临时节点能很好的实现这些需求。我们可以为每条机器创建临时节点，并监控其父节点，如果子节点列表有变动（我们可能创建删除了临时节点），那么我们可以使用在其父节点绑定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":" 进行状态监控和回调。"}]},{"ID":"20240201213645-nurgjfi","Type":"NodeParagraph","Properties":{"id":"20240201213645-nurgjfi","updated":"20240201213645"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"集群管理","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/f3d70709f10f4fa6b09125a56a976fda~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213646-n81m9i9","Type":"NodeParagraph","Properties":{"id":"20240201213646-n81m9i9","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"至于注册中心也很简单，我们同样也是让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"服务提供者"},{"Type":"NodeText","Data":" 在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中创建一个临时节点并且将自己的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ip、port、调用方式"},{"Type":"NodeText","Data":" 写入节点，当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"服务消费者"},{"Type":"NodeText","Data":" 需要进行调用的时候会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过注册中心找到相应的服务的地址列表(IP 端口什么的)"},{"Type":"NodeText","Data":" ，并缓存到本地(方便以后调用)，当消费者调用服务时，不会再去请求注册中心，而是直接通过负载均衡算法从地址列表中取一个服务提供者的服务器调用服务。"}]},{"ID":"20240201213647-quhoa3j","Type":"NodeParagraph","Properties":{"id":"20240201213647-quhoa3j","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"当服务提供者的某台服务器宕机或下线时，相应的地址会从服务提供者地址列表中移除。同时，注册中心会将新的服务地址列表发送给服务消费者的机器并缓存在消费者本机（当然你可以让消费者进行节点监听，我记得 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eureka"},{"Type":"NodeText","Data":" 会先试错，然后再更新）。"}]},{"ID":"20240201213648-0shh5ks","Type":"NodeParagraph","Properties":{"id":"20240201213648-0shh5ks","updated":"20240201213648"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"注册中心","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/469cebf9670740d1a6711fe54db70e05~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213649-wem8uca","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213649-wem8uca","updated":"20240201213649"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213650-cz56igl","Type":"NodeParagraph","Properties":{"id":"20240201213650-cz56igl","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"看到这里的同学实在是太有耐心了 👍👍👍 不知道大家是否还记得我讲了什么 😒。"}]},{"ID":"20240201213651-6bopb0s","Type":"NodeParagraph","Properties":{"id":"20240201213651-6bopb0s","updated":"20240201213651"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/912c1aa6b7794d4aac8ebe6a14832cae~tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213652-rlkwe75","Type":"NodeParagraph","Properties":{"id":"20240201213652-rlkwe75","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"这篇文章中我带大家入门了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 这个强大的分布式协调框架。现在我们来简单梳理一下整篇文章的内容。"}]},{"ID":"20240201213653-8ns0bwx","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-8ns0bwx","updated":"20240201213653"},"Children":[{"ID":"20240201213654-b6iebm4","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-b6iebm4","updated":"20240201213654"},"Children":[{"ID":"20240201213655-hyy715u","Type":"NodeParagraph","Properties":{"id":"20240201213655-hyy715u","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"分布式与集群的区别"}]}]},{"ID":"20240201213656-8j49qo0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-8j49qo0","updated":"20240201213656"},"Children":[{"ID":"20240201213657-asp8gjb","Type":"NodeParagraph","Properties":{"id":"20240201213657-asp8gjb","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"2PC"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"3PC"},{"Type":"NodeText","Data":" 以及 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"paxos"},{"Type":"NodeText","Data":" 算法这些一致性框架的原理和实现。"}]}]},{"ID":"20240201213658-n38li3k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-n38li3k","updated":"20240201213658"},"Children":[{"ID":"20240201213659-6gr2tpt","Type":"NodeParagraph","Properties":{"id":"20240201213659-6gr2tpt","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 专门的一致性算法 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZAB"},{"Type":"NodeText","Data":" 原子广播协议的内容（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":" 选举、崩溃恢复、消息广播）。"}]}]},{"ID":"20240201213660-d3wolmb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213660-d3wolmb","updated":"20240201213660"},"Children":[{"ID":"20240201213661-j6ooads","Type":"NodeParagraph","Properties":{"id":"20240201213661-j6ooads","updated":"20240201213661"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 中的一些基本概念，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ACL"},{"Type":"NodeText","Data":"，数据节点，会话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"watcher"},{"Type":"NodeText","Data":"机制等等。"}]}]},{"ID":"20240201213662-lhvsuyv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-lhvsuyv","updated":"20240201213662"},"Children":[{"ID":"20240201213663-gvqmre8","Type":"NodeParagraph","Properties":{"id":"20240201213663-gvqmre8","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"zookeeper"},{"Type":"NodeText","Data":" 的典型应用场景，比如选主，注册中心等等。"}]},{"ID":"20240201213664-q7h0xiq","Type":"NodeParagraph","Properties":{"id":"20240201213664-q7h0xiq","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"如果忘了可以回去看看再次理解一下，如果有疑问和建议欢迎提出 🤝🤝🤝。"}]}]}]},{"ID":"20240201213665-kfa4pev","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-kfa4pev","updated":"20240201213665"}}]}