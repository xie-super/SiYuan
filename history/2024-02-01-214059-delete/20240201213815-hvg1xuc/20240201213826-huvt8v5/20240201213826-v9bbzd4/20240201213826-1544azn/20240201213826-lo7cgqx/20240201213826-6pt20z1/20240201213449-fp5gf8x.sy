{"ID":"20240201213449-fp5gf8x","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213449-fp5gf8x","title":"zookeeper-intro","updated":"20240201213449"},"Children":[{"ID":"20240201213450-u3akxd7","Type":"NodeThematicBreak","Properties":{"id":"20240201213450-u3akxd7","updated":"20240201213450"}},{"ID":"20240201213451-jdpq91f","Type":"NodeParagraph","Properties":{"id":"20240201213451-jdpq91f","updated":"20240201213451"},"Children":[{"Type":"NodeText","Data":"title: ZooKeeper相关概念总结(入门)"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213452-wk6e2xz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213452-wk6e2xz","updated":"20240201213452"},"Children":[{"ID":"20240201213453-tnifgfl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213453-tnifgfl","updated":"20240201213453"},"Children":[{"ID":"20240201213454-havkfej","Type":"NodeParagraph","Properties":{"id":"20240201213454-havkfej","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"ZooKeeper"}]}]}]},{"ID":"20240201213455-movhr6g","Type":"NodeThematicBreak","Properties":{"id":"20240201213455-movhr6g","updated":"20240201213455"}},{"ID":"20240201213456-sd3aczp","Type":"NodeParagraph","Properties":{"id":"20240201213456-sd3aczp","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"相信大家对 ZooKeeper 应该不算陌生。但是你真的了解 ZooKeeper 到底有啥用不？如果别人/面试官让你给他讲讲对于 ZooKeeper 的认识，你能回答到什么地步呢？"}]},{"ID":"20240201213457-qfgrsld","Type":"NodeParagraph","Properties":{"id":"20240201213457-qfgrsld","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"拿我自己来说吧！我本人在大学曾经使用 Dubbo 来做分布式项目的时候，使用了 ZooKeeper 作为注册中心。为了保证分布式系统能够同步访问某个资源，我还使用 ZooKeeper 做过分布式锁。另外，我在学习 Kafka 的时候，知道 Kafka 很多功能的实现依赖了 ZooKeeper。"}]},{"ID":"20240201213458-z86r6i2","Type":"NodeParagraph","Properties":{"id":"20240201213458-z86r6i2","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"前几天，总结项目经验的时候，我突然问自己 ZooKeeper 到底是个什么东西？想了半天，脑海中只是简单的能浮现出几句话："}]},{"ID":"20240201213459-b21orl7","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213459-b21orl7","updated":"20240201213459"},"Children":[{"ID":"20240201213460-cq9wb9t","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213460-cq9wb9t","updated":"20240201213460"},"Children":[{"ID":"20240201213461-skm8mgk","Type":"NodeParagraph","Properties":{"id":"20240201213461-skm8mgk","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 可以被用作注册中心、分布式锁；"}]}]},{"ID":"20240201213462-1xlw4ul","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213462-1xlw4ul","updated":"20240201213462"},"Children":[{"ID":"20240201213463-3urusqk","Type":"NodeParagraph","Properties":{"id":"20240201213463-3urusqk","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 是 Hadoop 生态系统的一员；"}]}]},{"ID":"20240201213464-8ufwghd","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213464-8ufwghd","updated":"20240201213464"},"Children":[{"ID":"20240201213465-gbn4kxt","Type":"NodeParagraph","Properties":{"id":"20240201213465-gbn4kxt","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"构建 ZooKeeper 集群的时候，使用的服务器最好是奇数台。"}]}]}]},{"ID":"20240201213466-wuv3k7a","Type":"NodeParagraph","Properties":{"id":"20240201213466-wuv3k7a","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"由此可见，我对于 ZooKeeper 的理解仅仅是停留在了表面。"}]},{"ID":"20240201213467-66j7tsw","Type":"NodeParagraph","Properties":{"id":"20240201213467-66j7tsw","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"所以，通过本文，希望带大家稍微详细的了解一下 ZooKeeper 。如果没有学过 ZooKeeper ，那么本文将会是你进入 ZooKeeper 大门的垫脚砖。如果你已经接触过 ZooKeeper ，那么本文将带你回顾一下 ZooKeeper 的一些基础概念。"}]},{"ID":"20240201213468-vu9jkh1","Type":"NodeParagraph","Properties":{"id":"20240201213468-vu9jkh1","updated":"20240201213468"},"Children":[{"Type":"NodeText","Data":"另外，本文不光会涉及到 ZooKeeper 的一些概念，后面的文章会介绍到 ZooKeeper 常见命令的使用以及使用 Apache Curator 作为 ZooKeeper 的客户端。"}]},{"ID":"20240201213469-mhzlatb","Type":"NodeParagraph","Properties":{"id":"20240201213469-mhzlatb","updated":"20240201213469"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"如果文章有任何需要改善和完善的地方，欢迎在评论区指出，共同进步！"}]},{"ID":"20240201213470-jmpvxuv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213470-jmpvxuv","updated":"20240201213470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 介绍"}]},{"ID":"20240201213471-usorrmy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213471-usorrmy","updated":"20240201213471"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 由来"}]},{"ID":"20240201213472-u8bx6vv","Type":"NodeParagraph","Properties":{"id":"20240201213472-u8bx6vv","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"正式介绍 ZooKeeper 之前，我们先来看看 ZooKeeper 的由来，还挺有意思的。"}]},{"ID":"20240201213473-rvnj4l8","Type":"NodeParagraph","Properties":{"id":"20240201213473-rvnj4l8","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"下面这段内容摘自《从 Paxos 到 ZooKeeper》第四章第一节，推荐大家阅读一下："}]},{"ID":"20240201213474-gvwk36s","Type":"NodeBlockquote","Properties":{"id":"20240201213474-gvwk36s","updated":"20240201213474"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213475-usz2vdn","Type":"NodeParagraph","Properties":{"id":"20240201213475-usz2vdn","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以，雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。"}]},{"ID":"20240201213476-qsg1mop","Type":"NodeParagraph","Properties":{"id":"20240201213476-qsg1mop","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"关于“ZooKeeper”这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的 Pig 项目),雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 RaghuRamakrishnan 开玩笑地说：“在这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧一一一因为各个以动物命名的分布式组件放在一起，雅虎的整个分布式系统看上去就像一个大型的动物园了，而 ZooKeeper 正好要用来进行分布式环境的协调一一于是，ZooKeeper 的名字也就由此诞生了。"}]}]},{"ID":"20240201213477-kz1syh1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213477-kz1syh1","updated":"20240201213477"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 概览"}]},{"ID":"20240201213478-uwwijd4","Type":"NodeParagraph","Properties":{"id":"20240201213478-uwwijd4","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 是一个开源的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式协调服务"},{"Type":"NodeText","Data":"，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。"}]},{"ID":"20240201213479-fcv74gq","Type":"NodeBlockquote","Properties":{"id":"20240201213479-fcv74gq","updated":"20240201213479"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213480-fnf62tj","Type":"NodeParagraph","Properties":{"id":"20240201213480-fnf62tj","updated":"20240201213480"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原语："},{"Type":"NodeText","Data":" 操作系统或计算机网络用语范畴。是由若干条指令组成的，用于完成一定功能的一个过程。具有不可分割性，即原语的执行必须是连续的，在执行过程中不允许被中断。"}]}]},{"ID":"20240201213481-x6yp0jv","Type":"NodeParagraph","Properties":{"id":"20240201213481-x6yp0jv","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。这些功能的实现主要依赖于 ZooKeeper 提供的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据存储+事件监听"},{"Type":"NodeText","Data":" 功能（后文会详细介绍到） 。"}]},{"ID":"20240201213482-c7y5nkl","Type":"NodeParagraph","Properties":{"id":"20240201213482-c7y5nkl","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 将数据保存在内存中，性能是不错的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。"}]},{"ID":"20240201213483-as39oln","Type":"NodeParagraph","Properties":{"id":"20240201213483-as39oln","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"另外，很多顶级的开源项目都用到了 ZooKeeper，比如："}]},{"ID":"20240201213484-tcliyez","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213484-tcliyez","updated":"20240201213484"},"Children":[{"ID":"20240201213485-57b5w7t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213485-57b5w7t","updated":"20240201213485"},"Children":[{"ID":"20240201213486-2kldgii","Type":"NodeParagraph","Properties":{"id":"20240201213486-2kldgii","updated":"20240201213486"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" : ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。不过，在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构。"}]}]},{"ID":"20240201213487-tbw7cgg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213487-tbw7cgg","updated":"20240201213487"},"Children":[{"ID":"20240201213488-41ubgdo","Type":"NodeParagraph","Properties":{"id":"20240201213488-41ubgdo","updated":"20240201213488"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Hbase"},{"Type":"NodeText","Data":" : ZooKeeper 为 Hbase 提供确保整个集群只有一个 Master 以及保存和提供 regionserver 状态信息（是否在线）等功能。"}]}]},{"ID":"20240201213489-10wm4xn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213489-10wm4xn","updated":"20240201213489"},"Children":[{"ID":"20240201213490-nt4tnc7","Type":"NodeParagraph","Properties":{"id":"20240201213490-nt4tnc7","updated":"20240201213490"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Hadoop"},{"Type":"NodeText","Data":" : ZooKeeper 为 Namenode 提供高可用支持。"}]}]}]},{"ID":"20240201213491-w8igvu5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213491-w8igvu5","updated":"20240201213491"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 特点"}]},{"ID":"20240201213492-o6l87x9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213492-o6l87x9","updated":"20240201213492"},"Children":[{"ID":"20240201213493-dxjg5rh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213493-dxjg5rh","updated":"20240201213493"},"Children":[{"ID":"20240201213494-v0coqq9","Type":"NodeParagraph","Properties":{"id":"20240201213494-v0coqq9","updated":"20240201213494"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"顺序一致性："},{"Type":"NodeText","Data":" 从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到 ZooKeeper 中去。"}]}]},{"ID":"20240201213495-insrta4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213495-insrta4","updated":"20240201213495"},"Children":[{"ID":"20240201213496-0j9pewl","Type":"NodeParagraph","Properties":{"id":"20240201213496-0j9pewl","updated":"20240201213496"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原子性："},{"Type":"NodeText","Data":" 所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功应用了某一个事务，要么都没有应用。"}]}]},{"ID":"20240201213497-7qj8btq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213497-7qj8btq","updated":"20240201213497"},"Children":[{"ID":"20240201213498-v2o24n8","Type":"NodeParagraph","Properties":{"id":"20240201213498-v2o24n8","updated":"20240201213498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单一系统映像："},{"Type":"NodeText","Data":" 无论客户端连到哪一个 ZooKeeper 服务器上，其看到的服务端数据模型都是一致的。"}]}]},{"ID":"20240201213499-2bodmqt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213499-2bodmqt","updated":"20240201213499"},"Children":[{"ID":"20240201213500-lcy0msm","Type":"NodeParagraph","Properties":{"id":"20240201213500-lcy0msm","updated":"20240201213500"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可靠性："},{"Type":"NodeText","Data":" 一旦一次更改请求被应用，更改的结果就会被持久化，直到被下一次更改覆盖。"}]}]},{"ID":"20240201213501-hjyja4h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213501-hjyja4h","updated":"20240201213501"},"Children":[{"ID":"20240201213502-qixesaa","Type":"NodeParagraph","Properties":{"id":"20240201213502-qixesaa","updated":"20240201213502"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实时性："},{"Type":"NodeText","Data":" 每个客户端的系统视图都是最新的。"}]}]}]},{"ID":"20240201213503-occz9kd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213503-occz9kd","updated":"20240201213503"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 应用场景"}]},{"ID":"20240201213504-ad6pc6p","Type":"NodeParagraph","Properties":{"id":"20240201213504-ad6pc6p","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 概览中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。"}]},{"ID":"20240201213505-l1cgxd0","Type":"NodeParagraph","Properties":{"id":"20240201213505-l1cgxd0","updated":"20240201213505"},"Children":[{"Type":"NodeText","Data":"下面选 3 个典型的应用场景来专门说说："}]},{"ID":"20240201213506-a1hytkg","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213506-a1hytkg","updated":"20240201213506"},"Children":[{"ID":"20240201213507-k2puas5","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213507-k2puas5","updated":"20240201213507"},"Children":[{"ID":"20240201213508-00vcuad","Type":"NodeParagraph","Properties":{"id":"20240201213508-00vcuad","updated":"20240201213508"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"命名服务"},{"Type":"NodeText","Data":"：可以通过 ZooKeeper 的顺序节点生成全局唯一 ID。"}]}]},{"ID":"20240201213509-ozryn2o","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213509-ozryn2o","updated":"20240201213509"},"Children":[{"ID":"20240201213510-h4uwse2","Type":"NodeParagraph","Properties":{"id":"20240201213510-h4uwse2","updated":"20240201213510"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据发布/订阅"},{"Type":"NodeText","Data":"：通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Watcher 机制"},{"Type":"NodeText","Data":" 可以很方便地实现数据发布/订阅。当你将数据发布到 ZooKeeper 被监听的节点上，其他机器可通过监听 ZooKeeper 上节点的变化来实现配置的动态更新。"}]}]},{"ID":"20240201213511-o1e2797","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213511-o1e2797","updated":"20240201213511"},"Children":[{"ID":"20240201213512-ep2i6s6","Type":"NodeParagraph","Properties":{"id":"20240201213512-ep2i6s6","updated":"20240201213512"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式锁"},{"Type":"NodeText","Data":"：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放锁。分布式锁的实现也需要用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Watcher 机制"},{"Type":"NodeText","Data":" ，我在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/distributed-lock.html","TextMarkTextContent":"分布式锁详解"},{"Type":"NodeText","Data":" 这篇文章中有详细介绍到如何基于 ZooKeeper 实现分布式锁。"}]}]}]},{"ID":"20240201213513-l5cgm7q","Type":"NodeParagraph","Properties":{"id":"20240201213513-l5cgm7q","updated":"20240201213513"},"Children":[{"Type":"NodeText","Data":"实际上，这些功能的实现基本都得益于 ZooKeeper 可以保存数据的功能，但是 ZooKeeper 不适合保存大量数据，这一点需要注意。"}]},{"ID":"20240201213514-xu1rdfm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213514-xu1rdfm","updated":"20240201213514"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 重要概念"}]},{"ID":"20240201213515-i81mx1h","Type":"NodeParagraph","Properties":{"id":"20240201213515-i81mx1h","updated":"20240201213515"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"破音：拿出小本本，下面的内容非常重要哦！"}]},{"ID":"20240201213516-vs5iffw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213516-vs5iffw","updated":"20240201213516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Data model（数据模型）"}]},{"ID":"20240201213517-7kh9mws","Type":"NodeParagraph","Properties":{"id":"20240201213517-7kh9mws","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数据可以是数字、字符串或者是二进制序列。并且。每个节点还可以拥有 N 个子节点，最上层是根节点以“/”来代表。每个数据节点在 ZooKeeper 中被称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"znode"},{"Type":"NodeText","Data":"，它是 ZooKeeper 中数据的最小单元。并且，每个 znode 都有一个唯一的路径标识。"}]},{"ID":"20240201213518-6b6folg","Type":"NodeParagraph","Properties":{"id":"20240201213518-6b6folg","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"强调一句："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ZooKeeper 主要是用来协调服务的，而不是用来存储业务数据的，所以不要放比较大的数据在 znode 上，ZooKeeper 给出的每个节点的数据大小上限是 1M 。"}]},{"ID":"20240201213519-noxpylp","Type":"NodeParagraph","Properties":{"id":"20240201213519-noxpylp","updated":"20240201213519"},"Children":[{"Type":"NodeText","Data":"从下图可以更直观地看出：ZooKeeper 节点路径标识方式和 Unix 文件系统路径非常相似，都是由一系列使用斜杠\"/\"进行分割的路径表示，开发人员可以向这个节点中写入数据，也可以在节点下面创建子节点。这些操作我们后面都会介绍到。"}]},{"ID":"20240201213520-11ryeyw","Type":"NodeParagraph","Properties":{"id":"20240201213520-11ryeyw","updated":"20240201213520"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ZooKeeper 数据模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/zookeeper/znode-structure.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213521-5ixxfpq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213521-5ixxfpq","updated":"20240201213521"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"znode（数据节点）"}]},{"ID":"20240201213522-uii4x0f","Type":"NodeParagraph","Properties":{"id":"20240201213522-uii4x0f","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"介绍了 ZooKeeper 树形数据模型之后，我们知道每个数据节点在 ZooKeeper 中被称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"znode"},{"Type":"NodeText","Data":"，它是 ZooKeeper 中数据的最小单元。你要存放的数据就放在上面，是你使用 ZooKeeper 过程中经常需要接触到的一个概念。"}]},{"ID":"20240201213523-d6qepgq","Type":"NodeParagraph","Properties":{"id":"20240201213523-d6qepgq","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"我们通常是将 znode 分为 4 大类："}]},{"ID":"20240201213524-9v8sw0e","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213524-9v8sw0e","updated":"20240201213524"},"Children":[{"ID":"20240201213525-2mc2zvx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213525-2mc2zvx","updated":"20240201213525"},"Children":[{"ID":"20240201213526-lwp2gra","Type":"NodeParagraph","Properties":{"id":"20240201213526-lwp2gra","updated":"20240201213526"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久（PERSISTENT）节点"},{"Type":"NodeText","Data":"：一旦创建就一直存在即使 ZooKeeper 集群宕机，直到将其删除。"}]}]},{"ID":"20240201213527-ixnaxxh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213527-ixnaxxh","updated":"20240201213527"},"Children":[{"ID":"20240201213528-9vciwfn","Type":"NodeParagraph","Properties":{"id":"20240201213528-9vciwfn","updated":"20240201213528"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时（EPHEMERAL）节点"},{"Type":"NodeText","Data":"：临时节点的生命周期是与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"客户端会话（session）"},{"Type":"NodeText","Data":" 绑定的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"会话消失则节点消失"},{"Type":"NodeText","Data":"。并且，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时节点只能做叶子节点"},{"Type":"NodeText","Data":" ，不能创建子节点。"}]}]},{"ID":"20240201213529-xsovfd4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213529-xsovfd4","updated":"20240201213529"},"Children":[{"ID":"20240201213530-r3cn726","Type":"NodeParagraph","Properties":{"id":"20240201213530-r3cn726","updated":"20240201213530"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久顺序（PERSISTENT_SEQUENTIAL）节点"},{"Type":"NodeText","Data":"：除了具有持久（PERSISTENT）节点的特性之外， 子节点的名称还具有顺序性。比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/node1/app0000000001"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/node1/app0000000002"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213531-7xofcdb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213531-7xofcdb","updated":"20240201213531"},"Children":[{"ID":"20240201213532-w2k337t","Type":"NodeParagraph","Properties":{"id":"20240201213532-w2k337t","updated":"20240201213532"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"临时顺序（EPHEMERAL_SEQUENTIAL）节点"},{"Type":"NodeText","Data":"：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性"}]}]}]},{"ID":"20240201213533-drxug65","Type":"NodeParagraph","Properties":{"id":"20240201213533-drxug65","updated":"20240201213533"},"Children":[{"Type":"NodeText","Data":"每个 znode 由 2 部分组成:"}]},{"ID":"20240201213534-costelj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213534-costelj","updated":"20240201213534"},"Children":[{"ID":"20240201213535-pcdw72h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213535-pcdw72h","updated":"20240201213535"},"Children":[{"ID":"20240201213536-iw5nfek","Type":"NodeParagraph","Properties":{"id":"20240201213536-iw5nfek","updated":"20240201213536"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"stat"},{"Type":"NodeText","Data":"：状态信息"}]}]},{"ID":"20240201213537-vtcmhdb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213537-vtcmhdb","updated":"20240201213537"},"Children":[{"ID":"20240201213538-yrn5ssk","Type":"NodeParagraph","Properties":{"id":"20240201213538-yrn5ssk","updated":"20240201213538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"data"},{"Type":"NodeText","Data":"：节点存放的数据的具体内容"}]}]}]},{"ID":"20240201213539-iw74bsz","Type":"NodeParagraph","Properties":{"id":"20240201213539-iw74bsz","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"如下所示，我通过 get 命令来获取 根目录下的 dubbo 节点的内容。（get 命令在下面会介绍到）。"}]},{"ID":"20240201213540-pp4p2rx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2hlbGw=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213540-pp4p2rx","updated":"20240201213540"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[zk: 127.0.0.1:2181(CONNECTED) 6] get /dubbo\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 11:05:34 CST 2018\nmZxid = 0x2\nmtime = Tue Nov 27 11:05:34 CST 2018\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213541-c9ii13o","Type":"NodeParagraph","Properties":{"id":"20240201213541-c9ii13o","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"Stat 类中包含了一个数据节点的所有状态信息的字段，包括事务 ID（cZxid）、节点创建时间（ctime） 和子节点个数（numChildren） 等等。"}]},{"ID":"20240201213542-q09cgix","Type":"NodeParagraph","Properties":{"id":"20240201213542-q09cgix","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"下面我们来看一下每个 znode 状态信息究竟代表的是什么吧！（下面的内容来源于《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》，因为 Guide 确实也不是特别清楚，要学会参考资料的嘛！ ）："}]},{"ID":"20240201213543-jepusmu","Type":"NodeTable","Data":"| znode 状态信息 | 解释                                                                                                |\n| -------------- | --------------------------------------------------------------------------------------------------- |\n| cZxid          | create ZXID，即该数据节点被创建时的事务 id                                                          |\n| ctime          | create time，即该节点的创建时间                                                                     |\n| mZxid          | modified ZXID，即该节点最终一次更新时的事务 id                                                      |\n| mtime          | modified time，即该节点最后一次的更新时间                                                           |\n| pZxid          | 该节点的子节点列表最后一次修改时的事务 id，只有子节点列表变更才会更新 pZxid，子节点内容变更不会更新 |\n| cversion       | 子节点版本号，当前节点的子节点每次变化时值增加 1                                                    |\n| dataVersion    | 数据节点内容版本号，节点创建时为 0，每更新一次节点内容(不管内容有无变化)该版本号的值增加 1          |\n| aclVersion     | 节点的 ACL 版本号，表示该节点 ACL 信息变更次数                                                      |\n| ephemeralOwner | 创建该临时节点的会话的 sessionId；如果当前节点为持久节点，则 ephemeralOwner=0                       |\n| dataLength     | 数据节点内容长度                                                                                    |\n| numChildren    | 当前节点的子节点个数                                                                                |","TableAligns":[0,0],"Properties":{"id":"20240201213543-jepusmu","updated":"20240201213543"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"znode 状态信息"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"解释"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"cZxid"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"create ZXID，即该数据节点被创建时的事务 id"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ctime"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"create time，即该节点的创建时间"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"mZxid"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"modified ZXID，即该节点最终一次更新时的事务 id"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"mtime"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"modified time，即该节点最后一次的更新时间"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"pZxid"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"该节点的子节点列表最后一次修改时的事务 id，只有子节点列表变更才会更新 pZxid，子节点内容变更不会更新"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"cversion"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"子节点版本号，当前节点的子节点每次变化时值增加 1"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"dataVersion"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"数据节点内容版本号，节点创建时为 0，每更新一次节点内容(不管内容有无变化)该版本号的值增加 1"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"aclVersion"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"节点的 ACL 版本号，表示该节点 ACL 信息变更次数"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ephemeralOwner"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"创建该临时节点的会话的 sessionId；如果当前节点为持久节点，则 ephemeralOwner=0"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"dataLength"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"数据节点内容长度"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"numChildren"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"当前节点的子节点个数"}]}]}]},{"ID":"20240201213544-8zu8hjy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213544-8zu8hjy","updated":"20240201213544"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"版本（version）"}]},{"ID":"20240201213545-nze7l19","Type":"NodeParagraph","Properties":{"id":"20240201213545-nze7l19","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"在前面我们已经提到，对应于每个 znode，ZooKeeper 都会为其维护一个叫作 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Stat"},{"Type":"NodeText","Data":" 的数据结构，Stat 中记录了这个 znode 的三个相关的版本："}]},{"ID":"20240201213546-cxm5ou1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-cxm5ou1","updated":"20240201213546"},"Children":[{"ID":"20240201213547-zmcct94","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213547-zmcct94","updated":"20240201213547"},"Children":[{"ID":"20240201213548-ge35yac","Type":"NodeParagraph","Properties":{"id":"20240201213548-ge35yac","updated":"20240201213548"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"dataVersion"},{"Type":"NodeText","Data":"：当前 znode 节点的版本号"}]}]},{"ID":"20240201213549-s65h4on","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-s65h4on","updated":"20240201213549"},"Children":[{"ID":"20240201213550-61dyxor","Type":"NodeParagraph","Properties":{"id":"20240201213550-61dyxor","updated":"20240201213550"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"cversion"},{"Type":"NodeText","Data":"：当前 znode 子节点的版本"}]}]},{"ID":"20240201213551-0bo6pe8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213551-0bo6pe8","updated":"20240201213551"},"Children":[{"ID":"20240201213552-fg3jm9b","Type":"NodeParagraph","Properties":{"id":"20240201213552-fg3jm9b","updated":"20240201213552"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"aclVersion"},{"Type":"NodeText","Data":"：当前 znode 的 ACL 的版本。"}]}]}]},{"ID":"20240201213553-jnb4ubz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213553-jnb4ubz","updated":"20240201213553"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ACL（权限控制）"}]},{"ID":"20240201213554-8ll4022","Type":"NodeParagraph","Properties":{"id":"20240201213554-8ll4022","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 采用 ACL（AccessControlLists）策略来进行权限控制，类似于 UNIX 文件系统的权限控制。"}]},{"ID":"20240201213555-u2vpmrj","Type":"NodeParagraph","Properties":{"id":"20240201213555-u2vpmrj","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"对于 znode 操作的权限，ZooKeeper 提供了以下 5 种："}]},{"ID":"20240201213556-xbi83m4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-xbi83m4","updated":"20240201213556"},"Children":[{"ID":"20240201213557-1w9zqlf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213557-1w9zqlf","updated":"20240201213557"},"Children":[{"ID":"20240201213558-i6uim6o","Type":"NodeParagraph","Properties":{"id":"20240201213558-i6uim6o","updated":"20240201213558"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CREATE"},{"Type":"NodeText","Data":" : 能创建子节点"}]}]},{"ID":"20240201213559-3p3k0fi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213559-3p3k0fi","updated":"20240201213559"},"Children":[{"ID":"20240201213560-i7rptws","Type":"NodeParagraph","Properties":{"id":"20240201213560-i7rptws","updated":"20240201213560"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"READ"},{"Type":"NodeText","Data":"：能获取节点数据和列出其子节点"}]}]},{"ID":"20240201213561-h8sgv0x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213561-h8sgv0x","updated":"20240201213561"},"Children":[{"ID":"20240201213562-jybhjdp","Type":"NodeParagraph","Properties":{"id":"20240201213562-jybhjdp","updated":"20240201213562"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"WRITE"},{"Type":"NodeText","Data":" : 能设置/更新节点数据"}]}]},{"ID":"20240201213563-vmlmsr4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213563-vmlmsr4","updated":"20240201213563"},"Children":[{"ID":"20240201213564-9lgqrg0","Type":"NodeParagraph","Properties":{"id":"20240201213564-9lgqrg0","updated":"20240201213564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"DELETE"},{"Type":"NodeText","Data":" : 能删除子节点"}]}]},{"ID":"20240201213565-nkzlbxt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213565-nkzlbxt","updated":"20240201213565"},"Children":[{"ID":"20240201213566-3aywu2u","Type":"NodeParagraph","Properties":{"id":"20240201213566-3aywu2u","updated":"20240201213566"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ADMIN"},{"Type":"NodeText","Data":" : 能设置节点 ACL 的权限"}]}]}]},{"ID":"20240201213567-urlhl2k","Type":"NodeParagraph","Properties":{"id":"20240201213567-urlhl2k","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"其中尤其需要注意的是，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CREATE"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"DELETE"},{"Type":"NodeText","Data":" 这两种权限都是针对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"子节点"},{"Type":"NodeText","Data":" 的权限控制。"}]},{"ID":"20240201213568-l7u41f2","Type":"NodeParagraph","Properties":{"id":"20240201213568-l7u41f2","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"对于身份认证，提供了以下几种方式："}]},{"ID":"20240201213569-ve6yzj5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213569-ve6yzj5","updated":"20240201213569"},"Children":[{"ID":"20240201213570-1wjqpde","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-1wjqpde","updated":"20240201213570"},"Children":[{"ID":"20240201213571-8r97si7","Type":"NodeParagraph","Properties":{"id":"20240201213571-8r97si7","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"world"},{"Type":"NodeText","Data":"：默认方式，所有用户都可无条件访问。"}]}]},{"ID":"20240201213572-umz80eg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-umz80eg","updated":"20240201213572"},"Children":[{"ID":"20240201213573-38f1n5k","Type":"NodeParagraph","Properties":{"id":"20240201213573-38f1n5k","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"auth"},{"Type":"NodeText","Data":" :不使用任何 id，代表任何已认证的用户。"}]}]},{"ID":"20240201213574-spg3ux8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-spg3ux8","updated":"20240201213574"},"Children":[{"ID":"20240201213575-3er7t5a","Type":"NodeParagraph","Properties":{"id":"20240201213575-3er7t5a","updated":"20240201213575"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"digest"},{"Type":"NodeText","Data":" :用户名:密码认证方式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"username:password"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213576-il69b6b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-il69b6b","updated":"20240201213576"},"Children":[{"ID":"20240201213577-9r175vi","Type":"NodeParagraph","Properties":{"id":"20240201213577-9r175vi","updated":"20240201213577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ip"},{"Type":"NodeText","Data":" : 对指定 ip 进行限制。"}]}]}]},{"ID":"20240201213578-63tpnnc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213578-63tpnnc","updated":"20240201213578"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Watcher（事件监听器）"}]},{"ID":"20240201213579-h3it2u1","Type":"NodeParagraph","Properties":{"id":"20240201213579-h3it2u1","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"Watcher（事件监听器），是 ZooKeeper 中的一个很重要的特性。ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。"}]},{"ID":"20240201213580-1gufpof","Type":"NodeParagraph","Properties":{"id":"20240201213580-1gufpof","updated":"20240201213580"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ZooKeeper Watcher 机制","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/zookeeper/zookeeper-watcher.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213581-9vqtw7b","Type":"NodeParagraph","Properties":{"id":"20240201213581-9vqtw7b","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"破音：非常有用的一个特性，都拿出小本本记好了，后面用到 ZooKeeper 基本离不开 Watcher（事件监听器）机制。"}]},{"ID":"20240201213582-2v8v3t4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213582-2v8v3t4","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"会话（Session）"}]},{"ID":"20240201213583-nezutwe","Type":"NodeParagraph","Properties":{"id":"20240201213583-nezutwe","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"Session 可以看作是 ZooKeeper 服务器与客户端的之间的一个 TCP 长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能够向 ZooKeeper 服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的 Watcher 事件通知。"}]},{"ID":"20240201213584-cxfq2ni","Type":"NodeParagraph","Properties":{"id":"20240201213584-cxfq2ni","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"Session 有一个属性叫做："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionTimeout"},{"Type":"NodeText","Data":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionTimeout"},{"Type":"NodeText","Data":" 代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionTimeout"},{"Type":"NodeText","Data":"规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话仍然有效。"}]},{"ID":"20240201213585-qqxzm3j","Type":"NodeParagraph","Properties":{"id":"20240201213585-qqxzm3j","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionID"},{"Type":"NodeText","Data":"。由于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionID"},{"Type":"NodeText","Data":"是 ZooKeeper 会话的一个重要标识，许多与会话相关的运行机制都是基于这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionID"},{"Type":"NodeText","Data":" 的，因此，无论是哪台服务器为客户端分配的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sessionID"},{"Type":"NodeText","Data":"，都务必保证全局唯一。"}]},{"ID":"20240201213586-tpo8dkm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213586-tpo8dkm","updated":"20240201213586"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 集群"}]},{"ID":"20240201213587-5kg4ril","Type":"NodeParagraph","Properties":{"id":"20240201213587-5kg4ril","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。通常 3 台服务器就可以构成一个 ZooKeeper 集群了。ZooKeeper 官方提供的架构图就是一个 ZooKeeper 集群整体对外提供服务。"}]},{"ID":"20240201213588-hg5rr5c","Type":"NodeParagraph","Properties":{"id":"20240201213588-hg5rr5c","updated":"20240201213588"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ZooKeeper 集群架构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/zookeeper/zookeeper-cluster.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213589-95wzxia","Type":"NodeParagraph","Properties":{"id":"20240201213589-95wzxia","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"上图中每一个 Server 代表一个安装 ZooKeeper 服务的服务器。组成 ZooKeeper 服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都互相保持着通信。集群间通过 ZAB 协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。"}]},{"ID":"20240201213590-ihox9fc","Type":"NodeParagraph","Properties":{"id":"20240201213590-ihox9fc","updated":"20240201213590"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最典型集群模式：Master/Slave 模式（主备模式）"},{"Type":"NodeText","Data":"。在这种模式中，通常 Master 服务器作为主服务器提供写服务，其他的 Slave 服务器从服务器通过异步复制的方式获取 Master 服务器最新的数据提供读服务。"}]},{"ID":"20240201213591-cv5g113","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213591-cv5g113","updated":"20240201213591"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 集群角色"}]},{"ID":"20240201213592-l9zo0s6","Type":"NodeParagraph","Properties":{"id":"20240201213592-l9zo0s6","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"但是，在 ZooKeeper 中没有选择传统的 Master/Slave 概念，而是引入了 Leader、Follower 和 Observer 三种角色。如下图所示"}]},{"ID":"20240201213593-gakv6da","Type":"NodeParagraph","Properties":{"id":"20240201213593-gakv6da","updated":"20240201213593"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ZooKeeper 集群中角色","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/zookeeper/zookeeper-cluser-roles.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213594-qmcoxya","Type":"NodeParagraph","Properties":{"id":"20240201213594-qmcoxya","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 集群中的所有机器通过一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Leader 选举过程"},{"Type":"NodeText","Data":" 来选定一台称为 “"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Leader"},{"Type":"NodeText","Data":"” 的机器，Leader 既可以为客户端提供写服务又能提供读服务。除了 Leader 外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Follower"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Observer"},{"Type":"NodeText","Data":" 都只能提供读服务。Follower 和 Observer 唯一的区别在于 Observer 机器不参与 Leader 的选举过程，也不参与写操作的“过半写成功”策略，因此 Observer 机器可以在不影响写性能的情况下提升集群的读性能。"}]},{"ID":"20240201213595-idi870a","Type":"NodeTable","Data":"| 角色     | 说明                                                                                                                                                                              |\n| -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Leader   | 为客户端提供读和写的服务，负责投票的发起和决议，更新系统状态。                                                                                                                    |\n| Follower | 为客户端提供读服务，如果是写服务则转发给 Leader。参与选举过程中的投票。                                                                                                           |\n| Observer | 为客户端提供读服务，如果是写服务则转发给 Leader。不参与选举过程中的投票，也不参与“过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于 ZooKeeper3.3 系列新增的角色。 |","TableAligns":[0,0],"Properties":{"id":"20240201213595-idi870a","updated":"20240201213595"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"角色"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"说明"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Leader"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"为客户端提供读和写的服务，负责投票的发起和决议，更新系统状态。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Follower"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"为客户端提供读服务，如果是写服务则转发给 Leader。参与选举过程中的投票。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Observer"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"为客户端提供读服务，如果是写服务则转发给 Leader。不参与选举过程中的投票，也不参与“过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于 ZooKeeper3.3 系列新增的角色。"}]}]}]},{"ID":"20240201213596-jln8499","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213596-jln8499","updated":"20240201213596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 集群 Leader 选举过程"}]},{"ID":"20240201213597-i8cmv0v","Type":"NodeParagraph","Properties":{"id":"20240201213597-i8cmv0v","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入 Leader 选举过程，这个过程会选举产生新的 Leader 服务器。"}]},{"ID":"20240201213598-nx00d0y","Type":"NodeParagraph","Properties":{"id":"20240201213598-nx00d0y","updated":"20240201213598"},"Children":[{"Type":"NodeText","Data":"这个过程大致是这样的："}]},{"ID":"20240201213599-rg47qo3","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213599-rg47qo3","updated":"20240201213599"},"Children":[{"ID":"20240201213600-jfkdc4x","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213600-jfkdc4x","updated":"20240201213600"},"Children":[{"ID":"20240201213601-awv3clo","Type":"NodeParagraph","Properties":{"id":"20240201213601-awv3clo","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Leader election（选举阶段）"},{"Type":"NodeText","Data":"：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。"}]}]},{"ID":"20240201213602-ny8ugd3","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213602-ny8ugd3","updated":"20240201213602"},"Children":[{"ID":"20240201213603-4tlvtdq","Type":"NodeParagraph","Properties":{"id":"20240201213603-4tlvtdq","updated":"20240201213603"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Discovery（发现阶段）"},{"Type":"NodeText","Data":"：在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。"}]}]},{"ID":"20240201213604-v0snt9u","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213604-v0snt9u","updated":"20240201213604"},"Children":[{"ID":"20240201213605-zgso0vp","Type":"NodeParagraph","Properties":{"id":"20240201213605-zgso0vp","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Synchronization（同步阶段）"},{"Type":"NodeText","Data":"：同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准 leader 才会成为真正的 leader。"}]}]},{"ID":"20240201213606-xnathts","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213606-xnathts","updated":"20240201213606"},"Children":[{"ID":"20240201213607-2bz9orq","Type":"NodeParagraph","Properties":{"id":"20240201213607-2bz9orq","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Broadcast（广播阶段）"},{"Type":"NodeText","Data":"：到了这个阶段，ZooKeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。"}]}]}]},{"ID":"20240201213608-iibdw4t","Type":"NodeParagraph","Properties":{"id":"20240201213608-iibdw4t","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 集群中的服务器状态有下面几种："}]},{"ID":"20240201213609-qq6xvhq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213609-qq6xvhq","updated":"20240201213609"},"Children":[{"ID":"20240201213610-ov5u9ht","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-ov5u9ht","updated":"20240201213610"},"Children":[{"ID":"20240201213611-slmzk78","Type":"NodeParagraph","Properties":{"id":"20240201213611-slmzk78","updated":"20240201213611"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"LOOKING"},{"Type":"NodeText","Data":"：寻找 Leader。"}]}]},{"ID":"20240201213612-6h43rwn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213612-6h43rwn","updated":"20240201213612"},"Children":[{"ID":"20240201213613-ox30a5c","Type":"NodeParagraph","Properties":{"id":"20240201213613-ox30a5c","updated":"20240201213613"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"LEADING"},{"Type":"NodeText","Data":"：Leader 状态，对应的节点为 Leader。"}]}]},{"ID":"20240201213614-wevuhkb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213614-wevuhkb","updated":"20240201213614"},"Children":[{"ID":"20240201213615-1u9upuu","Type":"NodeParagraph","Properties":{"id":"20240201213615-1u9upuu","updated":"20240201213615"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"FOLLOWING"},{"Type":"NodeText","Data":"：Follower 状态，对应的节点为 Follower。"}]}]},{"ID":"20240201213616-nc7b0cb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-nc7b0cb","updated":"20240201213616"},"Children":[{"ID":"20240201213617-oxrizkz","Type":"NodeParagraph","Properties":{"id":"20240201213617-oxrizkz","updated":"20240201213617"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"OBSERVING"},{"Type":"NodeText","Data":"：Observer 状态，对应节点为 Observer，该节点不参与 Leader 选举。"}]}]}]},{"ID":"20240201213618-bold4xa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213618-bold4xa","updated":"20240201213618"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 集群为啥最好奇数台？"}]},{"ID":"20240201213619-c9ntp7c","Type":"NodeParagraph","Properties":{"id":"20240201213619-c9ntp7c","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 集群在宕掉几个 ZooKeeper 服务器之后，如果剩下的 ZooKeeper 服务器个数大于宕掉的个数的话整个 ZooKeeper 才依然可用。假如我们的集群中有 n 台 ZooKeeper 服务器，那么也就是剩下的服务数必须大于 n/2。先说一下结论，2n 和 2n-1 的容忍度是一样的，都是 n-1，大家可以先自己仔细想一想，这应该是一个很简单的数学问题了。"}]},{"ID":"20240201213620-cfc5r95","Type":"NodeParagraph","Properties":{"id":"20240201213620-cfc5r95","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"比如假如我们有 3 台，那么最大允许宕掉 1 台 ZooKeeper 服务器，如果我们有 4 台的的时候也同样只允许宕掉 1 台。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"假如我们有 5 台，那么最大允许宕掉 2 台 ZooKeeper 服务器，如果我们有 6 台的的时候也同样只允许宕掉 2 台。"}]},{"ID":"20240201213621-lfs7dom","Type":"NodeParagraph","Properties":{"id":"20240201213621-lfs7dom","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"综上，何必增加那一个不必要的 ZooKeeper 呢？"}]},{"ID":"20240201213622-rgc305g","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213622-rgc305g","updated":"20240201213622"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZooKeeper 选举的过半机制防止脑裂"}]},{"ID":"20240201213623-orkas8h","Type":"NodeParagraph","Properties":{"id":"20240201213623-orkas8h","updated":"20240201213623"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"何为集群脑裂？"}]},{"ID":"20240201213624-8j5i4sg","Type":"NodeParagraph","Properties":{"id":"20240201213624-8j5i4sg","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致“脑裂”的情况。"}]},{"ID":"20240201213625-71nqn99","Type":"NodeParagraph","Properties":{"id":"20240201213625-71nqn99","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"举例说明：比如现在有一个由 6 台服务器所组成的一个集群，部署在了 2 个机房，每个机房 3 台。正常情况下只有 1 个 leader，但是当两个机房中间网络断开的时候，每个机房的 3 台服务器都会认为另一个机房的 3 台服务器下线，而选出自己的 leader 并对外提供服务。若没有过半机制，当网络恢复的时候会发现有 2 个 leader。仿佛是 1 个大脑（leader）分散成了 2 个大脑，这就发生了脑裂现象。脑裂期间 2 个大脑都可能对外提供了服务，这将会带来数据一致性等问题。"}]},{"ID":"20240201213626-jfx3hxg","Type":"NodeParagraph","Properties":{"id":"20240201213626-jfx3hxg","updated":"20240201213626"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"过半机制是如何防止脑裂现象产生的？"}]},{"ID":"20240201213627-rby8vnr","Type":"NodeParagraph","Properties":{"id":"20240201213627-rby8vnr","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 的过半机制导致不可能产生 2 个 leader，因为少于等于一半是不可能产生 leader 的，这就使得不论机房的机器如何分配都不可能发生脑裂。"}]},{"ID":"20240201213628-yu3tcz0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213628-yu3tcz0","updated":"20240201213628"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZAB 协议和 Paxos 算法"}]},{"ID":"20240201213629-iza6w5x","Type":"NodeParagraph","Properties":{"id":"20240201213629-iza6w5x","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"Paxos 算法应该可以说是 ZooKeeper 的灵魂了。但是，ZooKeeper 并没有完全采用 Paxos 算法 ，而是使用 ZAB 协议作为其保证数据一致性的核心算法。另外，在 ZooKeeper 的官方文档中也指出，ZAB 协议并不像 Paxos 算法那样，是一种通用的分布式一致性算法，它是一种特别为 Zookeeper 设计的崩溃可恢复的原子消息广播算法。"}]},{"ID":"20240201213630-7g49mz8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213630-7g49mz8","updated":"20240201213630"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZAB 协议介绍"}]},{"ID":"20240201213631-mn6yo6v","Type":"NodeParagraph","Properties":{"id":"20240201213631-mn6yo6v","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"ZAB（ZooKeeper Atomic Broadcast 原子广播） 协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。 在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。"}]},{"ID":"20240201213632-k7wmmwy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213632-k7wmmwy","updated":"20240201213632"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ZAB 协议两种基本的模式：崩溃恢复和消息广播"}]},{"ID":"20240201213633-jxro532","Type":"NodeParagraph","Properties":{"id":"20240201213633-jxro532","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"ZAB 协议包括两种基本的模式，分别是"}]},{"ID":"20240201213634-kw2827e","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213634-kw2827e","updated":"20240201213634"},"Children":[{"ID":"20240201213635-tws9mr5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-tws9mr5","updated":"20240201213635"},"Children":[{"ID":"20240201213636-ewm0pwn","Type":"NodeParagraph","Properties":{"id":"20240201213636-ewm0pwn","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"崩溃恢复"},{"Type":"NodeText","Data":"：当整个服务框架在启动过程中，或是当 Leader 服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB 协议就会进入恢复模式并选举产生新的 Leader 服务器。当选举产生了新的 Leader 服务器，同时集群中已经有过半的机器与该 Leader 服务器完成了状态同步之后，ZAB 协议就会退出恢复模式。其中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和 Leader 服务器的数据状态保持一致"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213637-rmoeu7g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-rmoeu7g","updated":"20240201213637"},"Children":[{"ID":"20240201213638-5skc5u9","Type":"NodeParagraph","Properties":{"id":"20240201213638-5skc5u9","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息广播"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当集群中已经有过半的 Follower 服务器完成了和 Leader 服务器的状态同步，那么整个服务框架就可以进入消息广播模式了。"},{"Type":"NodeText","Data":" 当一台同样遵守 ZAB 协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个 Leader 服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到 Leader 所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。"}]}]}]},{"ID":"20240201213639-cpxdedr","Type":"NodeParagraph","Properties":{"id":"20240201213639-cpxdedr","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ZAB 协议\u0026amp;Paxos 算法"},{"Type":"NodeText","Data":" 需要讲和理解的东西太多了，具体可以看下面这几篇文章："}]},{"ID":"20240201213640-crw5hkz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-crw5hkz","updated":"20240201213640"},"Children":[{"ID":"20240201213641-ytynoev","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-ytynoev","updated":"20240201213641"},"Children":[{"ID":"20240201213642-6petjhr","Type":"NodeParagraph","Properties":{"id":"20240201213642-6petjhr","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/protocol/paxos-algorithm.html","TextMarkTextContent":"Paxos 算法详解"}]}]},{"ID":"20240201213643-4ymz31x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-4ymz31x","updated":"20240201213643"},"Children":[{"ID":"20240201213644-em906k1","Type":"NodeParagraph","Properties":{"id":"20240201213644-em906k1","updated":"20240201213644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://wingsxdu.com/posts/database/zookeeper/","TextMarkTextContent":"ZooKeeper 与 Zab 协议 · Analyze"}]}]},{"ID":"20240201213645-ic35b2n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-ic35b2n","updated":"20240201213645"},"Children":[{"ID":"20240201213646-cm5vcgn","Type":"NodeParagraph","Properties":{"id":"20240201213646-cm5vcgn","updated":"20240201213646"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/protocol/raft-algorithm.html","TextMarkTextContent":"Raft 算法详解"}]}]}]},{"ID":"20240201213647-0xbgebs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213647-0xbgebs","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213648-8xs4z6u","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213648-8xs4z6u","updated":"20240201213648"},"Children":[{"ID":"20240201213649-6juxoj5","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213649-6juxoj5","updated":"20240201213649"},"Children":[{"ID":"20240201213650-kylwv6z","Type":"NodeParagraph","Properties":{"id":"20240201213650-kylwv6z","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。"}]}]},{"ID":"20240201213651-cx19hae","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213651-cx19hae","updated":"20240201213651"},"Children":[{"ID":"20240201213652-t943ted","Type":"NodeParagraph","Properties":{"id":"20240201213652-t943ted","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。"}]}]},{"ID":"20240201213653-lhf3i59","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213653-lhf3i59","updated":"20240201213653"},"Children":[{"ID":"20240201213654-sil3gl7","Type":"NodeParagraph","Properties":{"id":"20240201213654-sil3gl7","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。"}]}]},{"ID":"20240201213655-8myh9yw","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213655-8myh9yw","updated":"20240201213655"},"Children":[{"ID":"20240201213656-l1g7ucm","Type":"NodeParagraph","Properties":{"id":"20240201213656-l1g7ucm","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）"}]}]},{"ID":"20240201213657-llggovr","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213657-llggovr","updated":"20240201213657"},"Children":[{"ID":"20240201213658-rnl2mr5","Type":"NodeParagraph","Properties":{"id":"20240201213658-rnl2mr5","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。"}]}]},{"ID":"20240201213659-2d2ad3k","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213659-2d2ad3k","updated":"20240201213659"},"Children":[{"ID":"20240201213660-6n6i371","Type":"NodeParagraph","Properties":{"id":"20240201213660-6n6i371","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。"}]}]}]},{"ID":"20240201213661-dqx6fyl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213661-dqx6fyl","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213662-5okmtxt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-5okmtxt","updated":"20240201213662"},"Children":[{"ID":"20240201213663-ly7f5rx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-ly7f5rx","updated":"20240201213663"},"Children":[{"ID":"20240201213664-zyjbc5j","Type":"NodeParagraph","Properties":{"id":"20240201213664-zyjbc5j","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》"}]}]}]},{"ID":"20240201213665-2vbgjlp","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-2vbgjlp","updated":"20240201213665"}}]}