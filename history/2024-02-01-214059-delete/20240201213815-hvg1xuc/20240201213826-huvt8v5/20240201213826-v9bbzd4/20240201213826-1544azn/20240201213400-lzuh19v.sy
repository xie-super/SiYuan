{"ID":"20240201213400-lzuh19v","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213400-lzuh19v","title":"distributed-id","updated":"20240201213400"},"Children":[{"ID":"20240201213401-v0bbuns","Type":"NodeThematicBreak","Properties":{"id":"20240201213401-v0bbuns","updated":"20240201213401"}},{"ID":"20240201213402-yax2nb8","Type":"NodeParagraph","Properties":{"id":"20240201213402-yax2nb8","updated":"20240201213402"},"Children":[{"Type":"NodeText","Data":"title: 分布式ID介绍\u0026实现方案总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"}]},{"ID":"20240201213403-y9j1he7","Type":"NodeThematicBreak","Properties":{"id":"20240201213403-y9j1he7","updated":"20240201213403"}},{"ID":"20240201213404-br2a5wn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213404-br2a5wn","updated":"20240201213404"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式 ID 介绍"}]},{"ID":"20240201213405-kb2482e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213405-kb2482e","updated":"20240201213405"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 ID？"}]},{"ID":"20240201213406-i923inm","Type":"NodeParagraph","Properties":{"id":"20240201213406-i923inm","updated":"20240201213406"},"Children":[{"Type":"NodeText","Data":"日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。"}]},{"ID":"20240201213407-jxf9dpb","Type":"NodeParagraph","Properties":{"id":"20240201213407-jxf9dpb","updated":"20240201213407"},"Children":[{"Type":"NodeText","Data":"我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应"}]},{"ID":"20240201213408-5h1scnc","Type":"NodeParagraph","Properties":{"id":"20240201213408-5h1scnc","updated":"20240201213408"},"Children":[{"Type":"NodeText","Data":"简单来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ID 就是数据的唯一标识"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213409-v71gtl3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213409-v71gtl3","updated":"20240201213409"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是分布式 ID？"}]},{"ID":"20240201213410-qdsnj0s","Type":"NodeParagraph","Properties":{"id":"20240201213410-qdsnj0s","updated":"20240201213410"},"Children":[{"Type":"NodeText","Data":"分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。"}]},{"ID":"20240201213411-qcl3s9v","Type":"NodeParagraph","Properties":{"id":"20240201213411-qcl3s9v","updated":"20240201213411"},"Children":[{"Type":"NodeText","Data":"我简单举一个分库分表的例子。"}]},{"ID":"20240201213412-ahmqevc","Type":"NodeParagraph","Properties":{"id":"20240201213412-ahmqevc","updated":"20240201213412"},"Children":[{"Type":"NodeText","Data":"我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。"}]},{"ID":"20240201213413-6oq6tdf","Type":"NodeParagraph","Properties":{"id":"20240201213413-6oq6tdf","updated":"20240201213413"},"Children":[{"Type":"NodeText","Data":"在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们如何为不同的数据节点生成全局唯一主键呢？"}]},{"ID":"20240201213414-2ti7nsy","Type":"NodeParagraph","Properties":{"id":"20240201213414-2ti7nsy","updated":"20240201213414"},"Children":[{"Type":"NodeText","Data":"这个时候就需要生成"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式 ID"},{"Type":"NodeText","Data":"了。"}]},{"ID":"20240201213415-m3chq6f","Type":"NodeParagraph","Properties":{"id":"20240201213415-m3chq6f","updated":"20240201213415"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213416-fd1kr5x","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213416-fd1kr5x","updated":"20240201213416"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式 ID 需要满足哪些要求?"}]},{"ID":"20240201213417-3duemtk","Type":"NodeParagraph","Properties":{"id":"20240201213417-3duemtk","updated":"20240201213417"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-requirements.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213418-m3zjbnx","Type":"NodeParagraph","Properties":{"id":"20240201213418-m3zjbnx","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。"}]},{"ID":"20240201213419-8ef8gy7","Type":"NodeParagraph","Properties":{"id":"20240201213419-8ef8gy7","updated":"20240201213419"},"Children":[{"Type":"NodeText","Data":"一个最基本的分布式 ID 需要满足下面这些要求："}]},{"ID":"20240201213420-m5llzet","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213420-m5llzet","updated":"20240201213420"},"Children":[{"ID":"20240201213421-5w7t6mx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213421-5w7t6mx","updated":"20240201213421"},"Children":[{"ID":"20240201213422-3qf8f2j","Type":"NodeParagraph","Properties":{"id":"20240201213422-3qf8f2j","updated":"20240201213422"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全局唯一"},{"Type":"NodeText","Data":"：ID 的全局唯一性肯定是首先要满足的！"}]}]},{"ID":"20240201213423-23l8q8m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213423-23l8q8m","updated":"20240201213423"},"Children":[{"ID":"20240201213424-9p897c2","Type":"NodeParagraph","Properties":{"id":"20240201213424-9p897c2","updated":"20240201213424"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高性能"},{"Type":"NodeText","Data":"：分布式 ID 的生成速度要快，对本地资源消耗要小。"}]}]},{"ID":"20240201213425-5rnth3p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213425-5rnth3p","updated":"20240201213425"},"Children":[{"ID":"20240201213426-dcxdpdf","Type":"NodeParagraph","Properties":{"id":"20240201213426-dcxdpdf","updated":"20240201213426"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高可用"},{"Type":"NodeText","Data":"：生成分布式 ID 的服务要保证可用性无限接近于 100%。"}]}]},{"ID":"20240201213427-w9tr5nq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213427-w9tr5nq","updated":"20240201213427"},"Children":[{"ID":"20240201213428-k1cu71h","Type":"NodeParagraph","Properties":{"id":"20240201213428-k1cu71h","updated":"20240201213428"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方便易用"},{"Type":"NodeText","Data":"：拿来即用，使用方便，快速接入！"}]}]}]},{"ID":"20240201213429-5ljwjnp","Type":"NodeParagraph","Properties":{"id":"20240201213429-5ljwjnp","updated":"20240201213429"},"Children":[{"Type":"NodeText","Data":"除了这些之外，一个比较好的分布式 ID 还应保证："}]},{"ID":"20240201213430-zrwi7fx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213430-zrwi7fx","updated":"20240201213430"},"Children":[{"ID":"20240201213431-eh6feul","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213431-eh6feul","updated":"20240201213431"},"Children":[{"ID":"20240201213432-u9yr1fh","Type":"NodeParagraph","Properties":{"id":"20240201213432-u9yr1fh","updated":"20240201213432"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全"},{"Type":"NodeText","Data":"：ID 中不包含敏感信息。"}]}]},{"ID":"20240201213433-y9692dw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213433-y9692dw","updated":"20240201213433"},"Children":[{"ID":"20240201213434-allh8ib","Type":"NodeParagraph","Properties":{"id":"20240201213434-allh8ib","updated":"20240201213434"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有序递增"},{"Type":"NodeText","Data":"：如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。"}]}]},{"ID":"20240201213435-dkjw9bm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213435-dkjw9bm","updated":"20240201213435"},"Children":[{"ID":"20240201213436-ozr2aqn","Type":"NodeParagraph","Properties":{"id":"20240201213436-ozr2aqn","updated":"20240201213436"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有具体的业务含义"},{"Type":"NodeText","Data":"：生成的 ID 如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过 ID 就能确定是哪个业务）。"}]}]},{"ID":"20240201213437-v7nes0b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213437-v7nes0b","updated":"20240201213437"},"Children":[{"ID":"20240201213438-e2w4rds","Type":"NodeParagraph","Properties":{"id":"20240201213438-e2w4rds","updated":"20240201213438"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"独立部署"},{"Type":"NodeText","Data":"：也就是分布式系统单独有一个发号器服务，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。"}]}]}]},{"ID":"20240201213439-87am0ra","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213439-87am0ra","updated":"20240201213439"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式 ID 常见解决方案"}]},{"ID":"20240201213440-x0uak3u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213440-x0uak3u","updated":"20240201213440"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据库"}]},{"ID":"20240201213441-ifps24y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213441-ifps24y","updated":"20240201213441"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据库主键自增"}]},{"ID":"20240201213442-ibsa1i6","Type":"NodeParagraph","Properties":{"id":"20240201213442-ibsa1i6","updated":"20240201213442"},"Children":[{"Type":"NodeText","Data":"这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的 ID。"}]},{"ID":"20240201213443-re686cb","Type":"NodeParagraph","Properties":{"id":"20240201213443-re686cb","updated":"20240201213443"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"数据库主键自增","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/the-primary-key-of-the-database-increases-automatically.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213444-irua1k2","Type":"NodeParagraph","Properties":{"id":"20240201213444-irua1k2","updated":"20240201213444"},"Children":[{"Type":"NodeText","Data":"以 MySQL 举例，我们通过下面的方式即可。"}]},{"ID":"20240201213445-iukdkmi","Type":"NodeParagraph","Properties":{"id":"20240201213445-iukdkmi","updated":"20240201213445"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.创建一个数据库表。"}]},{"ID":"20240201213446-rn5cq2v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213446-rn5cq2v","updated":"20240201213446"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CREATE TABLE `sequence_id` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `stub` char(10) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `stub` (`stub`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213447-lyzr0on","Type":"NodeParagraph","Properties":{"id":"20240201213447-lyzr0on","updated":"20240201213447"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"stub"},{"Type":"NodeText","Data":" 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"stub"},{"Type":"NodeText","Data":" 字段创建了唯一索引，保证其唯一性。"}]},{"ID":"20240201213448-oufzdwc","Type":"NodeParagraph","Properties":{"id":"20240201213448-oufzdwc","updated":"20240201213448"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"replace into"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 来插入数据。"}]},{"ID":"20240201213449-udt6gyh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213449-udt6gyh","updated":"20240201213449"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"BEGIN;\nREPLACE INTO sequence_id (stub) VALUES ('stub');\nSELECT LAST_INSERT_ID();\nCOMMIT;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213450-koivye2","Type":"NodeParagraph","Properties":{"id":"20240201213450-koivye2","updated":"20240201213450"},"Children":[{"Type":"NodeText","Data":"插入数据这里，我们没有使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"insert into"},{"Type":"NodeText","Data":" 而是使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"replace into"},{"Type":"NodeText","Data":" 来插入数据，具体步骤是这样的："}]},{"ID":"20240201213451-bfzhopu","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213451-bfzhopu","updated":"20240201213451"},"Children":[{"ID":"20240201213452-dc45bal","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213452-dc45bal","updated":"20240201213452"},"Children":[{"ID":"20240201213453-m0lmz2f","Type":"NodeParagraph","Properties":{"id":"20240201213453-m0lmz2f","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"第一步：尝试把数据插入到表中。"}]}]},{"ID":"20240201213454-s1k2fkb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213454-s1k2fkb","updated":"20240201213454"},"Children":[{"ID":"20240201213455-2lr7se2","Type":"NodeParagraph","Properties":{"id":"20240201213455-2lr7se2","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"第二步：如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。"}]}]}]},{"ID":"20240201213456-atpphj3","Type":"NodeParagraph","Properties":{"id":"20240201213456-atpphj3","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"这种方式的优缺点也比较明显："}]},{"ID":"20240201213457-u61vql0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213457-u61vql0","updated":"20240201213457"},"Children":[{"ID":"20240201213458-e6zdiuq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213458-e6zdiuq","updated":"20240201213458"},"Children":[{"ID":"20240201213459-3q8vbz6","Type":"NodeParagraph","Properties":{"id":"20240201213459-3q8vbz6","updated":"20240201213459"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：实现起来比较简单、ID 有序递增、存储消耗空间小"}]}]},{"ID":"20240201213460-op6x4y1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-op6x4y1","updated":"20240201213460"},"Children":[{"ID":"20240201213461-l7t7c0l","Type":"NodeParagraph","Properties":{"id":"20240201213461-l7t7c0l","updated":"20240201213461"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）、每次获取 ID 都要访问一次数据库（增加了对数据库的压力，获取速度也慢）"}]}]}]},{"ID":"20240201213462-xgggyi7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213462-xgggyi7","updated":"20240201213462"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据库号段模式"}]},{"ID":"20240201213463-ca4h8ft","Type":"NodeParagraph","Properties":{"id":"20240201213463-ca4h8ft","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"数据库主键自增这种模式，每次获取 ID 都要访问一次数据库，ID 需求比较大的时候，肯定是不行的。"}]},{"ID":"20240201213464-5c9eqnl","Type":"NodeParagraph","Properties":{"id":"20240201213464-5c9eqnl","updated":"20240201213464"},"Children":[{"Type":"NodeText","Data":"如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基于数据库的号段模式来生成分布式 ID。"}]},{"ID":"20240201213465-sioqnul","Type":"NodeParagraph","Properties":{"id":"20240201213465-sioqnul","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"数据库的号段模式也是目前比较主流的一种分布式 ID 生成方式。像滴滴开源的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/didi/tinyid/wiki/tinyid原理介绍","TextMarkTextContent":"Tinyid"},{"Type":"NodeText","Data":" 就是基于这种方式来做的。不过，TinyId 使用了双号段缓存、增加多 db 支持等方式来进一步优化。"}]},{"ID":"20240201213466-ga7bz0s","Type":"NodeParagraph","Properties":{"id":"20240201213466-ga7bz0s","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"以 MySQL 举例，我们通过下面的方式即可。"}]},{"ID":"20240201213467-wr50h97","Type":"NodeParagraph","Properties":{"id":"20240201213467-wr50h97","updated":"20240201213467"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1. 创建一个数据库表。"}]},{"ID":"20240201213468-m387u8h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213468-m387u8h","updated":"20240201213468"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CREATE TABLE `sequence_id_generator` (\n  `id` int(10) NOT NULL,\n  `current_max_id` bigint(20) NOT NULL COMMENT '当前最大id',\n  `step` int(10) NOT NULL COMMENT '号段的长度',\n  `version` int(20) NOT NULL COMMENT '版本号',\n  `biz_type`    int(20) NOT NULL COMMENT '业务类型',\n   PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213469-pmq4t7i","Type":"NodeParagraph","Properties":{"id":"20240201213469-pmq4t7i","updated":"20240201213469"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"current_max_id"},{"Type":"NodeText","Data":" 字段和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"step"},{"Type":"NodeText","Data":"字段主要用于获取批量 ID，获取的批量 id 为："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"current_max_id ~ current_max_id+step"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213470-6ouc9gv","Type":"NodeParagraph","Properties":{"id":"20240201213470-6ouc9gv","updated":"20240201213470"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"数据库号段模式","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/database-number-segment-mode.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213471-7pccjtt","Type":"NodeParagraph","Properties":{"id":"20240201213471-7pccjtt","updated":"20240201213471"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"version"},{"Type":"NodeText","Data":" 字段主要用于解决并发问题（乐观锁）,"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"biz_type"},{"Type":"NodeText","Data":" 主要用于表示业务类型。"}]},{"ID":"20240201213472-h04uono","Type":"NodeParagraph","Properties":{"id":"20240201213472-h04uono","updated":"20240201213472"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2. 先插入一行数据。"}]},{"ID":"20240201213473-tsl4sng","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213473-tsl4sng","updated":"20240201213473"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"INSERT INTO `sequence_id_generator` (`id`, `current_max_id`, `step`, `version`, `biz_type`)\nVALUES\n (1, 0, 100, 0, 101);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213474-11ar12w","Type":"NodeParagraph","Properties":{"id":"20240201213474-11ar12w","updated":"20240201213474"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3. 通过 SELECT 获取指定业务下的批量唯一 ID"}]},{"ID":"20240201213475-zy87osx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213475-zy87osx","updated":"20240201213475"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT `current_max_id`, `step`,`version` FROM `sequence_id_generator` where `biz_type` = 101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213476-sm8cuic","Type":"NodeParagraph","Properties":{"id":"20240201213476-sm8cuic","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"结果："}]},{"ID":"20240201213477-enszz96","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213477-enszz96","updated":"20240201213477"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"id current_max_id step version biz_type\n1 0 100 0 101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213478-wpqpbax","Type":"NodeParagraph","Properties":{"id":"20240201213478-wpqpbax","updated":"20240201213478"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4. 不够用的话，更新之后重新 SELECT 即可。"}]},{"ID":"20240201213479-2kbfcsw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213479-2kbfcsw","updated":"20240201213479"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"UPDATE sequence_id_generator SET current_max_id = 0+100, version=version+1 WHERE version = 0  AND `biz_type` = 101\nSELECT `current_max_id`, `step`,`version` FROM `sequence_id_generator` where `biz_type` = 101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213480-fyr0zj2","Type":"NodeParagraph","Properties":{"id":"20240201213480-fyr0zj2","updated":"20240201213480"},"Children":[{"Type":"NodeText","Data":"结果："}]},{"ID":"20240201213481-y59tr2h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213481-y59tr2h","updated":"20240201213481"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"id current_max_id step version biz_type\n1 100 100 1 101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213482-dtd68cv","Type":"NodeParagraph","Properties":{"id":"20240201213482-dtd68cv","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"相比于数据库主键自增的方式，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库的号段模式对于数据库的访问次数更少，数据库压力更小。"}]},{"ID":"20240201213483-baxkmin","Type":"NodeParagraph","Properties":{"id":"20240201213483-baxkmin","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"另外，为了避免单点问题，你可以从使用主从模式来提高可用性。"}]},{"ID":"20240201213484-sqnd7tm","Type":"NodeParagraph","Properties":{"id":"20240201213484-sqnd7tm","updated":"20240201213484"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库号段模式的优缺点:"}]},{"ID":"20240201213485-sbsa44a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213485-sbsa44a","updated":"20240201213485"},"Children":[{"ID":"20240201213486-mmf4xft","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213486-mmf4xft","updated":"20240201213486"},"Children":[{"ID":"20240201213487-o17fzy2","Type":"NodeParagraph","Properties":{"id":"20240201213487-o17fzy2","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：ID 有序递增、存储消耗空间小"}]}]},{"ID":"20240201213488-cuujz3x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213488-cuujz3x","updated":"20240201213488"},"Children":[{"ID":"20240201213489-ngbwxii","Type":"NodeParagraph","Properties":{"id":"20240201213489-ngbwxii","updated":"20240201213489"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）"}]}]}]},{"ID":"20240201213490-km722rb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213490-km722rb","updated":"20240201213490"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"NoSQL"}]},{"ID":"20240201213491-lcg74k2","Type":"NodeParagraph","Properties":{"id":"20240201213491-lcg74k2","updated":"20240201213491"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/nosql-distributed-id.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213492-uazf4rv","Type":"NodeParagraph","Properties":{"id":"20240201213492-uazf4rv","updated":"20240201213492"},"Children":[{"Type":"NodeText","Data":"一般情况下，NoSQL 方案使用 Redis 多一些。我们通过 Redis 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"incr"},{"Type":"NodeText","Data":" 命令即可实现对 id 原子顺序递增。"}]},{"ID":"20240201213493-lu9v89y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213493-lu9v89y","updated":"20240201213493"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e set sequence_id_biz_type 1\nOK\n127.0.0.1:6379\u003e incr sequence_id_biz_type\n(integer) 2\n127.0.0.1:6379\u003e get sequence_id_biz_type\n\"2\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213494-70vnua9","Type":"NodeParagraph","Properties":{"id":"20240201213494-70vnua9","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"为了提高可用性和并发，我们可以使用 Redis Cluster。Redis Cluster 是 Redis 官方提供的 Redis 集群解决方案（3.0+版本）。"}]},{"ID":"20240201213495-1b7jjkh","Type":"NodeParagraph","Properties":{"id":"20240201213495-1b7jjkh","updated":"20240201213495"},"Children":[{"Type":"NodeText","Data":"除了 Redis Cluster 之外，你也可以使用开源的 Redis 集群方案"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/CodisLabs/codis","TextMarkTextContent":"Codis"},{"Type":"NodeText","Data":" （大规模集群比如上百个节点的时候比较推荐）。"}]},{"ID":"20240201213496-mc17zi3","Type":"NodeParagraph","Properties":{"id":"20240201213496-mc17zi3","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"除了高可用和并发之外，我们知道 Redis 基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis 支持两种不同的持久化方式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快照（snapshotting，RDB）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"只追加文件（append-only file, AOF）"},{"Type":"NodeText","Data":"。 并且，Redis 4.0 开始支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RDB 和 AOF 的混合持久化"},{"Type":"NodeText","Data":"（默认关闭，可以通过配置项 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aof-use-rdb-preamble"},{"Type":"NodeText","Data":" 开启）。"}]},{"ID":"20240201213497-dzp31a9","Type":"NodeParagraph","Properties":{"id":"20240201213497-dzp31a9","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"关于 Redis 持久化，我这里就不过多介绍。不了解这部分内容的小伙伴，可以看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/redis/redis-persistence.html","TextMarkTextContent":"Redis 持久化机制详解"},{"Type":"NodeText","Data":"这篇文章。"}]},{"ID":"20240201213498-vk6uc0t","Type":"NodeParagraph","Properties":{"id":"20240201213498-vk6uc0t","updated":"20240201213498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 方案的优缺点："}]},{"ID":"20240201213499-hlaimag","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213499-hlaimag","updated":"20240201213499"},"Children":[{"ID":"20240201213500-i3dri8l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213500-i3dri8l","updated":"20240201213500"},"Children":[{"ID":"20240201213501-lduznag","Type":"NodeParagraph","Properties":{"id":"20240201213501-lduznag","updated":"20240201213501"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：性能不错并且生成的 ID 是有序递增的"}]}]},{"ID":"20240201213502-ehkde1c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-ehkde1c","updated":"20240201213502"},"Children":[{"ID":"20240201213503-wm7puxo","Type":"NodeParagraph","Properties":{"id":"20240201213503-wm7puxo","updated":"20240201213503"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：和数据库主键自增方案的缺点类似"}]}]}]},{"ID":"20240201213504-c21qenf","Type":"NodeParagraph","Properties":{"id":"20240201213504-c21qenf","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"除了 Redis 之外，MongoDB ObjectId 经常也会被拿来当做分布式 ID 的解决方案。"}]},{"ID":"20240201213505-mz8p2yc","Type":"NodeParagraph","Properties":{"id":"20240201213505-mz8p2yc","updated":"20240201213505"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/mongodb9-objectId-distributed-id.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213506-26r5umi","Type":"NodeParagraph","Properties":{"id":"20240201213506-26r5umi","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"MongoDB ObjectId 一共需要 12 个字节存储："}]},{"ID":"20240201213507-yfxbu3k","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213507-yfxbu3k","updated":"20240201213507"},"Children":[{"ID":"20240201213508-36ngxhe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213508-36ngxhe","updated":"20240201213508"},"Children":[{"ID":"20240201213509-r30ly9p","Type":"NodeParagraph","Properties":{"id":"20240201213509-r30ly9p","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"0~3：时间戳"}]}]},{"ID":"20240201213510-yo8ab9o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213510-yo8ab9o","updated":"20240201213510"},"Children":[{"ID":"20240201213511-g0hwgyl","Type":"NodeParagraph","Properties":{"id":"20240201213511-g0hwgyl","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"3~6：代表机器 ID"}]}]},{"ID":"20240201213512-6b8dnrj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213512-6b8dnrj","updated":"20240201213512"},"Children":[{"ID":"20240201213513-5l5vnob","Type":"NodeParagraph","Properties":{"id":"20240201213513-5l5vnob","updated":"20240201213513"},"Children":[{"Type":"NodeText","Data":"7~8：机器进程 ID"}]}]},{"ID":"20240201213514-zgjl4j5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213514-zgjl4j5","updated":"20240201213514"},"Children":[{"ID":"20240201213515-uml3htn","Type":"NodeParagraph","Properties":{"id":"20240201213515-uml3htn","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"9~11：自增值"}]}]}]},{"ID":"20240201213516-4aitufn","Type":"NodeParagraph","Properties":{"id":"20240201213516-4aitufn","updated":"20240201213516"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MongoDB 方案的优缺点："}]},{"ID":"20240201213517-iynaful","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213517-iynaful","updated":"20240201213517"},"Children":[{"ID":"20240201213518-fqv04cb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213518-fqv04cb","updated":"20240201213518"},"Children":[{"ID":"20240201213519-3gymmn2","Type":"NodeParagraph","Properties":{"id":"20240201213519-3gymmn2","updated":"20240201213519"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：性能不错并且生成的 ID 是有序递增的"}]}]},{"ID":"20240201213520-v41ct3s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213520-v41ct3s","updated":"20240201213520"},"Children":[{"ID":"20240201213521-ogreawm","Type":"NodeParagraph","Properties":{"id":"20240201213521-ogreawm","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）、有安全性问题（ID 生成有规律性）"}]}]}]},{"ID":"20240201213522-lcx2ewt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213522-lcx2ewt","updated":"20240201213522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"算法"}]},{"ID":"20240201213523-qi3u0u0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213523-qi3u0u0","updated":"20240201213523"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"UUID"}]},{"ID":"20240201213524-6va0m9j","Type":"NodeParagraph","Properties":{"id":"20240201213524-6va0m9j","updated":"20240201213524"},"Children":[{"Type":"NodeText","Data":"UUID 是 Universally Unique Identifier（通用唯一标识符） 的缩写。UUID 包含 32 个 16 进制数字（8-4-4-4-12）。"}]},{"ID":"20240201213525-pgw8ver","Type":"NodeParagraph","Properties":{"id":"20240201213525-pgw8ver","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"JDK 就提供了现成的生成 UUID 的方法，一行代码就行了。"}]},{"ID":"20240201213526-oeewfls","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213526-oeewfls","updated":"20240201213526"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa\nUUID.randomUUID()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213527-cb4szs2","Type":"NodeParagraph","Properties":{"id":"20240201213527-cb4szs2","updated":"20240201213527"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tools.ietf.org/html/rfc4122","TextMarkTextContent":"RFC 4122"},{"Type":"NodeText","Data":" 中关于 UUID 的示例是这样的："}]},{"ID":"20240201213528-if47l7j","Type":"NodeParagraph","Properties":{"id":"20240201213528-if47l7j","updated":"20240201213528"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rfc-4122-uuid.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213529-3nebyow","Type":"NodeParagraph","Properties":{"id":"20240201213529-3nebyow","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"我们这里重点关注一下这个 Version(版本)，不同的版本对应的 UUID 的生成规则是不同的。"}]},{"ID":"20240201213530-ybca6tk","Type":"NodeParagraph","Properties":{"id":"20240201213530-ybca6tk","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"5 种不同的 Version(版本)值分别对应的含义（参考"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/通用唯一识别码","TextMarkTextContent":"维基百科对于 UUID 的介绍"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213531-vbr5c0f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213531-vbr5c0f","updated":"20240201213531"},"Children":[{"ID":"20240201213532-vdz8hqs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213532-vdz8hqs","updated":"20240201213532"},"Children":[{"ID":"20240201213533-jjsvvly","Type":"NodeParagraph","Properties":{"id":"20240201213533-jjsvvly","updated":"20240201213533"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 1"},{"Type":"NodeText","Data":" : UUID 是根据时间和节点 ID（通常是 MAC 地址）生成；"}]}]},{"ID":"20240201213534-78dddy1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213534-78dddy1","updated":"20240201213534"},"Children":[{"ID":"20240201213535-8i4u2im","Type":"NodeParagraph","Properties":{"id":"20240201213535-8i4u2im","updated":"20240201213535"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 2"},{"Type":"NodeText","Data":" : UUID 是根据标识符（通常是组或用户 ID）、时间和节点 ID 生成；"}]}]},{"ID":"20240201213536-cwc8okn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213536-cwc8okn","updated":"20240201213536"},"Children":[{"ID":"20240201213537-kluel2y","Type":"NodeParagraph","Properties":{"id":"20240201213537-kluel2y","updated":"20240201213537"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 3、版本 5"},{"Type":"NodeText","Data":" : 版本 5 - 确定性 UUID 通过散列（hashing）名字空间（namespace）标识符和名称生成；"}]}]},{"ID":"20240201213538-7t5e6ui","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213538-7t5e6ui","updated":"20240201213538"},"Children":[{"ID":"20240201213539-cfuralb","Type":"NodeParagraph","Properties":{"id":"20240201213539-cfuralb","updated":"20240201213539"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 4"},{"Type":"NodeText","Data":" : UUID 使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/随机性","TextMarkTextContent":"随机性"},{"Type":"NodeText","Data":"或"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/伪随机性","TextMarkTextContent":"伪随机性"},{"Type":"NodeText","Data":"生成。"}]}]}]},{"ID":"20240201213540-x6078s8","Type":"NodeParagraph","Properties":{"id":"20240201213540-x6078s8","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"下面是 Version 1 版本下生成的 UUID 的示例："}]},{"ID":"20240201213541-5p64ftn","Type":"NodeParagraph","Properties":{"id":"20240201213541-5p64ftn","updated":"20240201213541"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Version 1 版本下生成的 UUID 的示例","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/version1-uuid.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213542-d0qt2yn","Type":"NodeParagraph","Properties":{"id":"20240201213542-d0qt2yn","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"JDK 中通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UUID"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"randomUUID()"},{"Type":"NodeText","Data":" 方法生成的 UUID 的版本默认为 4。"}]},{"ID":"20240201213543-7iofnos","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213543-7iofnos","updated":"20240201213543"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"UUID uuid = UUID.randomUUID();\nint version = uuid.version();// 4\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213544-ul4gsjp","Type":"NodeParagraph","Properties":{"id":"20240201213544-ul4gsjp","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"另外，Variant(变体)也有 4 种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。"}]},{"ID":"20240201213545-890prgz","Type":"NodeParagraph","Properties":{"id":"20240201213545-890prgz","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"需要用到的时候，去看看维基百科对于 UUID 的 Variant(变体) 相关的介绍即可。"}]},{"ID":"20240201213546-c1f1qxz","Type":"NodeParagraph","Properties":{"id":"20240201213546-c1f1qxz","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"从上面的介绍中可以看出，UUID 可以保证唯一性，因为其生成规则包括 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的 UUID 是肯定不会重复的。"}]},{"ID":"20240201213547-z9xlp9r","Type":"NodeParagraph","Properties":{"id":"20240201213547-z9xlp9r","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"虽然，UUID 可以做到全局唯一性，但是，我们一般很少会使用它。"}]},{"ID":"20240201213548-bh2rqdv","Type":"NodeParagraph","Properties":{"id":"20240201213548-bh2rqdv","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"比如使用 UUID 作为 MySQL 数据库主键的时候就非常不合适："}]},{"ID":"20240201213549-5udypb4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-5udypb4","updated":"20240201213549"},"Children":[{"ID":"20240201213550-qog2gto","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213550-qog2gto","updated":"20240201213550"},"Children":[{"ID":"20240201213551-mw57yp7","Type":"NodeParagraph","Properties":{"id":"20240201213551-mw57yp7","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"数据库主键要尽量越短越好，而 UUID 的消耗的存储空间比较大（32 个字符串，128 位）。"}]}]},{"ID":"20240201213552-jhivzbs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-jhivzbs","updated":"20240201213552"},"Children":[{"ID":"20240201213553-wyor252","Type":"NodeParagraph","Properties":{"id":"20240201213553-wyor252","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"UUID 是无顺序的，InnoDB 引擎下，数据库主键的无序性会严重影响数据库性能。"}]}]}]},{"ID":"20240201213554-6ds3v5h","Type":"NodeParagraph","Properties":{"id":"20240201213554-6ds3v5h","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"最后，我们再简单分析一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"UUID 的优缺点"},{"Type":"NodeText","Data":" （面试的时候可能会被问到的哦！） :"}]},{"ID":"20240201213555-28jribf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213555-28jribf","updated":"20240201213555"},"Children":[{"ID":"20240201213556-f8no3r0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-f8no3r0","updated":"20240201213556"},"Children":[{"ID":"20240201213557-f9a7pa7","Type":"NodeParagraph","Properties":{"id":"20240201213557-f9a7pa7","updated":"20240201213557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：生成速度比较快、简单易用"}]}]},{"ID":"20240201213558-6yo56bt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-6yo56bt","updated":"20240201213558"},"Children":[{"ID":"20240201213559-5og582a","Type":"NodeParagraph","Properties":{"id":"20240201213559-5og582a","updated":"20240201213559"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：存储消耗空间大（32 个字符串，128 位）、 不安全（基于 MAC 地址生成 UUID 的算法会造成 MAC 地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）"}]}]}]},{"ID":"20240201213560-grp8xnd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213560-grp8xnd","updated":"20240201213560"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Snowflake(雪花算法)"}]},{"ID":"20240201213561-lu5u12i","Type":"NodeParagraph","Properties":{"id":"20240201213561-lu5u12i","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"Snowflake 是 Twitter 开源的分布式 ID 生成算法。Snowflake 由 64 bit 的二进制数字组成，这 64bit 的二进制被分成了几部分，每一部分存储的数据都有特定的含义："}]},{"ID":"20240201213562-oghs3dc","Type":"NodeParagraph","Properties":{"id":"20240201213562-oghs3dc","updated":"20240201213562"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Snowflake 组成","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/snowflake-distributed-id-schematic-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213563-4yappew","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213563-4yappew","updated":"20240201213563"},"Children":[{"ID":"20240201213564-o62nsgm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213564-o62nsgm","updated":"20240201213564"},"Children":[{"ID":"20240201213565-k9vc3uj","Type":"NodeParagraph","Properties":{"id":"20240201213565-k9vc3uj","updated":"20240201213565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"sign(1bit)"},{"Type":"NodeText","Data":":符号位（标识正负），始终为 0，代表生成的 ID 为正数。"}]}]},{"ID":"20240201213566-dgna1xr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-dgna1xr","updated":"20240201213566"},"Children":[{"ID":"20240201213567-fm9wewu","Type":"NodeParagraph","Properties":{"id":"20240201213567-fm9wewu","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"timestamp (41 bits)"},{"Type":"NodeText","Data":":一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）"}]}]},{"ID":"20240201213568-imv36sf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-imv36sf","updated":"20240201213568"},"Children":[{"ID":"20240201213569-hnrssu0","Type":"NodeParagraph","Properties":{"id":"20240201213569-hnrssu0","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"datacenter id + worker id (10 bits)"},{"Type":"NodeText","Data":":一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群/机房的节点。"}]}]},{"ID":"20240201213570-j2ku5zw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-j2ku5zw","updated":"20240201213570"},"Children":[{"ID":"20240201213571-ohc799t","Type":"NodeParagraph","Properties":{"id":"20240201213571-ohc799t","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"sequence (12 bits)"},{"Type":"NodeText","Data":":一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。"}]}]}]},{"ID":"20240201213572-2knqceq","Type":"NodeParagraph","Properties":{"id":"20240201213572-2knqceq","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"在实际项目中，我们一般也会对 Snowflake 算法进行改造，最常见的就是在 Snowflake 算法生成的 ID 中加入业务类型信息。"}]},{"ID":"20240201213573-d31jwct","Type":"NodeParagraph","Properties":{"id":"20240201213573-d31jwct","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"我们再来看看 Snowflake 算法的优缺点："}]},{"ID":"20240201213574-loaiv1n","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-loaiv1n","updated":"20240201213574"},"Children":[{"ID":"20240201213575-wmh1cea","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-wmh1cea","updated":"20240201213575"},"Children":[{"ID":"20240201213576-loynttq","Type":"NodeParagraph","Properties":{"id":"20240201213576-loynttq","updated":"20240201213576"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"：生成速度比较快、生成的 ID 有序递增、比较灵活（可以对 Snowflake 算法进行简单的改造比如加入业务 ID）"}]}]},{"ID":"20240201213577-klycom1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-klycom1","updated":"20240201213577"},"Children":[{"ID":"20240201213578-ydo2jms","Type":"NodeParagraph","Properties":{"id":"20240201213578-ydo2jms","updated":"20240201213578"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"：需要解决重复 ID 问题（ID 生成依赖时间，在获取时间的时候，可能会出现时间回拨的问题，也就是服务器上的时间突然倒退到之前的时间，进而导致会产生重复 ID）、依赖机器 ID 对分布式环境不友好（当需要自动启停或增减机器时，固定的机器 ID 可能不够灵活）。"}]}]}]},{"ID":"20240201213579-3supuks","Type":"NodeParagraph","Properties":{"id":"20240201213579-3supuks","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"如果你想要使用 Snowflake 算法的话，一般不需要你自己再造轮子。有很多基于 Snowflake 算法的开源实现比如美团 的 Leaf、百度的 UidGenerator（后面会提到），并且这些开源实现对原有的 Snowflake 算法进行了优化，性能更优秀，还解决了 Snowflake 算法的时间回拨问题和依赖机器 ID 的问题。"}]},{"ID":"20240201213580-kblj47e","Type":"NodeParagraph","Properties":{"id":"20240201213580-kblj47e","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"并且，Seata 还提出了“改良版雪花算法”，针对原版雪花算法进行了一定的优化改良，解决了时间回拨问题，大幅提高的 QPS。具体介绍和改进原理，可以参考下面这两篇文章："}]},{"ID":"20240201213581-fuqu265","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-fuqu265","updated":"20240201213581"},"Children":[{"ID":"20240201213582-l7ypu0b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213582-l7ypu0b","updated":"20240201213582"},"Children":[{"ID":"20240201213583-lyu42nf","Type":"NodeParagraph","Properties":{"id":"20240201213583-lyu42nf","updated":"20240201213583"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://seata.io/zh-cn/blog/seata-analysis-UUID-generator.html","TextMarkTextContent":"Seata 基于改良版雪花算法的分布式 UUID 生成器分析"}]}]},{"ID":"20240201213584-oj7qq1p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213584-oj7qq1p","updated":"20240201213584"},"Children":[{"ID":"20240201213585-91hsp5b","Type":"NodeParagraph","Properties":{"id":"20240201213585-91hsp5b","updated":"20240201213585"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/thisiswhy/p/17611163.html","TextMarkTextContent":"在开源项目中看到一个改良版的雪花算法，现在它是你的了。"}]}]}]},{"ID":"20240201213586-0yp2vxl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213586-0yp2vxl","updated":"20240201213586"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"开源框架"}]},{"ID":"20240201213587-uzrq2of","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213587-uzrq2of","updated":"20240201213587"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"UidGenerator(百度)"}]},{"ID":"20240201213588-606ewwc","Type":"NodeParagraph","Properties":{"id":"20240201213588-606ewwc","updated":"20240201213588"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/baidu/uid-generator","TextMarkTextContent":"UidGenerator"},{"Type":"NodeText","Data":" 是百度开源的一款基于 Snowflake(雪花算法)的唯一 ID 生成器。"}]},{"ID":"20240201213589-h8k9iv0","Type":"NodeParagraph","Properties":{"id":"20240201213589-h8k9iv0","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"不过，UidGenerator 对 Snowflake(雪花算法)进行了改进，生成的唯一 ID 组成如下："}]},{"ID":"20240201213590-kb5vts0","Type":"NodeParagraph","Properties":{"id":"20240201213590-kb5vts0","updated":"20240201213590"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"UidGenerator 生成的 ID 组成","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-distributed-id-schematic-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213591-qx3p4nx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213591-qx3p4nx","updated":"20240201213591"},"Children":[{"ID":"20240201213592-atxwlyy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-atxwlyy","updated":"20240201213592"},"Children":[{"ID":"20240201213593-n8sv3u3","Type":"NodeParagraph","Properties":{"id":"20240201213593-n8sv3u3","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"sign(1bit)"},{"Type":"NodeText","Data":":符号位（标识正负），始终为 0，代表生成的 ID 为正数。"}]}]},{"ID":"20240201213594-qq30s4b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213594-qq30s4b","updated":"20240201213594"},"Children":[{"ID":"20240201213595-8vbb899","Type":"NodeParagraph","Properties":{"id":"20240201213595-8vbb899","updated":"20240201213595"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"delta seconds (28 bits)"},{"Type":"NodeText","Data":":当前时间，相对于时间基点\"2016-05-20\"的增量值，单位：秒，最多可支持约 8.7 年"}]}]},{"ID":"20240201213596-5kzm4f1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213596-5kzm4f1","updated":"20240201213596"},"Children":[{"ID":"20240201213597-lfqk0xz","Type":"NodeParagraph","Properties":{"id":"20240201213597-lfqk0xz","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"worker id (22 bits)"},{"Type":"NodeText","Data":":机器 id，最多可支持约 420w 次机器启动。内置实现为在启动时由数据库分配，默认分配策略为用后即弃，后续可提供复用策略。"}]}]},{"ID":"20240201213598-dr2ukzs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213598-dr2ukzs","updated":"20240201213598"},"Children":[{"ID":"20240201213599-ev36mip","Type":"NodeParagraph","Properties":{"id":"20240201213599-ev36mip","updated":"20240201213599"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"sequence (13 bits)"},{"Type":"NodeText","Data":":每秒下的并发序列，13 bits 可支持每秒 8192 个并发。"}]}]}]},{"ID":"20240201213600-xvjpjr4","Type":"NodeParagraph","Properties":{"id":"20240201213600-xvjpjr4","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"可以看出，和原始 Snowflake(雪花算法)生成的唯一 ID 的组成不太一样。并且，上面这些参数我们都可以自定义。"}]},{"ID":"20240201213601-e7s1zyo","Type":"NodeParagraph","Properties":{"id":"20240201213601-e7s1zyo","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"UidGenerator 官方文档中的介绍如下："}]},{"ID":"20240201213602-f8y828d","Type":"NodeParagraph","Properties":{"id":"20240201213602-f8y828d","updated":"20240201213602"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/uidgenerator-introduction-official-documents.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213603-w52slpb","Type":"NodeParagraph","Properties":{"id":"20240201213603-w52slpb","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"自 18 年后，UidGenerator 就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md","TextMarkTextContent":"UidGenerator 的官方介绍"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213604-y90xfzz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213604-y90xfzz","updated":"20240201213604"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Leaf(美团)"}]},{"ID":"20240201213605-ymhd3re","Type":"NodeParagraph","Properties":{"id":"20240201213605-ymhd3re","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Meituan-Dianping/Leaf","TextMarkTextContent":"Leaf"},{"Type":"NodeText","Data":" 是美团开源的一个分布式 ID 解决方案 。这个项目的名字 Leaf（树叶） 起源于德国哲学家、数学家莱布尼茨的一句话：“There are no two identical leaves in the world”（世界上没有两片相同的树叶） 。这名字起得真心挺不错的，有点文艺青年那味了！"}]},{"ID":"20240201213606-4ylqmy5","Type":"NodeParagraph","Properties":{"id":"20240201213606-4ylqmy5","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"Leaf 提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"号段模式"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Snowflake(雪花算法)"},{"Type":"NodeText","Data":" 这两种模式来生成分布式 ID。并且，它支持双号段，还解决了雪花 ID 系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于 Zookeeper（使用 Zookeeper 作为注册中心，通过在特定路径下读取和创建子节点来管理 workId） 。"}]},{"ID":"20240201213607-a5fcpnm","Type":"NodeParagraph","Properties":{"id":"20240201213607-a5fcpnm","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"Leaf 的诞生主要是为了解决美团各个业务线生成分布式 ID 的方法多种多样以及不可靠的问题。"}]},{"ID":"20240201213608-e8re4l2","Type":"NodeParagraph","Properties":{"id":"20240201213608-e8re4l2","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"Leaf 对原有的号段模式进行改进，比如它这里增加了双号段避免获取 DB 在获取号段的时候阻塞请求获取 ID 的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2017/04/21/mt-leaf.html","TextMarkTextContent":"《Leaf——美团点评分布式 ID 生成系统》"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213609-mupgofk","Type":"NodeParagraph","Properties":{"id":"20240201213609-mupgofk","updated":"20240201213609"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-id/leaf-principle.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213610-ih3sglv","Type":"NodeParagraph","Properties":{"id":"20240201213610-ih3sglv","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"根据项目 README 介绍，在 4C8G VM 基础上，通过公司 RPC 方式调用，QPS 压测结果近 5w/s，TP999 1ms。"}]},{"ID":"20240201213611-2rfq1ax","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213611-2rfq1ax","updated":"20240201213611"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Tinyid(滴滴)"}]},{"ID":"20240201213612-ghnne7x","Type":"NodeParagraph","Properties":{"id":"20240201213612-ghnne7x","updated":"20240201213612"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/didi/tinyid","TextMarkTextContent":"Tinyid"},{"Type":"NodeText","Data":" 是滴滴开源的一款基于数据库号段模式的唯一 ID 生成器。"}]},{"ID":"20240201213613-5rf9u34","Type":"NodeParagraph","Properties":{"id":"20240201213613-5rf9u34","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"数据库号段模式的原理我们在上面已经介绍过了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Tinyid 有哪些亮点呢？"}]},{"ID":"20240201213614-756k5nw","Type":"NodeParagraph","Properties":{"id":"20240201213614-756k5nw","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于 Tinyid 的官方 wiki:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D","TextMarkTextContent":"《Tinyid 原理介绍》"},{"Type":"NodeText","Data":"）"}]},{"ID":"20240201213615-wlaljmj","Type":"NodeParagraph","Properties":{"id":"20240201213615-wlaljmj","updated":"20240201213615"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-id/tinyid-principle.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213616-pmm7aai","Type":"NodeParagraph","Properties":{"id":"20240201213616-pmm7aai","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"在这种架构模式下，我们通过 HTTP 请求向发号器服务申请唯一 ID。负载均衡 router 会把我们的请求送往其中的一台 tinyid-server。"}]},{"ID":"20240201213617-1t0lt7t","Type":"NodeParagraph","Properties":{"id":"20240201213617-1t0lt7t","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"这种方案有什么问题呢？在我看来（Tinyid 官方 wiki 也有介绍到），主要由下面这 2 个问题："}]},{"ID":"20240201213618-04wvfmw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213618-04wvfmw","updated":"20240201213618"},"Children":[{"ID":"20240201213619-aq803go","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213619-aq803go","updated":"20240201213619"},"Children":[{"ID":"20240201213620-xfsl633","Type":"NodeParagraph","Properties":{"id":"20240201213620-xfsl633","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"获取新号段的情况下，程序获取唯一 ID 的速度比较慢。"}]}]},{"ID":"20240201213621-oahe2ej","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-oahe2ej","updated":"20240201213621"},"Children":[{"ID":"20240201213622-wy3tuph","Type":"NodeParagraph","Properties":{"id":"20240201213622-wy3tuph","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"需要保证 DB 高可用，这个是比较麻烦且耗费资源的。"}]}]}]},{"ID":"20240201213623-6imhkb0","Type":"NodeParagraph","Properties":{"id":"20240201213623-6imhkb0","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"除此之外，HTTP 调用也存在网络开销。"}]},{"ID":"20240201213624-u6t0u2a","Type":"NodeParagraph","Properties":{"id":"20240201213624-u6t0u2a","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"Tinyid 的原理比较简单，其架构如下图所示："}]},{"ID":"20240201213625-v22mjg7","Type":"NodeParagraph","Properties":{"id":"20240201213625-v22mjg7","updated":"20240201213625"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-id/tinyid-architecture-design.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213626-uh7hjsc","Type":"NodeParagraph","Properties":{"id":"20240201213626-uh7hjsc","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"相比于基于数据库号段模式的简单架构方案，Tinyid 方案主要做了下面这些优化："}]},{"ID":"20240201213627-wx5du7s","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-wx5du7s","updated":"20240201213627"},"Children":[{"ID":"20240201213628-ti58wf7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-ti58wf7","updated":"20240201213628"},"Children":[{"ID":"20240201213629-0vyz75o","Type":"NodeParagraph","Properties":{"id":"20240201213629-0vyz75o","updated":"20240201213629"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"双号段缓存"},{"Type":"NodeText","Data":"：为了避免在获取新号段的情况下，程序获取唯一 ID 的速度比较慢。 Tinyid 中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。"}]}]},{"ID":"20240201213630-53h3279","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-53h3279","updated":"20240201213630"},"Children":[{"ID":"20240201213631-50w5gwe","Type":"NodeParagraph","Properties":{"id":"20240201213631-50w5gwe","updated":"20240201213631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增加多 db 支持"},{"Type":"NodeText","Data":"：支持多个 DB，并且，每个 DB 都能生成唯一 ID，提高了可用性。"}]}]},{"ID":"20240201213632-doa19wa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213632-doa19wa","updated":"20240201213632"},"Children":[{"ID":"20240201213633-vi0oitr","Type":"NodeParagraph","Properties":{"id":"20240201213633-vi0oitr","updated":"20240201213633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增加 tinyid-client"},{"Type":"NodeText","Data":"：纯本地操作，无 HTTP 请求消耗，性能和可用性都有很大提升。"}]}]}]},{"ID":"20240201213634-v7qaqqg","Type":"NodeParagraph","Properties":{"id":"20240201213634-v7qaqqg","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"Tinyid 的优缺点这里就不分析了，结合数据库号段模式的优缺点和 Tinyid 的原理就能知道。"}]},{"ID":"20240201213635-ehfp6rm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213635-ehfp6rm","updated":"20240201213635"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"IdGenerator(个人)"}]},{"ID":"20240201213636-pj5mveu","Type":"NodeParagraph","Properties":{"id":"20240201213636-pj5mveu","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"和 UidGenerator、Leaf 一样，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/yitter/IdGenerator","TextMarkTextContent":"IdGenerator"},{"Type":"NodeText","Data":" 也是一款基于 Snowflake(雪花算法)的唯一 ID 生成器。"}]},{"ID":"20240201213637-zz8tese","Type":"NodeParagraph","Properties":{"id":"20240201213637-zz8tese","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"IdGenerator 有如下特点："}]},{"ID":"20240201213638-qs7lj8c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-qs7lj8c","updated":"20240201213638"},"Children":[{"ID":"20240201213639-6x8qhd9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-6x8qhd9","updated":"20240201213639"},"Children":[{"ID":"20240201213640-951x7u8","Type":"NodeParagraph","Properties":{"id":"20240201213640-951x7u8","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"生成的唯一 ID 更短；"}]}]},{"ID":"20240201213641-ehjkqgb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-ehjkqgb","updated":"20240201213641"},"Children":[{"ID":"20240201213642-6mbtrbp","Type":"NodeParagraph","Properties":{"id":"20240201213642-6mbtrbp","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"兼容所有雪花算法（号段模式或经典模式，大厂或小厂）；"}]}]},{"ID":"20240201213643-c3uul5e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-c3uul5e","updated":"20240201213643"},"Children":[{"ID":"20240201213644-zjwe043","Type":"NodeParagraph","Properties":{"id":"20240201213644-zjwe043","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"原生支持 C#/Java/Go/C/Rust/Python/Node.js/PHP(C 扩展)/SQL/ 等语言，并提供多线程安全调用动态库（FFI）；"}]}]},{"ID":"20240201213645-z9ysla0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-z9ysla0","updated":"20240201213645"},"Children":[{"ID":"20240201213646-w0u56tj","Type":"NodeParagraph","Properties":{"id":"20240201213646-w0u56tj","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"解决了时间回拨问题，支持手工插入新 ID（当业务需要在历史时间生成新 ID 时，用本算法的预留位能生成 5000 个每秒）；"}]}]},{"ID":"20240201213647-u7f8ox3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-u7f8ox3","updated":"20240201213647"},"Children":[{"ID":"20240201213648-ivw9x96","Type":"NodeParagraph","Properties":{"id":"20240201213648-ivw9x96","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"不依赖外部存储系统;"}]}]},{"ID":"20240201213649-50xvigz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-50xvigz","updated":"20240201213649"},"Children":[{"ID":"20240201213650-jmaaop9","Type":"NodeParagraph","Properties":{"id":"20240201213650-jmaaop9","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"默认配置下，ID 可用 71000 年不重复。"}]}]}]},{"ID":"20240201213651-8uluriw","Type":"NodeParagraph","Properties":{"id":"20240201213651-8uluriw","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"IdGenerator 生成的唯一 ID 组成如下："}]},{"ID":"20240201213652-r9pu37r","Type":"NodeParagraph","Properties":{"id":"20240201213652-r9pu37r","updated":"20240201213652"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"IdGenerator 生成的 ID 组成","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/idgenerator-distributed-id-schematic-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213653-k6eo2t8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-k6eo2t8","updated":"20240201213653"},"Children":[{"ID":"20240201213654-vnuo4bw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-vnuo4bw","updated":"20240201213654"},"Children":[{"ID":"20240201213655-bwjpgyw","Type":"NodeParagraph","Properties":{"id":"20240201213655-bwjpgyw","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"timestamp (位数不固定)"},{"Type":"NodeText","Data":":时间差，是生成 ID 时的系统时间减去 BaseTime(基础时间，也称基点时间、原点时间、纪元时间，默认值为 2020 年) 的总时间差（毫秒单位）。初始为 5bits，随着运行时间而增加。如果觉得默认值太老，你可以重新设置，不过要注意，这个值以后最好不变。"}]}]},{"ID":"20240201213656-ibylzgm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-ibylzgm","updated":"20240201213656"},"Children":[{"ID":"20240201213657-boski1k","Type":"NodeParagraph","Properties":{"id":"20240201213657-boski1k","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"worker id (默认 6 bits)"},{"Type":"NodeText","Data":":机器 id，机器码，最重要参数，是区分不同机器或不同应用的唯一 ID，最大值由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WorkerIdBitLength"},{"Type":"NodeText","Data":"（默认 6）限定。如果一台服务器部署多个独立服务，需要为每个服务指定不同的 WorkerId。"}]}]},{"ID":"20240201213658-dn8fm9e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-dn8fm9e","updated":"20240201213658"},"Children":[{"ID":"20240201213659-rcu6n6x","Type":"NodeParagraph","Properties":{"id":"20240201213659-rcu6n6x","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"sequence (默认 6 bits)"},{"Type":"NodeText","Data":":序列数，是每毫秒下的序列数，由参数中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SeqBitLength"},{"Type":"NodeText","Data":"（默认 6）限定。增加 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SeqBitLength"},{"Type":"NodeText","Data":" 会让性能更高，但生成的 ID 也会更长。"}]}]}]},{"ID":"20240201213660-gz4xlqe","Type":"NodeParagraph","Properties":{"id":"20240201213660-gz4xlqe","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"Java 语言使用示例："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/yitter/idgenerator/tree/master/Java","TextMarkTextContent":"https://github.com/yitter/idgenerator/tree/master/Java"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213661-w7olost","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213661-w7olost","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213662-dpom03f","Type":"NodeParagraph","Properties":{"id":"20240201213662-dpom03f","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"通过这篇文章，我基本上已经把最常见的分布式 ID 生成方案都总结了一波。"}]},{"ID":"20240201213663-y0cjadm","Type":"NodeParagraph","Properties":{"id":"20240201213663-y0cjadm","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"除了上面介绍的方式之外，像 ZooKeeper 这类中间件也可以帮助我们生成唯一 ID。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"没有银弹，一定要结合实际项目来选择最适合自己的方案。"}]},{"ID":"20240201213664-0lhzb5a","Type":"NodeParagraph","Properties":{"id":"20240201213664-0lhzb5a","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"不过，本文主要介绍的是分布式 ID 的理论知识。在实际的面试中，面试官可能会结合具体的业务场景来考察你对分布式 ID 的设计，你可以参考这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./distributed-id-design","TextMarkTextContent":"分布式 ID 设计指南"},{"Type":"NodeText","Data":"（对于实际工作中分布式 ID 的设计也非常有帮助）。"}]},{"ID":"20240201213665-ppgt11a","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-ppgt11a","updated":"20240201213665"}}]}