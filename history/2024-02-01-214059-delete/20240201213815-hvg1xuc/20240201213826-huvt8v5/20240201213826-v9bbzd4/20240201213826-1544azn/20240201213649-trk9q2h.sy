{"ID":"20240201213649-trk9q2h","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213649-trk9q2h","title":"spring-cloud-gateway-questions","updated":"20240201213649"},"Children":[{"ID":"20240201213650-e93qmzl","Type":"NodeThematicBreak","Properties":{"id":"20240201213650-e93qmzl","updated":"20240201213650"}},{"ID":"20240201213651-rs2y430","Type":"NodeParagraph","Properties":{"id":"20240201213651-rs2y430","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"title: Spring Cloud Gateway常见问题总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"}]},{"ID":"20240201213652-yyd251g","Type":"NodeThematicBreak","Properties":{"id":"20240201213652-yyd251g","updated":"20240201213652"}},{"ID":"20240201213653-2wj89kp","Type":"NodeBlockquote","Properties":{"id":"20240201213653-2wj89kp","updated":"20240201213653"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213654-ocl68wp","Type":"NodeParagraph","Properties":{"id":"20240201213654-ocl68wp","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"本文重构完善自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/XjFYsP1IUqNzWqXZdJn-Aw","TextMarkTextContent":"6000 字 | 16 图 | 深入理解 Spring Cloud Gateway 的原理 - 悟空聊架构"},{"Type":"NodeText","Data":"这篇文章。"}]}]},{"ID":"20240201213655-6jby35i","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213655-6jby35i","updated":"20240201213655"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Spring Cloud Gateway？"}]},{"ID":"20240201213656-ybrd4nv","Type":"NodeParagraph","Properties":{"id":"20240201213656-ybrd4nv","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Zuul"},{"Type":"NodeText","Data":"。准确点来说，应该是 Zuul 1.x。Spring Cloud Gateway 起步要比 Zuul 2.x 更早。"}]},{"ID":"20240201213657-h1ghq8n","Type":"NodeParagraph","Properties":{"id":"20240201213657-h1ghq8n","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"为了提升网关的性能，Spring Cloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。"}]},{"ID":"20240201213658-6k2v5h5","Type":"NodeParagraph","Properties":{"id":"20240201213658-6k2v5h5","updated":"20240201213658"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway- demo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213659-xiz1k5s","Type":"NodeParagraph","Properties":{"id":"20240201213659-xiz1k5s","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，限流。"}]},{"ID":"20240201213660-we2cviw","Type":"NodeParagraph","Properties":{"id":"20240201213660-we2cviw","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。"}]},{"ID":"20240201213661-pdhck6y","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-pdhck6y","updated":"20240201213661"},"Children":[{"ID":"20240201213662-mvl9xlp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-mvl9xlp","updated":"20240201213662"},"Children":[{"ID":"20240201213663-ugwglv9","Type":"NodeParagraph","Properties":{"id":"20240201213663-ugwglv9","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"GitHub 地址： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/spring-cloud/spring-cloud-gateway","TextMarkTextContent":"https://github.com/spring-cloud/spring-cloud-gateway"}]}]},{"ID":"20240201213664-dcuaxrc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-dcuaxrc","updated":"20240201213664"},"Children":[{"ID":"20240201213665-s1d1zx3","Type":"NodeParagraph","Properties":{"id":"20240201213665-s1d1zx3","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"官网： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://spring.io/projects/spring-cloud-gateway","TextMarkTextContent":"https://spring.io/projects/spring-cloud-gateway"}]}]}]},{"ID":"20240201213666-3b3qv4l","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213666-3b3qv4l","updated":"20240201213666"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 的工作流程？"}]},{"ID":"20240201213667-t6nm6bz","Type":"NodeParagraph","Properties":{"id":"20240201213667-t6nm6bz","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 的工作流程如下图所示："}]},{"ID":"20240201213668-az5fv47","Type":"NodeParagraph","Properties":{"id":"20240201213668-az5fv47","updated":"20240201213668"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring Cloud Gateway 的工作流程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-workflow.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213669-ptxi80l","Type":"NodeParagraph","Properties":{"id":"20240201213669-ptxi80l","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"这是 Spring 官方博客中的一张图，原文地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter","TextMarkTextContent":"https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213670-doxdp8n","Type":"NodeParagraph","Properties":{"id":"20240201213670-doxdp8n","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"具体的流程分析："}]},{"ID":"20240201213671-zseqa58","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213671-zseqa58","updated":"20240201213671"},"Children":[{"ID":"20240201213672-rtvzs2j","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213672-rtvzs2j","updated":"20240201213672"},"Children":[{"ID":"20240201213673-6qqbxhz","Type":"NodeParagraph","Properties":{"id":"20240201213673-6qqbxhz","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"路由判断"},{"Type":"NodeText","Data":"：客户端的请求到达网关后，先经过 Gateway Handler Mapping 处理，这里面会做断言（Predicate）判断，看下符合哪个路由规则，这个路由映射后端的某个服务。"}]}]},{"ID":"20240201213674-bp1q6lm","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213674-bp1q6lm","updated":"20240201213674"},"Children":[{"ID":"20240201213675-gkbsfky","Type":"NodeParagraph","Properties":{"id":"20240201213675-gkbsfky","updated":"20240201213675"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求过滤"},{"Type":"NodeText","Data":"：然后请求到达 Gateway Web Handler，这里面有很多过滤器，组成过滤器链（Filter Chain），这些过滤器可以对请求进行拦截和修改，比如添加请求头、参数校验等等，有点像净化污水。然后将请求转发到实际的后端服务。这些过滤器逻辑上可以称作 Pre-Filters，Pre 可以理解为“在...之前”。"}]}]},{"ID":"20240201213676-lypnfz0","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213676-lypnfz0","updated":"20240201213676"},"Children":[{"ID":"20240201213677-v21m230","Type":"NodeParagraph","Properties":{"id":"20240201213677-v21m230","updated":"20240201213677"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"服务处理"},{"Type":"NodeText","Data":"：后端服务会对请求进行处理。"}]}]},{"ID":"20240201213678-77qgsez","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213678-77qgsez","updated":"20240201213678"},"Children":[{"ID":"20240201213679-sqzc0vi","Type":"NodeParagraph","Properties":{"id":"20240201213679-sqzc0vi","updated":"20240201213679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"响应过滤"},{"Type":"NodeText","Data":"：后端处理完结果后，返回给 Gateway 的过滤器再次做处理，逻辑上可以称作 Post-Filters，Post 可以理解为“在...之后”。"}]}]},{"ID":"20240201213680-fv7tnn8","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213680-fv7tnn8","updated":"20240201213680"},"Children":[{"ID":"20240201213681-w03dj4x","Type":"NodeParagraph","Properties":{"id":"20240201213681-w03dj4x","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"响应返回"},{"Type":"NodeText","Data":"：响应经过过滤处理后，返回给客户端。"}]}]}]},{"ID":"20240201213682-kzznyzm","Type":"NodeParagraph","Properties":{"id":"20240201213682-kzznyzm","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"总结：客户端的请求先通过匹配规则找到合适的路由，就能映射到具体的服务。然后请求经过过滤器处理后转发给具体的服务，服务处理后，再次经过过滤器处理，最后返回给客户端。"}]},{"ID":"20240201213683-5xqq34p","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213683-5xqq34p","updated":"20240201213683"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 的断言是什么？"}]},{"ID":"20240201213684-ucpv2ke","Type":"NodeParagraph","Properties":{"id":"20240201213684-ucpv2ke","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"断言（Predicate）这个词听起来极其深奥，它是一种编程术语，我们生活中根本就不会用它。说白了它就是对一个表达式进行 if 判断，结果为真或假，如果为真则做这件事，否则做那件事。"}]},{"ID":"20240201213685-o38bhrs","Type":"NodeParagraph","Properties":{"id":"20240201213685-o38bhrs","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"在 Gateway 中，如果客户端发送的请求满足了断言的条件，则映射到指定的路由器，就能转发到指定的服务上进行处理。"}]},{"ID":"20240201213686-pi2osjk","Type":"NodeParagraph","Properties":{"id":"20240201213686-pi2osjk","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"断言配置的示例如下，配置了两个路由规则，有一个 predicates 断言配置，当请求 url 中包含 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"api/thirdparty"},{"Type":"NodeText","Data":"，就匹配到了第一个路由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"route_thirdparty"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213687-49i13yx","Type":"NodeParagraph","Properties":{"id":"20240201213687-49i13yx","updated":"20240201213687"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"断言配置示例","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-example.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213688-c8c6zjz","Type":"NodeParagraph","Properties":{"id":"20240201213688-c8c6zjz","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"常见的路由断言规则如下图所示："}]},{"ID":"20240201213689-qm90alu","Type":"NodeParagraph","Properties":{"id":"20240201213689-qm90alu","updated":"20240201213689"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring Cloud GateWay 路由断言规则","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-rules.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213690-gmubpxz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213690-gmubpxz","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 的路由和断言是什么关系？"}]},{"ID":"20240201213691-gtpiyjs","Type":"NodeParagraph","Properties":{"id":"20240201213691-gtpiyjs","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"Route 路由和 Predicate 断言的对应关系如下：："}]},{"ID":"20240201213692-pe84wu1","Type":"NodeParagraph","Properties":{"id":"20240201213692-pe84wu1","updated":"20240201213692"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"路由和断言的对应关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-predicate-route.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213693-z5jhskv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-z5jhskv","updated":"20240201213693"},"Children":[{"ID":"20240201213694-mrj7mho","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-mrj7mho","updated":"20240201213694"},"Children":[{"ID":"20240201213695-myiksrq","Type":"NodeParagraph","Properties":{"id":"20240201213695-myiksrq","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一对多"},{"Type":"NodeText","Data":"：一个路由规则可以包含多个断言。如上图中路由 Route1 配置了三个断言 Predicate。"}]}]},{"ID":"20240201213696-xg33b74","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-xg33b74","updated":"20240201213696"},"Children":[{"ID":"20240201213697-crid4jj","Type":"NodeParagraph","Properties":{"id":"20240201213697-crid4jj","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同时满足"},{"Type":"NodeText","Data":"：如果一个路由规则中有多个断言，则需要同时满足才能匹配。如上图中路由 Route2 配置了两个断言，客户端发送的请求必须同时满足这两个断言，才能匹配路由 Route2。"}]}]},{"ID":"20240201213698-qxszo8e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-qxszo8e","updated":"20240201213698"},"Children":[{"ID":"20240201213699-zj67p4m","Type":"NodeParagraph","Properties":{"id":"20240201213699-zj67p4m","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第一个匹配成功"},{"Type":"NodeText","Data":"：如果一个请求可以匹配多个路由，则映射第一个匹配成功的路由。如上图所示，客户端发送的请求满足 Route3 和 Route4 的断言，但是 Route3 的配置在配置文件中靠前，所以只会匹配 Route3。"}]}]}]},{"ID":"20240201213700-hxv2o2z","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213700-hxv2o2z","updated":"20240201213700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 如何实现动态路由？"}]},{"ID":"20240201213701-ntzfa8i","Type":"NodeParagraph","Properties":{"id":"20240201213701-ntzfa8i","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"在使用 Spring Cloud Gateway 的时候，官方文档提供的方案总是基于配置文件或代码配置的方式。"}]},{"ID":"20240201213702-bcq6h28","Type":"NodeParagraph","Properties":{"id":"20240201213702-bcq6h28","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 作为微服务的入口，需要尽量避免重启，而现在配置更改需要重启服务不能满足实际生产过程中的动态刷新、实时变更的业务需求，所以我们需要在 Spring Cloud Gateway 运行时动态配置网关。"}]},{"ID":"20240201213703-y9unfcu","Type":"NodeParagraph","Properties":{"id":"20240201213703-y9unfcu","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"实现动态路由的方式有很多种，其中一种推荐的方式是基于 Nacos 注册中心来做。 Spring Cloud Gateway 可以从注册中心获取服务的元数据（例如服务名称、路径等），然后根据这些信息自动生成路由规则。这样，当你添加、移除或更新服务实例时，网关会自动感知并相应地调整路由规则，无需手动维护路由配置。"}]},{"ID":"20240201213704-8pn569g","Type":"NodeParagraph","Properties":{"id":"20240201213704-8pn569g","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"其实这些复杂的步骤并不需要我们手动实现，通过 Nacos Server 和 Spring Cloud Alibaba Nacos Config 即可实现配置的动态变更，官方文档地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config","TextMarkTextContent":"https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213705-7jf3y3n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213705-7jf3y3n","updated":"20240201213705"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 的过滤器有哪些？"}]},{"ID":"20240201213706-yww8z6y","Type":"NodeParagraph","Properties":{"id":"20240201213706-yww8z6y","updated":"20240201213706"},"Children":[{"Type":"NodeText","Data":"过滤器 Filter 按照请求和响应可以分为两种："}]},{"ID":"20240201213707-ab0ex97","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213707-ab0ex97","updated":"20240201213707"},"Children":[{"ID":"20240201213708-7bafnbm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-7bafnbm","updated":"20240201213708"},"Children":[{"ID":"20240201213709-yoq6fiy","Type":"NodeParagraph","Properties":{"id":"20240201213709-yoq6fiy","updated":"20240201213709"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Pre 类型"},{"Type":"NodeText","Data":"：在请求被转发到微服务之前，对请求进行拦截和修改，例如参数校验、权限校验、流量监控、日志输出以及协议转换等操作。"}]}]},{"ID":"20240201213710-oiex0db","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213710-oiex0db","updated":"20240201213710"},"Children":[{"ID":"20240201213711-kj8fyzn","Type":"NodeParagraph","Properties":{"id":"20240201213711-kj8fyzn","updated":"20240201213711"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Post 类型"},{"Type":"NodeText","Data":"：微服务处理完请求后，返回响应给网关，网关可以再次进行处理，例如修改响应内容或响应头、日志输出、流量监控等。"}]}]}]},{"ID":"20240201213712-vnk16th","Type":"NodeParagraph","Properties":{"id":"20240201213712-vnk16th","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"另外一种分类是按照过滤器 Filter 作用的范围进行划分："}]},{"ID":"20240201213713-7iazoyu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213713-7iazoyu","updated":"20240201213713"},"Children":[{"ID":"20240201213714-ejwe76w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213714-ejwe76w","updated":"20240201213714"},"Children":[{"ID":"20240201213715-s286v6e","Type":"NodeParagraph","Properties":{"id":"20240201213715-s286v6e","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"GatewayFilter"},{"Type":"NodeText","Data":"：局部过滤器，应用在单个路由或一组路由上的过滤器。标红色表示比较常用的过滤器。"}]}]},{"ID":"20240201213716-z5qc0ac","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213716-z5qc0ac","updated":"20240201213716"},"Children":[{"ID":"20240201213717-5vuh5gu","Type":"NodeParagraph","Properties":{"id":"20240201213717-5vuh5gu","updated":"20240201213717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"GlobalFilter"},{"Type":"NodeText","Data":"：全局过滤器，应用在所有路由上的过滤器。"}]}]}]},{"ID":"20240201213718-13wooz0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213718-13wooz0","updated":"20240201213718"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"局部过滤器"}]},{"ID":"20240201213719-t59byvk","Type":"NodeParagraph","Properties":{"id":"20240201213719-t59byvk","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"常见的局部过滤器如下图所示："}]},{"ID":"20240201213720-bh5om2z","Type":"NodeParagraph","Properties":{"id":"20240201213720-bh5om2z","updated":"20240201213720"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-gatewayfilters.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213721-nxgno71","Type":"NodeParagraph","Properties":{"id":"20240201213721-nxgno71","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"具体怎么用呢？这里有个示例，如果 URL 匹配成功，则去掉 URL 中的 “api”。"}]},{"ID":"20240201213722-zphts4i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eWFtbA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213722-zphts4i","updated":"20240201213722"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eWFtbA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"filters: #过滤器\n  - RewritePath=/api/(?\u003csegment\u003e.*),/$\\{segment} # 将跳转路径中包含的 “api” 替换成空\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213723-qb5ny6n","Type":"NodeParagraph","Properties":{"id":"20240201213723-qb5ny6n","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"当然我们也可以自定义过滤器，本篇不做展开。"}]},{"ID":"20240201213724-6o2txbd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213724-6o2txbd","updated":"20240201213724"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"全局过滤器"}]},{"ID":"20240201213725-y0sai3n","Type":"NodeParagraph","Properties":{"id":"20240201213725-y0sai3n","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"常见的全局过滤器如下图所示："}]},{"ID":"20240201213726-kkro5pr","Type":"NodeParagraph","Properties":{"id":"20240201213726-kkro5pr","updated":"20240201213726"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/spring-cloud-gateway-globalfilters.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213727-gb836jg","Type":"NodeParagraph","Properties":{"id":"20240201213727-gb836jg","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"全局过滤器最常见的用法是进行负载均衡。配置如下所示："}]},{"ID":"20240201213728-8k6ffo2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eWFtbA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213728-8k6ffo2","updated":"20240201213728"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eWFtbA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"spring:\n  cloud:\n    gateway:\n      routes:\n        - id: route_member # 第三方微服务路由规则\n          uri: lb://passjava-member # 负载均衡，将请求转发到注册中心注册的 passjava-member 服务\n          predicates: # 断言\n            - Path=/api/member/** # 如果前端请求路径包含 api/member，则应用这条路由规则\n          filters: #过滤器\n            - RewritePath=/api/(?\u003csegment\u003e.*),/$\\{segment} # 将跳转路径中包含的api替换成空\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213729-anjhpx8","Type":"NodeParagraph","Properties":{"id":"20240201213729-anjhpx8","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"这里有个关键字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lb"},{"Type":"NodeText","Data":"，用到了全局过滤器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LoadBalancerClientFilter"},{"Type":"NodeText","Data":"，当匹配到这个路由后，会将请求转发到 passjava-member 服务，且支持负载均衡转发，也就是先将 passjava-member 解析成实际的微服务的 host 和 port，然后再转发给实际的微服务。"}]},{"ID":"20240201213730-ak1xn4r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213730-ak1xn4r","updated":"20240201213730"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 支持限流吗？"}]},{"ID":"20240201213731-sa3d8i4","Type":"NodeParagraph","Properties":{"id":"20240201213731-sa3d8i4","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 自带了限流过滤器，对应的接口是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RateLimiter"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RateLimiter"},{"Type":"NodeText","Data":" 接口只有一个实现类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RedisRateLimiter"},{"Type":"NodeText","Data":" （基于 Redis + Lua 实现的限流），提供的限流功能比较简易且不易使用。"}]},{"ID":"20240201213732-i6h1hyg","Type":"NodeParagraph","Properties":{"id":"20240201213732-i6h1hyg","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"从 Sentinel 1.6.0 版本开始，Sentinel 引入了 Spring Cloud Gateway 的适配模块，可以提供两种资源维度的限流：route 维度和自定义 API 维度。也就是说，Spring Cloud Gateway 可以结合 Sentinel 实现更强大的网关流量控制。"}]},{"ID":"20240201213733-f1e80dl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213733-f1e80dl","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Cloud Gateway 如何自定义全局异常处理？"}]},{"ID":"20240201213734-rfk6wc3","Type":"NodeParagraph","Properties":{"id":"20240201213734-rfk6wc3","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"在 SpringBoot 项目中，我们捕获全局异常只需要在项目中配置 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@RestControllerAdvice"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":"就可以了。不过，这种方式在 Spring Cloud Gateway 下不适用。"}]},{"ID":"20240201213735-bpwd071","Type":"NodeParagraph","Properties":{"id":"20240201213735-bpwd071","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 提供了多种全局处理的方式，比较常用的一种是实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ErrorWebExceptionHandler"},{"Type":"NodeText","Data":"并重写其中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"handle"},{"Type":"NodeText","Data":"方法。"}]},{"ID":"20240201213736-m7z6c4z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213736-m7z6c4z","updated":"20240201213736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Order(-1)\n@Component\n@RequiredArgsConstructor\npublic class GlobalErrorWebExceptionHandler implements ErrorWebExceptionHandler {\n    private final ObjectMapper objectMapper;\n\n    @Override\n    public Mono\u003cVoid\u003e handle(ServerWebExchange exchange, Throwable ex) {\n    // ...\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213737-jelpzqx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213737-jelpzqx","updated":"20240201213737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213738-7oggv9r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-7oggv9r","updated":"20240201213738"},"Children":[{"ID":"20240201213739-l66tvv2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-l66tvv2","updated":"20240201213739"},"Children":[{"ID":"20240201213740-dse5qnl","Type":"NodeParagraph","Properties":{"id":"20240201213740-dse5qnl","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 官方文档："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cloud.spring.io/spring-cloud-gateway/reference/html/","TextMarkTextContent":"https://cloud.spring.io/spring-cloud-gateway/reference/html/"}]}]},{"ID":"20240201213741-39pscyh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-39pscyh","updated":"20240201213741"},"Children":[{"ID":"20240201213742-fe3j30w","Type":"NodeParagraph","Properties":{"id":"20240201213742-fe3j30w","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"Creating a custom Spring Cloud Gateway Filter："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter","TextMarkTextContent":"https://spring.io/blog/2022/08/26/creating-a-custom-spring-cloud-gateway-filter"}]}]},{"ID":"20240201213743-ptyz7wn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-ptyz7wn","updated":"20240201213743"},"Children":[{"ID":"20240201213744-trbhbfe","Type":"NodeParagraph","Properties":{"id":"20240201213744-trbhbfe","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"全局异常处理: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/347028665","TextMarkTextContent":"https://zhuanlan.zhihu.com/p/347028665"}]}]}]},{"ID":"20240201213745-qi8fvu7","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-qi8fvu7","updated":"20240201213745"}}]}