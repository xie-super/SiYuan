{"ID":"20240201213456-cxhyhts","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213456-cxhyhts","title":"dubbo","updated":"20240201213456"},"Children":[{"ID":"20240201213457-g3swo7a","Type":"NodeThematicBreak","Properties":{"id":"20240201213457-g3swo7a","updated":"20240201213457"}},{"ID":"20240201213458-2d8tufc","Type":"NodeParagraph","Properties":{"id":"20240201213458-2d8tufc","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"title: Dubbo常见问题总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 分布式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213459-xu39ir3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213459-xu39ir3","updated":"20240201213459"},"Children":[{"ID":"20240201213460-twxupwd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-twxupwd","updated":"20240201213460"},"Children":[{"ID":"20240201213461-2bxihbf","Type":"NodeParagraph","Properties":{"id":"20240201213461-2bxihbf","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"rpc"}]}]}]},{"ID":"20240201213462-a7qvaae","Type":"NodeThematicBreak","Properties":{"id":"20240201213462-a7qvaae","updated":"20240201213462"}},{"ID":"20240201213463-vmbq8ic","Type":"NodeParagraph","Properties":{"id":"20240201213463-vmbq8ic","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"::: tip"}]},{"ID":"20240201213464-q9resy2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-q9resy2","updated":"20240201213464"},"Children":[{"ID":"20240201213465-zec4bix","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-zec4bix","updated":"20240201213465"},"Children":[{"ID":"20240201213466-ib2oq9d","Type":"NodeParagraph","Properties":{"id":"20240201213466-ib2oq9d","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"Dubbo3 已经发布，这篇文章是基于 Dubbo2 写的。Dubbo3 基于 Dubbo2 演进而来，在保持原有核心功能特性的同时， Dubbo3 在易用性、超大规模微服务实践、云原生基础设施适配、安全设计等几大方向上进行了全面升级。"}]}]},{"ID":"20240201213467-pxdrbvb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213467-pxdrbvb","updated":"20240201213467"},"Children":[{"ID":"20240201213468-nn0iwoc","Type":"NodeParagraph","Properties":{"id":"20240201213468-nn0iwoc","updated":"20240201213468"},"Children":[{"Type":"NodeText","Data":"本文中的很多链接已经失效，主要原因是因为 Dubbo 官方文档进行了修改导致 URL 失效。"}]}]}]},{"ID":"20240201213469-ci2dsnw","Type":"NodeParagraph","Properties":{"id":"20240201213469-ci2dsnw","updated":"20240201213469"},"Children":[{"Type":"NodeText","Data":":::"}]},{"ID":"20240201213470-xcvueij","Type":"NodeParagraph","Properties":{"id":"20240201213470-xcvueij","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"这篇文章是我根据官方文档以及自己平时的使用情况，对 Dubbo 所做的一个总结。欢迎补充！"}]},{"ID":"20240201213471-8m69piw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213471-8m69piw","updated":"20240201213471"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 基础"}]},{"ID":"20240201213472-7wi2oib","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213472-7wi2oib","updated":"20240201213472"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Dubbo?"}]},{"ID":"20240201213473-04oxh76","Type":"NodeParagraph","Properties":{"id":"20240201213473-04oxh76","updated":"20240201213473"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Dubbo 官网","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rpc/dubbo.org-overview.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213474-kryihml","Type":"NodeParagraph","Properties":{"id":"20240201213474-kryihml","updated":"20240201213474"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/dubbo","TextMarkTextContent":"Apache Dubbo"},{"Type":"NodeText","Data":" |ˈdʌbəʊ| 是一款高性能、轻量级的开源 WEB 和 RPC 框架。"}]},{"ID":"20240201213475-fx16e7g","Type":"NodeParagraph","Properties":{"id":"20240201213475-fx16e7g","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dubbo.apache.org/zh/","TextMarkTextContent":"Dubbo 官方文档"},{"Type":"NodeText","Data":"的介绍，Dubbo 提供了六大核心能力"}]},{"ID":"20240201213476-9vjlox8","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213476-9vjlox8","updated":"20240201213476"},"Children":[{"ID":"20240201213477-5w012g5","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213477-5w012g5","updated":"20240201213477"},"Children":[{"ID":"20240201213478-l58oaah","Type":"NodeParagraph","Properties":{"id":"20240201213478-l58oaah","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"面向接口代理的高性能 RPC 调用。"}]}]},{"ID":"20240201213479-pnaufqc","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213479-pnaufqc","updated":"20240201213479"},"Children":[{"ID":"20240201213480-zy7ojwj","Type":"NodeParagraph","Properties":{"id":"20240201213480-zy7ojwj","updated":"20240201213480"},"Children":[{"Type":"NodeText","Data":"智能容错和负载均衡。"}]}]},{"ID":"20240201213481-kdx6yop","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213481-kdx6yop","updated":"20240201213481"},"Children":[{"ID":"20240201213482-qpva8j1","Type":"NodeParagraph","Properties":{"id":"20240201213482-qpva8j1","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"服务自动注册和发现。"}]}]},{"ID":"20240201213483-3s5p4cb","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213483-3s5p4cb","updated":"20240201213483"},"Children":[{"ID":"20240201213484-msrjlrr","Type":"NodeParagraph","Properties":{"id":"20240201213484-msrjlrr","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"高度可扩展能力。"}]}]},{"ID":"20240201213485-i1m0dtc","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213485-i1m0dtc","updated":"20240201213485"},"Children":[{"ID":"20240201213486-97hvfnw","Type":"NodeParagraph","Properties":{"id":"20240201213486-97hvfnw","updated":"20240201213486"},"Children":[{"Type":"NodeText","Data":"运行期流量调度。"}]}]},{"ID":"20240201213487-x6lrty5","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213487-x6lrty5","updated":"20240201213487"},"Children":[{"ID":"20240201213488-xf5rlt9","Type":"NodeParagraph","Properties":{"id":"20240201213488-xf5rlt9","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"可视化的服务治理与运维。"}]}]}]},{"ID":"20240201213489-7ki881y","Type":"NodeParagraph","Properties":{"id":"20240201213489-7ki881y","updated":"20240201213489"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Dubbo提供的六大核心能力","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/dubbo%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213490-il0fdx6","Type":"NodeParagraph","Properties":{"id":"20240201213490-il0fdx6","updated":"20240201213490"},"Children":[{"Type":"NodeText","Data":"简单来说就是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Dubbo 不光可以帮助我们调用远程服务，还提供了一些其他开箱即用的功能比如智能负载均衡。"}]},{"ID":"20240201213491-xhmtrg5","Type":"NodeParagraph","Properties":{"id":"20240201213491-xhmtrg5","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"Dubbo 目前已经有接近 34.4 k 的 Star 。"}]},{"ID":"20240201213492-59b41ts","Type":"NodeParagraph","Properties":{"id":"20240201213492-59b41ts","updated":"20240201213492"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2020 年度 OSC 中国开源项目"},{"Type":"NodeText","Data":" 评选活动中，Dubbo 位列开发框架和基础组件类项目的第 7 名。相比几年前来说，热度和排名有所下降。"}]},{"ID":"20240201213493-rm9u1he","Type":"NodeParagraph","Properties":{"id":"20240201213493-rm9u1he","updated":"20240201213493"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/image-20210107153159545.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213494-gqprj99","Type":"NodeParagraph","Properties":{"id":"20240201213494-gqprj99","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"Dubbo 是由阿里开源，后来加入了 Apache 。正是由于 Dubbo 的出现，才使得越来越多的公司开始使用以及接受分布式架构。"}]},{"ID":"20240201213495-fmmzhub","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213495-fmmzhub","updated":"20240201213495"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要用 Dubbo?"}]},{"ID":"20240201213496-1bmwzvb","Type":"NodeParagraph","Properties":{"id":"20240201213496-1bmwzvb","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"随着互联网的发展，网站的规模越来越大，用户数量越来越多。单一应用架构、垂直应用架构无法满足我们的需求，这个时候分布式服务架构就诞生了。"}]},{"ID":"20240201213497-i3hyljt","Type":"NodeParagraph","Properties":{"id":"20240201213497-i3hyljt","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"分布式服务架构下，系统被拆分成不同的服务比如短信服务、安全服务，每个服务独立提供系统的某个核心服务。"}]},{"ID":"20240201213498-yjpbrhc","Type":"NodeParagraph","Properties":{"id":"20240201213498-yjpbrhc","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"我们可以使用 Java RMI（Java Remote Method Invocation）、Hessian 这种支持远程调用的框架来简单地暴露和引用远程服务。但是！当服务越来越多之后，服务调用关系越来越复杂。当应用访问压力越来越大后，负载均衡以及服务监控的需求也迫在眉睫。我们可以用 F5 这类硬件来做负载均衡，但这样增加了成本，并且存在单点故障的风险。"}]},{"ID":"20240201213499-9z9i8ya","Type":"NodeParagraph","Properties":{"id":"20240201213499-9z9i8ya","updated":"20240201213499"},"Children":[{"Type":"NodeText","Data":"不过，Dubbo 的出现让上述问题得到了解决。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Dubbo 帮助我们解决了什么问题呢？"}]},{"ID":"20240201213500-chgz58s","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213500-chgz58s","updated":"20240201213500"},"Children":[{"ID":"20240201213501-cjtky41","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213501-cjtky41","updated":"20240201213501"},"Children":[{"ID":"20240201213502-99vxh5o","Type":"NodeParagraph","Properties":{"id":"20240201213502-99vxh5o","updated":"20240201213502"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"负载均衡"},{"Type":"NodeText","Data":"：同一个服务部署在不同的机器时该调用哪一台机器上的服务。"}]}]},{"ID":"20240201213503-edb48qz","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213503-edb48qz","updated":"20240201213503"},"Children":[{"ID":"20240201213504-xcm37q3","Type":"NodeParagraph","Properties":{"id":"20240201213504-xcm37q3","updated":"20240201213504"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"服务调用链路生成"},{"Type":"NodeText","Data":"：随着系统的发展，服务越来越多，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。Dubbo 可以为我们解决服务之间互相是如何调用的。"}]}]},{"ID":"20240201213505-9hjurgm","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213505-9hjurgm","updated":"20240201213505"},"Children":[{"ID":"20240201213506-k2zo7uw","Type":"NodeParagraph","Properties":{"id":"20240201213506-k2zo7uw","updated":"20240201213506"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"服务访问压力以及时长统计、资源调度和治理"},{"Type":"NodeText","Data":"：基于访问压力实时管理集群容量，提高集群利用率。"}]}]},{"ID":"20240201213507-yk92dcx","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213507-yk92dcx","updated":"20240201213507"},"Children":[{"ID":"20240201213508-mu4gccc","Type":"NodeParagraph","Properties":{"id":"20240201213508-mu4gccc","updated":"20240201213508"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213509-1cjcjpr","Type":"NodeParagraph","Properties":{"id":"20240201213509-1cjcjpr","updated":"20240201213509"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Dubbo 能力概览","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/rpc/dubbo-features-overview.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213510-5soh71c","Type":"NodeParagraph","Properties":{"id":"20240201213510-5soh71c","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"另外，Dubbo 除了能够应用在分布式系统中，也可以应用在现在比较火的微服务系统中。不过，由于 Spring Cloud 在微服务中应用更加广泛，所以，我觉得一般我们提 Dubbo 的话，大部分是分布式系统的情况。"}]},{"ID":"20240201213511-mnen4rv","Type":"NodeParagraph","Properties":{"id":"20240201213511-mnen4rv","updated":"20240201213511"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们刚刚提到了分布式这个概念，下面再给大家介绍一下什么是分布式？为什么要分布式？"}]},{"ID":"20240201213512-n56h6fx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213512-n56h6fx","updated":"20240201213512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式基础"}]},{"ID":"20240201213513-rg34ewx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213513-rg34ewx","updated":"20240201213513"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是分布式?"}]},{"ID":"20240201213514-c788gjs","Type":"NodeParagraph","Properties":{"id":"20240201213514-c788gjs","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"分布式或者说 SOA 分布式重要的就是面向服务，说简单的分布式就是我们把整个系统拆分成不同的服务然后将这些服务放在不同的服务器上减轻单体服务的压力提高并发量和性能。比如电商系统可以简单地拆分成订单系统、商品系统、登录系统等等，拆分之后的每个服务可以部署在不同的机器上，如果某一个服务的访问量比较大的话也可以将这个服务同时部署在多台机器上。"}]},{"ID":"20240201213515-otgiq9f","Type":"NodeParagraph","Properties":{"id":"20240201213515-otgiq9f","updated":"20240201213515"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"分布式事务示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213516-tflcx5b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213516-tflcx5b","updated":"20240201213516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要分布式?"}]},{"ID":"20240201213517-iichth9","Type":"NodeParagraph","Properties":{"id":"20240201213517-iichth9","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"从开发角度来讲单体应用的代码都集中在一起，而分布式系统的代码根据业务被拆分。所以，每个团队可以负责一个服务的开发，这样提升了开发效率。另外，代码根据业务拆分之后更加便于维护和扩展。"}]},{"ID":"20240201213518-fgtx484","Type":"NodeParagraph","Properties":{"id":"20240201213518-fgtx484","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"另外，我觉得将系统拆分成分布式之后不光便于系统扩展和维护，更能提高整个系统的性能。你想一想嘛？把整个系统拆分成不同的服务/系统，然后每个服务/系统 单独部署在一台服务器上，是不是很大程度上提高了系统性能呢？"}]},{"ID":"20240201213519-1qoe2i3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213519-1qoe2i3","updated":"20240201213519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 架构"}]},{"ID":"20240201213520-ma7ore8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213520-ma7ore8","updated":"20240201213520"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 架构中的核心角色有哪些？"}]},{"ID":"20240201213521-latx0us","Type":"NodeParagraph","Properties":{"id":"20240201213521-latx0us","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dubbo.apache.org/zh/docs/v2.7/dev/design/","TextMarkTextContent":"官方文档中的框架设计章节"},{"Type":"NodeText","Data":" 已经介绍的非常详细了，我这里把一些比较重要的点再提一下。"}]},{"ID":"20240201213522-gbn9vb8","Type":"NodeParagraph","Properties":{"id":"20240201213522-gbn9vb8","updated":"20240201213522"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"dubbo-relation","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/%E6%BA%90%E7%A0%81/dubbo/dubbo-relation.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213523-865l3l7","Type":"NodeParagraph","Properties":{"id":"20240201213523-865l3l7","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"上述节点简单介绍以及他们之间的关系："}]},{"ID":"20240201213524-tnl5w70","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213524-tnl5w70","updated":"20240201213524"},"Children":[{"ID":"20240201213525-77qzbjx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213525-77qzbjx","updated":"20240201213525"},"Children":[{"ID":"20240201213526-ill4z63","Type":"NodeParagraph","Properties":{"id":"20240201213526-ill4z63","updated":"20240201213526"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Container："},{"Type":"NodeText","Data":" 服务运行容器，负责加载、运行服务提供者。必须。"}]}]},{"ID":"20240201213527-7i1o2lu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213527-7i1o2lu","updated":"20240201213527"},"Children":[{"ID":"20240201213528-82u32py","Type":"NodeParagraph","Properties":{"id":"20240201213528-82u32py","updated":"20240201213528"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Provider："},{"Type":"NodeText","Data":" 暴露服务的服务提供方，会向注册中心注册自己提供的服务。必须。"}]}]},{"ID":"20240201213529-izai0xn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213529-izai0xn","updated":"20240201213529"},"Children":[{"ID":"20240201213530-shz1w2b","Type":"NodeParagraph","Properties":{"id":"20240201213530-shz1w2b","updated":"20240201213530"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Consumer："},{"Type":"NodeText","Data":" 调用远程服务的服务消费方，会向注册中心订阅自己所需的服务。必须。"}]}]},{"ID":"20240201213531-4ba6lgw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213531-4ba6lgw","updated":"20240201213531"},"Children":[{"ID":"20240201213532-21fsg4y","Type":"NodeParagraph","Properties":{"id":"20240201213532-21fsg4y","updated":"20240201213532"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Registry："},{"Type":"NodeText","Data":" 服务注册与发现的注册中心。注册中心会返回服务提供者地址列表给消费者。非必须。"}]}]},{"ID":"20240201213533-1xkrdy1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213533-1xkrdy1","updated":"20240201213533"},"Children":[{"ID":"20240201213534-b9gaeeo","Type":"NodeParagraph","Properties":{"id":"20240201213534-b9gaeeo","updated":"20240201213534"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Monitor："},{"Type":"NodeText","Data":" 统计服务的调用次数和调用时间的监控中心。服务消费者和提供者会定时发送统计数据到监控中心。 非必须。"}]}]}]},{"ID":"20240201213535-trtfzmt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213535-trtfzmt","updated":"20240201213535"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 中的 Invoker 概念了解么？"}]},{"ID":"20240201213536-4pev1k6","Type":"NodeParagraph","Properties":{"id":"20240201213536-4pev1k6","updated":"20240201213536"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 是 Dubbo 领域模型中非常重要的一个概念，你如果阅读过 Dubbo 源码的话，你会无数次看到这玩意。就比如下面我要说的负载均衡这块的源码中就有大量 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 的身影。"}]},{"ID":"20240201213537-caiwf0i","Type":"NodeParagraph","Properties":{"id":"20240201213537-caiwf0i","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"简单来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 就是 Dubbo 对远程调用的抽象。"}]},{"ID":"20240201213538-qvotnj2","Type":"NodeParagraph","Properties":{"id":"20240201213538-qvotnj2","updated":"20240201213538"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"dubbo_rpc_invoke.jpg","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/dubbo_rpc_invoke.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213539-s52szki","Type":"NodeParagraph","Properties":{"id":"20240201213539-s52szki","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"按照 Dubbo 官方的话来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 分为"}]},{"ID":"20240201213540-8gl1c59","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-8gl1c59","updated":"20240201213540"},"Children":[{"ID":"20240201213541-54o2ezp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-54o2ezp","updated":"20240201213541"},"Children":[{"ID":"20240201213542-ozncu82","Type":"NodeParagraph","Properties":{"id":"20240201213542-ozncu82","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"服务提供 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"}]}]},{"ID":"20240201213543-lha36dc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213543-lha36dc","updated":"20240201213543"},"Children":[{"ID":"20240201213544-sje87p6","Type":"NodeParagraph","Properties":{"id":"20240201213544-sje87p6","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"服务消费 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"}]}]}]},{"ID":"20240201213545-yl0apyg","Type":"NodeParagraph","Properties":{"id":"20240201213545-yl0apyg","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"假如我们需要调用一个远程方法，我们需要动态代理来屏蔽远程调用的细节吧！我们屏蔽掉的这些细节就依赖对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 实现， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 实现了真正的远程服务调用。"}]},{"ID":"20240201213546-rjxjmbj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213546-rjxjmbj","updated":"20240201213546"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 的工作原理了解么？"}]},{"ID":"20240201213547-auk3v4u","Type":"NodeParagraph","Properties":{"id":"20240201213547-auk3v4u","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"下图是 Dubbo 的整体设计，从下至上分为十层，各层均为单向依赖。"}]},{"ID":"20240201213548-41qu554","Type":"NodeBlockquote","Properties":{"id":"20240201213548-41qu554","updated":"20240201213548"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213549-lt4icno","Type":"NodeParagraph","Properties":{"id":"20240201213549-lt4icno","updated":"20240201213549"},"Children":[{"Type":"NodeText","Data":"左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。"}]}]},{"ID":"20240201213550-o3cbn7v","Type":"NodeParagraph","Properties":{"id":"20240201213550-o3cbn7v","updated":"20240201213550"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"dubbo-framework","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/source-code/dubbo/dubbo-framework.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213551-5ap5e4i","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213551-5ap5e4i","updated":"20240201213551"},"Children":[{"ID":"20240201213552-tqld2lz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-tqld2lz","updated":"20240201213552"},"Children":[{"ID":"20240201213553-5m4nkfg","Type":"NodeParagraph","Properties":{"id":"20240201213553-5m4nkfg","updated":"20240201213553"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"config 配置层"},{"Type":"NodeText","Data":"：Dubbo 相关的配置。支持代码配置，同时也支持基于 Spring 来做配置，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceConfig"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReferenceConfig"},{"Type":"NodeText","Data":" 为中心"}]}]},{"ID":"20240201213554-8ai48m9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213554-8ai48m9","updated":"20240201213554"},"Children":[{"ID":"20240201213555-zn7r07k","Type":"NodeParagraph","Properties":{"id":"20240201213555-zn7r07k","updated":"20240201213555"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"proxy 服务代理层"},{"Type":"NodeText","Data":"：调用远程方法像调用本地的方法一样简单的一个关键，真实调用过程依赖代理类，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceProxy"},{"Type":"NodeText","Data":" 为中心。"}]}]},{"ID":"20240201213556-alvvglb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-alvvglb","updated":"20240201213556"},"Children":[{"ID":"20240201213557-ghdlemw","Type":"NodeParagraph","Properties":{"id":"20240201213557-ghdlemw","updated":"20240201213557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"registry 注册中心层"},{"Type":"NodeText","Data":"：封装服务地址的注册与发现。"}]}]},{"ID":"20240201213558-y53mowp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-y53mowp","updated":"20240201213558"},"Children":[{"ID":"20240201213559-uj1wtki","Type":"NodeParagraph","Properties":{"id":"20240201213559-uj1wtki","updated":"20240201213559"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"cluster 路由层"},{"Type":"NodeText","Data":"：封装多个提供者的路由及负载均衡，并桥接注册中心，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invoker"},{"Type":"NodeText","Data":" 为中心。"}]}]},{"ID":"20240201213560-0dhvclp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-0dhvclp","updated":"20240201213560"},"Children":[{"ID":"20240201213561-kjammgv","Type":"NodeParagraph","Properties":{"id":"20240201213561-kjammgv","updated":"20240201213561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"monitor 监控层"},{"Type":"NodeText","Data":"：RPC 调用次数和调用时间监控，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Statistics"},{"Type":"NodeText","Data":" 为中心。"}]}]},{"ID":"20240201213562-zipyqks","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-zipyqks","updated":"20240201213562"},"Children":[{"ID":"20240201213563-2ff9b3m","Type":"NodeParagraph","Properties":{"id":"20240201213563-2ff9b3m","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"protocol 远程调用层"},{"Type":"NodeText","Data":"：封装 RPC 调用，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Invocation"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Result"},{"Type":"NodeText","Data":" 为中心。"}]}]},{"ID":"20240201213564-efj66vt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213564-efj66vt","updated":"20240201213564"},"Children":[{"ID":"20240201213565-gz15n2h","Type":"NodeParagraph","Properties":{"id":"20240201213565-gz15n2h","updated":"20240201213565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"exchange 信息交换层"},{"Type":"NodeText","Data":"：封装请求响应模式，同步转异步，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Request"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Response"},{"Type":"NodeText","Data":" 为中心。"}]}]},{"ID":"20240201213566-oim45bz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-oim45bz","updated":"20240201213566"},"Children":[{"ID":"20240201213567-5gjqcz2","Type":"NodeParagraph","Properties":{"id":"20240201213567-5gjqcz2","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"transport 网络传输层"},{"Type":"NodeText","Data":"：抽象 mina 和 netty 为统一接口，以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Message"},{"Type":"NodeText","Data":" 为中心。"}]}]},{"ID":"20240201213568-lwycwej","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-lwycwej","updated":"20240201213568"},"Children":[{"ID":"20240201213569-txdq4v9","Type":"NodeParagraph","Properties":{"id":"20240201213569-txdq4v9","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"serialize 数据序列化层"},{"Type":"NodeText","Data":"：对需要在网络传输的数据进行序列化。"}]}]}]},{"ID":"20240201213570-z65p2sv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213570-z65p2sv","updated":"20240201213570"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 的 SPI 机制了解么？ 如何扩展 Dubbo 中的默认实现？"}]},{"ID":"20240201213571-zr79xcq","Type":"NodeParagraph","Properties":{"id":"20240201213571-zr79xcq","updated":"20240201213571"},"Children":[{"Type":"NodeText","Data":"SPI（Service Provider Interface） 机制被大量用在开源项目中，它可以帮助我们动态寻找服务/功能（比如负载均衡策略）的实现。"}]},{"ID":"20240201213572-dn4qgxf","Type":"NodeParagraph","Properties":{"id":"20240201213572-dn4qgxf","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"SPI 的具体原理是这样的：我们将接口的实现类放在配置文件中，我们在程序运行过程中读取配置文件，通过反射加载实现类。这样，我们可以在运行的时候，动态替换接口的实现类。和 IoC 的解耦思想是类似的。"}]},{"ID":"20240201213573-ju13hh1","Type":"NodeParagraph","Properties":{"id":"20240201213573-ju13hh1","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"Java 本身就提供了 SPI 机制的实现。不过，Dubbo 没有直接用，而是对 Java 原生的 SPI 机制进行了增强，以便更好满足自己的需求。"}]},{"ID":"20240201213574-l9djvaf","Type":"NodeParagraph","Properties":{"id":"20240201213574-l9djvaf","updated":"20240201213574"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那我们如何扩展 Dubbo 中的默认实现呢？"}]},{"ID":"20240201213575-g75vgyg","Type":"NodeParagraph","Properties":{"id":"20240201213575-g75vgyg","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"比如说我们想要实现自己的负载均衡策略，我们创建对应的实现类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"XxxLoadBalance"},{"Type":"NodeText","Data":" 实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LoadBalance"},{"Type":"NodeText","Data":" 接口或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractLoadBalance"},{"Type":"NodeText","Data":" 类。"}]},{"ID":"20240201213576-k9hokpa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213576-k9hokpa","updated":"20240201213576"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.xxx;\n\nimport org.apache.dubbo.rpc.cluster.LoadBalance;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.RpcException;\n\npublic class XxxLoadBalance implements LoadBalance {\n    public \u003cT\u003e Invoker\u003cT\u003e select(List\u003cInvoker\u003cT\u003e\u003e invokers, Invocation invocation) throws RpcException {\n        // ...\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213577-x0rgknq","Type":"NodeParagraph","Properties":{"id":"20240201213577-x0rgknq","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"我们将这个实现类的路径写入到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"resources"},{"Type":"NodeText","Data":" 目录下的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance"},{"Type":"NodeText","Data":"文件中即可。"}]},{"ID":"20240201213578-kpjyuvy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213578-kpjyuvy","updated":"20240201213578"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"src\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxLoadBalance.java (实现LoadBalance接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.cluster.LoadBalance (纯文本文件，内容为：xxx=com.xxx.XxxLoadBalance)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213579-qrd0a2m","Type":"NodeParagraph","Properties":{"id":"20240201213579-qrd0a2m","updated":"20240201213579"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.apache.dubbo.rpc.cluster.LoadBalance"}]},{"ID":"20240201213580-44g9ym5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213580-44g9ym5","updated":"20240201213580"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"xxx=com.xxx.XxxLoadBalance\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213581-kxdstef","Type":"NodeParagraph","Properties":{"id":"20240201213581-kxdstef","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"其他还有很多可供扩展的选择，你可以在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cn.dubbo.apache.org/zh-cn/overview/home/","TextMarkTextContent":"官方文档"},{"Type":"NodeText","Data":"中找到。"}]},{"ID":"20240201213582-e6xn84u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213582-e6xn84u","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 的微内核架构了解吗？"}]},{"ID":"20240201213583-kl399y0","Type":"NodeParagraph","Properties":{"id":"20240201213583-kl399y0","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"Dubbo 采用 微内核（Microkernel） + 插件（Plugin） 模式，简单来说就是微内核架构。微内核只负责组装插件。"}]},{"ID":"20240201213584-6abj9m5","Type":"NodeParagraph","Properties":{"id":"20240201213584-6abj9m5","updated":"20240201213584"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"何为微内核架构呢？"},{"Type":"NodeText","Data":" 《软件架构模式》 这本书是这样介绍的："}]},{"ID":"20240201213585-70v7oap","Type":"NodeBlockquote","Properties":{"id":"20240201213585-70v7oap","updated":"20240201213585"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213586-pjy7cnh","Type":"NodeParagraph","Properties":{"id":"20240201213586-pjy7cnh","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"微内核架构模式（有时被称为插件架构模式）是实现基于产品应用程序的一种自然模式。基于产品的应用程序是已经打包好并且拥有不同版本，可作为第三方插件下载的。然后，很多公司也在开发、发布自己内部商业应用像有版本号、说明及可加载插件式的应用软件（这也是这种模式的特征）。微内核系统可让用户添加额外的应用如插件，到核心应用，继而提供了可扩展性和功能分离的用法。"}]}]},{"ID":"20240201213587-qq2t4ou","Type":"NodeParagraph","Properties":{"id":"20240201213587-qq2t4ou","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"微内核架构包含两类组件："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"核心系统（core system）"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"插件模块（plug-in modules）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213588-4ktckno","Type":"NodeParagraph","Properties":{"id":"20240201213588-4ktckno","updated":"20240201213588"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/source-code/dubbo/%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213589-pqk71se","Type":"NodeParagraph","Properties":{"id":"20240201213589-pqk71se","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"核心系统提供系统所需核心能力，插件模块可以扩展系统的功能。因此， 基于微内核架构的系统，非常易于扩展功能。"}]},{"ID":"20240201213590-mk3m480","Type":"NodeParagraph","Properties":{"id":"20240201213590-mk3m480","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"我们常见的一些 IDE，都可以看作是基于微内核架构设计的。绝大多数 IDE 比如 IDEA、VSCode 都提供了插件来丰富自己的功能。"}]},{"ID":"20240201213591-m0jablm","Type":"NodeParagraph","Properties":{"id":"20240201213591-m0jablm","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"正是因为 Dubbo 基于微内核架构，才使得我们可以随心所欲替换 Dubbo 的功能点。比如你觉得 Dubbo 的序列化模块实现的不满足自己要求，没关系啊！你自己实现一个序列化模块就好了啊！"}]},{"ID":"20240201213592-vmmuw58","Type":"NodeParagraph","Properties":{"id":"20240201213592-vmmuw58","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"通常情况下，微核心都会采用 Factory、IoC、OSGi 等方式管理插件生命周期。Dubbo 不想依赖 Spring 等 IoC 容器，也不想自己造一个小的 IoC 容器（过度设计），因此采用了一种最简单的 Factory 方式管理插件："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 标准的 SPI 扩展机制"},{"Type":"NodeText","Data":" （"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.ServiceLoader"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213593-e5v5urj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213593-e5v5urj","updated":"20240201213593"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"关于 Dubbo 架构的一些自测小问题"}]},{"ID":"20240201213594-fga93jk","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213594-fga93jk","updated":"20240201213594"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注册中心的作用了解么？"}]},{"ID":"20240201213595-k7dxzcu","Type":"NodeParagraph","Properties":{"id":"20240201213595-k7dxzcu","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互。"}]},{"ID":"20240201213596-pj2gbhv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213596-pj2gbhv","updated":"20240201213596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"服务提供者宕机后，注册中心会做什么？"}]},{"ID":"20240201213597-td1eqo3","Type":"NodeParagraph","Properties":{"id":"20240201213597-td1eqo3","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"注册中心会立即推送事件通知消费者。"}]},{"ID":"20240201213598-ywbtuye","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213598-ywbtuye","updated":"20240201213598"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"监控中心的作用呢？"}]},{"ID":"20240201213599-wlu0fiw","Type":"NodeParagraph","Properties":{"id":"20240201213599-wlu0fiw","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"监控中心负责统计各服务调用次数，调用时间等。"}]},{"ID":"20240201213600-eevp9z9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213600-eevp9z9","updated":"20240201213600"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注册中心和监控中心都宕机的话，服务都会挂掉吗？"}]},{"ID":"20240201213601-dgwo8fs","Type":"NodeParagraph","Properties":{"id":"20240201213601-dgwo8fs","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"不会。两者都宕机也不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。注册中心和监控中心都是可选的，服务消费者可以直连服务提供者。"}]},{"ID":"20240201213602-pncoh2s","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213602-pncoh2s","updated":"20240201213602"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 的负载均衡策略"}]},{"ID":"20240201213603-6h6hoj1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213603-6h6hoj1","updated":"20240201213603"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是负载均衡？"}]},{"ID":"20240201213604-zmlc2no","Type":"NodeParagraph","Properties":{"id":"20240201213604-zmlc2no","updated":"20240201213604"},"Children":[{"Type":"NodeText","Data":"先来看一下稍微官方点的解释。下面这段话摘自维基百科对负载均衡的定义："}]},{"ID":"20240201213605-n6hifjf","Type":"NodeBlockquote","Properties":{"id":"20240201213605-n6hifjf","updated":"20240201213605"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213606-k1ce5ri","Type":"NodeParagraph","Properties":{"id":"20240201213606-k1ce5ri","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"负载均衡改善了跨多个计算资源（例如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动）的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。使用具有负载平衡而不是单个组件的多个组件可以通过冗余提高可靠性和可用性。负载平衡通常涉及专用软件或硬件。"}]}]},{"ID":"20240201213607-jqwhupj","Type":"NodeParagraph","Properties":{"id":"20240201213607-jqwhupj","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"上面讲的大家可能不太好理解，再用通俗的话给大家说一下。"}]},{"ID":"20240201213608-dl3bmia","Type":"NodeParagraph","Properties":{"id":"20240201213608-dl3bmia","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。"}]},{"ID":"20240201213609-d66q0rr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213609-d66q0rr","updated":"20240201213609"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 提供的负载均衡策略有哪些？"}]},{"ID":"20240201213610-vihlabj","Type":"NodeParagraph","Properties":{"id":"20240201213610-vihlabj","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"在集群负载均衡时，Dubbo 提供了多种均衡策略，默认为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"random"},{"Type":"NodeText","Data":" 随机调用。我们还可以自行扩展负载均衡策略（参考 Dubbo SPI 机制）。"}]},{"ID":"20240201213611-5yrombt","Type":"NodeParagraph","Properties":{"id":"20240201213611-5yrombt","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"在 Dubbo 中，所有负载均衡实现类均继承自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractLoadBalance"},{"Type":"NodeText","Data":"，该类实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LoadBalance"},{"Type":"NodeText","Data":" 接口，并封装了一些公共的逻辑。"}]},{"ID":"20240201213612-z02c56d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213612-z02c56d","updated":"20240201213612"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public abstract class AbstractLoadBalance implements LoadBalance {\n\n    static int calculateWarmupWeight(int uptime, int warmup, int weight) {\n    }\n\n    @Override\n    public \u003cT\u003e Invoker\u003cT\u003e select(List\u003cInvoker\u003cT\u003e\u003e invokers, URL url, Invocation invocation) {\n    }\n\n    protected abstract \u003cT\u003e Invoker\u003cT\u003e doSelect(List\u003cInvoker\u003cT\u003e\u003e invokers, URL url, Invocation invocation);\n\n\n    int getWeight(Invoker\u003c?\u003e invoker, Invocation invocation) {\n\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213613-c3jgonn","Type":"NodeParagraph","Properties":{"id":"20240201213613-c3jgonn","updated":"20240201213613"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractLoadBalance"},{"Type":"NodeText","Data":" 的实现类有下面这些："}]},{"ID":"20240201213614-8lx6hwo","Type":"NodeParagraph","Properties":{"id":"20240201213614-8lx6hwo","updated":"20240201213614"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/image-20210326105257812.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213615-k29j8y0","Type":"NodeParagraph","Properties":{"id":"20240201213615-k29j8y0","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"官方文档对负载均衡这部分的介绍非常详细，推荐小伙伴们看看，地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#m-zhdocsv27devsourceloadbalance","TextMarkTextContent":"https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#m-zhdocsv27devsourceloadbalance"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213616-xpykd5e","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213616-xpykd5e","updated":"20240201213616"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RandomLoadBalance"}]},{"ID":"20240201213617-pw6rvpz","Type":"NodeParagraph","Properties":{"id":"20240201213617-pw6rvpz","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"根据权重随机选择（对加权随机算法的实现）。这是 Dubbo 默认采用的一种负载均衡策略。"}]},{"ID":"20240201213618-r446xvt","Type":"NodeParagraph","Properties":{"id":"20240201213618-r446xvt","updated":"20240201213618"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomLoadBalance"},{"Type":"NodeText","Data":" 具体的实现原理非常简单，假如有两个提供相同服务的服务器 S1,S2，S1 的权重为 7，S2 的权重为 3。"}]},{"ID":"20240201213619-qnmjndt","Type":"NodeParagraph","Properties":{"id":"20240201213619-qnmjndt","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"我们把这些权重值分布在坐标区间会得到：S1-\u003e[0, 7) ，S2-\u003e[7, 10)。我们生成[0, 10) 之间的随机数，随机数落到对应的区间，我们就选择对应的服务器来处理请求。"}]},{"ID":"20240201213620-vugg1ge","Type":"NodeParagraph","Properties":{"id":"20240201213620-vugg1ge","updated":"20240201213620"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"RandomLoadBalance","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/ RandomLoadBalance.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213621-knh834c","Type":"NodeParagraph","Properties":{"id":"20240201213621-knh834c","updated":"20240201213621"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomLoadBalance"},{"Type":"NodeText","Data":" 的源码非常简单，简单花几分钟时间看一下。"}]},{"ID":"20240201213622-47sm9tf","Type":"NodeBlockquote","Properties":{"id":"20240201213622-47sm9tf","updated":"20240201213622"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213623-ac2a5p5","Type":"NodeParagraph","Properties":{"id":"20240201213623-ac2a5p5","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"以下源码来自 Dubbo master 分支上的最新的版本 2.7.9。"}]}]},{"ID":"20240201213624-vnhdd7a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213624-vnhdd7a","updated":"20240201213624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class RandomLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"random\";\n\n    @Override\n    protected \u003cT\u003e Invoker\u003cT\u003e doSelect(List\u003cInvoker\u003cT\u003e\u003e invokers, URL url, Invocation invocation) {\n\n        int length = invokers.size();\n        boolean sameWeight = true;\n        int[] weights = new int[length];\n        int totalWeight = 0;\n        // 下面这个for循环的主要作用就是计算所有该服务的提供者的权重之和 totalWeight（），\n        // 除此之外，还会检测每个服务提供者的权重是否相同\n        for (int i = 0; i \u003c length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            totalWeight += weight;\n            weights[i] = totalWeight;\n            if (sameWeight \u0026\u0026 totalWeight != weight * (i + 1)) {\n                sameWeight = false;\n            }\n        }\n        if (totalWeight \u003e 0 \u0026\u0026 !sameWeight) {\n            // 随机生成一个 [0, totalWeight) 区间内的数字\n            int offset = ThreadLocalRandom.current().nextInt(totalWeight);\n            // 判断会落在哪个服务提供者的区间\n            for (int i = 0; i \u003c length; i++) {\n                if (offset \u003c weights[i]) {\n                    return invokers.get(i);\n                }\n            }\n\n        return invokers.get(ThreadLocalRandom.current().nextInt(length));\n    }\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213625-32cgllc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213625-32cgllc","updated":"20240201213625"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"LeastActiveLoadBalance"}]},{"ID":"20240201213626-j9r4cng","Type":"NodeParagraph","Properties":{"id":"20240201213626-j9r4cng","updated":"20240201213626"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LeastActiveLoadBalance"},{"Type":"NodeText","Data":" 直译过来就是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最小活跃数负载均衡"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213627-wcbnkjy","Type":"NodeParagraph","Properties":{"id":"20240201213627-wcbnkjy","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"这个名字起得有点不直观，不仔细看官方对活跃数的定义，你压根不知道这玩意是干嘛的。"}]},{"ID":"20240201213628-4j5cwmk","Type":"NodeParagraph","Properties":{"id":"20240201213628-4j5cwmk","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"我这么说吧！初始状态下所有服务提供者的活跃数均为 0（每个服务提供者的中特定方法都对应一个活跃数，我在后面的源码中会提到），每收到一个请求后，对应的服务提供者的活跃数 +1，当这个请求处理完之后，活跃数 -1。"}]},{"ID":"20240201213629-gnnlxk8","Type":"NodeParagraph","Properties":{"id":"20240201213629-gnnlxk8","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Dubbo 就认为谁的活跃数越少，谁的处理速度就越快，性能也越好，这样的话，我就优先把请求给活跃数少的服务提供者处理。"}]},{"ID":"20240201213630-29feejb","Type":"NodeParagraph","Properties":{"id":"20240201213630-29feejb","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果有多个服务提供者的活跃数相等怎么办？"}]},{"ID":"20240201213631-zljpsu0","Type":"NodeParagraph","Properties":{"id":"20240201213631-zljpsu0","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"很简单，那就再走一遍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomLoadBalance"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213632-45bt098","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213632-45bt098","updated":"20240201213632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    @Override\n    protected \u003cT\u003e Invoker\u003cT\u003e doSelect(List\u003cInvoker\u003cT\u003e\u003e invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        int leastActive = -1;\n        int leastCount = 0;\n        int[] leastIndexes = new int[length];\n        int[] weights = new int[length];\n        int totalWeight = 0;\n        int firstWeight = 0;\n        boolean sameWeight = true;\n        // 这个 for 循环的主要作用是遍历 invokers 列表，找出活跃数最小的 Invoker\n        // 如果有多个 Invoker 具有相同的最小活跃数，还会记录下这些 Invoker 在 invokers 集合中的下标，并累加它们的权重，比较它们的权重值是否相等\n        for (int i = 0; i \u003c length; i++) {\n            Invoker\u003cT\u003e invoker = invokers.get(i);\n            // 获取 invoker 对应的活跃(active)数\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();\n            int afterWarmup = getWeight(invoker, invocation);\n            weights[i] = afterWarmup;\n            if (leastActive == -1 || active \u003c leastActive) {\n                leastActive = active;\n                leastCount = 1;\n                leastIndexes[0] = i;\n                totalWeight = afterWarmup;\n                firstWeight = afterWarmup;\n                sameWeight = true;\n            } else if (active == leastActive) {\n                leastIndexes[leastCount++] = i;\n                totalWeight += afterWarmup;\n                if (sameWeight \u0026\u0026 afterWarmup != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n       // 如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可\n        if (leastCount == 1) {\n            return invokers.get(leastIndexes[0]);\n        }\n        // 如果有多个 Invoker 具有相同的最小活跃数，但它们之间的权重不同\n        // 这里的处理方式就和  RandomLoadBalance 一致了\n        if (!sameWeight \u0026\u0026 totalWeight \u003e 0) {\n            int offsetWeight = ThreadLocalRandom.current().nextInt(totalWeight);\n            for (int i = 0; i \u003c leastCount; i++) {\n                int leastIndex = leastIndexes[i];\n                offsetWeight -= weights[leastIndex];\n                if (offsetWeight \u003c 0) {\n                    return invokers.get(leastIndex);\n                }\n            }\n        }\n        return invokers.get(leastIndexes[ThreadLocalRandom.current().nextInt(leastCount)]);\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213633-263atz5","Type":"NodeParagraph","Properties":{"id":"20240201213633-263atz5","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"活跃数是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RpcStatus"},{"Type":"NodeText","Data":" 中的一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConcurrentMap"},{"Type":"NodeText","Data":" 保存的，根据 URL 以及服务提供者被调用的方法的名称，我们便可以获取到对应的活跃数。也就是说服务提供者中的每一个方法的活跃数都是互相独立的。"}]},{"ID":"20240201213634-a0f7jn1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213634-a0f7jn1","updated":"20240201213634"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class RpcStatus {\n\n    private static final ConcurrentMap\u003cString, ConcurrentMap\u003cString, RpcStatus\u003e\u003e METHOD_STATISTICS =\n            new ConcurrentHashMap\u003cString, ConcurrentMap\u003cString, RpcStatus\u003e\u003e();\n\n   public static RpcStatus getStatus(URL url, String methodName) {\n        String uri = url.toIdentityString();\n        ConcurrentMap\u003cString, RpcStatus\u003e map = METHOD_STATISTICS.computeIfAbsent(uri, k -\u003e new ConcurrentHashMap\u003c\u003e());\n        return map.computeIfAbsent(methodName, k -\u003e new RpcStatus());\n    }\n    public int getActive() {\n        return active.get();\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213635-mkycm8e","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213635-mkycm8e","updated":"20240201213635"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ConsistentHashLoadBalance"}]},{"ID":"20240201213636-omj752c","Type":"NodeParagraph","Properties":{"id":"20240201213636-omj752c","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsistentHashLoadBalance"},{"Type":"NodeText","Data":" 小伙伴们应该也不会陌生，在分库分表、各种集群中就经常使用这个负载均衡策略。"}]},{"ID":"20240201213637-hyorvaf","Type":"NodeParagraph","Properties":{"id":"20240201213637-hyorvaf","updated":"20240201213637"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsistentHashLoadBalance"},{"Type":"NodeText","Data":" 即"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性 Hash 负载均衡策略"},{"Type":"NodeText","Data":"。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsistentHashLoadBalance"},{"Type":"NodeText","Data":" 中没有权重的概念，具体是哪个服务提供者处理请求是由你的请求的参数决定的，也就是说相同参数的请求总是发到同一个服务提供者。"}]},{"ID":"20240201213638-shybn1t","Type":"NodeParagraph","Properties":{"id":"20240201213638-shybn1t","updated":"20240201213638"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/consistent-hash-data-incline.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213639-qyo0fbl","Type":"NodeParagraph","Properties":{"id":"20240201213639-qyo0fbl","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"另外，Dubbo 为了避免数据倾斜问题（节点不够分散，大量请求落到同一节点），还引入了虚拟节点的概念。通过虚拟节点可以让节点更加分散，有效均衡各个节点的请求量。"}]},{"ID":"20240201213640-8a6tve9","Type":"NodeParagraph","Properties":{"id":"20240201213640-8a6tve9","updated":"20240201213640"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/consistent-hash-invoker.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213641-yia1gsm","Type":"NodeParagraph","Properties":{"id":"20240201213641-yia1gsm","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"官方有详细的源码分析："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#23-consistenthashloadbalance","TextMarkTextContent":"https://dubbo.apache.org/zh/docs/v2.7/dev/source/loadbalance/#23-consistenthashloadbalance"},{"Type":"NodeText","Data":" 。这里还有一个相关的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/dubbo/pull/5440","TextMarkTextContent":"PR#5440"},{"Type":"NodeText","Data":" 来修复老版本中 ConsistentHashLoadBalance 存在的一些 Bug。感兴趣的小伙伴，可以多花点时间研究一下。我这里不多分析了，这个作业留给你们！"}]},{"ID":"20240201213642-3fwfyjs","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213642-3fwfyjs","updated":"20240201213642"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RoundRobinLoadBalance"}]},{"ID":"20240201213643-k88nkub","Type":"NodeParagraph","Properties":{"id":"20240201213643-k88nkub","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"加权轮询负载均衡。"}]},{"ID":"20240201213644-qx1v1ob","Type":"NodeParagraph","Properties":{"id":"20240201213644-qx1v1ob","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"轮询就是把请求依次分配给每个服务提供者。加权轮询就是在轮询的基础上，让更多的请求落到权重更大的服务提供者上。比如假如有两个提供相同服务的服务器 S1,S2，S1 的权重为 7，S2 的权重为 3。"}]},{"ID":"20240201213645-ttq11bs","Type":"NodeParagraph","Properties":{"id":"20240201213645-ttq11bs","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"如果我们有 10 次请求，那么 7 次会被 S1 处理，3 次被 S2 处理。"}]},{"ID":"20240201213646-acv73vn","Type":"NodeParagraph","Properties":{"id":"20240201213646-acv73vn","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"但是，如果是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomLoadBalance"},{"Type":"NodeText","Data":" 的话，很可能存在 10 次请求有 9 次都被 S1 处理的情况（概率性问题）。"}]},{"ID":"20240201213647-l66nit0","Type":"NodeParagraph","Properties":{"id":"20240201213647-l66nit0","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"Dubbo 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RoundRobinLoadBalance"},{"Type":"NodeText","Data":" 的代码实现被修改重建了好几次，Dubbo-2.6.5 版本的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RoundRobinLoadBalance"},{"Type":"NodeText","Data":" 为平滑加权轮询算法。"}]},{"ID":"20240201213648-uzid2wf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213648-uzid2wf","updated":"20240201213648"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 序列化协议"}]},{"ID":"20240201213649-b7xc94o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213649-b7xc94o","updated":"20240201213649"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Dubbo 支持哪些序列化方式呢？"}]},{"ID":"20240201213650-besxzve","Type":"NodeParagraph","Properties":{"id":"20240201213650-besxzve","updated":"20240201213650"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Dubbo 支持的序列化协议","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/csdn/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy,size_16,color_FFFFFF,t_70-20230309234143460.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213651-ocydoci","Type":"NodeParagraph","Properties":{"id":"20240201213651-ocydoci","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"Dubbo 支持多种序列化方式：JDK 自带的序列化、hessian2、JSON、Kryo、FST、Protostuff，ProtoBuf 等等。"}]},{"ID":"20240201213652-4zcowic","Type":"NodeParagraph","Properties":{"id":"20240201213652-4zcowic","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"Dubbo 默认使用的序列化方式是 hessian2。"}]},{"ID":"20240201213653-lv8o67b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213653-lv8o67b","updated":"20240201213653"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"谈谈你对这些序列化协议了解？"}]},{"ID":"20240201213654-uzs8h92","Type":"NodeParagraph","Properties":{"id":"20240201213654-uzs8h92","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"一般我们不会直接使用 JDK 自带的序列化方式。主要原因有两个："}]},{"ID":"20240201213655-2rkonp1","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213655-2rkonp1","updated":"20240201213655"},"Children":[{"ID":"20240201213656-tdgtbfc","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213656-tdgtbfc","updated":"20240201213656"},"Children":[{"ID":"20240201213657-2jw5ylb","Type":"NodeParagraph","Properties":{"id":"20240201213657-2jw5ylb","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不支持跨语言调用"},{"Type":"NodeText","Data":" : 如果调用的是其他语言开发的服务的时候就不支持了。"}]}]},{"ID":"20240201213658-n2qm3xm","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213658-n2qm3xm","updated":"20240201213658"},"Children":[{"ID":"20240201213659-5b3km5e","Type":"NodeParagraph","Properties":{"id":"20240201213659-5b3km5e","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"性能差"},{"Type":"NodeText","Data":"：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。"}]}]}]},{"ID":"20240201213660-bgpgvvr","Type":"NodeParagraph","Properties":{"id":"20240201213660-bgpgvvr","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"JSON 序列化由于性能问题，我们一般也不会考虑使用。"}]},{"ID":"20240201213661-oht2efc","Type":"NodeParagraph","Properties":{"id":"20240201213661-oht2efc","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"像 Protostuff，ProtoBuf、hessian2 这些都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。"}]},{"ID":"20240201213662-lxpesg4","Type":"NodeParagraph","Properties":{"id":"20240201213662-lxpesg4","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"Kryo 和 FST 这两种序列化方式是 Dubbo 后来才引入的，性能非常好。不过，这两者都是专门针对 Java 语言的。Dubbo 官网的一篇文章中提到说推荐使用 Kryo 作为生产环境的序列化方式。"}]},{"ID":"20240201213663-2irtea1","Type":"NodeParagraph","Properties":{"id":"20240201213663-2irtea1","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"Dubbo 官方文档中还有一个关于这些"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dubbo.apache.org/zh/docs/v2.7/user/serialization/#m-zhdocsv27userserialization","TextMarkTextContent":"序列化协议的性能对比图"},{"Type":"NodeText","Data":"可供参考。"}]},{"ID":"20240201213664-1o2u1w8","Type":"NodeParagraph","Properties":{"id":"20240201213664-1o2u1w8","updated":"20240201213664"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"序列化协议的性能对比","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/distributed-system/rpc/dubbo-serialization-protocol-performance-comparison.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213665-ser50jx","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-ser50jx","updated":"20240201213665"}}]}