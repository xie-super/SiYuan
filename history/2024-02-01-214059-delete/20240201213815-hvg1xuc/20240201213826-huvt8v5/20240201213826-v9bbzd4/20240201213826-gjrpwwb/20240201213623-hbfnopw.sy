{"ID":"20240201213623-hbfnopw","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213623-hbfnopw","title":"limit-request","updated":"20240201213623"},"Children":[{"ID":"20240201213624-lhutyeb","Type":"NodeThematicBreak","Properties":{"id":"20240201213624-lhutyeb","updated":"20240201213624"}},{"ID":"20240201213625-1s41h1m","Type":"NodeParagraph","Properties":{"id":"20240201213625-1s41h1m","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"title: 服务限流详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高可用"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"icon: limit_rate"}]},{"ID":"20240201213626-b1p67bd","Type":"NodeThematicBreak","Properties":{"id":"20240201213626-b1p67bd","updated":"20240201213626"}},{"ID":"20240201213627-cvsme95","Type":"NodeParagraph","Properties":{"id":"20240201213627-cvsme95","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"针对软件系统来说，限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。毕竟，软件系统的处理能力是有限的。如果说超过了其处理能力的范围，软件系统可能直接就挂掉了。"}]},{"ID":"20240201213628-hsxc07o","Type":"NodeParagraph","Properties":{"id":"20240201213628-hsxc07o","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"限流可能会导致用户的请求无法被正确处理，不过，这往往也是权衡了软件系统的稳定性之后得到的最优解。"}]},{"ID":"20240201213629-2hu9a19","Type":"NodeParagraph","Properties":{"id":"20240201213629-2hu9a19","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"现实生活中，处处都有限流的实际应用，就比如排队买票是为了避免大量用户涌入购票而导致售票员无法处理。"}]},{"ID":"20240201213630-0lrd5xe","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213630-0lrd5xe","updated":"20240201213630"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见限流算法有哪些？"}]},{"ID":"20240201213631-wjjw4or","Type":"NodeParagraph","Properties":{"id":"20240201213631-wjjw4or","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"简单介绍 4 种非常好理解并且容易实现的限流算法！"}]},{"ID":"20240201213632-z1gob54","Type":"NodeBlockquote","Properties":{"id":"20240201213632-z1gob54","updated":"20240201213632"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213633-6sv7n1t","Type":"NodeParagraph","Properties":{"id":"20240201213633-6sv7n1t","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"图片来源于 InfoQ 的一篇文章"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.infoq.cn/article/Qg2tX8fyw5Vt-f3HH673","TextMarkTextContent":"《分布式服务限流实战，已经为你排好坑了》"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213634-aj1labx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213634-aj1labx","updated":"20240201213634"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"固定窗口计数器算法"}]},{"ID":"20240201213635-lgun7er","Type":"NodeParagraph","Properties":{"id":"20240201213635-lgun7er","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"固定窗口其实就是时间窗口。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"固定窗口计数器算法"},{"Type":"NodeText","Data":" 规定了我们单位时间处理的请求数量。"}]},{"ID":"20240201213636-zzc1rmr","Type":"NodeParagraph","Properties":{"id":"20240201213636-zzc1rmr","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"假如我们规定系统中某个接口 1 分钟只能访问 33 次的话，使用固定窗口计数器算法的实现思路如下："}]},{"ID":"20240201213637-lsvn5y5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-lsvn5y5","updated":"20240201213637"},"Children":[{"ID":"20240201213638-s045fnf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-s045fnf","updated":"20240201213638"},"Children":[{"ID":"20240201213639-ns797be","Type":"NodeParagraph","Properties":{"id":"20240201213639-ns797be","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"给定一个变量 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"counter"},{"Type":"NodeText","Data":" 来记录当前接口处理的请求数量，初始值为 0（代表接口当前 1 分钟内还未处理请求）。"}]}]},{"ID":"20240201213640-5i0lfux","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-5i0lfux","updated":"20240201213640"},"Children":[{"ID":"20240201213641-fb133zp","Type":"NodeParagraph","Properties":{"id":"20240201213641-fb133zp","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"1 分钟之内每处理一个请求之后就将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"counter+1"},{"Type":"NodeText","Data":" ，当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"counter=33"},{"Type":"NodeText","Data":" 之后（也就是说在这 1 分钟内接口已经被访问 33 次的话），后续的请求就会被全部拒绝。"}]}]},{"ID":"20240201213642-yymkdww","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-yymkdww","updated":"20240201213642"},"Children":[{"ID":"20240201213643-ehqpj4r","Type":"NodeParagraph","Properties":{"id":"20240201213643-ehqpj4r","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"等到 1 分钟结束后，将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"counter"},{"Type":"NodeText","Data":" 重置 0，重新开始计数。"}]}]}]},{"ID":"20240201213644-1pz4wle","Type":"NodeParagraph","Properties":{"id":"20240201213644-1pz4wle","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"这种限流算法限流不够平滑。例如，我们限制某个接口每分钟只能访问 30 次，假设前 30 秒就有 30 个请求到达的话，那后续 30 秒将无法处理请求，这是不可取的，用户体验极差！"}]},{"ID":"20240201213645-s47g64u","Type":"NodeParagraph","Properties":{"id":"20240201213645-s47g64u","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"除此之外，这种限流算法无法保证限流速率，因而无法应对突然激增的流量。例如，我们限制某个接口 1 分钟只能访问 1000 次，该接口的 QPS 为 500，前 55s 这个接口 1 个请求没有接收，后 1s 突然接收了 1000 个请求。然后，在当前场景下，这 1000 个请求在 1s 内是没办法被处理的，系统直接就被瞬时的大量请求给击垮了。"}]},{"ID":"20240201213646-7blgwgu","Type":"NodeParagraph","Properties":{"id":"20240201213646-7blgwgu","updated":"20240201213646"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"固定窗口计数器算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.infoq.cn/resource/image/8d/15/8ded7a2b90e1482093f92fff555b3615.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213647-c2i907m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213647-c2i907m","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"滑动窗口计数器算法"}]},{"ID":"20240201213648-blqneke","Type":"NodeParagraph","Properties":{"id":"20240201213648-blqneke","updated":"20240201213648"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"滑动窗口计数器算法"},{"Type":"NodeText","Data":" 算的上是固定窗口计数器算法的升级版。"}]},{"ID":"20240201213649-4qb2vrm","Type":"NodeParagraph","Properties":{"id":"20240201213649-4qb2vrm","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"滑动窗口计数器算法相比于固定窗口计数器算法的优化在于："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"它把时间以一定比例分片"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213650-ws5dm4x","Type":"NodeParagraph","Properties":{"id":"20240201213650-ws5dm4x","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"例如我们的接口限流每分钟处理 60 个请求，我们可以把 1 分钟分为 60 个窗口。每隔 1 秒移动一次，每个窗口一秒只能处理 不大于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"60(请求数)/60（窗口数）"},{"Type":"NodeText","Data":" 的请求， 如果当前窗口的请求计数总和超过了限制的数量的话就不再处理其他请求。"}]},{"ID":"20240201213651-9ama2wm","Type":"NodeParagraph","Properties":{"id":"20240201213651-9ama2wm","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"很显然， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当滑动窗口的格子划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精确。"}]},{"ID":"20240201213652-3ecttjs","Type":"NodeParagraph","Properties":{"id":"20240201213652-3ecttjs","updated":"20240201213652"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"滑动窗口计数器算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.infoq.cn/resource/image/ae/15/ae4d3cd14efb8dc7046d691c90264715.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213653-gnhufei","Type":"NodeParagraph","Properties":{"id":"20240201213653-gnhufei","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"滑动窗口计数器算法可以应对突然激增的流量，但依然存在限流不够平滑的问题。"}]},{"ID":"20240201213654-uug4r8s","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213654-uug4r8s","updated":"20240201213654"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"漏桶算法"}]},{"ID":"20240201213655-fhkrrx2","Type":"NodeParagraph","Properties":{"id":"20240201213655-fhkrrx2","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"我们可以把发请求的动作比作成注水到桶中，我们处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。"}]},{"ID":"20240201213656-eekdhfw","Type":"NodeParagraph","Properties":{"id":"20240201213656-eekdhfw","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"如果想要实现这个算法的话也很简单，准备一个队列用来保存请求，然后我们定期从队列中拿请求来执行就好了（和消息队列削峰/限流的思想是一样的）。"}]},{"ID":"20240201213657-ucx5onv","Type":"NodeParagraph","Properties":{"id":"20240201213657-ucx5onv","updated":"20240201213657"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"漏桶算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.infoq.cn/resource/image/75/03/75938d1010138ce66e38c6ed0392f103.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213658-brx84x8","Type":"NodeParagraph","Properties":{"id":"20240201213658-brx84x8","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"漏桶算法可以控制限流速率，避免网络拥塞和系统过载。不过，漏桶算法无法应对突然激增的流量，因为只能以固定的速率处理请求，对系统资源利用不够友好。"}]},{"ID":"20240201213659-qw3mmvk","Type":"NodeParagraph","Properties":{"id":"20240201213659-qw3mmvk","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"实际业务场景中，基本不会使用漏桶算法。"}]},{"ID":"20240201213660-o41qan7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213660-o41qan7","updated":"20240201213660"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"令牌桶算法"}]},{"ID":"20240201213661-58hn435","Type":"NodeParagraph","Properties":{"id":"20240201213661-58hn435","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"令牌桶算法也比较简单。和漏桶算法算法一样，我们的主角还是桶（这限流算法和桶过不去啊）。不过现在桶里装的是令牌了，请求在被处理之前需要拿到一个令牌，请求处理完毕之后将这个令牌丢弃（删除）。我们根据限流大小，按照一定的速率往桶里添加令牌。如果桶装满了，就不能继续往里面继续添加令牌了。"}]},{"ID":"20240201213662-rouhx5g","Type":"NodeParagraph","Properties":{"id":"20240201213662-rouhx5g","updated":"20240201213662"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"令牌桶算法","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.infoq.cn/resource/image/ec/93/eca0e5eaa35dac938c673fecf2ec9a93.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213663-f831n2v","Type":"NodeParagraph","Properties":{"id":"20240201213663-f831n2v","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"令牌桶算法可以限制平均速率和应对突然激增的流量，还可以动态调整生成令牌的速率。不过，如果令牌产生速率和桶的容量设置不合理，可能会出现问题比如大量的请求被丢弃、系统过载。"}]},{"ID":"20240201213664-lwv9vax","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213664-lwv9vax","updated":"20240201213664"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"针对什么来进行限流？"}]},{"ID":"20240201213665-o0bfk1h","Type":"NodeParagraph","Properties":{"id":"20240201213665-o0bfk1h","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"实际项目中，还需要确定限流对象，也就是针对什么来进行限流。常见的限流对象如下："}]},{"ID":"20240201213666-ws72uqa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213666-ws72uqa","updated":"20240201213666"},"Children":[{"ID":"20240201213667-mcyopnp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-mcyopnp","updated":"20240201213667"},"Children":[{"ID":"20240201213668-cn2gsqi","Type":"NodeParagraph","Properties":{"id":"20240201213668-cn2gsqi","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"IP ：针对 IP 进行限流，适用面较广，简单粗暴。"}]}]},{"ID":"20240201213669-nlu1zxx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-nlu1zxx","updated":"20240201213669"},"Children":[{"ID":"20240201213670-oytp0pf","Type":"NodeParagraph","Properties":{"id":"20240201213670-oytp0pf","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"业务 ID：挑选唯一的业务 ID 以实现更针对性地限流。例如，基于用户 ID 进行限流。"}]}]},{"ID":"20240201213671-y2dq6ni","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213671-y2dq6ni","updated":"20240201213671"},"Children":[{"ID":"20240201213672-erqetau","Type":"NodeParagraph","Properties":{"id":"20240201213672-erqetau","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"个性化：根据用户的属性或行为，进行不同的限流策略。例如， VIP 用户不限流，而普通用户限流。根据系统的运行指标（如 QPS、并发调用数、系统负载等），动态调整限流策略。例如，当系统负载较高的时候，控制每秒通过的请求减少。"}]}]}]},{"ID":"20240201213673-2kjnxhm","Type":"NodeParagraph","Properties":{"id":"20240201213673-2kjnxhm","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"针对 IP 进行限流是目前比较常用的一个方案。不过，实际应用中需要注意用户真实 IP 地址的正确获取。常用的真实 IP 获取方法有 X-Forwarded-For 和 TCP Options 字段承载真实源 IP 信息。虽然 X-Forwarded-For 字段可能会被伪造，但因为其实现简单方便，很多项目还是直接用的这种方法。"}]},{"ID":"20240201213674-j0qadcq","Type":"NodeParagraph","Properties":{"id":"20240201213674-j0qadcq","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"除了我上面介绍到的限流对象之外，还有一些其他较为复杂的限流对象策略，比如阿里的 Sentinel 还支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/alibaba/Sentinel/wiki/流量控制#基于调用关系的流量控制","TextMarkTextContent":"基于调用关系的限流"},{"Type":"NodeText","Data":"（包括基于调用方限流、基于调用链入口限流、关联流量限流等）以及更细维度的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/alibaba/Sentinel/wiki/热点参数限流","TextMarkTextContent":"热点参数限流"},{"Type":"NodeText","Data":"（实时的统计热点参数并针对热点参数的资源调用进行流量控制）。"}]},{"ID":"20240201213675-gwt82ld","Type":"NodeParagraph","Properties":{"id":"20240201213675-gwt82ld","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"另外，一个项目可以根据具体的业务需求选择多种不同的限流对象搭配使用。"}]},{"ID":"20240201213676-zbiqu67","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213676-zbiqu67","updated":"20240201213676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"单机限流怎么做？"}]},{"ID":"20240201213677-ogthnxb","Type":"NodeParagraph","Properties":{"id":"20240201213677-ogthnxb","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"单机限流针对的是单体架构应用。"}]},{"ID":"20240201213678-9drhlfy","Type":"NodeParagraph","Properties":{"id":"20240201213678-9drhlfy","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"单机限流可以直接使用 Google Guava 自带的限流工具类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RateLimiter"},{"Type":"NodeText","Data":" 。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RateLimiter"},{"Type":"NodeText","Data":" 基于令牌桶算法，可以应对突发流量。"}]},{"ID":"20240201213679-iajmlcd","Type":"NodeBlockquote","Properties":{"id":"20240201213679-iajmlcd","updated":"20240201213679"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213680-nyx79no","Type":"NodeParagraph","Properties":{"id":"20240201213680-nyx79no","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"Guava 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/google/guava","TextMarkTextContent":"https://github.com/google/guava"}]}]},{"ID":"20240201213681-vupo3jj","Type":"NodeParagraph","Properties":{"id":"20240201213681-vupo3jj","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"除了最基本的令牌桶算法(平滑突发限流)实现之外，Guava 的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RateLimiter"},{"Type":"NodeText","Data":"还提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"平滑预热限流"},{"Type":"NodeText","Data":" 的算法实现。"}]},{"ID":"20240201213682-a9muhrw","Type":"NodeParagraph","Properties":{"id":"20240201213682-a9muhrw","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"平滑突发限流就是按照指定的速率放令牌到桶里，而平滑预热限流会有一段预热时间，预热时间之内，速率会逐渐提升到配置的速率。"}]},{"ID":"20240201213683-7sa82q3","Type":"NodeParagraph","Properties":{"id":"20240201213683-7sa82q3","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"我们下面通过两个简单的小例子来详细了解吧！"}]},{"ID":"20240201213684-ktvhx96","Type":"NodeParagraph","Properties":{"id":"20240201213684-ktvhx96","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"我们直接在项目中引入 Guava 相关的依赖即可使用。"}]},{"ID":"20240201213685-ks89o79","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213685-ks89o79","updated":"20240201213685"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cdependency\u003e\n    \u003cgroupId\u003ecom.google.guava\u003c/groupId\u003e\n    \u003cartifactId\u003eguava\u003c/artifactId\u003e\n    \u003cversion\u003e31.0.1-jre\u003c/version\u003e\n\u003c/dependency\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213686-ejcymdl","Type":"NodeParagraph","Properties":{"id":"20240201213686-ejcymdl","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"下面是一个简单的 Guava 平滑突发限流的 Demo。"}]},{"ID":"20240201213687-0ehwe1y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213687-0ehwe1y","updated":"20240201213687"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import com.google.common.util.concurrent.RateLimiter;\n\n/**\n * 微信搜 JavaGuide 回复\"面试突击\"即可免费领取个人原创的 Java 面试手册\n *\n * @author Guide哥\n * @date 2021/10/08 19:12\n **/\npublic class RateLimiterDemo {\n\n    public static void main(String[] args) {\n        // 1s 放 5 个令牌到桶里也就是 0.2s 放 1个令牌到桶里\n        RateLimiter rateLimiter = RateLimiter.create(5);\n        for (int i = 0; i \u003c 10; i++) {\n            double sleepingTime = rateLimiter.acquire(1);\n            System.out.printf(\"get 1 tokens: %ss%n\", sleepingTime);\n        }\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213688-vds9qew","Type":"NodeParagraph","Properties":{"id":"20240201213688-vds9qew","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213689-wpfxtu5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213689-wpfxtu5","updated":"20240201213689"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"get 1 tokens: 0.0s\nget 1 tokens: 0.188413s\nget 1 tokens: 0.197811s\nget 1 tokens: 0.198316s\nget 1 tokens: 0.19864s\nget 1 tokens: 0.199363s\nget 1 tokens: 0.193997s\nget 1 tokens: 0.199623s\nget 1 tokens: 0.199357s\nget 1 tokens: 0.195676s\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213690-c69khm1","Type":"NodeParagraph","Properties":{"id":"20240201213690-c69khm1","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"下面是一个简单的 Guava 平滑预热限流的 Demo。"}]},{"ID":"20240201213691-hl88vfu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213691-hl88vfu","updated":"20240201213691"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import com.google.common.util.concurrent.RateLimiter;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 微信搜 JavaGuide 回复\"面试突击\"即可免费领取个人原创的 Java 面试手册\n *\n * @author Guide哥\n * @date 2021/10/08 19:12\n **/\npublic class RateLimiterDemo {\n\n    public static void main(String[] args) {\n        // 1s 放 5 个令牌到桶里也就是 0.2s 放 1个令牌到桶里\n        // 预热时间为3s,也就说刚开始的 3s 内发牌速率会逐渐提升到 0.2s 放 1 个令牌到桶里\n        RateLimiter rateLimiter = RateLimiter.create(5, 3, TimeUnit.SECONDS);\n        for (int i = 0; i \u003c 20; i++) {\n            double sleepingTime = rateLimiter.acquire(1);\n            System.out.printf(\"get 1 tokens: %sds%n\", sleepingTime);\n        }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213692-d05buzv","Type":"NodeParagraph","Properties":{"id":"20240201213692-d05buzv","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213693-dtrt5jt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213693-dtrt5jt","updated":"20240201213693"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"get 1 tokens: 0.0s\nget 1 tokens: 0.561919s\nget 1 tokens: 0.516931s\nget 1 tokens: 0.463798s\nget 1 tokens: 0.41286s\nget 1 tokens: 0.356172s\nget 1 tokens: 0.300489s\nget 1 tokens: 0.252545s\nget 1 tokens: 0.203996s\nget 1 tokens: 0.198359s\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213694-wlxztw2","Type":"NodeParagraph","Properties":{"id":"20240201213694-wlxztw2","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"另外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Bucket4j"},{"Type":"NodeText","Data":" 是一个非常不错的基于令牌/漏桶算法的限流库。"}]},{"ID":"20240201213695-jcdz6ps","Type":"NodeBlockquote","Properties":{"id":"20240201213695-jcdz6ps","updated":"20240201213695"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213696-k2vkflf","Type":"NodeParagraph","Properties":{"id":"20240201213696-k2vkflf","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"Bucket4j 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/vladimir-bukhtoyarov/bucket4j","TextMarkTextContent":"https://github.com/vladimir-bukhtoyarov/bucket4j"}]}]},{"ID":"20240201213697-5qt72ny","Type":"NodeParagraph","Properties":{"id":"20240201213697-5qt72ny","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"相对于，Guava 的限流工具类来说，Bucket4j 提供的限流功能更加全面。不仅支持单机限流和分布式限流，还可以集成监控，搭配 Prometheus 和 Grafana 使用。"}]},{"ID":"20240201213698-znhfry5","Type":"NodeParagraph","Properties":{"id":"20240201213698-znhfry5","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"不过，毕竟 Guava 也只是一个功能全面的工具类库，其提供的开箱即用的限流功能在很多单机场景下还是比较实用的。"}]},{"ID":"20240201213699-r6k2ppc","Type":"NodeParagraph","Properties":{"id":"20240201213699-r6k2ppc","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"Spring Cloud Gateway 中自带的单机限流的早期版本就是基于 Bucket4j 实现的。后来，替换成了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Resilience4j"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213700-g7bfyj6","Type":"NodeParagraph","Properties":{"id":"20240201213700-g7bfyj6","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"Resilience4j 是一个轻量级的容错组件，其灵感来自于 Hystrix。自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Netflix/Hystrix/commit/a7df971cbaddd8c5e976b3cc5f14013fe6ad00e6","TextMarkTextContent":"Netflix 宣布不再积极开发 Hystrix"},{"Type":"NodeText","Data":" 之后，Spring 官方和 Netflix 都更推荐使用 Resilience4j 来做限流熔断。"}]},{"ID":"20240201213701-0lbncbf","Type":"NodeBlockquote","Properties":{"id":"20240201213701-0lbncbf","updated":"20240201213701"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213702-4wyx3q4","Type":"NodeParagraph","Properties":{"id":"20240201213702-4wyx3q4","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"Resilience4j 地址: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/resilience4j/resilience4j","TextMarkTextContent":"https://github.com/resilience4j/resilience4j"}]}]},{"ID":"20240201213703-8wu7ybu","Type":"NodeParagraph","Properties":{"id":"20240201213703-8wu7ybu","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"一般情况下，为了保证系统的高可用，项目的限流和熔断都是要一起做的。"}]},{"ID":"20240201213704-82qw1j2","Type":"NodeParagraph","Properties":{"id":"20240201213704-82qw1j2","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"Resilience4j 不仅提供限流，还提供了熔断、负载保护、自动重试等保障系统高可用开箱即用的功能。并且，Resilience4j 的生态也更好，很多网关都使用 Resilience4j 来做限流熔断的。"}]},{"ID":"20240201213705-pvkumjz","Type":"NodeParagraph","Properties":{"id":"20240201213705-pvkumjz","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"因此，在绝大部分场景下 Resilience4j 或许会是更好的选择。如果是一些比较简单的限流场景的话，Guava 或者 Bucket4j 也是不错的选择。"}]},{"ID":"20240201213706-di55539","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213706-di55539","updated":"20240201213706"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式限流怎么做？"}]},{"ID":"20240201213707-p3higo2","Type":"NodeParagraph","Properties":{"id":"20240201213707-p3higo2","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"分布式限流针对的分布式/微服务应用架构应用，在这种架构下，单机限流就不适用了，因为会存在多种服务，并且一种服务也可能会被部署多份。"}]},{"ID":"20240201213708-bknce4x","Type":"NodeParagraph","Properties":{"id":"20240201213708-bknce4x","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"分布式限流常见的方案："}]},{"ID":"20240201213709-49snhcw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213709-49snhcw","updated":"20240201213709"},"Children":[{"ID":"20240201213710-3vr6ty5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213710-3vr6ty5","updated":"20240201213710"},"Children":[{"ID":"20240201213711-ervib1t","Type":"NodeParagraph","Properties":{"id":"20240201213711-ervib1t","updated":"20240201213711"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"借助中间件架限流"},{"Type":"NodeText","Data":"：可以借助 Sentinel 或者使用 Redis 来自己实现对应的限流逻辑。"}]}]},{"ID":"20240201213712-dsqvpye","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-dsqvpye","updated":"20240201213712"},"Children":[{"ID":"20240201213713-zcoswes","Type":"NodeParagraph","Properties":{"id":"20240201213713-zcoswes","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"网关层限流"},{"Type":"NodeText","Data":"：比较常用的一种方案，直接在网关层把限流给安排上了。不过，通常网关层限流通常也需要借助到中间件/框架。就比如 Spring Cloud Gateway 的分布式限流实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RedisRateLimiter"},{"Type":"NodeText","Data":"就是基于 Redis+Lua 来实现的，再比如 Spring Cloud Gateway 还可以整合 Sentinel 来做限流。"}]}]}]},{"ID":"20240201213714-ypyoe8b","Type":"NodeParagraph","Properties":{"id":"20240201213714-ypyoe8b","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"如果你要基于 Redis 来手动实现限流逻辑的话，建议配合 Lua 脚本来做。"}]},{"ID":"20240201213715-3t9o8ze","Type":"NodeParagraph","Properties":{"id":"20240201213715-3t9o8ze","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么建议 Redis+Lua 的方式？"},{"Type":"NodeText","Data":" 主要有两点原因："}]},{"ID":"20240201213716-oguo3nm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213716-oguo3nm","updated":"20240201213716"},"Children":[{"ID":"20240201213717-6h255h8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213717-6h255h8","updated":"20240201213717"},"Children":[{"ID":"20240201213718-rxth3hl","Type":"NodeParagraph","Properties":{"id":"20240201213718-rxth3hl","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"减少了网络开销"},{"Type":"NodeText","Data":"：我们可以利用 Lua 脚本来批量执行多条 Redis 命令，这些 Redis 命令会被提交到 Redis 服务器一次性执行完成，大幅减小了网络开销。"}]}]},{"ID":"20240201213719-utfi40m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213719-utfi40m","updated":"20240201213719"},"Children":[{"ID":"20240201213720-h72vmjt","Type":"NodeParagraph","Properties":{"id":"20240201213720-h72vmjt","updated":"20240201213720"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原子性"},{"Type":"NodeText","Data":"：一段 Lua 脚本可以视作一条命令执行，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰。"}]}]}]},{"ID":"20240201213721-1knw5ij","Type":"NodeParagraph","Properties":{"id":"20240201213721-1knw5ij","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"我这里就不放具体的限流脚本代码了，网上也有很多现成的优秀的限流脚本供你参考，就比如 Apache 网关项目 ShenYu 的 RateLimiter 限流插件就基于 Redis + Lua 实现了令牌桶算法/并发令牌桶算法、漏桶算法、滑动窗口算法。"}]},{"ID":"20240201213722-rl8skw8","Type":"NodeBlockquote","Properties":{"id":"20240201213722-rl8skw8","updated":"20240201213722"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213723-20tuu0p","Type":"NodeParagraph","Properties":{"id":"20240201213723-20tuu0p","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"ShenYu 地址: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/incubator-shenyu","TextMarkTextContent":"https://github.com/apache/incubator-shenyu"}]}]},{"ID":"20240201213724-lljyz50","Type":"NodeParagraph","Properties":{"id":"20240201213724-lljyz50","updated":"20240201213724"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ShenYu 限流脚本","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/csdn/e1e2a75f489e4854990dabe3b6cec522.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213725-9vic7q4","Type":"NodeParagraph","Properties":{"id":"20240201213725-9vic7q4","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"另外，如果不想自己写 Lua 脚本的话，也可以直接利用 Redisson 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RRateLimiter"},{"Type":"NodeText","Data":" 来实现分布式限流，其底层实现就是基于 Lua 代码。"}]},{"ID":"20240201213726-dufdiwm","Type":"NodeParagraph","Properties":{"id":"20240201213726-dufdiwm","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，比如 Java 中常用的数据结构实现、分布式锁、延迟队列等等。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。"}]},{"ID":"20240201213727-25dad0y","Type":"NodeParagraph","Properties":{"id":"20240201213727-25dad0y","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RRateLimiter"},{"Type":"NodeText","Data":" 的使用方式非常简单。我们首先需要获取一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RRateLimiter"},{"Type":"NodeText","Data":"对象，直接通过 Redisson 客户端获取即可。然后，设置限流规则就好。"}]},{"ID":"20240201213728-nz8mpyt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213728-nz8mpyt","updated":"20240201213728"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建一个 Redisson 客户端实例\nRedissonClient redissonClient = Redisson.create();\n// 获取一个名为 \"javaguide.limiter\" 的限流器对象\nRRateLimiter rateLimiter = redissonClient.getRateLimiter(\"javaguide.limiter\");\n// 尝试设置限流器的速率为每小时 100 次\n// RateType 有两种，OVERALL是全局限流,ER_CLIENT是单Client限流（可以认为就是单机限流）\nrateLimiter.trySetRate(RateType.OVERALL, 100, 1, RateIntervalUnit.HOURS);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213729-4wt6k69","Type":"NodeParagraph","Properties":{"id":"20240201213729-4wt6k69","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"接下来我们调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire()"},{"Type":"NodeText","Data":"方法或"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquire()"},{"Type":"NodeText","Data":"方法即可获取许可。"}]},{"ID":"20240201213730-ygx3dmq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213730-ygx3dmq","updated":"20240201213730"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 获取一个许可，如果超过限流器的速率则会等待\n// acquire()是同步方法，对应的异步方法：acquireAsync()\nrateLimiter.acquire(1);\n// 尝试在 5 秒内获取一个许可，如果成功则返回 true，否则返回 false\n// tryAcquire()是同步方法，对应的异步方法：tryAcquireAsync()\nboolean res = rateLimiter.tryAcquire(1, 5, TimeUnit.SECONDS);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213731-2us2zyq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213731-2us2zyq","updated":"20240201213731"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213732-afoopxu","Type":"NodeParagraph","Properties":{"id":"20240201213732-afoopxu","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"这篇文章主要介绍了常见的限流算法、限流对象的选择以及单机限流和分布式限流分别应该怎么做。"}]},{"ID":"20240201213733-n7jldeb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213733-n7jldeb","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213734-srkdj73","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-srkdj73","updated":"20240201213734"},"Children":[{"ID":"20240201213735-hvfazgw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213735-hvfazgw","updated":"20240201213735"},"Children":[{"ID":"20240201213736-mzu5e9g","Type":"NodeParagraph","Properties":{"id":"20240201213736-mzu5e9g","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"服务治理之轻量级熔断框架 Resilience4j："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://xie.infoq.cn/article/14786e571c1a4143ad1ef8f19","TextMarkTextContent":"https://xie.infoq.cn/article/14786e571c1a4143ad1ef8f19"}]}]},{"ID":"20240201213737-bra9uym","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-bra9uym","updated":"20240201213737"},"Children":[{"ID":"20240201213738-j6s42zh","Type":"NodeParagraph","Properties":{"id":"20240201213738-j6s42zh","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"超详细的 Guava RateLimiter 限流原理解析："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cloud.tencent.com/developer/article/1408819","TextMarkTextContent":"https://cloud.tencent.com/developer/article/1408819"}]}]},{"ID":"20240201213739-j7v5hq0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-j7v5hq0","updated":"20240201213739"},"Children":[{"ID":"20240201213740-76wrkvf","Type":"NodeParagraph","Properties":{"id":"20240201213740-76wrkvf","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"实战 Spring Cloud Gateway 之限流篇 👍："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.aneasystone.com/archives/2020/08/spring-cloud-gateway-current-limiting.html","TextMarkTextContent":"https://www.aneasystone.com/archives/2020/08/spring-cloud-gateway-current-limiting.html"}]}]},{"ID":"20240201213741-qrgclwc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-qrgclwc","updated":"20240201213741"},"Children":[{"ID":"20240201213742-ydbu6ge","Type":"NodeParagraph","Properties":{"id":"20240201213742-ydbu6ge","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"详解 Redisson 分布式限流的实现原理："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7199882882138898489","TextMarkTextContent":"https://juejin.cn/post/7199882882138898489"}]}]},{"ID":"20240201213743-jlx24j4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-jlx24j4","updated":"20240201213743"},"Children":[{"ID":"20240201213744-sry870g","Type":"NodeParagraph","Properties":{"id":"20240201213744-sry870g","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"一文详解 Java 限流接口实现 - 阿里云开发者："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/A5VYjstIDeVvizNK2HkrTQ","TextMarkTextContent":"https://mp.weixin.qq.com/s/A5VYjstIDeVvizNK2HkrTQ"}]}]}]},{"ID":"20240201213745-gx09kzv","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-gx09kzv","updated":"20240201213745"}}]}