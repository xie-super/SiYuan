{"ID":"20240201213731-1j4xleg","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213731-1j4xleg","title":"timeout-and-retry","updated":"20240201213731"},"Children":[{"ID":"20240201213732-xa8jz4f","Type":"NodeThematicBreak","Properties":{"id":"20240201213732-xa8jz4f","updated":"20240201213732"}},{"ID":"20240201213733-hzhib89","Type":"NodeParagraph","Properties":{"id":"20240201213733-hzhib89","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"title: 超时\u0026重试详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高可用"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"icon: retry"}]},{"ID":"20240201213734-54nz5id","Type":"NodeThematicBreak","Properties":{"id":"20240201213734-54nz5id","updated":"20240201213734"}},{"ID":"20240201213735-0jcxflx","Type":"NodeParagraph","Properties":{"id":"20240201213735-0jcxflx","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"由于网络问题、系统或者服务内部的 Bug、服务器宕机、操作系统崩溃等问题的不确定性，我们的系统或者服务永远不可能保证时刻都是可用的状态。"}]},{"ID":"20240201213736-8mmhpbb","Type":"NodeParagraph","Properties":{"id":"20240201213736-8mmhpbb","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"为了最大限度的减小系统或者服务出现故障之后带来的影响，我们需要用到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"超时（Timeout）"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重试（Retry）"},{"Type":"NodeText","Data":" 机制。"}]},{"ID":"20240201213737-a1t9sxe","Type":"NodeParagraph","Properties":{"id":"20240201213737-a1t9sxe","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"想要把超时和重试机制讲清楚其实很简单，因为它俩本身就不是什么高深的概念。"}]},{"ID":"20240201213738-bmjvcbq","Type":"NodeParagraph","Properties":{"id":"20240201213738-bmjvcbq","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"虽然超时和重试机制的思想很简单，但是它俩是真的非常实用。你平时接触到的绝大部分涉及到远程调用的系统或者服务都会应用超时和重试机制。尤其是对于微服务系统来说，正确设置超时和重试非常重要。单体服务通常只涉及数据库、缓存、第三方 API、中间件等的网络调用，而微服务系统内部各个服务之间还存在着网络调用。"}]},{"ID":"20240201213739-a7hlcaf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213739-a7hlcaf","updated":"20240201213739"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"超时机制"}]},{"ID":"20240201213740-4octjdv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213740-4octjdv","updated":"20240201213740"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是超时机制？"}]},{"ID":"20240201213741-odb1mdj","Type":"NodeParagraph","Properties":{"id":"20240201213741-odb1mdj","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"超时机制说的是当一个请求超过指定的时间（比如 1s）还没有被处理的话，这个请求就会直接被取消并抛出指定的异常或者错误（比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"504 Gateway Timeout"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213742-0dbzf1k","Type":"NodeParagraph","Properties":{"id":"20240201213742-0dbzf1k","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"我们平时接触到的超时可以简单分为下面 2 种："}]},{"ID":"20240201213743-8mq58i2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-8mq58i2","updated":"20240201213743"},"Children":[{"ID":"20240201213744-9c71wa6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-9c71wa6","updated":"20240201213744"},"Children":[{"ID":"20240201213745-7ff4ugu","Type":"NodeParagraph","Properties":{"id":"20240201213745-7ff4ugu","updated":"20240201213745"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"连接超时（ConnectTimeout）"},{"Type":"NodeText","Data":"：客户端与服务端建立连接的最长等待时间。"}]}]},{"ID":"20240201213746-mco3iau","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213746-mco3iau","updated":"20240201213746"},"Children":[{"ID":"20240201213747-kfbnj1h","Type":"NodeParagraph","Properties":{"id":"20240201213747-kfbnj1h","updated":"20240201213747"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读取超时（ReadTimeout）"},{"Type":"NodeText","Data":"：客户端和服务端已经建立连接，客户端等待服务端处理完请求的最长时间。实际项目中，我们关注比较多的还是读取超时。"}]}]}]},{"ID":"20240201213748-1jmn6fx","Type":"NodeParagraph","Properties":{"id":"20240201213748-1jmn6fx","updated":"20240201213748"},"Children":[{"Type":"NodeText","Data":"一些连接池客户端框架中可能还会有获取连接超时和空闲连接清理超时。"}]},{"ID":"20240201213749-4bq90ad","Type":"NodeParagraph","Properties":{"id":"20240201213749-4bq90ad","updated":"20240201213749"},"Children":[{"Type":"NodeText","Data":"如果没有设置超时的话，就可能会导致服务端连接数爆炸和大量请求堆积的问题。"}]},{"ID":"20240201213750-188dha5","Type":"NodeParagraph","Properties":{"id":"20240201213750-188dha5","updated":"20240201213750"},"Children":[{"Type":"NodeText","Data":"这些堆积的连接和请求会消耗系统资源，影响新收到的请求的处理。严重的情况下，甚至会拖垮整个系统或者服务。"}]},{"ID":"20240201213751-8gnm59e","Type":"NodeParagraph","Properties":{"id":"20240201213751-8gnm59e","updated":"20240201213751"},"Children":[{"Type":"NodeText","Data":"我之前在实际项目就遇到过类似的问题，整个网站无法正常处理请求，服务器负载直接快被拉满。后面发现原因是项目超时设置错误加上客户端请求处理异常，导致服务端连接数直接接近 40w+，这么多堆积的连接直接把系统干趴了。"}]},{"ID":"20240201213752-m7lvaz1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213752-m7lvaz1","updated":"20240201213752"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"超时时间应该如何设置？"}]},{"ID":"20240201213753-efncywy","Type":"NodeParagraph","Properties":{"id":"20240201213753-efncywy","updated":"20240201213753"},"Children":[{"Type":"NodeText","Data":"超时到底设置多长时间是一个难题！超时值设置太高或者太低都有风险。如果设置太高的话，会降低超时机制的有效性，比如你设置超时为 10s 的话，那设置超时就没啥意义了，系统依然可能会出现大量慢请求堆积的问题。如果设置太低的话，就可能会导致在系统或者服务在某些处理请求速度变慢的情况下（比如请求突然增多），大量请求重试（超时通常会结合重试）继续加重系统或者服务的压力，进而导致整个系统或者服务被拖垮的问题。"}]},{"ID":"20240201213754-cy248w9","Type":"NodeParagraph","Properties":{"id":"20240201213754-cy248w9","updated":"20240201213754"},"Children":[{"Type":"NodeText","Data":"通常情况下，我们建议读取超时设置为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1500ms"},{"Type":"NodeText","Data":" ,这是一个比较普适的值。如果你的系统或者服务对于延迟比较敏感的话，那读取超时值可以适当在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1500ms"},{"Type":"NodeText","Data":" 的基础上进行缩短。反之，读取超时值也可以在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1500ms"},{"Type":"NodeText","Data":" 的基础上进行加长，不过，尽量还是不要超过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1500ms"},{"Type":"NodeText","Data":" 。连接超时可以适当设置长一些，建议在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1000ms ~ 5000ms"},{"Type":"NodeText","Data":" 之内。"}]},{"ID":"20240201213755-7c9lrku","Type":"NodeParagraph","Properties":{"id":"20240201213755-7c9lrku","updated":"20240201213755"},"Children":[{"Type":"NodeText","Data":"没有银弹！超时值具体该设置多大，还是要根据实际项目的需求和情况慢慢调整优化得到。"}]},{"ID":"20240201213756-6oarwel","Type":"NodeParagraph","Properties":{"id":"20240201213756-6oarwel","updated":"20240201213756"},"Children":[{"Type":"NodeText","Data":"更上一层，参考"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html","TextMarkTextContent":"美团的 Java 线程池参数动态配置"},{"Type":"NodeText","Data":"思想，我们也可以将超时弄成可配置化的参数而不是固定的，比较简单的一种办法就是将超时的值放在配置中心中。这样的话，我们就可以根据系统或者服务的状态动态调整超时值了。"}]},{"ID":"20240201213757-iwqio2h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213757-iwqio2h","updated":"20240201213757"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"重试机制"}]},{"ID":"20240201213758-kdi4h78","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213758-kdi4h78","updated":"20240201213758"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是重试机制？"}]},{"ID":"20240201213759-sga6ta8","Type":"NodeParagraph","Properties":{"id":"20240201213759-sga6ta8","updated":"20240201213759"},"Children":[{"Type":"NodeText","Data":"重试机制一般配合超时机制一起使用，指的是多次发送相同的请求来避免瞬态故障和偶然性故障。"}]},{"ID":"20240201213760-mmc91hp","Type":"NodeParagraph","Properties":{"id":"20240201213760-mmc91hp","updated":"20240201213760"},"Children":[{"Type":"NodeText","Data":"瞬态故障可以简单理解为某一瞬间系统偶然出现的故障，并不会持久。偶然性故障可以理解为哪些在某些情况下偶尔出现的故障，频率通常较低。"}]},{"ID":"20240201213761-ev20ddf","Type":"NodeParagraph","Properties":{"id":"20240201213761-ev20ddf","updated":"20240201213761"},"Children":[{"Type":"NodeText","Data":"重试的核心思想是通过消耗服务器的资源来尽可能获得请求更大概率被成功处理。由于瞬态故障和偶然性故障是很少发生的，因此，重试对于服务器的资源消耗几乎是可以被忽略的。"}]},{"ID":"20240201213762-cs3jdwz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213762-cs3jdwz","updated":"20240201213762"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的重试策略有哪些？"}]},{"ID":"20240201213763-vfgcom6","Type":"NodeParagraph","Properties":{"id":"20240201213763-vfgcom6","updated":"20240201213763"},"Children":[{"Type":"NodeText","Data":"常见的重试策略有两种："}]},{"ID":"20240201213764-79av9pj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213764-79av9pj","updated":"20240201213764"},"Children":[{"ID":"20240201213765-cueer8l","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213765-cueer8l","updated":"20240201213765"},"Children":[{"ID":"20240201213766-3djtig9","Type":"NodeParagraph","Properties":{"id":"20240201213766-3djtig9","updated":"20240201213766"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"固定间隔时间重试"},{"Type":"NodeText","Data":"：每次重试之间都使用相同的时间间隔，比如每隔 1.5 秒进行一次重试。这种重试策略的优点是实现起来比较简单，不需要考虑重试次数和时间的关系，也不需要维护额外的状态信息。但是这种重试策略的缺点是可能会导致重试过于频繁或过于稀疏，从而影响系统的性能和效率。如果重试间隔太短，可能会对目标系统造成过大的压力，导致雪崩效应；如果重试间隔太长，可能会导致用户等待时间过长，影响用户体验。"}]}]},{"ID":"20240201213767-xu5p873","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213767-xu5p873","updated":"20240201213767"},"Children":[{"ID":"20240201213768-h2cm3x5","Type":"NodeParagraph","Properties":{"id":"20240201213768-h2cm3x5","updated":"20240201213768"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"梯度间隔重试"},{"Type":"NodeText","Data":"：根据重试次数的增加去延长下次重试时间，比如第一次重试间隔为 1 秒，第二次为 2 秒，第三次为 4 秒，以此类推。这种重试策略的优点是能够有效提高重试成功的几率（随着重试次数增加，但是重试依然不成功，说明目标系统恢复时间比较长，因此可以根据重试次数延长下次重试时间），也能通过柔性化的重试避免对下游系统造成更大压力。但是这种重试策略的缺点是实现起来比较复杂，需要考虑重试次数和时间的关系，以及设置合理的上限和下限值。另外，这种重试策略也可能会导致用户等待时间过长，影响用户体验。"}]}]}]},{"ID":"20240201213769-i40rvfq","Type":"NodeParagraph","Properties":{"id":"20240201213769-i40rvfq","updated":"20240201213769"},"Children":[{"Type":"NodeText","Data":"这两种适合的场景各不相同。固定间隔时间重试适用于目标系统恢复时间比较稳定和可预测的场景，比如网络波动或服务重启。梯度间隔重试适用于目标系统恢复时间比较长或不可预测的场景，比如网络故障和服务故障。"}]},{"ID":"20240201213770-1j51r12","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213770-1j51r12","updated":"20240201213770"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"重试的次数如何设置？"}]},{"ID":"20240201213771-kktbu9c","Type":"NodeParagraph","Properties":{"id":"20240201213771-kktbu9c","updated":"20240201213771"},"Children":[{"Type":"NodeText","Data":"重试的次数不宜过多，否则依然会对系统负载造成比较大的压力。"}]},{"ID":"20240201213772-lpombmh","Type":"NodeParagraph","Properties":{"id":"20240201213772-lpombmh","updated":"20240201213772"},"Children":[{"Type":"NodeText","Data":"重试的次数通常建议设为 3 次。大部分情况下，我们还是更建议使用梯度间隔重试策略，比如说我们要重试 3 次的话，第 1 次请求失败后，等待 1 秒再进行重试，第 2 次请求失败后，等待 2 秒再进行重试，第 3 次请求失败后，等待 3 秒再进行重试。"}]},{"ID":"20240201213773-a7p1mp8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213773-a7p1mp8","updated":"20240201213773"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是重试幂等？"}]},{"ID":"20240201213774-xjnmkqy","Type":"NodeParagraph","Properties":{"id":"20240201213774-xjnmkqy","updated":"20240201213774"},"Children":[{"Type":"NodeText","Data":"超时和重试机制在实际项目中使用的话，需要注意保证同一个请求没有被多次执行。"}]},{"ID":"20240201213775-r9d3hzx","Type":"NodeParagraph","Properties":{"id":"20240201213775-r9d3hzx","updated":"20240201213775"},"Children":[{"Type":"NodeText","Data":"什么情况下会出现一个请求被多次执行呢？客户端等待服务端完成请求完成超时但此时服务端已经执行了请求，只是由于短暂的网络波动导致响应在发送给客户端的过程中延迟了。"}]},{"ID":"20240201213776-xrn00t1","Type":"NodeParagraph","Properties":{"id":"20240201213776-xrn00t1","updated":"20240201213776"},"Children":[{"Type":"NodeText","Data":"举个例子：用户支付购买某个课程，结果用户支付的请求由于重试的问题导致用户购买同一门课程支付了两次。对于这种情况，我们在执行用户购买课程的请求的时候需要判断一下用户是否已经购买过。这样的话，就不会因为重试的问题导致重复购买了。"}]},{"ID":"20240201213777-4j797kk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213777-4j797kk","updated":"20240201213777"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Java 中如何实现重试？"}]},{"ID":"20240201213778-4vmavll","Type":"NodeParagraph","Properties":{"id":"20240201213778-4vmavll","updated":"20240201213778"},"Children":[{"Type":"NodeText","Data":"如果要手动编写代码实现重试逻辑的话，可以通过循环（例如 while 或 for 循环）或者递归实现。不过，一般不建议自己动手实现，有很多第三方开源库提供了更完善的重试机制实现，例如 Spring Retry、Resilience4j、Guava Retrying。"}]},{"ID":"20240201213779-ejhb983","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213779-ejhb983","updated":"20240201213779"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213780-f93khut","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213780-f93khut","updated":"20240201213780"},"Children":[{"ID":"20240201213781-s0vzzzl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213781-s0vzzzl","updated":"20240201213781"},"Children":[{"ID":"20240201213782-9hhgeh1","Type":"NodeParagraph","Properties":{"id":"20240201213782-9hhgeh1","updated":"20240201213782"},"Children":[{"Type":"NodeText","Data":"微服务之间调用超时的设置治理："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.infoq.cn/article/eyrslar53l6hjm5yjgyx","TextMarkTextContent":"https://www.infoq.cn/article/eyrslar53l6hjm5yjgyx"}]}]},{"ID":"20240201213783-e3t1cs5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213783-e3t1cs5","updated":"20240201213783"},"Children":[{"ID":"20240201213784-m882djk","Type":"NodeParagraph","Properties":{"id":"20240201213784-m882djk","updated":"20240201213784"},"Children":[{"Type":"NodeText","Data":"超时、重试和抖动回退："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/","TextMarkTextContent":"https://aws.amazon.com/cn/builders-library/timeouts-retries-and-backoff-with-jitter/"}]}]}]},{"ID":"20240201213785-2ggpnkp","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213785-2ggpnkp","updated":"20240201213785"}}]}