{"ID":"20240201213439-u6137qb","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213439-u6137qb","title":"redis-skiplist","updated":"20240201213439"},"Children":[{"ID":"20240201213440-pu2j2vm","Type":"NodeThematicBreak","Properties":{"id":"20240201213440-pu2j2vm","updated":"20240201213440"}},{"ID":"20240201213441-uq90n2p","Type":"NodeParagraph","Properties":{"id":"20240201213441-uq90n2p","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"title: Redis为什么用跳表实现有序集合"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 数据库"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213442-nfol8g9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213442-nfol8g9","updated":"20240201213442"},"Children":[{"ID":"20240201213443-qsj9d2w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213443-qsj9d2w","updated":"20240201213443"},"Children":[{"ID":"20240201213444-lvcsztu","Type":"NodeParagraph","Properties":{"id":"20240201213444-lvcsztu","updated":"20240201213444"},"Children":[{"Type":"NodeText","Data":"Redis"}]}]}]},{"ID":"20240201213445-nsa4bym","Type":"NodeThematicBreak","Properties":{"id":"20240201213445-nsa4bym","updated":"20240201213445"}},{"ID":"20240201213446-8bhjnw6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213446-8bhjnw6","updated":"20240201213446"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"前言"}]},{"ID":"20240201213447-sik78or","Type":"NodeParagraph","Properties":{"id":"20240201213447-sik78or","updated":"20240201213447"},"Children":[{"Type":"NodeText","Data":"近几年针对 Redis 面试时会涉及常见数据结构的底层设计，其中就有这么一道比较有意思的面试题：“Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。"}]},{"ID":"20240201213448-jzdc9kl","Type":"NodeParagraph","Properties":{"id":"20240201213448-jzdc9kl","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"本文就以这道大厂常问的面试题为切入点，带大家详细了解一下跳表这个数据结构。"}]},{"ID":"20240201213449-xcr2ftn","Type":"NodeParagraph","Properties":{"id":"20240201213449-xcr2ftn","updated":"20240201213449"},"Children":[{"Type":"NodeText","Data":"本文整体脉络如下图所示，笔者会从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redis 的有序集合底层实现的跳表有着更深刻的理解和掌握。"}]},{"ID":"20240201213450-r3x8fv8","Type":"NodeParagraph","Properties":{"id":"20240201213450-r3x8fv8","updated":"20240201213450"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005468.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213451-rtxuoel","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213451-rtxuoel","updated":"20240201213451"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"跳表在 Redis 中的运用"}]},{"ID":"20240201213452-9timnuo","Type":"NodeParagraph","Properties":{"id":"20240201213452-9timnuo","updated":"20240201213452"},"Children":[{"Type":"NodeText","Data":"这里我们需要先了解一下 Redis 用到跳表的数据结构有序集合的使用，Redis 有个比较常用的数据结构叫"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有序集合(sorted set，简称 zset)"},{"Type":"NodeText","Data":"，正如其名它是一个可以保证有序且元素唯一的集合，所以它经常用于排行榜等需要进行统计排列的场景。"}]},{"ID":"20240201213453-3o9r55g","Type":"NodeParagraph","Properties":{"id":"20240201213453-3o9r55g","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"这里我们通过命令行的形式演示一下排行榜的实现，可以看到笔者分输入 3 名用户："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"xiaoming"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"xiaohong"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"xiaowang"},{"Type":"NodeText","Data":"，它们的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"score"},{"Type":"NodeText","Data":"分别是 60、80、60，最终按照成绩升级降序排列。"}]},{"ID":"20240201213454-n66lyn1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213454-n66lyn1","updated":"20240201213454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\n127.0.0.1:6379\u003e zadd rankList 60 xiaoming\n(integer) 1\n127.0.0.1:6379\u003e zadd rankList 80 xiaohong\n(integer) 1\n127.0.0.1:6379\u003e zadd rankList 60 xiaowang\n(integer) 1\n\n# 返回有序集中指定区间内的成员，通过索引，分数从高到低\n127.0.0.1:6379\u003e ZREVRANGE rankList 0 100 WITHSCORES\n1) \"xiaohong\"\n2) \"80\"\n3) \"xiaowang\"\n4) \"60\"\n5) \"xiaoming\"\n6) \"60\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213455-gj70pmx","Type":"NodeParagraph","Properties":{"id":"20240201213455-gj70pmx","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"此时我们通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"object"},{"Type":"NodeText","Data":" 指令查看 zset 的数据结构，可以看到当前有序集合存储的还是是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ziplist(压缩列表)"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213456-8zudwrc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213456-8zudwrc","updated":"20240201213456"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e object encoding rankList\n\"ziplist\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213457-hggbweb","Type":"NodeParagraph","Properties":{"id":"20240201213457-hggbweb","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"因为设计者考虑到 Redis 数据存放于内存，为了节约宝贵的内存空间在有序集合在元素小于 64 字节且个数小于 128 的时候，会使用 ziplist，而这个阈值的默认值的设置就来自下面这两个配置项。"}]},{"ID":"20240201213458-x3z4yf5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213458-x3z4yf5","updated":"20240201213458"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"zset-max-ziplist-value 64\nzset-max-ziplist-entries 128\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213459-edpsgiz","Type":"NodeParagraph","Properties":{"id":"20240201213459-edpsgiz","updated":"20240201213459"},"Children":[{"Type":"NodeText","Data":"一旦有序集合中的某个元素超出这两个其中的一个阈值它就会转为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"skiplist"},{"Type":"NodeText","Data":"（实际是 dict+skiplist，还会借用字典来提高获取指定元素的效率）。"}]},{"ID":"20240201213460-ecoq10w","Type":"NodeParagraph","Properties":{"id":"20240201213460-ecoq10w","updated":"20240201213460"},"Children":[{"Type":"NodeText","Data":"我们不妨在添加一个大于 64 字节的元素，可以看到有序集合的底层存储转为 skiplist。"}]},{"ID":"20240201213461-2gkdzqa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213461-2gkdzqa","updated":"20240201213461"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e zadd rankList 90 yigemingzihuichaoguo64zijiedeyonghumingchengyongyuceshitiaobiaodeshijiyunyong\n(integer) 1\n\n# 超过阈值，转为跳表\n127.0.0.1:6379\u003e object encoding rankList\n\"skiplist\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213462-70abop7","Type":"NodeParagraph","Properties":{"id":"20240201213462-70abop7","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"也就是说，ZSet 有两种不同的实现，分别是 ziplist 和 skiplist，具体使用哪种结构进行存储的规则如下："}]},{"ID":"20240201213463-iqul9d2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-iqul9d2","updated":"20240201213463"},"Children":[{"ID":"20240201213464-nj6d2gf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-nj6d2gf","updated":"20240201213464"},"Children":[{"ID":"20240201213465-m85tkwl","Type":"NodeParagraph","Properties":{"id":"20240201213465-m85tkwl","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"当有序集合对象同时满足以下两个条件时，使用 ziplist："}]},{"ID":"20240201213466-sui9nh6","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213466-sui9nh6","updated":"20240201213466"},"Children":[{"ID":"20240201213467-3n31gbn","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213467-3n31gbn","updated":"20240201213467"},"Children":[{"ID":"20240201213468-keore56","Type":"NodeParagraph","Properties":{"id":"20240201213468-keore56","updated":"20240201213468"},"Children":[{"Type":"NodeText","Data":"ZSet 保存的键值对数量少于 128 个；"}]}]},{"ID":"20240201213469-depyn2z","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213469-depyn2z","updated":"20240201213469"},"Children":[{"ID":"20240201213470-dh00js9","Type":"NodeParagraph","Properties":{"id":"20240201213470-dh00js9","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"每个元素的长度小于 64 字节。"}]}]}]}]},{"ID":"20240201213471-rcaxxj3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-rcaxxj3","updated":"20240201213471"},"Children":[{"ID":"20240201213472-uet213y","Type":"NodeParagraph","Properties":{"id":"20240201213472-uet213y","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"如果不满足上述两个条件，那么使用 skiplist 。"}]}]}]},{"ID":"20240201213473-mtxwr52","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213473-mtxwr52","updated":"20240201213473"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"手写一个跳表"}]},{"ID":"20240201213474-3bvner3","Type":"NodeParagraph","Properties":{"id":"20240201213474-3bvner3","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"为了更好的回答上述问题以及更好的理解和掌握跳表，这里可以通过手写一个简单的跳表的形式来帮助读者理解跳表这个数据结构。"}]},{"ID":"20240201213475-e67536z","Type":"NodeParagraph","Properties":{"id":"20240201213475-e67536z","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"我们都知道有序链表在添加、查询、删除的平均时间复杂都都是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"O(n)"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"即线性增长，所以一旦节点数量达到一定体量后其性能表现就会非常差劲。而跳表我们完全可以理解为在原始链表基础上，建立多级索引，通过多级索引检索定位将增删改查的时间复杂度变为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"O(log n)"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213476-qtjxyoo","Type":"NodeParagraph","Properties":{"id":"20240201213476-qtjxyoo","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"可能这里说的有些抽象，我们举个例子，以下图跳表为例，其原始链表存储按序存储 1-10，有 2 级索引，每级索引的索引个数都是基于下层元素个数的一半。"}]},{"ID":"20240201213477-7v03s4q","Type":"NodeParagraph","Properties":{"id":"20240201213477-7v03s4q","updated":"20240201213477"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005436.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213478-cpk2bav","Type":"NodeParagraph","Properties":{"id":"20240201213478-cpk2bav","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"假如我们需要查询元素 6，其工作流程如下："}]},{"ID":"20240201213479-h6g7tbx","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213479-h6g7tbx","updated":"20240201213479"},"Children":[{"ID":"20240201213480-ab3q4dr","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213480-ab3q4dr","updated":"20240201213480"},"Children":[{"ID":"20240201213481-m5pljbq","Type":"NodeParagraph","Properties":{"id":"20240201213481-m5pljbq","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"从 2 级索引开始，先来到节点 4。"}]}]},{"ID":"20240201213482-yagqjpq","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213482-yagqjpq","updated":"20240201213482"},"Children":[{"ID":"20240201213483-0d13mwp","Type":"NodeParagraph","Properties":{"id":"20240201213483-0d13mwp","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"查看 4 的后继节点，是 8 的 2 级索引，这个值大于 6，说明 2 级索引后续的索引都是大于 6 的，没有再往后搜寻的必要，我们索引向下查找。"}]}]},{"ID":"20240201213484-4dz3uks","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213484-4dz3uks","updated":"20240201213484"},"Children":[{"ID":"20240201213485-bv8c8kk","Type":"NodeParagraph","Properties":{"id":"20240201213485-bv8c8kk","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"来到 4 的 1 级索引，比对其后继节点为 6，查找结束。"}]}]}]},{"ID":"20240201213486-q0zqqk4","Type":"NodeParagraph","Properties":{"id":"20240201213486-q0zqqk4","updated":"20240201213486"},"Children":[{"Type":"NodeText","Data":"相较于原始有序链表需要 6 次，我们的跳表通过建立多级索引，我们只需两次就直接定位到了目标元素，其查寻的复杂度被直接优化为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"O(log n)"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213487-ld281j2","Type":"NodeParagraph","Properties":{"id":"20240201213487-ld281j2","updated":"20240201213487"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005524.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213488-8165nm9","Type":"NodeParagraph","Properties":{"id":"20240201213488-8165nm9","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"对应的添加也是一个道理，假如我们需要在这个有序集合中添加一个元素 7，那么我们就需要通过跳表找到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"小于元素 7 的最大值"},{"Type":"NodeText","Data":"，也就是下图元素 6 的位置，将其插入到元素 6 的后面，让元素 6 的索引指向新插入的节点 7，其工作流程如下："}]},{"ID":"20240201213489-z11bcgt","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213489-z11bcgt","updated":"20240201213489"},"Children":[{"ID":"20240201213490-lvhnc3n","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213490-lvhnc3n","updated":"20240201213490"},"Children":[{"ID":"20240201213491-9fvd16s","Type":"NodeParagraph","Properties":{"id":"20240201213491-9fvd16s","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"从 2 级索引开始定位到了元素 4 的索引。"}]}]},{"ID":"20240201213492-ramk7oc","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213492-ramk7oc","updated":"20240201213492"},"Children":[{"ID":"20240201213493-rvmbhbi","Type":"NodeParagraph","Properties":{"id":"20240201213493-rvmbhbi","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"查看索引 4 的后继索引为 8，索引向下推进。"}]}]},{"ID":"20240201213494-tpr07qp","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213494-tpr07qp","updated":"20240201213494"},"Children":[{"ID":"20240201213495-uplbqp3","Type":"NodeParagraph","Properties":{"id":"20240201213495-uplbqp3","updated":"20240201213495"},"Children":[{"Type":"NodeText","Data":"来到 1 级索引，发现索引 4 后继索引为 6，小于插入元素 7，指针推进到索引 6 位置。"}]}]},{"ID":"20240201213496-l7xact3","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213496-l7xact3","updated":"20240201213496"},"Children":[{"ID":"20240201213497-1gg2ydh","Type":"NodeParagraph","Properties":{"id":"20240201213497-1gg2ydh","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"继续比较 6 的后继节点为索引 8，大于元素 7，索引继续向下。"}]}]},{"ID":"20240201213498-szfj6v0","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213498-szfj6v0","updated":"20240201213498"},"Children":[{"ID":"20240201213499-ftmgkxu","Type":"NodeParagraph","Properties":{"id":"20240201213499-ftmgkxu","updated":"20240201213499"},"Children":[{"Type":"NodeText","Data":"最终我们来到 6 的原始节点，发现其后继节点为 7，指针没有继续向下的空间，自此我们可知元素 6 就是小于插入元素 7 的最大值，于是便将元素 7 插入。"}]}]}]},{"ID":"20240201213500-8evag2b","Type":"NodeParagraph","Properties":{"id":"20240201213500-8evag2b","updated":"20240201213500"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005480.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213501-wy534fp","Type":"NodeParagraph","Properties":{"id":"20240201213501-wy534fp","updated":"20240201213501"},"Children":[{"Type":"NodeText","Data":"这里我们又面临一个问题，我们是否需要为元素 7 建立索引，索引多高合适？"}]},{"ID":"20240201213502-p7fbvm5","Type":"NodeParagraph","Properties":{"id":"20240201213502-p7fbvm5","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"我们上文提到，理想情况是每一层索引是下一层元素个数的二分之一，假设我们的总共有 16 个元素，对应各级索引元素个数应该是："}]},{"ID":"20240201213503-0idvr1k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213503-0idvr1k","updated":"20240201213503"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"1. 一级索引:16/2=8\n2. 二级索引:8/2 =4\n3. 三级索引:4/2=2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213504-t1escua","Type":"NodeParagraph","Properties":{"id":"20240201213504-t1escua","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"由此我们用数学归纳法可知："}]},{"ID":"20240201213505-7fzcjet","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213505-7fzcjet","updated":"20240201213505"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"1. 一级索引:16/2=16/2^1=8\n2. 二级索引:8/2 =\u003e 16/2^2 =4\n3. 三级索引:4/2=\u003e16/2^3=2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213506-xkm2qoa","Type":"NodeParagraph","Properties":{"id":"20240201213506-xkm2qoa","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"假设元素个数为 n，那么对应 k 层索引的元素个数 r 计算公式为:"}]},{"ID":"20240201213507-fdbxrbp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213507-fdbxrbp","updated":"20240201213507"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"r=n/2^k\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213508-6pznmr9","Type":"NodeParagraph","Properties":{"id":"20240201213508-6pznmr9","updated":"20240201213508"},"Children":[{"Type":"NodeText","Data":"同理我们再来推断以下索引的最大高度，一般来说最高级索引的元素个数为 2，我们设元素总个数为 n，索引高度为 h，代入上述公式可得："}]},{"ID":"20240201213509-5h3egvc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213509-5h3egvc","updated":"20240201213509"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"2= n/2^h\n=\u003e 2*2^h=n\n=\u003e 2^(h+1)=n\n=\u003e h+1=log2^n\n=\u003e h=log2^n -1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213510-y3dhlwo","Type":"NodeParagraph","Properties":{"id":"20240201213510-y3dhlwo","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"而 Redis 又是内存数据库，我们假设元素最大个数是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"65536"},{"Type":"NodeText","Data":"，我们把"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"65536"},{"Type":"NodeText","Data":"代入上述公式可知最大高度为 16。所以我们建议添加一个元素后为其建立的索引高度不超过 16。"}]},{"ID":"20240201213511-y869sn0","Type":"NodeParagraph","Properties":{"id":"20240201213511-y869sn0","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"因为我们要求尽可能保证每一个上级索引都是下级索引的一半，在实现高度生成算法时，我们可以这样设计："}]},{"ID":"20240201213512-kzrz452","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213512-kzrz452","updated":"20240201213512"},"Children":[{"ID":"20240201213513-u2pxmte","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213513-u2pxmte","updated":"20240201213513"},"Children":[{"ID":"20240201213514-jgun3dg","Type":"NodeParagraph","Properties":{"id":"20240201213514-jgun3dg","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"跳表的高度计算从原始链表开始，即默认情况下插入的元素的高度为 1，代表没有索引，只有元素节点。"}]}]},{"ID":"20240201213515-kvcx7fh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213515-kvcx7fh","updated":"20240201213515"},"Children":[{"ID":"20240201213516-1ow4am3","Type":"NodeParagraph","Properties":{"id":"20240201213516-1ow4am3","updated":"20240201213516"},"Children":[{"Type":"NodeText","Data":"设计一个为插入元素生成节点索引高度 level 的方法。"}]}]},{"ID":"20240201213517-sa08x01","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213517-sa08x01","updated":"20240201213517"},"Children":[{"ID":"20240201213518-aaovgsx","Type":"NodeParagraph","Properties":{"id":"20240201213518-aaovgsx","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"进行一次随机运算，随机数值范围为 0-1 之间。"}]}]},{"ID":"20240201213519-w7t4out","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213519-w7t4out","updated":"20240201213519"},"Children":[{"ID":"20240201213520-m9qmk5k","Type":"NodeParagraph","Properties":{"id":"20240201213520-m9qmk5k","updated":"20240201213520"},"Children":[{"Type":"NodeText","Data":"如果随机数大于 0.5 则为当前元素添加一级索引，自此我们保证生成一级索引的概率为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"50%"},{"Type":"NodeText","Data":"，这也就保证了 1 级索引理想情况下只有一半的元素会生成索引。"}]}]},{"ID":"20240201213521-5yx6kwz","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213521-5yx6kwz","updated":"20240201213521"},"Children":[{"ID":"20240201213522-9ws6b45","Type":"NodeParagraph","Properties":{"id":"20240201213522-9ws6b45","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"同理后续每次随机算法得到的值大于 0.5 时，我们的索引高度就加 1，这样就可以保证节点生成的 2 级索引概率为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"25%"},{"Type":"NodeText","Data":"，3 级索引为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"12.5%"},{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213523-dq4i5ai","Type":"NodeParagraph","Properties":{"id":"20240201213523-dq4i5ai","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"我们回过头，上述插入 7 之后，我们通过随机算法得到 2，即要为其建立 1 级索引："}]},{"ID":"20240201213524-redzvky","Type":"NodeParagraph","Properties":{"id":"20240201213524-redzvky","updated":"20240201213524"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005505.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213525-eevw5l1","Type":"NodeParagraph","Properties":{"id":"20240201213525-eevw5l1","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"最后我们再来说说删除，假设我们这里要删除元素 10，我们必须定位到当前跳表"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"各层"},{"Type":"NodeText","Data":"元素小于 10 的最大值，索引执行步骤为："}]},{"ID":"20240201213526-s7zojem","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213526-s7zojem","updated":"20240201213526"},"Children":[{"ID":"20240201213527-1qe6gnp","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213527-1qe6gnp","updated":"20240201213527"},"Children":[{"ID":"20240201213528-ysf38uy","Type":"NodeParagraph","Properties":{"id":"20240201213528-ysf38uy","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"2 级索引 4 的后继节点为 8，指针推进。"}]}]},{"ID":"20240201213529-06vubj6","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213529-06vubj6","updated":"20240201213529"},"Children":[{"ID":"20240201213530-yfzl4iu","Type":"NodeParagraph","Properties":{"id":"20240201213530-yfzl4iu","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"索引 8 无后继节点，该层无要删除的元素，指针直接向下。"}]}]},{"ID":"20240201213531-utc47ia","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213531-utc47ia","updated":"20240201213531"},"Children":[{"ID":"20240201213532-r64gaaj","Type":"NodeParagraph","Properties":{"id":"20240201213532-r64gaaj","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"1 级索引 8 后继节点为 10，说明 1 级索引 8 在进行删除时需要将自己的指针和 1 级索引 10 断开联系，将 10 删除。"}]}]},{"ID":"20240201213533-1z53j8x","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213533-1z53j8x","updated":"20240201213533"},"Children":[{"ID":"20240201213534-52jqoft","Type":"NodeParagraph","Properties":{"id":"20240201213534-52jqoft","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"1 级索引完成定位后，指针向下，后继节点为 9，指针推进。"}]}]},{"ID":"20240201213535-5qwlnx6","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213535-5qwlnx6","updated":"20240201213535"},"Children":[{"ID":"20240201213536-i9lmsba","Type":"NodeParagraph","Properties":{"id":"20240201213536-i9lmsba","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"9 的后继节点为 10，同理需要让其指向 null，将 10 删除。"}]}]}]},{"ID":"20240201213537-wy045tk","Type":"NodeParagraph","Properties":{"id":"20240201213537-wy045tk","updated":"20240201213537"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005503.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213538-jt01vdt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213538-jt01vdt","updated":"20240201213538"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"模板定义"}]},{"ID":"20240201213539-xrpbawp","Type":"NodeParagraph","Properties":{"id":"20240201213539-xrpbawp","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"有了整体的思路之后，我们可以开始实现一个跳表了，首先定义一下跳表中的节点"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":"，从上文的演示中可以看出每一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":"它都包含以下几个元素："}]},{"ID":"20240201213540-cf1fat1","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213540-cf1fat1","updated":"20240201213540"},"Children":[{"ID":"20240201213541-1z3o39u","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213541-1z3o39u","updated":"20240201213541"},"Children":[{"ID":"20240201213542-xosoegq","Type":"NodeParagraph","Properties":{"id":"20240201213542-xosoegq","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"存储的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"value"},{"Type":"NodeText","Data":"值。"}]}]},{"ID":"20240201213543-d41pvig","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213543-d41pvig","updated":"20240201213543"},"Children":[{"ID":"20240201213544-dh1gl12","Type":"NodeParagraph","Properties":{"id":"20240201213544-dh1gl12","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"后继节点的地址。"}]}]},{"ID":"20240201213545-neb82su","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213545-neb82su","updated":"20240201213545"},"Children":[{"ID":"20240201213546-bcx6wws","Type":"NodeParagraph","Properties":{"id":"20240201213546-bcx6wws","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"多级索引。"}]}]}]},{"ID":"20240201213547-l57e9kw","Type":"NodeParagraph","Properties":{"id":"20240201213547-l57e9kw","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"为了更方便统一管理"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":"后继节点地址和多级索引指向的元素地址，笔者在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":"中设置了一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"forwards"},{"Type":"NodeText","Data":"数组，用于记录原始链表节点的后继节点和多级索引的后继节点指向。"}]},{"ID":"20240201213548-v08awt3","Type":"NodeParagraph","Properties":{"id":"20240201213548-v08awt3","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"以下图为例，我们"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"forwards"},{"Type":"NodeText","Data":"数组长度为 5，其中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"索引 0"},{"Type":"NodeText","Data":"记录的是原始链表节点的后继节点地址，而其余自底向上表示从 1 级索引到 4 级索引的后继节点指向。"}]},{"ID":"20240201213549-fk7dy54","Type":"NodeParagraph","Properties":{"id":"20240201213549-fk7dy54","updated":"20240201213549"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005347.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213550-yz6t1ha","Type":"NodeParagraph","Properties":{"id":"20240201213550-yz6t1ha","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"于是我们的就有了这样一个代码定义，可以看出笔者对于数组的长度设置为固定的 16**(上文的推算最大高度建议是 16)"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，默认"},{"Type":"NodeText","Data":"data"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为-1，节点最大高度"},{"Type":"NodeText","Data":"maxLevel"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"初始化为 1，注意这个"},{"Type":"NodeText","Data":"maxLevel**的值代表原始链表加上索引的总高度。"}]},{"ID":"20240201213551-hj069xg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213551-hj069xg","updated":"20240201213551"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 跳表索引最大高度为16\n */\nprivate static final int MAX_LEVEL = 16;\n\nclass Node {\n    private int data = -1;\n    private Node[] forwards = new Node[MAX_LEVEL];\n    private int maxLevel = 0;\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213552-q10jdbz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213552-q10jdbz","updated":"20240201213552"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"元素添加"}]},{"ID":"20240201213553-7f7afnt","Type":"NodeParagraph","Properties":{"id":"20240201213553-7f7afnt","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"定义好节点之后，我们先实现以下元素的添加，添加元素时首先自然是设置"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"data"},{"Type":"NodeText","Data":"这一步我们直接根据将传入的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"value"},{"Type":"NodeText","Data":"设置到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"data"},{"Type":"NodeText","Data":"上即可。"}]},{"ID":"20240201213554-t2jflp1","Type":"NodeParagraph","Properties":{"id":"20240201213554-t2jflp1","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"然后就是高度"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"maxLevel"},{"Type":"NodeText","Data":"的设置 ，我们在上文也已经给出了思路，默认高度为 1，即只有一个原始链表节点，通过随机算法每次大于 0.5 索引高度加 1，由此我们得出高度计算的算法"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"randomLevel()"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213555-gm0f7po","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213555-gm0f7po","updated":"20240201213555"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。\n * 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。\n * 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：\n * 50%的概率返回 1\n * 25%的概率返回 2\n *  12.5%的概率返回 3 ...\n * @return\n */\nprivate int randomLevel() {\n    int level = 1;\n    while (Math.random() \u003e PROB \u0026\u0026 level \u003c MAX_LEVEL) {\n        ++level;\n    }\n    return level;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213556-8zu1348","Type":"NodeParagraph","Properties":{"id":"20240201213556-8zu1348","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"然后再设置当前要插入的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":"索引的后继节点地址，这一步稍微复杂一点，我们假设当前节点的高度为 4，即 1 个节点加 3 个索引，所以我们创建一个长度为 4 的数组"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"maxOfMinArr"},{"Type":"NodeText","Data":" ，遍历各级索引节点中小于当前"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"value"},{"Type":"NodeText","Data":"的最大值。"}]},{"ID":"20240201213557-hgyewpg","Type":"NodeParagraph","Properties":{"id":"20240201213557-hgyewpg","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"假设我们要插入的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"value"},{"Type":"NodeText","Data":"为 5，我们的数组查找结果当前节点的前驱节点和 1 级索引、2 级索引的前驱节点都为 4，三级索引为空。"}]},{"ID":"20240201213558-cugehfy","Type":"NodeParagraph","Properties":{"id":"20240201213558-cugehfy","updated":"20240201213558"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005299.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213559-5ihgoij","Type":"NodeParagraph","Properties":{"id":"20240201213559-5ihgoij","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"然后我们基于这个数组"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"maxOfMinArr"},{"Type":"NodeText","Data":" 定位到各级的后继节点，让插入的元素 5 指向这些后继节点，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"maxOfMinArr"},{"Type":"NodeText","Data":"指向 5，结果如下图："}]},{"ID":"20240201213560-90vhdpg","Type":"NodeParagraph","Properties":{"id":"20240201213560-90vhdpg","updated":"20240201213560"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005369.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213561-a9d449i","Type":"NodeParagraph","Properties":{"id":"20240201213561-a9d449i","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"转化成代码就是下面这个形式，是不是很简单呢？我们继续："}]},{"ID":"20240201213562-b1yuaqi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213562-b1yuaqi","updated":"20240201213562"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 默认情况下的高度为1，即只有自己一个节点\n */\nprivate int leveCount = 1;\n\n/**\n * 跳表最底层的节点，即头节点\n */\nprivate Node h = new Node();\n\npublic void add(int value) {\n\n    //随机生成高度\n    int level = randomLevel();\n\n    Node newNode = new Node();\n    newNode.data = value;\n    newNode.maxLevel = level;\n\n    //创建一个node数组，用于记录小于当前value的最大值\n    Node[] maxOfMinArr = new Node[level];\n    //默认情况下指向头节点\n    for (int i = 0; i \u003c level; i++) {\n        maxOfMinArr[i] = h;\n    }\n\n    //基于上述结果拿到当前节点的后继节点\n    Node p = h;\n    for (int i = level - 1; i \u003e= 0; i--) {\n        while (p.forwards[i] != null \u0026\u0026 p.forwards[i].data \u003c value) {\n            p = p.forwards[i];\n        }\n        maxOfMinArr[i] = p;\n    }\n\n    //更新前驱节点的后继节点为当前节点newNode\n    for (int i = 0; i \u003c level; i++) {\n        newNode.forwards[i] = maxOfMinArr[i].forwards[i];\n        maxOfMinArr[i].forwards[i] = newNode;\n    }\n\n    //如果当前newNode高度大于跳表最高高度则更新leveCount\n    if (leveCount \u003c level) {\n        leveCount = level;\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213563-hhhuqxk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213563-hhhuqxk","updated":"20240201213563"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"元素查询"}]},{"ID":"20240201213564-4ot7mox","Type":"NodeParagraph","Properties":{"id":"20240201213564-4ot7mox","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"查询逻辑比较简单，从跳表最高级的索引开始定位找到小于要查的 value 的最大值，以下图为例，我们希望查找到节点 8："}]},{"ID":"20240201213565-3zgo5mi","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213565-3zgo5mi","updated":"20240201213565"},"Children":[{"ID":"20240201213566-noyoknr","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213566-noyoknr","updated":"20240201213566"},"Children":[{"ID":"20240201213567-78p6p6a","Type":"NodeParagraph","Properties":{"id":"20240201213567-78p6p6a","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"跳表的 3 级索引首先找找到 5 的索引，5 的 3 级索引"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"forwards[3]"},{"Type":"NodeText","Data":"指向空，索引直接向下。"}]}]},{"ID":"20240201213568-gi4v8om","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213568-gi4v8om","updated":"20240201213568"},"Children":[{"ID":"20240201213569-lwo0lox","Type":"NodeParagraph","Properties":{"id":"20240201213569-lwo0lox","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"来到 5 的 2 级索引，其后继"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"forwards[2]"},{"Type":"NodeText","Data":"指向 8，继续向下。"}]}]},{"ID":"20240201213570-125qmdt","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213570-125qmdt","updated":"20240201213570"},"Children":[{"ID":"20240201213571-wz4qsbl","Type":"NodeParagraph","Properties":{"id":"20240201213571-wz4qsbl","updated":"20240201213571"},"Children":[{"Type":"NodeText","Data":"5 的 1 级索引"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"forwards[1]"},{"Type":"NodeText","Data":"指向索引 6，继续向前。"}]}]},{"ID":"20240201213572-fiktup4","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213572-fiktup4","updated":"20240201213572"},"Children":[{"ID":"20240201213573-ujghjqc","Type":"NodeParagraph","Properties":{"id":"20240201213573-ujghjqc","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"索引 6 的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"forwards[1]"},{"Type":"NodeText","Data":"指向索引 8，继续向下。"}]}]},{"ID":"20240201213574-xo4afbd","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213574-xo4afbd","updated":"20240201213574"},"Children":[{"ID":"20240201213575-vkfer0i","Type":"NodeParagraph","Properties":{"id":"20240201213575-vkfer0i","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"我们在原始节点向前找到节点 7。"}]}]},{"ID":"20240201213576-ozjbo5l","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213576-ozjbo5l","updated":"20240201213576"},"Children":[{"ID":"20240201213577-q7iaosz","Type":"NodeParagraph","Properties":{"id":"20240201213577-q7iaosz","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"节点 7 后续就是节点 8，继续向前为节点 8，无法继续向下，结束搜寻。"}]}]},{"ID":"20240201213578-iawnstp","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213578-iawnstp","updated":"20240201213578"},"Children":[{"ID":"20240201213579-oqe9sq3","Type":"NodeParagraph","Properties":{"id":"20240201213579-oqe9sq3","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"判断 7 的前驱，等于 8，查找结束。"}]}]}]},{"ID":"20240201213580-e0r6rta","Type":"NodeParagraph","Properties":{"id":"20240201213580-e0r6rta","updated":"20240201213580"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005323.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213581-vv54a1l","Type":"NodeParagraph","Properties":{"id":"20240201213581-vv54a1l","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"所以我们的代码实现也很上述步骤差不多，从最高级索引开始向前查找，如果不为空且小于要查找的值，则继续向前搜寻，遇到不小于的节点则继续向下，如此往复，直到得到当前跳表中小于查找值的最大节点，查看其前驱是否等于要查找的值："}]},{"ID":"20240201213582-5mh4ouu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213582-5mh4ouu","updated":"20240201213582"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public Node get(int value) {\n    Node p = h;\n    //找到小于value的最大值\n    for (int i = leveCount - 1; i \u003e= 0; i--) {\n        while (p.forwards[i] != null \u0026\u0026 p.forwards[i].data \u003c value) {\n            p = p.forwards[i];\n        }\n    }\n    //如果p的前驱节点等于value则直接返回\n    if (p.forwards[0] != null \u0026\u0026 p.forwards[0].data == value) {\n        return p.forwards[0];\n    }\n\n    return null;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213583-hi4fu9o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213583-hi4fu9o","updated":"20240201213583"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"元素删除"}]},{"ID":"20240201213584-97frprj","Type":"NodeParagraph","Properties":{"id":"20240201213584-97frprj","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"最后是删除逻辑，需要查找各层级小于要删除节点的最大值，假设我们要删除 10："}]},{"ID":"20240201213585-glu7n2b","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213585-glu7n2b","updated":"20240201213585"},"Children":[{"ID":"20240201213586-drhi9zg","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213586-drhi9zg","updated":"20240201213586"},"Children":[{"ID":"20240201213587-h1u3dvr","Type":"NodeParagraph","Properties":{"id":"20240201213587-h1u3dvr","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"3 级索引得到小于 10 的最大值为 5，继续向下。"}]}]},{"ID":"20240201213588-au1ju1i","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213588-au1ju1i","updated":"20240201213588"},"Children":[{"ID":"20240201213589-318lwny","Type":"NodeParagraph","Properties":{"id":"20240201213589-318lwny","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"2 级索引从索引 5 开始查找，发现小于 10 的最大值为 8，继续向下。"}]}]},{"ID":"20240201213590-k5xd0g8","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213590-k5xd0g8","updated":"20240201213590"},"Children":[{"ID":"20240201213591-ujjkd9l","Type":"NodeParagraph","Properties":{"id":"20240201213591-ujjkd9l","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"同理 1 级索引得到 8，继续向下。"}]}]},{"ID":"20240201213592-whhfer3","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213592-whhfer3","updated":"20240201213592"},"Children":[{"ID":"20240201213593-6vgt1bl","Type":"NodeParagraph","Properties":{"id":"20240201213593-6vgt1bl","updated":"20240201213593"},"Children":[{"Type":"NodeText","Data":"原始节点找到 9。"}]}]},{"ID":"20240201213594-xpyhn24","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213594-xpyhn24","updated":"20240201213594"},"Children":[{"ID":"20240201213595-dc6jjfw","Type":"NodeParagraph","Properties":{"id":"20240201213595-dc6jjfw","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"从最高级索引开始，查看每个小于 10 的节点后继节点是否为 10，如果等于 10，则让这个节点指向 10 的后继节点，将节点 10 及其索引交由 GC 回收。"}]}]}]},{"ID":"20240201213596-bkk0yep","Type":"NodeParagraph","Properties":{"id":"20240201213596-bkk0yep","updated":"20240201213596"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005350.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213597-gi80w4w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213597-gi80w4w","updated":"20240201213597"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 删除\n *\n * @param value\n */\npublic void delete(int value) {\n    Node p = h;\n    //找到各级节点小于value的最大值\n    Node[] updateArr = new Node[leveCount];\n    for (int i = leveCount - 1; i \u003e= 0; i--) {\n        while (p.forwards[i] != null \u0026\u0026 p.forwards[i].data \u003c value) {\n            p = p.forwards[i];\n        }\n        updateArr[i] = p;\n    }\n    //查看原始层节点前驱是否等于value，若等于则说明存在要删除的值\n    if (p.forwards[0] != null \u0026\u0026 p.forwards[0].data == value) {\n        //从最高级索引开始查看其前驱是否等于value，若等于则将当前节点指向value节点的后继节点\n        for (int i = leveCount - 1; i \u003e= 0; i--) {\n            if (updateArr[i].forwards[i] != null \u0026\u0026 updateArr[i].forwards[i].data == value) {\n                updateArr[i].forwards[i] = updateArr[i].forwards[i].forwards[i];\n            }\n        }\n    }\n\n    //从最高级开始查看是否有一级索引为空，若为空则层级减1\n    while (leveCount \u003e 1 \u0026\u0026 h.forwards[leveCount] == null) {\n        leveCount--;\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213598-2iguvs8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213598-2iguvs8","updated":"20240201213598"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"完整代码以及测试"}]},{"ID":"20240201213599-76pcmqp","Type":"NodeParagraph","Properties":{"id":"20240201213599-76pcmqp","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"完整代码如下，读者可自行参阅:"}]},{"ID":"20240201213600-qc5n8io","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213600-qc5n8io","updated":"20240201213600"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class SkipList {\n\n    /**\n     * 跳表索引最大高度为16\n     */\n    private static final int MAX_LEVEL = 16;\n\n    /**\n     * 每个节点添加一层索引高度的概率为二分之一\n     */\n    private static final float PROB = 0.5 f;\n\n    /**\n     * 默认情况下的高度为1，即只有自己一个节点\n     */\n    private int leveCount = 1;\n\n    /**\n     * 跳表最底层的节点，即头节点\n     */\n    private Node h = new Node();\n\n    public SkipList() {}\n\n    public class Node {\n        private int data = -1;\n        /**\n         *\n         */\n        private Node[] forwards = new Node[MAX_LEVEL];\n        private int maxLevel = 0;\n\n        @Override\n        public String toString() {\n            return \"Node{\" +\n                \"data=\" + data +\n                \", maxLevel=\" + maxLevel +\n                '}';\n        }\n    }\n\n    public void add(int value) {\n\n        //随机生成高度\n        int level = randomLevel();\n\n        Node newNode = new Node();\n        newNode.data = value;\n        newNode.maxLevel = level;\n\n        //创建一个node数组，用于记录小于当前value的最大值\n        Node[] maxOfMinArr = new Node[level];\n        //默认情况下指向头节点\n        for (int i = 0; i \u003c level; i++) {\n            maxOfMinArr[i] = h;\n        }\n\n        //基于上述结果拿到当前节点的后继节点\n        Node p = h;\n        for (int i = level - 1; i \u003e= 0; i--) {\n            while (p.forwards[i] != null \u0026\u0026 p.forwards[i].data \u003c value) {\n                p = p.forwards[i];\n            }\n            maxOfMinArr[i] = p;\n        }\n\n        //更新前驱节点的后继节点为当前节点newNode\n        for (int i = 0; i \u003c level; i++) {\n            newNode.forwards[i] = maxOfMinArr[i].forwards[i];\n            maxOfMinArr[i].forwards[i] = newNode;\n        }\n\n        //如果当前newNode高度大于跳表最高高度则更新leveCount\n        if (leveCount \u003c level) {\n            leveCount = level;\n        }\n\n    }\n\n    /**\n     * 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。\n     * 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。\n     * 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：\n     * 50%的概率返回 1\n     * 25%的概率返回 2\n     *  12.5%的概率返回 3 ...\n     * @return\n     */\n    private int randomLevel() {\n        int level = 1;\n        while (Math.random() \u003e PROB \u0026\u0026 level \u003c MAX_LEVEL) {\n            ++level;\n        }\n        return level;\n    }\n\n    public Node get(int value) {\n        Node p = h;\n        //找到小于value的最大值\n        for (int i = leveCount - 1; i \u003e= 0; i--) {\n            while (p.forwards[i] != null \u0026\u0026 p.forwards[i].data \u003c value) {\n                p = p.forwards[i];\n            }\n        }\n        //如果p的前驱节点等于value则直接返回\n        if (p.forwards[0] != null \u0026\u0026 p.forwards[0].data == value) {\n            return p.forwards[0];\n        }\n\n        return null;\n    }\n\n    /**\n     * 删除\n     *\n     * @param value\n     */\n    public void delete(int value) {\n        Node p = h;\n        //找到各级节点小于value的最大值\n        Node[] updateArr = new Node[leveCount];\n        for (int i = leveCount - 1; i \u003e= 0; i--) {\n            while (p.forwards[i] != null \u0026\u0026 p.forwards[i].data \u003c value) {\n                p = p.forwards[i];\n            }\n            updateArr[i] = p;\n        }\n        //查看原始层节点前驱是否等于value，若等于则说明存在要删除的值\n        if (p.forwards[0] != null \u0026\u0026 p.forwards[0].data == value) {\n            //从最高级索引开始查看其前驱是否等于value，若等于则将当前节点指向value节点的后继节点\n            for (int i = leveCount - 1; i \u003e= 0; i--) {\n                if (updateArr[i].forwards[i] != null \u0026\u0026 updateArr[i].forwards[i].data == value) {\n                    updateArr[i].forwards[i] = updateArr[i].forwards[i].forwards[i];\n                }\n            }\n        }\n\n        //从最高级开始查看是否有一级索引为空，若为空则层级减1\n        while (leveCount \u003e 1 \u0026\u0026 h.forwards[leveCount] == null) {\n            leveCount--;\n        }\n\n    }\n\n    public void printAll() {\n        Node p = h;\n        //基于最底层的非索引层进行遍历，只要后继节点不为空，则速速出当前节点，并移动到后继节点\n        while (p.forwards[0] != null) {\n            System.out.println(p.forwards[0]);\n            p = p.forwards[0];\n        }\n\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213601-ve7ehh3","Type":"NodeParagraph","Properties":{"id":"20240201213601-ve7ehh3","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"对应测试代码和输出结果如下："}]},{"ID":"20240201213602-klezxoe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213602-klezxoe","updated":"20240201213602"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public static void main(String[] args) {\n        SkipList skipList = new SkipList();\n        for (int i = 0; i \u003c 24; i++) {\n            skipList.add(i);\n        }\n\n        System.out.println(\"**********输出添加结果**********\");\n        skipList.printAll();\n\n        SkipList.Node node = skipList.get(22);\n        System.out.println(\"**********查询结果:\" + node+\" **********\");\n\n        skipList.delete(22);\n        System.out.println(\"**********删除结果**********\");\n        skipList.printAll();\n\n\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213603-qzujwmx","Type":"NodeParagraph","Properties":{"id":"20240201213603-qzujwmx","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"输出结果:"}]},{"ID":"20240201213604-9ekvc2y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213604-9ekvc2y","updated":"20240201213604"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"**********输出添加结果**********\nNode{data=0, maxLevel=2}\nNode{data=1, maxLevel=3}\nNode{data=2, maxLevel=1}\nNode{data=3, maxLevel=1}\nNode{data=4, maxLevel=2}\nNode{data=5, maxLevel=2}\nNode{data=6, maxLevel=2}\nNode{data=7, maxLevel=2}\nNode{data=8, maxLevel=4}\nNode{data=9, maxLevel=1}\nNode{data=10, maxLevel=1}\nNode{data=11, maxLevel=1}\nNode{data=12, maxLevel=1}\nNode{data=13, maxLevel=1}\nNode{data=14, maxLevel=1}\nNode{data=15, maxLevel=3}\nNode{data=16, maxLevel=4}\nNode{data=17, maxLevel=2}\nNode{data=18, maxLevel=1}\nNode{data=19, maxLevel=1}\nNode{data=20, maxLevel=1}\nNode{data=21, maxLevel=3}\nNode{data=22, maxLevel=1}\nNode{data=23, maxLevel=1}\n**********查询结果:Node{data=22, maxLevel=1} **********\n**********删除结果**********\nNode{data=0, maxLevel=2}\nNode{data=1, maxLevel=3}\nNode{data=2, maxLevel=1}\nNode{data=3, maxLevel=1}\nNode{data=4, maxLevel=2}\nNode{data=5, maxLevel=2}\nNode{data=6, maxLevel=2}\nNode{data=7, maxLevel=2}\nNode{data=8, maxLevel=4}\nNode{data=9, maxLevel=1}\nNode{data=10, maxLevel=1}\nNode{data=11, maxLevel=1}\nNode{data=12, maxLevel=1}\nNode{data=13, maxLevel=1}\nNode{data=14, maxLevel=1}\nNode{data=15, maxLevel=3}\nNode{data=16, maxLevel=4}\nNode{data=17, maxLevel=2}\nNode{data=18, maxLevel=1}\nNode{data=19, maxLevel=1}\nNode{data=20, maxLevel=1}\nNode{data=21, maxLevel=3}\nNode{data=23, maxLevel=1}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213605-1qlmna5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213605-1qlmna5","updated":"20240201213605"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"和其余三种数据结构的比较"}]},{"ID":"20240201213606-6j4rpja","Type":"NodeParagraph","Properties":{"id":"20240201213606-6j4rpja","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"最后，我们再来回答一下文章开头的那道面试题: “Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。"}]},{"ID":"20240201213607-cbuqi0r","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213607-cbuqi0r","updated":"20240201213607"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"平衡树 vs 跳表"}]},{"ID":"20240201213608-88znq3j","Type":"NodeParagraph","Properties":{"id":"20240201213608-88znq3j","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"先来说说它和平衡树的比较，平衡树我们又会称之为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AVL 树"},{"Type":"NodeText","Data":"，是一个严格的平衡二叉树，平衡条件必须满足（所有节点的左右子树高度差不超过 1，即平衡因子为范围为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[-1,1]"},{"Type":"NodeText","Data":"）。平衡树的插入、删除和查询的时间复杂度和跳表一样都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"O(log n)"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213609-0y6lig9","Type":"NodeParagraph","Properties":{"id":"20240201213609-0y6lig9","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"对于范围查询来说，它也可以通过中序遍历的方式达到和跳表一样的效果。但是它的每一次插入或者删除操作都需要保证整颗树左右节点的绝对平衡，只要不平衡就要通过旋转操作来保持平衡，这个过程是比较耗时的。"}]},{"ID":"20240201213610-rngrh95","Type":"NodeParagraph","Properties":{"id":"20240201213610-rngrh95","updated":"20240201213610"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005312.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213611-z7l3z99","Type":"NodeParagraph","Properties":{"id":"20240201213611-z7l3z99","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"跳表诞生的初衷就是为了克服平衡树的一些缺点，跳表的发明者在论文"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://15721.courses.cs.cmu.edu/spring2018/papers/08-oltpindexes1/pugh-skiplists-cacm1990.pdf","TextMarkTextContent":"《Skip lists: a probabilistic alternative to balanced trees》"},{"Type":"NodeText","Data":"中有详细提到："}]},{"ID":"20240201213612-vlcsap9","Type":"NodeParagraph","Properties":{"id":"20240201213612-vlcsap9","updated":"20240201213612"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/redis/skiplist-a-probabilistic-alternative-to-balanced-trees.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213613-33ev8ju","Type":"NodeBlockquote","Properties":{"id":"20240201213613-33ev8ju","updated":"20240201213613"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213614-0xmr751","Type":"NodeParagraph","Properties":{"id":"20240201213614-0xmr751","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"Skip lists are a data structure that can be used in place of balanced trees. Skip lists use probabilistic balancing rather than strictly enforced balancing and as a result the algorithms for insertion and deletion in skip lists are much simpler and significantly faster than equivalent algorithms for balanced trees."}]},{"ID":"20240201213615-9sivtwi","Type":"NodeParagraph","Properties":{"id":"20240201213615-9sivtwi","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"跳表是一种可以用来代替平衡树的数据结构。跳表使用概率平衡而不是严格强制的平衡，因此，跳表中的插入和删除算法比平衡树的等效算法简单得多，速度也快得多。"}]}]},{"ID":"20240201213616-c8kklh4","Type":"NodeParagraph","Properties":{"id":"20240201213616-c8kklh4","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"笔者这里也贴出了 AVL 树插入操作的核心代码，可以看出每一次添加操作都需要进行一次递归定位插入位置，然后还需要根据回溯到根节点检查沿途的各层节点是否失衡，再通过旋转节点的方式进行调整。"}]},{"ID":"20240201213617-n1qwcu9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213617-n1qwcu9","updated":"20240201213617"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 向二分搜索树中添加新的元素(key, value)\npublic void add(K key, V value) {\n    root = add(root, key, value);\n}\n\n// 向以node为根的二分搜索树中插入元素(key, value)，递归算法\n// 返回插入新节点后二分搜索树的根\nprivate Node add(Node node, K key, V value) {\n\n    if (node == null) {\n        size++;\n        return new Node(key, value);\n    }\n\n    if (key.compareTo(node.key) \u003c 0)\n        node.left = add(node.left, key, value);\n    else if (key.compareTo(node.key) \u003e 0)\n        node.right = add(node.right, key, value);\n    else // key.compareTo(node.key) == 0\n        node.value = value;\n\n    node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));\n\n    int balanceFactor = getBalanceFactor(node);\n\n    // LL型需要右旋\n    if (balanceFactor \u003e 1 \u0026\u0026 getBalanceFactor(node.left) \u003e= 0) {\n        return rightRotate(node);\n    }\n\n    //RR型失衡需要左旋\n    if (balanceFactor \u003c -1 \u0026\u0026 getBalanceFactor(node.right) \u003c= 0) {\n        return leftRotate(node);\n    }\n\n    //LR需要先左旋成LL型，然后再右旋\n    if (balanceFactor \u003e 1 \u0026\u0026 getBalanceFactor(node.left) \u003c 0) {\n        node.left = leftRotate(node.left);\n        return rightRotate(node);\n    }\n\n    //RL\n    if (balanceFactor \u003c -1 \u0026\u0026 getBalanceFactor(node.right) \u003e 0) {\n        node.right = rightRotate(node.right);\n        return leftRotate(node);\n    }\n    return node;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213618-7lcis8z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213618-7lcis8z","updated":"20240201213618"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"红黑树 vs 跳表"}]},{"ID":"20240201213619-pn7610g","Type":"NodeParagraph","Properties":{"id":"20240201213619-pn7610g","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"红黑树（Red Black Tree）也是一种自平衡二叉查找树，它的查询性能略微逊色于 AVL 树，但插入和删除效率更高。红黑树的插入、删除和查询的时间复杂度和跳表一样都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"O(log n)"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213620-7ofjdwu","Type":"NodeParagraph","Properties":{"id":"20240201213620-7ofjdwu","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"红黑树是一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"黑平衡树"},{"Type":"NodeText","Data":"，即从任意节点到另外一个叶子叶子节点，它所经过的黑节点是一样的。当对它进行插入操作时，需要通过旋转和染色（红黑变换）来保证黑平衡。不过，相较于 AVL 树为了维持平衡的开销要小一些。关于红黑树的详细介绍，可以查看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/cs-basics/data-structure/red-black-tree.html","TextMarkTextContent":"红黑树"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213621-vjvan5b","Type":"NodeParagraph","Properties":{"id":"20240201213621-vjvan5b","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"相比较于红黑树来说，跳表的实现也更简单一些。并且，按照区间来查找数据这个操作，红黑树的效率没有跳表高。"}]},{"ID":"20240201213622-49ii7y4","Type":"NodeParagraph","Properties":{"id":"20240201213622-49ii7y4","updated":"20240201213622"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005709.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213623-lzet6d8","Type":"NodeParagraph","Properties":{"id":"20240201213623-lzet6d8","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"对应红黑树添加的核心代码如下，读者可自行参阅理解："}]},{"ID":"20240201213624-7gqqebv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213624-7gqqebv","updated":"20240201213624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private Node \u003c K, V \u003e add(Node \u003c K, V \u003e node, K key, V val) {\n\n    if (node == null) {\n        size++;\n        return new Node(key, val);\n\n    }\n\n    if (key.compareTo(node.key) \u003c 0) {\n        node.left = add(node.left, key, val);\n    } else if (key.compareTo(node.key) \u003e 0) {\n        node.right = add(node.right, key, val);\n    } else {\n        node.val = val;\n    }\n\n    //左节点不为红，右节点为红，左旋\n    if (isRed(node.right) \u0026\u0026 !isRed(node.left)) {\n        node = leftRotate(node);\n    }\n\n    //左链右旋\n    if (isRed(node.left) \u0026\u0026 isRed(node.left.left)) {\n        node = rightRotate(node);\n    }\n\n    //颜色翻转\n    if (isRed(node.left) \u0026\u0026 isRed(node.right)) {\n        flipColors(node);\n    }\n\n    return node;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213625-jyilsnd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213625-jyilsnd","updated":"20240201213625"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"B+树 vs 跳表"}]},{"ID":"20240201213626-ciu5txd","Type":"NodeParagraph","Properties":{"id":"20240201213626-ciu5txd","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"想必使用 MySQL 的读者都知道 B+树这个数据结构，B+树是一种常用的数据结构，具有以下特点："}]},{"ID":"20240201213627-iz121t7","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213627-iz121t7","updated":"20240201213627"},"Children":[{"ID":"20240201213628-ww1lxbc","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213628-ww1lxbc","updated":"20240201213628"},"Children":[{"ID":"20240201213629-jzi0x0i","Type":"NodeParagraph","Properties":{"id":"20240201213629-jzi0x0i","updated":"20240201213629"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多叉树结构"},{"Type":"NodeText","Data":"：它是一棵多叉树，每个节点可以包含多个子节点，减小了树的高度，查询效率高。"}]}]},{"ID":"20240201213630-1zks0ss","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213630-1zks0ss","updated":"20240201213630"},"Children":[{"ID":"20240201213631-o38mn4o","Type":"NodeParagraph","Properties":{"id":"20240201213631-o38mn4o","updated":"20240201213631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存储效率高"},{"Type":"NodeText","Data":":其中非叶子节点存储多个 key，叶子节点存储 value，使得每个节点更够存储更多的键，根据索引进行范围查询时查询效率更高。-"}]}]},{"ID":"20240201213632-n9oclcn","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213632-n9oclcn","updated":"20240201213632"},"Children":[{"ID":"20240201213633-ll14lef","Type":"NodeParagraph","Properties":{"id":"20240201213633-ll14lef","updated":"20240201213633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"平衡性"},{"Type":"NodeText","Data":"：它是绝对的平衡，即树的各个分支高度相差不大，确保查询和插入时间复杂度为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"O(log n)"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213634-bxl951n","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213634-bxl951n","updated":"20240201213634"},"Children":[{"ID":"20240201213635-916z7j0","Type":"NodeParagraph","Properties":{"id":"20240201213635-916z7j0","updated":"20240201213635"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"顺序访问"},{"Type":"NodeText","Data":"：叶子节点间通过链表指针相连，范围查询表现出色。"}]}]},{"ID":"20240201213636-dldc6s2","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213636-dldc6s2","updated":"20240201213636"},"Children":[{"ID":"20240201213637-eh82wfy","Type":"NodeParagraph","Properties":{"id":"20240201213637-eh82wfy","updated":"20240201213637"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据均匀分布"},{"Type":"NodeText","Data":"：B+树插入时可能会导致数据重新分布，使得数据在整棵树分布更加均匀，保证范围查询和删除效率。"}]}]}]},{"ID":"20240201213638-di40s6h","Type":"NodeParagraph","Properties":{"id":"20240201213638-di40s6h","updated":"20240201213638"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005649.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213639-x18pdgu","Type":"NodeParagraph","Properties":{"id":"20240201213639-x18pdgu","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"所以，B+树更适合作为数据库和文件系统中常用的索引结构之一，它的核心思想是通过可能少的 IO 定位到尽可能多的索引来获得查询数据。对于 Redis 这种内存数据库来说，它对这些并不感冒，因为 Redis 作为内存数据库它不可能存储大量的数据，所以对于索引不需要通过 B+树这种方式进行维护，只需按照概率进行随机维护即可，节约内存。而且使用跳表实现 zset 时相较前者来说更简单一些，在进行插入时只需通过索引将数据插入到链表中合适的位置再随机维护一定高度的索引即可，也不需要像 B+树那样插入时发现失衡时还需要对节点分裂与合并。"}]},{"ID":"20240201213640-8vds11c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213640-8vds11c","updated":"20240201213640"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 作者给出的理由"}]},{"ID":"20240201213641-9r6v4vq","Type":"NodeParagraph","Properties":{"id":"20240201213641-9r6v4vq","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"当然我们也可以通过 Redis 的作者自己给出的理由:"}]},{"ID":"20240201213642-x5szrkn","Type":"NodeBlockquote","Properties":{"id":"20240201213642-x5szrkn","updated":"20240201213642"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213643-uleqbq5","Type":"NodeParagraph","Properties":{"id":"20240201213643-uleqbq5","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"There are a few reasons:"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"1、They are not very memory intensive. It's up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees."},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"2、A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees."},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"3、They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code."}]}]},{"ID":"20240201213644-5v72tc6","Type":"NodeParagraph","Properties":{"id":"20240201213644-5v72tc6","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"翻译过来的意思就是:"}]},{"ID":"20240201213645-d3rxdvi","Type":"NodeBlockquote","Properties":{"id":"20240201213645-d3rxdvi","updated":"20240201213645"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213646-kh9e7fi","Type":"NodeParagraph","Properties":{"id":"20240201213646-kh9e7fi","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"有几个原因："}]},{"ID":"20240201213647-9fjid4y","Type":"NodeParagraph","Properties":{"id":"20240201213647-9fjid4y","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"1、它们不是很占用内存。这主要取决于你。改变节点拥有给定层数的概率的参数，会使它们比 B 树更节省内存。"}]},{"ID":"20240201213648-3810rh1","Type":"NodeParagraph","Properties":{"id":"20240201213648-3810rh1","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"2、有序集合经常是许多 ZRANGE 或 ZREVRANGE 操作的目标，也就是说，以链表的方式遍历跳表。通过这种操作，跳表的缓存局部性至少和其他类型的平衡树一样好。"}]},{"ID":"20240201213649-vohnqhd","Type":"NodeParagraph","Properties":{"id":"20240201213649-vohnqhd","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"3、它们更容易实现、调试等等。例如，由于跳表的简单性，我收到了一个补丁（已经在 Redis 主分支中），用增强的跳表实现了 O(log(N))的 ZRANK。它只需要对代码做很少的修改。"}]}]},{"ID":"20240201213650-6r1r934","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213650-6r1r934","updated":"20240201213650"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"小结"}]},{"ID":"20240201213651-fi4mxif","Type":"NodeParagraph","Properties":{"id":"20240201213651-fi4mxif","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"本文通过大量篇幅介绍跳表的工作原理和实现，帮助读者更进一步的熟悉跳表这一数据结构的优劣，最后再结合各个数据结构操作的特点进行比对，从而帮助读者更好的理解这道面试题，建议读者实现理解跳表时，尽可能配合执笔模拟来了解跳表的增删改查详细过程。"}]},{"ID":"20240201213652-ayp7gwp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213652-ayp7gwp","updated":"20240201213652"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213653-4rxl5iz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-4rxl5iz","updated":"20240201213653"},"Children":[{"ID":"20240201213654-ppe8ti6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-ppe8ti6","updated":"20240201213654"},"Children":[{"ID":"20240201213655-nuiex86","Type":"NodeParagraph","Properties":{"id":"20240201213655-nuiex86","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"为啥 redis 使用跳表(skiplist)而不是使用 red-black？:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/20202931/answer/16086538","TextMarkTextContent":"https://www.zhihu.com/question/20202931/answer/16086538"}]}]},{"ID":"20240201213656-2siqzl1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-2siqzl1","updated":"20240201213656"},"Children":[{"ID":"20240201213657-2h5lcb5","Type":"NodeParagraph","Properties":{"id":"20240201213657-2h5lcb5","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"Skip List--跳表（全网最详细的跳表文章没有之一）:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.jianshu.com/p/9d8296562806","TextMarkTextContent":"https://www.jianshu.com/p/9d8296562806"}]}]},{"ID":"20240201213658-k36ot6o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-k36ot6o","updated":"20240201213658"},"Children":[{"ID":"20240201213659-h8fe8x3","Type":"NodeParagraph","Properties":{"id":"20240201213659-h8fe8x3","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"Redis 对象与底层数据结构详解:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/shark_chili3007/article/details/104171986","TextMarkTextContent":"https://blog.csdn.net/shark_chili3007/article/details/104171986"}]}]},{"ID":"20240201213660-16k6ps6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213660-16k6ps6","updated":"20240201213660"},"Children":[{"ID":"20240201213661-fq3krjv","Type":"NodeParagraph","Properties":{"id":"20240201213661-fq3krjv","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"Redis 有序集合(sorted set):"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.runoob.com/redis/redis-sorted-sets.html","TextMarkTextContent":"https://www.runoob.com/redis/redis-sorted-sets.html"}]}]},{"ID":"20240201213662-r4wze8x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-r4wze8x","updated":"20240201213662"},"Children":[{"ID":"20240201213663-xx52p88","Type":"NodeParagraph","Properties":{"id":"20240201213663-xx52p88","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"红黑树和跳表比较:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/576984787","TextMarkTextContent":"https://zhuanlan.zhihu.com/p/576984787"}]}]},{"ID":"20240201213664-szx4ycd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-szx4ycd","updated":"20240201213664"},"Children":[{"ID":"20240201213665-ywd5psu","Type":"NodeParagraph","Properties":{"id":"20240201213665-ywd5psu","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"为什么 redis 的 zset 用跳跃表而不用 b+ tree？:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/f80407515/article/details/129136998","TextMarkTextContent":"https://blog.csdn.net/f80407515/article/details/129136998"}]}]}]}]}