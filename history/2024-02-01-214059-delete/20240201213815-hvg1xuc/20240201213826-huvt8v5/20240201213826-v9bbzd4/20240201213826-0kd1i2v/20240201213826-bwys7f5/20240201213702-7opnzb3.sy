{"ID":"20240201213702-7opnzb3","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213702-7opnzb3","title":"3-commonly-used-cache-read-and-write-strategies","updated":"20240201213702"},"Children":[{"ID":"20240201213703-mi6x6ai","Type":"NodeThematicBreak","Properties":{"id":"20240201213703-mi6x6ai","updated":"20240201213703"}},{"ID":"20240201213704-a39v742","Type":"NodeParagraph","Properties":{"id":"20240201213704-a39v742","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"title: 3种常用的缓存读写策略详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 数据库"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213705-vc0sxuo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-vc0sxuo","updated":"20240201213705"},"Children":[{"ID":"20240201213706-vj3tuvb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-vj3tuvb","updated":"20240201213706"},"Children":[{"ID":"20240201213707-po0ie4e","Type":"NodeParagraph","Properties":{"id":"20240201213707-po0ie4e","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"Redis"}]}]}]},{"ID":"20240201213708-xhnpxal","Type":"NodeThematicBreak","Properties":{"id":"20240201213708-xhnpxal","updated":"20240201213708"}},{"ID":"20240201213709-dggv5lj","Type":"NodeParagraph","Properties":{"id":"20240201213709-dggv5lj","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"看到很多小伙伴简历上写了“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"熟练使用缓存"},{"Type":"NodeText","Data":"”，但是被我问到“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存常用的 3 种读写策略"},{"Type":"NodeText","Data":"”的时候却一脸懵逼。"}]},{"ID":"20240201213710-5f3chah","Type":"NodeParagraph","Properties":{"id":"20240201213710-5f3chah","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"在我看来，造成这个问题的原因是我们在学习 Redis 的时候，可能只是简单了写一些 Demo，并没有去关注缓存的读写策略，或者说压根不知道这回事。"}]},{"ID":"20240201213711-yyozmo3","Type":"NodeParagraph","Properties":{"id":"20240201213711-yyozmo3","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"但是，搞懂 3 种常见的缓存读写策略对于实际工作中使用缓存以及面试中被问到缓存都是非常有帮助的！"}]},{"ID":"20240201213712-w4ozs7r","Type":"NodeParagraph","Properties":{"id":"20240201213712-w4ozs7r","updated":"20240201213712"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"下面介绍到的三种模式各有优劣，不存在最佳模式，根据具体的业务场景选择适合自己的缓存读写模式。"}]},{"ID":"20240201213713-4ug8rl8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213713-4ug8rl8","updated":"20240201213713"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Cache Aside Pattern（旁路缓存模式）"}]},{"ID":"20240201213714-owatkt6","Type":"NodeParagraph","Properties":{"id":"20240201213714-owatkt6","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。"}]},{"ID":"20240201213715-bra7wr1","Type":"NodeParagraph","Properties":{"id":"20240201213715-bra7wr1","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"Cache Aside Pattern 中服务端需要同时维系 db 和 cache，并且是以 db 的结果为准。"}]},{"ID":"20240201213716-el2h0uh","Type":"NodeParagraph","Properties":{"id":"20240201213716-el2h0uh","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"下面我们来看一下这个策略模式下的缓存读写步骤。"}]},{"ID":"20240201213717-pn33t0a","Type":"NodeParagraph","Properties":{"id":"20240201213717-pn33t0a","updated":"20240201213717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213718-ir4ck64","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-ir4ck64","updated":"20240201213718"},"Children":[{"ID":"20240201213719-tso6f9o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213719-tso6f9o","updated":"20240201213719"},"Children":[{"ID":"20240201213720-yd7u9fu","Type":"NodeParagraph","Properties":{"id":"20240201213720-yd7u9fu","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"先更新 db"}]}]},{"ID":"20240201213721-aabur5m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213721-aabur5m","updated":"20240201213721"},"Children":[{"ID":"20240201213722-lmhs3iq","Type":"NodeParagraph","Properties":{"id":"20240201213722-lmhs3iq","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"然后直接删除 cache 。"}]}]}]},{"ID":"20240201213723-pq7s5iu","Type":"NodeParagraph","Properties":{"id":"20240201213723-pq7s5iu","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"简单画了一张图帮助大家理解写的步骤。"}]},{"ID":"20240201213724-0pf18eg","Type":"NodeParagraph","Properties":{"id":"20240201213724-0pf18eg","updated":"20240201213724"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/redis/cache-aside-write.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213725-ggj9a5h","Type":"NodeParagraph","Properties":{"id":"20240201213725-ggj9a5h","updated":"20240201213725"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213726-ndxz5iy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213726-ndxz5iy","updated":"20240201213726"},"Children":[{"ID":"20240201213727-npnauyz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213727-npnauyz","updated":"20240201213727"},"Children":[{"ID":"20240201213728-ftx6rqx","Type":"NodeParagraph","Properties":{"id":"20240201213728-ftx6rqx","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"从 cache 中读取数据，读取到就直接返回"}]}]},{"ID":"20240201213729-uxh5hc0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213729-uxh5hc0","updated":"20240201213729"},"Children":[{"ID":"20240201213730-v97tyll","Type":"NodeParagraph","Properties":{"id":"20240201213730-v97tyll","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"cache 中读取不到的话，就从 db 中读取数据返回"}]}]},{"ID":"20240201213731-5z14uc3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213731-5z14uc3","updated":"20240201213731"},"Children":[{"ID":"20240201213732-bmkmc8u","Type":"NodeParagraph","Properties":{"id":"20240201213732-bmkmc8u","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"再把数据放到 cache 中。"}]}]}]},{"ID":"20240201213733-lrityxv","Type":"NodeParagraph","Properties":{"id":"20240201213733-lrityxv","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"简单画了一张图帮助大家理解读的步骤。"}]},{"ID":"20240201213734-cimjwe2","Type":"NodeParagraph","Properties":{"id":"20240201213734-cimjwe2","updated":"20240201213734"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/redis/cache-aside-read.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213735-mz33e2o","Type":"NodeParagraph","Properties":{"id":"20240201213735-mz33e2o","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"你仅仅了解了上面这些内容的话是远远不够的，我们还要搞懂其中的原理。"}]},{"ID":"20240201213736-io0yosd","Type":"NodeParagraph","Properties":{"id":"20240201213736-io0yosd","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"比如说面试官很可能会追问：“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在写数据的过程中，可以先删除 cache ，后更新 db 么？"},{"Type":"NodeText","Data":"”"}]},{"ID":"20240201213737-t0ia5ua","Type":"NodeParagraph","Properties":{"id":"20240201213737-t0ia5ua","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"答案："},{"Type":"NodeText","Data":" 那肯定是不行的！因为这样可能会造成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库（db）和缓存（Cache）数据不一致"},{"Type":"NodeText","Data":"的问题。"}]},{"ID":"20240201213738-fcvgr79","Type":"NodeParagraph","Properties":{"id":"20240201213738-fcvgr79","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"举例：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。"}]},{"ID":"20240201213739-lbj4v8b","Type":"NodeParagraph","Properties":{"id":"20240201213739-lbj4v8b","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"这个过程可以简单描述为："}]},{"ID":"20240201213740-fyetbv5","Type":"NodeBlockquote","Properties":{"id":"20240201213740-fyetbv5","updated":"20240201213740"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213741-ksr1w5a","Type":"NodeParagraph","Properties":{"id":"20240201213741-ksr1w5a","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"请求 1 先把 cache 中的 A 数据删除 -\u003e 请求 2 从 db 中读取数据-\u003e请求 1 再把 db 中的 A 数据更新"}]}]},{"ID":"20240201213742-0ibw8o8","Type":"NodeParagraph","Properties":{"id":"20240201213742-0ibw8o8","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"当你这样回答之后，面试官可能会紧接着就追问：“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在写数据的过程中，先更新 db，后删除 cache 就没有问题了么？"},{"Type":"NodeText","Data":"”"}]},{"ID":"20240201213743-vk9o2ab","Type":"NodeParagraph","Properties":{"id":"20240201213743-vk9o2ab","updated":"20240201213743"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"答案："},{"Type":"NodeText","Data":" 理论上来说还是可能会出现数据不一致性的问题，不过概率非常小，因为缓存的写入速度是比数据库的写入速度快很多。"}]},{"ID":"20240201213744-bl7sxck","Type":"NodeParagraph","Properties":{"id":"20240201213744-bl7sxck","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"举例：请求 1 先读数据 A，请求 2 随后写数据 A，并且数据 A 在请求 1 请求之前不在缓存中的话，也有可能产生数据不一致性的问题。"}]},{"ID":"20240201213745-7i9vfmp","Type":"NodeParagraph","Properties":{"id":"20240201213745-7i9vfmp","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"这个过程可以简单描述为："}]},{"ID":"20240201213746-mj05nvb","Type":"NodeBlockquote","Properties":{"id":"20240201213746-mj05nvb","updated":"20240201213746"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213747-0bo7zzm","Type":"NodeParagraph","Properties":{"id":"20240201213747-0bo7zzm","updated":"20240201213747"},"Children":[{"Type":"NodeText","Data":"请求 1 从 db 读数据 A-\u003e 请求 2 更新 db 中的数据 A（此时缓存中无数据 A ，故不用执行删除缓存操作 ） -\u003e 请求 1 将数据 A 写入 cache"}]}]},{"ID":"20240201213748-o85rga7","Type":"NodeParagraph","Properties":{"id":"20240201213748-o85rga7","updated":"20240201213748"},"Children":[{"Type":"NodeText","Data":"现在我们再来分析一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cache Aside Pattern 的缺陷"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213749-lbuh2fn","Type":"NodeParagraph","Properties":{"id":"20240201213749-lbuh2fn","updated":"20240201213749"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺陷 1：首次请求数据一定不在 cache 的问题"}]},{"ID":"20240201213750-t990tst","Type":"NodeParagraph","Properties":{"id":"20240201213750-t990tst","updated":"20240201213750"},"Children":[{"Type":"NodeText","Data":"解决办法：可以将热点数据可以提前放入 cache 中。"}]},{"ID":"20240201213751-anpuoix","Type":"NodeParagraph","Properties":{"id":"20240201213751-anpuoix","updated":"20240201213751"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺陷 2：写操作比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。"}]},{"ID":"20240201213752-evi94hz","Type":"NodeParagraph","Properties":{"id":"20240201213752-evi94hz","updated":"20240201213752"},"Children":[{"Type":"NodeText","Data":"解决办法："}]},{"ID":"20240201213753-di54tvo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213753-di54tvo","updated":"20240201213753"},"Children":[{"ID":"20240201213754-8mf7rou","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213754-8mf7rou","updated":"20240201213754"},"Children":[{"ID":"20240201213755-03ryfa3","Type":"NodeParagraph","Properties":{"id":"20240201213755-03ryfa3","updated":"20240201213755"},"Children":[{"Type":"NodeText","Data":"数据库和缓存数据强一致场景：更新 db 的时候同样更新 cache，不过我们需要加一个锁/分布式锁来保证更新 cache 的时候不存在线程安全问题。"}]}]},{"ID":"20240201213756-1uwp5fr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213756-1uwp5fr","updated":"20240201213756"},"Children":[{"ID":"20240201213757-y23ukqf","Type":"NodeParagraph","Properties":{"id":"20240201213757-y23ukqf","updated":"20240201213757"},"Children":[{"Type":"NodeText","Data":"可以短暂地允许数据库和缓存数据不一致的场景：更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样的话就可以保证即使数据不一致的话影响也比较小。"}]}]}]},{"ID":"20240201213758-ie9fgws","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213758-ie9fgws","updated":"20240201213758"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Read/Write Through Pattern（读写穿透）"}]},{"ID":"20240201213759-qlaiakj","Type":"NodeParagraph","Properties":{"id":"20240201213759-qlaiakj","updated":"20240201213759"},"Children":[{"Type":"NodeText","Data":"Read/Write Through Pattern 中服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。"}]},{"ID":"20240201213760-572f406","Type":"NodeParagraph","Properties":{"id":"20240201213760-572f406","updated":"20240201213760"},"Children":[{"Type":"NodeText","Data":"这种缓存读写策略小伙伴们应该也发现了在平时在开发过程中非常少见。抛去性能方面的影响，大概率是因为我们经常使用的分布式缓存 Redis 并没有提供 cache 将数据写入 db 的功能。"}]},{"ID":"20240201213761-fpnmzxx","Type":"NodeParagraph","Properties":{"id":"20240201213761-fpnmzxx","updated":"20240201213761"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写（Write Through）："}]},{"ID":"20240201213762-zl5s4nl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213762-zl5s4nl","updated":"20240201213762"},"Children":[{"ID":"20240201213763-n9icabm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213763-n9icabm","updated":"20240201213763"},"Children":[{"ID":"20240201213764-tg8vqfv","Type":"NodeParagraph","Properties":{"id":"20240201213764-tg8vqfv","updated":"20240201213764"},"Children":[{"Type":"NodeText","Data":"先查 cache，cache 中不存在，直接更新 db。"}]}]},{"ID":"20240201213765-pd0isde","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213765-pd0isde","updated":"20240201213765"},"Children":[{"ID":"20240201213766-cx75l1d","Type":"NodeParagraph","Properties":{"id":"20240201213766-cx75l1d","updated":"20240201213766"},"Children":[{"Type":"NodeText","Data":"cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同步更新 cache 和 db"},{"Type":"NodeText","Data":"）。"}]}]}]},{"ID":"20240201213767-0apw7aw","Type":"NodeParagraph","Properties":{"id":"20240201213767-0apw7aw","updated":"20240201213767"},"Children":[{"Type":"NodeText","Data":"简单画了一张图帮助大家理解写的步骤。"}]},{"ID":"20240201213768-ntth4yx","Type":"NodeParagraph","Properties":{"id":"20240201213768-ntth4yx","updated":"20240201213768"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/redis/write-through.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213769-po2tqod","Type":"NodeParagraph","Properties":{"id":"20240201213769-po2tqod","updated":"20240201213769"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读(Read Through)："}]},{"ID":"20240201213770-ojkct5r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213770-ojkct5r","updated":"20240201213770"},"Children":[{"ID":"20240201213771-lqof8z6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213771-lqof8z6","updated":"20240201213771"},"Children":[{"ID":"20240201213772-wattcjv","Type":"NodeParagraph","Properties":{"id":"20240201213772-wattcjv","updated":"20240201213772"},"Children":[{"Type":"NodeText","Data":"从 cache 中读取数据，读取到就直接返回 。"}]}]},{"ID":"20240201213773-clc7ntm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213773-clc7ntm","updated":"20240201213773"},"Children":[{"ID":"20240201213774-i038e78","Type":"NodeParagraph","Properties":{"id":"20240201213774-i038e78","updated":"20240201213774"},"Children":[{"Type":"NodeText","Data":"读取不到的话，先从 db 加载，写入到 cache 后返回响应。"}]}]}]},{"ID":"20240201213775-kbf1o2z","Type":"NodeParagraph","Properties":{"id":"20240201213775-kbf1o2z","updated":"20240201213775"},"Children":[{"Type":"NodeText","Data":"简单画了一张图帮助大家理解读的步骤。"}]},{"ID":"20240201213776-2hkqmqt","Type":"NodeParagraph","Properties":{"id":"20240201213776-2hkqmqt","updated":"20240201213776"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/redis/read-through.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213777-u42hx49","Type":"NodeParagraph","Properties":{"id":"20240201213777-u42hx49","updated":"20240201213777"},"Children":[{"Type":"NodeText","Data":"Read-Through Pattern 实际只是在 Cache-Aside Pattern 之上进行了封装。在 Cache-Aside Pattern 下，发生读请求的时候，如果 cache 中不存在对应的数据，是由客户端自己负责把数据写入 cache，而 Read Through Pattern 则是 cache 服务自己来写入缓存的，这对客户端是透明的。"}]},{"ID":"20240201213778-bcviqhq","Type":"NodeParagraph","Properties":{"id":"20240201213778-bcviqhq","updated":"20240201213778"},"Children":[{"Type":"NodeText","Data":"和 Cache Aside Pattern 一样， Read-Through Pattern 也有首次请求数据一定不再 cache 的问题，对于热点数据可以提前放入缓存中。"}]},{"ID":"20240201213779-qrfgopp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213779-qrfgopp","updated":"20240201213779"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Write Behind Pattern（异步缓存写入）"}]},{"ID":"20240201213780-77b608y","Type":"NodeParagraph","Properties":{"id":"20240201213780-77b608y","updated":"20240201213780"},"Children":[{"Type":"NodeText","Data":"Write Behind Pattern 和 Read/Write Through Pattern 很相似，两者都是由 cache 服务来负责 cache 和 db 的读写。"}]},{"ID":"20240201213781-hwck4ph","Type":"NodeParagraph","Properties":{"id":"20240201213781-hwck4ph","updated":"20240201213781"},"Children":[{"Type":"NodeText","Data":"但是，两个又有很大的不同："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Read/Write Through 是同步更新 cache 和 db，而 Write Behind 则是只更新缓存，不直接更新 db，而是改为异步批量的方式来更新 db。"}]},{"ID":"20240201213782-8psl4te","Type":"NodeParagraph","Properties":{"id":"20240201213782-8psl4te","updated":"20240201213782"},"Children":[{"Type":"NodeText","Data":"很明显，这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。"}]},{"ID":"20240201213783-doh7zsf","Type":"NodeParagraph","Properties":{"id":"20240201213783-doh7zsf","updated":"20240201213783"},"Children":[{"Type":"NodeText","Data":"这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。"}]},{"ID":"20240201213784-kbvmxcp","Type":"NodeParagraph","Properties":{"id":"20240201213784-kbvmxcp","updated":"20240201213784"},"Children":[{"Type":"NodeText","Data":"Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。"}]},{"ID":"20240201213785-4jbcdup","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213785-4jbcdup","updated":"20240201213785"}}]}