{"ID":"20240201213634-c0qy456","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213634-c0qy456","title":"how-sql-executed-in-mysql","updated":"20240201213634"},"Children":[{"ID":"20240201213635-lg8tmjo","Type":"NodeThematicBreak","Properties":{"id":"20240201213635-lg8tmjo","updated":"20240201213635"}},{"ID":"20240201213636-f4qxzkm","Type":"NodeParagraph","Properties":{"id":"20240201213636-f4qxzkm","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"title: SQL语句在MySQL中的执行过程"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 数据库"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213637-heosg7o","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-heosg7o","updated":"20240201213637"},"Children":[{"ID":"20240201213638-y0h53nk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-y0h53nk","updated":"20240201213638"},"Children":[{"ID":"20240201213639-dradwpt","Type":"NodeParagraph","Properties":{"id":"20240201213639-dradwpt","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"MySQL"}]}]}]},{"ID":"20240201213640-8axdidc","Type":"NodeThematicBreak","Properties":{"id":"20240201213640-8axdidc","updated":"20240201213640"}},{"ID":"20240201213641-r7q8360","Type":"NodeBlockquote","Properties":{"id":"20240201213641-r7q8360","updated":"20240201213641"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213642-ub5rg31","Type":"NodeParagraph","Properties":{"id":"20240201213642-ub5rg31","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"本文来自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/kinglaw1204","TextMarkTextContent":"木木匠"},{"Type":"NodeText","Data":"投稿。"}]}]},{"ID":"20240201213643-3r741po","Type":"NodeParagraph","Properties":{"id":"20240201213643-3r741po","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"本篇文章会分析下一个 SQL 语句在 MySQL 中的执行流程，包括 SQL 的查询在 MySQL 内部会怎么流转，SQL 语句的更新是怎么完成的。"}]},{"ID":"20240201213644-smi1cgg","Type":"NodeParagraph","Properties":{"id":"20240201213644-smi1cgg","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"在分析之前我会先带着你看看 MySQL 的基础架构，知道了 MySQL 由那些组件组成以及这些组件的作用是什么，可以帮助我们理解和解决这些问题。"}]},{"ID":"20240201213645-rcx8s0t","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213645-rcx8s0t","updated":"20240201213645"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"一 MySQL 基础架构分析"}]},{"ID":"20240201213646-7hwicr1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213646-7hwicr1","updated":"20240201213646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1 MySQL 基本架构概览"}]},{"ID":"20240201213647-8w61h39","Type":"NodeParagraph","Properties":{"id":"20240201213647-8w61h39","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"下图是 MySQL 的一个简要架构图，从下图你可以很清晰的看到用户的 SQL 语句在 MySQL 内部是如何执行的。"}]},{"ID":"20240201213648-y90htpj","Type":"NodeParagraph","Properties":{"id":"20240201213648-y90htpj","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"先简单介绍一下下图涉及的一些组件的基本作用帮助大家理解这幅图，在 1.2 节中会详细介绍到这些组件的作用。"}]},{"ID":"20240201213649-oxmaej5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-oxmaej5","updated":"20240201213649"},"Children":[{"ID":"20240201213650-kymsrge","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-kymsrge","updated":"20240201213650"},"Children":[{"ID":"20240201213651-5d3ka2w","Type":"NodeParagraph","Properties":{"id":"20240201213651-5d3ka2w","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"连接器："},{"Type":"NodeText","Data":" 身份认证和权限相关(登录 MySQL 的时候)。"}]}]},{"ID":"20240201213652-sth9m62","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-sth9m62","updated":"20240201213652"},"Children":[{"ID":"20240201213653-wne0m36","Type":"NodeParagraph","Properties":{"id":"20240201213653-wne0m36","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"查询缓存："},{"Type":"NodeText","Data":" 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。"}]}]},{"ID":"20240201213654-v31eoxh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-v31eoxh","updated":"20240201213654"},"Children":[{"ID":"20240201213655-brddzlp","Type":"NodeParagraph","Properties":{"id":"20240201213655-brddzlp","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分析器："},{"Type":"NodeText","Data":" 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。"}]}]},{"ID":"20240201213656-pj4urmy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-pj4urmy","updated":"20240201213656"},"Children":[{"ID":"20240201213657-3ofrsiq","Type":"NodeParagraph","Properties":{"id":"20240201213657-3ofrsiq","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优化器："},{"Type":"NodeText","Data":" 按照 MySQL 认为最优的方案去执行。"}]}]},{"ID":"20240201213658-kujdb3g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-kujdb3g","updated":"20240201213658"},"Children":[{"ID":"20240201213659-1hr8m6m","Type":"NodeParagraph","Properties":{"id":"20240201213659-1hr8m6m","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"执行器："},{"Type":"NodeText","Data":" 执行语句，然后从存储引擎返回数据。 -"}]}]}]},{"ID":"20240201213660-fw2rloe","Type":"NodeParagraph","Properties":{"id":"20240201213660-fw2rloe","updated":"20240201213660"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/13526879-3037b144ed09eb88.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213661-ibig3g2","Type":"NodeParagraph","Properties":{"id":"20240201213661-ibig3g2","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"简单来说 MySQL 主要分为 Server 层和存储引擎层："}]},{"ID":"20240201213662-cas721w","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-cas721w","updated":"20240201213662"},"Children":[{"ID":"20240201213663-0a0rysg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-0a0rysg","updated":"20240201213663"},"Children":[{"ID":"20240201213664-5xcf25j","Type":"NodeParagraph","Properties":{"id":"20240201213664-5xcf25j","updated":"20240201213664"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Server 层"},{"Type":"NodeText","Data":"：主要包括连接器、查询缓存、分析器、优化器、执行器等，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图，函数等，还有一个通用的日志模块 binlog 日志模块。"}]}]},{"ID":"20240201213665-6so19kj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-6so19kj","updated":"20240201213665"},"Children":[{"ID":"20240201213666-0u0k5uv","Type":"NodeParagraph","Properties":{"id":"20240201213666-0u0k5uv","updated":"20240201213666"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存储引擎"},{"Type":"NodeText","Data":"：主要负责数据的存储和读取，采用可以替换的插件式架构，支持 InnoDB、MyISAM、Memory 等多个存储引擎，其中 InnoDB 引擎有自有的日志模块 redolog 模块。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5 版本开始就被当做默认存储引擎了。"}]}]}]},{"ID":"20240201213667-qsk3a2n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213667-qsk3a2n","updated":"20240201213667"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.2 Server 层基本组件介绍"}]},{"ID":"20240201213668-eup6cd4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213668-eup6cd4","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1) 连接器"}]},{"ID":"20240201213669-1iz7s0y","Type":"NodeParagraph","Properties":{"id":"20240201213669-1iz7s0y","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"连接器主要和身份认证和权限相关的功能相关，就好比一个级别很高的门卫一样。"}]},{"ID":"20240201213670-a3zt753","Type":"NodeParagraph","Properties":{"id":"20240201213670-a3zt753","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"主要负责用户登录数据库，进行用户的身份认证，包括校验账户密码，权限等操作，如果用户账户密码已通过，连接器会到权限表中查询该用户的所有权限，之后在这个连接里的权限逻辑判断都是会依赖此时读取到的权限数据，也就是说，后续只要这个连接不断开，即使管理员修改了该用户的权限，该用户也是不受影响的。"}]},{"ID":"20240201213671-dx9947s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213671-dx9947s","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2) 查询缓存(MySQL 8.0 版本后移除)"}]},{"ID":"20240201213672-vibs9yf","Type":"NodeParagraph","Properties":{"id":"20240201213672-vibs9yf","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"查询缓存主要用来缓存我们所执行的 SELECT 语句以及该语句的结果集。"}]},{"ID":"20240201213673-ombxp15","Type":"NodeParagraph","Properties":{"id":"20240201213673-ombxp15","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"连接建立后，执行查询语句的时候，会先查询缓存，MySQL 会先校验这个 SQL 是否执行过，以 Key-Value 的形式缓存在内存中，Key 是查询语句，Value 是结果集。如果缓存 key 被命中，就会直接返回给客户端，如果没有命中，就会执行后续的操作，完成后也会把结果缓存起来，方便下一次调用。当然在真正执行缓存查询的时候还是会校验用户的权限，是否有该表的查询条件。"}]},{"ID":"20240201213674-p2bo59g","Type":"NodeParagraph","Properties":{"id":"20240201213674-p2bo59g","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"MySQL 查询不建议使用缓存，因为查询缓存失效在实际业务场景中可能会非常频繁，假如你对一个表更新的话，这个表上的所有的查询缓存都会被清空。对于不经常更新的数据来说，使用缓存还是可以的。"}]},{"ID":"20240201213675-t3g8jjt","Type":"NodeParagraph","Properties":{"id":"20240201213675-t3g8jjt","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"所以，一般在大多数情况下我们都是不推荐去使用查询缓存的。"}]},{"ID":"20240201213676-qz9wvn6","Type":"NodeParagraph","Properties":{"id":"20240201213676-qz9wvn6","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"MySQL 8.0 版本后删除了缓存的功能，官方也是认为该功能在实际的应用场景比较少，所以干脆直接删掉了。"}]},{"ID":"20240201213677-nuwqroh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213677-nuwqroh","updated":"20240201213677"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3) 分析器"}]},{"ID":"20240201213678-hbtcgkd","Type":"NodeParagraph","Properties":{"id":"20240201213678-hbtcgkd","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"MySQL 没有命中缓存，那么就会进入分析器，分析器主要是用来分析 SQL 语句是来干嘛的，分析器也会分为几步："}]},{"ID":"20240201213679-ipiof4k","Type":"NodeParagraph","Properties":{"id":"20240201213679-ipiof4k","updated":"20240201213679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第一步，词法分析"},{"Type":"NodeText","Data":"，一条 SQL 语句有多个字符串组成，首先要提取关键字，比如 select，提出查询的表，提出字段名，提出查询条件等等。做完这些操作后，就会进入第二步。"}]},{"ID":"20240201213680-nvmgyfs","Type":"NodeParagraph","Properties":{"id":"20240201213680-nvmgyfs","updated":"20240201213680"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第二步，语法分析"},{"Type":"NodeText","Data":"，主要就是判断你输入的 SQL 是否正确，是否符合 MySQL 的语法。"}]},{"ID":"20240201213681-v3yix8b","Type":"NodeParagraph","Properties":{"id":"20240201213681-v3yix8b","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"完成这 2 步之后，MySQL 就准备开始执行了，但是如何执行，怎么执行是最好的结果呢？这个时候就需要优化器上场了。"}]},{"ID":"20240201213682-insx63e","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213682-insx63e","updated":"20240201213682"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4) 优化器"}]},{"ID":"20240201213683-17xe4ro","Type":"NodeParagraph","Properties":{"id":"20240201213683-17xe4ro","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"优化器的作用就是它认为的最优的执行方案去执行（有时候可能也不是最优，这篇文章涉及对这部分知识的深入讲解），比如多个索引的时候该如何选择索引，多表查询的时候如何选择关联顺序等。"}]},{"ID":"20240201213684-wckizbe","Type":"NodeParagraph","Properties":{"id":"20240201213684-wckizbe","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"可以说，经过了优化器之后可以说这个语句具体该如何执行就已经定下来。"}]},{"ID":"20240201213685-2oghqci","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213685-2oghqci","updated":"20240201213685"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5) 执行器"}]},{"ID":"20240201213686-j37ifgw","Type":"NodeParagraph","Properties":{"id":"20240201213686-j37ifgw","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"当选择了执行方案后，MySQL 就准备开始执行了，首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会去调用引擎的接口，返回接口执行的结果。"}]},{"ID":"20240201213687-milzdhf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213687-milzdhf","updated":"20240201213687"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"二 语句分析"}]},{"ID":"20240201213688-etmzbzj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213688-etmzbzj","updated":"20240201213688"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1 查询语句"}]},{"ID":"20240201213689-qkthf85","Type":"NodeParagraph","Properties":{"id":"20240201213689-qkthf85","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"说了以上这么多，那么究竟一条 SQL 语句是如何执行的呢？其实我们的 SQL 可以分为两种，一种是查询，一种是更新（增加，修改，删除）。我们先分析下查询语句，语句如下："}]},{"ID":"20240201213690-o006oi1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213690-o006oi1","updated":"20240201213690"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"select * from tb_student  A where A.age='18' and A.name=' 张三 ';\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213691-gye8paz","Type":"NodeParagraph","Properties":{"id":"20240201213691-gye8paz","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"结合上面的说明，我们分析下这个语句的执行流程："}]},{"ID":"20240201213692-hwtumiv","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-hwtumiv","updated":"20240201213692"},"Children":[{"ID":"20240201213693-41xsxmr","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-41xsxmr","updated":"20240201213693"},"Children":[{"ID":"20240201213694-5laywbj","Type":"NodeParagraph","Properties":{"id":"20240201213694-5laywbj","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"先检查该语句是否有权限，如果没有权限，直接返回错误信息，如果有权限，在 MySQL8.0 版本以前，会先查询缓存，以这条 SQL 语句为 key 在内存中查询是否有结果，如果有直接缓存，如果没有，执行下一步。"}]}]},{"ID":"20240201213695-65xj3aa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-65xj3aa","updated":"20240201213695"},"Children":[{"ID":"20240201213696-lg505f2","Type":"NodeParagraph","Properties":{"id":"20240201213696-lg505f2","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"通过分析器进行词法分析，提取 SQL 语句的关键元素，比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id='1'。然后判断这个 SQL 语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。"}]}]},{"ID":"20240201213697-g2w69em","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213697-g2w69em","updated":"20240201213697"},"Children":[{"ID":"20240201213698-r7olath","Type":"NodeParagraph","Properties":{"id":"20240201213698-r7olath","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"接下来就是优化器进行确定执行方案，上面的 SQL 语句，可以有两种执行方案：a.先查询学生表中姓名为“张三”的学生，然后判断是否年龄是 18。b.先找出学生中年龄 18 岁的学生，然后再查询姓名为“张三”的学生。那么优化器根据自己的优化算法进行选择执行效率最好的一个方案（优化器认为，有时候不一定最好）。那么确认了执行计划后就准备开始执行了。"}]}]},{"ID":"20240201213699-fe0s5v3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213699-fe0s5v3","updated":"20240201213699"},"Children":[{"ID":"20240201213700-ihl3y95","Type":"NodeParagraph","Properties":{"id":"20240201213700-ihl3y95","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"进行权限校验，如果没有权限就会返回错误信息，如果有权限就会调用数据库引擎接口，返回引擎的执行结果。"}]}]}]},{"ID":"20240201213701-864ppub","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213701-864ppub","updated":"20240201213701"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2 更新语句"}]},{"ID":"20240201213702-5uoermm","Type":"NodeParagraph","Properties":{"id":"20240201213702-5uoermm","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"以上就是一条查询 SQL 的执行流程，那么接下来我们看看一条更新语句如何执行的呢？SQL 语句如下："}]},{"ID":"20240201213703-u0z4q9b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213703-u0z4q9b","updated":"20240201213703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"update tb_student A set A.age='19' where A.name=' 张三 ';\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213704-e7xkafu","Type":"NodeParagraph","Properties":{"id":"20240201213704-e7xkafu","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"我们来给张三修改下年龄，在实际数据库肯定不会设置年龄这个字段的，不然要被技术负责人打的。其实这条语句也基本上会沿着上一个查询的流程走，只不过执行更新的时候肯定要记录日志啦，这就会引入日志模块了，MySQL 自带的日志模块是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"binlog（归档日志）"},{"Type":"NodeText","Data":" ，所有的存储引擎都可以使用，我们常用的 InnoDB 引擎还自带了一个日志模块 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"redo log（重做日志）"},{"Type":"NodeText","Data":"，我们就以 InnoDB 模式下来探讨这个语句的执行流程。流程如下："}]},{"ID":"20240201213705-rg5owdl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-rg5owdl","updated":"20240201213705"},"Children":[{"ID":"20240201213706-myznbcd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-myznbcd","updated":"20240201213706"},"Children":[{"ID":"20240201213707-08nfxjd","Type":"NodeParagraph","Properties":{"id":"20240201213707-08nfxjd","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"先查询到张三这一条数据，如果有缓存，也是会用到缓存。"}]}]},{"ID":"20240201213708-8e2875i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-8e2875i","updated":"20240201213708"},"Children":[{"ID":"20240201213709-a7y6k7c","Type":"NodeParagraph","Properties":{"id":"20240201213709-a7y6k7c","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"然后拿到查询的语句，把 age 改为 19，然后调用引擎 API 接口，写入这一行数据，InnoDB 引擎把数据保存在内存中，同时记录 redo log，此时 redo log 进入 prepare 状态，然后告诉执行器，执行完成了，随时可以提交。"}]}]},{"ID":"20240201213710-rrn5bpm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213710-rrn5bpm","updated":"20240201213710"},"Children":[{"ID":"20240201213711-74ajsc9","Type":"NodeParagraph","Properties":{"id":"20240201213711-74ajsc9","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"执行器收到通知后记录 binlog，然后调用引擎接口，提交 redo log 为提交状态。"}]}]},{"ID":"20240201213712-r7oyego","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-r7oyego","updated":"20240201213712"},"Children":[{"ID":"20240201213713-oo80kp9","Type":"NodeParagraph","Properties":{"id":"20240201213713-oo80kp9","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"更新完成。"}]}]}]},{"ID":"20240201213714-t6d92nr","Type":"NodeParagraph","Properties":{"id":"20240201213714-t6d92nr","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这里肯定有同学会问，为什么要用两个日志模块，用一个日志模块不行吗?"}]},{"ID":"20240201213715-5mmgj7b","Type":"NodeParagraph","Properties":{"id":"20240201213715-5mmgj7b","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"这是因为最开始 MySQL 并没有 InnoDB 引擎（InnoDB 引擎是其他公司以插件形式插入 MySQL 的），MySQL 自带的引擎是 MyISAM，但是我们知道 redo log 是 InnoDB 引擎特有的，其他存储引擎都没有，这就导致会没有 crash-safe 的能力(crash-safe 的能力即使数据库发生异常重启，之前提交的记录都不会丢失)，binlog 日志只能用来归档。"}]},{"ID":"20240201213716-ojnj6kw","Type":"NodeParagraph","Properties":{"id":"20240201213716-ojnj6kw","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"并不是说只用一个日志模块不可以，只是 InnoDB 引擎就是通过 redo log 来支持事务的。那么，又会有同学问，我用两个日志模块，但是不要这么复杂行不行，为什么 redo log 要引入 prepare 预提交状态？这里我们用反证法来说明下为什么要这么做？"}]},{"ID":"20240201213717-qvrhcqa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213717-qvrhcqa","updated":"20240201213717"},"Children":[{"ID":"20240201213718-nyi7ltz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-nyi7ltz","updated":"20240201213718"},"Children":[{"ID":"20240201213719-etwvgtf","Type":"NodeParagraph","Properties":{"id":"20240201213719-etwvgtf","updated":"20240201213719"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先写 redo log 直接提交，然后写 binlog"},{"Type":"NodeText","Data":"，假设写完 redo log 后，机器挂了，binlog 日志没有被写入，那么机器重启后，这台机器会通过 redo log 恢复数据，但是这个时候 binlog 并没有记录该数据，后续进行机器备份的时候，就会丢失这一条数据，同时主从同步也会丢失这一条数据。"}]}]},{"ID":"20240201213720-y07gvq1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213720-y07gvq1","updated":"20240201213720"},"Children":[{"ID":"20240201213721-ebms2fk","Type":"NodeParagraph","Properties":{"id":"20240201213721-ebms2fk","updated":"20240201213721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先写 binlog，然后写 redo log"},{"Type":"NodeText","Data":"，假设写完了 binlog，机器异常重启了，由于没有 redo log，本机是无法恢复这一条记录的，但是 binlog 又有记录，那么和上面同样的道理，就会产生数据不一致的情况。"}]}]}]},{"ID":"20240201213722-0qpnjxj","Type":"NodeParagraph","Properties":{"id":"20240201213722-0qpnjxj","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"如果采用 redo log 两阶段提交的方式就不一样了，写完 binlog 后，然后再提交 redo log 就会防止出现上述的问题，从而保证了数据的一致性。那么问题来了，有没有一个极端的情况呢？假设 redo log 处于预提交状态，binlog 也已经写完了，这个时候发生了异常重启会怎么样呢？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这个就要依赖于 MySQL 的处理机制了，MySQL 的处理过程如下："}]},{"ID":"20240201213723-c0pssyz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-c0pssyz","updated":"20240201213723"},"Children":[{"ID":"20240201213724-gmnelgp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213724-gmnelgp","updated":"20240201213724"},"Children":[{"ID":"20240201213725-6egb6jt","Type":"NodeParagraph","Properties":{"id":"20240201213725-6egb6jt","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"判断 redo log 是否完整，如果判断是完整的，就立即提交。"}]}]},{"ID":"20240201213726-3l7fdff","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213726-3l7fdff","updated":"20240201213726"},"Children":[{"ID":"20240201213727-icb2dhh","Type":"NodeParagraph","Properties":{"id":"20240201213727-icb2dhh","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"如果 redo log 只是预提交但不是 commit 状态，这个时候就会去判断 binlog 是否完整，如果完整就提交 redo log, 不完整就回滚事务。"}]}]}]},{"ID":"20240201213728-7j2t6tm","Type":"NodeParagraph","Properties":{"id":"20240201213728-7j2t6tm","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"这样就解决了数据一致性的问题。"}]},{"ID":"20240201213729-0y7zgsi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213729-0y7zgsi","updated":"20240201213729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"三 总结"}]},{"ID":"20240201213730-dsl448s","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213730-dsl448s","updated":"20240201213730"},"Children":[{"ID":"20240201213731-qnbgtzd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213731-qnbgtzd","updated":"20240201213731"},"Children":[{"ID":"20240201213732-70wygky","Type":"NodeParagraph","Properties":{"id":"20240201213732-70wygky","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"MySQL 主要分为 Server 层和引擎层，Server 层主要包括连接器、查询缓存、分析器、优化器、执行器，同时还有一个日志模块（binlog），这个日志模块所有执行引擎都可以共用，redolog 只有 InnoDB 有。"}]}]},{"ID":"20240201213733-rtdg4q6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-rtdg4q6","updated":"20240201213733"},"Children":[{"ID":"20240201213734-3d4tjea","Type":"NodeParagraph","Properties":{"id":"20240201213734-3d4tjea","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"引擎层是插件式的，目前主要包括，MyISAM,InnoDB,Memory 等。"}]}]},{"ID":"20240201213735-boowvup","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213735-boowvup","updated":"20240201213735"},"Children":[{"ID":"20240201213736-831v54b","Type":"NodeParagraph","Properties":{"id":"20240201213736-831v54b","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"查询语句的执行流程如下：权限校验（如果命中缓存）---\u003e查询缓存---\u003e分析器---\u003e优化器---\u003e权限校验---\u003e执行器---\u003e引擎"}]}]},{"ID":"20240201213737-46lsv5l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-46lsv5l","updated":"20240201213737"},"Children":[{"ID":"20240201213738-poh18en","Type":"NodeParagraph","Properties":{"id":"20240201213738-poh18en","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"更新语句执行流程如下：分析器----\u003e权限校验----\u003e执行器---\u003e引擎---redo log(prepare 状态)---\u003ebinlog---\u003eredo log(commit 状态)"}]}]}]},{"ID":"20240201213739-qhdgqwi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213739-qhdgqwi","updated":"20240201213739"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"四 参考"}]},{"ID":"20240201213740-dwwj2fk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-dwwj2fk","updated":"20240201213740"},"Children":[{"ID":"20240201213741-cy21y44","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-cy21y44","updated":"20240201213741"},"Children":[{"ID":"20240201213742-d44wmpl","Type":"NodeParagraph","Properties":{"id":"20240201213742-d44wmpl","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"《MySQL 实战 45 讲》"}]}]},{"ID":"20240201213743-o7uxz9p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-o7uxz9p","updated":"20240201213743"},"Children":[{"ID":"20240201213744-xyodco5","Type":"NodeParagraph","Properties":{"id":"20240201213744-xyodco5","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"MySQL 5.6 参考手册:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dev.MySQL.com/doc/refman/5.6/en/","TextMarkTextContent":"https://dev.MySQL.com/doc/refman/5.6/en/"}]}]}]},{"ID":"20240201213745-vihxxkl","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-vihxxkl","updated":"20240201213745"}}]}