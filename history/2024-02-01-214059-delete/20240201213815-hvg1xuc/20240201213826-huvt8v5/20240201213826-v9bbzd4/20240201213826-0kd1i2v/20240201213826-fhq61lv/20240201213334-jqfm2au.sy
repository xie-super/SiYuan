{"ID":"20240201213334-jqfm2au","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213334-jqfm2au","title":"mysql-index","updated":"20240201213334"},"Children":[{"ID":"20240201213335-0anrkp0","Type":"NodeThematicBreak","Properties":{"id":"20240201213335-0anrkp0","updated":"20240201213335"}},{"ID":"20240201213336-yuc4kjv","Type":"NodeParagraph","Properties":{"id":"20240201213336-yuc4kjv","updated":"20240201213336"},"Children":[{"Type":"NodeText","Data":"title: MySQL索引详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 数据库"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213337-htjqra4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213337-htjqra4","updated":"20240201213337"},"Children":[{"ID":"20240201213338-lsvdin3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213338-lsvdin3","updated":"20240201213338"},"Children":[{"ID":"20240201213339-wnkgla3","Type":"NodeParagraph","Properties":{"id":"20240201213339-wnkgla3","updated":"20240201213339"},"Children":[{"Type":"NodeText","Data":"MySQL"}]}]}]},{"ID":"20240201213340-qa7t9k3","Type":"NodeThematicBreak","Properties":{"id":"20240201213340-qa7t9k3","updated":"20240201213340"}},{"ID":"20240201213341-en57m7l","Type":"NodeBlockquote","Properties":{"id":"20240201213341-en57m7l","updated":"20240201213341"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213342-pwgyo5o","Type":"NodeParagraph","Properties":{"id":"20240201213342-pwgyo5o","updated":"20240201213342"},"Children":[{"Type":"NodeText","Data":"感谢"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/WT-AHA","TextMarkTextContent":"WT-AHA"},{"Type":"NodeText","Data":"对本文的完善，相关 PR："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/pull/1648","TextMarkTextContent":"https://github.com/Snailclimb/JavaGuide/pull/1648"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213343-zzqsz02","Type":"NodeParagraph","Properties":{"id":"20240201213343-zzqsz02","updated":"20240201213343"},"Children":[{"Type":"NodeText","Data":"但凡经历过几场面试的小伙伴，应该都清楚，数据库索引这个知识点在面试中出现的频率高到离谱。"}]},{"ID":"20240201213344-2oorwhq","Type":"NodeParagraph","Properties":{"id":"20240201213344-2oorwhq","updated":"20240201213344"},"Children":[{"Type":"NodeText","Data":"除了对于准备面试来说非常重要之外，善用索引对 SQL 的性能提升非常明显，是一个性价比较高的 SQL 优化手段。"}]},{"ID":"20240201213345-ojwp0ux","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213345-ojwp0ux","updated":"20240201213345"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"索引介绍"}]},{"ID":"20240201213346-cl68z3z","Type":"NodeParagraph","Properties":{"id":"20240201213346-cl68z3z","updated":"20240201213346"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。"}]},{"ID":"20240201213347-lgsnkxn","Type":"NodeParagraph","Properties":{"id":"20240201213347-lgsnkxn","updated":"20240201213347"},"Children":[{"Type":"NodeText","Data":"索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。"}]},{"ID":"20240201213348-ky90yxi","Type":"NodeParagraph","Properties":{"id":"20240201213348-ky90yxi","updated":"20240201213348"},"Children":[{"Type":"NodeText","Data":"索引底层数据结构存在很多种类型，常见的索引结构有: B 树， B+树 和 Hash、红黑树。在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构。"}]},{"ID":"20240201213349-o3739ec","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213349-o3739ec","updated":"20240201213349"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"索引的优缺点"}]},{"ID":"20240201213350-3mlafio","Type":"NodeParagraph","Properties":{"id":"20240201213350-3mlafio","updated":"20240201213350"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213351-stqz3tx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213351-stqz3tx","updated":"20240201213351"},"Children":[{"ID":"20240201213352-b0ngw3w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213352-b0ngw3w","updated":"20240201213352"},"Children":[{"ID":"20240201213353-vt9vyze","Type":"NodeParagraph","Properties":{"id":"20240201213353-vt9vyze","updated":"20240201213353"},"Children":[{"Type":"NodeText","Data":"使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。"}]}]},{"ID":"20240201213354-4hbz453","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213354-4hbz453","updated":"20240201213354"},"Children":[{"ID":"20240201213355-x37il8k","Type":"NodeParagraph","Properties":{"id":"20240201213355-x37il8k","updated":"20240201213355"},"Children":[{"Type":"NodeText","Data":"通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。"}]}]}]},{"ID":"20240201213356-qzh8tlw","Type":"NodeParagraph","Properties":{"id":"20240201213356-qzh8tlw","updated":"20240201213356"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213357-hpdsz9a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213357-hpdsz9a","updated":"20240201213357"},"Children":[{"ID":"20240201213358-1o79c7w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213358-1o79c7w","updated":"20240201213358"},"Children":[{"ID":"20240201213359-pq78t3n","Type":"NodeParagraph","Properties":{"id":"20240201213359-pq78t3n","updated":"20240201213359"},"Children":[{"Type":"NodeText","Data":"创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。"}]}]},{"ID":"20240201213360-nbo2diz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213360-nbo2diz","updated":"20240201213360"},"Children":[{"ID":"20240201213361-2l4v2gu","Type":"NodeParagraph","Properties":{"id":"20240201213361-2l4v2gu","updated":"20240201213361"},"Children":[{"Type":"NodeText","Data":"索引需要使用物理文件存储，也会耗费一定空间。"}]}]}]},{"ID":"20240201213362-wd0dsuf","Type":"NodeParagraph","Properties":{"id":"20240201213362-wd0dsuf","updated":"20240201213362"},"Children":[{"Type":"NodeText","Data":"但是，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用索引一定能提高查询性能吗?"}]},{"ID":"20240201213363-f3s38dr","Type":"NodeParagraph","Properties":{"id":"20240201213363-f3s38dr","updated":"20240201213363"},"Children":[{"Type":"NodeText","Data":"大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。"}]},{"ID":"20240201213364-e0ioixq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213364-e0ioixq","updated":"20240201213364"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"索引底层数据结构选型"}]},{"ID":"20240201213365-qwcjtk5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213365-qwcjtk5","updated":"20240201213365"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Hash 表"}]},{"ID":"20240201213366-82eo87f","Type":"NodeParagraph","Properties":{"id":"20240201213366-82eo87f","updated":"20240201213366"},"Children":[{"Type":"NodeText","Data":"哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。"}]},{"ID":"20240201213367-35qc6vu","Type":"NodeParagraph","Properties":{"id":"20240201213367-35qc6vu","updated":"20240201213367"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为何能够通过 key 快速取出 value 呢？"},{"Type":"NodeText","Data":" 原因在于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"哈希算法"},{"Type":"NodeText","Data":"（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。"}]},{"ID":"20240201213368-ew2bfq3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213368-ew2bfq3","updated":"20240201213368"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"hash = hashfunc(key)\nindex = hash % array_size\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213369-wej33tg","Type":"NodeParagraph","Properties":{"id":"20240201213369-wej33tg","updated":"20240201213369"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/mysql20210513092328171.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213370-3m0vsyk","Type":"NodeParagraph","Properties":{"id":"20240201213370-3m0vsyk","updated":"20240201213370"},"Children":[{"Type":"NodeText","Data":"但是！哈希算法有个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Hash 冲突"},{"Type":"NodeText","Data":" 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"链地址法"},{"Type":"NodeText","Data":"。链地址法就是将哈希冲突数据存放在链表中。就比如 JDK1.8 之前 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":" 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":"为了减少链表过长的时候搜索时间过长引入了红黑树。"}]},{"ID":"20240201213371-0stp837","Type":"NodeParagraph","Properties":{"id":"20240201213371-0stp837","updated":"20240201213371"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/mysql20210513092224836.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213372-1q99d9k","Type":"NodeParagraph","Properties":{"id":"20240201213372-1q99d9k","updated":"20240201213372"},"Children":[{"Type":"NodeText","Data":"为了减少 Hash 冲突的发生，一个好的哈希函数应该“均匀地”将数据分布在整个可能的哈希值集合中。"}]},{"ID":"20240201213373-t5qz79u","Type":"NodeParagraph","Properties":{"id":"20240201213373-t5qz79u","updated":"20240201213373"},"Children":[{"Type":"NodeText","Data":"MySQL 的 InnoDB 存储引擎不直接支持常规的哈希索引，但是，InnoDB 存储引擎中存在一种特殊的“自适应哈希索引”（Adaptive Hash Index），自适应哈希索引并不是传统意义上的纯哈希索引，而是结合了 B+Tree 和哈希索引的特点，以便更好地适应实际应用中的数据访问模式和性能需求。自适应哈希索引的每个哈希桶实际上是一个小型的 B+Tree 结构。这个 B+Tree 结构可以存储多个键值对，而不仅仅是一个键。这有助于减少哈希冲突链的长度，提高了索引的效率。关于 Adaptive Hash Index 的详细介绍，可以查看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/ra4v1XR5pzSWc-qtGO-dBg","TextMarkTextContent":"MySQL 各种“Buffer”之 Adaptive Hash Index"},{"Type":"NodeText","Data":" 这篇文章。"}]},{"ID":"20240201213374-sxs8cqe","Type":"NodeParagraph","Properties":{"id":"20240201213374-sxs8cqe","updated":"20240201213374"},"Children":[{"Type":"NodeText","Data":"既然哈希表这么快，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么 MySQL 没有使用其作为索引的数据结构呢？"},{"Type":"NodeText","Data":" 主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。"}]},{"ID":"20240201213375-zxmq78d","Type":"NodeParagraph","Properties":{"id":"20240201213375-zxmq78d","updated":"20240201213375"},"Children":[{"Type":"NodeText","Data":"试想一种情况:"}]},{"ID":"20240201213376-zem5dyw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213376-zem5dyw","updated":"20240201213376"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT * FROM tb1 WHERE id \u003c 500;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213377-1ob0fg4","Type":"NodeParagraph","Properties":{"id":"20240201213377-1ob0fg4","updated":"20240201213377"},"Children":[{"Type":"NodeText","Data":"在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。"}]},{"ID":"20240201213378-tzddrcw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213378-tzddrcw","updated":"20240201213378"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"二叉查找树(BST)"}]},{"ID":"20240201213379-33by2ck","Type":"NodeParagraph","Properties":{"id":"20240201213379-33by2ck","updated":"20240201213379"},"Children":[{"Type":"NodeText","Data":"二叉查找树（Binary Search Tree）是一种基于二叉树的数据结构，它具有以下特点："}]},{"ID":"20240201213380-dxm26wp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213380-dxm26wp","updated":"20240201213380"},"Children":[{"ID":"20240201213381-e6l0j7o","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213381-e6l0j7o","updated":"20240201213381"},"Children":[{"ID":"20240201213382-zajwib1","Type":"NodeParagraph","Properties":{"id":"20240201213382-zajwib1","updated":"20240201213382"},"Children":[{"Type":"NodeText","Data":"左子树所有节点的值均小于根节点的值。"}]}]},{"ID":"20240201213383-ztidgsh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213383-ztidgsh","updated":"20240201213383"},"Children":[{"ID":"20240201213384-ccpyakp","Type":"NodeParagraph","Properties":{"id":"20240201213384-ccpyakp","updated":"20240201213384"},"Children":[{"Type":"NodeText","Data":"右子树所有节点的值均大于根节点的值。"}]}]},{"ID":"20240201213385-finis4u","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213385-finis4u","updated":"20240201213385"},"Children":[{"ID":"20240201213386-o4erz69","Type":"NodeParagraph","Properties":{"id":"20240201213386-o4erz69","updated":"20240201213386"},"Children":[{"Type":"NodeText","Data":"左右子树也分别为二叉查找树。"}]}]}]},{"ID":"20240201213387-d50nhvi","Type":"NodeParagraph","Properties":{"id":"20240201213387-d50nhvi","updated":"20240201213387"},"Children":[{"Type":"NodeText","Data":"当二叉查找树是平衡的时候，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 O(log2(N))，具有比较高的效率。然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O（N）。"}]},{"ID":"20240201213388-brolhpv","Type":"NodeParagraph","Properties":{"id":"20240201213388-brolhpv","updated":"20240201213388"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"斜树","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/oblique-tree.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213389-uvjp7q7","Type":"NodeParagraph","Properties":{"id":"20240201213389-uvjp7q7","updated":"20240201213389"},"Children":[{"Type":"NodeText","Data":"也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。"}]},{"ID":"20240201213390-6vkou7j","Type":"NodeParagraph","Properties":{"id":"20240201213390-6vkou7j","updated":"20240201213390"},"Children":[{"Type":"NodeText","Data":"为了解决这个问题，并提高查询效率，人们发明了多种在二叉查找树基础上的改进型数据结构，如平衡二叉树、B-Tree、B+Tree 等。"}]},{"ID":"20240201213391-p40v7ys","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213391-p40v7ys","updated":"20240201213391"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AVL 树"}]},{"ID":"20240201213392-39qe34y","Type":"NodeParagraph","Properties":{"id":"20240201213392-39qe34y","updated":"20240201213392"},"Children":[{"Type":"NodeText","Data":"AVL 树是计算机科学中最早被发明的自平衡二叉查找树，它的名称来自于发明者 G.M. Adelson-Velsky 和 E.M. Landis 的名字缩写。AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。"}]},{"ID":"20240201213393-7ujbbgw","Type":"NodeParagraph","Properties":{"id":"20240201213393-7ujbbgw","updated":"20240201213393"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"AVL 树","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/avl-tree.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213394-8443v2w","Type":"NodeParagraph","Properties":{"id":"20240201213394-8443v2w","updated":"20240201213394"},"Children":[{"Type":"NodeText","Data":"AVL 树采用了旋转操作来保持平衡。主要有四种旋转操作：LL 旋转、RR 旋转、LR 旋转和 RL 旋转。其中 LL 旋转和 RR 旋转分别用于处理左左和右右失衡，而 LR 旋转和 RL 旋转则用于处理左右和右左失衡。"}]},{"ID":"20240201213395-ky6r2fd","Type":"NodeParagraph","Properties":{"id":"20240201213395-ky6r2fd","updated":"20240201213395"},"Children":[{"Type":"NodeText","Data":"由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了查询性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。"}]},{"ID":"20240201213396-ndwpwpx","Type":"NodeParagraph","Properties":{"id":"20240201213396-ndwpwpx","updated":"20240201213396"},"Children":[{"Type":"NodeText","Data":"实际应用中，AVL 树使用的并不多。"}]},{"ID":"20240201213397-27kz1gl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213397-27kz1gl","updated":"20240201213397"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"红黑树"}]},{"ID":"20240201213398-0xhrvbj","Type":"NodeParagraph","Properties":{"id":"20240201213398-0xhrvbj","updated":"20240201213398"},"Children":[{"Type":"NodeText","Data":"红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态，它具有以下特点："}]},{"ID":"20240201213399-0tavc3o","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213399-0tavc3o","updated":"20240201213399"},"Children":[{"ID":"20240201213400-z9iefnz","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213400-z9iefnz","updated":"20240201213400"},"Children":[{"ID":"20240201213401-trww435","Type":"NodeParagraph","Properties":{"id":"20240201213401-trww435","updated":"20240201213401"},"Children":[{"Type":"NodeText","Data":"每个节点非红即黑；"}]}]},{"ID":"20240201213402-j27ye32","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213402-j27ye32","updated":"20240201213402"},"Children":[{"ID":"20240201213403-b8vfk37","Type":"NodeParagraph","Properties":{"id":"20240201213403-b8vfk37","updated":"20240201213403"},"Children":[{"Type":"NodeText","Data":"根节点总是黑色的；"}]}]},{"ID":"20240201213404-ytnxyw3","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213404-ytnxyw3","updated":"20240201213404"},"Children":[{"ID":"20240201213405-a3perk2","Type":"NodeParagraph","Properties":{"id":"20240201213405-a3perk2","updated":"20240201213405"},"Children":[{"Type":"NodeText","Data":"每个叶子节点都是黑色的空节点（NIL 节点）；"}]}]},{"ID":"20240201213406-0w8llw7","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213406-0w8llw7","updated":"20240201213406"},"Children":[{"ID":"20240201213407-ba35wk4","Type":"NodeParagraph","Properties":{"id":"20240201213407-ba35wk4","updated":"20240201213407"},"Children":[{"Type":"NodeText","Data":"如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；"}]}]},{"ID":"20240201213408-90h54qn","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213408-90h54qn","updated":"20240201213408"},"Children":[{"ID":"20240201213409-e3i2k52","Type":"NodeParagraph","Properties":{"id":"20240201213409-e3i2k52","updated":"20240201213409"},"Children":[{"Type":"NodeText","Data":"从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。"}]}]}]},{"ID":"20240201213410-6359kyo","Type":"NodeParagraph","Properties":{"id":"20240201213410-6359kyo","updated":"20240201213410"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"红黑树","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/red-black-tree.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213411-pgspaik","Type":"NodeParagraph","Properties":{"id":"20240201213411-pgspaik","updated":"20240201213411"},"Children":[{"Type":"NodeText","Data":"和 AVL 树不同的是，红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的查询效率稍有下降，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。也正因如此，红黑树的插入和删除操作效率大大提高了，因为红黑树在插入和删除节点时只需进行 O(1) 次数的旋转和变色操作，即可保持基本平衡状态，而不需要像 AVL 树一样进行 O(logn) 次数的旋转操作。"}]},{"ID":"20240201213412-bz29b3u","Type":"NodeParagraph","Properties":{"id":"20240201213412-bz29b3u","updated":"20240201213412"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"红黑树的应用还是比较广泛的，TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。"}]},{"ID":"20240201213413-bk18m6f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213413-bk18m6f","updated":"20240201213413"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"B 树\u0026 B+树"}]},{"ID":"20240201213414-a5pf4tx","Type":"NodeParagraph","Properties":{"id":"20240201213414-a5pf4tx","updated":"20240201213414"},"Children":[{"Type":"NodeText","Data":"B 树也称 B-树,全称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多路平衡查找树"},{"Type":"NodeText","Data":" ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Balanced"},{"Type":"NodeText","Data":" （平衡）的意思。"}]},{"ID":"20240201213415-l2tzemj","Type":"NodeParagraph","Properties":{"id":"20240201213415-l2tzemj","updated":"20240201213415"},"Children":[{"Type":"NodeText","Data":"目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。"}]},{"ID":"20240201213416-rtqbr38","Type":"NodeParagraph","Properties":{"id":"20240201213416-rtqbr38","updated":"20240201213416"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"B 树\u0026amp; B+树两者有何异同呢？"}]},{"ID":"20240201213417-xhri1ld","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213417-xhri1ld","updated":"20240201213417"},"Children":[{"ID":"20240201213418-u9garh9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213418-u9garh9","updated":"20240201213418"},"Children":[{"ID":"20240201213419-lwz4sus","Type":"NodeParagraph","Properties":{"id":"20240201213419-lwz4sus","updated":"20240201213419"},"Children":[{"Type":"NodeText","Data":"B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。"}]}]},{"ID":"20240201213420-aay1ixk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213420-aay1ixk","updated":"20240201213420"},"Children":[{"ID":"20240201213421-42bc2h2","Type":"NodeParagraph","Properties":{"id":"20240201213421-42bc2h2","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。"}]}]},{"ID":"20240201213422-cb89mhh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213422-cb89mhh","updated":"20240201213422"},"Children":[{"ID":"20240201213423-u70nc79","Type":"NodeParagraph","Properties":{"id":"20240201213423-u70nc79","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。"}]}]},{"ID":"20240201213424-4elimwd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213424-4elimwd","updated":"20240201213424"},"Children":[{"ID":"20240201213425-9on5883","Type":"NodeParagraph","Properties":{"id":"20240201213425-9on5883","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。"}]}]}]},{"ID":"20240201213426-nssnbcj","Type":"NodeParagraph","Properties":{"id":"20240201213426-nssnbcj","updated":"20240201213426"},"Children":[{"Type":"NodeText","Data":"综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。"}]},{"ID":"20240201213427-8a3wqap","Type":"NodeParagraph","Properties":{"id":"20240201213427-8a3wqap","updated":"20240201213427"},"Children":[{"Type":"NodeText","Data":"在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。（下面的内容整理自《Java 工程师修炼之道》）"}]},{"ID":"20240201213428-psv3ym9","Type":"NodeBlockquote","Properties":{"id":"20240201213428-psv3ym9","updated":"20240201213428"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213429-tkykpwo","Type":"NodeParagraph","Properties":{"id":"20240201213429-tkykpwo","updated":"20240201213429"},"Children":[{"Type":"NodeText","Data":"MyISAM 引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非聚簇索引（非聚集索引）"},{"Type":"NodeText","Data":"”。"}]},{"ID":"20240201213430-626mf7m","Type":"NodeParagraph","Properties":{"id":"20240201213430-626mf7m","updated":"20240201213430"},"Children":[{"Type":"NodeText","Data":"InnoDB 引擎中，其数据文件本身就是索引文件。相比 MyISAM，索引文件和数据文件是分离的，其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"聚簇索引（聚集索引）"},{"Type":"NodeText","Data":"”，而其余的索引都作为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"辅助索引"},{"Type":"NodeText","Data":" ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。"}]}]},{"ID":"20240201213431-irc2kin","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213431-irc2kin","updated":"20240201213431"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"索引类型总结"}]},{"ID":"20240201213432-9q9bejn","Type":"NodeParagraph","Properties":{"id":"20240201213432-9q9bejn","updated":"20240201213432"},"Children":[{"Type":"NodeText","Data":"按照数据结构维度划分："}]},{"ID":"20240201213433-liackej","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213433-liackej","updated":"20240201213433"},"Children":[{"ID":"20240201213434-2sxff5i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213434-2sxff5i","updated":"20240201213434"},"Children":[{"ID":"20240201213435-n31tl3q","Type":"NodeParagraph","Properties":{"id":"20240201213435-n31tl3q","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。"}]}]},{"ID":"20240201213436-01z4kqd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213436-01z4kqd","updated":"20240201213436"},"Children":[{"ID":"20240201213437-cxnfq9i","Type":"NodeParagraph","Properties":{"id":"20240201213437-cxnfq9i","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"哈希索引：类似键值对的形式，一次即可定位。"}]}]},{"ID":"20240201213438-xi3e04f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213438-xi3e04f","updated":"20240201213438"},"Children":[{"ID":"20240201213439-sg5ni9y","Type":"NodeParagraph","Properties":{"id":"20240201213439-sg5ni9y","updated":"20240201213439"},"Children":[{"Type":"NodeText","Data":"RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。"}]}]},{"ID":"20240201213440-8cll8ec","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213440-8cll8ec","updated":"20240201213440"},"Children":[{"ID":"20240201213441-18iuorv","Type":"NodeParagraph","Properties":{"id":"20240201213441-18iuorv","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"全文索引：对文本的内容进行分词，进行搜索。目前只有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CHAR"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"VARCHAR"},{"Type":"NodeText","Data":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TEXT"},{"Type":"NodeText","Data":" 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。"}]}]}]},{"ID":"20240201213442-ohntv0w","Type":"NodeParagraph","Properties":{"id":"20240201213442-ohntv0w","updated":"20240201213442"},"Children":[{"Type":"NodeText","Data":"按照底层存储方式角度划分："}]},{"ID":"20240201213443-ls6ol3z","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213443-ls6ol3z","updated":"20240201213443"},"Children":[{"ID":"20240201213444-ulfu8cg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213444-ulfu8cg","updated":"20240201213444"},"Children":[{"ID":"20240201213445-evqyos3","Type":"NodeParagraph","Properties":{"id":"20240201213445-evqyos3","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。"}]}]},{"ID":"20240201213446-pomz9e5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213446-pomz9e5","updated":"20240201213446"},"Children":[{"ID":"20240201213447-3slt9zy","Type":"NodeParagraph","Properties":{"id":"20240201213447-3slt9zy","updated":"20240201213447"},"Children":[{"Type":"NodeText","Data":"非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。"}]}]}]},{"ID":"20240201213448-p5bpk76","Type":"NodeParagraph","Properties":{"id":"20240201213448-p5bpk76","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"按照应用维度划分："}]},{"ID":"20240201213449-d63u63x","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213449-d63u63x","updated":"20240201213449"},"Children":[{"ID":"20240201213450-8p7982r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213450-8p7982r","updated":"20240201213450"},"Children":[{"ID":"20240201213451-0erw8jx","Type":"NodeParagraph","Properties":{"id":"20240201213451-0erw8jx","updated":"20240201213451"},"Children":[{"Type":"NodeText","Data":"主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。"}]}]},{"ID":"20240201213452-tt0ii48","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213452-tt0ii48","updated":"20240201213452"},"Children":[{"ID":"20240201213453-ezns9n8","Type":"NodeParagraph","Properties":{"id":"20240201213453-ezns9n8","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"普通索引：仅加速查询。"}]}]},{"ID":"20240201213454-h4qky76","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213454-h4qky76","updated":"20240201213454"},"Children":[{"ID":"20240201213455-zuv8lps","Type":"NodeParagraph","Properties":{"id":"20240201213455-zuv8lps","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"唯一索引：加速查询 + 列值唯一（可以有 NULL）。"}]}]},{"ID":"20240201213456-ma1hnfq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213456-ma1hnfq","updated":"20240201213456"},"Children":[{"ID":"20240201213457-1vyz2os","Type":"NodeParagraph","Properties":{"id":"20240201213457-1vyz2os","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。"}]}]},{"ID":"20240201213458-5syxp19","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213458-5syxp19","updated":"20240201213458"},"Children":[{"ID":"20240201213459-qah09wf","Type":"NodeParagraph","Properties":{"id":"20240201213459-qah09wf","updated":"20240201213459"},"Children":[{"Type":"NodeText","Data":"联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。"}]}]},{"ID":"20240201213460-0r8s2z6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-0r8s2z6","updated":"20240201213460"},"Children":[{"ID":"20240201213461-a9bprm5","Type":"NodeParagraph","Properties":{"id":"20240201213461-a9bprm5","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"全文索引：对文本的内容进行分词，进行搜索。目前只有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CHAR"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"VARCHAR"},{"Type":"NodeText","Data":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TEXT"},{"Type":"NodeText","Data":" 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。"}]}]}]},{"ID":"20240201213462-n4ymfxd","Type":"NodeParagraph","Properties":{"id":"20240201213462-n4ymfxd","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"MySQL 8.x 中实现的索引新特性："}]},{"ID":"20240201213463-gap7948","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-gap7948","updated":"20240201213463"},"Children":[{"ID":"20240201213464-aetsjst","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-aetsjst","updated":"20240201213464"},"Children":[{"ID":"20240201213465-rb96d5s","Type":"NodeParagraph","Properties":{"id":"20240201213465-rb96d5s","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"隐藏索引：也称为不可见索引，不会被优化器使用，但是仍然需要维护，通常会软删除和灰度发布的场景中使用。主键不能设置为隐藏（包括显式设置或隐式设置）。"}]}]},{"ID":"20240201213466-qfwehdc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213466-qfwehdc","updated":"20240201213466"},"Children":[{"ID":"20240201213467-21speq6","Type":"NodeParagraph","Properties":{"id":"20240201213467-21speq6","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"降序索引：之前的版本就支持通过 desc 来指定索引为降序，但实际上创建的仍然是常规的升序索引。直到 MySQL 8.x 版本才开始真正支持降序索引。另外，在 MySQL 8.x 版本中，不再对 GROUP BY 语句进行隐式排序。"}]}]},{"ID":"20240201213468-kroxj2p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213468-kroxj2p","updated":"20240201213468"},"Children":[{"ID":"20240201213469-g5en7w5","Type":"NodeParagraph","Properties":{"id":"20240201213469-g5en7w5","updated":"20240201213469"},"Children":[{"Type":"NodeText","Data":"函数索引：从 MySQL 8.0.13 版本开始支持在索引中使用函数或者表达式的值，也就是在索引中可以包含函数或者表达式。"}]}]}]},{"ID":"20240201213470-qbz171q","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213470-qbz171q","updated":"20240201213470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"主键索引(Primary Key)"}]},{"ID":"20240201213471-peqmu5c","Type":"NodeParagraph","Properties":{"id":"20240201213471-peqmu5c","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"数据表的主键列使用的就是主键索引。"}]},{"ID":"20240201213472-zqt7lsd","Type":"NodeParagraph","Properties":{"id":"20240201213472-zqt7lsd","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"一张数据表有只能有一个主键，并且主键不能为 null，不能重复。"}]},{"ID":"20240201213473-na3ru9t","Type":"NodeParagraph","Properties":{"id":"20240201213473-na3ru9t","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。"}]},{"ID":"20240201213474-tx8etk8","Type":"NodeParagraph","Properties":{"id":"20240201213474-tx8etk8","updated":"20240201213474"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"主键索引","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/open-source-project/cluster-index.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213475-vcm06ay","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213475-vcm06ay","updated":"20240201213475"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"二级索引"}]},{"ID":"20240201213476-lt0bnm4","Type":"NodeParagraph","Properties":{"id":"20240201213476-lt0bnm4","updated":"20240201213476"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"二级索引（Secondary Index）又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。"}]},{"ID":"20240201213477-8dorp0q","Type":"NodeParagraph","Properties":{"id":"20240201213477-8dorp0q","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"唯一索引，普通索引，前缀索引等索引属于二级索引。"}]},{"ID":"20240201213478-ii2sgiy","Type":"NodeParagraph","Properties":{"id":"20240201213478-ii2sgiy","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"PS: 不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。"}]},{"ID":"20240201213479-pxuvccd","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213479-pxuvccd","updated":"20240201213479"},"Children":[{"ID":"20240201213480-a9z1qqq","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213480-a9z1qqq","updated":"20240201213480"},"Children":[{"ID":"20240201213481-yq8mya1","Type":"NodeParagraph","Properties":{"id":"20240201213481-yq8mya1","updated":"20240201213481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"唯一索引(Unique Key)"},{"Type":"NodeText","Data":":唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。"}]}]},{"ID":"20240201213482-i9ea5h2","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213482-i9ea5h2","updated":"20240201213482"},"Children":[{"ID":"20240201213483-ghh9v5u","Type":"NodeParagraph","Properties":{"id":"20240201213483-ghh9v5u","updated":"20240201213483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"普通索引(Index)"},{"Type":"NodeText","Data":":普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。"}]}]},{"ID":"20240201213484-olx5zyq","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213484-olx5zyq","updated":"20240201213484"},"Children":[{"ID":"20240201213485-w68gzlo","Type":"NodeParagraph","Properties":{"id":"20240201213485-w68gzlo","updated":"20240201213485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"前缀索引(Prefix)"},{"Type":"NodeText","Data":":前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"因为只取前几个字符。"}]}]},{"ID":"20240201213486-4d424oe","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213486-4d424oe","updated":"20240201213486"},"Children":[{"ID":"20240201213487-ypx3q6n","Type":"NodeParagraph","Properties":{"id":"20240201213487-ypx3q6n","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全文索引(Full Text)"},{"Type":"NodeText","Data":":全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。"}]}]}]},{"ID":"20240201213488-z9x41tq","Type":"NodeParagraph","Properties":{"id":"20240201213488-z9x41tq","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"二级索引:"}]},{"ID":"20240201213489-mes20jp","Type":"NodeParagraph","Properties":{"id":"20240201213489-mes20jp","updated":"20240201213489"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"二级索引","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/open-source-project/no-cluster-index.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213490-1z15lnh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213490-1z15lnh","updated":"20240201213490"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"聚簇索引与非聚簇索引"}]},{"ID":"20240201213491-mwp5rl2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213491-mwp5rl2","updated":"20240201213491"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"聚簇索引（聚集索引）"}]},{"ID":"20240201213492-a4431tv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213492-a4431tv","updated":"20240201213492"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"聚簇索引介绍"}]},{"ID":"20240201213493-vvinbom","Type":"NodeParagraph","Properties":{"id":"20240201213493-vvinbom","updated":"20240201213493"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"聚簇索引（Clustered Index）即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB 中的主键索引就属于聚簇索引。"}]},{"ID":"20240201213494-t6xzf4i","Type":"NodeParagraph","Properties":{"id":"20240201213494-t6xzf4i","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"在 MySQL 中，InnoDB 引擎的表的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":".ibd"},{"Type":"NodeText","Data":"文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。"}]},{"ID":"20240201213495-umbe0kz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213495-umbe0kz","updated":"20240201213495"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"聚簇索引的优缺点"}]},{"ID":"20240201213496-q4paa0l","Type":"NodeParagraph","Properties":{"id":"20240201213496-q4paa0l","updated":"20240201213496"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213497-gspmjhv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213497-gspmjhv","updated":"20240201213497"},"Children":[{"ID":"20240201213498-pqipzy5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213498-pqipzy5","updated":"20240201213498"},"Children":[{"ID":"20240201213499-9rqlnhg","Type":"NodeParagraph","Properties":{"id":"20240201213499-9rqlnhg","updated":"20240201213499"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"查询速度非常快"},{"Type":"NodeText","Data":"：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。"}]}]},{"ID":"20240201213500-io3md2g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213500-io3md2g","updated":"20240201213500"},"Children":[{"ID":"20240201213501-2986386","Type":"NodeParagraph","Properties":{"id":"20240201213501-2986386","updated":"20240201213501"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对排序查找和范围查找优化"},{"Type":"NodeText","Data":"：聚簇索引对于主键的排序查找和范围查找速度非常快。"}]}]}]},{"ID":"20240201213502-gf90ylr","Type":"NodeParagraph","Properties":{"id":"20240201213502-gf90ylr","updated":"20240201213502"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213503-6walhf0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213503-6walhf0","updated":"20240201213503"},"Children":[{"ID":"20240201213504-ozhih6s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-ozhih6s","updated":"20240201213504"},"Children":[{"ID":"20240201213505-wfumg5z","Type":"NodeParagraph","Properties":{"id":"20240201213505-wfumg5z","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"依赖于有序的数据"},{"Type":"NodeText","Data":"：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。"}]}]},{"ID":"20240201213506-8bapdr6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213506-8bapdr6","updated":"20240201213506"},"Children":[{"ID":"20240201213507-9icluch","Type":"NodeParagraph","Properties":{"id":"20240201213507-9icluch","updated":"20240201213507"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"更新代价大"},{"Type":"NodeText","Data":"：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。"}]}]}]},{"ID":"20240201213508-x7mugfn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213508-x7mugfn","updated":"20240201213508"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"非聚簇索引（非聚集索引）"}]},{"ID":"20240201213509-5bsov24","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213509-5bsov24","updated":"20240201213509"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"非聚簇索引介绍"}]},{"ID":"20240201213510-w8sktzh","Type":"NodeParagraph","Properties":{"id":"20240201213510-w8sktzh","updated":"20240201213510"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非聚簇索引(Non-Clustered Index)即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。"}]},{"ID":"20240201213511-bfl9p87","Type":"NodeParagraph","Properties":{"id":"20240201213511-bfl9p87","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。"}]},{"ID":"20240201213512-1l1pomb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213512-1l1pomb","updated":"20240201213512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"非聚簇索引的优缺点"}]},{"ID":"20240201213513-crpwiyp","Type":"NodeParagraph","Properties":{"id":"20240201213513-crpwiyp","updated":"20240201213513"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213514-pf30lqx","Type":"NodeParagraph","Properties":{"id":"20240201213514-pf30lqx","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"更新代价比聚簇索引要小 。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的"}]},{"ID":"20240201213515-nmpnm5u","Type":"NodeParagraph","Properties":{"id":"20240201213515-nmpnm5u","updated":"20240201213515"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213516-dnje4wz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213516-dnje4wz","updated":"20240201213516"},"Children":[{"ID":"20240201213517-fvoqt7w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213517-fvoqt7w","updated":"20240201213517"},"Children":[{"ID":"20240201213518-755kqct","Type":"NodeParagraph","Properties":{"id":"20240201213518-755kqct","updated":"20240201213518"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"依赖于有序的数据"},{"Type":"NodeText","Data":":跟聚簇索引一样，非聚簇索引也依赖于有序的数据"}]}]},{"ID":"20240201213519-qb4q4iy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213519-qb4q4iy","updated":"20240201213519"},"Children":[{"ID":"20240201213520-ftzq7jj","Type":"NodeParagraph","Properties":{"id":"20240201213520-ftzq7jj","updated":"20240201213520"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可能会二次查询(回表)"},{"Type":"NodeText","Data":":这应该是非聚簇索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。"}]}]}]},{"ID":"20240201213521-muk5duc","Type":"NodeParagraph","Properties":{"id":"20240201213521-muk5duc","updated":"20240201213521"},"Children":[{"Type":"NodeText","Data":"这是 MySQL 的表的文件截图:"}]},{"ID":"20240201213522-ogsjsbl","Type":"NodeParagraph","Properties":{"id":"20240201213522-ogsjsbl","updated":"20240201213522"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"MySQL 表的文件","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/mysql20210420165311654.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213523-uw81i1u","Type":"NodeParagraph","Properties":{"id":"20240201213523-uw81i1u","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"聚簇索引和非聚簇索引:"}]},{"ID":"20240201213524-qsog8od","Type":"NodeParagraph","Properties":{"id":"20240201213524-qsog8od","updated":"20240201213524"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"聚簇索引和非聚簇索引","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/mysql20210420165326946.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213525-dybcam1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213525-dybcam1","updated":"20240201213525"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"非聚簇索引一定回表查询吗(覆盖索引)?"}]},{"ID":"20240201213526-t35if56","Type":"NodeParagraph","Properties":{"id":"20240201213526-t35if56","updated":"20240201213526"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非聚簇索引不一定回表查询。"}]},{"ID":"20240201213527-r1c9kk4","Type":"NodeParagraph","Properties":{"id":"20240201213527-r1c9kk4","updated":"20240201213527"},"Children":[{"Type":"NodeText","Data":"试想一种情况，用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。"}]},{"ID":"20240201213528-vemkmxw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213528-vemkmxw","updated":"20240201213528"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" SELECT name FROM table WHERE name='guang19';\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213529-fj2w8zz","Type":"NodeParagraph","Properties":{"id":"20240201213529-fj2w8zz","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。"}]},{"ID":"20240201213530-jrhyw5t","Type":"NodeParagraph","Properties":{"id":"20240201213530-jrhyw5t","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"即使是 MYISAM 也是这样，虽然 MYISAM 的主键索引确实需要回表，因为它的主键索引的叶子节点存放的是指针。但是！"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果 SQL 查的就是主键呢?"}]},{"ID":"20240201213531-voi68yw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213531-voi68yw","updated":"20240201213531"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT id FROM table WHERE id=1;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213532-bkcl541","Type":"NodeParagraph","Properties":{"id":"20240201213532-bkcl541","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"主键索引本身的 key 就是主键，查到返回就行了。这种情况就称之为覆盖索引了。"}]},{"ID":"20240201213533-6bdjryh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213533-6bdjryh","updated":"20240201213533"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"覆盖索引和联合索引"}]},{"ID":"20240201213534-l6b350u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213534-l6b350u","updated":"20240201213534"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"覆盖索引"}]},{"ID":"20240201213535-rjf7m3y","Type":"NodeParagraph","Properties":{"id":"20240201213535-rjf7m3y","updated":"20240201213535"},"Children":[{"Type":"NodeText","Data":"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"覆盖索引（Covering Index）"},{"Type":"NodeText","Data":" 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！"}]},{"ID":"20240201213536-as1w6wr","Type":"NodeParagraph","Properties":{"id":"20240201213536-as1w6wr","updated":"20240201213536"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。"}]},{"ID":"20240201213537-mphhh5p","Type":"NodeBlockquote","Properties":{"id":"20240201213537-mphhh5p","updated":"20240201213537"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213538-qt4vb1g","Type":"NodeParagraph","Properties":{"id":"20240201213538-qt4vb1g","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"那么直接根据这个索引就可以查到数据，也无需回表。"}]}]},{"ID":"20240201213539-9wswbn5","Type":"NodeParagraph","Properties":{"id":"20240201213539-9wswbn5","updated":"20240201213539"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"覆盖索引","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/mysql20210420165341868.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213540-f87ziwh","Type":"NodeParagraph","Properties":{"id":"20240201213540-f87ziwh","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"我们这里简单演示一下覆盖索引的效果。"}]},{"ID":"20240201213541-w6exabs","Type":"NodeParagraph","Properties":{"id":"20240201213541-w6exabs","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"1、创建一个名为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cus_order"},{"Type":"NodeText","Data":" 的表，来实际测试一下这种排序方式。为了测试方便， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cus_order"},{"Type":"NodeText","Data":" 这张表只有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"id"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"score"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"这 3 个字段。"}]},{"ID":"20240201213542-8b1h07h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213542-8b1h07h","updated":"20240201213542"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CREATE TABLE `cus_order` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `score` int(11) NOT NULL,\n  `name` varchar(11) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=100000 DEFAULT CHARSET=utf8mb4;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213543-v7a3xdt","Type":"NodeParagraph","Properties":{"id":"20240201213543-v7a3xdt","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"2、定义一个简单的存储过程（PROCEDURE）来插入 100w 测试数据。"}]},{"ID":"20240201213544-1lmgzgi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213544-1lmgzgi","updated":"20240201213544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"DELIMITER ;;\nCREATE DEFINER=`root`@`%` PROCEDURE `BatchinsertDataToCusOder`(IN start_num INT,IN max_num INT)\nBEGIN\n      DECLARE i INT default start_num;\n      WHILE i \u003c max_num DO\n          insert into `cus_order`(`id`, `score`, `name`)\n          values (i,RAND() * 1000000,CONCAT('user', i));\n          SET i = i + 1;\n      END WHILE;\n  END;;\nDELIMITER ;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213545-cz6hcon","Type":"NodeParagraph","Properties":{"id":"20240201213545-cz6hcon","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"存储过程定义完成之后，我们执行存储过程即可！"}]},{"ID":"20240201213546-xpboz3f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213546-xpboz3f","updated":"20240201213546"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CALL BatchinsertDataToCusOder(1, 1000000); # 插入100w+的随机数据\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213547-bqf0cw3","Type":"NodeParagraph","Properties":{"id":"20240201213547-bqf0cw3","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"等待一会，100w 的测试数据就插入完成了！"}]},{"ID":"20240201213548-67phqfy","Type":"NodeParagraph","Properties":{"id":"20240201213548-67phqfy","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"3、创建覆盖索引并使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 命令分析。"}]},{"ID":"20240201213549-1le8w6x","Type":"NodeParagraph","Properties":{"id":"20240201213549-1le8w6x","updated":"20240201213549"},"Children":[{"Type":"NodeText","Data":"为了能够对这 100w 数据按照 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"score"},{"Type":"NodeText","Data":" 进行排序，我们需要执行下面的 SQL 语句。"}]},{"ID":"20240201213550-6c13o8c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213550-6c13o8c","updated":"20240201213550"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;#降序排序\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213551-k3a77jd","Type":"NodeParagraph","Properties":{"id":"20240201213551-k3a77jd","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 命令分析这条 SQL 语句，通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Extra"},{"Type":"NodeText","Data":" 这一列的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Using filesort"},{"Type":"NodeText","Data":" ，我们发现是没有用到覆盖索引的。"}]},{"ID":"20240201213552-b3t81va","Type":"NodeParagraph","Properties":{"id":"20240201213552-b3t81va","updated":"20240201213552"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/mysql/not-using-covering-index-demo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213553-bkakozp","Type":"NodeParagraph","Properties":{"id":"20240201213553-bkakozp","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"不过这也是理所应当，毕竟我们现在还没有创建索引呢！"}]},{"ID":"20240201213554-lha4iwc","Type":"NodeParagraph","Properties":{"id":"20240201213554-lha4iwc","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"我们这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"score"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 两个字段建立联合索引："}]},{"ID":"20240201213555-rrt70iu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213555-rrt70iu","updated":"20240201213555"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ALTER TABLE `cus_order` ADD INDEX id_score_name(score, name);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213556-zo1t5nd","Type":"NodeParagraph","Properties":{"id":"20240201213556-zo1t5nd","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"创建完成之后，再用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 命令分析再次分析这条 SQL 语句。"}]},{"ID":"20240201213557-cwis68d","Type":"NodeParagraph","Properties":{"id":"20240201213557-cwis68d","updated":"20240201213557"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/mysql/using-covering-index-demo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213558-m4ol7nv","Type":"NodeParagraph","Properties":{"id":"20240201213558-m4ol7nv","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Extra"},{"Type":"NodeText","Data":" 这一列的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Using index"},{"Type":"NodeText","Data":" ，说明这条 SQL 语句成功使用了覆盖索引。"}]},{"ID":"20240201213559-yqapqwz","Type":"NodeParagraph","Properties":{"id":"20240201213559-yqapqwz","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 命令的详细介绍请看："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./mysql-query-execution-plan.md","TextMarkTextContent":"MySQL 执行计划分析"},{"Type":"NodeText","Data":"这篇文章。"}]},{"ID":"20240201213560-fb55xe0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213560-fb55xe0","updated":"20240201213560"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"联合索引"}]},{"ID":"20240201213561-20s9rx4","Type":"NodeParagraph","Properties":{"id":"20240201213561-20s9rx4","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"使用表中的多个字段创建索引，就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"联合索引"},{"Type":"NodeText","Data":"，也叫 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"组合索引"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"复合索引"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213562-7m527sd","Type":"NodeParagraph","Properties":{"id":"20240201213562-7m527sd","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"score"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 两个字段建立联合索引："}]},{"ID":"20240201213563-wth8imh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213563-wth8imh","updated":"20240201213563"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ALTER TABLE `cus_order` ADD INDEX id_score_name(score, name);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213564-8gr27v9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213564-8gr27v9","updated":"20240201213564"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"最左前缀匹配原则"}]},{"ID":"20240201213565-2mbrj09","Type":"NodeParagraph","Properties":{"id":"20240201213565-2mbrj09","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"最左前缀匹配原则指的是，在使用联合索引时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL"},{"Type":"NodeText","Data":" 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"\u0026gt;"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"\u0026lt;"},{"Type":"NodeText","Data":" ）才会停止匹配。对于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"\u0026gt;="},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"\u0026lt;="},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"BETWEEN"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"like"},{"Type":"NodeText","Data":" 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。"}]},{"ID":"20240201213566-cner304","Type":"NodeParagraph","Properties":{"id":"20240201213566-cner304","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/8qemhRg5MgXs1So5YCv0fQ","TextMarkTextContent":"联合索引的最左匹配原则全网都在说的一个错误结论"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213567-k53hi2t","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213567-k53hi2t","updated":"20240201213567"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"索引下推"}]},{"ID":"20240201213568-dcrcg8f","Type":"NodeParagraph","Properties":{"id":"20240201213568-dcrcg8f","updated":"20240201213568"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"索引下推（Index Condition Pushdown）"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL 5.6"},{"Type":"NodeText","Data":" 版本中提供的一项索引优化功能，可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。"}]},{"ID":"20240201213569-orsmps1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213569-orsmps1","updated":"20240201213569"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"正确使用索引的一些建议"}]},{"ID":"20240201213570-34khsso","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213570-34khsso","updated":"20240201213570"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"选择合适的字段创建索引"}]},{"ID":"20240201213571-zv1a17d","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-zv1a17d","updated":"20240201213571"},"Children":[{"ID":"20240201213572-kiium81","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-kiium81","updated":"20240201213572"},"Children":[{"ID":"20240201213573-femyqoq","Type":"NodeParagraph","Properties":{"id":"20240201213573-femyqoq","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不为 NULL 的字段"},{"Type":"NodeText","Data":"：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。"}]}]},{"ID":"20240201213574-esbk0ty","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-esbk0ty","updated":"20240201213574"},"Children":[{"ID":"20240201213575-dn8g39b","Type":"NodeParagraph","Properties":{"id":"20240201213575-dn8g39b","updated":"20240201213575"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"被频繁查询的字段"},{"Type":"NodeText","Data":"：我们创建索引的字段应该是查询操作非常频繁的字段。"}]}]},{"ID":"20240201213576-kinrdxf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-kinrdxf","updated":"20240201213576"},"Children":[{"ID":"20240201213577-hpg9idi","Type":"NodeParagraph","Properties":{"id":"20240201213577-hpg9idi","updated":"20240201213577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"被作为条件查询的字段"},{"Type":"NodeText","Data":"：被作为 WHERE 条件查询的字段，应该被考虑建立索引。"}]}]},{"ID":"20240201213578-4s97jof","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213578-4s97jof","updated":"20240201213578"},"Children":[{"ID":"20240201213579-p2zj3x3","Type":"NodeParagraph","Properties":{"id":"20240201213579-p2zj3x3","updated":"20240201213579"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"频繁需要排序的字段"},{"Type":"NodeText","Data":"：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。"}]}]},{"ID":"20240201213580-kzgcmvp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-kzgcmvp","updated":"20240201213580"},"Children":[{"ID":"20240201213581-b07bprt","Type":"NodeParagraph","Properties":{"id":"20240201213581-b07bprt","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"被经常频繁用于连接的字段"},{"Type":"NodeText","Data":"：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。"}]}]}]},{"ID":"20240201213582-xb1dnun","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213582-xb1dnun","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"被频繁更新的字段应该慎重建立索引"}]},{"ID":"20240201213583-xl37q3g","Type":"NodeParagraph","Properties":{"id":"20240201213583-xl37q3g","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。"}]},{"ID":"20240201213584-7svpe34","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213584-7svpe34","updated":"20240201213584"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"限制每张表上的索引数量"}]},{"ID":"20240201213585-55hca2c","Type":"NodeParagraph","Properties":{"id":"20240201213585-55hca2c","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"索引并不是越多越好，建议单张表索引不超过 5 个！索引可以提高效率同样可以降低效率。"}]},{"ID":"20240201213586-72t7y5h","Type":"NodeParagraph","Properties":{"id":"20240201213586-72t7y5h","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。"}]},{"ID":"20240201213587-gjtac7d","Type":"NodeParagraph","Properties":{"id":"20240201213587-gjtac7d","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。"}]},{"ID":"20240201213588-0xnn9sj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213588-0xnn9sj","updated":"20240201213588"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"尽可能的考虑建立联合索引而不是单列索引"}]},{"ID":"20240201213589-6ipvm5f","Type":"NodeParagraph","Properties":{"id":"20240201213589-6ipvm5f","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。"}]},{"ID":"20240201213590-0fytey3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213590-0fytey3","updated":"20240201213590"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注意避免冗余索引"}]},{"ID":"20240201213591-zbg4zyw","Type":"NodeParagraph","Properties":{"id":"20240201213591-zbg4zyw","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。"}]},{"ID":"20240201213592-wdxftxr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213592-wdxftxr","updated":"20240201213592"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"字符串类型的字段使用前缀索引代替普通索引"}]},{"ID":"20240201213593-2xd2vb1","Type":"NodeParagraph","Properties":{"id":"20240201213593-2xd2vb1","updated":"20240201213593"},"Children":[{"Type":"NodeText","Data":"前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。"}]},{"ID":"20240201213594-9ieanm8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213594-9ieanm8","updated":"20240201213594"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"避免索引失效"}]},{"ID":"20240201213595-spnyyjv","Type":"NodeParagraph","Properties":{"id":"20240201213595-spnyyjv","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些："}]},{"ID":"20240201213596-vr3k0vb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213596-vr3k0vb","updated":"20240201213596"},"Children":[{"ID":"20240201213597-lf7bu50","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213597-lf7bu50","updated":"20240201213597"},"Children":[{"ID":"20240201213598-q6qno4b","Type":"NodeParagraph","Properties":{"id":"20240201213598-q6qno4b","updated":"20240201213598"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s code","TextMarkTextContent":"SELECT *"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":" 进行查询;"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SELECT *"},{"Type":"NodeText","Data":" 不会直接导致索引失效（如果不走索引大概率是因为 where 查询范围过大导致的），但它可能会带来一些其他的性能问题比如造成网络传输和数据处理的浪费、无法使用索引覆盖;"}]}]},{"ID":"20240201213599-n7zhewx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213599-n7zhewx","updated":"20240201213599"},"Children":[{"ID":"20240201213600-ym1ymsq","Type":"NodeParagraph","Properties":{"id":"20240201213600-ym1ymsq","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"创建了组合索引，但查询条件未准守最左匹配原则;"}]}]},{"ID":"20240201213601-0twzv55","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213601-0twzv55","updated":"20240201213601"},"Children":[{"ID":"20240201213602-c7ujj5a","Type":"NodeParagraph","Properties":{"id":"20240201213602-c7ujj5a","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"在索引列上进行计算、函数、类型转换等操作;"}]}]},{"ID":"20240201213603-i115wga","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213603-i115wga","updated":"20240201213603"},"Children":[{"ID":"20240201213604-g2bo6e5","Type":"NodeParagraph","Properties":{"id":"20240201213604-g2bo6e5","updated":"20240201213604"},"Children":[{"Type":"NodeText","Data":"以 % 开头的 LIKE 查询比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LIKE '%abc';"},{"Type":"NodeText","Data":";"}]}]},{"ID":"20240201213605-7eba2gm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213605-7eba2gm","updated":"20240201213605"},"Children":[{"ID":"20240201213606-f2epn8c","Type":"NodeParagraph","Properties":{"id":"20240201213606-f2epn8c","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"查询条件中使用 OR，且 OR 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;"}]}]},{"ID":"20240201213607-it4m51f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213607-it4m51f","updated":"20240201213607"},"Children":[{"ID":"20240201213608-enwn86n","Type":"NodeParagraph","Properties":{"id":"20240201213608-enwn86n","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"IN 的取值范围较大时会导致索引失效，走全表扫描(NOT IN 和 IN 的失效场景相同);"}]}]},{"ID":"20240201213609-2t2jkcq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213609-2t2jkcq","updated":"20240201213609"},"Children":[{"ID":"20240201213610-ynahl3v","Type":"NodeParagraph","Properties":{"id":"20240201213610-ynahl3v","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"发生"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/mysql/index-invalidation-caused-by-implicit-conversion.html","TextMarkTextContent":"隐式转换"},{"Type":"NodeText","Data":";"}]}]},{"ID":"20240201213611-e4w95cq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213611-e4w95cq","updated":"20240201213611"},"Children":[{"ID":"20240201213612-xhmahnk","Type":"NodeParagraph","Properties":{"id":"20240201213612-xhmahnk","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213613-q1wgcap","Type":"NodeParagraph","Properties":{"id":"20240201213613-q1wgcap","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"推荐阅读这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/mwME3qukHBFul57WQLkOYg","TextMarkTextContent":"美团暑期实习一面：MySQl 索引失效的场景有哪些？"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213614-f2zqxug","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213614-f2zqxug","updated":"20240201213614"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"删除长期未使用的索引"}]},{"ID":"20240201213615-x90vgip","Type":"NodeParagraph","Properties":{"id":"20240201213615-x90vgip","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗。"}]},{"ID":"20240201213616-arvzn30","Type":"NodeParagraph","Properties":{"id":"20240201213616-arvzn30","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"MySQL 5.7 可以通过查询 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sys"},{"Type":"NodeText","Data":" 库的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"schema_unused_indexes"},{"Type":"NodeText","Data":" 视图来查询哪些索引从未被使用。"}]},{"ID":"20240201213617-sxwj39a","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213617-sxwj39a","updated":"20240201213617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"知道如何分析语句是否走索引查询"}]},{"ID":"20240201213618-eedn6yd","Type":"NodeParagraph","Properties":{"id":"20240201213618-eedn6yd","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"我们可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 命令来分析 SQL 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"执行计划"},{"Type":"NodeText","Data":" ，这样就知道语句是否命中索引了。执行计划是指一条 SQL 语句在经过 MySQL 查询优化器的优化会后，具体的执行方式。"}]},{"ID":"20240201213619-mrrmu7q","Type":"NodeParagraph","Properties":{"id":"20240201213619-mrrmu7q","updated":"20240201213619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 并不会真的去执行相关的语句，而是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"查询优化器"},{"Type":"NodeText","Data":" 对语句进行分析，找出最优的查询方案，并显示对应的信息。"}]},{"ID":"20240201213620-vqogxj5","Type":"NodeParagraph","Properties":{"id":"20240201213620-vqogxj5","updated":"20240201213620"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXPLAIN"},{"Type":"NodeText","Data":" 的输出格式如下："}]},{"ID":"20240201213621-eldjobd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213621-eldjobd","updated":"20240201213621"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"mysql\u003e EXPLAIN SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra          |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+\n|  1 | SIMPLE      | cus_order | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 997572 |   100.00 | Using filesort |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+\n1 row in set, 1 warning (0.00 sec)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213622-2zg0f3z","Type":"NodeParagraph","Properties":{"id":"20240201213622-2zg0f3z","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"各个字段的含义如下："}]},{"ID":"20240201213623-yesswg0","Type":"NodeTable","Data":"| **列名**      | **含义**                                     |\n| ------------- | -------------------------------------------- |\n| id            | SELECT 查询的序列标识符                      |\n| select_type   | SELECT 关键字对应的查询类型                  |\n| table         | 用到的表名                                   |\n| partitions    | 匹配的分区，对于未分区的表，值为 NULL        |\n| type          | 表的访问方法                                 |\n| possible_keys | 可能用到的索引                               |\n| key           | 实际用到的索引                               |\n| key_len       | 所选索引的长度                               |\n| ref           | 当使用索引等值查询时，与索引作比较的列或常量 |\n| rows          | 预计要读取的行数                             |\n| filtered      | 按表条件过滤后，留存的记录数的百分比         |\n| Extra         | 附加信息                                     |","TableAligns":[0,0],"Properties":{"id":"20240201213623-yesswg0","updated":"20240201213623"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"列名"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"含义"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"id"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"SELECT 查询的序列标识符"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"select_type"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"SELECT 关键字对应的查询类型"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"table"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"用到的表名"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"partitions"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"匹配的分区，对于未分区的表，值为 NULL"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"type"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"表的访问方法"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"possible_keys"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"可能用到的索引"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"key"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"实际用到的索引"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"key_len"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"所选索引的长度"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ref"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"当使用索引等值查询时，与索引作比较的列或常量"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"rows"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"预计要读取的行数"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"filtered"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"按表条件过滤后，留存的记录数的百分比"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Extra"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"附加信息"}]}]}]},{"ID":"20240201213624-sspoqzw","Type":"NodeParagraph","Properties":{"id":"20240201213624-sspoqzw","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"篇幅问题，我这里只是简单介绍了一下 MySQL 执行计划，详细介绍请看："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./mysql-query-execution-plan.md","TextMarkTextContent":"MySQL 执行计划分析"},{"Type":"NodeText","Data":"这篇文章。"}]},{"ID":"20240201213625-23ue4k4","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213625-23ue4k4","updated":"20240201213625"}}]}