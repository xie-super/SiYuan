{"ID":"20240201213728-kp2itez","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213728-kp2itez","title":"deep-pagination-optimization","updated":"20240201213728"},"Children":[{"ID":"20240201213729-qtmn2pw","Type":"NodeThematicBreak","Properties":{"id":"20240201213729-qtmn2pw","updated":"20240201213729"}},{"ID":"20240201213730-qw39kv7","Type":"NodeParagraph","Properties":{"id":"20240201213730-qw39kv7","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"title: 深度分页介绍及优化建议"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高性能"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]},{"ID":"20240201213731-72sczb1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213731-72sczb1","updated":"20240201213731"},"Children":[{"ID":"20240201213732-9l1b9fu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213732-9l1b9fu","updated":"20240201213732"},"Children":[{"ID":"20240201213733-a2e5bsg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-a2e5bsg","updated":"20240201213733"},"Children":[{"ID":"20240201213734-hdn06se","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-hdn06se","updated":"20240201213734"},"Children":[{"ID":"20240201213735-2gto4bl","Type":"NodeParagraph","Properties":{"id":"20240201213735-2gto4bl","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213736-7eu61w6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213736-7eu61w6","updated":"20240201213736"},"Children":[{"ID":"20240201213737-2y3x5k4","Type":"NodeParagraph","Properties":{"id":"20240201213737-2y3x5k4","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 深度分页"}]}]}]}]},{"ID":"20240201213738-ojioz62","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-ojioz62","updated":"20240201213738"},"Children":[{"ID":"20240201213739-usso7b6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-usso7b6","updated":"20240201213739"},"Children":[{"ID":"20240201213740-5f0bsbo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-5f0bsbo","updated":"20240201213740"},"Children":[{"ID":"20240201213741-0q0ifmn","Type":"NodeParagraph","Properties":{"id":"20240201213741-0q0ifmn","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213742-a84wt8z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-a84wt8z","updated":"20240201213742"},"Children":[{"ID":"20240201213743-7dbzofr","Type":"NodeParagraph","Properties":{"id":"20240201213743-7dbzofr","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 查询偏移量过大的场景我们称为深度分页，这会导致查询性能较低。深度分页可以采用范围查询、子查询、INNER JOIN 延迟关联、覆盖索引等方法进行优化。"}]}]}]}]}]},{"ID":"20240201213744-t3el88r","Type":"NodeThematicBreak","Properties":{"id":"20240201213744-t3el88r","updated":"20240201213744"}},{"ID":"20240201213745-shesplb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213745-shesplb","updated":"20240201213745"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"深度分页介绍"}]},{"ID":"20240201213746-bijaawj","Type":"NodeParagraph","Properties":{"id":"20240201213746-bijaawj","updated":"20240201213746"},"Children":[{"Type":"NodeText","Data":"查询偏移量过大的场景我们称为深度分页，这会导致查询性能较低，例如："}]},{"ID":"20240201213747-dmsoeu2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213747-dmsoeu2","updated":"20240201213747"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# MySQL 在无法利用索引的情况下跳过1000000条记录后，再获取10条记录\nSELECT * FROM t_order ORDER BY id LIMIT 1000000, 10\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213748-a4vbaif","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213748-a4vbaif","updated":"20240201213748"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"深度分页优化建议"}]},{"ID":"20240201213749-z3oved7","Type":"NodeParagraph","Properties":{"id":"20240201213749-z3oved7","updated":"20240201213749"},"Children":[{"Type":"NodeText","Data":"这里以 MySQL 数据库为例介绍一下如何优化深度分页。"}]},{"ID":"20240201213750-yxxy1lp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213750-yxxy1lp","updated":"20240201213750"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"范围查询"}]},{"ID":"20240201213751-icxou5q","Type":"NodeParagraph","Properties":{"id":"20240201213751-icxou5q","updated":"20240201213751"},"Children":[{"Type":"NodeText","Data":"当可以保证 ID 的连续性时，根据 ID 范围进行分页是比较好的解决方案："}]},{"ID":"20240201213752-5vxghsl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213752-5vxghsl","updated":"20240201213752"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 查询指定 ID 范围的数据\nSELECT * FROM t_order WHERE id \u003e 100000 AND id \u003c= 100010 ORDER BY id\n# 也可以通过记录上次查询结果的最后一条记录的ID进行下一页的查询：\nSELECT * FROM t_order WHERE id \u003e 100000 LIMIT 10\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213753-r1wp348","Type":"NodeParagraph","Properties":{"id":"20240201213753-r1wp348","updated":"20240201213753"},"Children":[{"Type":"NodeText","Data":"这种优化方式限制比较大，且一般项目的 ID 也没办法保证完全连续。"}]},{"ID":"20240201213754-5ie5ilf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213754-5ie5ilf","updated":"20240201213754"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"子查询"}]},{"ID":"20240201213755-wvofm0z","Type":"NodeParagraph","Properties":{"id":"20240201213755-wvofm0z","updated":"20240201213755"},"Children":[{"Type":"NodeText","Data":"我们先查询出 limit 第一个参数对应的主键值，再根据这个主键值再去过滤并 limit，这样效率会更快一些。"}]},{"ID":"20240201213756-0ku0paq","Type":"NodeParagraph","Properties":{"id":"20240201213756-0ku0paq","updated":"20240201213756"},"Children":[{"Type":"NodeText","Data":"阿里巴巴《Java 开发手册》中也有对应的描述："}]},{"ID":"20240201213757-f307gef","Type":"NodeBlockquote","Properties":{"id":"20240201213757-f307gef","updated":"20240201213757"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213758-k99hmlt","Type":"NodeParagraph","Properties":{"id":"20240201213758-k99hmlt","updated":"20240201213758"},"Children":[{"Type":"NodeText","Data":"利用延迟关联或者子查询优化超多分页场景。"}]},{"ID":"20240201213759-r342z7o","Type":"NodeParagraph","Properties":{"id":"20240201213759-r342z7o","updated":"20240201213759"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/mysql/alibaba-java-development-handbook-paging.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]}]},{"ID":"20240201213760-xa7zchz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213760-xa7zchz","updated":"20240201213760"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 通过子查询来获取 id 的起始值，把 limit 1000000 的条件转移到子查询\nSELECT * FROM t_order WHERE id \u003e= (SELECT id FROM t_order limit 1000000, 1) LIMIT 10;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213761-u14enlo","Type":"NodeParagraph","Properties":{"id":"20240201213761-u14enlo","updated":"20240201213761"},"Children":[{"Type":"NodeText","Data":"不过，子查询的结果会产生一张新表，会影响性能，应该尽量避免大量使用子查询。并且，这种方法只适用于 ID 是正序的。在复杂分页场景，往往需要通过过滤条件，筛选到符合条件的 ID，此时的 ID 是离散且不连续的。"}]},{"ID":"20240201213762-k7c355a","Type":"NodeParagraph","Properties":{"id":"20240201213762-k7c355a","updated":"20240201213762"},"Children":[{"Type":"NodeText","Data":"当然，我们也可以利用子查询先去获取目标分页的 ID 集合，然后再根据 ID 集合获取内容，但这种写法非常繁琐，不如使用 INNER JOIN 延迟关联。"}]},{"ID":"20240201213763-myffb1g","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213763-myffb1g","updated":"20240201213763"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"延迟关联"}]},{"ID":"20240201213764-qgdbjl7","Type":"NodeParagraph","Properties":{"id":"20240201213764-qgdbjl7","updated":"20240201213764"},"Children":[{"Type":"NodeText","Data":"延迟关联的优化思路，跟子查询的优化思路其实是一样的：都是把条件转移到主键索引树，减少回表的次数。不同点是，延迟关联使用了 INNER JOIN（内连接） 包含子查询。"}]},{"ID":"20240201213765-ykqmx1f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213765-ykqmx1f","updated":"20240201213765"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT t1.* FROM t_order t1\nINNER JOIN (SELECT id FROM t_order limit 1000000, 10) t2\nON t1.id = t2.id\nLIMIT 10;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213766-25y9m4e","Type":"NodeParagraph","Properties":{"id":"20240201213766-25y9m4e","updated":"20240201213766"},"Children":[{"Type":"NodeText","Data":"除了使用 INNER JOIN 之外，还可以使用逗号连接子查询。"}]},{"ID":"20240201213767-thscx6p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213767-thscx6p","updated":"20240201213767"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT t1.* FROM t_order t1,\n(SELECT id FROM t_order limit 1000000, 10) t2\nWHERE t1.id = t2.id;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213768-wj4taea","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213768-wj4taea","updated":"20240201213768"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"覆盖索引"}]},{"ID":"20240201213769-2wmhdqt","Type":"NodeParagraph","Properties":{"id":"20240201213769-2wmhdqt","updated":"20240201213769"},"Children":[{"Type":"NodeText","Data":"索引中已经包含了所有需要获取的字段的查询方式称为覆盖索引。"}]},{"ID":"20240201213770-8h3cavv","Type":"NodeParagraph","Properties":{"id":"20240201213770-8h3cavv","updated":"20240201213770"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"覆盖索引的好处："}]},{"ID":"20240201213771-sbhrlao","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213771-sbhrlao","updated":"20240201213771"},"Children":[{"ID":"20240201213772-e3vkk3i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213772-e3vkk3i","updated":"20240201213772"},"Children":[{"ID":"20240201213773-v4g81d6","Type":"NodeParagraph","Properties":{"id":"20240201213773-v4g81d6","updated":"20240201213773"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免 InnoDB 表进行索引的二次查询，也就是回表操作:"},{"Type":"NodeText","Data":" InnoDB 是以聚集索引的顺序来存储的，对于 InnoDB 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询（回表），减少了 IO 操作，提升了查询效率。"}]}]},{"ID":"20240201213774-lbb864e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213774-lbb864e","updated":"20240201213774"},"Children":[{"ID":"20240201213775-pc10joh","Type":"NodeParagraph","Properties":{"id":"20240201213775-pc10joh","updated":"20240201213775"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以把随机 IO 变成顺序 IO 加快查询效率:"},{"Type":"NodeText","Data":" 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。"}]}]}]},{"ID":"20240201213776-08i29ob","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213776-08i29ob","updated":"20240201213776"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 如果只需要查询 id, code, type 这三列，可建立 code 和 type 的覆盖索引\nSELECT id, code, type FROM t_order\nORDER BY code\nLIMIT 1000000, 10;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213777-bryfkbv","Type":"NodeParagraph","Properties":{"id":"20240201213777-bryfkbv","updated":"20240201213777"},"Children":[{"Type":"NodeText","Data":"不过，当查询的结果集占表的总行数的很大一部分时，可能就不会走索引了，自动转换为全表扫描。当然了，也可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FORCE INDEX"},{"Type":"NodeText","Data":" 来强制查询优化器走索引，但这种提升效果一般不明显。"}]},{"ID":"20240201213778-1e4wb94","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213778-1e4wb94","updated":"20240201213778"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213779-6xjt8iy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213779-6xjt8iy","updated":"20240201213779"},"Children":[{"ID":"20240201213780-qv5pnik","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213780-qv5pnik","updated":"20240201213780"},"Children":[{"ID":"20240201213781-q7v3v4j","Type":"NodeParagraph","Properties":{"id":"20240201213781-q7v3v4j","updated":"20240201213781"},"Children":[{"Type":"NodeText","Data":"聊聊如何解决 MySQL 深分页问题 - 捡田螺的小男孩："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7012016858379321358","TextMarkTextContent":"https://juejin.cn/post/7012016858379321358"}]}]},{"ID":"20240201213782-7jott4p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213782-7jott4p","updated":"20240201213782"},"Children":[{"ID":"20240201213783-mbb8zl7","Type":"NodeParagraph","Properties":{"id":"20240201213783-mbb8zl7","updated":"20240201213783"},"Children":[{"Type":"NodeText","Data":"数据库深分页介绍及优化方案 - 京东零售技术："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/ZEwGKvRCyvAgGlmeseAS7g","TextMarkTextContent":"https://mp.weixin.qq.com/s/ZEwGKvRCyvAgGlmeseAS7g"}]}]},{"ID":"20240201213784-wuwdrcx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213784-wuwdrcx","updated":"20240201213784"},"Children":[{"ID":"20240201213785-t8lmelk","Type":"NodeParagraph","Properties":{"id":"20240201213785-t8lmelk","updated":"20240201213785"},"Children":[{"Type":"NodeText","Data":"MySQL 深分页优化 - 得物技术："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/6985478936683610149","TextMarkTextContent":"https://juejin.cn/post/6985478936683610149"}]}]}]}]}