{"ID":"20240201213435-m5see3u","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213435-m5see3u","title":"read-and-write-separation-and-library-subtable","updated":"20240201213435"},"Children":[{"ID":"20240201213436-9tp91ev","Type":"NodeThematicBreak","Properties":{"id":"20240201213436-9tp91ev","updated":"20240201213436"}},{"ID":"20240201213437-heqyde4","Type":"NodeParagraph","Properties":{"id":"20240201213437-heqyde4","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"title: 读写分离和分库分表详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高性能"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]},{"ID":"20240201213438-qtnd1gl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213438-qtnd1gl","updated":"20240201213438"},"Children":[{"ID":"20240201213439-2erli40","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213439-2erli40","updated":"20240201213439"},"Children":[{"ID":"20240201213440-4ax9lfr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213440-4ax9lfr","updated":"20240201213440"},"Children":[{"ID":"20240201213441-kwqa82i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213441-kwqa82i","updated":"20240201213441"},"Children":[{"ID":"20240201213442-umdb3st","Type":"NodeParagraph","Properties":{"id":"20240201213442-umdb3st","updated":"20240201213442"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213443-abv2ur5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213443-abv2ur5","updated":"20240201213443"},"Children":[{"ID":"20240201213444-2oowz62","Type":"NodeParagraph","Properties":{"id":"20240201213444-2oowz62","updated":"20240201213444"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 读写分离,分库分表,主从复制"}]}]}]}]},{"ID":"20240201213445-02zzs6h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213445-02zzs6h","updated":"20240201213445"},"Children":[{"ID":"20240201213446-jh96tpy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213446-jh96tpy","updated":"20240201213446"},"Children":[{"ID":"20240201213447-qyndg4a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213447-qyndg4a","updated":"20240201213447"},"Children":[{"ID":"20240201213448-e417y0y","Type":"NodeParagraph","Properties":{"id":"20240201213448-e417y0y","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213449-9vy0g46","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213449-9vy0g46","updated":"20240201213449"},"Children":[{"ID":"20240201213450-dim5sf4","Type":"NodeParagraph","Properties":{"id":"20240201213450-dim5sf4","updated":"20240201213450"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。 读写分离基于主从复制，MySQL 主从复制是依赖于 binlog 。分库就是将数据库中的数据分散到不同的数据库上。分表就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。引入分库分表之后，需要系统解决事务、分布式 id、无法 join 操作问题。"}]}]}]}]}]},{"ID":"20240201213451-ce1lqzg","Type":"NodeThematicBreak","Properties":{"id":"20240201213451-ce1lqzg","updated":"20240201213451"}},{"ID":"20240201213452-3beytvv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213452-3beytvv","updated":"20240201213452"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"读写分离"}]},{"ID":"20240201213453-7eiqikq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213453-7eiqikq","updated":"20240201213453"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是读写分离？"}]},{"ID":"20240201213454-dwo3cp5","Type":"NodeParagraph","Properties":{"id":"20240201213454-dwo3cp5","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"见名思意，根据读写分离的名字，我们就可以知道："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。"},{"Type":"NodeText","Data":" 这样的话，就能够小幅提升写性能，大幅提升读性能。"}]},{"ID":"20240201213455-l3wwxcj","Type":"NodeParagraph","Properties":{"id":"20240201213455-l3wwxcj","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。"}]},{"ID":"20240201213456-hyv8ctq","Type":"NodeParagraph","Properties":{"id":"20240201213456-hyv8ctq","updated":"20240201213456"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"读写分离示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213457-8ev7tiz","Type":"NodeParagraph","Properties":{"id":"20240201213457-8ev7tiz","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。"}]},{"ID":"20240201213458-e9igl4r","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213458-e9igl4r","updated":"20240201213458"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何实现读写分离？"}]},{"ID":"20240201213459-ut2pbw3","Type":"NodeParagraph","Properties":{"id":"20240201213459-ut2pbw3","updated":"20240201213459"},"Children":[{"Type":"NodeText","Data":"不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步："}]},{"ID":"20240201213460-6q8zjh3","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213460-6q8zjh3","updated":"20240201213460"},"Children":[{"ID":"20240201213461-dzpn11m","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213461-dzpn11m","updated":"20240201213461"},"Children":[{"ID":"20240201213462-02qzv0c","Type":"NodeParagraph","Properties":{"id":"20240201213462-02qzv0c","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。"}]}]},{"ID":"20240201213463-lw3wq54","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213463-lw3wq54","updated":"20240201213463"},"Children":[{"ID":"20240201213464-7wnqewp","Type":"NodeParagraph","Properties":{"id":"20240201213464-7wnqewp","updated":"20240201213464"},"Children":[{"Type":"NodeText","Data":"保证主数据库和从数据库之间的数据是实时同步的，这个过程也就是我们常说的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主从复制"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213465-laldfkn","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213465-laldfkn","updated":"20240201213465"},"Children":[{"ID":"20240201213466-daei6u9","Type":"NodeParagraph","Properties":{"id":"20240201213466-daei6u9","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"系统将写请求交给主数据库处理，读请求交给从数据库处理。"}]}]}]},{"ID":"20240201213467-zqvsuca","Type":"NodeParagraph","Properties":{"id":"20240201213467-zqvsuca","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"落实到项目本身的话，常用的方式有两种："}]},{"ID":"20240201213468-thu0urr","Type":"NodeParagraph","Properties":{"id":"20240201213468-thu0urr","updated":"20240201213468"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1. 代理方式"}]},{"ID":"20240201213469-53wo8by","Type":"NodeParagraph","Properties":{"id":"20240201213469-53wo8by","updated":"20240201213469"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"代理方式实现读写分离","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation-proxy.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213470-dgllrs5","Type":"NodeParagraph","Properties":{"id":"20240201213470-dgllrs5","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"我们可以在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。"}]},{"ID":"20240201213471-trl0bxs","Type":"NodeParagraph","Properties":{"id":"20240201213471-trl0bxs","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"提供类似功能的中间件有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL Router"},{"Type":"NodeText","Data":"（官方， MySQL Proxy 的替代方案）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Atlas"},{"Type":"NodeText","Data":"（基于 MySQL Proxy）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MaxScale"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MyCat"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213472-w0vkyar","Type":"NodeParagraph","Properties":{"id":"20240201213472-w0vkyar","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"关于 MySQL Router 多提一点：在 MySQL 8.2 的版本中，MySQL Router 能自动分辨对数据库读写/操作并把这些操作路由到正确的实例上。这是一项有价值的功能，可以优化数据库性能和可扩展性，而无需在应用程序中进行任何更改。具体介绍可以参考官方博客："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blogs.oracle.com/mysql/post/mysql-82-transparent-readwrite-splitting","TextMarkTextContent":"MySQL 8.2 – transparent read/write splitting"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213473-n5gzz1b","Type":"NodeParagraph","Properties":{"id":"20240201213473-n5gzz1b","updated":"20240201213473"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2. 组件方式"}]},{"ID":"20240201213474-7hg3ya4","Type":"NodeParagraph","Properties":{"id":"20240201213474-7hg3ya4","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。"}]},{"ID":"20240201213475-wr7xspj","Type":"NodeParagraph","Properties":{"id":"20240201213475-wr7xspj","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"这也是我比较推荐的一种方式。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。如果你要采用这种方式的话，推荐使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sharding-jdbc"},{"Type":"NodeText","Data":" ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。"}]},{"ID":"20240201213476-lif1e7o","Type":"NodeParagraph","Properties":{"id":"20240201213476-lif1e7o","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"你可以在 shardingsphere 官方找到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-jdbc/usage/read-write-splitting/","TextMarkTextContent":"sharding-jdbc 关于读写分离的操作"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213477-dipza3d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213477-dipza3d","updated":"20240201213477"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"主从复制原理是什么？"}]},{"ID":"20240201213478-nm28b3z","Type":"NodeParagraph","Properties":{"id":"20240201213478-nm28b3z","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。因此，我们根据主库的 MySQL binlog 日志就能够将主库的数据同步到从库中。"}]},{"ID":"20240201213479-lib3t1q","Type":"NodeParagraph","Properties":{"id":"20240201213479-lib3t1q","updated":"20240201213479"},"Children":[{"Type":"NodeText","Data":"更具体和详细的过程是这个样子的（图片来自于："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.toptal.com/mysql/mysql-master-slave-replication-tutorial","TextMarkTextContent":"《MySQL Master-Slave Replication on the Same Machine》"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213480-wazs4f5","Type":"NodeParagraph","Properties":{"id":"20240201213480-wazs4f5","updated":"20240201213480"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"MySQL主从复制","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/java-guide-blog/78816271d3ab52424bfd5ad3086c1a0f.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213481-8tj40zp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213481-8tj40zp","updated":"20240201213481"},"Children":[{"ID":"20240201213482-q6aga5g","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213482-q6aga5g","updated":"20240201213482"},"Children":[{"ID":"20240201213483-vtiv5s7","Type":"NodeParagraph","Properties":{"id":"20240201213483-vtiv5s7","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"主库将数据库中数据的变化写入到 binlog"}]}]},{"ID":"20240201213484-hte43ch","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213484-hte43ch","updated":"20240201213484"},"Children":[{"ID":"20240201213485-u5qm2ud","Type":"NodeParagraph","Properties":{"id":"20240201213485-u5qm2ud","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"从库连接主库"}]}]},{"ID":"20240201213486-fdm99x1","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213486-fdm99x1","updated":"20240201213486"},"Children":[{"ID":"20240201213487-p0e9i6h","Type":"NodeParagraph","Properties":{"id":"20240201213487-p0e9i6h","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"从库会创建一个 I/O 线程向主库请求更新的 binlog"}]}]},{"ID":"20240201213488-xe5j5e2","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213488-xe5j5e2","updated":"20240201213488"},"Children":[{"ID":"20240201213489-ssvlkv8","Type":"NodeParagraph","Properties":{"id":"20240201213489-ssvlkv8","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"主库会创建一个 binlog dump 线程来发送 binlog ，从库中的 I/O 线程负责接收"}]}]},{"ID":"20240201213490-4lujh2a","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213490-4lujh2a","updated":"20240201213490"},"Children":[{"ID":"20240201213491-ylx4z4z","Type":"NodeParagraph","Properties":{"id":"20240201213491-ylx4z4z","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"从库的 I/O 线程将接收的 binlog 写入到 relay log 中。"}]}]},{"ID":"20240201213492-583x9rb","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213492-583x9rb","updated":"20240201213492"},"Children":[{"ID":"20240201213493-8fvhfuk","Type":"NodeParagraph","Properties":{"id":"20240201213493-8fvhfuk","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"从库的 SQL 线程读取 relay log 同步数据本地（也就是再执行一遍 SQL ）。"}]}]}]},{"ID":"20240201213494-iv65sql","Type":"NodeParagraph","Properties":{"id":"20240201213494-iv65sql","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"怎么样？看了我对主从复制这个过程的讲解，你应该搞明白了吧!"}]},{"ID":"20240201213495-79gi8kn","Type":"NodeParagraph","Properties":{"id":"20240201213495-79gi8kn","updated":"20240201213495"},"Children":[{"Type":"NodeText","Data":"你一般看到 binlog 就要想到主从复制。当然，除了主从复制之外，binlog 还能帮助我们实现数据恢复。"}]},{"ID":"20240201213496-q3d3wol","Type":"NodeParagraph","Properties":{"id":"20240201213496-q3d3wol","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"🌈 拓展一下："}]},{"ID":"20240201213497-hc4b95b","Type":"NodeParagraph","Properties":{"id":"20240201213497-hc4b95b","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"不知道大家有没有使用过阿里开源的一个叫做 canal 的工具。这个工具可以帮助我们实现 MySQL 和其他数据源比如 Elasticsearch 或者另外一台 MySQL 数据库之间的数据同步。很显然，这个工具的底层原理肯定也是依赖 binlog。canal 的原理就是模拟 MySQL 主从复制的过程，解析 binlog 将数据同步到其他的数据源。"}]},{"ID":"20240201213498-mbdbyt3","Type":"NodeParagraph","Properties":{"id":"20240201213498-mbdbyt3","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"另外，像咱们常用的分布式缓存组件 Redis 也是通过主从复制实现的读写分离。"}]},{"ID":"20240201213499-uy7xp6l","Type":"NodeParagraph","Properties":{"id":"20240201213499-uy7xp6l","updated":"20240201213499"},"Children":[{"Type":"NodeText","Data":"🌕 简单总结一下："}]},{"ID":"20240201213500-6lvhbqw","Type":"NodeParagraph","Properties":{"id":"20240201213500-6lvhbqw","updated":"20240201213500"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL 主从复制是依赖于 binlog 。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。"}]},{"ID":"20240201213501-wwtdqhm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213501-wwtdqhm","updated":"20240201213501"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何避免主从延迟？"}]},{"ID":"20240201213502-tdrd86k","Type":"NodeParagraph","Properties":{"id":"20240201213502-tdrd86k","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"读写分离对于提升数据库的并发非常有效，但是，同时也会引来一个问题：主库和从库的数据存在延迟，比如你写完主库之后，主库的数据同步到从库是需要时间的，这个时间差就导致了主库和从库的数据不一致性问题。这也就是我们经常说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主从同步延迟"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213503-gxtv0qh","Type":"NodeParagraph","Properties":{"id":"20240201213503-gxtv0qh","updated":"20240201213503"},"Children":[{"Type":"NodeText","Data":"如果我们的业务场景无法容忍主从同步延迟的话，应该如何避免呢（注意：我这里说的是避免而不是减少延迟）？"}]},{"ID":"20240201213504-vrh2p50","Type":"NodeParagraph","Properties":{"id":"20240201213504-vrh2p50","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"这里提供两种我知道的方案（能力有限，欢迎补充），你可以根据自己的业务场景参考一下。"}]},{"ID":"20240201213505-r7xerpt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213505-r7xerpt","updated":"20240201213505"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"强制将读请求路由到主库处理"}]},{"ID":"20240201213506-jd8qbp7","Type":"NodeParagraph","Properties":{"id":"20240201213506-jd8qbp7","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"既然你从库的数据过期了，那我就直接从主库读取嘛！这种方案虽然会增加主库的压力，但是，实现起来比较简单，也是我了解到的使用最多的一种方式。"}]},{"ID":"20240201213507-w2yf5ru","Type":"NodeParagraph","Properties":{"id":"20240201213507-w2yf5ru","updated":"20240201213507"},"Children":[{"Type":"NodeText","Data":"比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Sharding-JDBC"},{"Type":"NodeText","Data":" 就是采用的这种方案。通过使用 Sharding-JDBC 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HintManager"},{"Type":"NodeText","Data":" 分片键值管理器，我们可以强制使用主库。"}]},{"ID":"20240201213508-k1nzufo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213508-k1nzufo","updated":"20240201213508"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"HintManager hintManager = HintManager.getInstance();\nhintManager.setMasterRouteOnly();\n// 继续JDBC操作\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213509-j5vequm","Type":"NodeParagraph","Properties":{"id":"20240201213509-j5vequm","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"对于这种方案，你可以将那些必须获取最新数据的读请求都交给主库处理。"}]},{"ID":"20240201213510-nxzo648","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213510-nxzo648","updated":"20240201213510"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"延迟读取"}]},{"ID":"20240201213511-rl4swq5","Type":"NodeParagraph","Properties":{"id":"20240201213511-rl4swq5","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"还有一些朋友肯定会想既然主从同步存在延迟，那我就在延迟之后读取啊，比如主从同步延迟 0.5s,那我就 1s 之后再读取数据。这样多方便啊！方便是方便，但是也很扯淡。"}]},{"ID":"20240201213512-1rcf373","Type":"NodeParagraph","Properties":{"id":"20240201213512-1rcf373","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"不过，如果你是这样设计业务流程就会好很多：对于一些对数据比较敏感的场景，你可以在完成写请求之后，避免立即进行请求操作。比如你支付成功之后，跳转到一个支付成功的页面，当你点击返回之后才返回自己的账户。"}]},{"ID":"20240201213513-zzydb70","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213513-zzydb70","updated":"20240201213513"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213514-4p8kwy3","Type":"NodeParagraph","Properties":{"id":"20240201213514-4p8kwy3","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"关于如何避免主从延迟，我们这里介绍了两种方案。实际上，延迟读取这种方案没办法完全避免主从延迟，只能说可以减少出现延迟的概率而已，实际项目中一般不会使用。"}]},{"ID":"20240201213515-wl674d7","Type":"NodeParagraph","Properties":{"id":"20240201213515-wl674d7","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"总的来说，要想不出现延迟问题，一般还是要强制将那些必须获取最新数据的读请求都交给主库处理。如果你的项目的大部分业务场景对数据准确性要求不是那么高的话，这种方案还是可以选择的。"}]},{"ID":"20240201213516-2et4law","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213516-2et4law","updated":"20240201213516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么情况下会出现主从延迟？如何尽量减少延迟？"}]},{"ID":"20240201213517-hiiw5xg","Type":"NodeParagraph","Properties":{"id":"20240201213517-hiiw5xg","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"我们在上面的内容中也提到了主从延迟以及避免主从延迟的方法，这里我们再来详细分析一下主从延迟出现的原因以及应该如何尽量减少主从延迟。"}]},{"ID":"20240201213518-3rninqf","Type":"NodeParagraph","Properties":{"id":"20240201213518-3rninqf","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"要搞懂什么情况下会出现主从延迟，我们需要先搞懂什么是主从延迟。"}]},{"ID":"20240201213519-fvh42fa","Type":"NodeParagraph","Properties":{"id":"20240201213519-fvh42fa","updated":"20240201213519"},"Children":[{"Type":"NodeText","Data":"MySQL 主从同步延时是指从库的数据落后于主库的数据，这种情况可能由以下两个原因造成："}]},{"ID":"20240201213520-id9w576","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213520-id9w576","updated":"20240201213520"},"Children":[{"ID":"20240201213521-9sfkwxb","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213521-9sfkwxb","updated":"20240201213521"},"Children":[{"ID":"20240201213522-dx2557q","Type":"NodeParagraph","Properties":{"id":"20240201213522-dx2557q","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"从库 I/O 线程接收 binlog 的速度跟不上主库写入 binlog 的速度，导致从库 relay log 的数据滞后于主库 binlog 的数据；"}]}]},{"ID":"20240201213523-w9m94k2","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213523-w9m94k2","updated":"20240201213523"},"Children":[{"ID":"20240201213524-qaurxrx","Type":"NodeParagraph","Properties":{"id":"20240201213524-qaurxrx","updated":"20240201213524"},"Children":[{"Type":"NodeText","Data":"从库 SQL 线程执行 relay log 的速度跟不上从库 I/O 线程接收 binlog 的速度，导致从库的数据滞后于从库 relay log 的数据。"}]}]}]},{"ID":"20240201213525-tgdwlpl","Type":"NodeParagraph","Properties":{"id":"20240201213525-tgdwlpl","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"与主从同步有关的时间点主要有 3 个："}]},{"ID":"20240201213526-mrn49gx","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213526-mrn49gx","updated":"20240201213526"},"Children":[{"ID":"20240201213527-ldgo34o","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213527-ldgo34o","updated":"20240201213527"},"Children":[{"ID":"20240201213528-9sae9g0","Type":"NodeParagraph","Properties":{"id":"20240201213528-9sae9g0","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"主库执行完一个事务，写入 binlog，将这个时刻记为 T1；"}]}]},{"ID":"20240201213529-833h02c","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213529-833h02c","updated":"20240201213529"},"Children":[{"ID":"20240201213530-zuxlaxt","Type":"NodeParagraph","Properties":{"id":"20240201213530-zuxlaxt","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"从库 I/O 线程接收到 binlog 并写入 relay log 的时刻记为 T2；"}]}]},{"ID":"20240201213531-zusuiik","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213531-zusuiik","updated":"20240201213531"},"Children":[{"ID":"20240201213532-e4uem4s","Type":"NodeParagraph","Properties":{"id":"20240201213532-e4uem4s","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"从库 SQL 线程读取 relay log 同步数据本地的时刻记为 T3。"}]}]}]},{"ID":"20240201213533-xsqkw6q","Type":"NodeParagraph","Properties":{"id":"20240201213533-xsqkw6q","updated":"20240201213533"},"Children":[{"Type":"NodeText","Data":"结合我们上面讲到的主从复制原理，可以得出："}]},{"ID":"20240201213534-lsmsopx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213534-lsmsopx","updated":"20240201213534"},"Children":[{"ID":"20240201213535-x02tlo6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213535-x02tlo6","updated":"20240201213535"},"Children":[{"ID":"20240201213536-m2bll9z","Type":"NodeParagraph","Properties":{"id":"20240201213536-m2bll9z","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"T2 和 T1 的差值反映了从库 I/O 线程的性能和网络传输的效率，这个差值越小说明从库 I/O 线程的性能和网络传输效率越高。"}]}]},{"ID":"20240201213537-ymcwscn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213537-ymcwscn","updated":"20240201213537"},"Children":[{"ID":"20240201213538-2q3nwg3","Type":"NodeParagraph","Properties":{"id":"20240201213538-2q3nwg3","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"T3 和 T2 的差值反映了从库 SQL 线程执行的速度，这个差值越小，说明从库 SQL 线程执行速度越快。"}]}]}]},{"ID":"20240201213539-rpeixng","Type":"NodeParagraph","Properties":{"id":"20240201213539-rpeixng","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"那什么情况下会出现出从延迟呢？这里列举几种常见的情况："}]},{"ID":"20240201213540-ks236ko","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213540-ks236ko","updated":"20240201213540"},"Children":[{"ID":"20240201213541-o79t4ht","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213541-o79t4ht","updated":"20240201213541"},"Children":[{"ID":"20240201213542-i0xdpx6","Type":"NodeParagraph","Properties":{"id":"20240201213542-i0xdpx6","updated":"20240201213542"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从库机器性能比主库差"},{"Type":"NodeText","Data":"：从库接收 binlog 并写入 relay log 以及执行 SQL 语句的速度会比较慢（也就是 T2-T1 和 T3-T2 的值会较大），进而导致延迟。解决方法是选择与主库一样规格或更高规格的机器作为从库，或者对从库进行性能优化，比如调整参数、增加缓存、使用 SSD 等。"}]}]},{"ID":"20240201213543-gqzm5kl","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213543-gqzm5kl","updated":"20240201213543"},"Children":[{"ID":"20240201213544-slw3ga8","Type":"NodeParagraph","Properties":{"id":"20240201213544-slw3ga8","updated":"20240201213544"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从库处理的读请求过多"},{"Type":"NodeText","Data":"：从库需要执行主库的所有写操作，同时还要响应读请求，如果读请求过多，会占用从库的 CPU、内存、网络等资源，影响从库的复制效率（也就是 T2-T1 和 T3-T2 的值会较大，和前一种情况类似）。解决方法是引入缓存（推荐）、使用一主多从的架构，将读请求分散到不同的从库，或者使用其他系统来提供查询的能力，比如将 binlog 接入到 Hadoop、Elasticsearch 等系统中。"}]}]},{"ID":"20240201213545-rjzls97","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213545-rjzls97","updated":"20240201213545"},"Children":[{"ID":"20240201213546-pxz1znq","Type":"NodeParagraph","Properties":{"id":"20240201213546-pxz1znq","updated":"20240201213546"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"大事务"},{"Type":"NodeText","Data":"：运行时间比较长，长时间未提交的事务就可以称为大事务。由于大事务执行时间长，并且从库上的大事务会比主库上的大事务花费更多的时间和资源，因此非常容易造成主从延迟。解决办法是避免大批量修改数据，尽量分批进行。类似的情况还有执行时间较长的慢 SQL ，实际项目遇到慢 SQL 应该进行优化。"}]}]},{"ID":"20240201213547-zrwn3jt","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213547-zrwn3jt","updated":"20240201213547"},"Children":[{"ID":"20240201213548-yjmm21e","Type":"NodeParagraph","Properties":{"id":"20240201213548-yjmm21e","updated":"20240201213548"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从库太多"},{"Type":"NodeText","Data":"：主库需要将 binlog 同步到所有的从库，如果从库数量太多，会增加同步的时间和开销（也就是 T2-T1 的值会比较大，但这里是因为主库同步压力大导致的）。解决方案是减少从库的数量，或者将从库分为不同的层级，让上层的从库再同步给下层的从库，减少主库的压力。"}]}]},{"ID":"20240201213549-3m0e8wv","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213549-3m0e8wv","updated":"20240201213549"},"Children":[{"ID":"20240201213550-lo03qos","Type":"NodeParagraph","Properties":{"id":"20240201213550-lo03qos","updated":"20240201213550"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"网络延迟"},{"Type":"NodeText","Data":"：如果主从之间的网络传输速度慢，或者出现丢包、抖动等问题，那么就会影响 binlog 的传输效率，导致从库延迟。解决方法是优化网络环境，比如提升带宽、降低延迟、增加稳定性等。"}]}]},{"ID":"20240201213551-eox2ji4","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213551-eox2ji4","updated":"20240201213551"},"Children":[{"ID":"20240201213552-ai44pbg","Type":"NodeParagraph","Properties":{"id":"20240201213552-ai44pbg","updated":"20240201213552"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单线程复制"},{"Type":"NodeText","Data":"：MySQL5.5 及之前，只支持单线程复制。为了优化复制性能，MySQL 5.6 引入了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程复制"},{"Type":"NodeText","Data":"，MySQL 5.7 还进一步完善了多线程复制。"}]}]},{"ID":"20240201213553-8dk5voz","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213553-8dk5voz","updated":"20240201213553"},"Children":[{"ID":"20240201213554-xk69kcv","Type":"NodeParagraph","Properties":{"id":"20240201213554-xk69kcv","updated":"20240201213554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"复制模式"},{"Type":"NodeText","Data":"：MySQL 默认的复制是异步的，必然会存在延迟问题。全同步复制不存在延迟问题，但性能太差了。半同步复制是一种折中方案，相对于异步复制，半同步复制提高了数据的安全性，减少了主从延迟（还是有一定程度的延迟）。MySQL 5.5 开始，MySQL 以插件的形式支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"semi-sync 半同步复制"},{"Type":"NodeText","Data":"。并且，MySQL 5.7 引入了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增强半同步复制"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213555-35em266","Type":"NodeListItem","Data":"8","ListData":{"Typ":1,"Tight":true,"Start":8,"Delimiter":46,"Padding":3,"Marker":"OA==","Num":8},"Properties":{"id":"20240201213555-35em266","updated":"20240201213555"},"Children":[{"ID":"20240201213556-4xhda1n","Type":"NodeParagraph","Properties":{"id":"20240201213556-4xhda1n","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213557-fil0iqx","Type":"NodeParagraph","Properties":{"id":"20240201213557-fil0iqx","updated":"20240201213557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/column/intro/100020801?code=ieY8HeRSlDsFbuRtggbBQGxdTh-1jMASqEIeqzHAKrI%3D","TextMarkTextContent":"《MySQL 实战 45 讲》"},{"Type":"NodeText","Data":"这个专栏中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/column/article/77636","TextMarkTextContent":"读写分离有哪些坑？"},{"Type":"NodeText","Data":"这篇文章也有对主从延迟解决方案这一话题进行探讨，感兴趣的可以阅读学习一下。"}]},{"ID":"20240201213558-rmj8li0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213558-rmj8li0","updated":"20240201213558"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表"}]},{"ID":"20240201213559-k4dxm0i","Type":"NodeParagraph","Properties":{"id":"20240201213559-k4dxm0i","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"读写分离主要应对的是数据库读并发，没有解决数据库存储问题。试想一下："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果 MySQL 一张表的数据量过大怎么办?"}]},{"ID":"20240201213560-fy4sdbi","Type":"NodeParagraph","Properties":{"id":"20240201213560-fy4sdbi","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"换言之，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们该如何解决 MySQL 的存储压力呢？"}]},{"ID":"20240201213561-krr6fu8","Type":"NodeParagraph","Properties":{"id":"20240201213561-krr6fu8","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"答案之一就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分库分表"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213562-9xl4tca","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213562-9xl4tca","updated":"20240201213562"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是分库？"}]},{"ID":"20240201213563-v2y4bal","Type":"NodeParagraph","Properties":{"id":"20240201213563-v2y4bal","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分库"},{"Type":"NodeText","Data":" 就是将数据库中的数据分散到不同的数据库上，可以垂直分库，也可以水平分库。"}]},{"ID":"20240201213564-8muq53e","Type":"NodeParagraph","Properties":{"id":"20240201213564-8muq53e","updated":"20240201213564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"垂直分库"},{"Type":"NodeText","Data":" 就是把单一数据库按照业务进行划分，不同的业务使用不同的数据库，进而将一个数据库的压力分担到多个数据库。"}]},{"ID":"20240201213565-fp4dy85","Type":"NodeParagraph","Properties":{"id":"20240201213565-fp4dy85","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"举个例子：说你将数据库中的用户表、订单表和商品表分别单独拆分为用户数据库、订单数据库和商品数据库。"}]},{"ID":"20240201213566-2nfgj75","Type":"NodeParagraph","Properties":{"id":"20240201213566-2nfgj75","updated":"20240201213566"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"垂直分库","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/vertical-slicing-database-20240201213826-jzducms.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213567-erl0luj","Type":"NodeParagraph","Properties":{"id":"20240201213567-erl0luj","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"水平分库"},{"Type":"NodeText","Data":" 是把同一个表按一定规则拆分到不同的数据库中，每个库可以位于不同的服务器上，这样就实现了水平扩展，解决了单表的存储和性能瓶颈的问题。"}]},{"ID":"20240201213568-xxu7wzp","Type":"NodeParagraph","Properties":{"id":"20240201213568-xxu7wzp","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"举个例子：订单表数据量太大，你对订单表进行了水平切分（水平分表），然后将切分后的 2 张订单表分别放在两个不同的数据库。"}]},{"ID":"20240201213569-00xwgyc","Type":"NodeParagraph","Properties":{"id":"20240201213569-00xwgyc","updated":"20240201213569"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"水平分库","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/horizontal-slicing-database-20240201213826-ay3e0mz.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213570-8w3sf54","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213570-8w3sf54","updated":"20240201213570"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是分表？"}]},{"ID":"20240201213571-zy3ga43","Type":"NodeParagraph","Properties":{"id":"20240201213571-zy3ga43","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分表"},{"Type":"NodeText","Data":" 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。"}]},{"ID":"20240201213572-ekzl0rt","Type":"NodeParagraph","Properties":{"id":"20240201213572-ekzl0rt","updated":"20240201213572"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"垂直分表"},{"Type":"NodeText","Data":" 是对数据表列的拆分，把一张列比较多的表拆分为多张表。"}]},{"ID":"20240201213573-ds2gwkn","Type":"NodeParagraph","Properties":{"id":"20240201213573-ds2gwkn","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"举个例子：我们可以将用户信息表中的一些列单独抽出来作为一个表。"}]},{"ID":"20240201213574-20b68sb","Type":"NodeParagraph","Properties":{"id":"20240201213574-20b68sb","updated":"20240201213574"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"水平分表"},{"Type":"NodeText","Data":" 是对数据表行的拆分，把一张行比较多的表拆分为多张表，可以解决单一表数据量过大的问题。"}]},{"ID":"20240201213575-hb75e8y","Type":"NodeParagraph","Properties":{"id":"20240201213575-hb75e8y","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。"}]},{"ID":"20240201213576-0yniq7y","Type":"NodeParagraph","Properties":{"id":"20240201213576-0yniq7y","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"水平拆分只能解决单表数据量大的问题，为了提升性能，我们通常会选择将拆分后的多张表放在不同的数据库中。也就是说，水平分表通常和水平分库同时出现。"}]},{"ID":"20240201213577-2favw4f","Type":"NodeParagraph","Properties":{"id":"20240201213577-2favw4f","updated":"20240201213577"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"分表","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/two-forms-of-sub-table-20240201213826-iacfeew.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213578-ujjt2yf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213578-ujjt2yf","updated":"20240201213578"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么情况下需要分库分表？"}]},{"ID":"20240201213579-eg2kozu","Type":"NodeParagraph","Properties":{"id":"20240201213579-eg2kozu","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"遇到下面几种场景可以考虑分库分表："}]},{"ID":"20240201213580-affdv6f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-affdv6f","updated":"20240201213580"},"Children":[{"ID":"20240201213581-fbv9hu5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-fbv9hu5","updated":"20240201213581"},"Children":[{"ID":"20240201213582-2edcige","Type":"NodeParagraph","Properties":{"id":"20240201213582-2edcige","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"单表的数据达到千万级别以上，数据库读写速度比较缓慢。"}]}]},{"ID":"20240201213583-wejisia","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-wejisia","updated":"20240201213583"},"Children":[{"ID":"20240201213584-20fwamo","Type":"NodeParagraph","Properties":{"id":"20240201213584-20fwamo","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"数据库中的数据占用的空间越来越大，备份时间越来越长。"}]}]},{"ID":"20240201213585-9yn18of","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213585-9yn18of","updated":"20240201213585"},"Children":[{"ID":"20240201213586-cecjfw4","Type":"NodeParagraph","Properties":{"id":"20240201213586-cecjfw4","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"应用的并发量太大。"}]}]}]},{"ID":"20240201213587-j6oi4n1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213587-j6oi4n1","updated":"20240201213587"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的分片算法有哪些？"}]},{"ID":"20240201213588-npxmlwz","Type":"NodeParagraph","Properties":{"id":"20240201213588-npxmlwz","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"分片算法主要解决了数据被水平分片之后，数据究竟该存放在哪个表的问题。"}]},{"ID":"20240201213589-2syz1aw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213589-2syz1aw","updated":"20240201213589"},"Children":[{"ID":"20240201213590-ea3z7kl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213590-ea3z7kl","updated":"20240201213590"},"Children":[{"ID":"20240201213591-ybjzv8e","Type":"NodeParagraph","Properties":{"id":"20240201213591-ybjzv8e","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"哈希分片"},{"Type":"NodeText","Data":"：求指定 key（比如 id） 的哈希，然后根据哈希值确定数据应被放置在哪个表中。哈希分片比较适合随机读写的场景，不太适合经常需要范围查询的场景。"}]}]},{"ID":"20240201213592-cy21ee2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-cy21ee2","updated":"20240201213592"},"Children":[{"ID":"20240201213593-w084xz3","Type":"NodeParagraph","Properties":{"id":"20240201213593-w084xz3","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"范围分片"},{"Type":"NodeText","Data":"：按照特性的范围区间（比如时间区间、ID 区间）来分配数据，比如 将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"id"},{"Type":"NodeText","Data":" 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1~299999"},{"Type":"NodeText","Data":" 的记录分到第一个库， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"300000~599999"},{"Type":"NodeText","Data":" 的分到第二个库。范围分片适合需要经常进行范围查找的场景，不太适合随机读写的场景（数据未被分散，容易出现热点数据的问题）。"}]}]},{"ID":"20240201213594-sqqj3xx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213594-sqqj3xx","updated":"20240201213594"},"Children":[{"ID":"20240201213595-h31jori","Type":"NodeParagraph","Properties":{"id":"20240201213595-h31jori","updated":"20240201213595"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"地理位置分片"},{"Type":"NodeText","Data":"：很多 NewSQL 数据库都支持地理位置分片算法，也就是根据地理位置（如城市、地域）来分配数据。"}]}]},{"ID":"20240201213596-g311u3l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213596-g311u3l","updated":"20240201213596"},"Children":[{"ID":"20240201213597-xgvjjzr","Type":"NodeParagraph","Properties":{"id":"20240201213597-xgvjjzr","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"融合算法"},{"Type":"NodeText","Data":"：灵活组合多种分片算法，比如将哈希分片和范围分片组合。"}]}]},{"ID":"20240201213598-em0uir0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213598-em0uir0","updated":"20240201213598"},"Children":[{"ID":"20240201213599-y4yp70n","Type":"NodeParagraph","Properties":{"id":"20240201213599-y4yp70n","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213600-9bt4mp3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213600-9bt4mp3","updated":"20240201213600"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表会带来什么问题呢？"}]},{"ID":"20240201213601-8n7t3y2","Type":"NodeParagraph","Properties":{"id":"20240201213601-8n7t3y2","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"记住，你在公司做的任何技术决策，不光是要考虑这个技术能不能满足我们的要求，是否适合当前业务场景，还要重点考虑其带来的成本。"}]},{"ID":"20240201213602-8z8npip","Type":"NodeParagraph","Properties":{"id":"20240201213602-8z8npip","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"引入分库分表之后，会给系统带来什么挑战呢？"}]},{"ID":"20240201213603-sh6q7rn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213603-sh6q7rn","updated":"20240201213603"},"Children":[{"ID":"20240201213604-4rg1l23","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213604-4rg1l23","updated":"20240201213604"},"Children":[{"ID":"20240201213605-wvtwpcq","Type":"NodeParagraph","Properties":{"id":"20240201213605-wvtwpcq","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"join 操作"},{"Type":"NodeText","Data":"：同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。不过，很多大厂的资深 DBA 都是建议尽量不要使用 join 操作。因为 join 的效率低，并且会对分库分表造成影响。对于需要用到 join 操作的地方，可以采用多次查询业务层进行数据组装的方法。不过，这种方法需要考虑业务上多次查询的事务性的容忍度。"}]}]},{"ID":"20240201213606-m2d5l33","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213606-m2d5l33","updated":"20240201213606"},"Children":[{"ID":"20240201213607-xk658yn","Type":"NodeParagraph","Properties":{"id":"20240201213607-xk658yn","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务问题"},{"Type":"NodeText","Data":"：同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。这个时候，我们就需要引入分布式事务了。关于分布式事务常见解决方案总结，网站上也有对应的总结："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/distributed-transaction.html","TextMarkTextContent":"https://javaguide.cn/distributed-system/distributed-transaction.html"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213608-5rjkx2g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-5rjkx2g","updated":"20240201213608"},"Children":[{"ID":"20240201213609-hsfqwr4","Type":"NodeParagraph","Properties":{"id":"20240201213609-hsfqwr4","updated":"20240201213609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式 ID"},{"Type":"NodeText","Data":"：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。我们如何为不同的数据节点生成全局唯一主键呢？这个时候，我们就需要为我们的系统引入分布式 ID 了。关于分布式 ID 的详细介绍\u0026实现方案总结，网站上也有对应的总结："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/distributed-id.html","TextMarkTextContent":"https://javaguide.cn/distributed-system/distributed-id.html"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213610-bex7ik4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-bex7ik4","updated":"20240201213610"},"Children":[{"ID":"20240201213611-y12i3ag","Type":"NodeParagraph","Properties":{"id":"20240201213611-y12i3ag","updated":"20240201213611"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"跨库聚合查询问题"},{"Type":"NodeText","Data":"：分库分表会导致常规聚合查询操作，如 group by，order by 等变得异常复杂。这是因为这些操作需要在多个分片上进行数据汇总和排序，而不是在单个数据库上进行。为了实现这些操作，需要编写复杂的业务代码，或者使用中间件来协调分片间的通信和数据传输。这样会增加开发和维护的成本，以及影响查询的性能和可扩展性。"}]}]},{"ID":"20240201213612-wedw8dl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213612-wedw8dl","updated":"20240201213612"},"Children":[{"ID":"20240201213613-vaadvju","Type":"NodeParagraph","Properties":{"id":"20240201213613-vaadvju","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213614-46ggt7x","Type":"NodeParagraph","Properties":{"id":"20240201213614-46ggt7x","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"另外，引入分库分表之后，一般需要 DBA 的参与，同时还需要更多的数据库服务器，这些都属于成本。"}]},{"ID":"20240201213615-1i34wls","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213615-1i34wls","updated":"20240201213615"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表有没有什么比较推荐的方案？"}]},{"ID":"20240201213616-wnhnfu0","Type":"NodeParagraph","Properties":{"id":"20240201213616-wnhnfu0","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"Apache ShardingSphere 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强。"}]},{"ID":"20240201213617-xbkw2og","Type":"NodeParagraph","Properties":{"id":"20240201213617-xbkw2og","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 项目（包括 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar）是当当捐入 Apache 的，目前主要由京东数科的一些巨佬维护。"}]},{"ID":"20240201213618-wgq8fk4","Type":"NodeParagraph","Properties":{"id":"20240201213618-wgq8fk4","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 绝对可以说是当前分库分表的首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理、影子库、数据加密和脱敏等功能。"}]},{"ID":"20240201213619-uzrnttd","Type":"NodeParagraph","Properties":{"id":"20240201213619-uzrnttd","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 提供的功能如下："}]},{"ID":"20240201213620-c2hmylo","Type":"NodeParagraph","Properties":{"id":"20240201213620-c2hmylo","updated":"20240201213620"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ShardingSphere 提供的功能","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/shardingsphere-features.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213621-fxs8m4l","Type":"NodeParagraph","Properties":{"id":"20240201213621-fxs8m4l","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 的优势如下（摘自 ShardingSphere 官方文档："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://shardingsphere.apache.org/document/current/cn/overview/","TextMarkTextContent":"https://shardingsphere.apache.org/document/current/cn/overview/"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213622-oybc4aj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-oybc4aj","updated":"20240201213622"},"Children":[{"ID":"20240201213623-3rrvgq0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213623-3rrvgq0","updated":"20240201213623"},"Children":[{"ID":"20240201213624-cl53lgb","Type":"NodeParagraph","Properties":{"id":"20240201213624-cl53lgb","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"极致性能：驱动程序端历经长年打磨，效率接近原生 JDBC，性能极致。"}]}]},{"ID":"20240201213625-mreqptk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-mreqptk","updated":"20240201213625"},"Children":[{"ID":"20240201213626-4vrcbyk","Type":"NodeParagraph","Properties":{"id":"20240201213626-4vrcbyk","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"生态兼容：代理端支持任何通过 MySQL/PostgreSQL 协议的应用访问，驱动程序端可对接任意实现 JDBC 规范的数据库。"}]}]},{"ID":"20240201213627-wj9cgaw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-wj9cgaw","updated":"20240201213627"},"Children":[{"ID":"20240201213628-2r970jm","Type":"NodeParagraph","Properties":{"id":"20240201213628-2r970jm","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"业务零侵入：面对数据库替换场景，ShardingSphere 可满足业务无需改造，实现平滑业务迁移。"}]}]},{"ID":"20240201213629-1dj2j6i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-1dj2j6i","updated":"20240201213629"},"Children":[{"ID":"20240201213630-33v96rp","Type":"NodeParagraph","Properties":{"id":"20240201213630-33v96rp","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"运维低成本：在保留原技术栈不变前提下，对 DBA 学习、管理成本低，交互友好。"}]}]},{"ID":"20240201213631-zro2twr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-zro2twr","updated":"20240201213631"},"Children":[{"ID":"20240201213632-1s64auq","Type":"NodeParagraph","Properties":{"id":"20240201213632-1s64auq","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"安全稳定：基于成熟数据库底座之上提供增量能力，兼顾安全性及稳定性。"}]}]},{"ID":"20240201213633-xyfwjme","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213633-xyfwjme","updated":"20240201213633"},"Children":[{"ID":"20240201213634-4gu87f8","Type":"NodeParagraph","Properties":{"id":"20240201213634-4gu87f8","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"弹性扩展：具备计算、存储平滑在线扩展能力，可满足业务多变的需求。"}]}]},{"ID":"20240201213635-8g9sfdx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-8g9sfdx","updated":"20240201213635"},"Children":[{"ID":"20240201213636-3la5lq6","Type":"NodeParagraph","Properties":{"id":"20240201213636-3la5lq6","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"开放生态：通过多层次（内核、功能、生态）插件化能力，为用户提供可定制满足自身特殊需求的独有系统。"}]}]}]},{"ID":"20240201213637-kgx8gcf","Type":"NodeParagraph","Properties":{"id":"20240201213637-kgx8gcf","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。"}]},{"ID":"20240201213638-lcne1hw","Type":"NodeParagraph","Properties":{"id":"20240201213638-lcne1hw","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"不过，还是要多提一句："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"现在很多公司都是用的类似于 TiDB 这种分布式关系型数据库，不需要我们手动进行分库分表（数据库层面已经帮我们做了），也不需要解决手动分库分表引入的各种问题，直接一步到位，内置很多实用的功能（如无感扩容和缩容、冷热存储分离）！如果公司条件允许的话，个人也是比较推荐这种方式！"}]},{"ID":"20240201213639-j5plt4n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213639-j5plt4n","updated":"20240201213639"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表后，数据怎么迁移呢？"}]},{"ID":"20240201213640-zjsosmc","Type":"NodeParagraph","Properties":{"id":"20240201213640-zjsosmc","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"分库分表之后，我们如何将老库（单库单表）的数据迁移到新库（分库分表后的数据库系统）呢？"}]},{"ID":"20240201213641-4fiqqc1","Type":"NodeParagraph","Properties":{"id":"20240201213641-4fiqqc1","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"比较简单同时也是非常常用的方案就是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"停机迁移"},{"Type":"NodeText","Data":"，写个脚本老库的数据写到新库中。比如你在凌晨 2 点，系统使用的人数非常少的时候，挂一个公告说系统要维护升级预计 1 小时。然后，你写一个脚本将老库的数据都同步到新库中。"}]},{"ID":"20240201213642-c9f34ma","Type":"NodeParagraph","Properties":{"id":"20240201213642-c9f34ma","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"如果你不想停机迁移数据的话，也可以考虑"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"双写方案"},{"Type":"NodeText","Data":"。双写方案是针对那种不能停机迁移的场景，实现起来要稍微麻烦一些。具体原理是这样的："}]},{"ID":"20240201213643-bvgsenb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-bvgsenb","updated":"20240201213643"},"Children":[{"ID":"20240201213644-72htd9i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213644-72htd9i","updated":"20240201213644"},"Children":[{"ID":"20240201213645-b15trdx","Type":"NodeParagraph","Properties":{"id":"20240201213645-b15trdx","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"我们对老库的更新操作（增删改），同时也要写入新库（双写）。如果操作的数据不存在于新库的话，需要插入到新库中。 这样就能保证，咱们新库里的数据是最新的。"}]}]},{"ID":"20240201213646-gnybhks","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-gnybhks","updated":"20240201213646"},"Children":[{"ID":"20240201213647-0a32lsd","Type":"NodeParagraph","Properties":{"id":"20240201213647-0a32lsd","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"在迁移过程，双写只会让被更新操作过的老库中的数据同步到新库，我们还需要自己写脚本将老库中的数据和新库的数据做比对。如果新库中没有，那咱们就把数据插入到新库。如果新库有，旧库没有，就把新库对应的数据删除（冗余数据清理）。"}]}]},{"ID":"20240201213648-z5lbbr7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-z5lbbr7","updated":"20240201213648"},"Children":[{"ID":"20240201213649-m9xpimc","Type":"NodeParagraph","Properties":{"id":"20240201213649-m9xpimc","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"重复上一步的操作，直到老库和新库的数据一致为止。"}]}]}]},{"ID":"20240201213650-3c4iups","Type":"NodeParagraph","Properties":{"id":"20240201213650-3c4iups","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"想要在项目中实施双写还是比较麻烦的，很容易会出现问题。我们可以借助上面提到的数据库同步工具 Canal 做增量数据迁移（还是依赖 binlog，开发和维护成本较低）。"}]},{"ID":"20240201213651-hup5ci1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213651-hup5ci1","updated":"20240201213651"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213652-qdfbrc7","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-qdfbrc7","updated":"20240201213652"},"Children":[{"ID":"20240201213653-pcqdorf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-pcqdorf","updated":"20240201213653"},"Children":[{"ID":"20240201213654-c8ep69w","Type":"NodeParagraph","Properties":{"id":"20240201213654-c8ep69w","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。"}]}]},{"ID":"20240201213655-hk4du1q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-hk4du1q","updated":"20240201213655"},"Children":[{"ID":"20240201213656-ly6l53j","Type":"NodeParagraph","Properties":{"id":"20240201213656-ly6l53j","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"读写分离基于主从复制，MySQL 主从复制是依赖于 binlog 。"}]}]},{"ID":"20240201213657-6zw4999","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213657-6zw4999","updated":"20240201213657"},"Children":[{"ID":"20240201213658-468inyo","Type":"NodeParagraph","Properties":{"id":"20240201213658-468inyo","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分库"},{"Type":"NodeText","Data":" 就是将数据库中的数据分散到不同的数据库上。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分表"},{"Type":"NodeText","Data":" 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。"}]}]},{"ID":"20240201213659-ido3x5m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-ido3x5m","updated":"20240201213659"},"Children":[{"ID":"20240201213660-7jej0ds","Type":"NodeParagraph","Properties":{"id":"20240201213660-7jej0ds","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"引入分库分表之后，需要系统解决事务、分布式 id、无法 join 操作问题。"}]}]},{"ID":"20240201213661-paqv5y1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-paqv5y1","updated":"20240201213661"},"Children":[{"ID":"20240201213662-g3ba4h5","Type":"NodeParagraph","Properties":{"id":"20240201213662-g3ba4h5","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"现在很多公司都是用的类似于 TiDB 这种分布式关系型数据库，不需要我们手动进行分库分表（数据库层面已经帮我们做了），也不需要解决手动分库分表引入的各种问题，直接一步到位，内置很多实用的功能（如无感扩容和缩容、冷热存储分离）！如果公司条件允许的话，个人也是比较推荐这种方式！"}]}]},{"ID":"20240201213663-5a20q8g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-5a20q8g","updated":"20240201213663"},"Children":[{"ID":"20240201213664-nd10ue9","Type":"NodeParagraph","Properties":{"id":"20240201213664-nd10ue9","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"如果必须要手动分库分表的话，ShardingSphere 是首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。"}]}]}]},{"ID":"20240201213665-dfz0xi6","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-dfz0xi6","updated":"20240201213665"}}]}