{"ID":"20240201213453-1f2o4rc","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213453-1f2o4rc","title":"rabbitmq-questions","updated":"20240201213453"},"Children":[{"ID":"20240201213454-bmxhiqn","Type":"NodeThematicBreak","Properties":{"id":"20240201213454-bmxhiqn","updated":"20240201213454"}},{"ID":"20240201213455-9i7kdk6","Type":"NodeParagraph","Properties":{"id":"20240201213455-9i7kdk6","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"title: RabbitMQ常见问题总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高性能"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213456-l97yo3l","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213456-l97yo3l","updated":"20240201213456"},"Children":[{"ID":"20240201213457-cu94cuo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213457-cu94cuo","updated":"20240201213457"},"Children":[{"ID":"20240201213458-bppxefy","Type":"NodeParagraph","Properties":{"id":"20240201213458-bppxefy","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"消息队列"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213459-2go55ei","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213459-2go55ei","updated":"20240201213459"},"Children":[{"ID":"20240201213460-csfojo1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-csfojo1","updated":"20240201213460"},"Children":[{"ID":"20240201213461-g5d7zja","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213461-g5d7zja","updated":"20240201213461"},"Children":[{"ID":"20240201213462-vw5lqwh","Type":"NodeParagraph","Properties":{"id":"20240201213462-vw5lqwh","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213463-t3lgqjl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-t3lgqjl","updated":"20240201213463"},"Children":[{"ID":"20240201213464-y0q7y9o","Type":"NodeParagraph","Properties":{"id":"20240201213464-y0q7y9o","updated":"20240201213464"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: RabbitMQ,AMQP,Broker,Exchange,优先级队列,延迟队列"}]}]}]}]},{"ID":"20240201213465-tzilita","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-tzilita","updated":"20240201213465"},"Children":[{"ID":"20240201213466-cvmy9x3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213466-cvmy9x3","updated":"20240201213466"},"Children":[{"ID":"20240201213467-pkuapyh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213467-pkuapyh","updated":"20240201213467"},"Children":[{"ID":"20240201213468-dwaa1k2","Type":"NodeParagraph","Properties":{"id":"20240201213468-dwaa1k2","updated":"20240201213468"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213469-ddhme0h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-ddhme0h","updated":"20240201213469"},"Children":[{"ID":"20240201213470-hq91mrd","Type":"NodeParagraph","Properties":{"id":"20240201213470-hq91mrd","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: RabbitMQ 是一个在 AMQP（Advanced Message Queuing Protocol ）基础上实现的，可复用的企业消息系统。它可以用于大型软件系统各个模块之间的高效通信，支持高并发，支持可扩展。它支持多种客户端如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX，持久化，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。"}]}]}]}]}]},{"ID":"20240201213471-cx8h6bs","Type":"NodeThematicBreak","Properties":{"id":"20240201213471-cx8h6bs","updated":"20240201213471"}},{"ID":"20240201213472-kc4zcjn","Type":"NodeBlockquote","Properties":{"id":"20240201213472-kc4zcjn","updated":"20240201213472"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213473-oxwfch1","Type":"NodeParagraph","Properties":{"id":"20240201213473-oxwfch1","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"本篇文章由 JavaGuide 收集自网络，原出处不明。"}]}]},{"ID":"20240201213474-6mmor5o","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213474-6mmor5o","updated":"20240201213474"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RabbitMQ 是什么？"}]},{"ID":"20240201213475-1mszli7","Type":"NodeParagraph","Properties":{"id":"20240201213475-1mszli7","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 是一个在 AMQP（Advanced Message Queuing Protocol ）基础上实现的，可复用的企业消息系统。它可以用于大型软件系统各个模块之间的高效通信，支持高并发，支持可扩展。它支持多种客户端如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX，持久化，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。"}]},{"ID":"20240201213476-gnleen6","Type":"NodeParagraph","Properties":{"id":"20240201213476-gnleen6","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 是使用 Erlang 编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。它同时实现了一个 Broker 构架，这意味着消息在发送给客户端时先在中心队列排队，对路由(Routing)、负载均衡(Load balance)或者数据持久化都有很好的支持。"}]},{"ID":"20240201213477-ku054yy","Type":"NodeParagraph","Properties":{"id":"20240201213477-ku054yy","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"PS:也可能直接问什么是消息队列？消息队列就是一个使用队列来通信的组件。"}]},{"ID":"20240201213478-qrew6fr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213478-qrew6fr","updated":"20240201213478"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RabbitMQ 特点?"}]},{"ID":"20240201213479-x92eb1c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213479-x92eb1c","updated":"20240201213479"},"Children":[{"ID":"20240201213480-frsciy3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213480-frsciy3","updated":"20240201213480"},"Children":[{"ID":"20240201213481-oaxn3bi","Type":"NodeParagraph","Properties":{"id":"20240201213481-oaxn3bi","updated":"20240201213481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可靠性"},{"Type":"NodeText","Data":": RabbitMQ 使用一些机制来保证可靠性， 如持久化、传输确认及发布确认等。"}]}]},{"ID":"20240201213482-bqwyi2o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213482-bqwyi2o","updated":"20240201213482"},"Children":[{"ID":"20240201213483-i9uvetn","Type":"NodeParagraph","Properties":{"id":"20240201213483-i9uvetn","updated":"20240201213483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"灵活的路由"},{"Type":"NodeText","Data":" : 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能， RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起， 也可以通过插件机制来实现自己的交换器。"}]}]},{"ID":"20240201213484-59tcay1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213484-59tcay1","updated":"20240201213484"},"Children":[{"ID":"20240201213485-pu4mfuh","Type":"NodeParagraph","Properties":{"id":"20240201213485-pu4mfuh","updated":"20240201213485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"扩展性"},{"Type":"NodeText","Data":": 多个 RabbitMQ 节点可以组成一个集群，也可以根据实际业务情况动态地扩展 集群中节点。"}]}]},{"ID":"20240201213486-vj6ueiw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213486-vj6ueiw","updated":"20240201213486"},"Children":[{"ID":"20240201213487-0e8p0o6","Type":"NodeParagraph","Properties":{"id":"20240201213487-0e8p0o6","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高可用性"},{"Type":"NodeText","Data":" : 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队 列仍然可用。"}]}]},{"ID":"20240201213488-c9dtd83","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213488-c9dtd83","updated":"20240201213488"},"Children":[{"ID":"20240201213489-fytbycd","Type":"NodeParagraph","Properties":{"id":"20240201213489-fytbycd","updated":"20240201213489"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多种协议"},{"Type":"NodeText","Data":": RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP， MQTT 等多种消息 中间件协议。"}]}]},{"ID":"20240201213490-r8i2n5i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213490-r8i2n5i","updated":"20240201213490"},"Children":[{"ID":"20240201213491-9aw789s","Type":"NodeParagraph","Properties":{"id":"20240201213491-9aw789s","updated":"20240201213491"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多语言客户端"},{"Type":"NodeText","Data":" :RabbitMQ 几乎支持所有常用语言，比如 Java、 Python、 Ruby、 PHP、 C#、 JavaScript 等。"}]}]},{"ID":"20240201213492-i8flv19","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213492-i8flv19","updated":"20240201213492"},"Children":[{"ID":"20240201213493-kjr56ow","Type":"NodeParagraph","Properties":{"id":"20240201213493-kjr56ow","updated":"20240201213493"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"管理界面"},{"Type":"NodeText","Data":" : RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息、集 群中的节点等。"}]}]},{"ID":"20240201213494-eqbw2hi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213494-eqbw2hi","updated":"20240201213494"},"Children":[{"ID":"20240201213495-7ozpaob","Type":"NodeParagraph","Properties":{"id":"20240201213495-7ozpaob","updated":"20240201213495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"插件机制"},{"Type":"NodeText","Data":" : RabbitMQ 提供了许多插件 ， 以实现从多方面进行扩展，当然也可以编写自 己的插件。"}]}]}]},{"ID":"20240201213496-7j6597x","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213496-7j6597x","updated":"20240201213496"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RabbitMQ 核心概念？"}]},{"ID":"20240201213497-71fak6t","Type":"NodeParagraph","Properties":{"id":"20240201213497-71fak6t","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，RabbitMQ 就好比由邮局、邮箱和邮递员组成的一个系统。从计算机术语层面来说，RabbitMQ 模型更像是一种交换机模型。"}]},{"ID":"20240201213498-mput3tj","Type":"NodeParagraph","Properties":{"id":"20240201213498-mput3tj","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 的整体模型架构如下："}]},{"ID":"20240201213499-x5emhvq","Type":"NodeParagraph","Properties":{"id":"20240201213499-x5emhvq","updated":"20240201213499"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图1-RabbitMQ 的整体模型架构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/rabbitmq/96388546.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213500-7jeb1f5","Type":"NodeParagraph","Properties":{"id":"20240201213500-7jeb1f5","updated":"20240201213500"},"Children":[{"Type":"NodeText","Data":"下面我会一一介绍上图中的一些概念。"}]},{"ID":"20240201213501-27nlxkz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213501-27nlxkz","updated":"20240201213501"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Producer(生产者) 和 Consumer(消费者)"}]},{"ID":"20240201213502-p7et6g1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-p7et6g1","updated":"20240201213502"},"Children":[{"ID":"20240201213503-j1fjybl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213503-j1fjybl","updated":"20240201213503"},"Children":[{"ID":"20240201213504-1ksi57r","Type":"NodeParagraph","Properties":{"id":"20240201213504-1ksi57r","updated":"20240201213504"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Producer(生产者)"},{"Type":"NodeText","Data":" :生产消息的一方（邮件投递者）"}]}]},{"ID":"20240201213505-y6av032","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213505-y6av032","updated":"20240201213505"},"Children":[{"ID":"20240201213506-mrqet3n","Type":"NodeParagraph","Properties":{"id":"20240201213506-mrqet3n","updated":"20240201213506"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Consumer(消费者)"},{"Type":"NodeText","Data":" :消费消息的一方（邮件收件人）"}]}]}]},{"ID":"20240201213507-vwo3agp","Type":"NodeParagraph","Properties":{"id":"20240201213507-vwo3agp","updated":"20240201213507"},"Children":[{"Type":"NodeText","Data":"消息一般由 2 部分组成："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息头"},{"Type":"NodeText","Data":"（或者说是标签 Label）和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息体"},{"Type":"NodeText","Data":"。消息体也可以称为 payLoad ,消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括 routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。生产者把消息交由 RabbitMQ 后，RabbitMQ 会根据消息头把消息发送给感兴趣的 Consumer(消费者)。"}]},{"ID":"20240201213508-rm9kevz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213508-rm9kevz","updated":"20240201213508"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Exchange(交换器)"}]},{"ID":"20240201213509-k3ozavj","Type":"NodeParagraph","Properties":{"id":"20240201213509-k3ozavj","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"在 RabbitMQ 中，消息并不是直接被投递到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Queue(消息队列)"},{"Type":"NodeText","Data":" 中的，中间还必须经过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange(交换器)"},{"Type":"NodeText","Data":" 这一层，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange(交换器)"},{"Type":"NodeText","Data":" 会把我们的消息分配到对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Queue(消息队列)"},{"Type":"NodeText","Data":" 中。"}]},{"ID":"20240201213510-68nnaj4","Type":"NodeParagraph","Properties":{"id":"20240201213510-68nnaj4","updated":"20240201213510"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange(交换器)"},{"Type":"NodeText","Data":" 用来接收生产者发送的消息并将这些消息路由给服务器中的队列中，如果路由不到，或许会返回给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Producer(生产者)"},{"Type":"NodeText","Data":" ，或许会被直接丢弃掉 。这里可以将 RabbitMQ 中的交换器看作一个简单的实体。"}]},{"ID":"20240201213511-ggrcoez","Type":"NodeParagraph","Properties":{"id":"20240201213511-ggrcoez","updated":"20240201213511"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RabbitMQ 的 Exchange(交换器) 有 4 种类型，不同的类型对应着不同的路由策略"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"direct(默认)"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"fanout"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"topic"},{"Type":"NodeText","Data":", 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"headers"},{"Type":"NodeText","Data":"，不同类型的 Exchange 转发消息的策略有所区别。这个会在介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange Types(交换器类型)"},{"Type":"NodeText","Data":" 的时候介绍到。"}]},{"ID":"20240201213512-c404cou","Type":"NodeParagraph","Properties":{"id":"20240201213512-c404cou","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"Exchange(交换器) 示意图如下："}]},{"ID":"20240201213513-0xwik0c","Type":"NodeParagraph","Properties":{"id":"20240201213513-0xwik0c","updated":"20240201213513"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Exchange(交换器) 示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/rabbitmq/24007899.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213514-l8c7lvm","Type":"NodeParagraph","Properties":{"id":"20240201213514-l8c7lvm","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"生产者将消息发给交换器的时候，一般会指定一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RoutingKey(路由键)"},{"Type":"NodeText","Data":"，用来指定这个消息的路由规则，而这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RoutingKey 需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213515-vcz3kci","Type":"NodeParagraph","Properties":{"id":"20240201213515-vcz3kci","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 中通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Binding(绑定)"},{"Type":"NodeText","Data":" 将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange(交换器)"},{"Type":"NodeText","Data":" 与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Queue(消息队列)"},{"Type":"NodeText","Data":" 关联起来，在绑定的时候一般会指定一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"BindingKey(绑定建)"},{"Type":"NodeText","Data":" ,这样 RabbitMQ 就知道如何正确将消息路由到队列了,如下图所示。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。Exchange 和 Queue 的绑定可以是多对多的关系。"}]},{"ID":"20240201213516-vsbek7w","Type":"NodeParagraph","Properties":{"id":"20240201213516-vsbek7w","updated":"20240201213516"},"Children":[{"Type":"NodeText","Data":"Binding(绑定) 示意图："}]},{"ID":"20240201213517-txhi8f6","Type":"NodeParagraph","Properties":{"id":"20240201213517-txhi8f6","updated":"20240201213517"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Binding(绑定) 示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/rabbitmq/70553134.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213518-51num0l","Type":"NodeParagraph","Properties":{"id":"20240201213518-51num0l","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"生产者将消息发送给交换器时，需要一个 RoutingKey,当 BindingKey 和 RoutingKey 相匹配时，消息会被路由到对应的队列中。在绑定多个队列到同一个交换器的时候，这些绑定允许使用相同的 BindingKey。BindingKey 并不是在所有的情况下都生效，它依赖于交换器类型，比如 fanout 类型的交换器就会无视，而是将消息路由到所有绑定到该交换器的队列中。"}]},{"ID":"20240201213519-rtezjyk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213519-rtezjyk","updated":"20240201213519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Queue(消息队列)"}]},{"ID":"20240201213520-c0k4tkv","Type":"NodeParagraph","Properties":{"id":"20240201213520-c0k4tkv","updated":"20240201213520"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Queue(消息队列)"},{"Type":"NodeText","Data":" 用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。"}]},{"ID":"20240201213521-05xjl20","Type":"NodeParagraph","Properties":{"id":"20240201213521-05xjl20","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RabbitMQ"},{"Type":"NodeText","Data":" 中消息只能存储在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列"},{"Type":"NodeText","Data":" 中，这一点和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 这种消息中间件相反。Kafka 将消息存储在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"topic（主题）"},{"Type":"NodeText","Data":" 这个逻辑层面，而相对应的队列逻辑只是 topic 实际存储文件中的位移标识。 RabbitMQ 的生产者生产消息并最终投递到队列中，消费者可以从队列中获取消息并消费。"}]},{"ID":"20240201213522-cxx2ebs","Type":"NodeParagraph","Properties":{"id":"20240201213522-cxx2ebs","updated":"20240201213522"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多个消费者可以订阅同一个队列"},{"Type":"NodeText","Data":"，这时队列中的消息会被平均分摊（Round-Robin，即轮询）给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理，这样避免消息被重复消费。"}]},{"ID":"20240201213523-inn0bd0","Type":"NodeParagraph","Properties":{"id":"20240201213523-inn0bd0","updated":"20240201213523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RabbitMQ"},{"Type":"NodeText","Data":" 不支持队列层面的广播消费,如果有广播消费的需求，需要在其上进行二次开发,这样会很麻烦，不建议这样做。"}]},{"ID":"20240201213524-nl8ee9z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213524-nl8ee9z","updated":"20240201213524"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Broker（消息中间件的服务节点）"}]},{"ID":"20240201213525-0sj2y1w","Type":"NodeParagraph","Properties":{"id":"20240201213525-0sj2y1w","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"对于 RabbitMQ 来说，一个 RabbitMQ Broker 可以简单地看作一个 RabbitMQ 服务节点，或者 RabbitMQ 服务实例。大多数情况下也可以将一个 RabbitMQ Broker 看作一台 RabbitMQ 服务器。"}]},{"ID":"20240201213526-lkvmlgl","Type":"NodeParagraph","Properties":{"id":"20240201213526-lkvmlgl","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"下图展示了生产者将消息存入 RabbitMQ Broker,以及消费者从 Broker 中消费数据的整个流程。"}]},{"ID":"20240201213527-39is0bi","Type":"NodeParagraph","Properties":{"id":"20240201213527-39is0bi","updated":"20240201213527"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"消息队列的运转过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/rabbitmq/67952922.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213528-ecmlwde","Type":"NodeParagraph","Properties":{"id":"20240201213528-ecmlwde","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"这样图 1 中的一些关于 RabbitMQ 的基本概念我们就介绍完毕了，下面再来介绍一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange Types(交换器类型)"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213529-vy8zi2e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213529-vy8zi2e","updated":"20240201213529"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Exchange Types(交换器类型)"}]},{"ID":"20240201213530-si8z4c9","Type":"NodeParagraph","Properties":{"id":"20240201213530-si8z4c9","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 常用的 Exchange Type 有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"fanout"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"direct"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"topic"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"headers"},{"Type":"NodeText","Data":" 这四种（AMQP 规范里还提到两种 Exchange Type，分别为 system 与 自定义，这里不予以描述）。"}]},{"ID":"20240201213531-hili568","Type":"NodeParagraph","Properties":{"id":"20240201213531-hili568","updated":"20240201213531"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、fanout"}]},{"ID":"20240201213532-aet7bo2","Type":"NodeParagraph","Properties":{"id":"20240201213532-aet7bo2","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"fanout 类型的 Exchange 路由规则非常简单，它会把所有发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中，不需要做任何判断操作，所以 fanout 类型是所有的交换机类型里面速度最快的。fanout 类型常用来广播消息。"}]},{"ID":"20240201213533-zyskccf","Type":"NodeParagraph","Properties":{"id":"20240201213533-zyskccf","updated":"20240201213533"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、direct"}]},{"ID":"20240201213534-hg3k576","Type":"NodeParagraph","Properties":{"id":"20240201213534-hg3k576","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"direct 类型的 Exchange 路由规则也很简单，它会把消息路由到那些 Bindingkey 与 RoutingKey 完全匹配的 Queue 中。"}]},{"ID":"20240201213535-hz13hvc","Type":"NodeParagraph","Properties":{"id":"20240201213535-hz13hvc","updated":"20240201213535"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"direct 类型交换器","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/rabbitmq/37008021.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213536-4xpx658","Type":"NodeParagraph","Properties":{"id":"20240201213536-4xpx658","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"以上图为例，如果发送消息的时候设置路由键为“warning”,那么消息会路由到 Queue1 和 Queue2。如果在发送消息的时候设置路由键为\"Info”或者\"debug”，消息只会路由到 Queue2。如果以其他的路由键发送消息，则消息不会路由到这两个队列中。"}]},{"ID":"20240201213537-x81xfjh","Type":"NodeParagraph","Properties":{"id":"20240201213537-x81xfjh","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"direct 类型常用在处理有优先级的任务，根据任务的优先级把消息发送到对应的队列，这样可以指派更多的资源去处理高优先级的队列。"}]},{"ID":"20240201213538-piavxmg","Type":"NodeParagraph","Properties":{"id":"20240201213538-piavxmg","updated":"20240201213538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3、topic"}]},{"ID":"20240201213539-r3m6tnr","Type":"NodeParagraph","Properties":{"id":"20240201213539-r3m6tnr","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"前面讲到 direct 类型的交换器路由规则是完全匹配 BindingKey 和 RoutingKey ，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic 类型的交换器在匹配规则上进行了扩展，它与 direct 类型的交换器相似，也是将消息路由到 BindingKey 和 RoutingKey 相匹配的队列中，但这里的匹配规则有些不同，它约定："}]},{"ID":"20240201213540-vlii0mr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-vlii0mr","updated":"20240201213540"},"Children":[{"ID":"20240201213541-de39kwa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-de39kwa","updated":"20240201213541"},"Children":[{"ID":"20240201213542-xsy9un1","Type":"NodeParagraph","Properties":{"id":"20240201213542-xsy9un1","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"RoutingKey 为一个点号“．”分隔的字符串（被点号“．”分隔开的每一段独立的字符串称为一个单词），如 “com.rabbitmq.client”、“java.util.concurrent”、“com.hidden.client”;"}]}]},{"ID":"20240201213543-fonsxqc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213543-fonsxqc","updated":"20240201213543"},"Children":[{"ID":"20240201213544-dgsgv4y","Type":"NodeParagraph","Properties":{"id":"20240201213544-dgsgv4y","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"BindingKey 和 RoutingKey 一样也是点号“．”分隔的字符串；"}]}]},{"ID":"20240201213545-1evjyc9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213545-1evjyc9","updated":"20240201213545"},"Children":[{"ID":"20240201213546-p707iio","Type":"NodeParagraph","Properties":{"id":"20240201213546-p707iio","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"BindingKey 中可以存在两种特殊字符串“"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":"”和“#”，用于做模糊匹配，其中“"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":"”用于匹配一个单词，“#”用于匹配多个单词(可以是零个)。"}]}]}]},{"ID":"20240201213547-cgzzl2v","Type":"NodeParagraph","Properties":{"id":"20240201213547-cgzzl2v","updated":"20240201213547"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"topic 类型交换器","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/rabbitmq/73843.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213548-nhtpqw6","Type":"NodeParagraph","Properties":{"id":"20240201213548-nhtpqw6","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"以上图为例："}]},{"ID":"20240201213549-1j3pxjx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-1j3pxjx","updated":"20240201213549"},"Children":[{"ID":"20240201213550-8n81z35","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213550-8n81z35","updated":"20240201213550"},"Children":[{"ID":"20240201213551-92okqo0","Type":"NodeParagraph","Properties":{"id":"20240201213551-92okqo0","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"路由键为 “com.rabbitmq.client” 的消息会同时路由到 Queue1 和 Queue2;"}]}]},{"ID":"20240201213552-pp5hkiy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-pp5hkiy","updated":"20240201213552"},"Children":[{"ID":"20240201213553-ecsvuqw","Type":"NodeParagraph","Properties":{"id":"20240201213553-ecsvuqw","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"路由键为 “com.hidden.client” 的消息只会路由到 Queue2 中；"}]}]},{"ID":"20240201213554-gdu8rg5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213554-gdu8rg5","updated":"20240201213554"},"Children":[{"ID":"20240201213555-w92odbg","Type":"NodeParagraph","Properties":{"id":"20240201213555-w92odbg","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"路由键为 “com.hidden.demo” 的消息只会路由到 Queue2 中；"}]}]},{"ID":"20240201213556-h919f3m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-h919f3m","updated":"20240201213556"},"Children":[{"ID":"20240201213557-490rpi9","Type":"NodeParagraph","Properties":{"id":"20240201213557-490rpi9","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"路由键为 “java.rabbitmq.demo” 的消息只会路由到 Queue1 中；"}]}]},{"ID":"20240201213558-61rh2on","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-61rh2on","updated":"20240201213558"},"Children":[{"ID":"20240201213559-mp2t7yi","Type":"NodeParagraph","Properties":{"id":"20240201213559-mp2t7yi","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"路由键为 “java.util.concurrent” 的消息将会被丢弃或者返回给生产者（需要设置 mandatory 参数），因为它没有匹配任何路由键。"}]}]}]},{"ID":"20240201213560-mbfrdfd","Type":"NodeParagraph","Properties":{"id":"20240201213560-mbfrdfd","updated":"20240201213560"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4、headers(不推荐)"}]},{"ID":"20240201213561-4svetjl","Type":"NodeParagraph","Properties":{"id":"20240201213561-4svetjl","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"headers 类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。在绑定队列和交换器时指定一组键值对，当发送消息到交换器时，RabbitMQ 会获取到该消息的 headers（也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers 类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。"}]},{"ID":"20240201213562-1sz8pze","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213562-1sz8pze","updated":"20240201213562"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"AMQP 是什么?"}]},{"ID":"20240201213563-eqc7qk0","Type":"NodeParagraph","Properties":{"id":"20240201213563-eqc7qk0","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 就是 AMQP 协议的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Erlang"},{"Type":"NodeText","Data":" 的实现(当然 RabbitMQ 还支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STOMP2"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQTT3"},{"Type":"NodeText","Data":" 等协议 ) AMQP 的模型架构 和 RabbitMQ 的模型架构是一样的，生产者将消息发送给交换器，交换器和队列绑定 。"}]},{"ID":"20240201213564-rne6nhd","Type":"NodeParagraph","Properties":{"id":"20240201213564-rne6nhd","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 中的交换器、交换器类型、队列、绑定、路由键等都是遵循的 AMQP 协议中相 应的概念。目前 RabbitMQ 最新版本默认支持的是 AMQP 0-9-1。"}]},{"ID":"20240201213565-q77r231","Type":"NodeParagraph","Properties":{"id":"20240201213565-q77r231","updated":"20240201213565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AMQP 协议的三层"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213566-vej0ixg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-vej0ixg","updated":"20240201213566"},"Children":[{"ID":"20240201213567-cuu967v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213567-cuu967v","updated":"20240201213567"},"Children":[{"ID":"20240201213568-yb11q4v","Type":"NodeParagraph","Properties":{"id":"20240201213568-yb11q4v","updated":"20240201213568"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Module Layer"},{"Type":"NodeText","Data":":协议最高层，主要定义了一些客户端调用的命令，客户端可以用这些命令实现自己的业务逻辑。"}]}]},{"ID":"20240201213569-vnw7j1o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213569-vnw7j1o","updated":"20240201213569"},"Children":[{"ID":"20240201213570-h46hz1o","Type":"NodeParagraph","Properties":{"id":"20240201213570-h46hz1o","updated":"20240201213570"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Session Layer"},{"Type":"NodeText","Data":":中间层，主要负责客户端命令发送给服务器，再将服务端应答返回客户端，提供可靠性同步机制和错误处理。"}]}]},{"ID":"20240201213571-aguvik2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-aguvik2","updated":"20240201213571"},"Children":[{"ID":"20240201213572-uayk0dp","Type":"NodeParagraph","Properties":{"id":"20240201213572-uayk0dp","updated":"20240201213572"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TransportLayer"},{"Type":"NodeText","Data":":最底层，主要传输二进制数据流，提供帧的处理、信道服用、错误检测和数据表示等。"}]}]}]},{"ID":"20240201213573-u0os7yq","Type":"NodeParagraph","Properties":{"id":"20240201213573-u0os7yq","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AMQP 模型的三大组件"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213574-gusyeer","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-gusyeer","updated":"20240201213574"},"Children":[{"ID":"20240201213575-7w8cgad","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-7w8cgad","updated":"20240201213575"},"Children":[{"ID":"20240201213576-g960z1g","Type":"NodeParagraph","Properties":{"id":"20240201213576-g960z1g","updated":"20240201213576"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"交换器 (Exchange)"},{"Type":"NodeText","Data":"：消息代理服务器中用于把消息路由到队列的组件。"}]}]},{"ID":"20240201213577-eboq6lw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-eboq6lw","updated":"20240201213577"},"Children":[{"ID":"20240201213578-e11mbbp","Type":"NodeParagraph","Properties":{"id":"20240201213578-e11mbbp","updated":"20240201213578"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列 (Queue)"},{"Type":"NodeText","Data":"：用来存储消息的数据结构，位于硬盘或内存中。"}]}]},{"ID":"20240201213579-gdjqzc0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213579-gdjqzc0","updated":"20240201213579"},"Children":[{"ID":"20240201213580-u9f3m07","Type":"NodeParagraph","Properties":{"id":"20240201213580-u9f3m07","updated":"20240201213580"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"绑定 (Binding)"},{"Type":"NodeText","Data":"：一套规则，告知交换器消息应该将消息投递给哪个队列。"}]}]}]},{"ID":"20240201213581-zerx30f","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213581-zerx30f","updated":"20240201213581"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"说说生产者 Producer 和消费者 Consumer?"}]},{"ID":"20240201213582-543mfo1","Type":"NodeParagraph","Properties":{"id":"20240201213582-543mfo1","updated":"20240201213582"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"生产者"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213583-qs8dii5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-qs8dii5","updated":"20240201213583"},"Children":[{"ID":"20240201213584-7vmvhoo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213584-7vmvhoo","updated":"20240201213584"},"Children":[{"ID":"20240201213585-prtqs6k","Type":"NodeParagraph","Properties":{"id":"20240201213585-prtqs6k","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"消息生产者，就是投递消息的一方。"}]}]},{"ID":"20240201213586-h9m12fk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213586-h9m12fk","updated":"20240201213586"},"Children":[{"ID":"20240201213587-7ilampj","Type":"NodeParagraph","Properties":{"id":"20240201213587-7ilampj","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"消息一般包含两个部分：消息体（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"payload"},{"Type":"NodeText","Data":")和标签("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Label"},{"Type":"NodeText","Data":")。"}]}]}]},{"ID":"20240201213588-va70nyu","Type":"NodeParagraph","Properties":{"id":"20240201213588-va70nyu","updated":"20240201213588"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消费者"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213589-d648rdd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213589-d648rdd","updated":"20240201213589"},"Children":[{"ID":"20240201213590-fst22fa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213590-fst22fa","updated":"20240201213590"},"Children":[{"ID":"20240201213591-nygv1nb","Type":"NodeParagraph","Properties":{"id":"20240201213591-nygv1nb","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"消费消息，也就是接收消息的一方。"}]}]},{"ID":"20240201213592-uyyo32e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-uyyo32e","updated":"20240201213592"},"Children":[{"ID":"20240201213593-xheh5h8","Type":"NodeParagraph","Properties":{"id":"20240201213593-xheh5h8","updated":"20240201213593"},"Children":[{"Type":"NodeText","Data":"消费者连接到 RabbitMQ 服务器，并订阅到队列上。消费消息时只消费消息体，丢弃标签。"}]}]}]},{"ID":"20240201213594-q23v98s","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213594-q23v98s","updated":"20240201213594"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"说说 Broker 服务节点、Queue 队列、Exchange 交换器？"}]},{"ID":"20240201213595-wzlbldg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213595-wzlbldg","updated":"20240201213595"},"Children":[{"ID":"20240201213596-ie0tef7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213596-ie0tef7","updated":"20240201213596"},"Children":[{"ID":"20240201213597-jvsqwvu","Type":"NodeParagraph","Properties":{"id":"20240201213597-jvsqwvu","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"：可以看做 RabbitMQ 的服务节点。一般情况下一个 Broker 可以看做一个 RabbitMQ 服务器。"}]}]},{"ID":"20240201213598-4sgdcgd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213598-4sgdcgd","updated":"20240201213598"},"Children":[{"ID":"20240201213599-smimd51","Type":"NodeParagraph","Properties":{"id":"20240201213599-smimd51","updated":"20240201213599"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Queue"},{"Type":"NodeText","Data":"：RabbitMQ 的内部对象，用于存储消息。多个消费者可以订阅同一队列，这时队列中的消息会被平摊（轮询）给多个消费者进行处理。"}]}]},{"ID":"20240201213600-705kwvz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213600-705kwvz","updated":"20240201213600"},"Children":[{"ID":"20240201213601-jqr911w","Type":"NodeParagraph","Properties":{"id":"20240201213601-jqr911w","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Exchange"},{"Type":"NodeText","Data":"：生产者将消息发送到交换器，由交换器将消息路由到一个或者多个队列中。当路由不到时，或返回给生产者或直接丢弃。"}]}]}]},{"ID":"20240201213602-k0nazmj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213602-k0nazmj","updated":"20240201213602"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是死信队列？如何导致的？"}]},{"ID":"20240201213603-tsokphg","Type":"NodeParagraph","Properties":{"id":"20240201213603-tsokphg","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"DLX，全称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dead-Letter-Exchange"},{"Type":"NodeText","Data":"，死信交换器，死信邮箱。当消息在一个队列中变成死信 ("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dead message"},{"Type":"NodeText","Data":") 之后，它能被重新被发送到另一个交换器中，这个交换器就是 DLX，绑定 DLX 的队列就称之为死信队列。"}]},{"ID":"20240201213604-dw5dfy9","Type":"NodeParagraph","Properties":{"id":"20240201213604-dw5dfy9","updated":"20240201213604"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"导致的死信的几种原因"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213605-pebquf0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213605-pebquf0","updated":"20240201213605"},"Children":[{"ID":"20240201213606-hjkeg9l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213606-hjkeg9l","updated":"20240201213606"},"Children":[{"ID":"20240201213607-ollbsaq","Type":"NodeParagraph","Properties":{"id":"20240201213607-ollbsaq","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"消息被拒（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Basic.Reject /Basic.Nack"},{"Type":"NodeText","Data":") 且 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"requeue = false"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213608-yc8zq3c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-yc8zq3c","updated":"20240201213608"},"Children":[{"ID":"20240201213609-5cajyq1","Type":"NodeParagraph","Properties":{"id":"20240201213609-5cajyq1","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"消息 TTL 过期。"}]}]},{"ID":"20240201213610-o7cfode","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-o7cfode","updated":"20240201213610"},"Children":[{"ID":"20240201213611-8vik647","Type":"NodeParagraph","Properties":{"id":"20240201213611-8vik647","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"队列满了，无法再添加。"}]}]}]},{"ID":"20240201213612-38c0aah","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213612-38c0aah","updated":"20240201213612"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是延迟队列？RabbitMQ 怎么实现延迟队列？"}]},{"ID":"20240201213613-h745p7r","Type":"NodeParagraph","Properties":{"id":"20240201213613-h745p7r","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"延迟队列指的是存储对应的延迟消息，消息被发送以后，并不想让消费者立刻拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费。"}]},{"ID":"20240201213614-fffd4vf","Type":"NodeParagraph","Properties":{"id":"20240201213614-fffd4vf","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 本身是没有延迟队列的，要实现延迟消息，一般有两种方式："}]},{"ID":"20240201213615-8l83324","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213615-8l83324","updated":"20240201213615"},"Children":[{"ID":"20240201213616-chczq4k","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213616-chczq4k","updated":"20240201213616"},"Children":[{"ID":"20240201213617-s7woqid","Type":"NodeParagraph","Properties":{"id":"20240201213617-s7woqid","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"通过 RabbitMQ 本身队列的特性来实现，需要使用 RabbitMQ 的死信交换机（Exchange）和消息的存活时间 TTL（Time To Live）。"}]}]},{"ID":"20240201213618-slvmes5","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213618-slvmes5","updated":"20240201213618"},"Children":[{"ID":"20240201213619-emwye5v","Type":"NodeParagraph","Properties":{"id":"20240201213619-emwye5v","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"在 RabbitMQ 3.5.7 及以上的版本提供了一个插件（rabbitmq-delayed-message-exchange）来实现延迟队列功能。同时，插件依赖 Erlang/OPT 18.0 及以上。"}]}]}]},{"ID":"20240201213620-h4agool","Type":"NodeParagraph","Properties":{"id":"20240201213620-h4agool","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"也就是说，AMQP 协议以及 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过 TTL 和 DLX 模拟出延迟队列的功能。"}]},{"ID":"20240201213621-zezkbb6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213621-zezkbb6","updated":"20240201213621"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是优先级队列？"}]},{"ID":"20240201213622-h2gz0c9","Type":"NodeParagraph","Properties":{"id":"20240201213622-h2gz0c9","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 自 V3.5.0 有优先级队列实现，优先级高的队列会先被消费。"}]},{"ID":"20240201213623-2yirgc3","Type":"NodeParagraph","Properties":{"id":"20240201213623-2yirgc3","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"可以通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"x-max-priority"},{"Type":"NodeText","Data":"参数来实现优先级队列。不过，当消费速度大于生产速度且 Broker 没有堆积的情况下，优先级显得没有意义。"}]},{"ID":"20240201213624-weyzg28","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213624-weyzg28","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RabbitMQ 有哪些工作模式？"}]},{"ID":"20240201213625-iuadocu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-iuadocu","updated":"20240201213625"},"Children":[{"ID":"20240201213626-0u4njqv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213626-0u4njqv","updated":"20240201213626"},"Children":[{"ID":"20240201213627-4yes4iy","Type":"NodeParagraph","Properties":{"id":"20240201213627-4yes4iy","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"简单模式"}]}]},{"ID":"20240201213628-mmua70v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-mmua70v","updated":"20240201213628"},"Children":[{"ID":"20240201213629-48dv9lp","Type":"NodeParagraph","Properties":{"id":"20240201213629-48dv9lp","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"work 工作模式"}]}]},{"ID":"20240201213630-1gkbkqi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-1gkbkqi","updated":"20240201213630"},"Children":[{"ID":"20240201213631-d4jyraz","Type":"NodeParagraph","Properties":{"id":"20240201213631-d4jyraz","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"pub/sub 发布订阅模式"}]}]},{"ID":"20240201213632-z6ijkd5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213632-z6ijkd5","updated":"20240201213632"},"Children":[{"ID":"20240201213633-gzr4nbe","Type":"NodeParagraph","Properties":{"id":"20240201213633-gzr4nbe","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"Routing 路由模式"}]}]},{"ID":"20240201213634-loxjm7n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213634-loxjm7n","updated":"20240201213634"},"Children":[{"ID":"20240201213635-2txfrnw","Type":"NodeParagraph","Properties":{"id":"20240201213635-2txfrnw","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"Topic 主题模式"}]}]}]},{"ID":"20240201213636-dag0ztn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213636-dag0ztn","updated":"20240201213636"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RabbitMQ 消息怎么传输？"}]},{"ID":"20240201213637-ij678gm","Type":"NodeParagraph","Properties":{"id":"20240201213637-ij678gm","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"由于 TCP 链接的创建和销毁开销较大，且并发数受系统资源限制，会造成性能瓶颈，所以 RabbitMQ 使用信道的方式来传输数据。信道（Channel）是生产者、消费者与 RabbitMQ 通信的渠道，信道是建立在 TCP 链接上的虚拟链接，且每条 TCP 链接上的信道数量没有限制。就是说 RabbitMQ 在一条 TCP 链接上建立成百上千个信道来达到多个线程处理，这个 TCP 被多个线程共享，每个信道在 RabbitMQ 都有唯一的 ID，保证了信道私有性，每个信道对应一个线程使用。"}]},{"ID":"20240201213638-nxzg40w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213638-nxzg40w","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何保证消息的可靠性？"}]},{"ID":"20240201213639-2oft0f2","Type":"NodeParagraph","Properties":{"id":"20240201213639-2oft0f2","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"消息到 MQ 的过程中搞丢，MQ 自己搞丢，MQ 到消费过程中搞丢。"}]},{"ID":"20240201213640-2bcqo7z","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-2bcqo7z","updated":"20240201213640"},"Children":[{"ID":"20240201213641-5y5waoy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-5y5waoy","updated":"20240201213641"},"Children":[{"ID":"20240201213642-17r1vow","Type":"NodeParagraph","Properties":{"id":"20240201213642-17r1vow","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"生产者到 RabbitMQ：事务机制和 Confirm 机制，注意：事务机制和 Confirm 机制是互斥的，两者不能共存，会导致 RabbitMQ 报错。"}]}]},{"ID":"20240201213643-lwr7rt8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-lwr7rt8","updated":"20240201213643"},"Children":[{"ID":"20240201213644-fc7ftb7","Type":"NodeParagraph","Properties":{"id":"20240201213644-fc7ftb7","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 自身：持久化、集群、普通模式、镜像模式。"}]}]},{"ID":"20240201213645-zrs8tm1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-zrs8tm1","updated":"20240201213645"},"Children":[{"ID":"20240201213646-xky0128","Type":"NodeParagraph","Properties":{"id":"20240201213646-xky0128","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 到消费者：basicAck 机制、死信队列、消息补偿机制。"}]}]}]},{"ID":"20240201213647-4ar4tea","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213647-4ar4tea","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何保证 RabbitMQ 消息的顺序性？"}]},{"ID":"20240201213648-rg9t9hz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-rg9t9hz","updated":"20240201213648"},"Children":[{"ID":"20240201213649-tm749iu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-tm749iu","updated":"20240201213649"},"Children":[{"ID":"20240201213650-btzbw21","Type":"NodeParagraph","Properties":{"id":"20240201213650-btzbw21","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"拆分多个 queue(消息队列)，每个 queue(消息队列) 一个 consumer(消费者)，就是多一些 queue (消息队列)而已，确实是麻烦点；"}]}]},{"ID":"20240201213651-nl6ou6f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-nl6ou6f","updated":"20240201213651"},"Children":[{"ID":"20240201213652-e4dzg9b","Type":"NodeParagraph","Properties":{"id":"20240201213652-e4dzg9b","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"或者就一个 queue (消息队列)但是对应一个 consumer(消费者)，然后这个 consumer(消费者)内部用内存队列做排队，然后分发给底层不同的 worker 来处理。"}]}]}]},{"ID":"20240201213653-4lngby0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213653-4lngby0","updated":"20240201213653"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何保证 RabbitMQ 高可用的？"}]},{"ID":"20240201213654-9051p6m","Type":"NodeParagraph","Properties":{"id":"20240201213654-9051p6m","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。"}]},{"ID":"20240201213655-k89tb5d","Type":"NodeParagraph","Properties":{"id":"20240201213655-k89tb5d","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单机模式"}]},{"ID":"20240201213656-f4mf5q8","Type":"NodeParagraph","Properties":{"id":"20240201213656-f4mf5q8","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"Demo 级别的，一般就是你本地启动了玩玩儿的?，没人生产用单机模式。"}]},{"ID":"20240201213657-o9lus9s","Type":"NodeParagraph","Properties":{"id":"20240201213657-o9lus9s","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"普通集群模式"}]},{"ID":"20240201213658-fo58npw","Type":"NodeParagraph","Properties":{"id":"20240201213658-fo58npw","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"意思就是在多台机器上启动多个 RabbitMQ 实例，每个机器启动一个。你创建的 queue，只会放在一个 RabbitMQ 实例上，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。"}]},{"ID":"20240201213659-5ehjj8s","Type":"NodeParagraph","Properties":{"id":"20240201213659-5ehjj8s","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。这方案主要是提高吞吐量的，就是说让集群中多个节点来服务某个 queue 的读写操作。"}]},{"ID":"20240201213660-ddxo8iq","Type":"NodeParagraph","Properties":{"id":"20240201213660-ddxo8iq","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"镜像集群模式"}]},{"ID":"20240201213661-0q03h9v","Type":"NodeParagraph","Properties":{"id":"20240201213661-0q03h9v","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 queue 的一个完整镜像，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把消息同步到多个实例的 queue 上。RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是镜像集群模式的策略，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。"}]},{"ID":"20240201213662-h0o8jz2","Type":"NodeParagraph","Properties":{"id":"20240201213662-h0o8jz2","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"这样的好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。"}]},{"ID":"20240201213663-8547n6a","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213663-8547n6a","updated":"20240201213663"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何解决消息队列的延时以及过期失效问题？"}]},{"ID":"20240201213664-drmpag1","Type":"NodeParagraph","Properties":{"id":"20240201213664-drmpag1","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是大量的数据会直接搞丢。我们可以采取一个方案，就是批量重导，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上 12 点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。"}]},{"ID":"20240201213665-s7l5exz","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-s7l5exz","updated":"20240201213665"}}]}