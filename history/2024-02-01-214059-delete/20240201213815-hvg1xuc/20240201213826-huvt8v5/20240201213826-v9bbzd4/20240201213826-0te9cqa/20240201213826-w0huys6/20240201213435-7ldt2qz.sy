{"ID":"20240201213435-7ldt2qz","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213435-7ldt2qz","title":"message-queue","updated":"20240201213435"},"Children":[{"ID":"20240201213436-pkxtthx","Type":"NodeThematicBreak","Properties":{"id":"20240201213436-pkxtthx","updated":"20240201213436"}},{"ID":"20240201213437-df7xaij","Type":"NodeParagraph","Properties":{"id":"20240201213437-df7xaij","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"title: 消息队列基础知识总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高性能"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213438-sz86a2s","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213438-sz86a2s","updated":"20240201213438"},"Children":[{"ID":"20240201213439-248e3d2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213439-248e3d2","updated":"20240201213439"},"Children":[{"ID":"20240201213440-0szne6y","Type":"NodeParagraph","Properties":{"id":"20240201213440-0szne6y","updated":"20240201213440"},"Children":[{"Type":"NodeText","Data":"消息队列"}]}]}]},{"ID":"20240201213441-v2mxbwi","Type":"NodeThematicBreak","Properties":{"id":"20240201213441-v2mxbwi","updated":"20240201213441"}},{"ID":"20240201213442-t6atq9f","Type":"NodeParagraph","Properties":{"id":"20240201213442-t6atq9f","updated":"20240201213442"},"Children":[{"Type":"NodeText","Data":"::: tip"}]},{"ID":"20240201213443-imfdqia","Type":"NodeParagraph","Properties":{"id":"20240201213443-imfdqia","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"这篇文章中的消息队列主要指的是分布式消息队列。"}]},{"ID":"20240201213444-pwvu53w","Type":"NodeParagraph","Properties":{"id":"20240201213444-pwvu53w","updated":"20240201213444"},"Children":[{"Type":"NodeText","Data":":::"}]},{"ID":"20240201213445-vysykyu","Type":"NodeParagraph","Properties":{"id":"20240201213445-vysykyu","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"“RabbitMQ？”“Kafka？”“RocketMQ？”...在日常学习与开发过程中，我们常常听到消息队列这个关键词。我也在我的多篇文章中提到了这个概念。可能你是熟练使用消息队列的老手，又或者你是不懂消息队列的新手，不论你了不了解消息队列，本文都将带你搞懂消息队列的一些基本理论。"}]},{"ID":"20240201213446-s1xsmbv","Type":"NodeParagraph","Properties":{"id":"20240201213446-s1xsmbv","updated":"20240201213446"},"Children":[{"Type":"NodeText","Data":"如果你是老手，你可能从本文学到你之前不曾注意的一些关于消息队列的重要概念，如果你是新手，相信本文将是你打开消息队列大门的一板砖。"}]},{"ID":"20240201213447-jtw7z52","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213447-jtw7z52","updated":"20240201213447"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是消息队列？"}]},{"ID":"20240201213448-p2l23bh","Type":"NodeParagraph","Properties":{"id":"20240201213448-p2l23bh","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"我们可以把消息队列看作是一个存放消息的容器，当我们需要使用消息的时候，直接从容器中取出消息供自己使用即可。由于队列 Queue 是一种先进先出的数据结构，所以消费消息时也是按照顺序来消费的。"}]},{"ID":"20240201213449-eb6eu1e","Type":"NodeParagraph","Properties":{"id":"20240201213449-eb6eu1e","updated":"20240201213449"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/message-queue-small.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213450-5ym9v5f","Type":"NodeParagraph","Properties":{"id":"20240201213450-5ym9v5f","updated":"20240201213450"},"Children":[{"Type":"NodeText","Data":"参与消息传递的双方称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"生产者"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消费者"},{"Type":"NodeText","Data":" ，生产者负责发送消息，消费者负责处理消息。"}]},{"ID":"20240201213451-yah3k2c","Type":"NodeParagraph","Properties":{"id":"20240201213451-yah3k2c","updated":"20240201213451"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"发布/订阅（Pub/Sub）模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/message-queue-pub-sub-model-20240201213826-en4iz0b.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213452-as15eqt","Type":"NodeParagraph","Properties":{"id":"20240201213452-as15eqt","updated":"20240201213452"},"Children":[{"Type":"NodeText","Data":"我们知道操作系统中的进程通信的一种很重要的方式就是消息队列。我们这里提到的消息队列稍微有点区别，更多指的是各个服务以及系统内部各个组件/模块之前的通信，属于一种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"中间件"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213453-h2ung03","Type":"NodeParagraph","Properties":{"id":"20240201213453-h2ung03","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"维基百科是这样介绍中间件的："}]},{"ID":"20240201213454-f85u16n","Type":"NodeBlockquote","Properties":{"id":"20240201213454-f85u16n","updated":"20240201213454"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213455-242xf0a","Type":"NodeParagraph","Properties":{"id":"20240201213455-242xf0a","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"中间件（英语：Middleware），又译中间件、中介层，是一类提供系统软件和应用软件之间连接、便于软件各部件之间的沟通的软件，应用软件可以借助中间件在不同的技术架构之间共享信息与资源。中间件位于客户机服务器的操作系统之上，管理着计算资源和网络通信。"}]}]},{"ID":"20240201213456-7gqshmo","Type":"NodeParagraph","Properties":{"id":"20240201213456-7gqshmo","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"简单来说："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"中间件就是一类为应用软件服务的软件，应用软件是为用户服务的，用户不会接触或者使用到中间件。"}]},{"ID":"20240201213457-7q2ezjg","Type":"NodeParagraph","Properties":{"id":"20240201213457-7q2ezjg","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"除了消息队列之外，常见的中间件还有 RPC 框架、分布式组件、HTTP 服务器、任务调度框架、配置中心、数据库层的分库分表工具和数据迁移工具等等。"}]},{"ID":"20240201213458-4bqkhg7","Type":"NodeParagraph","Properties":{"id":"20240201213458-4bqkhg7","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"关于中间件比较详细的介绍可以参考阿里巴巴淘系技术的一篇回答："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/19730582/answer/1663627873","TextMarkTextContent":"https://www.zhihu.com/question/19730582/answer/1663627873"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213459-qcadny0","Type":"NodeParagraph","Properties":{"id":"20240201213459-qcadny0","updated":"20240201213459"},"Children":[{"Type":"NodeText","Data":"随着分布式和微服务系统的发展，消息队列在系统设计中有了更大的发挥空间，使用消息队列可以降低系统耦合性、实现任务异步、有效地进行流量削峰，是分布式和微服务系统中重要的组件之一。"}]},{"ID":"20240201213460-4xo0cse","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213460-4xo0cse","updated":"20240201213460"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息队列有什么用？"}]},{"ID":"20240201213461-3q09xnd","Type":"NodeParagraph","Properties":{"id":"20240201213461-3q09xnd","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"通常来说，使用消息队列能为我们的系统带来下面三点好处："}]},{"ID":"20240201213462-e7lrwsf","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213462-e7lrwsf","updated":"20240201213462"},"Children":[{"ID":"20240201213463-bxr3r7n","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213463-bxr3r7n","updated":"20240201213463"},"Children":[{"ID":"20240201213464-0mrnqla","Type":"NodeParagraph","Properties":{"id":"20240201213464-0mrnqla","updated":"20240201213464"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过异步处理提高系统性能（减少响应所需时间）"}]}]},{"ID":"20240201213465-5wqallo","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213465-5wqallo","updated":"20240201213465"},"Children":[{"ID":"20240201213466-dva1lfh","Type":"NodeParagraph","Properties":{"id":"20240201213466-dva1lfh","updated":"20240201213466"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"削峰/限流"}]}]},{"ID":"20240201213467-y0i6myn","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213467-y0i6myn","updated":"20240201213467"},"Children":[{"ID":"20240201213468-0lnvuqa","Type":"NodeParagraph","Properties":{"id":"20240201213468-0lnvuqa","updated":"20240201213468"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"降低系统耦合性。"}]}]}]},{"ID":"20240201213469-xm5d0pv","Type":"NodeParagraph","Properties":{"id":"20240201213469-xm5d0pv","updated":"20240201213469"},"Children":[{"Type":"NodeText","Data":"如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐你结合你自己的项目来回答。"}]},{"ID":"20240201213470-2zzwgej","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213470-2zzwgej","updated":"20240201213470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"通过异步处理提高系统性能（减少响应所需时间）"}]},{"ID":"20240201213471-7h02exi","Type":"NodeParagraph","Properties":{"id":"20240201213471-7h02exi","updated":"20240201213471"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"通过异步处理提高系统性能","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/Asynchronous-message-queue.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213472-jx7fxmn","Type":"NodeParagraph","Properties":{"id":"20240201213472-jx7fxmn","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"将用户的请求数据存储到消息队列之后就立即返回结果。随后，系统再对消息进行消费。"}]},{"ID":"20240201213473-6udo58c","Type":"NodeParagraph","Properties":{"id":"20240201213473-6udo58c","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"因为用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败。因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用消息队列进行异步处理之后，需要适当修改业务流程进行配合"},{"Type":"NodeText","Data":"，比如用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功，以免交易纠纷。这就类似我们平时手机订火车票和电影票。"}]},{"ID":"20240201213474-j4mrati","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213474-j4mrati","updated":"20240201213474"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"削峰/限流"}]},{"ID":"20240201213475-aav0nrs","Type":"NodeParagraph","Properties":{"id":"20240201213475-aav0nrs","updated":"20240201213475"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先将短时间高并发产生的事务消息存储在消息队列中，然后后端服务再慢慢根据自己的能力去消费这些消息，这样就避免直接把后端服务打垮掉。"}]},{"ID":"20240201213476-ts6o4jw","Type":"NodeParagraph","Properties":{"id":"20240201213476-ts6o4jw","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示："}]},{"ID":"20240201213477-uaknil9","Type":"NodeParagraph","Properties":{"id":"20240201213477-uaknil9","updated":"20240201213477"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"削峰","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/%E5%89%8A%E5%B3%B0-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213478-nwyfw17","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213478-nwyfw17","updated":"20240201213478"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"降低系统耦合性"}]},{"ID":"20240201213479-mlc3bt5","Type":"NodeParagraph","Properties":{"id":"20240201213479-mlc3bt5","updated":"20240201213479"},"Children":[{"Type":"NodeText","Data":"使用消息队列还可以降低系统耦合性。我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。还是直接上图吧："}]},{"ID":"20240201213480-92wxuen","Type":"NodeParagraph","Properties":{"id":"20240201213480-92wxuen","updated":"20240201213480"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"解耦","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E8%A7%A3%E8%80%A6.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213481-0v7wswq","Type":"NodeParagraph","Properties":{"id":"20240201213481-0v7wswq","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"生产者（客户端）发送消息到消息队列中去，接受者（服务端）处理消息，需要消费的系统直接去消息队列取消息进行消费即可而不需要和其他系统有耦合，这显然也提高了系统的扩展性。"}]},{"ID":"20240201213482-v0znye1","Type":"NodeParagraph","Properties":{"id":"20240201213482-v0znye1","updated":"20240201213482"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列使用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。"},{"Type":"NodeText","Data":" 从上图可以看到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合"},{"Type":"NodeText","Data":"，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213483-246b0gq","Type":"NodeParagraph","Properties":{"id":"20240201213483-246b0gq","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"消息接受者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消息接受者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。"}]},{"ID":"20240201213484-dq67epn","Type":"NodeParagraph","Properties":{"id":"20240201213484-dq67epn","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"另外，为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。"}]},{"ID":"20240201213485-6rhyazo","Type":"NodeParagraph","Properties":{"id":"20240201213485-6rhyazo","updated":"20240201213485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"备注："},{"Type":"NodeText","Data":" 不要认为消息队列只能利用发布-订阅模式工作，只不过在解耦这个特定业务环境下是使用发布-订阅模式的。除了发布-订阅模式，还有点对点订阅模式（一个消息只有一个消费者），我们比较常用的是发布-订阅模式。另外，这两种消息模型是 JMS 提供的，AMQP 协议还提供了另外 5 种消息模型。"}]},{"ID":"20240201213486-kbdbcxp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213486-kbdbcxp","updated":"20240201213486"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实现分布式事务"}]},{"ID":"20240201213487-bd0h8u6","Type":"NodeParagraph","Properties":{"id":"20240201213487-bd0h8u6","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"我们知道分布式事务的解决方案之一就是 MQ 事务。"}]},{"ID":"20240201213488-f418x3x","Type":"NodeParagraph","Properties":{"id":"20240201213488-f418x3x","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"RocketMQ、 Kafka、Pulsar、QMQ 都提供了事务相关的功能。事务允许事件流应用将消费，处理，生产消息整个过程定义为一个原子操作。"}]},{"ID":"20240201213489-atwo54c","Type":"NodeParagraph","Properties":{"id":"20240201213489-atwo54c","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"详细介绍可以查看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/distributed-transaction.html","TextMarkTextContent":"分布式事务详解(付费)"},{"Type":"NodeText","Data":" 这篇文章。"}]},{"ID":"20240201213490-x51f8xa","Type":"NodeParagraph","Properties":{"id":"20240201213490-x51f8xa","updated":"20240201213490"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"分布式事务详解 - MQ事务","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/csdn/07b338324a7d8894b8aef4b659b76d92.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213491-ea7m07z","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213491-ea7m07z","updated":"20240201213491"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用消息队列会带来哪些问题？"}]},{"ID":"20240201213492-uckucoc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213492-uckucoc","updated":"20240201213492"},"Children":[{"ID":"20240201213493-c3abmvb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213493-c3abmvb","updated":"20240201213493"},"Children":[{"ID":"20240201213494-byghte8","Type":"NodeParagraph","Properties":{"id":"20240201213494-byghte8","updated":"20240201213494"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"系统可用性降低："},{"Type":"NodeText","Data":" 系统可用性在某种程度上降低，为什么这样说呢？在加入 MQ 之前，你不用考虑消息丢失或者说 MQ 挂掉等等的情况，但是，引入 MQ 之后你就需要去考虑了！"}]}]},{"ID":"20240201213495-c6pn8jc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213495-c6pn8jc","updated":"20240201213495"},"Children":[{"ID":"20240201213496-uw14st8","Type":"NodeParagraph","Properties":{"id":"20240201213496-uw14st8","updated":"20240201213496"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"系统复杂性提高："},{"Type":"NodeText","Data":" 加入 MQ 之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！"}]}]},{"ID":"20240201213497-mrwz4ta","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213497-mrwz4ta","updated":"20240201213497"},"Children":[{"ID":"20240201213498-0rv15n2","Type":"NodeParagraph","Properties":{"id":"20240201213498-0rv15n2","updated":"20240201213498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性问题："},{"Type":"NodeText","Data":" 我上面讲了消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致数据不一致的情况了!"}]}]}]},{"ID":"20240201213499-3iypfyd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213499-3iypfyd","updated":"20240201213499"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JMS 和 AMQP"}]},{"ID":"20240201213500-3lvmngd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213500-3lvmngd","updated":"20240201213500"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JMS 是什么？"}]},{"ID":"20240201213501-yvcse5h","Type":"NodeParagraph","Properties":{"id":"20240201213501-yvcse5h","updated":"20240201213501"},"Children":[{"Type":"NodeText","Data":"JMS（JAVA Message Service,java 消息服务）是 Java 的消息服务，JMS 的客户端之间可以通过 JMS 服务进行异步的消息传输。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JMS（JAVA Message Service，Java 消息服务）API 是一个消息服务的标准或者说是规范"},{"Type":"NodeText","Data":"，允许应用程序组件基于 JavaEE 平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。"}]},{"ID":"20240201213502-90af9ku","Type":"NodeParagraph","Properties":{"id":"20240201213502-90af9ku","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"JMS 定义了五种不同的消息正文格式以及调用的消息类型，允许你发送并接收以一些不同形式的数据："}]},{"ID":"20240201213503-aktv31b","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213503-aktv31b","updated":"20240201213503"},"Children":[{"ID":"20240201213504-x5g9fuk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-x5g9fuk","updated":"20240201213504"},"Children":[{"ID":"20240201213505-38cjxo1","Type":"NodeParagraph","Properties":{"id":"20240201213505-38cjxo1","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StreamMessage：Java"},{"Type":"NodeText","Data":" 原始值的数据流"}]}]},{"ID":"20240201213506-oebx176","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213506-oebx176","updated":"20240201213506"},"Children":[{"ID":"20240201213507-vcj8zuf","Type":"NodeParagraph","Properties":{"id":"20240201213507-vcj8zuf","updated":"20240201213507"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MapMessage"},{"Type":"NodeText","Data":"：一套名称-值对"}]}]},{"ID":"20240201213508-18f7q7n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213508-18f7q7n","updated":"20240201213508"},"Children":[{"ID":"20240201213509-hvs3w0q","Type":"NodeParagraph","Properties":{"id":"20240201213509-hvs3w0q","updated":"20240201213509"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TextMessage"},{"Type":"NodeText","Data":"：一个字符串对象"}]}]},{"ID":"20240201213510-xm4c28o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213510-xm4c28o","updated":"20240201213510"},"Children":[{"ID":"20240201213511-jmo7gb3","Type":"NodeParagraph","Properties":{"id":"20240201213511-jmo7gb3","updated":"20240201213511"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ObjectMessage"},{"Type":"NodeText","Data":"：一个序列化的 Java 对象"}]}]},{"ID":"20240201213512-oxyrq4g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213512-oxyrq4g","updated":"20240201213512"},"Children":[{"ID":"20240201213513-b1tg672","Type":"NodeParagraph","Properties":{"id":"20240201213513-b1tg672","updated":"20240201213513"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BytesMessage"},{"Type":"NodeText","Data":"：一个字节的数据流"}]}]}]},{"ID":"20240201213514-s3pp2dk","Type":"NodeParagraph","Properties":{"id":"20240201213514-s3pp2dk","updated":"20240201213514"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ActiveMQ（已被淘汰） 就是基于 JMS 规范实现的。"}]},{"ID":"20240201213515-m01knul","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213515-m01knul","updated":"20240201213515"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JMS 两种消息模型"}]},{"ID":"20240201213516-f9tjsvu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213516-f9tjsvu","updated":"20240201213516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"点到点（P2P）模型"}]},{"ID":"20240201213517-ylud30e","Type":"NodeParagraph","Properties":{"id":"20240201213517-ylud30e","updated":"20240201213517"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"队列模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/message-queue-queue-model-20240201213826-hecpcbd.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213518-zne5mbw","Type":"NodeParagraph","Properties":{"id":"20240201213518-zne5mbw","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列（Queue）"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"作为消息通信载体；满足"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"生产者与消费者模式"},{"Type":"NodeText","Data":"，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。比如：我们生产者发送 100 条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）"}]},{"ID":"20240201213519-ou70ozh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213519-ou70ozh","updated":"20240201213519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"发布/订阅（Pub/Sub）模型"}]},{"ID":"20240201213520-u3wnajv","Type":"NodeParagraph","Properties":{"id":"20240201213520-u3wnajv","updated":"20240201213520"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"发布/订阅（Pub/Sub）模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/message-queue-pub-sub-model-20240201213826-en4iz0b.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213521-dgh4hct","Type":"NodeParagraph","Properties":{"id":"20240201213521-dgh4hct","updated":"20240201213521"},"Children":[{"Type":"NodeText","Data":"发布订阅模型（Pub/Sub） 使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题（Topic）"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"作为消息通信载体，类似于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"广播模式"},{"Type":"NodeText","Data":"；发布者发布一条消息，该消息通过主题传递给所有的订阅者。"}]},{"ID":"20240201213522-l3e76vh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213522-l3e76vh","updated":"20240201213522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AMQP 是什么？"}]},{"ID":"20240201213523-ga6v1tt","Type":"NodeParagraph","Properties":{"id":"20240201213523-ga6v1tt","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"AMQP，即 Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高级消息队列协议"},{"Type":"NodeText","Data":"（二进制应用层协议），是应用层协议的一个开放标准，为面向消息的中间件设计，兼容 JMS。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件同产品，不同的开发语言等条件的限制。"}]},{"ID":"20240201213524-jvin0yd","Type":"NodeParagraph","Properties":{"id":"20240201213524-jvin0yd","updated":"20240201213524"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RabbitMQ 就是基于 AMQP 协议实现的。"}]},{"ID":"20240201213525-j8ekbp0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213525-j8ekbp0","updated":"20240201213525"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JMS vs AMQP"}]},{"ID":"20240201213526-qhtlg0p","Type":"NodeTable","Data":"|   对比方向   | JMS                                     | AMQP                                                                                                                                                                                               |\n| :----------: | :-------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|     定义     | Java API                                | 协议                                                                                                                                                                                               |\n|    跨语言    | 否                                      | 是                                                                                                                                                                                                 |\n|    跨平台    | 否                                      | 是                                                                                                                                                                                                 |\n| 支持消息类型 | 提供两种消息模型：①Peer-2-Peer;②Pub/sub | 提供了五种消息模型：①direct exchange；②fanout exchange；③topic change；④headers exchange；⑤system exchange。本质来讲，后四种和 JMS 的 pub/sub 模型没有太大差别，仅是在路由机制上做了更详细的划分； |\n| 支持消息类型 | 支持多种消息类型 ，我们在上面提到过     | byte[]（二进制）                                                                                                                                                                                   |","TableAligns":[2,1,1],"Properties":{"id":"20240201213526-qhtlg0p","updated":"20240201213526"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"对比方向"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JMS"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"AMQP"}]}]}]},{"Type":"NodeTableRow","TableAligns":[2,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"定义"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java API"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"协议"}]}]},{"Type":"NodeTableRow","TableAligns":[2,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"跨语言"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"否"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"是"}]}]},{"Type":"NodeTableRow","TableAligns":[2,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"跨平台"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"否"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"是"}]}]},{"Type":"NodeTableRow","TableAligns":[2,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持消息类型"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"提供两种消息模型：①Peer-2-Peer;②Pub/sub"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"提供了五种消息模型：①direct exchange；②fanout exchange；③topic change；④headers exchange；⑤system exchange。本质来讲，后四种和 JMS 的 pub/sub 模型没有太大差别，仅是在路由机制上做了更详细的划分；"}]}]},{"Type":"NodeTableRow","TableAligns":[2,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持消息类型"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持多种消息类型 ，我们在上面提到过"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"byte[]（二进制）"}]}]}]},{"ID":"20240201213527-5y551pq","Type":"NodeParagraph","Properties":{"id":"20240201213527-5y551pq","updated":"20240201213527"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"总结："}]},{"ID":"20240201213528-mwdbtn9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213528-mwdbtn9","updated":"20240201213528"},"Children":[{"ID":"20240201213529-yoxud62","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213529-yoxud62","updated":"20240201213529"},"Children":[{"ID":"20240201213530-kdov031","Type":"NodeParagraph","Properties":{"id":"20240201213530-kdov031","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"AMQP 为消息定义了线路层（wire-level protocol）的协议，而 JMS 所定义的是 API 规范。在 Java 体系中，多个 client 均可以通过 JMS 进行交互，不需要应用修改代码，但是其对跨平台的支持较差。而 AMQP 天然具有跨平台、跨语言特性。"}]}]},{"ID":"20240201213531-gxf3fp0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213531-gxf3fp0","updated":"20240201213531"},"Children":[{"ID":"20240201213532-a71fmd3","Type":"NodeParagraph","Properties":{"id":"20240201213532-a71fmd3","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"JMS 支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TextMessage"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MapMessage"},{"Type":"NodeText","Data":" 等复杂的消息类型；而 AMQP 仅支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byte[]"},{"Type":"NodeText","Data":" 消息类型（复杂的类型可序列化后发送）。"}]}]},{"ID":"20240201213533-extiens","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213533-extiens","updated":"20240201213533"},"Children":[{"ID":"20240201213534-z3ujhe5","Type":"NodeParagraph","Properties":{"id":"20240201213534-z3ujhe5","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"由于 Exchange 提供的路由算法，AMQP 可以提供多样化的路由方式来传递消息到消息队列，而 JMS 仅支持 队列 和 主题/订阅 方式两种。"}]}]}]},{"ID":"20240201213535-5pvmgeq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213535-5pvmgeq","updated":"20240201213535"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RPC 和消息队列的区别"}]},{"ID":"20240201213536-zwwqo4f","Type":"NodeParagraph","Properties":{"id":"20240201213536-zwwqo4f","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"RPC 和消息队列都是分布式微服务系统中重要的组件之一，下面我们来简单对比一下两者："}]},{"ID":"20240201213537-t7xxqc3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213537-t7xxqc3","updated":"20240201213537"},"Children":[{"ID":"20240201213538-broihyc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213538-broihyc","updated":"20240201213538"},"Children":[{"ID":"20240201213539-uhfimol","Type":"NodeParagraph","Properties":{"id":"20240201213539-uhfimol","updated":"20240201213539"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从用途来看"},{"Type":"NodeText","Data":"：RPC 主要用来解决两个服务的远程通信问题，不需要了解底层网络的通信机制。通过 RPC 可以帮助我们调用远程计算机上某个服务的方法，这个过程就像调用本地方法一样简单。消息队列主要用来降低系统耦合性、实现任务异步、有效地进行流量削峰。"}]}]},{"ID":"20240201213540-j8zj8qw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-j8zj8qw","updated":"20240201213540"},"Children":[{"ID":"20240201213541-5lirms5","Type":"NodeParagraph","Properties":{"id":"20240201213541-5lirms5","updated":"20240201213541"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从通信方式来看"},{"Type":"NodeText","Data":"：RPC 是双向直接网络通讯，消息队列是单向引入中间载体的网络通讯。"}]}]},{"ID":"20240201213542-ioel4fy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213542-ioel4fy","updated":"20240201213542"},"Children":[{"ID":"20240201213543-dn3m9sh","Type":"NodeParagraph","Properties":{"id":"20240201213543-dn3m9sh","updated":"20240201213543"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从架构上来看"},{"Type":"NodeText","Data":"：消息队列需要把消息存储起来，RPC 则没有这个要求，因为前面也说了 RPC 是双向直接网络通讯。"}]}]},{"ID":"20240201213544-vsh83jj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213544-vsh83jj","updated":"20240201213544"},"Children":[{"ID":"20240201213545-54i3fn8","Type":"NodeParagraph","Properties":{"id":"20240201213545-54i3fn8","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从请求处理的时效性来看"},{"Type":"NodeText","Data":"：通过 RPC 发出的调用一般会立即被处理，存放在消息队列中的消息并不一定会立即被处理。"}]}]}]},{"ID":"20240201213546-cwcd653","Type":"NodeParagraph","Properties":{"id":"20240201213546-cwcd653","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"RPC 和消息队列本质上是网络通讯的两种不同的实现机制，两者的用途不同，万不可将两者混为一谈。"}]},{"ID":"20240201213547-wfipvhj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213547-wfipvhj","updated":"20240201213547"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式消息队列技术选型"}]},{"ID":"20240201213548-8avgz5n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213548-8avgz5n","updated":"20240201213548"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的消息队列有哪些？"}]},{"ID":"20240201213549-8j6v8ac","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213549-8j6v8ac","updated":"20240201213549"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Kafka"}]},{"ID":"20240201213550-0g6ku2w","Type":"NodeParagraph","Properties":{"id":"20240201213550-0g6ku2w","updated":"20240201213550"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka-logo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213551-lbu3602","Type":"NodeParagraph","Properties":{"id":"20240201213551-lbu3602","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"Kafka 是 LinkedIn 开源的一个分布式流式处理平台，已经成为 Apache 顶级项目，早期被用来用于处理海量的日志，后面才慢慢发展成了一款功能全面的高性能消息队列。"}]},{"ID":"20240201213552-7hls1qo","Type":"NodeParagraph","Properties":{"id":"20240201213552-7hls1qo","updated":"20240201213552"},"Children":[{"Type":"NodeText","Data":"流式处理平台具有三个关键功能："}]},{"ID":"20240201213553-taha91a","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213553-taha91a","updated":"20240201213553"},"Children":[{"ID":"20240201213554-uweoglw","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213554-uweoglw","updated":"20240201213554"},"Children":[{"ID":"20240201213555-8aeg9j7","Type":"NodeParagraph","Properties":{"id":"20240201213555-8aeg9j7","updated":"20240201213555"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列"},{"Type":"NodeText","Data":"：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。"}]}]},{"ID":"20240201213556-u5085sj","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213556-u5085sj","updated":"20240201213556"},"Children":[{"ID":"20240201213557-op0ab94","Type":"NodeParagraph","Properties":{"id":"20240201213557-op0ab94","updated":"20240201213557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容错的持久方式存储记录消息流"},{"Type":"NodeText","Data":"：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。"}]}]},{"ID":"20240201213558-e3r3w84","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213558-e3r3w84","updated":"20240201213558"},"Children":[{"ID":"20240201213559-7900ngf","Type":"NodeParagraph","Properties":{"id":"20240201213559-7900ngf","updated":"20240201213559"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"流式处理平台："},{"Type":"NodeText","Data":" 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。"}]}]}]},{"ID":"20240201213560-gbd3kln","Type":"NodeParagraph","Properties":{"id":"20240201213560-gbd3kln","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"Kafka 是一个分布式系统，由通过高性能 TCP 网络协议进行通信的服务器和客户端组成，可以部署在在本地和云环境中的裸机硬件、虚拟机和容器上。"}]},{"ID":"20240201213561-y0vqfch","Type":"NodeParagraph","Properties":{"id":"20240201213561-y0vqfch","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"在 Kafka 2.8 之前，Kafka 最被大家诟病的就是其重度依赖于 Zookeeper 做元数据管理和集群的高可用。在 Kafka 2.8 之后，引入了基于 Raft 协议的 KRaft 模式，不再依赖 Zookeeper，大大简化了 Kafka 的架构，让你可以以一种轻量级的方式来使用 Kafka。"}]},{"ID":"20240201213562-hgjd0ts","Type":"NodeParagraph","Properties":{"id":"20240201213562-hgjd0ts","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"不过，要提示一下："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果要使用 KRaft 模式的话，建议选择较高版本的 Kafka，因为这个功能还在持续完善优化中。Kafka 3.3.1 版本是第一个将 KRaft（Kafka Raft）共识协议标记为生产就绪的版本。"}]},{"ID":"20240201213563-vpcwnyt","Type":"NodeParagraph","Properties":{"id":"20240201213563-vpcwnyt","updated":"20240201213563"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/kafka3.3.1-kraft- production-ready.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213564-913wajm","Type":"NodeParagraph","Properties":{"id":"20240201213564-913wajm","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"Kafka 官网："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://kafka.apache.org/","TextMarkTextContent":"http://kafka.apache.org/"}]},{"ID":"20240201213565-emvttdh","Type":"NodeParagraph","Properties":{"id":"20240201213565-emvttdh","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"Kafka 更新记录（可以直观看到项目是否还在维护）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://kafka.apache.org/downloads","TextMarkTextContent":"https://kafka.apache.org/downloads"}]},{"ID":"20240201213566-os65xoz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213566-os65xoz","updated":"20240201213566"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ"}]},{"ID":"20240201213567-p0yw7du","Type":"NodeParagraph","Properties":{"id":"20240201213567-p0yw7du","updated":"20240201213567"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/rocketmq-logo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213568-bbwha7t","Type":"NodeParagraph","Properties":{"id":"20240201213568-bbwha7t","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"RocketMQ 是阿里开源的一款云原生“消息、事件、流”实时数据处理平台，借鉴了 Kafka，已经成为 Apache 顶级项目。"}]},{"ID":"20240201213569-p6sz8vb","Type":"NodeParagraph","Properties":{"id":"20240201213569-p6sz8vb","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"RocketMQ 的核心特性（摘自 RocketMQ 官网）："}]},{"ID":"20240201213570-sympv8h","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-sympv8h","updated":"20240201213570"},"Children":[{"ID":"20240201213571-755u0q1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-755u0q1","updated":"20240201213571"},"Children":[{"ID":"20240201213572-lmuo8ya","Type":"NodeParagraph","Properties":{"id":"20240201213572-lmuo8ya","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"云原生：生与云，长与云，无限弹性扩缩，K8s 友好"}]}]},{"ID":"20240201213573-jldmdw8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-jldmdw8","updated":"20240201213573"},"Children":[{"ID":"20240201213574-wc96dj1","Type":"NodeParagraph","Properties":{"id":"20240201213574-wc96dj1","updated":"20240201213574"},"Children":[{"Type":"NodeText","Data":"高吞吐：万亿级吞吐保证，同时满足微服务与大数据场景。"}]}]},{"ID":"20240201213575-qa00c5e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-qa00c5e","updated":"20240201213575"},"Children":[{"ID":"20240201213576-f28rtfe","Type":"NodeParagraph","Properties":{"id":"20240201213576-f28rtfe","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"流处理：提供轻量、高扩展、高性能和丰富功能的流计算引擎。"}]}]},{"ID":"20240201213577-icnmyjc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-icnmyjc","updated":"20240201213577"},"Children":[{"ID":"20240201213578-sa5wbpo","Type":"NodeParagraph","Properties":{"id":"20240201213578-sa5wbpo","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"金融级：金融级的稳定性，广泛用于交易核心链路。"}]}]},{"ID":"20240201213579-u81da96","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213579-u81da96","updated":"20240201213579"},"Children":[{"ID":"20240201213580-m2ac4ta","Type":"NodeParagraph","Properties":{"id":"20240201213580-m2ac4ta","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"架构极简：零外部依赖，Shared-nothing 架构。"}]}]},{"ID":"20240201213581-pcy5jiu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-pcy5jiu","updated":"20240201213581"},"Children":[{"ID":"20240201213582-9h2bcc3","Type":"NodeParagraph","Properties":{"id":"20240201213582-9h2bcc3","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"生态友好：无缝对接微服务、实时计算、数据湖等周边生态。"}]}]}]},{"ID":"20240201213583-n3gric0","Type":"NodeParagraph","Properties":{"id":"20240201213583-n3gric0","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"根据官网介绍："}]},{"ID":"20240201213584-7tsngu5","Type":"NodeBlockquote","Properties":{"id":"20240201213584-7tsngu5","updated":"20240201213584"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213585-xo8ryyc","Type":"NodeParagraph","Properties":{"id":"20240201213585-xo8ryyc","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"Apache RocketMQ 自诞生以来，因其架构简单、业务功能丰富、具备极强可扩展性等特点被众多企业开发者以及云厂商广泛采用。历经十余年的大规模场景打磨，RocketMQ 已经成为业内共识的金融级可靠业务消息首选方案，被广泛应用于互联网、大数据、移动互联网、物联网等领域的业务场景。"}]}]},{"ID":"20240201213586-0u4efav","Type":"NodeParagraph","Properties":{"id":"20240201213586-0u4efav","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"RocketMQ 官网："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://rocketmq.apache.org/","TextMarkTextContent":"https://rocketmq.apache.org/"},{"Type":"NodeText","Data":" （文档很详细，推荐阅读）"}]},{"ID":"20240201213587-938njt8","Type":"NodeParagraph","Properties":{"id":"20240201213587-938njt8","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"RocketMQ 更新记录（可以直观看到项目是否还在维护）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/rocketmq/releases","TextMarkTextContent":"https://github.com/apache/rocketmq/releases"}]},{"ID":"20240201213588-r2b6v93","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213588-r2b6v93","updated":"20240201213588"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RabbitMQ"}]},{"ID":"20240201213589-h1luvin","Type":"NodeParagraph","Properties":{"id":"20240201213589-h1luvin","updated":"20240201213589"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/rabbitmq-logo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213590-5cob8nd","Type":"NodeParagraph","Properties":{"id":"20240201213590-5cob8nd","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 是采用 Erlang 语言实现 AMQP(Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。"}]},{"ID":"20240201213591-uh6crj2","Type":"NodeParagraph","Properties":{"id":"20240201213591-uh6crj2","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 发展到今天，被越来越多的人认可，这和它在易用性、扩展性、可靠性和高可用性等方面的卓著表现是分不开的。RabbitMQ 的具体特点可以概括为以下几点："}]},{"ID":"20240201213592-bk4phwu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-bk4phwu","updated":"20240201213592"},"Children":[{"ID":"20240201213593-b05ltnz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213593-b05ltnz","updated":"20240201213593"},"Children":[{"ID":"20240201213594-ipk0fqm","Type":"NodeParagraph","Properties":{"id":"20240201213594-ipk0fqm","updated":"20240201213594"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可靠性："},{"Type":"NodeText","Data":" RabbitMQ 使用一些机制来保证消息的可靠性，如持久化、传输确认及发布确认等。"}]}]},{"ID":"20240201213595-g2x6jgl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213595-g2x6jgl","updated":"20240201213595"},"Children":[{"ID":"20240201213596-mingrdw","Type":"NodeParagraph","Properties":{"id":"20240201213596-mingrdw","updated":"20240201213596"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"灵活的路由："},{"Type":"NodeText","Data":" 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。这个后面会在我们讲 RabbitMQ 核心概念的时候详细介绍到。"}]}]},{"ID":"20240201213597-o602bhx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213597-o602bhx","updated":"20240201213597"},"Children":[{"ID":"20240201213598-mm71wa3","Type":"NodeParagraph","Properties":{"id":"20240201213598-mm71wa3","updated":"20240201213598"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"扩展性："},{"Type":"NodeText","Data":" 多个 RabbitMQ 节点可以组成一个集群，也可以根据实际业务情况动态地扩展集群中节点。"}]}]},{"ID":"20240201213599-l8td63u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213599-l8td63u","updated":"20240201213599"},"Children":[{"ID":"20240201213600-y7r3obr","Type":"NodeParagraph","Properties":{"id":"20240201213600-y7r3obr","updated":"20240201213600"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高可用性："},{"Type":"NodeText","Data":" 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队列仍然可用。"}]}]},{"ID":"20240201213601-xcswa5i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213601-xcswa5i","updated":"20240201213601"},"Children":[{"ID":"20240201213602-nz6hy39","Type":"NodeParagraph","Properties":{"id":"20240201213602-nz6hy39","updated":"20240201213602"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"支持多种协议："},{"Type":"NodeText","Data":" RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP、MQTT 等多种消息中间件协议。"}]}]},{"ID":"20240201213603-tr1hbne","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213603-tr1hbne","updated":"20240201213603"},"Children":[{"ID":"20240201213604-e65zx2a","Type":"NodeParagraph","Properties":{"id":"20240201213604-e65zx2a","updated":"20240201213604"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多语言客户端："},{"Type":"NodeText","Data":" RabbitMQ 几乎支持所有常用语言，比如 Java、Python、Ruby、PHP、C#、JavaScript 等。"}]}]},{"ID":"20240201213605-sny6z3j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213605-sny6z3j","updated":"20240201213605"},"Children":[{"ID":"20240201213606-nqdlueo","Type":"NodeParagraph","Properties":{"id":"20240201213606-nqdlueo","updated":"20240201213606"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"易用的管理界面："},{"Type":"NodeText","Data":" RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息、集群中的节点等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。"}]}]},{"ID":"20240201213607-y4w6vaf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213607-y4w6vaf","updated":"20240201213607"},"Children":[{"ID":"20240201213608-wh0hrn5","Type":"NodeParagraph","Properties":{"id":"20240201213608-wh0hrn5","updated":"20240201213608"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"插件机制："},{"Type":"NodeText","Data":" RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI 机制"}]}]}]},{"ID":"20240201213609-xczr3fy","Type":"NodeParagraph","Properties":{"id":"20240201213609-xczr3fy","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 官网："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.rabbitmq.com/","TextMarkTextContent":"https://www.rabbitmq.com/"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213610-47du0z2","Type":"NodeParagraph","Properties":{"id":"20240201213610-47du0z2","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 更新记录（可以直观看到项目是否还在维护）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.rabbitmq.com/news.html","TextMarkTextContent":"https://www.rabbitmq.com/news.html"}]},{"ID":"20240201213611-uflscn9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213611-uflscn9","updated":"20240201213611"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Pulsar"}]},{"ID":"20240201213612-3vuh3cv","Type":"NodeParagraph","Properties":{"id":"20240201213612-3vuh3cv","updated":"20240201213612"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/pulsar-logo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213613-w4vdtvp","Type":"NodeParagraph","Properties":{"id":"20240201213613-w4vdtvp","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"Pulsar 是下一代云原生分布式消息流平台，最初由 Yahoo 开发 ，已经成为 Apache 顶级项目。"}]},{"ID":"20240201213614-mmrf9y0","Type":"NodeParagraph","Properties":{"id":"20240201213614-mmrf9y0","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"Pulsar 集消息、存储、轻量化函数式计算为一体，采用计算与存储分离架构设计，支持多租户、持久化存储、多机房跨区域数据复制，具有强一致性、高吞吐、低延时及高可扩展性等流数据存储特性，被看作是云原生时代实时消息流传输、存储和计算最佳解决方案。"}]},{"ID":"20240201213615-j3s5s49","Type":"NodeParagraph","Properties":{"id":"20240201213615-j3s5s49","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"Pulsar 的关键特性如下（摘自官网）："}]},{"ID":"20240201213616-lx7iqtw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-lx7iqtw","updated":"20240201213616"},"Children":[{"ID":"20240201213617-mbcpibc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213617-mbcpibc","updated":"20240201213617"},"Children":[{"ID":"20240201213618-fintha3","Type":"NodeParagraph","Properties":{"id":"20240201213618-fintha3","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"是下一代云原生分布式消息流平台。"}]}]},{"ID":"20240201213619-d8nvdxx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213619-d8nvdxx","updated":"20240201213619"},"Children":[{"ID":"20240201213620-ok2j1on","Type":"NodeParagraph","Properties":{"id":"20240201213620-ok2j1on","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"Pulsar 的单个实例原生支持多个集群，可跨机房在集群间无缝地完成消息复制。"}]}]},{"ID":"20240201213621-9qpfnoy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-9qpfnoy","updated":"20240201213621"},"Children":[{"ID":"20240201213622-ofnbe12","Type":"NodeParagraph","Properties":{"id":"20240201213622-ofnbe12","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"极低的发布延迟和端到端延迟。"}]}]},{"ID":"20240201213623-tq7yle3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213623-tq7yle3","updated":"20240201213623"},"Children":[{"ID":"20240201213624-0b598z9","Type":"NodeParagraph","Properties":{"id":"20240201213624-0b598z9","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"可无缝扩展到超过一百万个 topic。"}]}]},{"ID":"20240201213625-fjbixbj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-fjbixbj","updated":"20240201213625"},"Children":[{"ID":"20240201213626-eblhbjm","Type":"NodeParagraph","Properties":{"id":"20240201213626-eblhbjm","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"简单的客户端 API，支持 Java、Go、Python 和 C++。"}]}]},{"ID":"20240201213627-grp3ilv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-grp3ilv","updated":"20240201213627"},"Children":[{"ID":"20240201213628-piecqr1","Type":"NodeParagraph","Properties":{"id":"20240201213628-piecqr1","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"主题的多种订阅模式（独占、共享和故障转移）。"}]}]},{"ID":"20240201213629-9oywwrr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-9oywwrr","updated":"20240201213629"},"Children":[{"ID":"20240201213630-495bz5l","Type":"NodeParagraph","Properties":{"id":"20240201213630-495bz5l","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"通过 Apache BookKeeper 提供的持久化消息存储机制保证消息传递 。"}]}]},{"ID":"20240201213631-jydyqrp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-jydyqrp","updated":"20240201213631"},"Children":[{"ID":"20240201213632-0uqzrpm","Type":"NodeParagraph","Properties":{"id":"20240201213632-0uqzrpm","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"由轻量级的 serverless 计算框架 Pulsar Functions 实现流原生的数据处理。"}]}]},{"ID":"20240201213633-1tgwpcr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213633-1tgwpcr","updated":"20240201213633"},"Children":[{"ID":"20240201213634-oxyesum","Type":"NodeParagraph","Properties":{"id":"20240201213634-oxyesum","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"基于 Pulsar Functions 的 serverless connector 框架 Pulsar IO 使得数据更易移入、移出 Apache Pulsar。"}]}]},{"ID":"20240201213635-o4ts5rm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-o4ts5rm","updated":"20240201213635"},"Children":[{"ID":"20240201213636-l7yiuoj","Type":"NodeParagraph","Properties":{"id":"20240201213636-l7yiuoj","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"分层式存储可在数据陈旧时，将数据从热存储卸载到冷/长期存储（如 S3、GCS）中。"}]}]}]},{"ID":"20240201213637-yw79jml","Type":"NodeParagraph","Properties":{"id":"20240201213637-yw79jml","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"Pulsar 官网："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://pulsar.apache.org/","TextMarkTextContent":"https://pulsar.apache.org/"}]},{"ID":"20240201213638-6hq3eh1","Type":"NodeParagraph","Properties":{"id":"20240201213638-6hq3eh1","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"Pulsar 更新记录（可以直观看到项目是否还在维护）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/apache/pulsar/releases","TextMarkTextContent":"https://github.com/apache/pulsar/releases"}]},{"ID":"20240201213639-96zk2a8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213639-96zk2a8","updated":"20240201213639"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ActiveMQ"}]},{"ID":"20240201213640-kdror6l","Type":"NodeParagraph","Properties":{"id":"20240201213640-kdror6l","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"目前已经被淘汰，不推荐使用，不建议学习。"}]},{"ID":"20240201213641-ret812q","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213641-ret812q","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何选择？"}]},{"ID":"20240201213642-dxhqo89","Type":"NodeBlockquote","Properties":{"id":"20240201213642-dxhqo89","updated":"20240201213642"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213643-l40ynwp","Type":"NodeParagraph","Properties":{"id":"20240201213643-l40ynwp","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"参考《Java 工程师面试突击第 1 季-中华石杉老师》"}]}]},{"ID":"20240201213644-z4gmaod","Type":"NodeTable","Data":"| 对比方向 | 概要                                                                                                                                                                            |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 吞吐量   | 万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比十万级甚至是百万级的 RocketMQ 和 Kafka 低一个数量级。                                                            |\n| 可用性   | 都可以实现高可用。ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性。RocketMQ 基于分布式架构。 Kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 |\n| 时效性   | RabbitMQ 基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级，其他几个都是 ms 级。                                                                             |\n| 功能支持 | Pulsar 的功能更全面，支持多租户、多种消费模式和持久性模式等功能，是下一代云原生分布式消息流平台。                                                                               |\n| 消息丢失 | ActiveMQ 和 RabbitMQ 丢失的可能性非常低， Kafka、RocketMQ 和 Pulsar 理论上可以做到 0 丢失。                                                                                     |","TableAligns":[0,0],"Properties":{"id":"20240201213644-z4gmaod","updated":"20240201213644"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"对比方向"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"概要"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"吞吐量"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"万级的 ActiveMQ 和 RabbitMQ 的吞吐量（ActiveMQ 的性能最差）要比十万级甚至是百万级的 RocketMQ 和 Kafka 低一个数量级。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"可用性"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"都可以实现高可用。ActiveMQ 和 RabbitMQ 都是基于主从架构实现高可用性。RocketMQ 基于分布式架构。 Kafka 也是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"时效性"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"RabbitMQ 基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级，其他几个都是 ms 级。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"功能支持"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Pulsar 的功能更全面，支持多租户、多种消费模式和持久性模式等功能，是下一代云原生分布式消息流平台。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"消息丢失"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ActiveMQ 和 RabbitMQ 丢失的可能性非常低， Kafka、RocketMQ 和 Pulsar 理论上可以做到 0 丢失。"}]}]}]},{"ID":"20240201213645-l0gk5s3","Type":"NodeParagraph","Properties":{"id":"20240201213645-l0gk5s3","updated":"20240201213645"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"总结："}]},{"ID":"20240201213646-5b9shxg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-5b9shxg","updated":"20240201213646"},"Children":[{"ID":"20240201213647-gqrtkcc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-gqrtkcc","updated":"20240201213647"},"Children":[{"ID":"20240201213648-yt5ur3k","Type":"NodeParagraph","Properties":{"id":"20240201213648-yt5ur3k","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"ActiveMQ 的社区算是比较成熟，但是较目前来说，ActiveMQ 的性能比较差，而且版本迭代很慢，不推荐使用，已经被淘汰了。"}]}]},{"ID":"20240201213649-uqkdili","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-uqkdili","updated":"20240201213649"},"Children":[{"ID":"20240201213650-chegcn0","Type":"NodeParagraph","Properties":{"id":"20240201213650-chegcn0","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"RabbitMQ 在吞吐量方面虽然稍逊于 Kafka、RocketMQ 和 Pulsar，但是由于它基于 Erlang 开发，所以并发能力很强，性能极其好，延时很低，达到微秒级。但是也因为 RabbitMQ 基于 Erlang 开发，所以国内很少有公司有实力做 Erlang 源码级别的研究和定制。如果业务场景对并发量要求不是太高（十万级、百万级），那这几种消息队列中，RabbitMQ 或许是你的首选。"}]}]},{"ID":"20240201213651-chbqwwo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-chbqwwo","updated":"20240201213651"},"Children":[{"ID":"20240201213652-i3fgga8","Type":"NodeParagraph","Properties":{"id":"20240201213652-i3fgga8","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"RocketMQ 和 Pulsar 支持强一致性，对消息一致性要求比较高的场景可以使用。"}]}]},{"ID":"20240201213653-zhuuyer","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-zhuuyer","updated":"20240201213653"},"Children":[{"ID":"20240201213654-8p59d5q","Type":"NodeParagraph","Properties":{"id":"20240201213654-8p59d5q","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"RocketMQ 阿里出品，Java 系开源项目，源代码我们可以直接阅读，然后可以定制自己公司的 MQ，并且 RocketMQ 有阿里巴巴的实际业务场景的实战考验。"}]}]},{"ID":"20240201213655-8k7gqos","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-8k7gqos","updated":"20240201213655"},"Children":[{"ID":"20240201213656-5harkuh","Type":"NodeParagraph","Properties":{"id":"20240201213656-5harkuh","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"Kafka 的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms 级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展。同时 Kafka 最好是支撑较少的 topic 数量即可，保证其超高吞吐量。Kafka 唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略这个特性天然适合大数据实时计算以及日志收集。如果是大数据领域的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。"}]}]}]},{"ID":"20240201213657-8y9s4nf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213657-8y9s4nf","updated":"20240201213657"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213658-psdclpp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-psdclpp","updated":"20240201213658"},"Children":[{"ID":"20240201213659-9e1niyy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-9e1niyy","updated":"20240201213659"},"Children":[{"ID":"20240201213660-d3th1bh","Type":"NodeParagraph","Properties":{"id":"20240201213660-d3th1bh","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"《大型网站技术架构 》"}]}]},{"ID":"20240201213661-3srl5y3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-3srl5y3","updated":"20240201213661"},"Children":[{"ID":"20240201213662-jhpupjv","Type":"NodeParagraph","Properties":{"id":"20240201213662-jhpupjv","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"KRaft: Apache Kafka Without ZooKeeper："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://developer.confluent.io/learn/kraft/","TextMarkTextContent":"https://developer.confluent.io/learn/kraft/"}]}]},{"ID":"20240201213663-zsoft8c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-zsoft8c","updated":"20240201213663"},"Children":[{"ID":"20240201213664-svfs09z","Type":"NodeParagraph","Properties":{"id":"20240201213664-svfs09z","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"消息队列的使用场景是什么样的？："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/4V1jI6RylJr7Jr9JsQe73A","TextMarkTextContent":"https://mp.weixin.qq.com/s/4V1jI6RylJr7Jr9JsQe73A"}]}]}]},{"ID":"20240201213665-qy2xp3l","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-qy2xp3l","updated":"20240201213665"}}]}