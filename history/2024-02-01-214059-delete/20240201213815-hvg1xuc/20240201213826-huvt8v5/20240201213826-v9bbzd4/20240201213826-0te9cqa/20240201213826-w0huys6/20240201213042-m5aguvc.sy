{"ID":"20240201213042-m5aguvc","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213042-m5aguvc","title":"rocketmq-questions","updated":"20240201213042"},"Children":[{"ID":"20240201213043-5otoroz","Type":"NodeThematicBreak","Properties":{"id":"20240201213043-5otoroz","updated":"20240201213043"}},{"ID":"20240201213044-eikkk88","Type":"NodeParagraph","Properties":{"id":"20240201213044-eikkk88","updated":"20240201213044"},"Children":[{"Type":"NodeText","Data":"title: RocketMQ常见问题总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 高性能"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213045-o88c3cy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213045-o88c3cy","updated":"20240201213045"},"Children":[{"ID":"20240201213046-kxzffuo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213046-kxzffuo","updated":"20240201213046"},"Children":[{"ID":"20240201213047-lvj0oc0","Type":"NodeParagraph","Properties":{"id":"20240201213047-lvj0oc0","updated":"20240201213047"},"Children":[{"Type":"NodeText","Data":"RocketMQ"}]}]},{"ID":"20240201213048-aeu3hdr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213048-aeu3hdr","updated":"20240201213048"},"Children":[{"ID":"20240201213049-tyx083e","Type":"NodeParagraph","Properties":{"id":"20240201213049-tyx083e","updated":"20240201213049"},"Children":[{"Type":"NodeText","Data":"消息队列"}]}]}]},{"ID":"20240201213050-jv33rkd","Type":"NodeThematicBreak","Properties":{"id":"20240201213050-jv33rkd","updated":"20240201213050"}},{"ID":"20240201213051-903ateu","Type":"NodeBlockquote","Properties":{"id":"20240201213051-903ateu","updated":"20240201213051"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213052-e1rfg0z","Type":"NodeParagraph","Properties":{"id":"20240201213052-e1rfg0z","updated":"20240201213052"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==\u0026mid=2247485969\u0026idx=1\u0026sn=6bd53abde30d42a778d5a35ec104428c\u0026chksm=cea245daf9d5cccce631f93115f0c2c4a7634e55f5bef9009fd03f5a0ffa55b745b5ef4f0530\u0026token=294077121\u0026lang=zh_CN#rd","TextMarkTextContent":"本文由 FrancisQ 投稿！"},{"Type":"NodeText","Data":" 相比原文主要进行了下面这些完善："}]},{"ID":"20240201213053-u3delcn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213053-u3delcn","updated":"20240201213053"},"Children":[{"ID":"20240201213054-6ntu82l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213054-6ntu82l","updated":"20240201213054"},"Children":[{"ID":"20240201213055-q64anyb","Type":"NodeParagraph","Properties":{"id":"20240201213055-q64anyb","updated":"20240201213055"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/pull/2133","TextMarkTextContent":"分析了 RocketMQ 高性能读写的原因和顺序消费的具体实现"}]}]},{"ID":"20240201213056-yflyp4n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213056-yflyp4n","updated":"20240201213056"},"Children":[{"ID":"20240201213057-m9jbex1","Type":"NodeParagraph","Properties":{"id":"20240201213057-m9jbex1","updated":"20240201213057"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/pull/2134","TextMarkTextContent":"增加了消息类型、消费者类型、消费者组和生产者组的介绍"}]}]}]}]},{"ID":"20240201213058-f3e8w8c","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213058-f3e8w8c","updated":"20240201213058"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息队列扫盲"}]},{"ID":"20240201213059-msnr3qh","Type":"NodeParagraph","Properties":{"id":"20240201213059-msnr3qh","updated":"20240201213059"},"Children":[{"Type":"NodeText","Data":"消息队列顾名思义就是存放消息的队列，队列我就不解释了，别告诉我你连队列都不知道是啥吧？"}]},{"ID":"20240201213060-7ancykx","Type":"NodeParagraph","Properties":{"id":"20240201213060-7ancykx","updated":"20240201213060"},"Children":[{"Type":"NodeText","Data":"所以问题并不是消息队列是什么，而是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列为什么会出现？消息队列能用来干什么？用它来干这些事会带来什么好处？消息队列会带来副作用吗？"}]},{"ID":"20240201213061-zexwlmw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213061-zexwlmw","updated":"20240201213061"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息队列为什么会出现？"}]},{"ID":"20240201213062-ga5k6ws","Type":"NodeParagraph","Properties":{"id":"20240201213062-ga5k6ws","updated":"20240201213062"},"Children":[{"Type":"NodeText","Data":"消息队``列算是作为后端程序员的一个必备技能吧，因为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式应用必定涉及到各个系统之间的通信问题"},{"Type":"NodeText","Data":"，这个时候消息队列也应运而生了。可以说分布式的产生是消息队列的基础，而分布式怕是一个很古老的概念了吧，所以消息队列也是一个很古老的中间件了。"}]},{"ID":"20240201213063-h5kl3zn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213063-h5kl3zn","updated":"20240201213063"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息队列能用来干什么？"}]},{"ID":"20240201213064-lcknkz3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213064-lcknkz3","updated":"20240201213064"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"异步"}]},{"ID":"20240201213065-yhas2vo","Type":"NodeParagraph","Properties":{"id":"20240201213065-yhas2vo","updated":"20240201213065"},"Children":[{"Type":"NodeText","Data":"你可能会反驳我，应用之间的通信又不是只能由消息队列解决，好好的通信为什么中间非要插一个消息队列呢？我不能直接进行通信吗？"}]},{"ID":"20240201213066-huaok5l","Type":"NodeParagraph","Properties":{"id":"20240201213066-huaok5l","updated":"20240201213066"},"Children":[{"Type":"NodeText","Data":"很好 👍，你又提出了一个概念，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同步通信"},{"Type":"NodeText","Data":"。就比如现在业界使用比较多的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dubbo"},{"Type":"NodeText","Data":" 就是一个适用于各个系统之间同步通信的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RPC"},{"Type":"NodeText","Data":" 框架。"}]},{"ID":"20240201213067-ljovv3t","Type":"NodeParagraph","Properties":{"id":"20240201213067-ljovv3t","updated":"20240201213067"},"Children":[{"Type":"NodeText","Data":"我来举个 🌰 吧，比如我们有一个购票系统，需求是用户在购买完之后能接收到购买完成的短信。"}]},{"ID":"20240201213068-oirgq5x","Type":"NodeParagraph","Properties":{"id":"20240201213068-oirgq5x","updated":"20240201213068"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef37fee7e09230.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213069-svg7x9s","Type":"NodeParagraph","Properties":{"id":"20240201213069-svg7x9s","updated":"20240201213069"},"Children":[{"Type":"NodeText","Data":"我们省略中间的网络通信时间消耗，假如购票系统处理需要 150ms ，短信系统处理需要 200ms ，那么整个处理流程的时间消耗就是 150ms + 200ms = 350ms。"}]},{"ID":"20240201213070-hxpb7tm","Type":"NodeParagraph","Properties":{"id":"20240201213070-hxpb7tm","updated":"20240201213070"},"Children":[{"Type":"NodeText","Data":"当然，乍看没什么问题。可是仔细一想你就感觉有点问题，我用户购票在购票系统的时候其实就已经完成了购买，而我现在通过同步调用非要让整个请求拉长时间，而短信系统这玩意又不是很有必要，它仅仅是一个辅助功能增强用户体验感而已。我现在整个调用流程就有点 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"头重脚轻"},{"Type":"NodeText","Data":" 的感觉了，购票是一个不太耗时的流程，而我现在因为同步调用，非要等待发送短信这个比较耗时的操作才返回结果。那我如果再加一个发送邮件呢？"}]},{"ID":"20240201213071-iwhuez2","Type":"NodeParagraph","Properties":{"id":"20240201213071-iwhuez2","updated":"20240201213071"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef380429cf373e.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213072-r78owek","Type":"NodeParagraph","Properties":{"id":"20240201213072-r78owek","updated":"20240201213072"},"Children":[{"Type":"NodeText","Data":"这样整个系统的调用链又变长了，整个时间就变成了 550ms。"}]},{"ID":"20240201213073-mk8l8se","Type":"NodeParagraph","Properties":{"id":"20240201213073-mk8l8se","updated":"20240201213073"},"Children":[{"Type":"NodeText","Data":"当我们在学生时代需要在食堂排队的时候，我们和食堂大妈就是一个同步的模型。"}]},{"ID":"20240201213074-hol62ck","Type":"NodeParagraph","Properties":{"id":"20240201213074-hol62ck","updated":"20240201213074"},"Children":[{"Type":"NodeText","Data":"我们需要告诉食堂大妈：“姐姐，给我加个鸡腿，再加个酸辣土豆丝，帮我浇点汁上去，多打点饭哦 😋😋😋” 咦~~~ 为了多吃点，真恶心。"}]},{"ID":"20240201213075-goq11vg","Type":"NodeParagraph","Properties":{"id":"20240201213075-goq11vg","updated":"20240201213075"},"Children":[{"Type":"NodeText","Data":"然后大妈帮我们打饭配菜，我们看着大妈那颤抖的手和掉落的土豆丝不禁咽了咽口水。"}]},{"ID":"20240201213076-i5ce2t2","Type":"NodeParagraph","Properties":{"id":"20240201213076-i5ce2t2","updated":"20240201213076"},"Children":[{"Type":"NodeText","Data":"最终我们从大妈手中接过饭菜然后去寻找座位了..."}]},{"ID":"20240201213077-15004qp","Type":"NodeParagraph","Properties":{"id":"20240201213077-15004qp","updated":"20240201213077"},"Children":[{"Type":"NodeText","Data":"回想一下，我们在给大妈发送需要的信息之后我们是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同步等待大妈给我配好饭菜"},{"Type":"NodeText","Data":" 的，上面我们只是加了鸡腿和土豆丝，万一我再加一个番茄牛腩，韭菜鸡蛋，这样是不是大妈打饭配菜的流程就会变长，我们等待的时间也会相应的变长。"}]},{"ID":"20240201213078-xtgtb5v","Type":"NodeParagraph","Properties":{"id":"20240201213078-xtgtb5v","updated":"20240201213078"},"Children":[{"Type":"NodeText","Data":"那后来，我们工作赚钱了有钱去饭店吃饭了，我们告诉服务员来一碗牛肉面加个荷包蛋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"(传达一个消息)"},{"Type":"NodeText","Data":" ，然后我们就可以在饭桌上安心的玩手机了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"(干自己其他事情)"},{"Type":"NodeText","Data":" ，等到我们的牛肉面上了我们就可以吃了。这其中我们也就传达了一个消息，然后我们又转过头干其他事情了。这其中虽然做面的时间没有变短，但是我们只需要传达一个消息就可以干其他事情了，这是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异步"},{"Type":"NodeText","Data":" 的概念。"}]},{"ID":"20240201213079-9e3txht","Type":"NodeParagraph","Properties":{"id":"20240201213079-9e3txht","updated":"20240201213079"},"Children":[{"Type":"NodeText","Data":"所以，为了解决这一个问题，聪明的程序员在中间也加了个类似于服务员的中间件——消息队列。这个时候我们就可以把模型给改造了。"}]},{"ID":"20240201213080-nguztrk","Type":"NodeParagraph","Properties":{"id":"20240201213080-nguztrk","updated":"20240201213080"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef38124f55eaea.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213081-p6e2h43","Type":"NodeParagraph","Properties":{"id":"20240201213081-p6e2h43","updated":"20240201213081"},"Children":[{"Type":"NodeText","Data":"这样，我们在将消息存入消息队列之后我们就可以直接返回了(我们告诉服务员我们要吃什么然后玩手机)，所以整个耗时只是 150ms + 10ms = 160ms。"}]},{"ID":"20240201213082-gp97uqy","Type":"NodeBlockquote","Properties":{"id":"20240201213082-gp97uqy","updated":"20240201213082"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213083-oosiol3","Type":"NodeParagraph","Properties":{"id":"20240201213083-oosiol3","updated":"20240201213083"},"Children":[{"Type":"NodeText","Data":"但是你需要注意的是，整个流程的时长是没变的，就像你仅仅告诉服务员要吃什么是不会影响到做面的速度的。"}]}]},{"ID":"20240201213084-gw6gzal","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213084-gw6gzal","updated":"20240201213084"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"解耦"}]},{"ID":"20240201213085-44btrvm","Type":"NodeParagraph","Properties":{"id":"20240201213085-44btrvm","updated":"20240201213085"},"Children":[{"Type":"NodeText","Data":"回到最初同步调用的过程，我们写个伪代码简单概括一下。"}]},{"ID":"20240201213086-yjckbik","Type":"NodeParagraph","Properties":{"id":"20240201213086-yjckbik","updated":"20240201213086"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef381a505d3e1f.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213087-wxy0zty","Type":"NodeParagraph","Properties":{"id":"20240201213087-wxy0zty","updated":"20240201213087"},"Children":[{"Type":"NodeText","Data":"那么第二步，我们又添加了一个发送邮件，我们就得重新去修改代码，如果我们又加一个需求：用户购买完还需要给他加积分，这个时候我们是不是又得改代码？"}]},{"ID":"20240201213088-af5w5gr","Type":"NodeParagraph","Properties":{"id":"20240201213088-af5w5gr","updated":"20240201213088"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef381c4e1b1ac7.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213089-e3mqi93","Type":"NodeParagraph","Properties":{"id":"20240201213089-e3mqi93","updated":"20240201213089"},"Children":[{"Type":"NodeText","Data":"如果你觉得还行，那么我这个时候不要发邮件这个服务了呢，我是不是又得改代码，又得重启应用？"}]},{"ID":"20240201213090-26ba19h","Type":"NodeParagraph","Properties":{"id":"20240201213090-26ba19h","updated":"20240201213090"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef381f273a66bd.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213091-wbmcwxl","Type":"NodeParagraph","Properties":{"id":"20240201213091-wbmcwxl","updated":"20240201213091"},"Children":[{"Type":"NodeText","Data":"这样改来改去是不是很麻烦，那么 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"此时我们就用一个消息队列在中间进行解耦"},{"Type":"NodeText","Data":" 。你需要注意的是，我们后面的发送短信、发送邮件、添加积分等一些操作都依赖于上面的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"result"},{"Type":"NodeText","Data":" ，这东西抽象出来就是购票的处理结果呀，比如订单号，用户账号等等，也就是说我们后面的一系列服务都是需要同样的消息来进行处理。既然这样，我们是不是可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“广播消息”"},{"Type":"NodeText","Data":" 来实现。"}]},{"ID":"20240201213092-i6vbrdg","Type":"NodeParagraph","Properties":{"id":"20240201213092-i6vbrdg","updated":"20240201213092"},"Children":[{"Type":"NodeText","Data":"我上面所讲的“广播”并不是真正的广播，而是接下来的系统作为消费者去 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"订阅"},{"Type":"NodeText","Data":" 特定的主题。比如我们这里的主题就可以叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"订票"},{"Type":"NodeText","Data":" ，我们购买系统作为一个生产者去生产这条消息放入消息队列，然后消费者订阅了这个主题，会从消息队列中拉取消息并消费。就比如我们刚刚画的那张图，你会发现，在生产者这边我们只需要关注 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"生产消息到指定主题中"},{"Type":"NodeText","Data":" ，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消费者只需要关注从指定主题中拉取消息"},{"Type":"NodeText","Data":" 就行了。"}]},{"ID":"20240201213093-qbvvc32","Type":"NodeParagraph","Properties":{"id":"20240201213093-qbvvc32","updated":"20240201213093"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef382674b66892.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213094-lf3s56x","Type":"NodeBlockquote","Properties":{"id":"20240201213094-lf3s56x","updated":"20240201213094"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213095-ntcstah","Type":"NodeParagraph","Properties":{"id":"20240201213095-ntcstah","updated":"20240201213095"},"Children":[{"Type":"NodeText","Data":"如果没有消息队列，每当一个新的业务接入，我们都要在主系统调用新接口、或者当我们取消某些业务，我们也得在主系统删除某些接口调用。有了消息队列，我们只需要关心消息是否送达了队列，至于谁希望订阅，接下来收到消息如何处理，是下游的事情，无疑极大地减少了开发和联调的工作量。"}]}]},{"ID":"20240201213096-pgzjhc2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213096-pgzjhc2","updated":"20240201213096"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"削峰"}]},{"ID":"20240201213097-mbgf6xi","Type":"NodeParagraph","Properties":{"id":"20240201213097-mbgf6xi","updated":"20240201213097"},"Children":[{"Type":"NodeText","Data":"我们再次回到一开始我们使用同步调用系统的情况，并且思考一下，如果此时有大量用户请求购票整个系统会变成什么样？"}]},{"ID":"20240201213098-v2vz3z9","Type":"NodeParagraph","Properties":{"id":"20240201213098-v2vz3z9","updated":"20240201213098"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef382a9756bb1c.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213099-28zlxkx","Type":"NodeParagraph","Properties":{"id":"20240201213099-28zlxkx","updated":"20240201213099"},"Children":[{"Type":"NodeText","Data":"如果，此时有一万的请求进入购票系统，我们知道运行我们主业务的服务器配置一般会比较好，所以这里我们假设购票系统能承受这一万的用户请求，那么也就意味着我们同时也会出现一万调用发短信服务的请求。而对于短信系统来说并不是我们的主要业务，所以我们配备的硬件资源并不会太高，那么你觉得现在这个短信系统能承受这一万的峰值么，且不说能不能承受，系统会不会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"直接崩溃"},{"Type":"NodeText","Data":" 了？"}]},{"ID":"20240201213100-w410i95","Type":"NodeParagraph","Properties":{"id":"20240201213100-w410i95","updated":"20240201213100"},"Children":[{"Type":"NodeText","Data":"短信业务又不是我们的主业务，我们能不能 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"折中处理"},{"Type":"NodeText","Data":" 呢？如果我们把购买完成的信息发送到消息队列中，而短信系统 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"尽自己所能地去消息队列中取消息和消费消息"},{"Type":"NodeText","Data":" ，即使处理速度慢一点也无所谓，只要我们的系统没有崩溃就行了。"}]},{"ID":"20240201213101-2iql8av","Type":"NodeParagraph","Properties":{"id":"20240201213101-2iql8av","updated":"20240201213101"},"Children":[{"Type":"NodeText","Data":"留得江山在，还怕没柴烧？你敢说每次发送验证码的时候是一发你就收到了的么？"}]},{"ID":"20240201213102-th34vyl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213102-th34vyl","updated":"20240201213102"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息队列能带来什么好处？"}]},{"ID":"20240201213103-oijuxva","Type":"NodeParagraph","Properties":{"id":"20240201213103-oijuxva","updated":"20240201213103"},"Children":[{"Type":"NodeText","Data":"其实上面我已经说了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异步、解耦、削峰。"},{"Type":"NodeText","Data":" 哪怕你上面的都没看懂也千万要记住这六个字，因为他不仅是消息队列的精华，更是编程和架构的精华。"}]},{"ID":"20240201213104-i6axvfm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213104-i6axvfm","updated":"20240201213104"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息队列会带来副作用吗？"}]},{"ID":"20240201213105-i8qhcus","Type":"NodeParagraph","Properties":{"id":"20240201213105-i8qhcus","updated":"20240201213105"},"Children":[{"Type":"NodeText","Data":"没有哪一门技术是“银弹”，消息队列也有它的副作用。"}]},{"ID":"20240201213106-yjze3so","Type":"NodeParagraph","Properties":{"id":"20240201213106-yjze3so","updated":"20240201213106"},"Children":[{"Type":"NodeText","Data":"比如，本来好好的两个系统之间的调用，我中间加了个消息队列，如果消息队列挂了怎么办呢？是不是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"降低了系统的可用性"},{"Type":"NodeText","Data":" ？"}]},{"ID":"20240201213107-2gmfjvc","Type":"NodeParagraph","Properties":{"id":"20240201213107-2gmfjvc","updated":"20240201213107"},"Children":[{"Type":"NodeText","Data":"那这样是不是要保证 HA(高可用)？是不是要搞集群？那么我 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"整个系统的复杂度是不是上升了"},{"Type":"NodeText","Data":" ？"}]},{"ID":"20240201213108-7ngy4ln","Type":"NodeParagraph","Properties":{"id":"20240201213108-7ngy4ln","updated":"20240201213108"},"Children":[{"Type":"NodeText","Data":"抛开上面的问题不讲，万一我发送方发送失败了，然后执行重试，这样就可能产生重复的消息。"}]},{"ID":"20240201213109-iv7snw5","Type":"NodeParagraph","Properties":{"id":"20240201213109-iv7snw5","updated":"20240201213109"},"Children":[{"Type":"NodeText","Data":"或者我消费端处理失败了，请求重发，这样也会产生重复的消息。"}]},{"ID":"20240201213110-110v96t","Type":"NodeParagraph","Properties":{"id":"20240201213110-110v96t","updated":"20240201213110"},"Children":[{"Type":"NodeText","Data":"对于一些微服务来说，消费重复消息会带来更大的麻烦，比如增加积分，这个时候我加了多次是不是对其他用户不公平？"}]},{"ID":"20240201213111-1slghk9","Type":"NodeParagraph","Properties":{"id":"20240201213111-1slghk9","updated":"20240201213111"},"Children":[{"Type":"NodeText","Data":"那么，又 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何解决重复消费消息的问题"},{"Type":"NodeText","Data":" 呢？"}]},{"ID":"20240201213112-kcb72xa","Type":"NodeParagraph","Properties":{"id":"20240201213112-kcb72xa","updated":"20240201213112"},"Children":[{"Type":"NodeText","Data":"如果我们此时的消息需要保证严格的顺序性怎么办呢？比如生产者生产了一系列的有序消息(对一个 id 为 1 的记录进行删除增加修改)，但是我们知道在发布订阅模型中，对于主题是无顺序的，那么这个时候就会导致对于消费者消费消息的时候没有按照生产者的发送顺序消费，比如这个时候我们消费的顺序为修改删除增加，如果该记录涉及到金额的话是不是会出大事情？"}]},{"ID":"20240201213113-g1dmaob","Type":"NodeParagraph","Properties":{"id":"20240201213113-g1dmaob","updated":"20240201213113"},"Children":[{"Type":"NodeText","Data":"那么，又 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何解决消息的顺序消费问题"},{"Type":"NodeText","Data":" 呢？"}]},{"ID":"20240201213114-ilgu8gi","Type":"NodeParagraph","Properties":{"id":"20240201213114-ilgu8gi","updated":"20240201213114"},"Children":[{"Type":"NodeText","Data":"就拿我们上面所讲的分布式系统来说，用户购票完成之后是不是需要增加账户积分？在同一个系统中我们一般会使用事务来进行解决，如果用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring"},{"Type":"NodeText","Data":" 的话我们在上面伪代码中加入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解就好了。但是在不同系统中如何保证事务呢？总不能这个系统我扣钱成功了你那积分系统积分没加吧？或者说我这扣钱明明失败了，你那积分系统给我加了积分。"}]},{"ID":"20240201213115-lbitgfh","Type":"NodeParagraph","Properties":{"id":"20240201213115-lbitgfh","updated":"20240201213115"},"Children":[{"Type":"NodeText","Data":"那么，又如何 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决分布式事务问题"},{"Type":"NodeText","Data":" 呢？"}]},{"ID":"20240201213116-jfrby64","Type":"NodeParagraph","Properties":{"id":"20240201213116-jfrby64","updated":"20240201213116"},"Children":[{"Type":"NodeText","Data":"我们刚刚说了，消息队列可以进行削峰操作，那如果我的消费者如果消费很慢或者生产者生产消息很快，这样是不是会将消息堆积在消息队列中？"}]},{"ID":"20240201213117-71m25xi","Type":"NodeParagraph","Properties":{"id":"20240201213117-71m25xi","updated":"20240201213117"},"Children":[{"Type":"NodeText","Data":"那么，又如何 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决消息堆积的问题"},{"Type":"NodeText","Data":" 呢？"}]},{"ID":"20240201213118-xhwpjw3","Type":"NodeParagraph","Properties":{"id":"20240201213118-xhwpjw3","updated":"20240201213118"},"Children":[{"Type":"NodeText","Data":"可用性降低，复杂度上升，又带来一系列的重复消费，顺序消费，分布式事务，消息堆积的问题，这消息队列还怎么用啊 😵？"}]},{"ID":"20240201213119-vpod92n","Type":"NodeParagraph","Properties":{"id":"20240201213119-vpod92n","updated":"20240201213119"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef382d709abc9d.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213120-4d847t2","Type":"NodeParagraph","Properties":{"id":"20240201213120-4d847t2","updated":"20240201213120"},"Children":[{"Type":"NodeText","Data":"别急，办法总是有的。"}]},{"ID":"20240201213121-7597o3t","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213121-7597o3t","updated":"20240201213121"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 是什么？"}]},{"ID":"20240201213122-6pqm1f9","Type":"NodeParagraph","Properties":{"id":"20240201213122-6pqm1f9","updated":"20240201213122"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef383014430799.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213123-s6ao5uv","Type":"NodeParagraph","Properties":{"id":"20240201213123-s6ao5uv","updated":"20240201213123"},"Children":[{"Type":"NodeText","Data":"哇，你个混蛋！上面给我抛出那么多问题，你现在又讲 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" ，还让不让人活了？！🤬"}]},{"ID":"20240201213124-ns95tlj","Type":"NodeParagraph","Properties":{"id":"20240201213124-ns95tlj","updated":"20240201213124"},"Children":[{"Type":"NodeText","Data":"别急别急，话说你现在清楚 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQ"},{"Type":"NodeText","Data":" 的构造吗，我还没讲呢，我们先搞明白 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQ"},{"Type":"NodeText","Data":" 的内部构造，再来看看如何解决上面的一系列问题吧，不过你最好带着问题去阅读和了解喔。"}]},{"ID":"20240201213125-7qrfynq","Type":"NodeParagraph","Properties":{"id":"20240201213125-7qrfynq","updated":"20240201213125"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列模型"},{"Type":"NodeText","Data":" 的消息中间件，具有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高性能、高可靠、高实时、分布式"},{"Type":"NodeText","Data":" 的特点。它是一个采用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Java"},{"Type":"NodeText","Data":" 语言开发的分布式的消息系统，由阿里巴巴团队开发，在 2016 年底贡献给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Apache"},{"Type":"NodeText","Data":"，成为了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Apache"},{"Type":"NodeText","Data":" 的一个顶级项目。 在阿里内部，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 很好地服务了集团大大小小上千个应用，在每年的双十一当天，更有不可思议的万亿级消息通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 流转。"}]},{"ID":"20240201213126-z3c29pu","Type":"NodeParagraph","Properties":{"id":"20240201213126-z3c29pu","updated":"20240201213126"},"Children":[{"Type":"NodeText","Data":"废话不多说，想要了解 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 历史的同学可以自己去搜寻资料。听完上面的介绍，你只要知道 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 很快、很牛、而且经历过双十一的实践就行了！"}]},{"ID":"20240201213127-qilpwar","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213127-qilpwar","updated":"20240201213127"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"队列模型和主题模型是什么？"}]},{"ID":"20240201213128-5s6m3le","Type":"NodeParagraph","Properties":{"id":"20240201213128-5s6m3le","updated":"20240201213128"},"Children":[{"Type":"NodeText","Data":"在谈 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 的技术架构之前，我们先来了解一下两个名词概念——"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列模型"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题模型"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213129-itcc4kv","Type":"NodeParagraph","Properties":{"id":"20240201213129-itcc4kv","updated":"20240201213129"},"Children":[{"Type":"NodeText","Data":"首先我问一个问题，消息队列为什么要叫消息队列？"}]},{"ID":"20240201213130-w63611t","Type":"NodeParagraph","Properties":{"id":"20240201213130-w63611t","updated":"20240201213130"},"Children":[{"Type":"NodeText","Data":"你可能觉得很弱智，这玩意不就是存放消息的队列嘛？不叫消息队列叫什么？"}]},{"ID":"20240201213131-th5qpsu","Type":"NodeParagraph","Properties":{"id":"20240201213131-th5qpsu","updated":"20240201213131"},"Children":[{"Type":"NodeText","Data":"的确，早期的消息中间件是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列"},{"Type":"NodeText","Data":" 这一模型来实现的，可能是历史原因，我们都习惯把消息中间件成为消息队列。"}]},{"ID":"20240201213132-ptod0tp","Type":"NodeParagraph","Properties":{"id":"20240201213132-ptod0tp","updated":"20240201213132"},"Children":[{"Type":"NodeText","Data":"但是，如今例如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 这些优秀的消息中间件不仅仅是通过一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列"},{"Type":"NodeText","Data":" 来实现消息存储的。"}]},{"ID":"20240201213133-rkpcjhj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213133-rkpcjhj","updated":"20240201213133"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"队列模型"}]},{"ID":"20240201213134-w06bkrm","Type":"NodeParagraph","Properties":{"id":"20240201213134-w06bkrm","updated":"20240201213134"},"Children":[{"Type":"NodeText","Data":"就像我们理解队列一样，消息中间件的队列模型就真的只是一个队列。。。我画一张图给大家理解。"}]},{"ID":"20240201213135-9a6nebr","Type":"NodeParagraph","Properties":{"id":"20240201213135-9a6nebr","updated":"20240201213135"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef3834ae653469.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213136-qhf9b64","Type":"NodeParagraph","Properties":{"id":"20240201213136-qhf9b64","updated":"20240201213136"},"Children":[{"Type":"NodeText","Data":"在一开始我跟你提到了一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“广播”"},{"Type":"NodeText","Data":" 的概念，也就是说如果我们此时我们需要将一个消息发送给多个消费者(比如此时我需要将信息发送给短信系统和邮件系统)，这个时候单个队列即不能满足需求了。"}]},{"ID":"20240201213137-4bca6yf","Type":"NodeParagraph","Properties":{"id":"20240201213137-4bca6yf","updated":"20240201213137"},"Children":[{"Type":"NodeText","Data":"当然你可以让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":" 生产消息放入多个队列中，然后每个队列去对应每一个消费者。问题是可以解决，创建多个队列并且复制多份消息是会很影响资源和性能的。而且，这样子就会导致生产者需要知道具体消费者个数然后去复制对应数量的消息队列，这就违背我们消息中间件的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解耦"},{"Type":"NodeText","Data":" 这一原则。"}]},{"ID":"20240201213138-voz5y5o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213138-voz5y5o","updated":"20240201213138"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"主题模型"}]},{"ID":"20240201213139-upnr79z","Type":"NodeParagraph","Properties":{"id":"20240201213139-upnr79z","updated":"20240201213139"},"Children":[{"Type":"NodeText","Data":"那么有没有好的方法去解决这一个问题呢？有，那就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题模型"},{"Type":"NodeText","Data":" 或者可以称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"发布订阅模型"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213140-l313lm8","Type":"NodeBlockquote","Properties":{"id":"20240201213140-l313lm8","updated":"20240201213140"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213141-d22w6ui","Type":"NodeParagraph","Properties":{"id":"20240201213141-d22w6ui","updated":"20240201213141"},"Children":[{"Type":"NodeText","Data":"感兴趣的同学可以去了解一下设计模式里面的观察者模式并且手动实现一下，我相信你会有所收获的。"}]}]},{"ID":"20240201213142-yjdjfzg","Type":"NodeParagraph","Properties":{"id":"20240201213142-yjdjfzg","updated":"20240201213142"},"Children":[{"Type":"NodeText","Data":"在主题模型中，消息的生产者称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"发布者(Publisher)"},{"Type":"NodeText","Data":" ，消息的消费者称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"订阅者(Subscriber)"},{"Type":"NodeText","Data":" ，存放消息的容器称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题(Topic)"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213143-ua578rm","Type":"NodeParagraph","Properties":{"id":"20240201213143-ua578rm","updated":"20240201213143"},"Children":[{"Type":"NodeText","Data":"其中，发布者将消息发送到指定主题中，订阅者需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提前订阅主题"},{"Type":"NodeText","Data":" 才能接受特定主题的消息。"}]},{"ID":"20240201213144-79b4kgm","Type":"NodeParagraph","Properties":{"id":"20240201213144-79b4kgm","updated":"20240201213144"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef3837887d9a54sds.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213145-jy1t54n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213145-jy1t54n","updated":"20240201213145"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 中的消息模型"}]},{"ID":"20240201213146-vdgw69s","Type":"NodeParagraph","Properties":{"id":"20240201213146-vdgw69s","updated":"20240201213146"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中的消息模型就是按照 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题模型"},{"Type":"NodeText","Data":" 所实现的。你可能会好奇这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题"},{"Type":"NodeText","Data":" 到底是怎么实现的呢？你上面也没有讲到呀！"}]},{"ID":"20240201213147-l5l98rs","Type":"NodeParagraph","Properties":{"id":"20240201213147-l5l98rs","updated":"20240201213147"},"Children":[{"Type":"NodeText","Data":"其实对于主题模型的实现来说每个消息中间件的底层设计都是不一样的，就比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分区"},{"Type":"NodeText","Data":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列"},{"Type":"NodeText","Data":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RabbitMQ"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Exchange"},{"Type":"NodeText","Data":" 。我们可以理解为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题模型/发布订阅模型"},{"Type":"NodeText","Data":" 就是一个标准，那些中间件只不过照着这个标准去实现而已。"}]},{"ID":"20240201213148-lyzkq36","Type":"NodeParagraph","Properties":{"id":"20240201213148-lyzkq36","updated":"20240201213148"},"Children":[{"Type":"NodeText","Data":"所以，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题模型"},{"Type":"NodeText","Data":" 到底是如何实现的呢？首先我画一张图，大家尝试着去理解一下。"}]},{"ID":"20240201213149-drdx7ep","Type":"NodeParagraph","Properties":{"id":"20240201213149-drdx7ep","updated":"20240201213149"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef383d3e8c9788.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213150-s3f5avc","Type":"NodeParagraph","Properties":{"id":"20240201213150-s3f5avc","updated":"20240201213150"},"Children":[{"Type":"NodeText","Data":"我们可以看到在整个图中有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer Group"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer Group"},{"Type":"NodeText","Data":" 三个角色，我来分别介绍一下他们。"}]},{"ID":"20240201213151-aq2cvlx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213151-aq2cvlx","updated":"20240201213151"},"Children":[{"ID":"20240201213152-hz68ovv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213152-hz68ovv","updated":"20240201213152"},"Children":[{"ID":"20240201213153-ygrqks8","Type":"NodeParagraph","Properties":{"id":"20240201213153-ygrqks8","updated":"20240201213153"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer Group"},{"Type":"NodeText","Data":" 生产者组：代表某一类的生产者，比如我们有多个秒杀系统作为生产者，这多个合在一起就是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer Group"},{"Type":"NodeText","Data":" 生产者组，它们一般生产相同的消息。"}]}]},{"ID":"20240201213154-0dk2f9q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213154-0dk2f9q","updated":"20240201213154"},"Children":[{"ID":"20240201213155-gm7n2op","Type":"NodeParagraph","Properties":{"id":"20240201213155-gm7n2op","updated":"20240201213155"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer Group"},{"Type":"NodeText","Data":" 消费者组：代表某一类的消费者，比如我们有多个短信系统作为消费者，这多个合在一起就是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer Group"},{"Type":"NodeText","Data":" 消费者组，它们一般消费相同的消息。"}]}]},{"ID":"20240201213156-depi34m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213156-depi34m","updated":"20240201213156"},"Children":[{"ID":"20240201213157-sjt8cl5","Type":"NodeParagraph","Properties":{"id":"20240201213157-sjt8cl5","updated":"20240201213157"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 主题：代表一类消息，比如订单消息，物流消息等等。"}]}]}]},{"ID":"20240201213158-iqsi1z0","Type":"NodeParagraph","Properties":{"id":"20240201213158-iqsi1z0","updated":"20240201213158"},"Children":[{"Type":"NodeText","Data":"你可以看到图中生产者组中的生产者会向主题发送消息，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题中存在多个队列"},{"Type":"NodeText","Data":"，生产者每次生产消息之后是指定主题中的某个队列发送消息的。"}]},{"ID":"20240201213159-28u9x6c","Type":"NodeParagraph","Properties":{"id":"20240201213159-28u9x6c","updated":"20240201213159"},"Children":[{"Type":"NodeText","Data":"每个主题中都有多个队列(分布在不同的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"中，如果是集群的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"又分布在不同的服务器中)，集群消费模式下，一个消费者集群多台机器共同消费一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"topic"},{"Type":"NodeText","Data":" 的多个队列，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一个队列只会被一个消费者消费"},{"Type":"NodeText","Data":"。如果某个消费者挂掉，分组内其它消费者会接替挂掉的消费者继续消费。就像上图中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer1"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer2"},{"Type":"NodeText","Data":" 分别对应着两个队列，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer3"},{"Type":"NodeText","Data":" 是没有队列对应的，所以一般来讲要控制 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消费者组中的消费者个数和主题中队列个数相同"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213160-mw7psqn","Type":"NodeParagraph","Properties":{"id":"20240201213160-mw7psqn","updated":"20240201213160"},"Children":[{"Type":"NodeText","Data":"当然也可以消费者个数小于队列个数，只不过不太建议。如下图。"}]},{"ID":"20240201213161-ilzos24","Type":"NodeParagraph","Properties":{"id":"20240201213161-ilzos24","updated":"20240201213161"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef3850c808d707.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213162-8xh9c37","Type":"NodeParagraph","Properties":{"id":"20240201213162-8xh9c37","updated":"20240201213162"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"每个消费组在每个队列上维护一个消费位置"},{"Type":"NodeText","Data":" ，为什么呢？"}]},{"ID":"20240201213163-pxh52tv","Type":"NodeParagraph","Properties":{"id":"20240201213163-pxh52tv","updated":"20240201213163"},"Children":[{"Type":"NodeText","Data":"因为我们刚刚画的仅仅是一个消费者组，我们知道在发布订阅模式中一般会涉及到多个消费者组，而每个消费者组在每个队列中的消费位置都是不同的。如果此时有多个消费者组，那么消息被一个消费者组消费完之后是不会删除的(因为其它消费者组也需要呀)，它仅仅是为每个消费者组维护一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消费位移(offset)"},{"Type":"NodeText","Data":" ，每次消费者组消费完会返回一个成功的响应，然后队列再把维护的消费位移加一，这样就不会出现刚刚消费过的消息再一次被消费了。"}]},{"ID":"20240201213164-ewlceaa","Type":"NodeParagraph","Properties":{"id":"20240201213164-ewlceaa","updated":"20240201213164"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef3857fefaa079.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213165-62tda5f","Type":"NodeParagraph","Properties":{"id":"20240201213165-62tda5f","updated":"20240201213165"},"Children":[{"Type":"NodeText","Data":"可能你还有一个问题，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么一个主题中需要维护多个队列"},{"Type":"NodeText","Data":" ？"}]},{"ID":"20240201213166-zh8wv3e","Type":"NodeParagraph","Properties":{"id":"20240201213166-zh8wv3e","updated":"20240201213166"},"Children":[{"Type":"NodeText","Data":"答案是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提高并发能力"},{"Type":"NodeText","Data":" 。的确，每个主题中只存在一个队列也是可行的。你想一下，如果每个主题中只存在一个队列，这个队列中也维护着每个消费者组的消费位置，这样也可以做到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"发布订阅模式"},{"Type":"NodeText","Data":" 。如下图。"}]},{"ID":"20240201213167-6i63tgb","Type":"NodeParagraph","Properties":{"id":"20240201213167-6i63tgb","updated":"20240201213167"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef38600cdb6d4b.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213168-21zmxqb","Type":"NodeParagraph","Properties":{"id":"20240201213168-21zmxqb","updated":"20240201213168"},"Children":[{"Type":"NodeText","Data":"但是，这样我生产者是不是只能向一个队列发送消息？又因为需要维护消费位置所以一个队列只能对应一个消费者组中的消费者，这样是不是其他的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 就没有用武之地了？从这两个角度来讲，并发度一下子就小了很多。"}]},{"ID":"20240201213169-bk4mqwn","Type":"NodeParagraph","Properties":{"id":"20240201213169-bk4mqwn","updated":"20240201213169"},"Children":[{"Type":"NodeText","Data":"所以总结来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用在一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Topic"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 中配置多个队列并且每个队列维护每个消费者组的消费位置"},{"Type":"NodeText","Data":" 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主题模式/发布订阅模式"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213170-c5k2zeh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213170-c5k2zeh","updated":"20240201213170"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 的架构图"}]},{"ID":"20240201213171-1guec3k","Type":"NodeParagraph","Properties":{"id":"20240201213171-1guec3k","updated":"20240201213171"},"Children":[{"Type":"NodeText","Data":"讲完了消息模型，我们理解起 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 的技术架构起来就容易多了。"}]},{"ID":"20240201213172-8k7ecm8","Type":"NodeParagraph","Properties":{"id":"20240201213172-8k7ecm8","updated":"20240201213172"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 技术架构中有四大角色 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 。我来向大家分别解释一下这四个角色是干啥的。"}]},{"ID":"20240201213173-fanzbuq","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213173-fanzbuq","updated":"20240201213173"},"Children":[{"ID":"20240201213174-dhcmibc","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213174-dhcmibc","updated":"20240201213174"},"Children":[{"ID":"20240201213175-lkrw9qy","Type":"NodeParagraph","Properties":{"id":"20240201213175-lkrw9qy","updated":"20240201213175"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"：主要负责消息的存储、投递和查询以及服务高可用保证。说白了就是消息队列服务器嘛，生产者生产消息到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" ，消费者从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 拉取消息并消费。"}]},{"ID":"20240201213176-gr1pg6b","Type":"NodeParagraph","Properties":{"id":"20240201213176-gr1pg6b","updated":"20240201213176"},"Children":[{"Type":"NodeText","Data":"这里，我还得普及一下关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 和 队列的关系。上面我讲解了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 和队列的关系——一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 中存在多个队列，那么这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 和队列存放在哪呢？"}]},{"ID":"20240201213177-d5rk585","Type":"NodeParagraph","Properties":{"id":"20240201213177-d5rk585","updated":"20240201213177"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Topic"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 分布在多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Broker"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"上，一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Broker"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 可以配置多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Topic"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" ，它们是多对多的关系"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213178-67aeiiv","Type":"NodeParagraph","Properties":{"id":"20240201213178-67aeiiv","updated":"20240201213178"},"Children":[{"Type":"NodeText","Data":"如果某个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 消息量很大，应该给它多配置几个队列(上文中提到了提高并发能力)，并且 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"尽量多分布在不同 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Broker"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 上，以减轻某个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Broker"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的压力"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213179-64j772p","Type":"NodeParagraph","Properties":{"id":"20240201213179-64j772p","updated":"20240201213179"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 消息量都比较均匀的情况下，如果某个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"broker"},{"Type":"NodeText","Data":" 上的队列越多，则该 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"broker"},{"Type":"NodeText","Data":" 压力越大。"}]},{"ID":"20240201213180-fn45fmo","Type":"NodeParagraph","Properties":{"id":"20240201213180-fn45fmo","updated":"20240201213180"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef38687488a5a4.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213181-s28f2df","Type":"NodeBlockquote","Properties":{"id":"20240201213181-s28f2df","updated":"20240201213181"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213182-c9pog68","Type":"NodeParagraph","Properties":{"id":"20240201213182-c9pog68","updated":"20240201213182"},"Children":[{"Type":"NodeText","Data":"所以说我们需要配置多个 Broker。"}]}]}]},{"ID":"20240201213183-xjyncsn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213183-xjyncsn","updated":"20240201213183"},"Children":[{"ID":"20240201213184-q3yguqf","Type":"NodeParagraph","Properties":{"id":"20240201213184-q3yguqf","updated":"20240201213184"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":"：不知道你们有没有接触过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZooKeeper"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring Cloud"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eureka"},{"Type":"NodeText","Data":" ，它其实也是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注册中心"},{"Type":"NodeText","Data":" ，主要提供两个功能："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Broker 管理"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"路由信息管理"},{"Type":"NodeText","Data":" 。说白了就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 会将自己的信息注册到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 中，此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 就存放了很多 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 的信息(Broker 的路由表)，消费者和生产者就从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 中获取路由表然后照着路由表的信息和对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 进行通信(生产者和消费者定期会向 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 去查询相关的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 的信息)。"}]}]},{"ID":"20240201213185-gjpll26","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213185-gjpll26","updated":"20240201213185"},"Children":[{"ID":"20240201213186-qg90ve2","Type":"NodeParagraph","Properties":{"id":"20240201213186-qg90ve2","updated":"20240201213186"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"：消息发布的角色，支持分布式集群方式部署。说白了就是生产者。"}]}]},{"ID":"20240201213187-cpnz1vv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213187-cpnz1vv","updated":"20240201213187"},"Children":[{"ID":"20240201213188-u2besxc","Type":"NodeParagraph","Properties":{"id":"20240201213188-u2besxc","updated":"20240201213188"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"：消息消费的角色，支持分布式集群方式部署。支持以 push 推，pull 拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制。说白了就是消费者。"}]}]}]},{"ID":"20240201213189-mxhulpl","Type":"NodeParagraph","Properties":{"id":"20240201213189-mxhulpl","updated":"20240201213189"},"Children":[{"Type":"NodeText","Data":"听完了上面的解释你可能会觉得，这玩意好简单。不就是这样的么？"}]},{"ID":"20240201213190-0rpxcua","Type":"NodeParagraph","Properties":{"id":"20240201213190-0rpxcua","updated":"20240201213190"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef386c6d1e8bdb.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213191-ynru1ja","Type":"NodeParagraph","Properties":{"id":"20240201213191-ynru1ja","updated":"20240201213191"},"Children":[{"Type":"NodeText","Data":"嗯？你可能会发现一个问题，这老家伙 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 干啥用的，这不多余吗？直接 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 直接进行生产消息，消费消息不就好了么？"}]},{"ID":"20240201213192-unaq2xi","Type":"NodeParagraph","Properties":{"id":"20240201213192-unaq2xi","updated":"20240201213192"},"Children":[{"Type":"NodeText","Data":"但是，我们上文提到过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 是需要保证高可用的，如果整个系统仅仅靠着一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 来维持的话，那么这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 的压力会不会很大？所以我们需要使用多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 来保证 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"负载均衡"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213193-6idla2c","Type":"NodeParagraph","Properties":{"id":"20240201213193-6idla2c","updated":"20240201213193"},"Children":[{"Type":"NodeText","Data":"如果说，我们的消费者和生产者直接和多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 相连，那么当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 修改的时候必定会牵连着每个生产者和消费者，这样就会产生耦合问题，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 注册中心就是用来解决这个问题的。"}]},{"ID":"20240201213194-s7w841j","Type":"NodeBlockquote","Properties":{"id":"20240201213194-s7w841j","updated":"20240201213194"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213195-z3zuhc8","Type":"NodeParagraph","Properties":{"id":"20240201213195-z3zuhc8","updated":"20240201213195"},"Children":[{"Type":"NodeText","Data":"如果还不是很理解的话，可以去看我介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring Cloud"},{"Type":"NodeText","Data":" 的那篇文章，其中介绍了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eureka"},{"Type":"NodeText","Data":" 注册中心。"}]}]},{"ID":"20240201213196-qhnb8dx","Type":"NodeParagraph","Properties":{"id":"20240201213196-qhnb8dx","updated":"20240201213196"},"Children":[{"Type":"NodeText","Data":"当然，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中的技术架构肯定不止前面那么简单，因为上面图中的四个角色都是需要做集群的。我给出一张官网的架构图，大家尝试理解一下。"}]},{"ID":"20240201213197-9b7vlrj","Type":"NodeParagraph","Properties":{"id":"20240201213197-9b7vlrj","updated":"20240201213197"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef386fa3be1e53.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213198-eeijxxf","Type":"NodeParagraph","Properties":{"id":"20240201213198-eeijxxf","updated":"20240201213198"},"Children":[{"Type":"NodeText","Data":"其实和我们最开始画的那张乞丐版的架构图也没什么区别，主要是一些细节上的差别。听我细细道来 🤨。"}]},{"ID":"20240201213199-4t0t8xe","Type":"NodeParagraph","Properties":{"id":"20240201213199-4t0t8xe","updated":"20240201213199"},"Children":[{"Type":"NodeText","Data":"第一、我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"做了集群并且还进行了主从部署"},{"Type":"NodeText","Data":" ，由于消息分布在各个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 上，一旦某个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 宕机，则该"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 上的消息读写都会受到影响。所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Rocketmq"},{"Type":"NodeText","Data":" 提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master/slave"},{"Type":"NodeText","Data":" 的结构，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"salve"},{"Type":"NodeText","Data":" 定时从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 同步数据(同步刷盘或者异步刷盘)，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"master"},{"Type":"NodeText","Data":" 宕机，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"则 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"slave"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 提供消费服务，但是不能写入消息"},{"Type":"NodeText","Data":" (后面我还会提到哦)。"}]},{"ID":"20240201213200-myzitag","Type":"NodeParagraph","Properties":{"id":"20240201213200-myzitag","updated":"20240201213200"},"Children":[{"Type":"NodeText","Data":"第二、为了保证 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HA"},{"Type":"NodeText","Data":" ，我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 也做了集群部署，但是请注意它是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"去中心化"},{"Type":"NodeText","Data":" 的。也就意味着它没有主节点，你可以很明显地看出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 的所有节点是没有进行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Info Replicate"},{"Type":"NodeText","Data":" 的，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单个 Broker 和所有 NameServer 保持长连接"},{"Type":"NodeText","Data":" ，并且在每隔 30 秒 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 会向所有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Nameserver"},{"Type":"NodeText","Data":" 发送心跳，心跳包含了自身的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 配置信息，这个步骤就对应这上面的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Routing Info"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213201-vhgg1eo","Type":"NodeParagraph","Properties":{"id":"20240201213201-vhgg1eo","updated":"20240201213201"},"Children":[{"Type":"NodeText","Data":"第三、在生产者需要向 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 发送消息的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"需要先从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"NameServer"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 获取关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Broker"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的路由信息"},{"Type":"NodeText","Data":"，然后通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"轮询"},{"Type":"NodeText","Data":" 的方法去向每个队列中生产数据以达到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"负载均衡"},{"Type":"NodeText","Data":" 的效果。"}]},{"ID":"20240201213202-egnr92g","Type":"NodeParagraph","Properties":{"id":"20240201213202-egnr92g","updated":"20240201213202"},"Children":[{"Type":"NodeText","Data":"第四、消费者通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":" 获取所有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 的路由信息后，向 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 发送 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pull"},{"Type":"NodeText","Data":" 请求来获取消息数据。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 可以以两种模式启动—— "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"广播（Broadcast）和集群（Cluster）"},{"Type":"NodeText","Data":"。广播模式下，一条消息会发送给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同一个消费组中的所有消费者"},{"Type":"NodeText","Data":" ，集群模式下消息只会发送给一个消费者。"}]},{"ID":"20240201213203-wxq8onh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213203-wxq8onh","updated":"20240201213203"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 功能特性"}]},{"ID":"20240201213204-ybo0j92","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213204-ybo0j92","updated":"20240201213204"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息"}]},{"ID":"20240201213205-ldyzopt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213205-ldyzopt","updated":"20240201213205"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"普通消息"}]},{"ID":"20240201213206-016b6ru","Type":"NodeParagraph","Properties":{"id":"20240201213206-016b6ru","updated":"20240201213206"},"Children":[{"Type":"NodeText","Data":"普通消息一般应用于微服务解耦、事件驱动、数据集成等场景，这些场景大多数要求数据传输通道具有可靠传输的能力，且对消息的处理时机、处理顺序没有特别要求。以在线的电商交易场景为例，上游订单系统将用户下单支付这一业务事件封装成独立的普通消息并发送至 RocketMQ 服务端，下游按需从服务端订阅消息并按照本地消费逻辑处理下游任务。每个消息之间都是相互独立的，且不需要产生关联。另外还有日志系统，以离线的日志收集场景为例，通过埋点组件收集前端应用的相关操作日志，并转发到 RocketMQ 。"}]},{"ID":"20240201213207-1ww6pon","Type":"NodeParagraph","Properties":{"id":"20240201213207-1ww6pon","updated":"20240201213207"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://rocketmq.apache.org/zh/assets/images/lifecyclefornormal-e8a2a7e42a0722f681eb129b51e1bd66.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213208-ahyw9s2","Type":"NodeParagraph","Properties":{"id":"20240201213208-ahyw9s2","updated":"20240201213208"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"普通消息生命周期"}]},{"ID":"20240201213209-9hsnzxt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213209-9hsnzxt","updated":"20240201213209"},"Children":[{"ID":"20240201213210-1uqzdg2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213210-1uqzdg2","updated":"20240201213210"},"Children":[{"ID":"20240201213211-7v661zp","Type":"NodeParagraph","Properties":{"id":"20240201213211-7v661zp","updated":"20240201213211"},"Children":[{"Type":"NodeText","Data":"初始化：消息被生产者构建并完成初始化，待发送到服务端的状态。"}]}]},{"ID":"20240201213212-wwscrjj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213212-wwscrjj","updated":"20240201213212"},"Children":[{"ID":"20240201213213-fpcii71","Type":"NodeParagraph","Properties":{"id":"20240201213213-fpcii71","updated":"20240201213213"},"Children":[{"Type":"NodeText","Data":"待消费：消息被发送到服务端，对消费者可见，等待消费者消费的状态。"}]}]},{"ID":"20240201213214-w0dc62w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213214-w0dc62w","updated":"20240201213214"},"Children":[{"ID":"20240201213215-t4ahkfu","Type":"NodeParagraph","Properties":{"id":"20240201213215-t4ahkfu","updated":"20240201213215"},"Children":[{"Type":"NodeText","Data":"消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ 会对消息进行重试处理。"}]}]},{"ID":"20240201213216-f8lura2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213216-f8lura2","updated":"20240201213216"},"Children":[{"ID":"20240201213217-g42liii","Type":"NodeParagraph","Properties":{"id":"20240201213217-g42liii","updated":"20240201213217"},"Children":[{"Type":"NodeText","Data":"消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。"}]}]},{"ID":"20240201213218-2kf5sy9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213218-2kf5sy9","updated":"20240201213218"},"Children":[{"ID":"20240201213219-arb5a3f","Type":"NodeParagraph","Properties":{"id":"20240201213219-arb5a3f","updated":"20240201213219"},"Children":[{"Type":"NodeText","Data":"消息删除：RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。"}]}]}]},{"ID":"20240201213220-olx3sgl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213220-olx3sgl","updated":"20240201213220"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"定时消息"}]},{"ID":"20240201213221-8qgl85o","Type":"NodeParagraph","Properties":{"id":"20240201213221-8qgl85o","updated":"20240201213221"},"Children":[{"Type":"NodeText","Data":"在分布式定时调度触发、任务超时处理等场景，需要实现精准、可靠的定时事件触发。使用 RocketMQ 的定时消息可以简化定时调度任务的开发逻辑，实现高性能、可扩展、高可靠的定时触发能力。定时消息仅支持在 MessageType 为 Delay 的主题内使用，即定时消息只能发送至类型为定时消息的主题中，发送的消息的类型必须和主题的类型一致。在 4.x 版本中，只支持延时消息，默认分为 18 个等级分别为：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h，也可以在配置文件中增加自定义的延时等级和时长。在 5.x 版本中，开始支持定时消息，在构造消息时提供了 3 个 API 来指定延迟时间或定时时间。"}]},{"ID":"20240201213222-udio98b","Type":"NodeParagraph","Properties":{"id":"20240201213222-udio98b","updated":"20240201213222"},"Children":[{"Type":"NodeText","Data":"基于定时消息的超时任务处理具备如下优势："}]},{"ID":"20240201213223-vjgt4kh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213223-vjgt4kh","updated":"20240201213223"},"Children":[{"ID":"20240201213224-z0mpr31","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213224-z0mpr31","updated":"20240201213224"},"Children":[{"ID":"20240201213225-gsxv9yi","Type":"NodeParagraph","Properties":{"id":"20240201213225-gsxv9yi","updated":"20240201213225"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"精度高、开发门槛低"},{"Type":"NodeText","Data":"：基于消息通知方式不存在定时阶梯间隔。可以轻松实现任意精度事件触发，无需业务去重。"}]}]},{"ID":"20240201213226-q61zr64","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213226-q61zr64","updated":"20240201213226"},"Children":[{"ID":"20240201213227-lw2qrh4","Type":"NodeParagraph","Properties":{"id":"20240201213227-lw2qrh4","updated":"20240201213227"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高性能可扩展"},{"Type":"NodeText","Data":"：传统的数据库扫描方式较为复杂，需要频繁调用接口扫描，容易产生性能瓶颈。RocketMQ 的定时消息具有高并发和水平扩展的能力。"}]}]}]},{"ID":"20240201213228-u0uvaeb","Type":"NodeParagraph","Properties":{"id":"20240201213228-u0uvaeb","updated":"20240201213228"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://rocketmq.apache.org/zh/assets/images/lifecyclefordelay-2ce8278df69cd026dd11ffd27ab09a17.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213229-3gu3yuq","Type":"NodeParagraph","Properties":{"id":"20240201213229-3gu3yuq","updated":"20240201213229"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定时消息生命周期"}]},{"ID":"20240201213230-u05bth9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213230-u05bth9","updated":"20240201213230"},"Children":[{"ID":"20240201213231-vikwe6m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213231-vikwe6m","updated":"20240201213231"},"Children":[{"ID":"20240201213232-xhovong","Type":"NodeParagraph","Properties":{"id":"20240201213232-xhovong","updated":"20240201213232"},"Children":[{"Type":"NodeText","Data":"初始化：消息被生产者构建并完成初始化，待发送到服务端的状态。"}]}]},{"ID":"20240201213233-f99omtu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213233-f99omtu","updated":"20240201213233"},"Children":[{"ID":"20240201213234-b3xbfow","Type":"NodeParagraph","Properties":{"id":"20240201213234-b3xbfow","updated":"20240201213234"},"Children":[{"Type":"NodeText","Data":"定时中：消息被发送到服务端，和普通消息不同的是，服务端不会直接构建消息索引，而是会将定时消息"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单独存储在定时存储系统中"},{"Type":"NodeText","Data":"，等待定时时刻到达。"}]}]},{"ID":"20240201213235-vsj4lhe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213235-vsj4lhe","updated":"20240201213235"},"Children":[{"ID":"20240201213236-cfkzgac","Type":"NodeParagraph","Properties":{"id":"20240201213236-cfkzgac","updated":"20240201213236"},"Children":[{"Type":"NodeText","Data":"待消费：定时时刻到达后，服务端将消息重新写入普通存储引擎，对下游消费者可见，等待消费者消费的状态。"}]}]},{"ID":"20240201213237-0aikzdb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213237-0aikzdb","updated":"20240201213237"},"Children":[{"ID":"20240201213238-wv15cl4","Type":"NodeParagraph","Properties":{"id":"20240201213238-wv15cl4","updated":"20240201213238"},"Children":[{"Type":"NodeText","Data":"消费中：消息被消费者获取，并按照消费者本地的业务逻辑进行处理的过程。 此时服务端会等待消费者完成消费并提交消费结果，如果一定时间后没有收到消费者的响应，RocketMQ 会对消息进行重试处理。"}]}]},{"ID":"20240201213239-ydu4vym","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213239-ydu4vym","updated":"20240201213239"},"Children":[{"ID":"20240201213240-sdqe0ls","Type":"NodeParagraph","Properties":{"id":"20240201213240-sdqe0ls","updated":"20240201213240"},"Children":[{"Type":"NodeText","Data":"消费提交：消费者完成消费处理，并向服务端提交消费结果，服务端标记当前消息已经被处理（包括消费成功和失败）。RocketMQ 默认支持保留所有消息，此时消息数据并不会立即被删除，只是逻辑标记已消费。消息在保存时间到期或存储空间不足被删除前，消费者仍然可以回溯消息重新消费。"}]}]},{"ID":"20240201213241-po9q588","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213241-po9q588","updated":"20240201213241"},"Children":[{"ID":"20240201213242-9ri2krm","Type":"NodeParagraph","Properties":{"id":"20240201213242-9ri2krm","updated":"20240201213242"},"Children":[{"Type":"NodeText","Data":"消息删除：Apache RocketMQ 按照消息保存机制滚动清理最早的消息数据，将消息从物理文件中删除。"}]}]}]},{"ID":"20240201213243-tjibbrc","Type":"NodeParagraph","Properties":{"id":"20240201213243-tjibbrc","updated":"20240201213243"},"Children":[{"Type":"NodeText","Data":"定时消息的实现逻辑需要先经过定时存储等待触发，定时时间到达后才会被投递给消费者。因此，如果将大量定时消息的定时时间设置为同一时刻，则到达该时刻后会有大量消息同时需要被处理，会造成系统压力过大，导致消息分发延迟，影响定时精度。"}]},{"ID":"20240201213244-lr0bkda","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213244-lr0bkda","updated":"20240201213244"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"顺序消息"}]},{"ID":"20240201213245-yqy1xj9","Type":"NodeParagraph","Properties":{"id":"20240201213245-yqy1xj9","updated":"20240201213245"},"Children":[{"Type":"NodeText","Data":"顺序消息仅支持使用 MessageType 为 FIFO 的主题，即顺序消息只能发送至类型为顺序消息的主题中，发送的消息的类型必须和主题的类型一致。和普通消息发送相比，顺序消息发送必须要设置消息组。（推荐实现 MessageQueueSelector 的方式，见下文）。要保证消息的顺序性需要单一生产者串行发送。"}]},{"ID":"20240201213246-mvkj8ha","Type":"NodeParagraph","Properties":{"id":"20240201213246-mvkj8ha","updated":"20240201213246"},"Children":[{"Type":"NodeText","Data":"单线程使用 MessageListenerConcurrently 可以顺序消费，多线程环境下使用 MessageListenerOrderly 才能顺序消费。"}]},{"ID":"20240201213247-8dhcnhe","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213247-8dhcnhe","updated":"20240201213247"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"事务消息"}]},{"ID":"20240201213248-ycaftbg","Type":"NodeParagraph","Properties":{"id":"20240201213248-ycaftbg","updated":"20240201213248"},"Children":[{"Type":"NodeText","Data":"事务消息是 Apache RocketMQ 提供的一种高级消息类型，支持在分布式场景下保障消息生产和本地事务的最终一致性。简单来讲，就是将本地事务（数据库的 DML 操作）与发送消息合并在同一个事务中。例如，新增一个订单。在事务未提交之前，不发送订阅的消息。发送消息的动作随着事务的成功提交而发送，随着事务的回滚而取消。当然真正地处理过程不止这么简单，包含了半消息、事务监听和事务回查等概念，下面有更详细的说明。"}]},{"ID":"20240201213249-998sac5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213249-998sac5","updated":"20240201213249"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"关于发送消息"}]},{"ID":"20240201213250-vqyqm4b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213250-vqyqm4b","updated":"20240201213250"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不建议单一进程创建大量生产者"}]},{"ID":"20240201213251-ozct8fs","Type":"NodeParagraph","Properties":{"id":"20240201213251-ozct8fs","updated":"20240201213251"},"Children":[{"Type":"NodeText","Data":"Apache RocketMQ 的生产者和主题是多对多的关系，支持同一个生产者向多个主题发送消息。对于生产者的创建和初始化，建议遵循够用即可、最大化复用原则，如果有需要发送消息到多个主题的场景，无需为每个主题都创建一个生产者。"}]},{"ID":"20240201213252-ztse4x9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213252-ztse4x9","updated":"20240201213252"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不建议频繁创建和销毁生产者"}]},{"ID":"20240201213253-bne6ay5","Type":"NodeParagraph","Properties":{"id":"20240201213253-bne6ay5","updated":"20240201213253"},"Children":[{"Type":"NodeText","Data":"Apache RocketMQ 的生产者是可以重复利用的底层资源，类似数据库的连接池。因此不需要在每次发送消息时动态创建生产者，且在发送结束后销毁生产者。这样频繁的创建销毁会在服务端产生大量短连接请求，严重影响系统性能。"}]},{"ID":"20240201213254-qyu428m","Type":"NodeParagraph","Properties":{"id":"20240201213254-qyu428m","updated":"20240201213254"},"Children":[{"Type":"NodeText","Data":"正确示例："}]},{"ID":"20240201213255-5lob9bc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213255-5lob9bc","updated":"20240201213255"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Producer p = ProducerBuilder.build();\nfor (int i =0;i\u003cn;i++){\n    Message m= MessageBuilder.build();\n    p.send(m);\n }\np.shutdown();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213256-awy7v0d","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213256-awy7v0d","updated":"20240201213256"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"消费者分类"}]},{"ID":"20240201213257-ts4azpv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213257-ts4azpv","updated":"20240201213257"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"PushConsumer"}]},{"ID":"20240201213258-uwdy11p","Type":"NodeParagraph","Properties":{"id":"20240201213258-uwdy11p","updated":"20240201213258"},"Children":[{"Type":"NodeText","Data":"高度封装的消费者类型，消费消息仅仅通过消费监听器监听并返回结果。消息的获取、消费状态提交以及消费重试都通过 RocketMQ 的客户端 SDK 完成。"}]},{"ID":"20240201213259-1qgv6lm","Type":"NodeParagraph","Properties":{"id":"20240201213259-1qgv6lm","updated":"20240201213259"},"Children":[{"Type":"NodeText","Data":"PushConsumer 的消费监听器执行结果分为以下三种情况："}]},{"ID":"20240201213260-2gx6p9v","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213260-2gx6p9v","updated":"20240201213260"},"Children":[{"ID":"20240201213261-x6r6s0m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213261-x6r6s0m","updated":"20240201213261"},"Children":[{"ID":"20240201213262-d5vq87f","Type":"NodeParagraph","Properties":{"id":"20240201213262-d5vq87f","updated":"20240201213262"},"Children":[{"Type":"NodeText","Data":"返回消费成功：以 Java SDK 为例，返回"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeResult.SUCCESS"},{"Type":"NodeText","Data":"，表示该消息处理成功，服务端按照消费结果更新消费进度。"}]}]},{"ID":"20240201213263-6f8m97w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213263-6f8m97w","updated":"20240201213263"},"Children":[{"ID":"20240201213264-xi895af","Type":"NodeParagraph","Properties":{"id":"20240201213264-xi895af","updated":"20240201213264"},"Children":[{"Type":"NodeText","Data":"返回消费失败：以 Java SDK 为例，返回"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeResult.FAILURE"},{"Type":"NodeText","Data":"，表示该消息处理失败，需要根据消费重试逻辑判断是否进行重试消费。"}]}]},{"ID":"20240201213265-qrqns3z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213265-qrqns3z","updated":"20240201213265"},"Children":[{"ID":"20240201213266-ba0zm2y","Type":"NodeParagraph","Properties":{"id":"20240201213266-ba0zm2y","updated":"20240201213266"},"Children":[{"Type":"NodeText","Data":"出现非预期失败：例如抛异常等行为，该结果按照消费失败处理，需要根据消费重试逻辑判断是否进行重试消费。"}]}]}]},{"ID":"20240201213267-5cz74d3","Type":"NodeParagraph","Properties":{"id":"20240201213267-5cz74d3","updated":"20240201213267"},"Children":[{"Type":"NodeText","Data":"具体实现可以参见这篇文章"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://devedmc.com/archives/1691854198138","TextMarkTextContent":"RocketMQ 对 pull 和 push 的实现"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213268-i236kwq","Type":"NodeParagraph","Properties":{"id":"20240201213268-i236kwq","updated":"20240201213268"},"Children":[{"Type":"NodeText","Data":"使用 PushConsumer 消费者消费时，不允许使用以下方式处理消息，否则 RocketMQ 无法保证消息的可靠性。"}]},{"ID":"20240201213269-pus87lj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213269-pus87lj","updated":"20240201213269"},"Children":[{"ID":"20240201213270-0b3v8nw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213270-0b3v8nw","updated":"20240201213270"},"Children":[{"ID":"20240201213271-249r9a6","Type":"NodeParagraph","Properties":{"id":"20240201213271-249r9a6","updated":"20240201213271"},"Children":[{"Type":"NodeText","Data":"错误方式一：消息还未处理完成，就提前返回消费成功结果。此时如果消息消费失败，RocketMQ 服务端是无法感知的，因此不会进行消费重试。"}]}]},{"ID":"20240201213272-u01gzah","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213272-u01gzah","updated":"20240201213272"},"Children":[{"ID":"20240201213273-q9zv8rb","Type":"NodeParagraph","Properties":{"id":"20240201213273-q9zv8rb","updated":"20240201213273"},"Children":[{"Type":"NodeText","Data":"错误方式二：在消费监听器内将消息再次分发到自定义的其他线程，消费监听器提前返回消费结果。此时如果消息消费失败，RocketMQ 服务端同样无法感知，因此也不会进行消费重试。"}]}]},{"ID":"20240201213274-pibp6hn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213274-pibp6hn","updated":"20240201213274"},"Children":[{"ID":"20240201213275-uj33zmg","Type":"NodeParagraph","Properties":{"id":"20240201213275-uj33zmg","updated":"20240201213275"},"Children":[{"Type":"NodeText","Data":"PushConsumer 严格限制了消息同步处理及每条消息的处理超时时间，适用于以下场景："}]},{"ID":"20240201213276-naagr48","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213276-naagr48","updated":"20240201213276"},"Children":[{"ID":"20240201213277-rzk5c9x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213277-rzk5c9x","updated":"20240201213277"},"Children":[{"ID":"20240201213278-vx1uvyz","Type":"NodeParagraph","Properties":{"id":"20240201213278-vx1uvyz","updated":"20240201213278"},"Children":[{"Type":"NodeText","Data":"消息处理时间可预估：如果不确定消息处理耗时，经常有预期之外的长时间耗时的消息，PushConsumer 的可靠性保证会频繁触发消息重试机制造成大量重复消息。"}]}]},{"ID":"20240201213279-t9z2oxg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213279-t9z2oxg","updated":"20240201213279"},"Children":[{"ID":"20240201213280-8zay875","Type":"NodeParagraph","Properties":{"id":"20240201213280-8zay875","updated":"20240201213280"},"Children":[{"Type":"NodeText","Data":"无异步化、高级定制场景：PushConsumer 限制了消费逻辑的线程模型，由客户端 SDK 内部按最大吞吐量触发消息处理。该模型开发逻辑简单，但是不允许使用异步化和自定义处理流程。"}]}]}]}]}]},{"ID":"20240201213281-c5tu9xf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213281-c5tu9xf","updated":"20240201213281"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SimpleConsumer"}]},{"ID":"20240201213282-jj5upo0","Type":"NodeParagraph","Properties":{"id":"20240201213282-jj5upo0","updated":"20240201213282"},"Children":[{"Type":"NodeText","Data":"SimpleConsumer 是一种接口原子型的消费者类型，消息的获取、消费状态提交以及消费重试都是通过消费者业务逻辑主动发起调用完成。"}]},{"ID":"20240201213283-ytfenss","Type":"NodeParagraph","Properties":{"id":"20240201213283-ytfenss","updated":"20240201213283"},"Children":[{"Type":"NodeText","Data":"一个来自官网的例子："}]},{"ID":"20240201213284-wbpim3d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213284-wbpim3d","updated":"20240201213284"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 消费示例：使用 SimpleConsumer 消费普通消息，主动获取消息处理并提交。\nClientServiceProvider provider = ClientServiceProvider.loadService();\nString topic = \"YourTopic\";\nFilterExpression filterExpression = new FilterExpression(\"YourFilterTag\", FilterExpressionType.TAG);\nSimpleConsumer simpleConsumer = provider.newSimpleConsumerBuilder()\n        // 设置消费者分组。\n        .setConsumerGroup(\"YourConsumerGroup\")\n        // 设置接入点。\n        .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints(\"YourEndpoint\").build())\n        // 设置预绑定的订阅关系。\n        .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n        // 设置从服务端接受消息的最大等待时间\n        .setAwaitDuration(Duration.ofSeconds(1))\n        .build();\ntry {\n    // SimpleConsumer 需要主动获取消息，并处理。\n    List\u003cMessageView\u003e messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n    messageViewList.forEach(messageView -\u003e {\n        System.out.println(messageView);\n        // 消费处理完成后，需要主动调用 ACK 提交消费结果。\n        try {\n            simpleConsumer.ack(messageView);\n        } catch (ClientException e) {\n            logger.error(\"Failed to ack message, messageId={}\", messageView.getMessageId(), e);\n        }\n    });\n} catch (ClientException e) {\n    // 如果遇到系统流控等原因造成拉取失败，需要重新发起获取消息请求。\n    logger.error(\"Failed to receive message\", e);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213285-vln6tb9","Type":"NodeParagraph","Properties":{"id":"20240201213285-vln6tb9","updated":"20240201213285"},"Children":[{"Type":"NodeText","Data":"SimpleConsumer 适用于以下场景："}]},{"ID":"20240201213286-exwg89j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213286-exwg89j","updated":"20240201213286"},"Children":[{"ID":"20240201213287-4lawgd4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213287-4lawgd4","updated":"20240201213287"},"Children":[{"ID":"20240201213288-ffzd5hr","Type":"NodeParagraph","Properties":{"id":"20240201213288-ffzd5hr","updated":"20240201213288"},"Children":[{"Type":"NodeText","Data":"消息处理时长不可控：如果消息处理时长无法预估，经常有长时间耗时的消息处理情况。建议使用 SimpleConsumer 消费类型，可以在消费时自定义消息的预估处理时长，若实际业务中预估的消息处理时长不符合预期，也可以通过接口提前修改。"}]}]},{"ID":"20240201213289-97yit7f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213289-97yit7f","updated":"20240201213289"},"Children":[{"ID":"20240201213290-kxr7fju","Type":"NodeParagraph","Properties":{"id":"20240201213290-kxr7fju","updated":"20240201213290"},"Children":[{"Type":"NodeText","Data":"需要异步化、批量消费等高级定制场景：SimpleConsumer 在 SDK 内部没有复杂的线程封装，完全由业务逻辑自由定制，可以实现异步分发、批量消费等高级定制场景。"}]}]},{"ID":"20240201213291-uzitw9c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213291-uzitw9c","updated":"20240201213291"},"Children":[{"ID":"20240201213292-zct1u5x","Type":"NodeParagraph","Properties":{"id":"20240201213292-zct1u5x","updated":"20240201213292"},"Children":[{"Type":"NodeText","Data":"需要自定义消费速率：SimpleConsumer 是由业务逻辑主动调用接口获取消息，因此可以自由调整获取消息的频率，自定义控制消费速率。"}]}]}]},{"ID":"20240201213293-mg7lng9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213293-mg7lng9","updated":"20240201213293"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"PullConsumer"}]},{"ID":"20240201213294-7xk6mb0","Type":"NodeParagraph","Properties":{"id":"20240201213294-7xk6mb0","updated":"20240201213294"},"Children":[{"Type":"NodeText","Data":"施工中。。。"}]},{"ID":"20240201213295-ziy64z1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213295-ziy64z1","updated":"20240201213295"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"消费者分组和生产者分组"}]},{"ID":"20240201213296-r6udjxv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213296-r6udjxv","updated":"20240201213296"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"生产者分组"}]},{"ID":"20240201213297-q1x59fa","Type":"NodeParagraph","Properties":{"id":"20240201213297-q1x59fa","updated":"20240201213297"},"Children":[{"Type":"NodeText","Data":"RocketMQ 服务端 5.x 版本开始，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"生产者是匿名的"},{"Type":"NodeText","Data":"，无需管理生产者分组（ProducerGroup）；对于历史版本服务端 3.x 和 4.x 版本，已经使用的生产者分组可以废弃无需再设置，且不会对当前业务产生影响。"}]},{"ID":"20240201213298-xm8llo8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213298-xm8llo8","updated":"20240201213298"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消费者分组"}]},{"ID":"20240201213299-kzvffua","Type":"NodeParagraph","Properties":{"id":"20240201213299-kzvffua","updated":"20240201213299"},"Children":[{"Type":"NodeText","Data":"消费者分组是多个消费行为一致的消费者的负载均衡分组。消费者分组不是具体实体而是一个逻辑资源。通过消费者分组实现消费性能的水平扩展以及高可用容灾。"}]},{"ID":"20240201213300-feg4jmc","Type":"NodeParagraph","Properties":{"id":"20240201213300-feg4jmc","updated":"20240201213300"},"Children":[{"Type":"NodeText","Data":"消费者分组中的订阅关系、投递顺序性、消费重试策略是一致的。"}]},{"ID":"20240201213301-w7riv6a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213301-w7riv6a","updated":"20240201213301"},"Children":[{"ID":"20240201213302-72j8uta","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213302-72j8uta","updated":"20240201213302"},"Children":[{"ID":"20240201213303-p3q9dhq","Type":"NodeParagraph","Properties":{"id":"20240201213303-p3q9dhq","updated":"20240201213303"},"Children":[{"Type":"NodeText","Data":"订阅关系：Apache RocketMQ 以消费者分组的粒度管理订阅关系，实现订阅关系的管理和追溯。"}]}]},{"ID":"20240201213304-y3yc1cq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213304-y3yc1cq","updated":"20240201213304"},"Children":[{"ID":"20240201213305-g6j322w","Type":"NodeParagraph","Properties":{"id":"20240201213305-g6j322w","updated":"20240201213305"},"Children":[{"Type":"NodeText","Data":"投递顺序性：Apache RocketMQ 的服务端将消息投递给消费者消费时，支持顺序投递和并发投递，投递方式在消费者分组中统一配置。"}]}]},{"ID":"20240201213306-77zg9ru","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213306-77zg9ru","updated":"20240201213306"},"Children":[{"ID":"20240201213307-mb1cvam","Type":"NodeParagraph","Properties":{"id":"20240201213307-mb1cvam","updated":"20240201213307"},"Children":[{"Type":"NodeText","Data":"消费重试策略： 消费者消费消息失败时的重试策略，包括重试次数、死信队列设置等。"}]}]}]},{"ID":"20240201213308-wm7kll2","Type":"NodeParagraph","Properties":{"id":"20240201213308-wm7kll2","updated":"20240201213308"},"Children":[{"Type":"NodeText","Data":"RocketMQ 服务端 5.x 版本：上述消费者的消费行为从关联的消费者分组中统一获取，因此，同一分组内所有消费者的消费行为必然是一致的，客户端无需关注。"}]},{"ID":"20240201213309-85jaap6","Type":"NodeParagraph","Properties":{"id":"20240201213309-85jaap6","updated":"20240201213309"},"Children":[{"Type":"NodeText","Data":"RocketMQ 服务端 3.x/4.x 历史版本：上述消费逻辑由消费者客户端接口定义，因此，您需要自己在消费者客户端设置时保证同一分组下的消费者的消费行为一致。(来自官方网站)"}]},{"ID":"20240201213310-p33ixzw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213310-p33ixzw","updated":"20240201213310"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何解决顺序消费和重复消费？"}]},{"ID":"20240201213311-ngiaqwz","Type":"NodeParagraph","Properties":{"id":"20240201213311-ngiaqwz","updated":"20240201213311"},"Children":[{"Type":"NodeText","Data":"其实，这些东西都是我在介绍消息队列带来的一些副作用的时候提到的，也就是说，这些问题不仅仅挂钩于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" ，而是应该每个消息中间件都需要去解决的。"}]},{"ID":"20240201213312-tuf0wno","Type":"NodeParagraph","Properties":{"id":"20240201213312-tuf0wno","updated":"20240201213312"},"Children":[{"Type":"NodeText","Data":"在上面我介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 的技术架构的时候我已经向你展示了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"它是如何保证高可用的"},{"Type":"NodeText","Data":" ，这里不涉及运维方面的搭建，如果你感兴趣可以自己去官网上照着例子搭建属于你自己的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 集群。"}]},{"ID":"20240201213313-wos21t9","Type":"NodeBlockquote","Properties":{"id":"20240201213313-wos21t9","updated":"20240201213313"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213314-300qanm","Type":"NodeParagraph","Properties":{"id":"20240201213314-300qanm","updated":"20240201213314"},"Children":[{"Type":"NodeText","Data":"其实 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 的架构基本和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 类似，只是它注册中心使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Zookeeper"},{"Type":"NodeText","Data":"、它的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分区"},{"Type":"NodeText","Data":" 就相当于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列"},{"Type":"NodeText","Data":" 。还有一些小细节不同会在后面提到。"}]}]},{"ID":"20240201213315-7balsdf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213315-7balsdf","updated":"20240201213315"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"顺序消费"}]},{"ID":"20240201213316-ss9ptt4","Type":"NodeParagraph","Properties":{"id":"20240201213316-ss9ptt4","updated":"20240201213316"},"Children":[{"Type":"NodeText","Data":"在上面的技术架构介绍中，我们已经知道了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 在主题上是无序的、它只有在队列层面才是保证有序"},{"Type":"NodeText","Data":" 的。"}]},{"ID":"20240201213317-rzk2bkn","Type":"NodeParagraph","Properties":{"id":"20240201213317-rzk2bkn","updated":"20240201213317"},"Children":[{"Type":"NodeText","Data":"这又扯到两个概念——"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"普通顺序"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"严格顺序"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213318-3c3f11o","Type":"NodeParagraph","Properties":{"id":"20240201213318-3c3f11o","updated":"20240201213318"},"Children":[{"Type":"NodeText","Data":"所谓普通顺序是指 消费者通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同一个消费队列收到的消息是有顺序的"},{"Type":"NodeText","Data":" ，不同消息队列收到的消息则可能是无顺序的。普通顺序消息在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重启情况下不会保证消息顺序性"},{"Type":"NodeText","Data":" (短暂时间) 。"}]},{"ID":"20240201213319-n14svcl","Type":"NodeParagraph","Properties":{"id":"20240201213319-n14svcl","updated":"20240201213319"},"Children":[{"Type":"NodeText","Data":"所谓严格顺序是指 消费者收到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"所有消息"},{"Type":"NodeText","Data":" 均是有顺序的。严格顺序消息 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"即使在异常情况下也会保证消息的顺序性"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213320-skmdueo","Type":"NodeParagraph","Properties":{"id":"20240201213320-skmdueo","updated":"20240201213320"},"Children":[{"Type":"NodeText","Data":"但是，严格顺序看起来虽好，实现它可会付出巨大的代价。如果你使用严格顺序模式，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 集群中只要有一台机器不可用，则整个集群都不可用。你还用啥？现在主要场景也就在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"binlog"},{"Type":"NodeText","Data":" 同步。"}]},{"ID":"20240201213321-n1r8s9i","Type":"NodeParagraph","Properties":{"id":"20240201213321-n1r8s9i","updated":"20240201213321"},"Children":[{"Type":"NodeText","Data":"一般而言，我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQ"},{"Type":"NodeText","Data":" 都是能容忍短暂的乱序，所以推荐使用普通顺序模式。"}]},{"ID":"20240201213322-nnq1rby","Type":"NodeParagraph","Properties":{"id":"20240201213322-nnq1rby","updated":"20240201213322"},"Children":[{"Type":"NodeText","Data":"那么，我们现在使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"普通顺序模式"},{"Type":"NodeText","Data":" ，我们从上面学习知道了在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":" 生产消息的时候会进行轮询(取决你的负载均衡策略)来向同一主题的不同消息队列发送消息。那么如果此时我有几个消息分别是同一个订单的创建、支付、发货，在轮询的策略下这 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"三个消息会被发送到不同队列"},{"Type":"NodeText","Data":" ，因为在不同的队列此时就无法使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 带来的队列有序特性来保证消息有序性了。"}]},{"ID":"20240201213323-60cz5tu","Type":"NodeParagraph","Properties":{"id":"20240201213323-60cz5tu","updated":"20240201213323"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef3874585e096e.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213324-jbtaaxb","Type":"NodeParagraph","Properties":{"id":"20240201213324-jbtaaxb","updated":"20240201213324"},"Children":[{"Type":"NodeText","Data":"那么，怎么解决呢？"}]},{"ID":"20240201213325-msyr2em","Type":"NodeParagraph","Properties":{"id":"20240201213325-msyr2em","updated":"20240201213325"},"Children":[{"Type":"NodeText","Data":"其实很简单，我们需要处理的仅仅是将同一语义下的消息放入同一个队列(比如这里是同一个订单)，那我们就可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Hash 取模法"},{"Type":"NodeText","Data":" 来保证同一个订单在同一个队列中就行了。"}]},{"ID":"20240201213326-ovb0svn","Type":"NodeParagraph","Properties":{"id":"20240201213326-ovb0svn","updated":"20240201213326"},"Children":[{"Type":"NodeText","Data":"RocketMQ 实现了两种队列选择算法，也可以自己实现"}]},{"ID":"20240201213327-c0ppnc6","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213327-c0ppnc6","updated":"20240201213327"},"Children":[{"ID":"20240201213328-p4txrmw","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213328-p4txrmw","updated":"20240201213328"},"Children":[{"ID":"20240201213329-9qh473k","Type":"NodeParagraph","Properties":{"id":"20240201213329-9qh473k","updated":"20240201213329"},"Children":[{"Type":"NodeText","Data":"轮询算法"}]},{"ID":"20240201213330-21jbfku","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213330-21jbfku","updated":"20240201213330"},"Children":[{"ID":"20240201213331-6ek4aud","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213331-6ek4aud","updated":"20240201213331"},"Children":[{"ID":"20240201213332-q8uumsb","Type":"NodeParagraph","Properties":{"id":"20240201213332-q8uumsb","updated":"20240201213332"},"Children":[{"Type":"NodeText","Data":"轮询算法就是向消息指定的 topic 所在队列中依次发送消息，保证消息均匀分布"}]}]},{"ID":"20240201213333-y7idmp3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213333-y7idmp3","updated":"20240201213333"},"Children":[{"ID":"20240201213334-n1rt94k","Type":"NodeParagraph","Properties":{"id":"20240201213334-n1rt94k","updated":"20240201213334"},"Children":[{"Type":"NodeText","Data":"是 RocketMQ 默认队列选择算法"}]}]}]}]},{"ID":"20240201213335-ssuf5cv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213335-ssuf5cv","updated":"20240201213335"},"Children":[{"ID":"20240201213336-50y8507","Type":"NodeParagraph","Properties":{"id":"20240201213336-50y8507","updated":"20240201213336"},"Children":[{"Type":"NodeText","Data":"最小投递延迟算法"}]},{"ID":"20240201213337-m2kv3iy","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213337-m2kv3iy","updated":"20240201213337"},"Children":[{"ID":"20240201213338-myt0xz9","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213338-myt0xz9","updated":"20240201213338"},"Children":[{"ID":"20240201213339-ezari4p","Type":"NodeParagraph","Properties":{"id":"20240201213339-ezari4p","updated":"20240201213339"},"Children":[{"Type":"NodeText","Data":"每次消息投递的时候统计消息投递的延迟，选择队列时优先选择消息延时小的队列，导致消息分布不均匀,按照如下设置即可。"}]}]},{"ID":"20240201213340-1j8nqnf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213340-1j8nqnf","updated":"20240201213340"},"Children":[{"ID":"20240201213341-7wbmmol","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213341-7wbmmol","updated":"20240201213341"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"producer.setSendLatencyFaultEnable(true);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20240201213342-3lpqvxs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213342-3lpqvxs","updated":"20240201213342"},"Children":[{"ID":"20240201213343-nh02lbo","Type":"NodeParagraph","Properties":{"id":"20240201213343-nh02lbo","updated":"20240201213343"},"Children":[{"Type":"NodeText","Data":"继承 MessageQueueSelector 实现"}]},{"ID":"20240201213344-r6pjn2i","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213344-r6pjn2i","updated":"20240201213344"},"Children":[{"ID":"20240201213345-rw6o4yb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213345-rw6o4yb","updated":"20240201213345"},"Children":[{"ID":"20240201213346-sxy482t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213346-sxy482t","updated":"20240201213346"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n    @Override\n    public MessageQueue select(List\u003cMessageQueue\u003e mqs, Message msg, Object arg) {\n        //从mqs中选择一个队列,可以根据msg特点选择\n        return null;\n    }\n}, new Object());\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]}]},{"ID":"20240201213347-jimzn8y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213347-jimzn8y","updated":"20240201213347"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"特殊情况处理"}]},{"ID":"20240201213348-6110msh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213348-6110msh","updated":"20240201213348"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"发送异常"}]},{"ID":"20240201213349-aj2v3c2","Type":"NodeParagraph","Properties":{"id":"20240201213349-aj2v3c2","updated":"20240201213349"},"Children":[{"Type":"NodeText","Data":"选择队列后会与 Broker 建立连接，通过网络请求将消息发送到 Broker 上，如果 Broker 挂了或者网络波动发送消息超时此时 RocketMQ 会进行重试。"}]},{"ID":"20240201213350-29hnc0o","Type":"NodeParagraph","Properties":{"id":"20240201213350-29hnc0o","updated":"20240201213350"},"Children":[{"Type":"NodeText","Data":"重新选择其他 Broker 中的消息队列进行发送，默认重试两次，可以手动设置。"}]},{"ID":"20240201213351-s9q12jm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213351-s9q12jm","updated":"20240201213351"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"producer.setRetryTimesWhenSendFailed(5);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213352-c2rc6aa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213352-c2rc6aa","updated":"20240201213352"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"消息过大"}]},{"ID":"20240201213353-u5cizjo","Type":"NodeParagraph","Properties":{"id":"20240201213353-u5cizjo","updated":"20240201213353"},"Children":[{"Type":"NodeText","Data":"消息超过 4k 时 RocketMQ 会将消息压缩后在发送到 Broker 上，减少网络资源的占用。"}]},{"ID":"20240201213354-c9442mn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213354-c9442mn","updated":"20240201213354"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"重复消费"}]},{"ID":"20240201213355-m5jbp9p","Type":"NodeParagraph","Properties":{"id":"20240201213355-m5jbp9p","updated":"20240201213355"},"Children":[{"Type":"NodeText","Data":"emmm，就两个字—— "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"幂等"},{"Type":"NodeText","Data":" 。在编程中一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"幂等"},{"Type":"NodeText","Data":" 操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。比如说，这个时候我们有一个订单的处理积分的系统，每当来一个消息的时候它就负责为创建这个订单的用户的积分加上相应的数值。可是有一次，消息队列发送给订单系统 FrancisQ 的订单信息，其要求是给 FrancisQ 的积分加上 500。但是积分系统在收到 FrancisQ 的订单信息处理完成之后返回给消息队列处理成功的信息的时候出现了网络波动(当然还有很多种情况，比如 Broker 意外重启等等)，这条回应没有发送成功。"}]},{"ID":"20240201213356-qeyd1ao","Type":"NodeParagraph","Properties":{"id":"20240201213356-qeyd1ao","updated":"20240201213356"},"Children":[{"Type":"NodeText","Data":"那么，消息队列没收到积分系统的回应会不会尝试重发这个消息？问题就来了，我再发这个消息，万一它又给 FrancisQ 的账户加上 500 积分怎么办呢？"}]},{"ID":"20240201213357-cxisoti","Type":"NodeParagraph","Properties":{"id":"20240201213357-cxisoti","updated":"20240201213357"},"Children":[{"Type":"NodeText","Data":"所以我们需要给我们的消费者实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"幂等"},{"Type":"NodeText","Data":" ，也就是对同一个消息的处理结果，执行多少次都不变。"}]},{"ID":"20240201213358-2j4ssdb","Type":"NodeParagraph","Properties":{"id":"20240201213358-2j4ssdb","updated":"20240201213358"},"Children":[{"Type":"NodeText","Data":"那么如何给业务实现幂等呢？这个还是需要结合具体的业务的。你可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":" 来保证，因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"value"},{"Type":"NodeText","Data":" 就是天然支持幂等的。当然还有使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库插入法"},{"Type":"NodeText","Data":" ，基于数据库的唯一键来保证重复数据不会被插入多条。"}]},{"ID":"20240201213359-j6bt2un","Type":"NodeParagraph","Properties":{"id":"20240201213359-j6bt2un","updated":"20240201213359"},"Children":[{"Type":"NodeText","Data":"不过最主要的还是需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"根据特定场景使用特定的解决方案"},{"Type":"NodeText","Data":" ，你要知道你的消息消费是否是完全不可重复消费还是可以忍受重复消费的，然后再选择强校验和弱校验的方式。毕竟在 CS 领域还是很少有技术银弹的说法。"}]},{"ID":"20240201213360-c355u57","Type":"NodeParagraph","Properties":{"id":"20240201213360-c355u57","updated":"20240201213360"},"Children":[{"Type":"NodeText","Data":"而在整个互联网领域，幂等不仅仅适用于消息队列的重复消费问题，这些实现幂等的方法，也同样适用于，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在其他场景中来解决重复请求或者重复调用的问题"},{"Type":"NodeText","Data":" 。比如将 HTTP 服务设计成幂等的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决前端或者 APP 重复提交表单数据的问题"},{"Type":"NodeText","Data":" ，也可以将一个微服务设计成幂等的，解决 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RPC"},{"Type":"NodeText","Data":" 框架自动重试导致的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重复调用问题"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213361-ojm94v8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213361-ojm94v8","updated":"20240201213361"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 如何实现分布式事务？"}]},{"ID":"20240201213362-gu2rbna","Type":"NodeParagraph","Properties":{"id":"20240201213362-gu2rbna","updated":"20240201213362"},"Children":[{"Type":"NodeText","Data":"如何解释分布式事务呢？事务大家都知道吧？"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"要么都执行要么都不执行"},{"Type":"NodeText","Data":" 。在同一个系统中我们可以轻松地实现事务，但是在分布式架构中，我们有很多服务是部署在不同系统之间的，而不同服务之间又需要进行调用。比如此时我下订单然后增加积分，如果保证不了分布式事务的话，就会出现 A 系统下了订单，但是 B 系统增加积分失败或者 A 系统没有下订单，B 系统却增加了积分。前者对用户不友好，后者对运营商不利，这是我们都不愿意见到的。"}]},{"ID":"20240201213363-kiqk9f1","Type":"NodeParagraph","Properties":{"id":"20240201213363-kiqk9f1","updated":"20240201213363"},"Children":[{"Type":"NodeText","Data":"那么，如何去解决这个问题呢？"}]},{"ID":"20240201213364-wn17q0p","Type":"NodeParagraph","Properties":{"id":"20240201213364-wn17q0p","updated":"20240201213364"},"Children":[{"Type":"NodeText","Data":"如今比较常见的分布式事务实现有 2PC、TCC 和事务消息(half 半消息机制)。每一种实现都有其特定的使用场景，但是也有各自的问题，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"都不是完美的解决方案"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213365-ggxpxfn","Type":"NodeParagraph","Properties":{"id":"20240201213365-ggxpxfn","updated":"20240201213365"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中使用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务消息加上事务反查机制"},{"Type":"NodeText","Data":" 来解决分布式事务问题的。我画了张图，大家可以对照着图进行理解。"}]},{"ID":"20240201213366-194stbc","Type":"NodeParagraph","Properties":{"id":"20240201213366-194stbc","updated":"20240201213366"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef38798d7a987f.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213367-698v3p8","Type":"NodeParagraph","Properties":{"id":"20240201213367-698v3p8","updated":"20240201213367"},"Children":[{"Type":"NodeText","Data":"在第一步发送的 half 消息 ，它的意思是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在事务提交之前，对于消费者来说，这个消息是不可见的"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213368-8bh7tc9","Type":"NodeBlockquote","Properties":{"id":"20240201213368-8bh7tc9","updated":"20240201213368"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213369-elfp5od","Type":"NodeParagraph","Properties":{"id":"20240201213369-elfp5od","updated":"20240201213369"},"Children":[{"Type":"NodeText","Data":"那么，如何做到写入消息但是对用户不可见呢？RocketMQ 事务消息的做法是：如果消息是 half 消息，将备份原消息的主题与消息消费队列，然后 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"改变主题"},{"Type":"NodeText","Data":" 为 RMQ_SYS_TRANS_HALF_TOPIC。由于消费组未订阅该主题，故消费端无法消费 half 类型的消息，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"然后 RocketMQ 会开启一个定时任务，从 Topic 为 RMQ_SYS_TRANS_HALF_TOPIC 中拉取消息进行消费"},{"Type":"NodeText","Data":"，根据生产者组获取一个服务提供者发送回查事务状态请求，根据事务状态来决定是提交或回滚消息。"}]}]},{"ID":"20240201213370-rydmtwv","Type":"NodeParagraph","Properties":{"id":"20240201213370-rydmtwv","updated":"20240201213370"},"Children":[{"Type":"NodeText","Data":"你可以试想一下，如果没有从第 5 步开始的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务反查机制"},{"Type":"NodeText","Data":" ，如果出现网路波动第 4 步没有发送成功，这样就会产生 MQ 不知道是不是需要给消费者消费的问题，他就像一个无头苍蝇一样。在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中就是使用的上述的事务反查来解决的，而在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 中通常是直接抛出一个异常让用户来自行解决。"}]},{"ID":"20240201213371-mxn45um","Type":"NodeParagraph","Properties":{"id":"20240201213371-mxn45um","updated":"20240201213371"},"Children":[{"Type":"NodeText","Data":"你还需要注意的是，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQ Server"},{"Type":"NodeText","Data":" 指向系统 B 的操作已经和系统 A 不相关了，也就是说在消息队列中的分布式事务是——"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本地事务和存储消息到消息队列才是同一个事务"},{"Type":"NodeText","Data":"。这样也就产生了事务的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最终一致性"},{"Type":"NodeText","Data":"，因为整个过程是异步的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"每个系统只要保证它自己那一部分的事务就行了"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213372-bj1v29r","Type":"NodeParagraph","Properties":{"id":"20240201213372-bj1v29r","updated":"20240201213372"},"Children":[{"Type":"NodeText","Data":"实践中会遇到的问题：事务消息需要一个事务监听器来监听本地事务是否成功，并且事务监听器接口只允许被实现一次。那就意味着需要把各种事务消息的本地事务都写在一个接口方法里面，必将会产生大量的耦合和类型判断。采用函数 Function 接口来包装整个业务过程，作为一个参数传递到监听器的接口方法中。再调用 Function 的 apply() 方法来执行业务，事务也会在 apply() 方法中执行。让监听器与业务之间实现解耦，使之具备了真实生产环境中的可行性。"}]},{"ID":"20240201213373-98p9yyv","Type":"NodeParagraph","Properties":{"id":"20240201213373-98p9yyv","updated":"20240201213373"},"Children":[{"Type":"NodeText","Data":"1.模拟一个添加用户浏览记录的需求"}]},{"ID":"20240201213374-8e0yfyh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213374-8e0yfyh","updated":"20240201213374"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@PostMapping(\"/add\")\n@ApiOperation(\"添加用户浏览记录\")\npublic Result\u003cTransactionSendResult\u003e add(Long userId, Long forecastLogId) {\n\n        // 函数式编程:浏览记录入库\n        Function\u003cString, Boolean\u003e function = transactionId -\u003e viewHistoryHandler.addViewHistory(transactionId, userId, forecastLogId);\n\n        Map\u003cString, Long\u003e hashMap = new HashMap\u003c\u003e();\n        hashMap.put(\"userId\", userId);\n        hashMap.put(\"forecastLogId\", forecastLogId);\n        String jsonString = JSON.toJSONString(hashMap);\n\n        // 发送事务消息;将本地的事务操作,用函数Function接口接收,作为一个参数传入到方法中\n        TransactionSendResult transactionSendResult = mqProducerService.sendTransactionMessage(jsonString, MQDestination.TAG_ADD_VIEW_HISTORY, function);\n        return Result.success(transactionSendResult);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213375-u4twngl","Type":"NodeParagraph","Properties":{"id":"20240201213375-u4twngl","updated":"20240201213375"},"Children":[{"Type":"NodeText","Data":"2.发送事务消息的方法"}]},{"ID":"20240201213376-qrktps2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213376-qrktps2","updated":"20240201213376"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 发送事务消息\n *\n * @param msgBody\n * @param tag\n * @param function\n * @return\n */\npublic TransactionSendResult sendTransactionMessage(String msgBody, String tag, Function\u003cString, Boolean\u003e function) {\n    // 构建消息体\n    Message\u003cString\u003e message = buildMessage(msgBody);\n\n    // 构建消息投递信息\n    String destination = buildDestination(tag);\n\n    TransactionSendResult result = rocketMQTemplate.sendMessageInTransaction(destination, message, function);\n    return result;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213377-4cfayjz","Type":"NodeParagraph","Properties":{"id":"20240201213377-4cfayjz","updated":"20240201213377"},"Children":[{"Type":"NodeText","Data":"3.生产者消息监听器,只允许一个类去实现该监听器"}]},{"ID":"20240201213378-mixq0u8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213378-mixq0u8","updated":"20240201213378"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Slf4j\n@RocketMQTransactionListener\npublic class TransactionMsgListener implements RocketMQLocalTransactionListener {\n\n    @Autowired\n    private RedisService redisService;\n\n    /**\n     * 执行本地事务（在发送消息成功时执行）\n     *\n     * @param message\n     * @param o\n     * @return commit or rollback or unknown\n     */\n    @Override\n    public RocketMQLocalTransactionState executeLocalTransaction(Message message, Object o) {\n\n        // 1、获取事务ID\n        String transactionId = null;\n        try {\n            transactionId = message.getHeaders().get(\"rocketmq_TRANSACTION_ID\").toString();\n            // 2、判断传入函数对象是否为空，如果为空代表没有要执行的业务直接抛弃消息\n            if (o == null) {\n                //返回ROLLBACK状态的消息会被丢弃\n                log.info(\"事务消息回滚，没有需要处理的业务 transactionId={}\", transactionId);\n                return RocketMQLocalTransactionState.ROLLBACK;\n            }\n            // 将Object o转换成Function对象\n            Function\u003cString, Boolean\u003e function = (Function\u003cString, Boolean\u003e) o;\n            // 执行业务 事务也会在function.apply中执行\n            Boolean apply = function.apply(transactionId);\n            if (apply) {\n                log.info(\"事务提交，消息正常处理 transactionId={}\", transactionId);\n                //返回COMMIT状态的消息会立即被消费者消费到\n                return RocketMQLocalTransactionState.COMMIT;\n            }\n        } catch (Exception e) {\n            log.info(\"出现异常 返回ROLLBACK transactionId={}\", transactionId);\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n        return RocketMQLocalTransactionState.ROLLBACK;\n    }\n\n    /**\n     * 事务回查机制，检查本地事务的状态\n     *\n     * @param message\n     * @return\n     */\n    @Override\n    public RocketMQLocalTransactionState checkLocalTransaction(Message message) {\n\n        String transactionId = message.getHeaders().get(\"rocketmq_TRANSACTION_ID\").toString();\n\n        // 查redis\n        MqTransaction mqTransaction = redisService.getCacheObject(\"mqTransaction:\" + transactionId);\n        if (Objects.isNull(mqTransaction)) {\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n        return RocketMQLocalTransactionState.COMMIT;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213379-1bsjuzl","Type":"NodeParagraph","Properties":{"id":"20240201213379-1bsjuzl","updated":"20240201213379"},"Children":[{"Type":"NodeText","Data":"4.模拟的业务场景,这里的方法必须提取出来,放在别的类里面.如果调用方与被调用方在同一个类中,会发生事务失效的问题."}]},{"ID":"20240201213380-584s22p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213380-584s22p","updated":"20240201213380"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\npublic class ViewHistoryHandler {\n\n    @Autowired\n    private IViewHistoryService viewHistoryService;\n\n    @Autowired\n    private IMqTransactionService mqTransactionService;\n\n    @Autowired\n    private RedisService redisService;\n\n    /**\n     * 浏览记录入库\n     *\n     * @param transactionId\n     * @param userId\n     * @param forecastLogId\n     * @return\n     */\n    @Transactional\n    public Boolean addViewHistory(String transactionId, Long userId, Long forecastLogId) {\n        // 构建浏览记录\n        ViewHistory viewHistory = new ViewHistory();\n        viewHistory.setUserId(userId);\n        viewHistory.setForecastLogId(forecastLogId);\n        viewHistory.setCreateTime(LocalDateTime.now());\n        boolean save = viewHistoryService.save(viewHistory);\n\n        // 本地事务信息\n        MqTransaction mqTransaction = new MqTransaction();\n        mqTransaction.setTransactionId(transactionId);\n        mqTransaction.setCreateTime(new Date());\n        mqTransaction.setStatus(MqTransaction.StatusEnum.VALID.getStatus());\n\n        // 1.可以把事务信息存数据库\n        mqTransactionService.save(mqTransaction);\n\n        // 2.也可以选择存redis,4个小时有效期,'4个小时'是RocketMQ内置的最大回查超时时长,过期未确认将强制回滚\n        redisService.setCacheObject(\"mqTransaction:\" + transactionId, mqTransaction, 4L, TimeUnit.HOURS);\n\n        // 放开注释,模拟异常,事务回滚\n        // int i = 10 / 0;\n\n        return save;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213381-txhrl3h","Type":"NodeParagraph","Properties":{"id":"20240201213381-txhrl3h","updated":"20240201213381"},"Children":[{"Type":"NodeText","Data":"5.消费消息,以及幂等处理"}]},{"ID":"20240201213382-rtu8st1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213382-rtu8st1","updated":"20240201213382"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\n@RocketMQMessageListener(topic = MQDestination.TOPIC, selectorExpression = MQDestination.TAG_ADD_VIEW_HISTORY, consumerGroup = MQDestination.TAG_ADD_VIEW_HISTORY)\npublic class ConsumerAddViewHistory implements RocketMQListener\u003cMessage\u003e {\n    // 监听到消息就会执行此方法\n    @Override\n    public void onMessage(Message message) {\n        // 幂等校验\n        String transactionId = message.getTransactionId();\n\n        // 查redis\n        MqTransaction mqTransaction = redisService.getCacheObject(\"mqTransaction:\" + transactionId);\n\n        // 不存在事务记录\n        if (Objects.isNull(mqTransaction)) {\n            return;\n        }\n\n        // 已消费\n        if (Objects.equals(mqTransaction.getStatus(), MqTransaction.StatusEnum.CONSUMED.getStatus())) {\n            return;\n        }\n\n        String msg = new String(message.getBody());\n        Map\u003cString, Long\u003e map = JSON.parseObject(msg, new TypeReference\u003cHashMap\u003cString, Long\u003e\u003e() {\n        });\n        Long userId = map.get(\"userId\");\n        Long forecastLogId = map.get(\"forecastLogId\");\n\n        // 下游的业务处理\n        // TODO 记录用户喜好,更新用户画像\n\n        // TODO 更新'证券预测文章'的浏览量,重新计算文章的曝光排序\n\n        // 更新状态为已消费\n        mqTransaction.setUpdateTime(new Date());\n        mqTransaction.setStatus(MqTransaction.StatusEnum.CONSUMED.getStatus());\n        redisService.setCacheObject(\"mqTransaction:\" + transactionId, mqTransaction, 4L, TimeUnit.HOURS);\n        log.info(\"监听到消息：msg={}\", JSON.toJSONString(map));\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213383-raem9zq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213383-raem9zq","updated":"20240201213383"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何解决消息堆积问题？"}]},{"ID":"20240201213384-e86tlm3","Type":"NodeParagraph","Properties":{"id":"20240201213384-e86tlm3","updated":"20240201213384"},"Children":[{"Type":"NodeText","Data":"在上面我们提到了消息队列一个很重要的功能——"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"削峰"},{"Type":"NodeText","Data":" 。那么如果这个峰值太大了导致消息堆积在队列中怎么办呢？"}]},{"ID":"20240201213385-q8pindy","Type":"NodeParagraph","Properties":{"id":"20240201213385-q8pindy","updated":"20240201213385"},"Children":[{"Type":"NodeText","Data":"其实这个问题可以将它广义化，因为产生消息堆积的根源其实就只有两个——生产者生产太快或者消费者消费太慢。"}]},{"ID":"20240201213386-l47knuj","Type":"NodeParagraph","Properties":{"id":"20240201213386-l47knuj","updated":"20240201213386"},"Children":[{"Type":"NodeText","Data":"我们可以从多个角度去思考解决这个问题，当流量到峰值的时候是因为生产者生产太快，我们可以使用一些 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"限流降级"},{"Type":"NodeText","Data":" 的方法，当然你也可以增加多个消费者实例去水平扩展增加消费能力来匹配生产的激增。如果消费者消费过慢的话，我们可以先检查 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"是否是消费者出现了大量的消费错误"},{"Type":"NodeText","Data":" ，或者打印一下日志查看是否是哪一个线程卡死，出现了锁资源不释放等等的问题。"}]},{"ID":"20240201213387-cwbsouv","Type":"NodeBlockquote","Properties":{"id":"20240201213387-cwbsouv","updated":"20240201213387"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213388-883s3pu","Type":"NodeParagraph","Properties":{"id":"20240201213388-883s3pu","updated":"20240201213388"},"Children":[{"Type":"NodeText","Data":"当然，最快速解决消息堆积问题的方法还是增加消费者实例，不过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同时你还需要增加每个主题的队列数量"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213389-bnh7dfx","Type":"NodeParagraph","Properties":{"id":"20240201213389-bnh7dfx","updated":"20240201213389"},"Children":[{"Type":"NodeText","Data":"别忘了在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一个队列只会被一个消费者消费"},{"Type":"NodeText","Data":" ，如果你仅仅是增加消费者实例就会出现我一开始给你画架构图的那种情况。"}]}]},{"ID":"20240201213390-oou8y8v","Type":"NodeParagraph","Properties":{"id":"20240201213390-oou8y8v","updated":"20240201213390"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef387d939ab66d.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213391-g4yf2w6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213391-g4yf2w6","updated":"20240201213391"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是回溯消费？"}]},{"ID":"20240201213392-jy5alg2","Type":"NodeParagraph","Properties":{"id":"20240201213392-jy5alg2","updated":"20240201213392"},"Children":[{"Type":"NodeText","Data":"回溯消费是指 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 已经消费成功的消息，由于业务上需求需要重新消费，在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 在向"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 投递成功消息后，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息仍然需要保留"},{"Type":"NodeText","Data":" 。并且重新消费一般是按照时间维度，例如由于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 系统故障，恢复后需要重新消费 1 小时前的数据，那么 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 要提供一种机制，可以按照时间维度来回退消费进度。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 支持按照时间回溯消费，时间维度精确到毫秒。"}]},{"ID":"20240201213393-ifkm3ep","Type":"NodeParagraph","Properties":{"id":"20240201213393-ifkm3ep","updated":"20240201213393"},"Children":[{"Type":"NodeText","Data":"这是官方文档的解释，我直接照搬过来就当科普了 😁😁😁。"}]},{"ID":"20240201213394-t85c2b2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213394-t85c2b2","updated":"20240201213394"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 如何保证高性能读写"}]},{"ID":"20240201213395-noapupk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213395-noapupk","updated":"20240201213395"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"传统 IO 方式"}]},{"ID":"20240201213396-mdi708c","Type":"NodeParagraph","Properties":{"id":"20240201213396-mdi708c","updated":"20240201213396"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/31699457085_.pic.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213397-crsxery","Type":"NodeParagraph","Properties":{"id":"20240201213397-crsxery","updated":"20240201213397"},"Children":[{"Type":"NodeText","Data":"传统的 IO 读写其实就是 read + write 的操作，整个过程会分为如下几步"}]},{"ID":"20240201213398-7mrg8uo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213398-7mrg8uo","updated":"20240201213398"},"Children":[{"ID":"20240201213399-htryorl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213399-htryorl","updated":"20240201213399"},"Children":[{"ID":"20240201213400-nct8kpe","Type":"NodeParagraph","Properties":{"id":"20240201213400-nct8kpe","updated":"20240201213400"},"Children":[{"Type":"NodeText","Data":"用户调用 read()方法，开始读取数据，此时发生一次上下文从用户态到内核态的切换，也就是图示的切换 1"}]}]},{"ID":"20240201213401-ma35okc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213401-ma35okc","updated":"20240201213401"},"Children":[{"ID":"20240201213402-l9pouyk","Type":"NodeParagraph","Properties":{"id":"20240201213402-l9pouyk","updated":"20240201213402"},"Children":[{"Type":"NodeText","Data":"将磁盘数据通过 DMA 拷贝到内核缓存区"}]}]},{"ID":"20240201213403-cj07kyf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213403-cj07kyf","updated":"20240201213403"},"Children":[{"ID":"20240201213404-6oz0aoq","Type":"NodeParagraph","Properties":{"id":"20240201213404-6oz0aoq","updated":"20240201213404"},"Children":[{"Type":"NodeText","Data":"将内核缓存区的数据拷贝到用户缓冲区，这样用户，也就是我们写的代码就能拿到文件的数据"}]}]},{"ID":"20240201213405-aebj843","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213405-aebj843","updated":"20240201213405"},"Children":[{"ID":"20240201213406-1sayeni","Type":"NodeParagraph","Properties":{"id":"20240201213406-1sayeni","updated":"20240201213406"},"Children":[{"Type":"NodeText","Data":"read()方法返回，此时就会从内核态切换到用户态，也就是图示的切换 2"}]}]},{"ID":"20240201213407-kvhcn51","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213407-kvhcn51","updated":"20240201213407"},"Children":[{"ID":"20240201213408-wzxpu26","Type":"NodeParagraph","Properties":{"id":"20240201213408-wzxpu26","updated":"20240201213408"},"Children":[{"Type":"NodeText","Data":"当我们拿到数据之后，就可以调用 write()方法，此时上下文会从用户态切换到内核态，即图示切换 3"}]}]},{"ID":"20240201213409-86voh9m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213409-86voh9m","updated":"20240201213409"},"Children":[{"ID":"20240201213410-omio63n","Type":"NodeParagraph","Properties":{"id":"20240201213410-omio63n","updated":"20240201213410"},"Children":[{"Type":"NodeText","Data":"CPU 将用户缓冲区的数据拷贝到 Socket 缓冲区"}]}]},{"ID":"20240201213411-ujii4lp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213411-ujii4lp","updated":"20240201213411"},"Children":[{"ID":"20240201213412-y6ydqdh","Type":"NodeParagraph","Properties":{"id":"20240201213412-y6ydqdh","updated":"20240201213412"},"Children":[{"Type":"NodeText","Data":"将 Socket 缓冲区数据拷贝至网卡"}]}]},{"ID":"20240201213413-95ik908","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213413-95ik908","updated":"20240201213413"},"Children":[{"ID":"20240201213414-qznfjvw","Type":"NodeParagraph","Properties":{"id":"20240201213414-qznfjvw","updated":"20240201213414"},"Children":[{"Type":"NodeText","Data":"write()方法返回，上下文重新从内核态切换到用户态，即图示切换 4"}]}]}]},{"ID":"20240201213415-qfi5srj","Type":"NodeParagraph","Properties":{"id":"20240201213415-qfi5srj","updated":"20240201213415"},"Children":[{"Type":"NodeText","Data":"整个过程发生了 4 次上下文切换和 4 次数据的拷贝，这在高并发场景下肯定会严重影响读写性能故引入了零拷贝技术"}]},{"ID":"20240201213416-bnsj8s7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213416-bnsj8s7","updated":"20240201213416"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"零拷贝技术"}]},{"ID":"20240201213417-c0igk6s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213417-c0igk6s","updated":"20240201213417"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"mmap"}]},{"ID":"20240201213418-r5tjdvz","Type":"NodeParagraph","Properties":{"id":"20240201213418-r5tjdvz","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"mmap（memory map）是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。"}]},{"ID":"20240201213419-68hr3qm","Type":"NodeParagraph","Properties":{"id":"20240201213419-68hr3qm","updated":"20240201213419"},"Children":[{"Type":"NodeText","Data":"简单地说就是内核缓冲区和应用缓冲区共享，从而减少了从读缓冲区到用户缓冲区的一次 CPU 拷贝。基于此上述架构图可变为："}]},{"ID":"20240201213420-i0unfh8","Type":"NodeParagraph","Properties":{"id":"20240201213420-i0unfh8","updated":"20240201213420"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/41699457086_.pic.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213421-od922bk","Type":"NodeParagraph","Properties":{"id":"20240201213421-od922bk","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"基于 mmap IO 读写其实就变成 mmap + write 的操作，也就是用 mmap 替代传统 IO 中的 read 操作。"}]},{"ID":"20240201213422-cwqpavg","Type":"NodeParagraph","Properties":{"id":"20240201213422-cwqpavg","updated":"20240201213422"},"Children":[{"Type":"NodeText","Data":"当用户发起 mmap 调用的时候会发生上下文切换 1，进行内存映射，然后数据被拷贝到内核缓冲区，mmap 返回，发生上下文切换 2；随后用户调用 write，发生上下文切换 3，将内核缓冲区的数据拷贝到 Socket 缓冲区，write 返回，发生上下文切换 4。"}]},{"ID":"20240201213423-2m2zjec","Type":"NodeParagraph","Properties":{"id":"20240201213423-2m2zjec","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"发生 4 次上下文切换和 3 次 IO 拷贝操作，在 Java 中的实现："}]},{"ID":"20240201213424-huzrrpn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213424-huzrrpn","updated":"20240201213424"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"FileChannel fileChannel = new RandomAccessFile(\"test.txt\", \"rw\").getChannel();\nMappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0, fileChannel.size());\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213425-4bbanep","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213425-4bbanep","updated":"20240201213425"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"sendfile"}]},{"ID":"20240201213426-ddznj25","Type":"NodeParagraph","Properties":{"id":"20240201213426-ddznj25","updated":"20240201213426"},"Children":[{"Type":"NodeText","Data":"sendfile()跟 mmap()一样，也会减少一次 CPU 拷贝，但是它同时也会减少两次上下文切换。"}]},{"ID":"20240201213427-6mk5onx","Type":"NodeParagraph","Properties":{"id":"20240201213427-6mk5onx","updated":"20240201213427"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/51699457087_.pic.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213428-tga15o8","Type":"NodeParagraph","Properties":{"id":"20240201213428-tga15o8","updated":"20240201213428"},"Children":[{"Type":"NodeText","Data":"如图，用户在发起 sendfile()调用时会发生切换 1，之后数据通过 DMA 拷贝到内核缓冲区，之后再将内核缓冲区的数据 CPU 拷贝到 Socket 缓冲区，最后拷贝到网卡，sendfile()返回，发生切换 2。发生了 3 次拷贝和两次切换。Java 也提供了相应 api："}]},{"ID":"20240201213429-35wcg22","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213429-35wcg22","updated":"20240201213429"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"FileChannel channel = FileChannel.open(Paths.get(\"./test.txt\"), StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n//调用transferTo方法向目标数据传输\nchannel.transferTo(position, len, target);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213430-mcqhhej","Type":"NodeParagraph","Properties":{"id":"20240201213430-mcqhhej","updated":"20240201213430"},"Children":[{"Type":"NodeText","Data":"在如上代码中，并没有文件的读写操作，而是直接将文件的数据传输到 target 目标缓冲区，也就是说，sendfile 是无法知道文件的具体的数据的；但是 mmap 不一样，他是可以修改内核缓冲区的数据的。假设如果需要对文件的内容进行修改之后再传输，只有 mmap 可以满足。"}]},{"ID":"20240201213431-ynyjay4","Type":"NodeParagraph","Properties":{"id":"20240201213431-ynyjay4","updated":"20240201213431"},"Children":[{"Type":"NodeText","Data":"通过上面的一些介绍，结论是基于零拷贝技术，可以减少 CPU 的拷贝次数和上下文切换次数，从而可以实现文件高效的读写操作。"}]},{"ID":"20240201213432-etfakwc","Type":"NodeParagraph","Properties":{"id":"20240201213432-etfakwc","updated":"20240201213432"},"Children":[{"Type":"NodeText","Data":"RocketMQ 内部主要是使用基于 mmap 实现的零拷贝(其实就是调用上述提到的 api)，用来读写文件，这也是 RocketMQ 为什么快的一个很重要原因。"}]},{"ID":"20240201213433-h3j511q","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213433-h3j511q","updated":"20240201213433"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"RocketMQ 的刷盘机制"}]},{"ID":"20240201213434-fen4zlc","Type":"NodeParagraph","Properties":{"id":"20240201213434-fen4zlc","updated":"20240201213434"},"Children":[{"Type":"NodeText","Data":"上面我讲了那么多的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 的架构和设计原理，你有没有好奇"}]},{"ID":"20240201213435-e4a58p2","Type":"NodeParagraph","Properties":{"id":"20240201213435-e4a58p2","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列是以什么样的形式存在的？"}]},{"ID":"20240201213436-kd1zmjd","Type":"NodeParagraph","Properties":{"id":"20240201213436-kd1zmjd","updated":"20240201213436"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列中的消息又是如何进行存储持久化的呢？"}]},{"ID":"20240201213437-v0a7mc3","Type":"NodeParagraph","Properties":{"id":"20240201213437-v0a7mc3","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"我在上文中提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同步刷盘"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异步刷盘"},{"Type":"NodeText","Data":" 又是什么呢？它们会给持久化带来什么样的影响呢？"}]},{"ID":"20240201213438-y0080ut","Type":"NodeParagraph","Properties":{"id":"20240201213438-y0080ut","updated":"20240201213438"},"Children":[{"Type":"NodeText","Data":"下面我将给你们一一解释。"}]},{"ID":"20240201213439-4eq90p9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213439-4eq90p9","updated":"20240201213439"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"同步刷盘和异步刷盘"}]},{"ID":"20240201213440-5y8ej2r","Type":"NodeParagraph","Properties":{"id":"20240201213440-5y8ej2r","updated":"20240201213440"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef387fba311cda-20230814005009889.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213441-w3h08qg","Type":"NodeParagraph","Properties":{"id":"20240201213441-w3h08qg","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"如上图所示，在同步刷盘中需要等待一个刷盘成功的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ACK"},{"Type":"NodeText","Data":" ，同步刷盘对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQ"},{"Type":"NodeText","Data":" 消息可靠性来说是一种不错的保障，但是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"性能上会有较大影响"},{"Type":"NodeText","Data":" ，一般地适用于金融等特定业务场景。"}]},{"ID":"20240201213442-10gmgej","Type":"NodeParagraph","Properties":{"id":"20240201213442-10gmgej","updated":"20240201213442"},"Children":[{"Type":"NodeText","Data":"而异步刷盘往往是开启一个线程去异步地执行刷盘操作。消息刷盘采用后台异步线程提交的方式进行， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"降低了读写延迟"},{"Type":"NodeText","Data":" ，提高了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MQ"},{"Type":"NodeText","Data":" 的性能和吞吐量，一般适用于如发验证码等对于消息保证要求不太高的业务场景。"}]},{"ID":"20240201213443-vsqgpru","Type":"NodeParagraph","Properties":{"id":"20240201213443-vsqgpru","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"一般地，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异步刷盘只有在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Broker"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 意外宕机的时候会丢失部分数据"},{"Type":"NodeText","Data":"，你可以设置 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 的参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FlushDiskType"},{"Type":"NodeText","Data":" 来调整你的刷盘策略(ASYNC_FLUSH 或者 SYNC_FLUSH)。"}]},{"ID":"20240201213444-jcq3wxd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213444-jcq3wxd","updated":"20240201213444"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"同步复制和异步复制"}]},{"ID":"20240201213445-bashwxf","Type":"NodeParagraph","Properties":{"id":"20240201213445-bashwxf","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"上面的同步刷盘和异步刷盘是在单个结点层面的，而同步复制和异步复制主要是指的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Borker"},{"Type":"NodeText","Data":" 主从模式下，主节点返回消息给客户端的时候是否需要同步从节点。"}]},{"ID":"20240201213446-2fadh7a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213446-2fadh7a","updated":"20240201213446"},"Children":[{"ID":"20240201213447-rby0rgg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213447-rby0rgg","updated":"20240201213447"},"Children":[{"ID":"20240201213448-156pfvm","Type":"NodeParagraph","Properties":{"id":"20240201213448-156pfvm","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"同步复制：也叫 “同步双写”，也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"只有消息同步双写到主从节点上时才返回写入成功"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213449-xkzh7eb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213449-xkzh7eb","updated":"20240201213449"},"Children":[{"ID":"20240201213450-bui4voj","Type":"NodeParagraph","Properties":{"id":"20240201213450-bui4voj","updated":"20240201213450"},"Children":[{"Type":"NodeText","Data":"异步复制："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息写入主节点之后就直接返回写入成功"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213451-6jf36z3","Type":"NodeParagraph","Properties":{"id":"20240201213451-6jf36z3","updated":"20240201213451"},"Children":[{"Type":"NodeText","Data":"然而，很多事情是没有完美的方案的，就比如我们进行消息写入的节点越多就更能保证消息的可靠性，但是随之的性能也会下降，所以需要程序员根据特定业务场景去选择适应的主从复制方案。"}]},{"ID":"20240201213452-xl5pn77","Type":"NodeParagraph","Properties":{"id":"20240201213452-xl5pn77","updated":"20240201213452"},"Children":[{"Type":"NodeText","Data":"那么，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"异步复制会不会也像异步刷盘那样影响消息的可靠性呢？"}]},{"ID":"20240201213453-1h7glrw","Type":"NodeParagraph","Properties":{"id":"20240201213453-1h7glrw","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"答案是不会的，因为两者就是不同的概念，对于消息可靠性是通过不同的刷盘策略保证的，而像异步同步复制策略仅仅是影响到了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可用性"},{"Type":"NodeText","Data":" 。为什么呢？其主要原因"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 是不支持自动主从切换的，当主节点挂掉之后，生产者就不能再给这个主节点生产消息了"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213454-40r1qq0","Type":"NodeParagraph","Properties":{"id":"20240201213454-40r1qq0","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"比如这个时候采用异步复制的方式，在主节点还未发送完需要同步的消息的时候主节点挂掉了，这个时候从节点就少了一部分消息。但是此时生产者无法再给主节点生产消息了，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消费者可以自动切换到从节点进行消费"},{"Type":"NodeText","Data":"(仅仅是消费)，所以在主节点挂掉的时间只会产生主从结点短暂的消息不一致的情况，降低了可用性，而当主节点重启之后，从节点那部分未来得及复制的消息还会继续复制。"}]},{"ID":"20240201213455-zkb18wi","Type":"NodeParagraph","Properties":{"id":"20240201213455-zkb18wi","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"在单主从架构中，如果一个主节点挂掉了，那么也就意味着整个系统不能再生产了。那么这个可用性的问题能否解决呢？"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一个主从不行那就多个主从的呗"},{"Type":"NodeText","Data":"，别忘了在我们最初的架构图中，每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 是分布在不同 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 中的。"}]},{"ID":"20240201213456-ifeu4og","Type":"NodeParagraph","Properties":{"id":"20240201213456-ifeu4og","updated":"20240201213456"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef38687488a5asadasfg4.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213457-vyc5z8n","Type":"NodeParagraph","Properties":{"id":"20240201213457-vyc5z8n","updated":"20240201213457"},"Children":[{"Type":"NodeText","Data":"但是这种复制方式同样也会带来一个问题，那就是无法保证 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"严格顺序"},{"Type":"NodeText","Data":" 。在上文中我们提到了如何保证的消息顺序性是通过将一个语义的消息发送在同一个队列中，使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 下的队列来保证顺序性的。如果此时我们主节点 A 负责的是订单 A 的一系列语义消息，然后它挂了，这样其他节点是无法代替主节点 A 的，如果我们任意节点都可以存入任何消息，那就没有顺序性可言了。"}]},{"ID":"20240201213458-j3sbvsv","Type":"NodeParagraph","Properties":{"id":"20240201213458-j3sbvsv","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"而在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中采用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dledger"},{"Type":"NodeText","Data":" 解决这个问题。他要求在写入消息的时候，要求"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"至少消息复制到半数以上的节点之后"},{"Type":"NodeText","Data":"，才给客⼾端返回写⼊成功，并且它是⽀持通过选举来动态切换主节点的。这里我就不展开说明了，读者可以自己去了解。"}]},{"ID":"20240201213459-ql3mdwm","Type":"NodeBlockquote","Properties":{"id":"20240201213459-ql3mdwm","updated":"20240201213459"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213460-kcy6495","Type":"NodeParagraph","Properties":{"id":"20240201213460-kcy6495","updated":"20240201213460"},"Children":[{"Type":"NodeText","Data":"也不是说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dledger"},{"Type":"NodeText","Data":" 是个完美的方案，至少在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dledger"},{"Type":"NodeText","Data":" 选举过程中是无法提供服务的，而且他必须要使用三个节点或以上，如果多数节点同时挂掉他也是无法保证可用性的，而且要求消息复制半数以上节点的效率和直接异步复制还是有一定的差距的。"}]}]},{"ID":"20240201213461-ikwtivr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213461-ikwtivr","updated":"20240201213461"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"存储机制"}]},{"ID":"20240201213462-29flbuu","Type":"NodeParagraph","Properties":{"id":"20240201213462-29flbuu","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"还记得上面我们一开始的三个问题吗？到这里第三个问题已经解决了。"}]},{"ID":"20240201213463-rte9jz5","Type":"NodeParagraph","Properties":{"id":"20240201213463-rte9jz5","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"但是，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"队列是以什么样的形式存在的？队列中的消息又是如何进行存储持久化的呢？"},{"Type":"NodeText","Data":" 还未解决，其实这里涉及到了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 是如何设计它的存储结构了。我首先想大家介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 消息存储架构中的三大角色——"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommitLog"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexFile"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213464-przjtqd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-przjtqd","updated":"20240201213464"},"Children":[{"ID":"20240201213465-guqnh96","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-guqnh96","updated":"20240201213465"},"Children":[{"ID":"20240201213466-5b5b0yv","Type":"NodeParagraph","Properties":{"id":"20240201213466-5b5b0yv","updated":"20240201213466"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommitLog"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息主体以及元数据的存储主体"},{"Type":"NodeText","Data":"，存储 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":" 端写入的消息主体内容,消息内容不是定长的。单个文件大小默认 1G ，文件名长度为 20 位，左边补零，剩余为起始偏移量，比如 00000000000000000000 代表了第一个文件，起始偏移量为 0，文件大小为 1G=1073741824；当第一个文件写满了，第二个文件为 00000000001073741824，起始偏移量为 1073741824，以此类推。消息主要是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"顺序写入日志文件"},{"Type":"NodeText","Data":"，当文件满了，写入下一个文件。"}]}]},{"ID":"20240201213467-of2uk8w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213467-of2uk8w","updated":"20240201213467"},"Children":[{"ID":"20240201213468-b286nzm","Type":"NodeParagraph","Properties":{"id":"20240201213468-b286nzm","updated":"20240201213468"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":"：消息消费队列，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"引入的目的主要是提高消息消费的性能"},{"Type":"NodeText","Data":"(我们再前面也讲了)，由于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 是基于主题 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 的订阅模式，消息消费是针对主题进行的，如果要遍历 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commitlog"},{"Type":"NodeText","Data":" 文件中根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 检索消息是非常低效的。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":" 即可根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":" 来查找待消费的消息。其中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":"（逻辑消费队列）"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"作为消费消息的索引"},{"Type":"NodeText","Data":"，保存了指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 下的队列消息在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommitLog"},{"Type":"NodeText","Data":" 中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"起始物理偏移量 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"offset"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"，消息大小 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong code","TextMarkTextContent":"size"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":" 和消息 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong code","TextMarkTextContent":"Tag"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong code","TextMarkTextContent":"HashCode"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":" 值。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"consumequeue"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 文件可以看成是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"topic"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"commitlog"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 索引文件"},{"Type":"NodeText","Data":"，故 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"consumequeue"},{"Type":"NodeText","Data":" 文件夹的组织方式如下：topic/queue/file 三层组织结构，具体存储路径为：$HOME/store/consumequeue/{topic}/{queueId}/{fileName}。同样 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"consumequeue"},{"Type":"NodeText","Data":" 文件采取定长设计，每一个条目共 20 个字节，分别为 8 字节的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"commitlog"},{"Type":"NodeText","Data":" 物理偏移量、4 字节的消息长度、8 字节 tag "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hashcode"},{"Type":"NodeText","Data":"，单个文件由 30W 个条目组成，可以像数组一样随机访问每一个条目，每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":"文件大小约 5.72M；"}]}]},{"ID":"20240201213469-7a809vz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-7a809vz","updated":"20240201213469"},"Children":[{"ID":"20240201213470-ige9q32","Type":"NodeParagraph","Properties":{"id":"20240201213470-ige9q32","updated":"20240201213470"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexFile"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexFile"},{"Type":"NodeText","Data":"（索引文件）提供了一种可以通过 key 或时间区间来查询消息的方法。这里只做科普不做详细介绍。"}]}]}]},{"ID":"20240201213471-bt63dtq","Type":"NodeParagraph","Properties":{"id":"20240201213471-bt63dtq","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"总结来说，整个消息存储的结构，最主要的就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommitLoq"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":" 。而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":" 你可以大概理解为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 中的队列。"}]},{"ID":"20240201213472-dscoqcl","Type":"NodeParagraph","Properties":{"id":"20240201213472-dscoqcl","updated":"20240201213472"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef3884c02acc72.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213473-sph4ooy","Type":"NodeParagraph","Properties":{"id":"20240201213473-sph4ooy","updated":"20240201213473"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 采用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"混合型的存储结构"},{"Type":"NodeText","Data":" ，即为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 单个实例下所有的队列共用一个日志数据文件来存储消息。有意思的是在同样高并发的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 中会为每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 分配一个存储文件。这就有点类似于我们有一大堆书需要装上书架，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RockeMQ"},{"Type":"NodeText","Data":" 是不分书的种类直接成批的塞上去的，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Kafka"},{"Type":"NodeText","Data":" 是将书本放入指定的分类区域的。"}]},{"ID":"20240201213474-v2o6to1","Type":"NodeParagraph","Properties":{"id":"20240201213474-v2o6to1","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 为什么要这么做呢？原因是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提高数据的写入效率"},{"Type":"NodeText","Data":" ，不分 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 意味着我们有更大的几率获取 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"成批"},{"Type":"NodeText","Data":" 的消息进行数据写入，但也会带来一个麻烦就是读取消息的时候需要遍历整个大文件，这是非常耗时的。"}]},{"ID":"20240201213475-evbfn07","Type":"NodeParagraph","Properties":{"id":"20240201213475-evbfn07","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"所以，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 中又使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":" 作为每个队列的索引文件来 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提升读取消息的效率"},{"Type":"NodeText","Data":"。我们可以直接根据队列的消息序号，计算出索引的全局位置（索引序号"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":"索引固定⻓度 20），然后直接读取这条索引，再根据索引中记录的消息的全局位置，找到消息。"}]},{"ID":"20240201213476-jxusari","Type":"NodeParagraph","Properties":{"id":"20240201213476-jxusari","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"讲到这里，你可能对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RockeMQ"},{"Type":"NodeText","Data":" 的存储架构还有些模糊，没事，我们结合着图来理解一下。"}]},{"ID":"20240201213477-zeon2h3","Type":"NodeParagraph","Properties":{"id":"20240201213477-zeon2h3","updated":"20240201213477"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef388763c25c62.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213478-90ibdye","Type":"NodeParagraph","Properties":{"id":"20240201213478-90ibdye","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"emmm，是不是有一点复杂 🤣，看英文图片和英文文档的时候就不要怂，硬着头皮往下看就行。"}]},{"ID":"20240201213479-gf01rad","Type":"NodeBlockquote","Properties":{"id":"20240201213479-gf01rad","updated":"20240201213479"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213480-6val4qu","Type":"NodeParagraph","Properties":{"id":"20240201213480-6val4qu","updated":"20240201213480"},"Children":[{"Type":"NodeText","Data":"如果上面没看懂的读者一定要认真看下面的流程分析！"}]}]},{"ID":"20240201213481-dj9387e","Type":"NodeParagraph","Properties":{"id":"20240201213481-dj9387e","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"首先，在最上面的那一块就是我刚刚讲的你现在可以直接 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ConsumerQueue"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 理解为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Queue"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213482-bnqcg3y","Type":"NodeParagraph","Properties":{"id":"20240201213482-bnqcg3y","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"在图中最左边说明了红色方块代表被写入的消息，虚线方块代表等待被写入的。左边的生产者发送消息会指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"QueueId"},{"Type":"NodeText","Data":" 和具体消息内容，而在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":" 中管你是哪门子消息，他直接 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全部顺序存储到了 CommitLog"},{"Type":"NodeText","Data":"。而根据生产者指定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Topic"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"QueueId"},{"Type":"NodeText","Data":" 将这条消息本身在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommitLog"},{"Type":"NodeText","Data":" 的偏移(offset)，消息本身大小，和 tag 的 hash 值存入对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeQueue"},{"Type":"NodeText","Data":" 索引文件中。而在每个队列中都保存了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeOffset"},{"Type":"NodeText","Data":" 即每个消费者组的消费位置(我在架构那里提到了，忘了的同学可以回去看一下)，而消费者拉取消息进行消费的时候只需要根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ConsumeOffset"},{"Type":"NodeText","Data":" 获取下一个未被消费的消息就行了。"}]},{"ID":"20240201213483-ragiezb","Type":"NodeParagraph","Properties":{"id":"20240201213483-ragiezb","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"上述就是我对于整个消息存储架构的大概理解(这里不涉及到一些细节讨论，比如稀疏索引等等问题)，希望对你有帮助。"}]},{"ID":"20240201213484-ayce1a7","Type":"NodeParagraph","Properties":{"id":"20240201213484-ayce1a7","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"因为有一个知识点因为写嗨了忘讲了，想想在哪里加也不好，所以我留给大家去思考 🤔🤔 一下吧。"}]},{"ID":"20240201213485-z2oxvvt","Type":"NodeParagraph","Properties":{"id":"20240201213485-z2oxvvt","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"为什么 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommitLog"},{"Type":"NodeText","Data":" 文件要设计成固定大小的长度呢？提醒："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存映射机制"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213486-p0cijai","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213486-p0cijai","updated":"20240201213486"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213487-lkxlj82","Type":"NodeParagraph","Properties":{"id":"20240201213487-lkxlj82","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"总算把这篇博客写完了。我讲的你们还记得吗 😅？"}]},{"ID":"20240201213488-6ft7p5b","Type":"NodeParagraph","Properties":{"id":"20240201213488-6ft7p5b","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"这篇文章中我主要想大家介绍了"}]},{"ID":"20240201213489-q9j9mqs","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213489-q9j9mqs","updated":"20240201213489"},"Children":[{"ID":"20240201213490-wg6rswi","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213490-wg6rswi","updated":"20240201213490"},"Children":[{"ID":"20240201213491-2rm4joc","Type":"NodeParagraph","Properties":{"id":"20240201213491-2rm4joc","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"消息队列出现的原因"}]}]},{"ID":"20240201213492-37lrvye","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213492-37lrvye","updated":"20240201213492"},"Children":[{"ID":"20240201213493-44cffhl","Type":"NodeParagraph","Properties":{"id":"20240201213493-44cffhl","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"消息队列的作用(异步，解耦，削峰)"}]}]},{"ID":"20240201213494-73pwfzo","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213494-73pwfzo","updated":"20240201213494"},"Children":[{"ID":"20240201213495-6bem02t","Type":"NodeParagraph","Properties":{"id":"20240201213495-6bem02t","updated":"20240201213495"},"Children":[{"Type":"NodeText","Data":"消息队列带来的一系列问题(消息堆积、重复消费、顺序消费、分布式事务等等)"}]}]},{"ID":"20240201213496-xs04rmf","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213496-xs04rmf","updated":"20240201213496"},"Children":[{"ID":"20240201213497-7xplpsl","Type":"NodeParagraph","Properties":{"id":"20240201213497-7xplpsl","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"消息队列的两种消息模型——队列和主题模式"}]}]},{"ID":"20240201213498-yaxes1y","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213498-yaxes1y","updated":"20240201213498"},"Children":[{"ID":"20240201213499-9gvarph","Type":"NodeParagraph","Properties":{"id":"20240201213499-9gvarph","updated":"20240201213499"},"Children":[{"Type":"NodeText","Data":"分析了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 的技术架构("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NameServer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Broker"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":")"}]}]},{"ID":"20240201213500-7bvzgcw","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213500-7bvzgcw","updated":"20240201213500"},"Children":[{"ID":"20240201213501-fe4nxaf","Type":"NodeParagraph","Properties":{"id":"20240201213501-fe4nxaf","updated":"20240201213501"},"Children":[{"Type":"NodeText","Data":"结合 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 回答了消息队列副作用的解决方案"}]}]},{"ID":"20240201213502-f5x78hi","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213502-f5x78hi","updated":"20240201213502"},"Children":[{"ID":"20240201213503-80d2rs4","Type":"NodeParagraph","Properties":{"id":"20240201213503-80d2rs4","updated":"20240201213503"},"Children":[{"Type":"NodeText","Data":"介绍了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RocketMQ"},{"Type":"NodeText","Data":" 的存储机制和刷盘策略。"}]}]}]},{"ID":"20240201213504-p0hjz7h","Type":"NodeParagraph","Properties":{"id":"20240201213504-p0hjz7h","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"等等。。。"}]},{"ID":"20240201213505-olpxqaa","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213505-olpxqaa","updated":"20240201213505"}}]}