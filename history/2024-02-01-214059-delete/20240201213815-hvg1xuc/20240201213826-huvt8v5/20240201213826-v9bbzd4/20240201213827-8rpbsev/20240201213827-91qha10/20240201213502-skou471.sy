{"ID":"20240201213502-skou471","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213502-skou471","title":"docker-intro","updated":"20240201213502"},"Children":[{"ID":"20240201213503-eiygqpf","Type":"NodeThematicBreak","Properties":{"id":"20240201213503-eiygqpf","updated":"20240201213503"}},{"ID":"20240201213504-2m4u0q0","Type":"NodeParagraph","Properties":{"id":"20240201213504-2m4u0q0","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"title: Docker核心概念总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: 开发工具"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213505-inqp94y","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213505-inqp94y","updated":"20240201213505"},"Children":[{"ID":"20240201213506-jjnguxx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213506-jjnguxx","updated":"20240201213506"},"Children":[{"ID":"20240201213507-qh82vb2","Type":"NodeParagraph","Properties":{"id":"20240201213507-qh82vb2","updated":"20240201213507"},"Children":[{"Type":"NodeText","Data":"Docker"}]}]}]},{"ID":"20240201213508-qt19c1s","Type":"NodeThematicBreak","Properties":{"id":"20240201213508-qt19c1s","updated":"20240201213508"}},{"ID":"20240201213509-xgw11br","Type":"NodeParagraph","Properties":{"id":"20240201213509-xgw11br","updated":"20240201213509"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本文只是对 Docker 的概念做了较为详细的介绍，并不涉及一些像 Docker 环境的安装以及 Docker 的一些常见操作和命令。"}]},{"ID":"20240201213510-c5uxwy0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213510-c5uxwy0","updated":"20240201213510"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"一 认识容器"}]},{"ID":"20240201213511-kz7uqcc","Type":"NodeParagraph","Properties":{"id":"20240201213511-kz7uqcc","updated":"20240201213511"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 是世界领先的软件容器平台"},{"Type":"NodeText","Data":"，所以想要搞懂 Docker 的概念我们必须先从容器开始说起。"}]},{"ID":"20240201213512-umloup3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213512-umloup3","updated":"20240201213512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1 什么是容器?"}]},{"ID":"20240201213513-j9ctaai","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213513-j9ctaai","updated":"20240201213513"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"先来看看容器较为官方的解释"}]},{"ID":"20240201213514-uapuszh","Type":"NodeParagraph","Properties":{"id":"20240201213514-uapuszh","updated":"20240201213514"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。"}]},{"ID":"20240201213515-jre824y","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213515-jre824y","updated":"20240201213515"},"Children":[{"ID":"20240201213516-p26m3tm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213516-p26m3tm","updated":"20240201213516"},"Children":[{"ID":"20240201213517-yo1kv26","Type":"NodeParagraph","Properties":{"id":"20240201213517-yo1kv26","updated":"20240201213517"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器镜像是轻量的、可执行的独立软件包"},{"Type":"NodeText","Data":" ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。"}]}]},{"ID":"20240201213518-10w3hd4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213518-10w3hd4","updated":"20240201213518"},"Children":[{"ID":"20240201213519-syqghst","Type":"NodeParagraph","Properties":{"id":"20240201213519-syqghst","updated":"20240201213519"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器化软件适用于基于 Linux 和 Windows 的应用，在任何环境中都能够始终如一地运行。"}]}]},{"ID":"20240201213520-epkagob","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213520-epkagob","updated":"20240201213520"},"Children":[{"ID":"20240201213521-f3ufw6o","Type":"NodeParagraph","Properties":{"id":"20240201213521-f3ufw6o","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器赋予了软件独立性"},{"Type":"NodeText","Data":"，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。"}]}]}]},{"ID":"20240201213522-fwk4ouj","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213522-fwk4ouj","updated":"20240201213522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"再来看看容器较为通俗的解释"}]},{"ID":"20240201213523-faljezp","Type":"NodeParagraph","Properties":{"id":"20240201213523-faljezp","updated":"20240201213523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果需要通俗地描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。"}]},{"ID":"20240201213524-66wuznp","Type":"NodeParagraph","Properties":{"id":"20240201213524-66wuznp","updated":"20240201213524"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"认识容器","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/tools/docker/container.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213525-tkvmeml","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213525-tkvmeml","updated":"20240201213525"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.2 图解物理机,虚拟机与容器"}]},{"ID":"20240201213526-uzfw7wn","Type":"NodeParagraph","Properties":{"id":"20240201213526-uzfw7wn","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解(下面的图片来源于网络)。"}]},{"ID":"20240201213527-zx11i7s","Type":"NodeParagraph","Properties":{"id":"20240201213527-zx11i7s","updated":"20240201213527"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"物理机："}]},{"ID":"20240201213528-2bc58f0","Type":"NodeParagraph","Properties":{"id":"20240201213528-2bc58f0","updated":"20240201213528"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"物理机","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/tools/docker/%E7%89%A9%E7%90%86%E6%9C%BA%E5%9B%BE%E8%A7%A3.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213529-n1k1jeh","Type":"NodeParagraph","Properties":{"id":"20240201213529-n1k1jeh","updated":"20240201213529"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机："}]},{"ID":"20240201213530-c5v1bjn","Type":"NodeParagraph","Properties":{"id":"20240201213530-c5v1bjn","updated":"20240201213530"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"虚拟机","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/tools/docker/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BE%E8%A7%A3.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213531-qtwbq6j","Type":"NodeParagraph","Properties":{"id":"20240201213531-qtwbq6j","updated":"20240201213531"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器："}]},{"ID":"20240201213532-kk1f1id","Type":"NodeParagraph","Properties":{"id":"20240201213532-kk1f1id","updated":"20240201213532"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/image-20211110104003678.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213533-l5welty","Type":"NodeParagraph","Properties":{"id":"20240201213533-l5welty","updated":"20240201213533"},"Children":[{"Type":"NodeText","Data":"通过上面这三张抽象图，我们可以大概通过类比概括出："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。"}]},{"ID":"20240201213534-zjvyay0","Type":"NodeThematicBreak","Properties":{"id":"20240201213534-zjvyay0","updated":"20240201213534"}},{"ID":"20240201213535-es6j36n","Type":"NodeParagraph","Properties":{"id":"20240201213535-es6j36n","updated":"20240201213535"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"相信通过上面的解释大家对于容器这个既陌生又熟悉的概念有了一个初步的认识，下面我们就来谈谈 Docker 的一些概念。"}]},{"ID":"20240201213536-16eotxt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213536-16eotxt","updated":"20240201213536"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"二 再来谈谈 Docker 的一些概念"}]},{"ID":"20240201213537-y7ikrki","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213537-y7ikrki","updated":"20240201213537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1 什么是 Docker?"}]},{"ID":"20240201213538-zf7iqfc","Type":"NodeParagraph","Properties":{"id":"20240201213538-zf7iqfc","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"说实话关于 Docker 是什么并太好说，下面我通过四点向你说明 Docker 到底是个什么东西。"}]},{"ID":"20240201213539-oim9mkk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213539-oim9mkk","updated":"20240201213539"},"Children":[{"ID":"20240201213540-p2iiak7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-p2iiak7","updated":"20240201213540"},"Children":[{"ID":"20240201213541-dou2gur","Type":"NodeParagraph","Properties":{"id":"20240201213541-dou2gur","updated":"20240201213541"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 是世界领先的软件容器平台。"}]}]},{"ID":"20240201213542-jou2mix","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213542-jou2mix","updated":"20240201213542"},"Children":[{"ID":"20240201213543-clc27ch","Type":"NodeParagraph","Properties":{"id":"20240201213543-clc27ch","updated":"20240201213543"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker"},{"Type":"NodeText","Data":" 使用 Google 公司推出的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Go 语言"},{"Type":"NodeText","Data":" 进行开发实现，基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Linux 内核"},{"Type":"NodeText","Data":" 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"UnionFS"},{"Type":"NodeText","Data":" 等技术，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对进程进行封装隔离，属于操作系统层面的虚拟化技术。"},{"Type":"NodeText","Data":" 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。"}]}]},{"ID":"20240201213544-7g56wfw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213544-7g56wfw","updated":"20240201213544"},"Children":[{"ID":"20240201213545-ki57k4r","Type":"NodeParagraph","Properties":{"id":"20240201213545-ki57k4r","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。"}]}]},{"ID":"20240201213546-9iz6b0u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-9iz6b0u","updated":"20240201213546"},"Children":[{"ID":"20240201213547-ri9z53j","Type":"NodeParagraph","Properties":{"id":"20240201213547-ri9z53j","updated":"20240201213547"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。"}]}]}]},{"ID":"20240201213548-gozwdi9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213548-gozwdi9","updated":"20240201213548"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2 Docker 思想"}]},{"ID":"20240201213549-41g4ped","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-41g4ped","updated":"20240201213549"},"Children":[{"ID":"20240201213550-3whkihm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213550-3whkihm","updated":"20240201213550"},"Children":[{"ID":"20240201213551-g0e7qow","Type":"NodeParagraph","Properties":{"id":"20240201213551-g0e7qow","updated":"20240201213551"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"集装箱"}]}]},{"ID":"20240201213552-g57fmx2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-g57fmx2","updated":"20240201213552"},"Children":[{"ID":"20240201213553-7w5x3f3","Type":"NodeParagraph","Properties":{"id":"20240201213553-7w5x3f3","updated":"20240201213553"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"标准化："},{"Type":"NodeText","Data":" ① 运输方式 ② 存储方式 ③ API 接口"}]}]},{"ID":"20240201213554-1pmjzmq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213554-1pmjzmq","updated":"20240201213554"},"Children":[{"ID":"20240201213555-nowf0ee","Type":"NodeParagraph","Properties":{"id":"20240201213555-nowf0ee","updated":"20240201213555"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"隔离"}]}]}]},{"ID":"20240201213556-zsis9yv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213556-zsis9yv","updated":"20240201213556"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.3 Docker 容器的特点"}]},{"ID":"20240201213557-hk12e15","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213557-hk12e15","updated":"20240201213557"},"Children":[{"ID":"20240201213558-alqmz60","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-alqmz60","updated":"20240201213558"},"Children":[{"ID":"20240201213559-qbckcok","Type":"NodeParagraph","Properties":{"id":"20240201213559-qbckcok","updated":"20240201213559"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"轻量"},{"Type":"NodeText","Data":" : 在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。"}]}]},{"ID":"20240201213560-k09dukb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-k09dukb","updated":"20240201213560"},"Children":[{"ID":"20240201213561-7369muz","Type":"NodeParagraph","Properties":{"id":"20240201213561-7369muz","updated":"20240201213561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"标准"},{"Type":"NodeText","Data":" : Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。"}]}]},{"ID":"20240201213562-rtkg862","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-rtkg862","updated":"20240201213562"},"Children":[{"ID":"20240201213563-r9qigql","Type":"NodeParagraph","Properties":{"id":"20240201213563-r9qigql","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全"},{"Type":"NodeText","Data":" : Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。"}]}]}]},{"ID":"20240201213564-vgp20az","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213564-vgp20az","updated":"20240201213564"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.4 为什么要用 Docker ?"}]},{"ID":"20240201213565-bniy6co","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213565-bniy6co","updated":"20240201213565"},"Children":[{"ID":"20240201213566-1wnmbs8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-1wnmbs8","updated":"20240201213566"},"Children":[{"ID":"20240201213567-q5laajg","Type":"NodeParagraph","Properties":{"id":"20240201213567-q5laajg","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；——一致的运行环境"}]}]},{"ID":"20240201213568-v8k6c60","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-v8k6c60","updated":"20240201213568"},"Children":[{"ID":"20240201213569-dzltr57","Type":"NodeParagraph","Properties":{"id":"20240201213569-dzltr57","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间"}]}]},{"ID":"20240201213570-nihbb9x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-nihbb9x","updated":"20240201213570"},"Children":[{"ID":"20240201213571-ey193n5","Type":"NodeParagraph","Properties":{"id":"20240201213571-ey193n5","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免公用的服务器，资源会容易受到其他用户的影响。——隔离性"}]}]},{"ID":"20240201213572-5ojkwn2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-5ojkwn2","updated":"20240201213572"},"Children":[{"ID":"20240201213573-afg3if7","Type":"NodeParagraph","Properties":{"id":"20240201213573-afg3if7","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展"}]}]},{"ID":"20240201213574-cw8vsbf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-cw8vsbf","updated":"20240201213574"},"Children":[{"ID":"20240201213575-163k31n","Type":"NodeParagraph","Properties":{"id":"20240201213575-163k31n","updated":"20240201213575"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便"}]}]},{"ID":"20240201213576-8tzcuhv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-8tzcuhv","updated":"20240201213576"},"Children":[{"ID":"20240201213577-dbr9mvz","Type":"NodeParagraph","Properties":{"id":"20240201213577-dbr9mvz","updated":"20240201213577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署"}]}]}]},{"ID":"20240201213578-zm9syud","Type":"NodeThematicBreak","Properties":{"id":"20240201213578-zm9syud","updated":"20240201213578"}},{"ID":"20240201213579-aewoeqx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213579-aewoeqx","updated":"20240201213579"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"三 容器 VS 虚拟机"}]},{"ID":"20240201213580-qadyf00","Type":"NodeParagraph","Properties":{"id":"20240201213580-qadyf00","updated":"20240201213580"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。"}]},{"ID":"20240201213581-k33vzxz","Type":"NodeParagraph","Properties":{"id":"20240201213581-k33vzxz","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"简单来说："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。"}]},{"ID":"20240201213582-disbzst","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213582-disbzst","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.1 两者对比图"}]},{"ID":"20240201213583-78bdvlp","Type":"NodeParagraph","Properties":{"id":"20240201213583-78bdvlp","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。"}]},{"ID":"20240201213584-yprhznl","Type":"NodeParagraph","Properties":{"id":"20240201213584-yprhznl","updated":"20240201213584"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/2e2b95eebf60b6d03f6c1476f4d7c697.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213585-hz4ggqb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213585-hz4ggqb","updated":"20240201213585"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.2 容器与虚拟机总结"}]},{"ID":"20240201213586-x1xux4y","Type":"NodeParagraph","Properties":{"id":"20240201213586-x1xux4y","updated":"20240201213586"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/4ef8691d67eb1eb53217099d0a691eb5.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213587-vg53zec","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213587-vg53zec","updated":"20240201213587"},"Children":[{"ID":"20240201213588-0b8jyx4","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213588-0b8jyx4","updated":"20240201213588"},"Children":[{"ID":"20240201213589-igrh9mv","Type":"NodeParagraph","Properties":{"id":"20240201213589-igrh9mv","updated":"20240201213589"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器是一个应用层抽象，用于将代码和依赖资源打包在一起。"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行"},{"Type":"NodeText","Data":" 。与虚拟机相比， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器占用的空间较少"},{"Type":"NodeText","Data":"（容器镜像大小通常只有几十兆），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"瞬间就能完成启动"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213590-47bmbx8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213590-47bmbx8","updated":"20240201213590"},"Children":[{"ID":"20240201213591-r5dbtmf","Type":"NodeParagraph","Properties":{"id":"20240201213591-r5dbtmf","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。"},{"Type":"NodeText","Data":" 管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"占用大量空间"},{"Type":"NodeText","Data":" 。而且 VM "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"启动也十分缓慢"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213592-4c5774s","Type":"NodeParagraph","Properties":{"id":"20240201213592-4c5774s","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"通过 Docker 官网，我们知道了这么多 Docker 的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机更擅长于彻底隔离整个运行环境"},{"Type":"NodeText","Data":"。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 通常用于隔离不同的应用"},{"Type":"NodeText","Data":" ，例如前端，后端以及数据库。"}]},{"ID":"20240201213593-fb66m2e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213593-fb66m2e","updated":"20240201213593"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3 容器与虚拟机两者是可以共存的"}]},{"ID":"20240201213594-mxhh9bx","Type":"NodeParagraph","Properties":{"id":"20240201213594-mxhh9bx","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。"}]},{"ID":"20240201213595-7s0j82h","Type":"NodeParagraph","Properties":{"id":"20240201213595-7s0j82h","updated":"20240201213595"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/056c87751b9dd7b56f4264240fe96d00.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213596-ks8jbj0","Type":"NodeThematicBreak","Properties":{"id":"20240201213596-ks8jbj0","updated":"20240201213596"}},{"ID":"20240201213597-botrqh6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213597-botrqh6","updated":"20240201213597"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"四 Docker 基本概念"}]},{"ID":"20240201213598-nv9neod","Type":"NodeParagraph","Properties":{"id":"20240201213598-nv9neod","updated":"20240201213598"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。"}]},{"ID":"20240201213599-cvu84ab","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213599-cvu84ab","updated":"20240201213599"},"Children":[{"ID":"20240201213600-93naueg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213600-93naueg","updated":"20240201213600"},"Children":[{"ID":"20240201213601-7d26ggj","Type":"NodeParagraph","Properties":{"id":"20240201213601-7d26ggj","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"镜像（Image）"}]}]},{"ID":"20240201213602-v8ick6t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213602-v8ick6t","updated":"20240201213602"},"Children":[{"ID":"20240201213603-79j2cyd","Type":"NodeParagraph","Properties":{"id":"20240201213603-79j2cyd","updated":"20240201213603"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器（Container）"}]}]},{"ID":"20240201213604-3x47j3e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213604-3x47j3e","updated":"20240201213604"},"Children":[{"ID":"20240201213605-3pb66bc","Type":"NodeParagraph","Properties":{"id":"20240201213605-3pb66bc","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"仓库（Repository）"}]}]}]},{"ID":"20240201213606-6s8sa3w","Type":"NodeParagraph","Properties":{"id":"20240201213606-6s8sa3w","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"理解了这三个概念，就理解了 Docker 的整个生命周期"}]},{"ID":"20240201213607-mp6luct","Type":"NodeParagraph","Properties":{"id":"20240201213607-mp6luct","updated":"20240201213607"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Docker 基本概念","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/tools/docker/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213608-ylo6mr9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213608-ylo6mr9","updated":"20240201213608"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.1 镜像(Image):一个特殊的文件系统"}]},{"ID":"20240201213609-edvwlee","Type":"NodeParagraph","Properties":{"id":"20240201213609-edvwlee","updated":"20240201213609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统分为内核和用户空间"},{"Type":"NodeText","Data":"。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。"}]},{"ID":"20240201213610-6o5fzk1","Type":"NodeParagraph","Properties":{"id":"20240201213610-6o5fzk1","updated":"20240201213610"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。"},{"Type":"NodeText","Data":" 镜像不包含任何动态数据，其内容在构建之后也不会被改变。"}]},{"ID":"20240201213611-spoyb6d","Type":"NodeParagraph","Properties":{"id":"20240201213611-spoyb6d","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"Docker 设计时，就充分利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Union FS"},{"Type":"NodeText","Data":" 的技术，将其设计为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分层存储的架构"},{"Type":"NodeText","Data":" 。镜像实际是由多层文件系统联合组成。"}]},{"ID":"20240201213612-v81wtgw","Type":"NodeParagraph","Properties":{"id":"20240201213612-v81wtgw","updated":"20240201213612"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。"},{"Type":"NodeText","Data":" 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。"}]},{"ID":"20240201213613-xz5hlh2","Type":"NodeParagraph","Properties":{"id":"20240201213613-xz5hlh2","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。"}]},{"ID":"20240201213614-8ebhlap","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213614-8ebhlap","updated":"20240201213614"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.2 容器(Container):镜像运行时的实体"}]},{"ID":"20240201213615-r4yi0v2","Type":"NodeParagraph","Properties":{"id":"20240201213615-r4yi0v2","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213616-430tuya","Type":"NodeParagraph","Properties":{"id":"20240201213616-430tuya","updated":"20240201213616"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。"}]},{"ID":"20240201213617-ldrirqx","Type":"NodeParagraph","Properties":{"id":"20240201213617-ldrirqx","updated":"20240201213617"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。"}]},{"ID":"20240201213618-wwcl4go","Type":"NodeParagraph","Properties":{"id":"20240201213618-wwcl4go","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"按照 Docker 最佳实践的要求，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器不应该向其存储层内写入任何数据"},{"Type":"NodeText","Data":" ，容器存储层要保持无状态化。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录"},{"Type":"NodeText","Data":"，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。"}]},{"ID":"20240201213619-iv47zbv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213619-iv47zbv","updated":"20240201213619"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.3 仓库(Repository):集中存放镜像文件的地方"}]},{"ID":"20240201213620-nnvv3n9","Type":"NodeParagraph","Properties":{"id":"20240201213620-nnvv3n9","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"镜像构建完成后，可以很容易的在当前宿主上运行，但是， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。"}]},{"ID":"20240201213621-z7t05cc","Type":"NodeParagraph","Properties":{"id":"20240201213621-z7t05cc","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"镜像仓库是 Docker 用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。"}]},{"ID":"20240201213622-ky4aosm","Type":"NodeParagraph","Properties":{"id":"20240201213622-ky4aosm","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"通常，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一个仓库会包含同一个软件不同版本的镜像"},{"Type":"NodeText","Data":"，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"标签就常用于对应该软件的各个版本"},{"Type":"NodeText","Data":" 。我们可以通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;仓库名\u0026gt;:\u0026lt;标签\u0026gt;"},{"Type":"NodeText","Data":"的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。"}]},{"ID":"20240201213623-33bkysj","Type":"NodeParagraph","Properties":{"id":"20240201213623-33bkysj","updated":"20240201213623"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这里补充一下 Docker Registry 公开服务和私有 Docker Registry 的概念："}]},{"ID":"20240201213624-ppl65vh","Type":"NodeParagraph","Properties":{"id":"20240201213624-ppl65vh","updated":"20240201213624"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker Registry 公开服务"},{"Type":"NodeText","Data":" 是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。"}]},{"ID":"20240201213625-baefgim","Type":"NodeParagraph","Properties":{"id":"20240201213625-baefgim","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"最常使用的 Registry 公开服务是官方的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker Hub"},{"Type":"NodeText","Data":" ，这也是默认的 Registry，并拥有大量的高质量的官方镜像，网址为："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://hub.docker.com/","TextMarkATitle":"https://hub.docker.com/","TextMarkTextContent":"https://hub.docker.com/"},{"Type":"NodeText","Data":" 。官方是这样介绍 Docker Hub 的："}]},{"ID":"20240201213626-7fie9ak","Type":"NodeBlockquote","Properties":{"id":"20240201213626-7fie9ak","updated":"20240201213626"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213627-ok8uchi","Type":"NodeParagraph","Properties":{"id":"20240201213627-ok8uchi","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"Docker Hub 是 Docker 官方提供的一项服务，用于与您的团队查找和共享容器镜像。"}]}]},{"ID":"20240201213628-2pyh7ca","Type":"NodeParagraph","Properties":{"id":"20240201213628-2pyh7ca","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"比如我们想要搜索自己想要的镜像："}]},{"ID":"20240201213629-5fnafgz","Type":"NodeParagraph","Properties":{"id":"20240201213629-5fnafgz","updated":"20240201213629"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"利用Docker Hub 搜索镜像","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/tools/docker/Screen Shot 2019-11-04 at 8.21.39 PM.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213630-tybu0k1","Type":"NodeParagraph","Properties":{"id":"20240201213630-tybu0k1","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"在 Docker Hub 的搜索结果中，有几项关键的信息有助于我们选择合适的镜像："}]},{"ID":"20240201213631-z87cuug","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-z87cuug","updated":"20240201213631"},"Children":[{"ID":"20240201213632-apxh41n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213632-apxh41n","updated":"20240201213632"},"Children":[{"ID":"20240201213633-btjnu9m","Type":"NodeParagraph","Properties":{"id":"20240201213633-btjnu9m","updated":"20240201213633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"OFFICIAL Image"},{"Type":"NodeText","Data":"：代表镜像为 Docker 官方提供和维护，相对来说稳定性和安全性较高。"}]}]},{"ID":"20240201213634-mhwsh9c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213634-mhwsh9c","updated":"20240201213634"},"Children":[{"ID":"20240201213635-pur8re8","Type":"NodeParagraph","Properties":{"id":"20240201213635-pur8re8","updated":"20240201213635"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Stars"},{"Type":"NodeText","Data":"：和点赞差不多的意思，类似 GitHub 的 Star。"}]}]},{"ID":"20240201213636-hy8v9r8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213636-hy8v9r8","updated":"20240201213636"},"Children":[{"ID":"20240201213637-a5hb7b4","Type":"NodeParagraph","Properties":{"id":"20240201213637-a5hb7b4","updated":"20240201213637"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Downloads"},{"Type":"NodeText","Data":"：代表镜像被拉取的次数，基本上能够表示镜像被使用的频度。"}]}]}]},{"ID":"20240201213638-gsa3qw6","Type":"NodeParagraph","Properties":{"id":"20240201213638-gsa3qw6","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"当然，除了直接通过 Docker Hub 网站搜索镜像这种方式外，我们还可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"docker search"},{"Type":"NodeText","Data":" 这个命令搜索 Docker Hub 中的镜像，搜索的结果是一致的。"}]},{"ID":"20240201213639-no0emrj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213639-no0emrj","updated":"20240201213639"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"➜  ~ docker search mysql\nNAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nmysql                             MySQL is a widely used, open-source relation…   8763                [OK]\nmariadb                           MariaDB is a community-developed fork of MyS…   3073                [OK]\nmysql/mysql-server                Optimized MySQL Server Docker images. Create…   650                                     [OK]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213640-3gcrp8f","Type":"NodeParagraph","Properties":{"id":"20240201213640-3gcrp8f","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"在国内访问"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker Hub"},{"Type":"NodeText","Data":" 可能会比较慢国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.tenxcloud.com/","TextMarkATitle":"时速云镜像库","TextMarkTextContent":"时速云镜像库"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.163yun.com/product/repo","TextMarkATitle":"网易云镜像服务","TextMarkTextContent":"网易云镜像服务"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.daocloud.io/","TextMarkATitle":"DaoCloud 镜像市场","TextMarkTextContent":"DaoCloud 镜像市场"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.aliyun.com/product/containerservice?utm_content=se_1292836","TextMarkATitle":"阿里云镜像库","TextMarkTextContent":"阿里云镜像库"},{"Type":"NodeText","Data":"等。"}]},{"ID":"20240201213641-nxoohko","Type":"NodeParagraph","Properties":{"id":"20240201213641-nxoohko","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"除了使用公开服务外，用户还可以在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本地搭建私有 Docker Registry"},{"Type":"NodeText","Data":" 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。"}]},{"ID":"20240201213642-uvp6w4w","Type":"NodeThematicBreak","Properties":{"id":"20240201213642-uvp6w4w","updated":"20240201213642"}},{"ID":"20240201213643-cvjckr5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213643-cvjckr5","updated":"20240201213643"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"五 常见命令"}]},{"ID":"20240201213644-ayvxhrn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213644-ayvxhrn","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.1 基本命令"}]},{"ID":"20240201213645-3kypgjd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213645-3kypgjd","updated":"20240201213645"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"docker version # 查看docker版本\ndocker images # 查看所有已下载镜像，等价于：docker image ls 命令\ndocker container ls # 查看所有容器\ndocker ps #查看正在运行的容器\ndocker image prune # 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213646-408flm0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213646-408flm0","updated":"20240201213646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.2 拉取镜像"}]},{"ID":"20240201213647-yoogn5j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213647-yoogn5j","updated":"20240201213647"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"docker search mysql # 查看mysql相关镜像\ndocker pull mysql:5.7 # 拉取mysql镜像\ndocker image ls # 查看所有已下载镜像\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213648-bd7wqwx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213648-bd7wqwx","updated":"20240201213648"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.3 删除镜像"}]},{"ID":"20240201213649-hujbr1h","Type":"NodeParagraph","Properties":{"id":"20240201213649-hujbr1h","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"比如我们要删除我们下载的 mysql 镜像。"}]},{"ID":"20240201213650-pxbf270","Type":"NodeParagraph","Properties":{"id":"20240201213650-pxbf270","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"docker rmi [image]"},{"Type":"NodeText","Data":" （等价于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"docker image rm [image]"},{"Type":"NodeText","Data":"）删除镜像之前首先要确保这个镜像没有被容器引用（可以通过标签名称或者镜像 ID 删除）。通过我们前面讲的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"docker ps"},{"Type":"NodeText","Data":"命令即可查看。"}]},{"ID":"20240201213651-b0rcjhp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2hlbGw=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213651-b0rcjhp","updated":"20240201213651"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"➜  ~ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\nc4cd691d9f80        mysql:5.7           \"docker-entrypoint.s…\"   7 weeks ago         Up 12 days          0.0.0.0:3306-\u003e3306/tcp, 33060/tcp   mysql\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213652-63ikg85","Type":"NodeParagraph","Properties":{"id":"20240201213652-63ikg85","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"可以看到 mysql 正在被 id 为 c4cd691d9f80 的容器引用，我们需要首先通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"docker stop c4cd691d9f80"},{"Type":"NodeText","Data":" 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"docker stop mysql"},{"Type":"NodeText","Data":"暂停这个容器。"}]},{"ID":"20240201213653-2rt00r1","Type":"NodeParagraph","Properties":{"id":"20240201213653-2rt00r1","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"然后查看 mysql 镜像的 id"}]},{"ID":"20240201213654-i5y7nw1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2hlbGw=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213654-i5y7nw1","updated":"20240201213654"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"➜  ~ docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\nmysql                   5.7                 f6509bac4980        3 months ago        373MB\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213655-u0jq020","Type":"NodeParagraph","Properties":{"id":"20240201213655-u0jq020","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"通过 IMAGE ID 或者 REPOSITORY 名字即可删除"}]},{"ID":"20240201213656-ccpu4km","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2hlbGw=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213656-ccpu4km","updated":"20240201213656"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"docker rmi f6509bac4980 #  或者 docker rmi mysql\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213657-3euks1d","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213657-3euks1d","updated":"20240201213657"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"六 Build Ship and Run"}]},{"ID":"20240201213658-pvela7q","Type":"NodeParagraph","Properties":{"id":"20240201213658-pvela7q","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 的概念以及常见命令基本上已经讲完，我们再来谈谈：Build, Ship, and Run。"}]},{"ID":"20240201213659-ceh8w3v","Type":"NodeParagraph","Properties":{"id":"20240201213659-ceh8w3v","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"如果你搜索 Docker 官网，会发现如下的字样："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“Docker - Build, Ship, and Run Any App, Anywhere”"},{"Type":"NodeText","Data":"。那么 Build, Ship, and Run 到底是在干什么呢？"}]},{"ID":"20240201213660-lhim2fe","Type":"NodeParagraph","Properties":{"id":"20240201213660-lhim2fe","updated":"20240201213660"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/tools/docker/docker-build-ship-run.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213661-jj2bajz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-jj2bajz","updated":"20240201213661"},"Children":[{"ID":"20240201213662-cd4ccqj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-cd4ccqj","updated":"20240201213662"},"Children":[{"ID":"20240201213663-vrmuqez","Type":"NodeParagraph","Properties":{"id":"20240201213663-vrmuqez","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Build（构建镜像）"},{"Type":"NodeText","Data":"：镜像就像是集装箱包括文件以及运行环境等等资源。"}]}]},{"ID":"20240201213664-sp61m8y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-sp61m8y","updated":"20240201213664"},"Children":[{"ID":"20240201213665-7emeta5","Type":"NodeParagraph","Properties":{"id":"20240201213665-7emeta5","updated":"20240201213665"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Ship（运输镜像）"},{"Type":"NodeText","Data":"：主机和仓库间运输，这里的仓库就像是超级码头一样。"}]}]},{"ID":"20240201213666-bztr0yy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213666-bztr0yy","updated":"20240201213666"},"Children":[{"ID":"20240201213667-5ej8xmj","Type":"NodeParagraph","Properties":{"id":"20240201213667-5ej8xmj","updated":"20240201213667"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Run （运行镜像）"},{"Type":"NodeText","Data":"：运行的镜像就是一个容器，容器就是运行程序的地方。"}]}]}]},{"ID":"20240201213668-egty4jo","Type":"NodeParagraph","Properties":{"id":"20240201213668-egty4jo","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将 Docker 称为码头工人或码头装卸工，这和 Docker 的中文翻译搬运工人如出一辙。"}]},{"ID":"20240201213669-cghs0x0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213669-cghs0x0","updated":"20240201213669"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"七 简单了解一下 Docker 底层原理"}]},{"ID":"20240201213670-1st4qjw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213670-1st4qjw","updated":"20240201213670"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.1 虚拟化技术"}]},{"ID":"20240201213671-scmawps","Type":"NodeParagraph","Properties":{"id":"20240201213671-scmawps","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"首先，Docker "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"容器虚拟化"},{"Type":"NodeText","Data":"技术为基础的软件，那么什么是虚拟化技术呢？"}]},{"ID":"20240201213672-6f6kbxe","Type":"NodeParagraph","Properties":{"id":"20240201213672-6f6kbxe","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"简单点来说，虚拟化技术可以这样定义："}]},{"ID":"20240201213673-ah02lbi","Type":"NodeBlockquote","Properties":{"id":"20240201213673-ah02lbi","updated":"20240201213673"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213674-lngda49","Type":"NodeParagraph","Properties":{"id":"20240201213674-lngda49","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"虚拟化技术是一种资源管理技术，是将计算机的各种"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/計算機科學","TextMarkATitle":"实体资源","TextMarkTextContent":"实体资源"},{"Type":"NodeText","Data":")（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/CPU","TextMarkATitle":"CPU","TextMarkTextContent":"CPU"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/内存","TextMarkATitle":"内存","TextMarkTextContent":"内存"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/磁盘空间","TextMarkATitle":"磁盘空间","TextMarkTextContent":"磁盘空间"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/網路適配器","TextMarkATitle":"网络适配器","TextMarkTextContent":"网络适配器"},{"Type":"NodeText","Data":"等），予以抽象、转换后呈现出来并可供分割、组合为一个或多个电脑配置环境。由此，打破实体结构间的不可切割的障碍，使用户可以比原本的配置更好的方式来应用这些电脑硬件资源。这些资源的新虚拟部分是不受现有资源的架设方式，地域或物理配置所限制。一般所指的虚拟化资源包括计算能力和数据存储。"}]}]},{"ID":"20240201213675-g8dzjzv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213675-g8dzjzv","updated":"20240201213675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.2 Docker 基于 LXC 虚拟容器技术"}]},{"ID":"20240201213676-8twns6h","Type":"NodeParagraph","Properties":{"id":"20240201213676-8twns6h","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"Docker 技术是基于 LXC（Linux container- Linux 容器）虚拟容器技术的。"}]},{"ID":"20240201213677-iksq4e2","Type":"NodeBlockquote","Properties":{"id":"20240201213677-iksq4e2","updated":"20240201213677"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213678-rqjr8ll","Type":"NodeParagraph","Properties":{"id":"20240201213678-rqjr8ll","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。"}]}]},{"ID":"20240201213679-ee9l7tx","Type":"NodeParagraph","Properties":{"id":"20240201213679-ee9l7tx","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"LXC 技术主要是借助 Linux 内核中提供的 CGroup 功能和 namespace 来实现的，通过 LXC 可以为软件提供一个独立的操作系统运行环境。"}]},{"ID":"20240201213680-ku0xlwb","Type":"NodeParagraph","Properties":{"id":"20240201213680-ku0xlwb","updated":"20240201213680"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"cgroup 和 namespace 介绍："}]},{"ID":"20240201213681-2jp80hu","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-2jp80hu","updated":"20240201213681"},"Children":[{"ID":"20240201213682-ilh5si3","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213682-ilh5si3","updated":"20240201213682"},"Children":[{"ID":"20240201213683-8od78th","Type":"NodeParagraph","Properties":{"id":"20240201213683-8od78th","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"namespace 是 Linux 内核用来隔离内核资源的方式。"},{"Type":"NodeText","Data":" 通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。"}]},{"ID":"20240201213684-21vcdde","Type":"NodeParagraph","Properties":{"id":"20240201213684-21vcdde","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"（以上关于 namespace 介绍内容来自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/sparkdev/p/9365405.html","TextMarkTextContent":"https://www.cnblogs.com/sparkdev/p/9365405.html"},{"Type":"NodeText","Data":" ，更多关于 namespace 的呢内容可以查看这篇文章 ）。"}]}]},{"ID":"20240201213685-3utuool","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213685-3utuool","updated":"20240201213685"},"Children":[{"ID":"20240201213686-i3ixokd","Type":"NodeParagraph","Properties":{"id":"20240201213686-i3ixokd","updated":"20240201213686"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CGroup 是 Control Groups 的缩写，是 Linux 内核提供的一种可以限制、记录、隔离进程组 (process groups) 所使用的物力资源 (如 cpu memory i/o 等等) 的机制。"}]},{"ID":"20240201213687-otr1xag","Type":"NodeParagraph","Properties":{"id":"20240201213687-otr1xag","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"（以上关于 CGroup 介绍内容来自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html","TextMarkTextContent":"https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html"},{"Type":"NodeText","Data":" ，更多关于 CGroup 的内容可以查看这篇文章 ）。"}]}]}]},{"ID":"20240201213688-q6pxh3v","Type":"NodeParagraph","Properties":{"id":"20240201213688-q6pxh3v","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"cgroup 和 namespace 两者对比："}]},{"ID":"20240201213689-xflr25g","Type":"NodeParagraph","Properties":{"id":"20240201213689-xflr25g","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"两者都是将进程进行分组，但是两者的作用还是有本质区别。namespace 是为了隔离进程组之间的资源，而 cgroup 是为了对一组进程进行统一的资源监控和限制。"}]},{"ID":"20240201213690-0t91mbt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213690-0t91mbt","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"八 总结"}]},{"ID":"20240201213691-g0suk21","Type":"NodeParagraph","Properties":{"id":"20240201213691-g0suk21","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"本文主要把 Docker 中的一些常见概念做了详细的阐述，但是并不涉及 Docker 的安装、镜像的使用、容器的操作等内容。这部分东西，希望读者自己可以通过阅读书籍与官方文档的形式掌握。如果觉得官方文档阅读起来很费力的话，这里推荐一本书籍《Docker 技术入门与实战第二版》。"}]},{"ID":"20240201213692-43ph23j","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213692-43ph23j","updated":"20240201213692"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"九 推荐阅读"}]},{"ID":"20240201213693-xnzgp8h","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-xnzgp8h","updated":"20240201213693"},"Children":[{"ID":"20240201213694-rrjsz6c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-rrjsz6c","updated":"20240201213694"},"Children":[{"ID":"20240201213695-681r4op","Type":"NodeParagraph","Properties":{"id":"20240201213695-681r4op","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/53260098","TextMarkATitle":"10分钟看懂Docker和K8S","TextMarkTextContent":"10 分钟看懂 Docker 和 K8S"}]}]},{"ID":"20240201213696-4g55cyr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-4g55cyr","updated":"20240201213696"},"Children":[{"ID":"20240201213697-103bhq5","Type":"NodeParagraph","Properties":{"id":"20240201213697-103bhq5","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.infoq.cn/article/te70FlSyxhltL1Cr7gzM","TextMarkATitle":"从零开始入门 K8s：详解 K8s 容器基本概念","TextMarkTextContent":"从零开始入门 K8s：详解 K8s 容器基本概念"}]}]}]},{"ID":"20240201213698-r2z5f5t","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213698-r2z5f5t","updated":"20240201213698"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"十 参考"}]},{"ID":"20240201213699-tj185i3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213699-tj185i3","updated":"20240201213699"},"Children":[{"ID":"20240201213700-e6ujiy3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-e6ujiy3","updated":"20240201213700"},"Children":[{"ID":"20240201213701-u1wdsnd","Type":"NodeParagraph","Properties":{"id":"20240201213701-u1wdsnd","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000009732550","TextMarkATitle":"Linux Namespace和Cgroup","TextMarkTextContent":"Linux Namespace 和 Cgroup"}]}]},{"ID":"20240201213702-jftvzot","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213702-jftvzot","updated":"20240201213702"},"Children":[{"ID":"20240201213703-zp6qm0i","Type":"NodeParagraph","Properties":{"id":"20240201213703-zp6qm0i","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.upguard.com/articles/docker-vs-lxc","TextMarkATitle":"LXC vs Docker: Why Docker is Better","TextMarkTextContent":"LXC vs Docker: Why Docker is Better"}]}]},{"ID":"20240201213704-p2jbhd7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-p2jbhd7","updated":"20240201213704"},"Children":[{"ID":"20240201213705-tqnxumk","Type":"NodeParagraph","Properties":{"id":"20240201213705-tqnxumk","updated":"20240201213705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html","TextMarkATitle":"CGroup 介绍、应用实例及原理描述","TextMarkTextContent":"CGroup 介绍、应用实例及原理描述"}]}]}]},{"ID":"20240201213706-gb8qzfc","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213706-gb8qzfc","updated":"20240201213706"}}]}