{"ID":"20240201213635-jzs5qun","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213635-jzs5qun","title":"java20","updated":"20240201213635"},"Children":[{"ID":"20240201213636-isft2a4","Type":"NodeThematicBreak","Properties":{"id":"20240201213636-isft2a4","updated":"20240201213636"}},{"ID":"20240201213637-4w5pkkg","Type":"NodeParagraph","Properties":{"id":"20240201213637-4w5pkkg","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"title: Java 20 新特性概览"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213638-f3ue1jv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213638-f3ue1jv","updated":"20240201213638"},"Children":[{"ID":"20240201213639-tsuq2oy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-tsuq2oy","updated":"20240201213639"},"Children":[{"ID":"20240201213640-e2mop26","Type":"NodeParagraph","Properties":{"id":"20240201213640-e2mop26","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"Java新特性"}]}]}]},{"ID":"20240201213641-1khuxde","Type":"NodeThematicBreak","Properties":{"id":"20240201213641-1khuxde","updated":"20240201213641"}},{"ID":"20240201213642-zyoo0vb","Type":"NodeParagraph","Properties":{"id":"20240201213642-zyoo0vb","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"JDK 20 于 2023 年 3 月 21 日发布，非长期支持版本。"}]},{"ID":"20240201213643-bgxhmq1","Type":"NodeParagraph","Properties":{"id":"20240201213643-bgxhmq1","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"根据开发计划，下一个 LTS 版本就是将于 2023 年 9 月发布的 JDK 21。"}]},{"ID":"20240201213644-2aely32","Type":"NodeParagraph","Properties":{"id":"20240201213644-2aely32","updated":"20240201213644"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/new-features/640.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213645-qnchpg2","Type":"NodeParagraph","Properties":{"id":"20240201213645-qnchpg2","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"JDK 20 只有 7 个新特性："}]},{"ID":"20240201213646-u9sl8wg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-u9sl8wg","updated":"20240201213646"},"Children":[{"ID":"20240201213647-wqjfqr9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-wqjfqr9","updated":"20240201213647"},"Children":[{"ID":"20240201213648-vfvh7us","Type":"NodeParagraph","Properties":{"id":"20240201213648-vfvh7us","updated":"20240201213648"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/429","TextMarkTextContent":"JEP 429：Scoped Values（作用域值）"},{"Type":"NodeText","Data":"（第一次孵化）"}]}]},{"ID":"20240201213649-zrlr2gm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-zrlr2gm","updated":"20240201213649"},"Children":[{"ID":"20240201213650-fcfxep2","Type":"NodeParagraph","Properties":{"id":"20240201213650-fcfxep2","updated":"20240201213650"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/432","TextMarkTextContent":"JEP 432：Record Patterns（记录模式）"},{"Type":"NodeText","Data":"（第二次预览）"}]}]},{"ID":"20240201213651-8yidtga","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-8yidtga","updated":"20240201213651"},"Children":[{"ID":"20240201213652-49khebv","Type":"NodeParagraph","Properties":{"id":"20240201213652-49khebv","updated":"20240201213652"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/433","TextMarkTextContent":"JEP 433：switch 模式匹配"},{"Type":"NodeText","Data":"（第四次预览）"}]}]},{"ID":"20240201213653-8zngllx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-8zngllx","updated":"20240201213653"},"Children":[{"ID":"20240201213654-gztpouy","Type":"NodeParagraph","Properties":{"id":"20240201213654-gztpouy","updated":"20240201213654"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/434","TextMarkTextContent":"JEP 434: Foreign Function \u0026amp; Memory API（外部函数和内存 API）"},{"Type":"NodeText","Data":"（第二次预览）"}]}]},{"ID":"20240201213655-cbb58mq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-cbb58mq","updated":"20240201213655"},"Children":[{"ID":"20240201213656-f95vh32","Type":"NodeParagraph","Properties":{"id":"20240201213656-f95vh32","updated":"20240201213656"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/436","TextMarkTextContent":"JEP 436: Virtual Threads（虚拟线程）"},{"Type":"NodeText","Data":"（第二次预览）"}]}]},{"ID":"20240201213657-1jkfhmb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213657-1jkfhmb","updated":"20240201213657"},"Children":[{"ID":"20240201213658-rsofcsz","Type":"NodeParagraph","Properties":{"id":"20240201213658-rsofcsz","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/437","TextMarkTextContent":"JEP 437:Structured Concurrency（结构化并发）"},{"Type":"NodeText","Data":"(第二次孵化)"}]}]},{"ID":"20240201213659-43ge8h3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-43ge8h3","updated":"20240201213659"},"Children":[{"ID":"20240201213660-edyl5of","Type":"NodeParagraph","Properties":{"id":"20240201213660-edyl5of","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/438","TextMarkTextContent":"JEP 432:向量 API（"},{"Type":"NodeText","Data":"第五次孵化）"}]}]}]},{"ID":"20240201213661-zb5zh62","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213661-zb5zh62","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 429：作用域值（第一次孵化）"}]},{"ID":"20240201213662-k3izp4c","Type":"NodeParagraph","Properties":{"id":"20240201213662-k3izp4c","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"作用域值（Scoped Values）它可以在线程内和线程间共享不可变的数据，优于线程局部变量，尤其是在使用大量虚拟线程时。"}]},{"ID":"20240201213663-hzdvy34","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213663-hzdvy34","updated":"20240201213663"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"final static ScopedValue\u003c...\u003e V = new ScopedValue\u003c\u003e();\n\n// In some method\nScopedValue.where(V, \u003cvalue\u003e)\n           .run(() -\u003e { ... V.get() ... call methods ... });\n\n// In a method called directly or indirectly from the lambda expression\n... V.get() ...\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213664-s6vxp8p","Type":"NodeParagraph","Properties":{"id":"20240201213664-s6vxp8p","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"作用域值允许在大型程序中的组件之间安全有效地共享数据，而无需求助于方法参数。"}]},{"ID":"20240201213665-596pbtr","Type":"NodeParagraph","Properties":{"id":"20240201213665-596pbtr","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"关于作用域值的详细介绍，推荐阅读"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.happycoders.eu/java/scoped-values/","TextMarkTextContent":"作用域值常见问题解答"},{"Type":"NodeText","Data":"这篇文章。"}]},{"ID":"20240201213666-n8n7hsr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213666-n8n7hsr","updated":"20240201213666"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 432：记录模式（第二次预览）"}]},{"ID":"20240201213667-cv45h86","Type":"NodeParagraph","Properties":{"id":"20240201213667-cv45h86","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"记录模式（Record Patterns） 可对 record 的值进行解构，也就是更方便地从记录类（Record Class）中提取数据。并且，还可以嵌套记录模式和类型模式结合使用，以实现强大的、声明性的和可组合的数据导航和处理形式。"}]},{"ID":"20240201213668-48uxj0i","Type":"NodeParagraph","Properties":{"id":"20240201213668-48uxj0i","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"记录模式不能单独使用，而是要与 instanceof 或 switch 模式匹配一同使用。"}]},{"ID":"20240201213669-zlbk75x","Type":"NodeParagraph","Properties":{"id":"20240201213669-zlbk75x","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"先以 instanceof 为例简单演示一下。"}]},{"ID":"20240201213670-6f2t1c0","Type":"NodeParagraph","Properties":{"id":"20240201213670-6f2t1c0","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"简单定义一个记录类："}]},{"ID":"20240201213671-p7a1u3z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213671-p7a1u3z","updated":"20240201213671"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"record Shape(String type, long unit){}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213672-pd9axco","Type":"NodeParagraph","Properties":{"id":"20240201213672-pd9axco","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"没有记录模式之前："}]},{"ID":"20240201213673-fx2hmk6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213673-fx2hmk6","updated":"20240201213673"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Shape circle = new Shape(\"Circle\", 10);\nif (circle instanceof Shape shape) {\n\n  System.out.println(\"Area of \" + shape.type() + \" is : \" + Math.PI * Math.pow(shape.unit(), 2));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213674-2s8kruj","Type":"NodeParagraph","Properties":{"id":"20240201213674-2s8kruj","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"有了记录模式之后："}]},{"ID":"20240201213675-ossrald","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213675-ossrald","updated":"20240201213675"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Shape circle = new Shape(\"Circle\", 10);\nif (circle instanceof Shape(String type, long unit)) {\n  System.out.println(\"Area of \" + type + \" is : \" + Math.PI * Math.pow(unit, 2));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213676-l5xaqm3","Type":"NodeParagraph","Properties":{"id":"20240201213676-l5xaqm3","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"再看看记录模式与 switch 的配合使用。"}]},{"ID":"20240201213677-tt13cvs","Type":"NodeParagraph","Properties":{"id":"20240201213677-tt13cvs","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"定义一些类："}]},{"ID":"20240201213678-dmurmjh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213678-dmurmjh","updated":"20240201213678"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"interface Shape {}\nrecord Circle(double radius) implements Shape { }\nrecord Square(double side) implements Shape { }\nrecord Rectangle(double length, double width) implements Shape { }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213679-bx7cfbr","Type":"NodeParagraph","Properties":{"id":"20240201213679-bx7cfbr","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"没有记录模式之前："}]},{"ID":"20240201213680-k6vp1vy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213680-k6vp1vy","updated":"20240201213680"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Shape shape = new Circle(10);\nswitch (shape) {\n    case Circle c:\n        System.out.println(\"The shape is Circle with area: \" + Math.PI * c.radius() * c.radius());\n        break;\n\n    case Square s:\n        System.out.println(\"The shape is Square with area: \" + s.side() * s.side());\n        break;\n\n    case Rectangle r:\n        System.out.println(\"The shape is Rectangle with area: + \" + r.length() * r.width());\n        break;\n\n    default:\n        System.out.println(\"Unknown Shape\");\n        break;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213681-441suyr","Type":"NodeParagraph","Properties":{"id":"20240201213681-441suyr","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"有了记录模式之后："}]},{"ID":"20240201213682-ofllo56","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213682-ofllo56","updated":"20240201213682"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Shape shape = new Circle(10);\nswitch(shape) {\n\n  case Circle(double radius):\n    System.out.println(\"The shape is Circle with area: \" + Math.PI * radius * radius);\n    break;\n\n  case Square(double side):\n    System.out.println(\"The shape is Square with area: \" + side * side);\n    break;\n\n  case Rectangle(double length, double width):\n    System.out.println(\"The shape is Rectangle with area: + \" + length * width);\n    break;\n\n  default:\n    System.out.println(\"Unknown Shape\");\n    break;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213683-ftjffku","Type":"NodeParagraph","Properties":{"id":"20240201213683-ftjffku","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"记录模式可以避免不必要的转换，使得代码更建简洁易读。而且，用了记录模式后不必再担心 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":" 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NullPointerException"},{"Type":"NodeText","Data":"，代码更安全可靠。"}]},{"ID":"20240201213684-6ee3o0x","Type":"NodeParagraph","Properties":{"id":"20240201213684-6ee3o0x","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"记录模式在 Java 19 进行了第一次预览， 由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/405","TextMarkTextContent":"JEP 405"},{"Type":"NodeText","Data":" 提出。JDK 20 中是第二次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/432","TextMarkTextContent":"JEP 432"},{"Type":"NodeText","Data":" 提出。这次的改进包括："}]},{"ID":"20240201213685-4uj7gj0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213685-4uj7gj0","updated":"20240201213685"},"Children":[{"ID":"20240201213686-e9ftspu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213686-e9ftspu","updated":"20240201213686"},"Children":[{"ID":"20240201213687-ybwau6e","Type":"NodeParagraph","Properties":{"id":"20240201213687-ybwau6e","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"添加对通用记录模式类型参数推断的支持，"}]}]},{"ID":"20240201213688-cgnaj8m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213688-cgnaj8m","updated":"20240201213688"},"Children":[{"ID":"20240201213689-qureevp","Type":"NodeParagraph","Properties":{"id":"20240201213689-qureevp","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"添加对记录模式的支持以出现在增强语句的标题中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for"}]}]},{"ID":"20240201213690-ewfv37t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-ewfv37t","updated":"20240201213690"},"Children":[{"ID":"20240201213691-02a10s7","Type":"NodeParagraph","Properties":{"id":"20240201213691-02a10s7","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"删除对命名记录模式的支持。"}]}]}]},{"ID":"20240201213692-v2lgivk","Type":"NodeParagraph","Properties":{"id":"20240201213692-v2lgivk","updated":"20240201213692"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意"},{"Type":"NodeText","Data":"：不要把记录模式和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java16.md","TextMarkTextContent":"JDK16"},{"Type":"NodeText","Data":" 正式引入的记录类搞混了。"}]},{"ID":"20240201213693-up20l8a","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213693-up20l8a","updated":"20240201213693"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 433：switch 模式匹配（第四次预览）"}]},{"ID":"20240201213694-dbffgpv","Type":"NodeParagraph","Properties":{"id":"20240201213694-dbffgpv","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"正如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"instanceof"},{"Type":"NodeText","Data":" 一样， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"switch"},{"Type":"NodeText","Data":" 也紧跟着增加了类型匹配自动转换功能。"}]},{"ID":"20240201213695-jgqo6n2","Type":"NodeParagraph","Properties":{"id":"20240201213695-jgqo6n2","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"instanceof"},{"Type":"NodeText","Data":" 代码示例："}]},{"ID":"20240201213696-f47g7rr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213696-f47g7rr","updated":"20240201213696"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Old code\nif (o instanceof String) {\n    String s = (String)o;\n    ... use s ...\n}\n\n// New code\nif (o instanceof String s) {\n    ... use s ...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213697-1bpj41q","Type":"NodeParagraph","Properties":{"id":"20240201213697-1bpj41q","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"switch"},{"Type":"NodeText","Data":" 代码示例："}]},{"ID":"20240201213698-jat7sm5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213698-jat7sm5","updated":"20240201213698"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Old code\nstatic String formatter(Object o) {\n    String formatted = \"unknown\";\n    if (o instanceof Integer i) {\n        formatted = String.format(\"int %d\", i);\n    } else if (o instanceof Long l) {\n        formatted = String.format(\"long %d\", l);\n    } else if (o instanceof Double d) {\n        formatted = String.format(\"double %f\", d);\n    } else if (o instanceof String s) {\n        formatted = String.format(\"String %s\", s);\n    }\n    return formatted;\n}\n\n// New code\nstatic String formatterPatternSwitch(Object o) {\n    return switch (o) {\n        case Integer i -\u003e String.format(\"int %d\", i);\n        case Long l    -\u003e String.format(\"long %d\", l);\n        case Double d  -\u003e String.format(\"double %f\", d);\n        case String s  -\u003e String.format(\"String %s\", s);\n        default        -\u003e o.toString();\n    };\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213699-6hb96zf","Type":"NodeParagraph","Properties":{"id":"20240201213699-6hb96zf","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"switch"},{"Type":"NodeText","Data":" 模式匹配分别在 Java17、Java18、Java19 中进行了预览，Java20 是第四次预览了。每一次的预览基本都会有一些小改进，这里就不细提了。"}]},{"ID":"20240201213700-f3k4rh2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213700-f3k4rh2","updated":"20240201213700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 434: 外部函数和内存 API（第二次预览）"}]},{"ID":"20240201213701-gf2egxb","Type":"NodeParagraph","Properties":{"id":"20240201213701-gf2egxb","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。"}]},{"ID":"20240201213702-e87xkpe","Type":"NodeParagraph","Properties":{"id":"20240201213702-e87xkpe","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/412","TextMarkTextContent":"JEP 412"},{"Type":"NodeText","Data":" 提出。Java 18 中进行了第二次孵化，由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/419","TextMarkTextContent":"JEP 419"},{"Type":"NodeText","Data":" 提出。Java 19 中是第一次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/424","TextMarkTextContent":"JEP 424"},{"Type":"NodeText","Data":" 提出。"}]},{"ID":"20240201213703-sod164a","Type":"NodeParagraph","Properties":{"id":"20240201213703-sod164a","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"JDK 20 中是第二次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/434","TextMarkTextContent":"JEP 434"},{"Type":"NodeText","Data":" 提出，这次的改进包括："}]},{"ID":"20240201213704-261xbcf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-261xbcf","updated":"20240201213704"},"Children":[{"ID":"20240201213705-517749s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-517749s","updated":"20240201213705"},"Children":[{"ID":"20240201213706-w0ulllf","Type":"NodeParagraph","Properties":{"id":"20240201213706-w0ulllf","updated":"20240201213706"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MemorySegment"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MemoryAddress"},{"Type":"NodeText","Data":" 抽象的统一"}]}]},{"ID":"20240201213707-x507jxb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213707-x507jxb","updated":"20240201213707"},"Children":[{"ID":"20240201213708-l9g14x1","Type":"NodeParagraph","Properties":{"id":"20240201213708-l9g14x1","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"增强的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MemoryLayout"},{"Type":"NodeText","Data":" 层次结构"}]}]},{"ID":"20240201213709-c1yxm2f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213709-c1yxm2f","updated":"20240201213709"},"Children":[{"ID":"20240201213710-umim4g5","Type":"NodeParagraph","Properties":{"id":"20240201213710-umim4g5","updated":"20240201213710"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MemorySession"},{"Type":"NodeText","Data":"拆分为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arena"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SegmentScope"},{"Type":"NodeText","Data":"，以促进跨维护边界的段共享。"}]}]}]},{"ID":"20240201213711-vlimdpm","Type":"NodeParagraph","Properties":{"id":"20240201213711-vlimdpm","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java19.md","TextMarkTextContent":"Java 19 新特性概览"},{"Type":"NodeText","Data":" 中，我有详细介绍到外部函数和内存 API，这里就不再做额外的介绍了。"}]},{"ID":"20240201213712-x9vd91k","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213712-x9vd91k","updated":"20240201213712"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 436: 虚拟线程（第二次预览）"}]},{"ID":"20240201213713-tec0rhs","Type":"NodeParagraph","Properties":{"id":"20240201213713-tec0rhs","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"虚拟线程（Virtual Thread）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），由 JVM 调度。许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。"}]},{"ID":"20240201213714-n7drq31","Type":"NodeParagraph","Properties":{"id":"20240201213714-n7drq31","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"在引入虚拟线程之前，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.Thread"},{"Type":"NodeText","Data":" 包已经支持所谓的平台线程，也就是没有虚拟线程之前，我们一直使用的线程。JVM 调度程序通过平台线程（载体线程）来管理虚拟线程，一个平台线程可以在不同的时间执行不同的虚拟线程（多个虚拟线程挂载在一个平台线程上），当虚拟线程被阻塞或等待时，平台线程可以切换到执行另一个虚拟线程。"}]},{"ID":"20240201213715-eyecf5f","Type":"NodeParagraph","Properties":{"id":"20240201213715-eyecf5f","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"虚拟线程、平台线程和系统内核线程的关系图如下所示（图源："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://medium.com/javarevisited/how-to-use-java-19-virtual-threads-c16a32bad5f7","TextMarkTextContent":"How to Use Java 19 Virtual Threads"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213716-jyxbtia","Type":"NodeParagraph","Properties":{"id":"20240201213716-jyxbtia","updated":"20240201213716"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"虚拟线程、平台线程和系统内核线程的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/new-features/virtual-threads-platform-threads-kernel-threads-relationship.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213717-xqvhttc","Type":"NodeParagraph","Properties":{"id":"20240201213717-xqvhttc","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"关于平台线程和系统内核线程的对应关系多提一点：在 Windows 和 Linux 等主流操作系统中，Java 线程采用的是一对一的线程模型，也就是一个平台线程对应一个系统内核线程。Solaris 系统是一个特例，HotSpot VM 在 Solaris 上支持多对多和一对一。具体可以参考 R 大的回答: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/23096638/answer/29617153","TextMarkTextContent":"JVM 中的线程模型是用户级的么？"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213718-co4y7li","Type":"NodeParagraph","Properties":{"id":"20240201213718-co4y7li","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"相比较于平台线程来说，虚拟线程是廉价且轻量级的，使用完后立即被销毁，因此它们不需要被重用或池化，每个任务可以有自己专属的虚拟线程来运行。虚拟线程暂停和恢复来实现线程之间的切换，避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂，可以有效减少编写、维护和观察高吞吐量并发应用程序的工作量。"}]},{"ID":"20240201213719-fuw6gzk","Type":"NodeParagraph","Properties":{"id":"20240201213719-fuw6gzk","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"虚拟线程在其他多线程语言中已经被证实是十分有用的，比如 Go 中的 Goroutine、Erlang 中的进程。"}]},{"ID":"20240201213720-yxdgxtf","Type":"NodeParagraph","Properties":{"id":"20240201213720-yxdgxtf","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"知乎有一个关于 Java 19 虚拟线程的讨论，感兴趣的可以去看看："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/536743167","TextMarkTextContent":"https://www.zhihu.com/question/536743167"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213721-eol9bec","Type":"NodeParagraph","Properties":{"id":"20240201213721-eol9bec","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"Java 虚拟线程的详细解读和原理可以看下面这几篇文章："}]},{"ID":"20240201213722-do0z98c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213722-do0z98c","updated":"20240201213722"},"Children":[{"ID":"20240201213723-sd64iaz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-sd64iaz","updated":"20240201213723"},"Children":[{"ID":"20240201213724-zauym5a","Type":"NodeParagraph","Properties":{"id":"20240201213724-zauym5a","updated":"20240201213724"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/concurrent/virtual-thread.html","TextMarkTextContent":"虚拟线程极简入门"}]}]},{"ID":"20240201213725-fdmjdod","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213725-fdmjdod","updated":"20240201213725"},"Children":[{"ID":"20240201213726-ir4ozq7","Type":"NodeParagraph","Properties":{"id":"20240201213726-ir4ozq7","updated":"20240201213726"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/yyApBXxpXxVwttr01Hld6Q","TextMarkTextContent":"Java19 正式 GA！看虚拟线程如何大幅提高系统吞吐量"}]}]},{"ID":"20240201213727-4a32f0d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213727-4a32f0d","updated":"20240201213727"},"Children":[{"ID":"20240201213728-deexikd","Type":"NodeParagraph","Properties":{"id":"20240201213728-deexikd","updated":"20240201213728"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/throwable/p/16758997.html","TextMarkTextContent":"虚拟线程 - VirtualThread 源码透视"}]}]}]},{"ID":"20240201213729-9a6xkof","Type":"NodeParagraph","Properties":{"id":"20240201213729-9a6xkof","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"虚拟线程在 Java 19 中进行了第一次预览，由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/425","TextMarkTextContent":"JEP 425"},{"Type":"NodeText","Data":"提出。JDK 20 中是第二次预览，做了一些细微变化，这里就不细提了。"}]},{"ID":"20240201213730-4qmy70n","Type":"NodeParagraph","Properties":{"id":"20240201213730-4qmy70n","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"最后，我们来看一下四种创建虚拟线程的方法："}]},{"ID":"20240201213731-0uppqbx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213731-0uppqbx","updated":"20240201213731"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 1、通过 Thread.ofVirtual() 创建\nRunnable fn = () -\u003e {\n  // your code here\n};\n\nThread thread = Thread.ofVirtual(fn)\n                      .start();\n\n// 2、通过 Thread.startVirtualThread() 、创建\nThread thread = Thread.startVirtualThread(() -\u003e {\n  // your code here\n});\n\n// 3、通过 Executors.newVirtualThreadPerTaskExecutor() 创建\nvar executorService = Executors.newVirtualThreadPerTaskExecutor();\n\nexecutorService.submit(() -\u003e {\n  // your code here\n});\n\nclass CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n\n//4、通过 ThreadFactory 创建\nCustomThread customThread = new CustomThread();\n// 获取线程工厂类\nThreadFactory factory = Thread.ofVirtual().factory();\n// 创建虚拟线程\nThread thread = factory.newThread(customThread);\n// 启动线程\nthread.start();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213732-xxi6et9","Type":"NodeParagraph","Properties":{"id":"20240201213732-xxi6et9","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"通过上述列举的 4 种创建虚拟线程的方式可以看出，官方为了降低虚拟线程的门槛，尽力复用原有的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":" 线程类，这样可以平滑的过渡到虚拟线程的使用。"}]},{"ID":"20240201213733-v2u1nbs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213733-v2u1nbs","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 437: 结构化并发(第二次孵化)"}]},{"ID":"20240201213734-8mmlm87","Type":"NodeParagraph","Properties":{"id":"20240201213734-8mmlm87","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"Java 19 引入了结构化并发，一种多线程编程方法，目的是为了通过结构化并发 API 来简化多线程编程，并不是为了取代"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent"},{"Type":"NodeText","Data":"，目前处于孵化器阶段。"}]},{"ID":"20240201213735-0b5h5ho","Type":"NodeParagraph","Properties":{"id":"20240201213735-0b5h5ho","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"结构化并发将不同线程中运行的多个任务视为单个工作单元，从而简化错误处理、提高可靠性并增强可观察性。也就是说，结构化并发保留了单线程代码的可读性、可维护性和可观察性。"}]},{"ID":"20240201213736-t9iqh6s","Type":"NodeParagraph","Properties":{"id":"20240201213736-t9iqh6s","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"结构化并发的基本 API 是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://download.java.net/java/early_access/loom/docs/api/jdk.incubator.concurrent/jdk/incubator/concurrent/StructuredTaskScope.html","TextMarkTextContent":"StructuredTaskScope"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StructuredTaskScope"},{"Type":"NodeText","Data":" 支持将任务拆分为多个并发子任务，在它们自己的线程中执行，并且子任务必须在主任务继续之前完成。"}]},{"ID":"20240201213737-pyx200u","Type":"NodeParagraph","Properties":{"id":"20240201213737-pyx200u","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StructuredTaskScope"},{"Type":"NodeText","Data":" 的基本用法如下："}]},{"ID":"20240201213738-vkagm9u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213738-vkagm9u","updated":"20240201213738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    try (var scope = new StructuredTaskScope\u003cObject\u003e()) {\n        // 使用fork方法派生线程来执行子任务\n        Future\u003cInteger\u003e future1 = scope.fork(task1);\n        Future\u003cString\u003e future2 = scope.fork(task2);\n        // 等待线程完成\n        scope.join();\n        // 结果的处理可能包括处理或重新抛出异常\n        ... process results/exceptions ...\n    } // close\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213739-qbomdfs","Type":"NodeParagraph","Properties":{"id":"20240201213739-qbomdfs","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"结构化并发非常适合虚拟线程，虚拟线程是 JDK 实现的轻量级线程。许多虚拟线程共享同一个操作系统线程，从而允许非常多的虚拟线程。"}]},{"ID":"20240201213740-amu544h","Type":"NodeParagraph","Properties":{"id":"20240201213740-amu544h","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"JDK 20 中对结构化并发唯一变化是更新为支持在任务范围内创建的线程"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StructuredTaskScope"},{"Type":"NodeText","Data":"继承范围值 这简化了跨线程共享不可变数据，详见"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/429","TextMarkTextContent":"JEP 429"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213741-e31x8sv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213741-e31x8sv","updated":"20240201213741"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 432：向量 API（第五次孵化）"}]},{"ID":"20240201213742-azsdn9p","Type":"NodeParagraph","Properties":{"id":"20240201213742-azsdn9p","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"向量计算由对向量的一系列操作组成。向量 API 用来表达向量计算，该计算可以在运行时可靠地编译为支持的 CPU 架构上的最佳向量指令，从而实现优于等效标量计算的性能。"}]},{"ID":"20240201213743-y7o64kp","Type":"NodeParagraph","Properties":{"id":"20240201213743-y7o64kp","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"向量 API 的目标是为用户提供简洁易用且与平台无关的表达范围广泛的向量计算。"}]},{"ID":"20240201213744-f7fkmqq","Type":"NodeParagraph","Properties":{"id":"20240201213744-f7fkmqq","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"向量（Vector） API 最初由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/338","TextMarkTextContent":"JEP 338"},{"Type":"NodeText","Data":" 提出，并作为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://openjdk.java.net/jeps/11","TextMarkTextContent":"孵化 API"},{"Type":"NodeText","Data":"集成到 Java 16 中。第二轮孵化由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/414","TextMarkTextContent":"JEP 414"},{"Type":"NodeText","Data":" 提出并集成到 Java 17 中，第三轮孵化由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/417","TextMarkTextContent":"JEP 417"},{"Type":"NodeText","Data":" 提出并集成到 Java 18 中，第四轮由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/426","TextMarkTextContent":"JEP 426"},{"Type":"NodeText","Data":" 提出并集成到了 Java 19 中。"}]},{"ID":"20240201213745-rlx3rf9","Type":"NodeParagraph","Properties":{"id":"20240201213745-rlx3rf9","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"Java20 的这次孵化基本没有改变向量 API ，只是进行了一些错误修复和性能增强，详见 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/438","TextMarkTextContent":"JEP 438"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213746-3azut2v","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213746-3azut2v","updated":"20240201213746"}}]}