{"ID":"20240201213618-isz9awz","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213618-isz9awz","title":"java21","updated":"20240201213618"},"Children":[{"ID":"20240201213619-j6j53qy","Type":"NodeThematicBreak","Properties":{"id":"20240201213619-j6j53qy","updated":"20240201213619"}},{"ID":"20240201213620-glt1ot3","Type":"NodeParagraph","Properties":{"id":"20240201213620-glt1ot3","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"title: Java 21 新特性概览(重要)"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213621-06d0n1d","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-06d0n1d","updated":"20240201213621"},"Children":[{"ID":"20240201213622-hzxlw7e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-hzxlw7e","updated":"20240201213622"},"Children":[{"ID":"20240201213623-964drs9","Type":"NodeParagraph","Properties":{"id":"20240201213623-964drs9","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"Java新特性"}]}]}]},{"ID":"20240201213624-t6dnul6","Type":"NodeThematicBreak","Properties":{"id":"20240201213624-t6dnul6","updated":"20240201213624"}},{"ID":"20240201213625-r2kuo87","Type":"NodeParagraph","Properties":{"id":"20240201213625-r2kuo87","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"JDK 21 于 2023 年 9 月 19 日 发布，这是一个非常重要的版本，里程碑式。"}]},{"ID":"20240201213626-9arus0r","Type":"NodeParagraph","Properties":{"id":"20240201213626-9arus0r","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"JDK21 是 LTS（长期支持版），至此为止，目前有 JDK8、JDK11、JDK17 和 JDK21 这四个长期支持版了。"}]},{"ID":"20240201213627-je2lqz5","Type":"NodeParagraph","Properties":{"id":"20240201213627-je2lqz5","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"JDK 21 共有 15 个新特性，这篇文章会挑选其中较为重要的一些新特性进行详细介绍："}]},{"ID":"20240201213628-uoykcrh","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-uoykcrh","updated":"20240201213628"},"Children":[{"ID":"20240201213629-8psypn3","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-8psypn3","updated":"20240201213629"},"Children":[{"ID":"20240201213630-l2uijxl","Type":"NodeParagraph","Properties":{"id":"20240201213630-l2uijxl","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/430","TextMarkTextContent":"JEP 430：String Templates（字符串模板）"},{"Type":"NodeText","Data":"（预览）"}]}]},{"ID":"20240201213631-5y31ieh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-5y31ieh","updated":"20240201213631"},"Children":[{"ID":"20240201213632-co9vz64","Type":"NodeParagraph","Properties":{"id":"20240201213632-co9vz64","updated":"20240201213632"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/431","TextMarkTextContent":"JEP 431：Sequenced Collections（序列化集合）"}]}]},{"ID":"20240201213633-o94u651","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213633-o94u651","updated":"20240201213633"},"Children":[{"ID":"20240201213634-7znut6b","Type":"NodeParagraph","Properties":{"id":"20240201213634-7znut6b","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/439","TextMarkTextContent":"JEP 439：Generational ZGC（分代 ZGC）"}]}]},{"ID":"20240201213635-1p6ur42","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-1p6ur42","updated":"20240201213635"},"Children":[{"ID":"20240201213636-9egfuq2","Type":"NodeParagraph","Properties":{"id":"20240201213636-9egfuq2","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/440","TextMarkTextContent":"JEP 440：Record Patterns（记录模式）"}]}]},{"ID":"20240201213637-v6gm9a1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-v6gm9a1","updated":"20240201213637"},"Children":[{"ID":"20240201213638-je11wk3","Type":"NodeParagraph","Properties":{"id":"20240201213638-je11wk3","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/442","TextMarkTextContent":"JEP 441：Pattern Matching for switch（switch 的模式匹配）"}]}]},{"ID":"20240201213639-pbkmll6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-pbkmll6","updated":"20240201213639"},"Children":[{"ID":"20240201213640-mlx3pu3","Type":"NodeParagraph","Properties":{"id":"20240201213640-mlx3pu3","updated":"20240201213640"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/442","TextMarkTextContent":"JEP 442：Foreign Function \u0026amp; Memory API（外部函数和内存 API）"},{"Type":"NodeText","Data":"（第三次预览）"}]}]},{"ID":"20240201213641-w2rekad","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-w2rekad","updated":"20240201213641"},"Children":[{"ID":"20240201213642-kllw00f","Type":"NodeParagraph","Properties":{"id":"20240201213642-kllw00f","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/443","TextMarkTextContent":"JEP 443：Unnamed Patterns and Variables（未命名模式和变量"},{"Type":"NodeText","Data":"（预览）"}]}]},{"ID":"20240201213643-cnzhtef","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-cnzhtef","updated":"20240201213643"},"Children":[{"ID":"20240201213644-dweheu2","Type":"NodeParagraph","Properties":{"id":"20240201213644-dweheu2","updated":"20240201213644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/444","TextMarkTextContent":"JEP 444：Virtual Threads（虚拟线程）"}]}]},{"ID":"20240201213645-hq0piec","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-hq0piec","updated":"20240201213645"},"Children":[{"ID":"20240201213646-c7z24yv","Type":"NodeParagraph","Properties":{"id":"20240201213646-c7z24yv","updated":"20240201213646"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/445","TextMarkTextContent":"JEP 445：Unnamed Classes and Instance Main Methods（未命名类和实例 main 方法 ）"},{"Type":"NodeText","Data":"（预览）"}]}]}]},{"ID":"20240201213647-cao7psy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213647-cao7psy","updated":"20240201213647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 430：字符串模板（预览）"}]},{"ID":"20240201213648-bkmfcvw","Type":"NodeParagraph","Properties":{"id":"20240201213648-bkmfcvw","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"String Templates(字符串模板) 目前仍然是 JDK 21 中的一个预览功能。"}]},{"ID":"20240201213649-4mttjmm","Type":"NodeParagraph","Properties":{"id":"20240201213649-4mttjmm","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"String Templates 提供了一种更简洁、更直观的方式来动态构建字符串。通过使用占位符"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"${}"},{"Type":"NodeText","Data":"，我们可以将变量的值直接嵌入到字符串中，而不需要手动处理。在运行时，Java 编译器会将这些占位符替换为实际的变量值。并且，表达式支持局部变量、静态/非静态字段甚至方法、计算结果等特性。"}]},{"ID":"20240201213650-r8tb784","Type":"NodeParagraph","Properties":{"id":"20240201213650-r8tb784","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"实际上，String Templates（字符串模板）再大多数编程语言中都存在:"}]},{"ID":"20240201213651-x8kgy4o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dHlwZXNjcmlwdA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213651-x8kgy4o","updated":"20240201213651"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dHlwZXNjcmlwdA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\"Greetings {{ name }}!\";  //Angular\n`Greetings ${ name }!`;    //Typescript\n$\"Greetings { name }!\"    //Visual basic\nf\"Greetings { name }!\"    //Python\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213652-wd4ad14","Type":"NodeParagraph","Properties":{"id":"20240201213652-wd4ad14","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"Java 在没有 String Templates 之前，我们通常使用字符串拼接或格式化方法来构建字符串："}]},{"ID":"20240201213653-f0ps0vb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213653-f0ps0vb","updated":"20240201213653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//concatenation\nmessage = \"Greetings \" + name + \"!\";\n\n//String.format()\nmessage = String.format(\"Greetings %s!\", name);  //concatenation\n\n//MessageFormat\nmessage = new MessageFormat(\"Greetings {0}!\").format(name);\n\n//StringBuilder\nmessage = new StringBuilder().append(\"Greetings \").append(name).append(\"!\").toString();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213654-ba4tyoh","Type":"NodeParagraph","Properties":{"id":"20240201213654-ba4tyoh","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"这些方法或多或少都存在一些缺点，比如难以阅读、冗长、复杂。"}]},{"ID":"20240201213655-trw9hue","Type":"NodeParagraph","Properties":{"id":"20240201213655-trw9hue","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"Java 使用 String Templates 进行字符串拼接，可以直接在字符串中嵌入表达式，而无需进行额外的处理："}]},{"ID":"20240201213656-4wjv0hu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213656-4wjv0hu","updated":"20240201213656"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String message = STR.\"Greetings \\{name}!\";\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213657-084mz3c","Type":"NodeParagraph","Properties":{"id":"20240201213657-084mz3c","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"在上面的模板表达式中："}]},{"ID":"20240201213658-5d9438y","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-5d9438y","updated":"20240201213658"},"Children":[{"ID":"20240201213659-d59jrki","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-d59jrki","updated":"20240201213659"},"Children":[{"ID":"20240201213660-t16vjji","Type":"NodeParagraph","Properties":{"id":"20240201213660-t16vjji","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"STR 是模板处理器。"}]}]},{"ID":"20240201213661-hdg4rco","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-hdg4rco","updated":"20240201213661"},"Children":[{"ID":"20240201213662-va0jpna","Type":"NodeParagraph","Properties":{"id":"20240201213662-va0jpna","updated":"20240201213662"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\\{name}"},{"Type":"NodeText","Data":"为表达式，运行时，这些表达式将被相应的变量值替换。"}]}]}]},{"ID":"20240201213663-i7yfnx8","Type":"NodeParagraph","Properties":{"id":"20240201213663-i7yfnx8","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"Java 目前支持三种模板处理器："}]},{"ID":"20240201213664-rl9a6nf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-rl9a6nf","updated":"20240201213664"},"Children":[{"ID":"20240201213665-ixv5qls","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-ixv5qls","updated":"20240201213665"},"Children":[{"ID":"20240201213666-rh2zmvp","Type":"NodeParagraph","Properties":{"id":"20240201213666-rh2zmvp","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"STR：自动执行字符串插值，即将模板中的每个嵌入式表达式替换为其值（转换为字符串）。"}]}]},{"ID":"20240201213667-84odxcj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-84odxcj","updated":"20240201213667"},"Children":[{"ID":"20240201213668-slxdvd0","Type":"NodeParagraph","Properties":{"id":"20240201213668-slxdvd0","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"FMT：和 STR 类似，但是它还可以接受格式说明符，这些格式说明符出现在嵌入式表达式的左边，用来控制输出的样式"}]}]},{"ID":"20240201213669-tto9s22","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-tto9s22","updated":"20240201213669"},"Children":[{"ID":"20240201213670-phayyri","Type":"NodeParagraph","Properties":{"id":"20240201213670-phayyri","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"RAW：不会像 STR 和 FMT 模板处理器那样自动处理字符串模板，而是返回一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StringTemplate"},{"Type":"NodeText","Data":" 对象，这个对象包含了模板中的文本和表达式的信息"}]}]}]},{"ID":"20240201213671-v2k2zx9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213671-v2k2zx9","updated":"20240201213671"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String name = \"Lokesh\";\n\n//STR\nString message = STR.\"Greetings \\{name}.\";\n\n//FMT\nString message = STR.\"Greetings %-12s\\{name}.\";\n\n//RAW\nStringTemplate st = RAW.\"Greetings \\{name}.\";\nString message = STR.process(st);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213672-xoo609v","Type":"NodeParagraph","Properties":{"id":"20240201213672-xoo609v","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"除了 JDK 自带的三种模板处理器外，你还可以实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StringTemplate.Processor"},{"Type":"NodeText","Data":" 接口来创建自己的模板处理器。"}]},{"ID":"20240201213673-8smy6oz","Type":"NodeParagraph","Properties":{"id":"20240201213673-8smy6oz","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"我们可以使用局部变量、静态/非静态字段甚至方法作为嵌入表达式："}]},{"ID":"20240201213674-b3j8t4h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213674-b3j8t4h","updated":"20240201213674"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//variable\nmessage = STR.\"Greetings \\{name}!\";\n\n//method\nmessage = STR.\"Greetings \\{getName()}!\";\n\n//field\nmessage = STR.\"Greetings \\{this.name}!\";\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213675-rx35j6z","Type":"NodeParagraph","Properties":{"id":"20240201213675-rx35j6z","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"还可以在表达式中执行计算并打印结果："}]},{"ID":"20240201213676-ekt3l42","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213676-ekt3l42","updated":"20240201213676"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int x = 10, y = 20;\nString s = STR.\"\\{x} + \\{y} = \\{x + y}\";  //\"10 + 20 = 30\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213677-twmg82g","Type":"NodeParagraph","Properties":{"id":"20240201213677-twmg82g","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"为了提高可读性，我们可以将嵌入的表达式分成多行:"}]},{"ID":"20240201213678-amzdxey","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213678-amzdxey","updated":"20240201213678"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String time = STR.\"The current time is \\{\n    //sample comment - current time in HH:mm:ss\n    DateTimeFormatter\n      .ofPattern(\"HH:mm:ss\")\n      .format(LocalTime.now())\n  }.\";\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213679-79h8jiy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213679-79h8jiy","updated":"20240201213679"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP431：序列化集合"}]},{"ID":"20240201213680-tm40c19","Type":"NodeParagraph","Properties":{"id":"20240201213680-tm40c19","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"JDK 21 引入了一种新的集合类型："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Sequenced Collections（序列化集合，也叫有序集合）"},{"Type":"NodeText","Data":"，这是一种具有确定出现顺序（encounter order）的集合（无论我们遍历这样的集合多少次，元素的出现顺序始终是固定的）。序列化集合提供了处理集合的第一个和最后一个元素以及反向视图（与原始集合相反的顺序）的简单方法。"}]},{"ID":"20240201213681-z5z5k1y","Type":"NodeParagraph","Properties":{"id":"20240201213681-z5z5k1y","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"Sequenced Collections 包括以下三个接口："}]},{"ID":"20240201213682-y5i2xog","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213682-y5i2xog","updated":"20240201213682"},"Children":[{"ID":"20240201213683-m6yx1tu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213683-m6yx1tu","updated":"20240201213683"},"Children":[{"ID":"20240201213684-ayu84a5","Type":"NodeParagraph","Properties":{"id":"20240201213684-ayu84a5","updated":"20240201213684"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html","TextMarkTextContent":"SequencedCollection"}]}]},{"ID":"20240201213685-558wk7w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213685-558wk7w","updated":"20240201213685"},"Children":[{"ID":"20240201213686-jpkdbwh","Type":"NodeParagraph","Properties":{"id":"20240201213686-jpkdbwh","updated":"20240201213686"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedSet.html","TextMarkTextContent":"SequencedSet"}]}]},{"ID":"20240201213687-ofhueov","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213687-ofhueov","updated":"20240201213687"},"Children":[{"ID":"20240201213688-6ooh8ue","Type":"NodeParagraph","Properties":{"id":"20240201213688-6ooh8ue","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedMap.html","TextMarkTextContent":"SequencedMap"}]}]}]},{"ID":"20240201213689-r0s7xiv","Type":"NodeParagraph","Properties":{"id":"20240201213689-r0s7xiv","updated":"20240201213689"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedCollection"},{"Type":"NodeText","Data":" 接口继承了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Collection"},{"Type":"NodeText","Data":"接口， 提供了在集合两端访问、添加或删除元素以及获取集合的反向视图的方法。"}]},{"ID":"20240201213690-ca91bn1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213690-ca91bn1","updated":"20240201213690"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"interface SequencedCollection\u003cE\u003e extends Collection\u003cE\u003e {\n\n  // New Method\n\n  SequencedCollection\u003cE\u003e reversed();\n\n  // Promoted methods from Deque\u003cE\u003e\n\n  void addFirst(E);\n  void addLast(E);\n\n  E getFirst();\n  E getLast();\n\n  E removeFirst();\n  E removeLast();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213691-h4zx6pl","Type":"NodeParagraph","Properties":{"id":"20240201213691-h4zx6pl","updated":"20240201213691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Deque"},{"Type":"NodeText","Data":" 接口实现了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedCollection"},{"Type":"NodeText","Data":" 接口。"}]},{"ID":"20240201213692-vd6pc29","Type":"NodeParagraph","Properties":{"id":"20240201213692-vd6pc29","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 为例，演示一下实际使用效果："}]},{"ID":"20240201213693-z8jon7d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213693-z8jon7d","updated":"20240201213693"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ArrayList\u003cInteger\u003e arrayList = new ArrayList\u003c\u003e();\n\narrayList.add(1);   // List contains: [1]\n\narrayList.addFirst(0);  // List contains: [0, 1]\narrayList.addLast(2);   // List contains: [0, 1, 2]\n\nInteger firstElement = arrayList.getFirst();  // 0\nInteger lastElement = arrayList.getLast();  // 2\n\nList\u003cInteger\u003e reversed = arrayList.reversed();\nSystem.out.println(reversed); // Prints [2, 1, 0]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213694-o6f686f","Type":"NodeParagraph","Properties":{"id":"20240201213694-o6f686f","updated":"20240201213694"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedSet"},{"Type":"NodeText","Data":"接口直接继承了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedCollection"},{"Type":"NodeText","Data":" 接口并重写了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"reversed()"},{"Type":"NodeText","Data":" 方法。"}]},{"ID":"20240201213695-ac8stbk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213695-ac8stbk","updated":"20240201213695"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"interface SequencedSet\u003cE\u003e extends SequencedCollection\u003cE\u003e, Set\u003cE\u003e {\n\n    SequencedSet\u003cE\u003e reversed();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213696-ipb1kvo","Type":"NodeParagraph","Properties":{"id":"20240201213696-ipb1kvo","updated":"20240201213696"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SortedSet"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedHashSet"},{"Type":"NodeText","Data":" 实现了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedSet"},{"Type":"NodeText","Data":"接口。"}]},{"ID":"20240201213697-790lc1o","Type":"NodeParagraph","Properties":{"id":"20240201213697-790lc1o","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedHashSet"},{"Type":"NodeText","Data":" 为例，演示一下实际使用效果："}]},{"ID":"20240201213698-ckejud4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213698-ckejud4","updated":"20240201213698"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"LinkedHashSet\u003cInteger\u003e linkedHashSet = new LinkedHashSet\u003c\u003e(List.of(1, 2, 3));\n\nInteger firstElement = linkedHashSet.getFirst();   // 1\nInteger lastElement = linkedHashSet.getLast();    // 3\n\nlinkedHashSet.addFirst(0);  //List contains: [0, 1, 2, 3]\nlinkedHashSet.addLast(4);   //List contains: [0, 1, 2, 3, 4]\n\nSystem.out.println(linkedHashSet.reversed());   //Prints [5, 3, 2, 1, 0]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213699-w1x4x0n","Type":"NodeParagraph","Properties":{"id":"20240201213699-w1x4x0n","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedMap"},{"Type":"NodeText","Data":" 接口继承了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Map"},{"Type":"NodeText","Data":"接口， 提供了在集合两端访问、添加或删除键值对、获取包含 key 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedSet"},{"Type":"NodeText","Data":"、包含 value 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedCollection"},{"Type":"NodeText","Data":"、包含 entry（键值对） 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedSet"},{"Type":"NodeText","Data":"以及获取集合的反向视图的方法。"}]},{"ID":"20240201213700-fnzzf4r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213700-fnzzf4r","updated":"20240201213700"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"interface SequencedMap\u003cK,V\u003e extends Map\u003cK,V\u003e {\n\n  // New Methods\n\n  SequencedMap\u003cK,V\u003e reversed();\n\n  SequencedSet\u003cK\u003e sequencedKeySet();\n  SequencedCollection\u003cV\u003e sequencedValues();\n  SequencedSet\u003cEntry\u003cK,V\u003e\u003e sequencedEntrySet();\n\n  V putFirst(K, V);\n  V putLast(K, V);\n\n\n  // Promoted Methods from NavigableMap\u003cK, V\u003e\n\n  Entry\u003cK, V\u003e firstEntry();\n  Entry\u003cK, V\u003e lastEntry();\n\n  Entry\u003cK, V\u003e pollFirstEntry();\n  Entry\u003cK, V\u003e pollLastEntry();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213701-v36nuw3","Type":"NodeParagraph","Properties":{"id":"20240201213701-v36nuw3","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SortedMap"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedHashMap"},{"Type":"NodeText","Data":" 实现了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SequencedMap"},{"Type":"NodeText","Data":" 接口。"}]},{"ID":"20240201213702-7bla9jx","Type":"NodeParagraph","Properties":{"id":"20240201213702-7bla9jx","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedHashMap"},{"Type":"NodeText","Data":" 为例，演示一下实际使用效果："}]},{"ID":"20240201213703-kujtrcx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213703-kujtrcx","updated":"20240201213703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"LinkedHashMap\u003cInteger, String\u003e map = new LinkedHashMap\u003c\u003e();\n\nmap.put(1, \"One\");\nmap.put(2, \"Two\");\nmap.put(3, \"Three\");\n\nmap.firstEntry();   //1=One\nmap.lastEntry();    //3=Three\n\nSystem.out.println(map);  //{1=One, 2=Two, 3=Three}\n\nMap.Entry\u003cInteger, String\u003e first = map.pollFirstEntry();   //1=One\nMap.Entry\u003cInteger, String\u003e last = map.pollLastEntry();    //3=Three\n\nSystem.out.println(map);  //{2=Two}\n\nmap.putFirst(1, \"One\");     //{1=One, 2=Two}\nmap.putLast(3, \"Three\");    //{1=One, 2=Two, 3=Three}\n\nSystem.out.println(map);  //{1=One, 2=Two, 3=Three}\nSystem.out.println(map.reversed());   //{3=Three, 2=Two, 1=One}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213704-rjxjnur","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213704-rjxjnur","updated":"20240201213704"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 439：分代 ZGC"}]},{"ID":"20240201213705-gxjmbk1","Type":"NodeParagraph","Properties":{"id":"20240201213705-gxjmbk1","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"JDK21 中对 ZGC 进行了功能扩展，增加了分代 GC 功能。不过，默认是关闭的，需要通过配置打开："}]},{"ID":"20240201213706-xzi9myv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213706-xzi9myv","updated":"20240201213706"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 启用分代ZGC\njava -XX:+UseZGC -XX:+ZGenerational ...\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213707-rccwp4w","Type":"NodeParagraph","Properties":{"id":"20240201213707-rccwp4w","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"在未来的版本中，官方会把 ZGenerational 设为默认值，即默认打开 ZGC 的分代 GC。在更晚的版本中，非分代 ZGC 就被移除。"}]},{"ID":"20240201213708-xz2gcpr","Type":"NodeBlockquote","Properties":{"id":"20240201213708-xz2gcpr","updated":"20240201213708"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213709-t9cc3qv","Type":"NodeParagraph","Properties":{"id":"20240201213709-t9cc3qv","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"In a future release we intend to make Generational ZGC the default, at which point -XX:-ZGenerational will select non-generational ZGC. In an even later release we intend to remove non-generational ZGC, at which point the ZGenerational option will become obsolete."}]},{"ID":"20240201213710-qmi1fhm","Type":"NodeParagraph","Properties":{"id":"20240201213710-qmi1fhm","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"在将来的版本中，我们打算将 Generational ZGC 作为默认选项，此时-XX:-ZGenerational 将选择非分代 ZGC。在更晚的版本中，我们打算移除非分代 ZGC，此时 ZGenerational 选项将变得过时。"}]}]},{"ID":"20240201213711-h28ywr4","Type":"NodeParagraph","Properties":{"id":"20240201213711-h28ywr4","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"分代 ZGC 可以显著减少垃圾回收过程中的停顿时间，并提高应用程序的响应性能。这对于大型 Java 应用程序和高并发场景下的性能优化非常有价值。"}]},{"ID":"20240201213712-ysgxj3f","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213712-ysgxj3f","updated":"20240201213712"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 440：记录模式"}]},{"ID":"20240201213713-t42eau2","Type":"NodeParagraph","Properties":{"id":"20240201213713-t42eau2","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"记录模式在 Java 19 进行了第一次预览， 由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/405","TextMarkTextContent":"JEP 405"},{"Type":"NodeText","Data":" 提出。JDK 20 中是第二次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/432","TextMarkTextContent":"JEP 432"},{"Type":"NodeText","Data":" 提出。最终，记录模式在 JDK21 顺利转正。"}]},{"ID":"20240201213714-jojveru","Type":"NodeParagraph","Properties":{"id":"20240201213714-jojveru","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java20.md","TextMarkTextContent":"Java 20 新特性概览"},{"Type":"NodeText","Data":"已经详细介绍过记录模式，这里就不重复了。"}]},{"ID":"20240201213715-2acl93x","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213715-2acl93x","updated":"20240201213715"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 441：switch 的模式匹配"}]},{"ID":"20240201213716-r1itiup","Type":"NodeParagraph","Properties":{"id":"20240201213716-r1itiup","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"增强 Java 中的 switch 表达式和语句，允许在 case 标签中使用模式。当模式匹配时，执行 case 标签对应的代码。"}]},{"ID":"20240201213717-ua8h99n","Type":"NodeParagraph","Properties":{"id":"20240201213717-ua8h99n","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"在下面的代码中，switch 表达式使用了类型模式来进行匹配。"}]},{"ID":"20240201213718-g0qs60t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213718-g0qs60t","updated":"20240201213718"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static String formatterPatternSwitch(Object obj) {\n    return switch (obj) {\n        case Integer i -\u003e String.format(\"int %d\", i);\n        case Long l    -\u003e String.format(\"long %d\", l);\n        case Double d  -\u003e String.format(\"double %f\", d);\n        case String s  -\u003e String.format(\"String %s\", s);\n        default        -\u003e obj.toString();\n    };\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213719-9o9dmg9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213719-9o9dmg9","updated":"20240201213719"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 442: 外部函数和内存 API（第三次预览）"}]},{"ID":"20240201213720-9pv1sz3","Type":"NodeParagraph","Properties":{"id":"20240201213720-9pv1sz3","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。"}]},{"ID":"20240201213721-sp1yfvb","Type":"NodeParagraph","Properties":{"id":"20240201213721-sp1yfvb","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/412","TextMarkTextContent":"JEP 412"},{"Type":"NodeText","Data":" 提出。Java 18 中进行了第二次孵化，由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/419","TextMarkTextContent":"JEP 419"},{"Type":"NodeText","Data":" 提出。Java 19 中是第一次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/424","TextMarkTextContent":"JEP 424"},{"Type":"NodeText","Data":" 提出。JDK 20 中是第二次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/434","TextMarkTextContent":"JEP 434"},{"Type":"NodeText","Data":" 提出。JDK 21 中是第三次预览，由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/442","TextMarkTextContent":"JEP 442"},{"Type":"NodeText","Data":" 提出。"}]},{"ID":"20240201213722-z7wra9f","Type":"NodeParagraph","Properties":{"id":"20240201213722-z7wra9f","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java19.md","TextMarkTextContent":"Java 19 新特性概览"},{"Type":"NodeText","Data":" 中，我有详细介绍到外部函数和内存 API，这里就不再做额外的介绍了。"}]},{"ID":"20240201213723-w3u4dc2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213723-w3u4dc2","updated":"20240201213723"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 443：未命名模式和变量（预览）"}]},{"ID":"20240201213724-sindrx0","Type":"NodeParagraph","Properties":{"id":"20240201213724-sindrx0","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"未命名模式和变量使得我们可以使用下划线 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"_"},{"Type":"NodeText","Data":" 表示未命名的变量以及模式匹配时不使用的组件，旨在提高代码的可读性和可维护性。"}]},{"ID":"20240201213725-bx6n5cy","Type":"NodeParagraph","Properties":{"id":"20240201213725-bx6n5cy","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"未命名变量的典型场景是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":" 语句、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":" 子句中的异常变量和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for"},{"Type":"NodeText","Data":"循环。当变量不需要使用的时候就可以使用下划线 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"_"},{"Type":"NodeText","Data":"代替，这样清晰标识未被使用的变量。"}]},{"ID":"20240201213726-e786q07","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213726-e786q07","updated":"20240201213726"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"try (var _ = ScopedContext.acquire()) {\n  // No use of acquired resource\n}\ntry { ... }\ncatch (Exception _) { ... }\ncatch (Throwable _) { ... }\n\nfor (int i = 0, _ = runOnce(); i \u003c arr.length; i++) {\n  ...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213727-tyk1hx6","Type":"NodeParagraph","Properties":{"id":"20240201213727-tyk1hx6","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"未命名模式是一个无条件的模式，并不绑定任何值。未命名模式变量出现在类型模式中。"}]},{"ID":"20240201213728-95j70s7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213728-95j70s7","updated":"20240201213728"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"if (r instanceof ColoredPoint(_, Color c)) { ... c ... }\n\nswitch (b) {\n    case Box(RedBall _), Box(BlueBall _) -\u003e processBox(b);\n    case Box(GreenBall _)                -\u003e stopProcessing();\n    case Box(_)                          -\u003e pickAnotherBox();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213729-4wg7w5u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213729-4wg7w5u","updated":"20240201213729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 444：虚拟线程"}]},{"ID":"20240201213730-nbihb87","Type":"NodeParagraph","Properties":{"id":"20240201213730-nbihb87","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"虚拟线程是一项重量级的更新，一定一定要重视！"}]},{"ID":"20240201213731-01b9la5","Type":"NodeParagraph","Properties":{"id":"20240201213731-01b9la5","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"虚拟线程在 Java 19 中进行了第一次预览，由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/425","TextMarkTextContent":"JEP 425"},{"Type":"NodeText","Data":"提出。JDK 20 中是第二次预览。最终，虚拟线程在 JDK21 顺利转正。"}]},{"ID":"20240201213732-53s96qb","Type":"NodeParagraph","Properties":{"id":"20240201213732-53s96qb","updated":"20240201213732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java20.md","TextMarkTextContent":"Java 20 新特性概览"},{"Type":"NodeText","Data":"已经详细介绍过虚拟线程，这里就不重复了。"}]},{"ID":"20240201213733-ufqvu9w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213733-ufqvu9w","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 445：未命名类和实例 main 方法 （预览）"}]},{"ID":"20240201213734-oanrhsb","Type":"NodeParagraph","Properties":{"id":"20240201213734-oanrhsb","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"这个特性主要简化了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法的的声明。对于 Java 初学者来说，这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法的声明引入了太多的 Java 语法概念，不利于初学者快速上手。"}]},{"ID":"20240201213735-aatmmp1","Type":"NodeParagraph","Properties":{"id":"20240201213735-aatmmp1","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"没有使用该特性之前定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法："}]},{"ID":"20240201213736-6spyoy3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213736-6spyoy3","updated":"20240201213736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213737-wmbh40j","Type":"NodeParagraph","Properties":{"id":"20240201213737-wmbh40j","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"使用该新特性之后定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法："}]},{"ID":"20240201213738-6o2fc26","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213738-6o2fc26","updated":"20240201213738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class HelloWorld {\n    void main() {\n        System.out.println(\"Hello, World!\");\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213739-pn2qqqh","Type":"NodeParagraph","Properties":{"id":"20240201213739-pn2qqqh","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"进一步精简(未命名的类允许我们不定义类名)："}]},{"ID":"20240201213740-q1d8bxk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213740-q1d8bxk","updated":"20240201213740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"void main() {\n   System.out.println(\"Hello, World!\");\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213741-1up5wie","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213741-1up5wie","updated":"20240201213741"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213742-ma6tw60","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-ma6tw60","updated":"20240201213742"},"Children":[{"ID":"20240201213743-h54680p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-h54680p","updated":"20240201213743"},"Children":[{"ID":"20240201213744-qp9vew5","Type":"NodeParagraph","Properties":{"id":"20240201213744-qp9vew5","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"Java 21 String Templates："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://howtodoinjava.com/java/java-string-templates/","TextMarkTextContent":"https://howtodoinjava.com/java/java-string-templates/"}]}]},{"ID":"20240201213745-cab7r2q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213745-cab7r2q","updated":"20240201213745"},"Children":[{"ID":"20240201213746-r196x44","Type":"NodeParagraph","Properties":{"id":"20240201213746-r196x44","updated":"20240201213746"},"Children":[{"Type":"NodeText","Data":"Java 21 Sequenced Collections："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://howtodoinjava.com/java/sequenced-collections/","TextMarkTextContent":"https://howtodoinjava.com/java/sequenced-collections/"}]}]}]}]}