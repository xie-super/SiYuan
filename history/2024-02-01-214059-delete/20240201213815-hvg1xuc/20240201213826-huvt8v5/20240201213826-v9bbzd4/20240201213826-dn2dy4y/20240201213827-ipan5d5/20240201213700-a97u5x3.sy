{"ID":"20240201213700-a97u5x3","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213700-a97u5x3","title":"java16","updated":"20240201213700"},"Children":[{"ID":"20240201213701-qkshnq6","Type":"NodeThematicBreak","Properties":{"id":"20240201213701-qkshnq6","updated":"20240201213701"}},{"ID":"20240201213702-o3njvgk","Type":"NodeParagraph","Properties":{"id":"20240201213702-o3njvgk","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"title: Java 16 新特性概览"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213703-7lh8bu6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-7lh8bu6","updated":"20240201213703"},"Children":[{"ID":"20240201213704-dhfkyui","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-dhfkyui","updated":"20240201213704"},"Children":[{"ID":"20240201213705-u7lj6vi","Type":"NodeParagraph","Properties":{"id":"20240201213705-u7lj6vi","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"Java新特性"}]}]}]},{"ID":"20240201213706-xv9igso","Type":"NodeThematicBreak","Properties":{"id":"20240201213706-xv9igso","updated":"20240201213706"}},{"ID":"20240201213707-lynpp1l","Type":"NodeParagraph","Properties":{"id":"20240201213707-lynpp1l","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"Java 16 在 2021 年 3 月 16 日正式发布，非长期支持（LTS）版本。"}]},{"ID":"20240201213708-mbt0myk","Type":"NodeParagraph","Properties":{"id":"20240201213708-mbt0myk","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/projects/jdk/16/","TextMarkTextContent":"OpenJDK Java 16 文档"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213709-4fu28rd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213709-4fu28rd","updated":"20240201213709"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 338:向量 API(第一次孵化)"}]},{"ID":"20240201213710-r0avjz3","Type":"NodeParagraph","Properties":{"id":"20240201213710-r0avjz3","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"向量（Vector） API 最初由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/338","TextMarkTextContent":"JEP 338"},{"Type":"NodeText","Data":" 提出，并作为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://openjdk.java.net/jeps/11","TextMarkTextContent":"孵化 API"},{"Type":"NodeText","Data":"集成到 Java 16 中。第二轮孵化由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/414","TextMarkTextContent":"JEP 414"},{"Type":"NodeText","Data":" 提出并集成到 Java 17 中，第三轮孵化由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/417","TextMarkTextContent":"JEP 417"},{"Type":"NodeText","Data":" 提出并集成到 Java 18 中，第四轮由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/426","TextMarkTextContent":"JEP 426"},{"Type":"NodeText","Data":" 提出并集成到了 Java 19 中。"}]},{"ID":"20240201213711-j3szlld","Type":"NodeParagraph","Properties":{"id":"20240201213711-j3szlld","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"该孵化器 API 提供了一个 API 的初始迭代以表达一些向量计算，这些计算在运行时可靠地编译为支持的 CPU 架构上的最佳向量硬件指令，从而获得优于同等标量计算的性能，充分利用单指令多数据（SIMD）技术（大多数现代 CPU 上都可以使用的一种指令）。尽管 HotSpot 支持自动向量化，但是可转换的标量操作集有限且易受代码更改的影响。该 API 将使开发人员能够轻松地用 Java 编写可移植的高性能向量算法。"}]},{"ID":"20240201213712-d2qfbik","Type":"NodeParagraph","Properties":{"id":"20240201213712-d2qfbik","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java18.md","TextMarkTextContent":"Java 18 新特性概览"},{"Type":"NodeText","Data":" 中，我有详细介绍到向量 API，这里就不再做额外的介绍了。"}]},{"ID":"20240201213713-pnntdyf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213713-pnntdyf","updated":"20240201213713"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 347:启用 C++ 14 语言特性"}]},{"ID":"20240201213714-kfdptay","Type":"NodeParagraph","Properties":{"id":"20240201213714-kfdptay","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"Java 16 允许在 JDK 的 C++ 源代码中使用 C++14 语言特性，并提供在 HotSpot 代码中可以使用哪些特性的具体指导。"}]},{"ID":"20240201213715-wtaxyxs","Type":"NodeParagraph","Properties":{"id":"20240201213715-wtaxyxs","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"在 Java 15 中，JDK 中 C++ 代码使用的语言特性仅限于 C++98/03 语言标准。它要求更新各种平台编译器的最低可接受版本。"}]},{"ID":"20240201213716-etiyzhe","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213716-etiyzhe","updated":"20240201213716"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 376:ZGC 并发线程堆栈处理"}]},{"ID":"20240201213717-6iifzzl","Type":"NodeParagraph","Properties":{"id":"20240201213717-6iifzzl","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"Java16 将 ZGC 线程栈处理从安全点转移到一个并发阶段，甚至在大堆上也允许在毫秒内暂停 GC 安全点。消除 ZGC 垃圾收集器中最后一个延迟源可以极大地提高应用程序的性能和效率。"}]},{"ID":"20240201213718-aprm9bb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213718-aprm9bb","updated":"20240201213718"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 387:弹性元空间"}]},{"ID":"20240201213719-mwol3nw","Type":"NodeParagraph","Properties":{"id":"20240201213719-mwol3nw","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"自从引入了 Metaspace 以来，根据反馈，Metaspace 经常占用过多的堆外内存，从而导致内存浪费。弹性元空间这个特性可将未使用的 HotSpot 类元数据（即元空间，metaspace）内存更快速地返回到操作系统，从而减少元空间的占用空间。"}]},{"ID":"20240201213720-w5sgjbv","Type":"NodeParagraph","Properties":{"id":"20240201213720-w5sgjbv","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"并且，这个提案还简化了元空间的代码以降低维护成本。"}]},{"ID":"20240201213721-kwk4rt8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213721-kwk4rt8","updated":"20240201213721"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 390:对基于值的类发出警告"}]},{"ID":"20240201213722-3b6mzt7","Type":"NodeBlockquote","Properties":{"id":"20240201213722-3b6mzt7","updated":"20240201213722"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213723-wqkyttn","Type":"NodeParagraph","Properties":{"id":"20240201213723-wqkyttn","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"以下介绍摘自："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://xie.infoq.cn/article/8304c894c4e38318d38ceb116","TextMarkTextContent":"实操 | 剖析 Java16 新语法特性"},{"Type":"NodeText","Data":"，原文写的很不错，推荐阅读。"}]}]},{"ID":"20240201213724-soa9rr8","Type":"NodeParagraph","Properties":{"id":"20240201213724-soa9rr8","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"早在 Java9 版本时，Java 的设计者们就对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Deprecated"},{"Type":"NodeText","Data":" 注解进行了一次升级，增加了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"since"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"forRemoval"},{"Type":"NodeText","Data":" 等 2 个新元素。其中，since 元素用于指定标记了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Deprecated"},{"Type":"NodeText","Data":" 注解的 API 被弃用时的版本，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"forRemoval"},{"Type":"NodeText","Data":" 则进一步明确了 API 标记 @Deprecated 注解时的语义，如果"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"forRemoval=true"},{"Type":"NodeText","Data":"时，则表示该 API 在未来版本中肯定会被删除，开发人员应该使用新的 API 进行替代，不再容易产生歧义（Java9 之前，标记 @Deprecated 注解的 API，语义上存在多种可能性，比如：存在使用风险、可能在未来存在兼容性错误、可能在未来版本中被删除，以及应该使用更好的替代方案等）。"}]},{"ID":"20240201213725-a170nek","Type":"NodeParagraph","Properties":{"id":"20240201213725-a170nek","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"仔细观察原始类型的包装类（比如："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.Integer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.Double"},{"Type":"NodeText","Data":"），不难发现，其构造函数上都已经标记有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Deprecated(since=\u0026quot;9\u0026quot;, forRemoval = true)"},{"Type":"NodeText","Data":"注解，这就意味着其构造函数在将来会被删除，不应该在程序中继续使用诸如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new Integer();"},{"Type":"NodeText","Data":"这样的编码方式（建议使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer a = 10;"},{"Type":"NodeText","Data":"或者"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.valueOf()"},{"Type":"NodeText","Data":"函数），如果继续使用，编译期将会产生'Integer(int)' is deprecated and marked for removal 告警。并且，值得注意的是，这些包装类型已经被指定为同 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.Optional"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.time.LocalDateTime"},{"Type":"NodeText","Data":" 一样的值类型。"}]},{"ID":"20240201213726-0s8z9h6","Type":"NodeParagraph","Properties":{"id":"20240201213726-0s8z9h6","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"其次，如果继续在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 同步块中使用值类型，将会在编译期和运行期产生警告，甚至是异常。在此大家需要注意，就算编译期和运行期没有产生警告和异常，也不建议在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 同步块中使用值类型，举个自增的例子。示例 1-5："}]},{"ID":"20240201213727-eklk8ac","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213727-eklk8ac","updated":"20240201213727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public void inc(Integer count) {\n    for (int i = 0; i \u003c 10; i++) {\n        new Thread(() -\u003e {\n            synchronized (count) {\n                count++;\n            }\n        }).start();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213728-cyw2om5","Type":"NodeParagraph","Properties":{"id":"20240201213728-cyw2om5","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"当执行上述程序示例时，最终的输出结果一定会与你的期望产生差异，这是许多新人经常犯错的一个点，因为在并发环境下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer"},{"Type":"NodeText","Data":" 对象根本无法通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 来保证线程安全，这是因为每次的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count++"},{"Type":"NodeText","Data":"操作，所产生的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hashcode"},{"Type":"NodeText","Data":" 均不同，简而言之，每次加锁都锁在了不同的对象上。因此，如果希望在实际的开发过程中保证其原子性，应该使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213729-rh3u4dm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213729-rh3u4dm","updated":"20240201213729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 392:打包工具"}]},{"ID":"20240201213730-s8a2yij","Type":"NodeParagraph","Properties":{"id":"20240201213730-s8a2yij","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"在 Java 14 中，JEP 343 引入了打包工具，命令是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"jpackage"},{"Type":"NodeText","Data":"。在 Java 15 中，继续孵化，现在在 Java 16 中，终于成为了正式功能。"}]},{"ID":"20240201213731-pnhwhv6","Type":"NodeParagraph","Properties":{"id":"20240201213731-pnhwhv6","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"这个打包工具允许打包自包含的 Java 应用程序。它支持原生打包格式，为最终用户提供自然的安装体验，这些格式包括 Windows 上的 msi 和 exe、macOS 上的 pkg 和 dmg，还有 Linux 上的 deb 和 rpm。它还允许在打包时指定启动时参数，并且可以从命令行直接调用，也可以通过 ToolProvider API 以编程方式调用。注意 jpackage 模块名称从 jdk.incubator.jpackage 更改为 jdk.jpackage。这将改善最终用户在安装应用程序时的体验，并简化了“应用商店”模型的部署。"}]},{"ID":"20240201213732-gq4p9vh","Type":"NodeParagraph","Properties":{"id":"20240201213732-gq4p9vh","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"关于这个打包工具的实际使用，可以看这个视频 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.youtube.com/watch?v=KahYIVzRIkQ","TextMarkTextContent":"Playing with Java 16 jpackage"},{"Type":"NodeText","Data":"（需要梯子）。"}]},{"ID":"20240201213733-u50p38u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213733-u50p38u","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 393:外部内存访问 API(第三次孵化)"}]},{"ID":"20240201213734-29ezkgs","Type":"NodeParagraph","Properties":{"id":"20240201213734-29ezkgs","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"引入外部内存访问 API 以允许 Java 程序安全有效地访问 Java 堆之外的外部内存。"}]},{"ID":"20240201213735-uzlxnzj","Type":"NodeParagraph","Properties":{"id":"20240201213735-uzlxnzj","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"Java 14("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/370","TextMarkTextContent":"JEP 370"},{"Type":"NodeText","Data":") 的时候，第一次孵化外部内存访问 API，Java 15 中进行了第二次复活（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/383","TextMarkTextContent":"JEP 383"},{"Type":"NodeText","Data":"），在 Java 16 中进行了第三次孵化。"}]},{"ID":"20240201213736-mttd0xz","Type":"NodeParagraph","Properties":{"id":"20240201213736-mttd0xz","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"引入外部内存访问 API 的目的如下："}]},{"ID":"20240201213737-sb6hlwo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-sb6hlwo","updated":"20240201213737"},"Children":[{"ID":"20240201213738-tnyccf0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-tnyccf0","updated":"20240201213738"},"Children":[{"ID":"20240201213739-kt9f8x7","Type":"NodeParagraph","Properties":{"id":"20240201213739-kt9f8x7","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"通用：单个 API 应该能够对各种外部内存（如本机内存、持久内存、堆内存等）进行操作。"}]}]},{"ID":"20240201213740-jfii98b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-jfii98b","updated":"20240201213740"},"Children":[{"ID":"20240201213741-1dxshhg","Type":"NodeParagraph","Properties":{"id":"20240201213741-1dxshhg","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"安全：无论操作何种内存，API 都不应该破坏 JVM 的安全性。"}]}]},{"ID":"20240201213742-cs66tcq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-cs66tcq","updated":"20240201213742"},"Children":[{"ID":"20240201213743-rzkph37","Type":"NodeParagraph","Properties":{"id":"20240201213743-rzkph37","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"控制：可以自由的选择如何释放内存（显式、隐式等）。"}]}]},{"ID":"20240201213744-f56g3pe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-f56g3pe","updated":"20240201213744"},"Children":[{"ID":"20240201213745-cx3ksu4","Type":"NodeParagraph","Properties":{"id":"20240201213745-cx3ksu4","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"可用：如果需要访问外部内存，API 应该是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sun.misc.Unsafe"},{"Type":"NodeText","Data":"."}]}]}]},{"ID":"20240201213746-xh85kvm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213746-xh85kvm","updated":"20240201213746"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 394:instanceof 模式匹配(转正)"}]},{"ID":"20240201213747-h88knb0","Type":"NodeTable","Data":"| JDK 版本   | 更新类型          | JEP                                     | 更新内容                                 |\n| ---------- | ----------------- | --------------------------------------- | ---------------------------------------- |\n| Java SE 14 | preview           | [JEP 305](https://openjdk.org/jeps/305) | 首次引入 instanceof 模式匹配。           |\n| Java SE 15 | Second Preview    | [JEP 375](https://openjdk.org/jeps/375) | 相比较上个版本无变化，继续收集更多反馈。 |\n| Java SE 16 | Permanent Release | [JEP 394](https://openjdk.org/jeps/394) | 模式变量不再隐式为 final。               |","TableAligns":[0,0,0,0],"Properties":{"id":"20240201213747-h88knb0","updated":"20240201213747"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JDK 版本"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"更新类型"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JEP"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"更新内容"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java SE 14"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"preview"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/305","TextMarkTextContent":"JEP 305"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"首次引入 instanceof 模式匹配。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java SE 15"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Second Preview"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/375","TextMarkTextContent":"JEP 375"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"相比较上个版本无变化，继续收集更多反馈。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java SE 16"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Permanent Release"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/394","TextMarkTextContent":"JEP 394"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"模式变量不再隐式为 final。"}]}]}]},{"ID":"20240201213748-f084d25","Type":"NodeParagraph","Properties":{"id":"20240201213748-f084d25","updated":"20240201213748"},"Children":[{"Type":"NodeText","Data":"从 Java 16 开始，你可以对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"instanceof"},{"Type":"NodeText","Data":" 中的变量值进行修改。"}]},{"ID":"20240201213749-28cvi3p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213749-28cvi3p","updated":"20240201213749"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Old code\nif (o instanceof String) {\n    String s = (String)o;\n    ... use s ...\n}\n\n// New code\nif (o instanceof String s) {\n    ... use s ...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213750-brlt76b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213750-brlt76b","updated":"20240201213750"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 395:记录类型(转正)"}]},{"ID":"20240201213751-5nyj466","Type":"NodeParagraph","Properties":{"id":"20240201213751-5nyj466","updated":"20240201213751"},"Children":[{"Type":"NodeText","Data":"记录类型变更历史："}]},{"ID":"20240201213752-5mlm7oj","Type":"NodeTable","Data":"| JDK 版本   | 更新类型          | JEP                                          | 更新内容                                                                  |\n| ---------- | ----------------- | -------------------------------------------- | ------------------------------------------------------------------------- |\n| Java SE 14 | Preview           | [JEP 359](https://openjdk.java.net/jeps/359) | 引入 `record` 关键字，`record` 提供一种紧凑的语法来定义类中的不可变数据。 |\n| Java SE 15 | Second Preview    | [JEP 384](https://openjdk.org/jeps/384)      | 支持在局部方法和接口中使用 `record`。                                     |\n| Java SE 16 | Permanent Release | [JEP 395](https://openjdk.org/jeps/395)      | 非静态内部类可以定义非常量的静态成员。                                    |","TableAligns":[0,0,0,0],"Properties":{"id":"20240201213752-5mlm7oj","updated":"20240201213752"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JDK 版本"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"更新类型"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JEP"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"更新内容"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java SE 14"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Preview"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/359","TextMarkTextContent":"JEP 359"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"引入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"record"},{"Type":"NodeText","Data":" 关键字，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"record"},{"Type":"NodeText","Data":" 提供一种紧凑的语法来定义类中的不可变数据。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java SE 15"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Second Preview"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/384","TextMarkTextContent":"JEP 384"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"支持在局部方法和接口中使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"record"},{"Type":"NodeText","Data":"。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java SE 16"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Permanent Release"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.org/jeps/395","TextMarkTextContent":"JEP 395"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"非静态内部类可以定义非常量的静态成员。"}]}]}]},{"ID":"20240201213753-5wff91e","Type":"NodeParagraph","Properties":{"id":"20240201213753-5wff91e","updated":"20240201213753"},"Children":[{"Type":"NodeText","Data":"从 Java SE 16 开始，非静态内部类可以定义非常量的静态成员。"}]},{"ID":"20240201213754-spdxxrt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213754-spdxxrt","updated":"20240201213754"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Outer {\n  class Inner {\n    static int age;\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213755-w380tar","Type":"NodeBlockquote","Properties":{"id":"20240201213755-w380tar","updated":"20240201213755"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213756-suacyou","Type":"NodeParagraph","Properties":{"id":"20240201213756-suacyou","updated":"20240201213756"},"Children":[{"Type":"NodeText","Data":"在 JDK 16 之前，如果写上面这种代码，IDE 会提示你静态字段 age 不能在非静态的内部类中定义，除非它用一个常量表达式初始化。（The field age cannot be declared static in a non-static inner type, unless initialized with a constant expression）"}]}]},{"ID":"20240201213757-0jsffck","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213757-0jsffck","updated":"20240201213757"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 396:默认强封装 JDK 内部元素"}]},{"ID":"20240201213758-qwl3r97","Type":"NodeParagraph","Properties":{"id":"20240201213758-qwl3r97","updated":"20240201213758"},"Children":[{"Type":"NodeText","Data":"此特性会默认强封装 JDK 的所有内部元素，但关键内部 API（例如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sun.misc.Unsafe"},{"Type":"NodeText","Data":"）除外。默认情况下，使用早期版本成功编译的访问 JDK 内部 API 的代码可能不再起作用。鼓励开发人员从使用内部元素迁移到使用标准 API 的方法上，以便他们及其用户都可以无缝升级到将来的 Java 版本。强封装由 JDK 9 的启动器选项–illegal-access 控制，到 JDK 15 默认改为 warning，从 JDK 16 开始默认为 deny。（目前）仍然可以使用单个命令行选项放宽对所有软件包的封装，将来只有使用–add-opens 打开特定的软件包才行。"}]},{"ID":"20240201213759-npo8df0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213759-npo8df0","updated":"20240201213759"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JEP 397:密封类(预览)"}]},{"ID":"20240201213760-f7xe41b","Type":"NodeParagraph","Properties":{"id":"20240201213760-f7xe41b","updated":"20240201213760"},"Children":[{"Type":"NodeText","Data":"密封类由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/360","TextMarkTextContent":"JEP 360"},{"Type":"NodeText","Data":" 提出预览，集成到了 Java 15 中。在 JDK 16 中， 密封类得到了改进（更加严格的引用检查和密封类的继承关系），由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://openjdk.java.net/jeps/397","TextMarkTextContent":"JEP 397"},{"Type":"NodeText","Data":" 提出了再次预览。"}]},{"ID":"20240201213761-ske33ai","Type":"NodeParagraph","Properties":{"id":"20240201213761-ske33ai","updated":"20240201213761"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java14-15.md","TextMarkTextContent":"Java 14 \u0026amp; 15 新特性概览"},{"Type":"NodeText","Data":" 中，我有详细介绍到密封类，这里就不再做额外的介绍了。"}]},{"ID":"20240201213762-91j1s3o","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213762-91j1s3o","updated":"20240201213762"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"其他优化与改进"}]},{"ID":"20240201213763-natob9l","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213763-natob9l","updated":"20240201213763"},"Children":[{"ID":"20240201213764-gjtdh4r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213764-gjtdh4r","updated":"20240201213764"},"Children":[{"ID":"20240201213765-xyyrn6c","Type":"NodeParagraph","Properties":{"id":"20240201213765-xyyrn6c","updated":"20240201213765"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JEP 380:Unix-Domain 套接字通道"},{"Type":"NodeText","Data":"：Unix-domain 套接字一直是大多数 Unix 平台的一个特性，现在在 Windows 10 和 Windows Server 2019 也提供了支持。此特性为 java.nio.channels 包的套接字通道和服务器套接字通道 API 添加了 Unix-domain（AF_UNIX）套接字支持。它扩展了继承的通道机制以支持 Unix-domain 套接字通道和服务器套接字通道。Unix-domain 套接字用于同一主机上的进程间通信（IPC）。它们在很大程度上类似于 TCP/IP，区别在于套接字是通过文件系统路径名而不是 Internet 协议（IP）地址和端口号寻址的。对于本地进程间通信，Unix-domain 套接字比 TCP/IP 环回连接更安全、更有效"}]}]},{"ID":"20240201213766-vyg0scn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213766-vyg0scn","updated":"20240201213766"},"Children":[{"ID":"20240201213767-e1pm8d9","Type":"NodeParagraph","Properties":{"id":"20240201213767-e1pm8d9","updated":"20240201213767"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JEP 389:外部链接器 API(孵化)："},{"Type":"NodeText","Data":" 该孵化器 API 提供了静态类型、纯 Java 访问原生代码的特性，该 API 将大大简化绑定原生库的原本复杂且容易出错的过程。Java 1.1 就已通过 Java 原生接口（JNI）支持了原生方法调用，但并不好用。Java 开发人员应该能够为特定任务绑定特定的原生库。它还提供了外来函数支持，而无需任何中间的 JNI 粘合代码。"}]}]},{"ID":"20240201213768-r2am8qp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213768-r2am8qp","updated":"20240201213768"},"Children":[{"ID":"20240201213769-6xn4uac","Type":"NodeParagraph","Properties":{"id":"20240201213769-6xn4uac","updated":"20240201213769"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JEP 357:从 Mercurial 迁移到 Git"},{"Type":"NodeText","Data":"：在此之前，OpenJDK 源代码是使用版本管理工具 Mercurial 进行管理，现在迁移到了 Git。"}]}]},{"ID":"20240201213770-kphjl12","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213770-kphjl12","updated":"20240201213770"},"Children":[{"ID":"20240201213771-j0i4gdh","Type":"NodeParagraph","Properties":{"id":"20240201213771-j0i4gdh","updated":"20240201213771"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JEP 369:迁移到 GitHub"},{"Type":"NodeText","Data":"：和 JEP 357 从 Mercurial 迁移到 Git 的改变一致，在把版本管理迁移到 Git 之后，选择了在 GitHub 上托管 OpenJDK 社区的 Git 仓库。不过只对 JDK 11 以及更高版本 JDK 进行了迁移。"}]}]},{"ID":"20240201213772-hc7ae2c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213772-hc7ae2c","updated":"20240201213772"},"Children":[{"ID":"20240201213773-b1wwqh2","Type":"NodeParagraph","Properties":{"id":"20240201213773-b1wwqh2","updated":"20240201213773"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JEP 386:移植 Alpine Linux"},{"Type":"NodeText","Data":"：Alpine Linux 是一个独立的、非商业的 Linux 发行版，它十分的小，一个容器需要不超过 8MB 的空间，最小安装到磁盘只需要大约 130MB 存储空间，并且十分的简单，同时兼顾了安全性。此提案将 JDK 移植到了 Apline Linux，由于 Apline Linux 是基于 musl lib 的轻量级 Linux 发行版，因此其他 x64 和 AArch64 架构上使用 musl lib 的 Linux 发行版也适用。"}]}]},{"ID":"20240201213774-9crsqan","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213774-9crsqan","updated":"20240201213774"},"Children":[{"ID":"20240201213775-m58ycer","Type":"NodeParagraph","Properties":{"id":"20240201213775-m58ycer","updated":"20240201213775"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JEP 388:Windows/AArch64 移植"},{"Type":"NodeText","Data":"：这些 JEP 的重点不是移植工作本身，而是将它们集成到 JDK 主线存储库中；JEP 386 将 JDK 移植到 Alpine Linux 和其他使用 musl 作为 x64 上主要 C 库的发行版上。此外，JEP 388 将 JDK 移植到 Windows AArch64（ARM64）。"}]}]}]},{"ID":"20240201213776-u06nzni","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213776-u06nzni","updated":"20240201213776"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考文献"}]},{"ID":"20240201213777-8rsku74","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213777-8rsku74","updated":"20240201213777"},"Children":[{"ID":"20240201213778-aaulxqu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213778-aaulxqu","updated":"20240201213778"},"Children":[{"ID":"20240201213779-tbd1876","Type":"NodeParagraph","Properties":{"id":"20240201213779-tbd1876","updated":"20240201213779"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/en/java/javase/16/language/java-language-changes.html","TextMarkTextContent":"Java Language Changes"}]}]},{"ID":"20240201213780-v5v76m0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213780-v5v76m0","updated":"20240201213780"},"Children":[{"ID":"20240201213781-18zyy15","Type":"NodeParagraph","Properties":{"id":"20240201213781-18zyy15","updated":"20240201213781"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.oracle.com/java/technologies/javase/16all-relnotes.html","TextMarkTextContent":"Consolidated JDK 16 Release Notes"}]}]},{"ID":"20240201213782-frk7qsp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213782-frk7qsp","updated":"20240201213782"},"Children":[{"ID":"20240201213783-s0scn5j","Type":"NodeParagraph","Properties":{"id":"20240201213783-s0scn5j","updated":"20240201213783"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.infoq.cn/article/IAkwhx7i9V7G8zLVEd4L","TextMarkTextContent":"Java 16 正式发布，新特性一一解析"}]}]},{"ID":"20240201213784-xxazglc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213784-xxazglc","updated":"20240201213784"},"Children":[{"ID":"20240201213785-si3yvan","Type":"NodeParagraph","Properties":{"id":"20240201213785-si3yvan","updated":"20240201213785"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://xie.infoq.cn/article/8304c894c4e38318d38ceb116","TextMarkTextContent":"实操 | 剖析 Java16 新语法特性"},{"Type":"NodeText","Data":"（写的很赞）"}]}]}]},{"ID":"20240201213786-r7mbys0","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213786-r7mbys0","updated":"20240201213786"}}]}