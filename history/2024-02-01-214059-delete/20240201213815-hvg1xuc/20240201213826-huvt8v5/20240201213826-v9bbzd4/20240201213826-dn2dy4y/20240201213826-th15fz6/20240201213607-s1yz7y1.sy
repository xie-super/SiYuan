{"ID":"20240201213607-s1yz7y1","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213607-s1yz7y1","title":"java-keyword-summary","updated":"20240201213607"},"Children":[{"ID":"20240201213608-4irik5w","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240201213608-4irik5w","updated":"20240201213608"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"final,static,this,super 关键字总结"}]},{"ID":"20240201213609-2uf3rfq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213609-2uf3rfq","updated":"20240201213609"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"final 关键字"}]},{"ID":"20240201213610-w4p786f","Type":"NodeParagraph","Properties":{"id":"20240201213610-w4p786f","updated":"20240201213610"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"final 关键字，意思是最终的、不可修改的，最见不得变化 ，用来修饰类、方法和变量，具有以下特点："}]},{"ID":"20240201213611-rzahuds","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213611-rzahuds","updated":"20240201213611"},"Children":[{"ID":"20240201213612-m4sc1bf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213612-m4sc1bf","updated":"20240201213612"},"Children":[{"ID":"20240201213613-apzslpv","Type":"NodeParagraph","Properties":{"id":"20240201213613-apzslpv","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"final 修饰的类不能被继承，final 类中的所有成员方法都会被隐式的指定为 final 方法；"}]}]},{"ID":"20240201213614-7ur7imp","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213614-7ur7imp","updated":"20240201213614"},"Children":[{"ID":"20240201213615-r58u0sl","Type":"NodeParagraph","Properties":{"id":"20240201213615-r58u0sl","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"final 修饰的方法不能被重写；"}]}]},{"ID":"20240201213616-86htbr0","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213616-86htbr0","updated":"20240201213616"},"Children":[{"ID":"20240201213617-dv2j98i","Type":"NodeParagraph","Properties":{"id":"20240201213617-dv2j98i","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"final 修饰的变量是常量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能让其指向另一个对象。"}]}]}]},{"ID":"20240201213618-p4zifi3","Type":"NodeParagraph","Properties":{"id":"20240201213618-p4zifi3","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"说明：使用 final 方法的原因有两个："}]},{"ID":"20240201213619-a2sn8h0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213619-a2sn8h0","updated":"20240201213619"},"Children":[{"ID":"20240201213620-h0jymvi","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213620-h0jymvi","updated":"20240201213620"},"Children":[{"ID":"20240201213621-m607ew4","Type":"NodeParagraph","Properties":{"id":"20240201213621-m607ew4","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"把方法锁定，以防任何继承类修改它的含义；"}]}]},{"ID":"20240201213622-jsl6fcz","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213622-jsl6fcz","updated":"20240201213622"},"Children":[{"ID":"20240201213623-608q7dz","Type":"NodeParagraph","Properties":{"id":"20240201213623-608q7dz","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。"}]}]}]},{"ID":"20240201213624-jvhdfcy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213624-jvhdfcy","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"static 关键字"}]},{"ID":"20240201213625-bwgfwx5","Type":"NodeParagraph","Properties":{"id":"20240201213625-bwgfwx5","updated":"20240201213625"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"static 关键字主要有以下四种使用场景："}]},{"ID":"20240201213626-fa2oue0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213626-fa2oue0","updated":"20240201213626"},"Children":[{"ID":"20240201213627-jnt2xow","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213627-jnt2xow","updated":"20240201213627"},"Children":[{"ID":"20240201213628-j34dhko","Type":"NodeParagraph","Properties":{"id":"20240201213628-j34dhko","updated":"20240201213628"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"修饰成员变量和成员方法:"},{"Type":"NodeText","Data":" 被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被 static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。调用格式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"类名.静态变量名"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"类名.静态方法名()"}]}]},{"ID":"20240201213629-2ljk0oj","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213629-2ljk0oj","updated":"20240201213629"},"Children":[{"ID":"20240201213630-27w5anz","Type":"NodeParagraph","Properties":{"id":"20240201213630-27w5anz","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"静态代码块:"},{"Type":"NodeText","Data":" 静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—\u003e非静态代码块—\u003e构造方法)。 该类不管创建多少对象，静态代码块只执行一次."}]}]},{"ID":"20240201213631-to0usfz","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213631-to0usfz","updated":"20240201213631"},"Children":[{"ID":"20240201213632-xjvex1h","Type":"NodeParagraph","Properties":{"id":"20240201213632-xjvex1h","updated":"20240201213632"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"静态内部类（static 修饰类的话只能修饰内部类）："},{"Type":"NodeText","Data":" 静态内部类与非静态内部类之间存在一个最大的区别: 非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着：1. 它的创建是不需要依赖外围类的创建。2. 它不能使用任何外围类的非 static 成员变量和方法。"}]}]},{"ID":"20240201213633-8pbe1j4","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213633-8pbe1j4","updated":"20240201213633"},"Children":[{"ID":"20240201213634-lz3pwbl","Type":"NodeParagraph","Properties":{"id":"20240201213634-lz3pwbl","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"静态导包(用来导入类中的静态资源，1.5 之后的新特性):"},{"Type":"NodeText","Data":" 格式为："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"import static"},{"Type":"NodeText","Data":" 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。"}]}]}]},{"ID":"20240201213635-tceyuga","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213635-tceyuga","updated":"20240201213635"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"this 关键字"}]},{"ID":"20240201213636-9v62xi4","Type":"NodeParagraph","Properties":{"id":"20240201213636-9v62xi4","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"this 关键字用于引用类的当前实例。 例如："}]},{"ID":"20240201213637-muz3c92","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213637-muz3c92","updated":"20240201213637"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Manager {\n    Employees[] employees;\n    void manageEmployees() {\n        int totalEmp = this.employees.length;\n        System.out.println(\"Total employees: \" + totalEmp);\n        this.report();\n    }\n    void report() { }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213638-656jdh0","Type":"NodeParagraph","Properties":{"id":"20240201213638-656jdh0","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"在上面的示例中，this 关键字用于两个地方："}]},{"ID":"20240201213639-a9geqhj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-a9geqhj","updated":"20240201213639"},"Children":[{"ID":"20240201213640-oh6k02q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-oh6k02q","updated":"20240201213640"},"Children":[{"ID":"20240201213641-gt0srjq","Type":"NodeParagraph","Properties":{"id":"20240201213641-gt0srjq","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"this.employees.length：访问类 Manager 的当前实例的变量。"}]}]},{"ID":"20240201213642-p28cp9a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-p28cp9a","updated":"20240201213642"},"Children":[{"ID":"20240201213643-ui6t80p","Type":"NodeParagraph","Properties":{"id":"20240201213643-ui6t80p","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"this.report（）：调用类 Manager 的当前实例的方法。"}]}]}]},{"ID":"20240201213644-8qhuslf","Type":"NodeParagraph","Properties":{"id":"20240201213644-8qhuslf","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"此关键字是可选的，这意味着如果上面的示例在不使用此关键字的情况下表现相同。 但是，使用此关键字可能会使代码更易读或易懂。"}]},{"ID":"20240201213645-crwk86x","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213645-crwk86x","updated":"20240201213645"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"super 关键字"}]},{"ID":"20240201213646-d3pwpzd","Type":"NodeParagraph","Properties":{"id":"20240201213646-d3pwpzd","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"super 关键字用于从子类访问父类的变量和方法。 例如："}]},{"ID":"20240201213647-1azle3d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213647-1azle3d","updated":"20240201213647"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Super {\n    protected int number;\n    protected showNumber() {\n        System.out.println(\"number = \" + number);\n    }\n}\npublic class Sub extends Super {\n    void bar() {\n        super.number = 10;\n        super.showNumber();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213648-wdgslrn","Type":"NodeParagraph","Properties":{"id":"20240201213648-wdgslrn","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"在上面的例子中，Sub 类访问父类成员变量 number 并调用其父类 Super 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"showNumber（）"},{"Type":"NodeText","Data":" 方法。"}]},{"ID":"20240201213649-zq55gin","Type":"NodeParagraph","Properties":{"id":"20240201213649-zq55gin","updated":"20240201213649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用 this 和 super 要注意的问题："}]},{"ID":"20240201213650-d5r1soz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-d5r1soz","updated":"20240201213650"},"Children":[{"ID":"20240201213651-2v9eo2d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-2v9eo2d","updated":"20240201213651"},"Children":[{"ID":"20240201213652-7qhvogk","Type":"NodeParagraph","Properties":{"id":"20240201213652-7qhvogk","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"在构造器中使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"super()"},{"Type":"NodeText","Data":" 调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this 调用本类中的其他构造方法时，也要放在首行。"}]}]},{"ID":"20240201213653-gbpee9q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-gbpee9q","updated":"20240201213653"},"Children":[{"ID":"20240201213654-r6r8lwm","Type":"NodeParagraph","Properties":{"id":"20240201213654-r6r8lwm","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"this、super 不能用在 static 方法中。"}]}]}]},{"ID":"20240201213655-jg21on5","Type":"NodeParagraph","Properties":{"id":"20240201213655-jg21on5","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"简单解释一下："}]},{"ID":"20240201213656-1x16bej","Type":"NodeParagraph","Properties":{"id":"20240201213656-1x16bej","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享。而 this 代表对本类对象的引用，指向本类对象；而 super 代表对父类对象的引用，指向父类对象；所以， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"this 和 super 是属于对象范畴的东西，而静态方法是属于类范畴的东西"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213657-fnmopx4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213657-fnmopx4","updated":"20240201213657"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213658-ad5c1mf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-ad5c1mf","updated":"20240201213658"},"Children":[{"ID":"20240201213659-3swp7u0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-3swp7u0","updated":"20240201213659"},"Children":[{"ID":"20240201213660-j6i3ytk","Type":"NodeParagraph","Properties":{"id":"20240201213660-j6i3ytk","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.codejava.net/java-core/the-java-language/java-keywords","TextMarkTextContent":"https://www.codejava.net/java-core/the-java-language/java-keywords"}]}]},{"ID":"20240201213661-7frubz0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-7frubz0","updated":"20240201213661"},"Children":[{"ID":"20240201213662-kiy6l2e","Type":"NodeParagraph","Properties":{"id":"20240201213662-kiy6l2e","updated":"20240201213662"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/u013393958/article/details/79881037","TextMarkTextContent":"https://blog.csdn.net/u013393958/article/details/79881037"}]}]}]},{"ID":"20240201213663-hfqfs6s","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240201213663-hfqfs6s","updated":"20240201213663"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"static 关键字详解"}]},{"ID":"20240201213664-loxb02m","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213664-loxb02m","updated":"20240201213664"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"static 关键字主要有以下四种使用场景"}]},{"ID":"20240201213665-gwyehsj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213665-gwyehsj","updated":"20240201213665"},"Children":[{"ID":"20240201213666-t4wpb82","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213666-t4wpb82","updated":"20240201213666"},"Children":[{"ID":"20240201213667-7gjpx5r","Type":"NodeParagraph","Properties":{"id":"20240201213667-7gjpx5r","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"修饰成员变量和成员方法"}]}]},{"ID":"20240201213668-6205vf1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213668-6205vf1","updated":"20240201213668"},"Children":[{"ID":"20240201213669-afgwda9","Type":"NodeParagraph","Properties":{"id":"20240201213669-afgwda9","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"静态代码块"}]}]},{"ID":"20240201213670-y0ic5fy","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213670-y0ic5fy","updated":"20240201213670"},"Children":[{"ID":"20240201213671-t726wcz","Type":"NodeParagraph","Properties":{"id":"20240201213671-t726wcz","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"修饰类(只能修饰内部类)"}]}]},{"ID":"20240201213672-bx2i6mu","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213672-bx2i6mu","updated":"20240201213672"},"Children":[{"ID":"20240201213673-25qa0p0","Type":"NodeParagraph","Properties":{"id":"20240201213673-25qa0p0","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"静态导包(用来导入类中的静态资源，1.5 之后的新特性)"}]}]}]},{"ID":"20240201213674-6wu1dki","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213674-6wu1dki","updated":"20240201213674"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"修饰成员变量和成员方法(常用)"}]},{"ID":"20240201213675-391scbd","Type":"NodeParagraph","Properties":{"id":"20240201213675-391scbd","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被 static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。"}]},{"ID":"20240201213676-z5m3z4i","Type":"NodeParagraph","Properties":{"id":"20240201213676-z5m3z4i","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。"}]},{"ID":"20240201213677-dyrxf5k","Type":"NodeParagraph","Properties":{"id":"20240201213677-dyrxf5k","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"HotSpot 虚拟机中方法区也常被称为 “永久代”，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。"}]},{"ID":"20240201213678-cosl1t1","Type":"NodeParagraph","Properties":{"id":"20240201213678-cosl1t1","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"调用格式："}]},{"ID":"20240201213679-j1v7qm5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-j1v7qm5","updated":"20240201213679"},"Children":[{"ID":"20240201213680-z58e1am","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213680-z58e1am","updated":"20240201213680"},"Children":[{"ID":"20240201213681-4co62yy","Type":"NodeParagraph","Properties":{"id":"20240201213681-4co62yy","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"类名.静态变量名"}]}]},{"ID":"20240201213682-x4u9bxi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213682-x4u9bxi","updated":"20240201213682"},"Children":[{"ID":"20240201213683-r4mds3r","Type":"NodeParagraph","Properties":{"id":"20240201213683-r4mds3r","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"类名.静态方法名()"}]}]}]},{"ID":"20240201213684-hmq1lwe","Type":"NodeParagraph","Properties":{"id":"20240201213684-hmq1lwe","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"如果变量或者方法被 private 则代表该属性或者该方法只能在类的内部被访问而不能在类的外部被访问。"}]},{"ID":"20240201213685-os5l7kz","Type":"NodeParagraph","Properties":{"id":"20240201213685-os5l7kz","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"测试方法："}]},{"ID":"20240201213686-gfdkfiz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213686-gfdkfiz","updated":"20240201213686"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class StaticBean {\n    String name;\n    //静态变量\n    static int age;\n    public StaticBean(String name) {\n        this.name = name;\n    }\n    //静态方法\n    static void sayHello() {\n        System.out.println(\"Hello i am java\");\n    }\n    @Override\n    public String toString() {\n        return \"StaticBean{\"+\n                \"name=\" + name + \",age=\" + age +\n                \"}\";\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213687-hkyrzuv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213687-hkyrzuv","updated":"20240201213687"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class StaticDemo {\n    public static void main(String[] args) {\n        StaticBean staticBean = new StaticBean(\"1\");\n        StaticBean staticBean2 = new StaticBean(\"2\");\n        StaticBean staticBean3 = new StaticBean(\"3\");\n        StaticBean staticBean4 = new StaticBean(\"4\");\n        StaticBean.age = 33;\n        System.out.println(staticBean + \" \" + staticBean2 + \" \" + staticBean3 + \" \" + staticBean4);\n        //StaticBean{name=1,age=33} StaticBean{name=2,age=33} StaticBean{name=3,age=33} StaticBean{name=4,age=33}\n        StaticBean.sayHello();//Hello i am java\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213688-nxpvtqe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213688-nxpvtqe","updated":"20240201213688"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"静态代码块"}]},{"ID":"20240201213689-q1080n6","Type":"NodeParagraph","Properties":{"id":"20240201213689-q1080n6","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块 —\u003e 非静态代码块 —\u003e 构造方法)。 该类不管创建多少对象，静态代码块只执行一次."}]},{"ID":"20240201213690-r4i3od8","Type":"NodeParagraph","Properties":{"id":"20240201213690-r4i3od8","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"静态代码块的格式是"}]},{"ID":"20240201213691-7m5c5r2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213691-7m5c5r2","updated":"20240201213691"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static {\n语句体;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213692-jiccokr","Type":"NodeParagraph","Properties":{"id":"20240201213692-jiccokr","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"一个类中的静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，JVM 加载类时会执行这些静态的代码块，如果静态代码块有多个，JVM 将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。"}]},{"ID":"20240201213693-8wk1vvu","Type":"NodeParagraph","Properties":{"id":"20240201213693-8wk1vvu","updated":"20240201213693"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/88531075.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213694-76gqvyd","Type":"NodeParagraph","Properties":{"id":"20240201213694-76gqvyd","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问."}]},{"ID":"20240201213695-imb1d6k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213695-imb1d6k","updated":"20240201213695"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"静态内部类"}]},{"ID":"20240201213696-lx4tlje","Type":"NodeParagraph","Properties":{"id":"20240201213696-lx4tlje","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着："}]},{"ID":"20240201213697-6rjo635","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213697-6rjo635","updated":"20240201213697"},"Children":[{"ID":"20240201213698-jgxt5mu","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213698-jgxt5mu","updated":"20240201213698"},"Children":[{"ID":"20240201213699-2o95kuz","Type":"NodeParagraph","Properties":{"id":"20240201213699-2o95kuz","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"它的创建是不需要依赖外围类的创建。"}]}]},{"ID":"20240201213700-dxjacxl","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213700-dxjacxl","updated":"20240201213700"},"Children":[{"ID":"20240201213701-igny1ka","Type":"NodeParagraph","Properties":{"id":"20240201213701-igny1ka","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"它不能使用任何外围类的非 static 成员变量和方法。"}]}]}]},{"ID":"20240201213702-ggwykk4","Type":"NodeParagraph","Properties":{"id":"20240201213702-ggwykk4","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"Example（静态内部类实现单例模式）"}]},{"ID":"20240201213703-t8ytr57","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213703-t8ytr57","updated":"20240201213703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Singleton {\n    //声明为 private 避免调用默认构造方法创建对象\n    private Singleton() {\n    }\n   // 声明为 private 表明静态内部该类只能在该 Singleton 类中被访问\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    public static Singleton getUniqueInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213704-9lydq8t","Type":"NodeParagraph","Properties":{"id":"20240201213704-9lydq8t","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getUniqueInstance()"},{"Type":"NodeText","Data":"方法从而触发 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SingletonHolder.INSTANCE"},{"Type":"NodeText","Data":" 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。"}]},{"ID":"20240201213705-jtiy5ob","Type":"NodeParagraph","Properties":{"id":"20240201213705-jtiy5ob","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。"}]},{"ID":"20240201213706-5uyd4ti","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213706-5uyd4ti","updated":"20240201213706"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"静态导包"}]},{"ID":"20240201213707-frs6k7e","Type":"NodeParagraph","Properties":{"id":"20240201213707-frs6k7e","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"格式为：import static"}]},{"ID":"20240201213708-hckinkr","Type":"NodeParagraph","Properties":{"id":"20240201213708-hckinkr","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法"}]},{"ID":"20240201213709-pc4ubs5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213709-pc4ubs5","updated":"20240201213709"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" //将Math中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用\n //如果只想导入单一某个静态方法，只需要将*换成对应的方法名即可\nimport static java.lang.Math.*;//换成import static java.lang.Math.max;具有一样的效果\npublic class Demo {\n  public static void main(String[] args) {\n    int max = max(1,2);\n    System.out.println(max);\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213710-73ga12k","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213710-73ga12k","updated":"20240201213710"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"补充内容"}]},{"ID":"20240201213711-j1nlanh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213711-j1nlanh","updated":"20240201213711"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"静态方法与非静态方法"}]},{"ID":"20240201213712-8qcdvb1","Type":"NodeParagraph","Properties":{"id":"20240201213712-8qcdvb1","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"静态方法属于类本身，非静态方法属于从该类生成的每个对象。 如果您的方法执行的操作不依赖于其类的各个变量和方法，请将其设置为静态（这将使程序的占用空间更小）。 否则，它应该是非静态的。"}]},{"ID":"20240201213713-erul3uv","Type":"NodeParagraph","Properties":{"id":"20240201213713-erul3uv","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20240201213714-n1one06","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213714-n1one06","updated":"20240201213714"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Foo {\n    int i;\n    public Foo(int i) {\n       this.i = i;\n    }\n    public static String method1() {\n       return \"An example string that doesn't depend on i (an instance variable)\";\n    }\n    public int method2() {\n       return this.i + 1;  //Depends on i\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213715-9otutwa","Type":"NodeParagraph","Properties":{"id":"20240201213715-9otutwa","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"你可以像这样调用静态方法："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Foo.method1()"},{"Type":"NodeText","Data":"。 如果您尝试使用这种方法调用 method2 将失败。 但这样可行"}]},{"ID":"20240201213716-38hc5xi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213716-38hc5xi","updated":"20240201213716"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Foo bar = new Foo(1);\nbar.method2();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213717-yk9yrtg","Type":"NodeParagraph","Properties":{"id":"20240201213717-yk9yrtg","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"总结："}]},{"ID":"20240201213718-pltsf9e","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-pltsf9e","updated":"20240201213718"},"Children":[{"ID":"20240201213719-kabmp82","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213719-kabmp82","updated":"20240201213719"},"Children":[{"ID":"20240201213720-5xwfdq4","Type":"NodeParagraph","Properties":{"id":"20240201213720-5xwfdq4","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。"}]}]},{"ID":"20240201213721-rkwa2hk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213721-rkwa2hk","updated":"20240201213721"},"Children":[{"ID":"20240201213722-v9mz92t","Type":"NodeParagraph","Properties":{"id":"20240201213722-v9mz92t","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制"}]}]}]},{"ID":"20240201213723-tutqwoy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213723-tutqwoy","updated":"20240201213723"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static{}"},{"Type":"NodeText","Data":"静态代码块与"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"{}"},{"Type":"NodeText","Data":"非静态代码块(构造代码块)"}]},{"ID":"20240201213724-d1n1zxa","Type":"NodeParagraph","Properties":{"id":"20240201213724-d1n1zxa","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"相同点：都是在 JVM 加载类时且在构造方法执行之前执行，在类中都可以定义多个，定义多个时按定义的顺序执行，一般在代码块中对一些 static 变量进行赋值。"}]},{"ID":"20240201213725-t4x8ljz","Type":"NodeParagraph","Properties":{"id":"20240201213725-t4x8ljz","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"不同点：静态代码块在非静态代码块之前执行(静态代码块 -\u003e 非静态代码块 -\u003e 构造方法)。静态代码块只在第一次 new 执行一次，之后不再执行，而非静态代码块在每 new 一次就执行一次。 非静态代码块可在普通方法中定义(不过作用不大)；而静态代码块不行。"}]},{"ID":"20240201213726-oove883","Type":"NodeBlockquote","Properties":{"id":"20240201213726-oove883","updated":"20240201213726"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213727-k8voade","Type":"NodeParagraph","Properties":{"id":"20240201213727-k8voade","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/677","TextMarkTextContent":"issue #677"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"：静态代码块可能在第一次 new 对象的时候执行，但不一定只在第一次 new 的时候执行。比如通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Class.forName(\u0026quot;ClassDemo\u0026quot;)"},{"Type":"NodeText","Data":"创建 Class 对象的时候也会执行，即 new 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Class.forName(\u0026quot;ClassDemo\u0026quot;)"},{"Type":"NodeText","Data":" 都会执行静态代码块。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"一般情况下,如果有些代码比如一些项目最常用的变量或对象必须在项目启动的时候就执行的时候,需要使用静态代码块,这种代码是主动执行的。如果我们想要设计不需要创建对象就可以调用类中的方法，例如："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arrays"},{"Type":"NodeText","Data":" 类，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Character"},{"Type":"NodeText","Data":" 类，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"String"},{"Type":"NodeText","Data":" 类等，就需要使用静态方法, 两者的区别是 静态代码块是自动执行的而静态方法是被调用的时候才执行的."}]}]},{"ID":"20240201213728-x0xhxif","Type":"NodeParagraph","Properties":{"id":"20240201213728-x0xhxif","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"Example："}]},{"ID":"20240201213729-56y24eg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213729-56y24eg","updated":"20240201213729"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Test {\n    public Test() {\n        System.out.print(\"默认构造方法！--\");\n    }\n    //非静态代码块\n    {\n        System.out.print(\"非静态代码块！--\");\n    }\n    //静态代码块\n    static {\n        System.out.print(\"静态代码块！--\");\n    }\n    private static void test() {\n        System.out.print(\"静态方法中的内容! --\");\n        {\n            System.out.print(\"静态方法中的代码块！--\");\n        }\n    }\n    public static void main(String[] args) {\n        Test test = new Test();\n        Test.test();//静态代码块！--静态方法中的内容! --静态方法中的代码块！--\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213730-jmji16y","Type":"NodeParagraph","Properties":{"id":"20240201213730-jmji16y","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"上述代码输出："}]},{"ID":"20240201213731-r2b3tm8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213731-r2b3tm8","updated":"20240201213731"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"静态代码块！--非静态代码块！--默认构造方法！--静态方法中的内容! --静态方法中的代码块！--\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213732-u7iezzn","Type":"NodeParagraph","Properties":{"id":"20240201213732-u7iezzn","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"当只执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Test.test();"},{"Type":"NodeText","Data":" 时输出："}]},{"ID":"20240201213733-n8vvfqd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213733-n8vvfqd","updated":"20240201213733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"静态代码块！--静态方法中的内容! --静态方法中的代码块！--\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213734-ndvvh9o","Type":"NodeParagraph","Properties":{"id":"20240201213734-ndvvh9o","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"当只执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Test test = new Test();"},{"Type":"NodeText","Data":" 时输出："}]},{"ID":"20240201213735-swgrypa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213735-swgrypa","updated":"20240201213735"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"静态代码块！--非静态代码块！--默认构造方法！--\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213736-1nqx06g","Type":"NodeParagraph","Properties":{"id":"20240201213736-1nqx06g","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"非静态代码块与构造函数的区别是：非静态代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化，因为构造函数是可以多个的，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。"}]},{"ID":"20240201213737-18vovfg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213737-18vovfg","updated":"20240201213737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213738-itnxnrg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-itnxnrg","updated":"20240201213738"},"Children":[{"ID":"20240201213739-0yxhnjm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-0yxhnjm","updated":"20240201213739"},"Children":[{"ID":"20240201213740-dk8yh1n","Type":"NodeParagraph","Properties":{"id":"20240201213740-dk8yh1n","updated":"20240201213740"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/chen13579867831/article/details/78995480","TextMarkTextContent":"https://blog.csdn.net/chen13579867831/article/details/78995480"}]}]},{"ID":"20240201213741-evo0dtr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-evo0dtr","updated":"20240201213741"},"Children":[{"ID":"20240201213742-2gsn2ca","Type":"NodeParagraph","Properties":{"id":"20240201213742-2gsn2ca","updated":"20240201213742"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/chenssy/p/3388487.html","TextMarkTextContent":"https://www.cnblogs.com/chenssy/p/3388487.html"}]}]},{"ID":"20240201213743-hhfxfe7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-hhfxfe7","updated":"20240201213743"},"Children":[{"ID":"20240201213744-b7x1f4e","Type":"NodeParagraph","Properties":{"id":"20240201213744-b7x1f4e","updated":"20240201213744"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/Qian123/p/5713440.html","TextMarkTextContent":"https://www.cnblogs.com/Qian123/p/5713440.html"}]}]}]},{"ID":"20240201213745-0cqq9mg","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-0cqq9mg","updated":"20240201213745"}}]}