{"ID":"20240201213614-k1mmqka","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213614-k1mmqka","title":"spi","updated":"20240201213614"},"Children":[{"ID":"20240201213615-odnbvix","Type":"NodeThematicBreak","Properties":{"id":"20240201213615-odnbvix","updated":"20240201213615"}},{"ID":"20240201213616-7a6qj5c","Type":"NodeParagraph","Properties":{"id":"20240201213616-7a6qj5c","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"title: Java SPI 机制详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213617-ewa61ib","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213617-ewa61ib","updated":"20240201213617"},"Children":[{"ID":"20240201213618-3w7tuf6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213618-3w7tuf6","updated":"20240201213618"},"Children":[{"ID":"20240201213619-bg5owvs","Type":"NodeParagraph","Properties":{"id":"20240201213619-bg5owvs","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"Java基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213620-inp84pn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-inp84pn","updated":"20240201213620"},"Children":[{"ID":"20240201213621-unnfm3e","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-unnfm3e","updated":"20240201213621"},"Children":[{"ID":"20240201213622-cvc4xr5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-cvc4xr5","updated":"20240201213622"},"Children":[{"ID":"20240201213623-jce4ynt","Type":"NodeParagraph","Properties":{"id":"20240201213623-jce4ynt","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213624-8tezecn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213624-8tezecn","updated":"20240201213624"},"Children":[{"ID":"20240201213625-5gvvnkk","Type":"NodeParagraph","Properties":{"id":"20240201213625-5gvvnkk","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: Java SPI机制"}]}]}]}]},{"ID":"20240201213626-i7kylii","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213626-i7kylii","updated":"20240201213626"},"Children":[{"ID":"20240201213627-unscnih","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-unscnih","updated":"20240201213627"},"Children":[{"ID":"20240201213628-m0p6fv9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-m0p6fv9","updated":"20240201213628"},"Children":[{"ID":"20240201213629-3dslmty","Type":"NodeParagraph","Properties":{"id":"20240201213629-3dslmty","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213630-h3q03ut","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-h3q03ut","updated":"20240201213630"},"Children":[{"ID":"20240201213631-gwleeak","Type":"NodeParagraph","Properties":{"id":"20240201213631-gwleeak","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: SPI 即 Service Provider Interface ，字面意思就是：“服务提供者的接口”，我的理解是：专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。"}]}]}]}]}]},{"ID":"20240201213632-kwrmrwp","Type":"NodeThematicBreak","Properties":{"id":"20240201213632-kwrmrwp","updated":"20240201213632"}},{"ID":"20240201213633-epto7kf","Type":"NodeBlockquote","Properties":{"id":"20240201213633-epto7kf","updated":"20240201213633"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213634-fhb0bcz","Type":"NodeParagraph","Properties":{"id":"20240201213634-fhb0bcz","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"本文来自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/jjx0708","TextMarkTextContent":"Kingshion"},{"Type":"NodeText","Data":" 投稿。欢迎更多朋友参与到 JavaGuide 的维护工作，这是一件非常有意义的事情。详细信息请看："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/javaguide/contribution-guideline.html","TextMarkTextContent":"JavaGuide 贡献指南"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213635-7m83195","Type":"NodeParagraph","Properties":{"id":"20240201213635-7m83195","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"在面向对象的设计原则中，一般推荐模块之间基于接口编程，通常情况下调用方模块是不会感知到被调用方模块的内部具体实现。一旦代码里面涉及具体实现类，就违反了开闭原则。如果需要替换一种实现，就需要修改代码。"}]},{"ID":"20240201213636-k4j39hy","Type":"NodeParagraph","Properties":{"id":"20240201213636-k4j39hy","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"为了实现在模块装配的时候不用在程序里面动态指明，这就需要一种服务发现机制。Java SPI 就是提供了这样一个机制："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为某个接口寻找服务实现的机制。这有点类似 IoC 的思想，将装配的控制权移交到了程序之外。"}]},{"ID":"20240201213637-s2x3bsa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213637-s2x3bsa","updated":"20240201213637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"SPI 介绍"}]},{"ID":"20240201213638-dyytb4j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213638-dyytb4j","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何谓 SPI?"}]},{"ID":"20240201213639-vdmgii6","Type":"NodeParagraph","Properties":{"id":"20240201213639-vdmgii6","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"SPI 即 Service Provider Interface ，字面意思就是：“服务提供者的接口”，我的理解是：专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。"}]},{"ID":"20240201213640-874adyd","Type":"NodeParagraph","Properties":{"id":"20240201213640-874adyd","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。"}]},{"ID":"20240201213641-k94cjs0","Type":"NodeParagraph","Properties":{"id":"20240201213641-k94cjs0","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"很多框架都使用了 Java 的 SPI 机制，比如：Spring 框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。"}]},{"ID":"20240201213642-7bgpudv","Type":"NodeParagraph","Properties":{"id":"20240201213642-7bgpudv","updated":"20240201213642"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/22e1830e0b0e4115a882751f6c417857tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213643-9lfrhpg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213643-9lfrhpg","updated":"20240201213643"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SPI 和 API 有什么区别？"}]},{"ID":"20240201213644-16c4yhj","Type":"NodeParagraph","Properties":{"id":"20240201213644-16c4yhj","updated":"20240201213644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那 SPI 和 API 有啥区别？"}]},{"ID":"20240201213645-c9aegpi","Type":"NodeParagraph","Properties":{"id":"20240201213645-c9aegpi","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"说到 SPI 就不得不说一下 API 了，从广义上来说它们都属于接口，而且很容易混淆。下面先用一张图说明一下："}]},{"ID":"20240201213646-c9uov05","Type":"NodeParagraph","Properties":{"id":"20240201213646-c9uov05","updated":"20240201213646"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/1ebd1df862c34880bc26b9d494535b3dtplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213647-ocy2nuk","Type":"NodeParagraph","Properties":{"id":"20240201213647-ocy2nuk","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"一般模块之间都是通过通过接口进行通讯，那我们在服务调用方和服务实现方（也称服务提供者）之间引入一个“接口”。"}]},{"ID":"20240201213648-sdeei7a","Type":"NodeParagraph","Properties":{"id":"20240201213648-sdeei7a","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 API ，这种接口和实现都是放在实现方的。"}]},{"ID":"20240201213649-z8f8cim","Type":"NodeParagraph","Properties":{"id":"20240201213649-z8f8cim","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"当接口存在于调用方这边时，就是 SPI ，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。"}]},{"ID":"20240201213650-excicnc","Type":"NodeParagraph","Properties":{"id":"20240201213650-excicnc","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"举个通俗易懂的例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好几家芯片制造业公司，这个时候，只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的结果是一样的）。"}]},{"ID":"20240201213651-paip95q","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213651-paip95q","updated":"20240201213651"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"实战演示"}]},{"ID":"20240201213652-6uv5agm","Type":"NodeParagraph","Properties":{"id":"20240201213652-6uv5agm","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"SLF4J （Simple Logging Facade for Java）是 Java 的一个日志门面（接口），其具体实现有几种，比如：Logback、Log4j、Log4j2 等等，而且还可以切换，在切换日志具体实现的时候我们是不需要更改项目代码的，只需要在 Maven 依赖里面修改一些 pom 依赖就好了。"}]},{"ID":"20240201213653-ii4pz1s","Type":"NodeParagraph","Properties":{"id":"20240201213653-ii4pz1s","updated":"20240201213653"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/image-20220723213306039-165858318917813.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213654-979u3fu","Type":"NodeParagraph","Properties":{"id":"20240201213654-979u3fu","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"这就是依赖 SPI 机制实现的，那我们接下来就实现一个简易版本的日志框架。"}]},{"ID":"20240201213655-01t7akq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213655-01t7akq","updated":"20240201213655"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Service Provider Interface"}]},{"ID":"20240201213656-jftab6i","Type":"NodeParagraph","Properties":{"id":"20240201213656-jftab6i","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"新建一个 Java 项目 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"service-provider-interface"},{"Type":"NodeText","Data":" 目录结构如下：（注意直接新建 Java 项目就好了，不用新建 Maven 项目，Maven 项目会涉及到一些编译配置，如果有私服的话，直接 deploy 会比较方便，但是没有的话，在过程中可能会遇到一些奇怪的问题。）"}]},{"ID":"20240201213657-23n9qbq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213657-23n9qbq","updated":"20240201213657"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"│  service-provider-interface.iml\n│\n├─.idea\n│  │  .gitignore\n│  │  misc.xml\n│  │  modules.xml\n│  └─ workspace.xml\n│\n└─src\n    └─edu\n        └─jiangxuan\n            └─up\n                └─spi\n                        Logger.java\n                        LoggerService.java\n                        Main.class\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213658-36j3jr6","Type":"NodeParagraph","Properties":{"id":"20240201213658-36j3jr6","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"新建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logger"},{"Type":"NodeText","Data":" 接口，这个就是 SPI ， 服务提供者接口，后面的服务提供者就要针对这个接口进行实现。"}]},{"ID":"20240201213659-j7ymap1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213659-j7ymap1","updated":"20240201213659"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package edu.jiangxuan.up.spi;\n\npublic interface Logger {\n    void info(String msg);\n    void debug(String msg);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213660-4ltp06x","Type":"NodeParagraph","Properties":{"id":"20240201213660-4ltp06x","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"接下来就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LoggerService"},{"Type":"NodeText","Data":" 类，这个主要是为服务使用者（调用方）提供特定功能的。这个类也是实现 Java SPI 机制的关键所在，如果存在疑惑的话可以先往后面继续看。"}]},{"ID":"20240201213661-sujzuaj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213661-sujzuaj","updated":"20240201213661"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package edu.jiangxuan.up.spi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\n\npublic class LoggerService {\n    private static final LoggerService SERVICE = new LoggerService();\n\n    private final Logger logger;\n\n    private final List\u003cLogger\u003e loggerList;\n\n    private LoggerService() {\n        ServiceLoader\u003cLogger\u003e loader = ServiceLoader.load(Logger.class);\n        List\u003cLogger\u003e list = new ArrayList\u003c\u003e();\n        for (Logger log : loader) {\n            list.add(log);\n        }\n        // LoggerList 是所有 ServiceProvider\n        loggerList = list;\n        if (!list.isEmpty()) {\n            // Logger 只取一个\n            logger = list.get(0);\n        } else {\n            logger = null;\n        }\n    }\n\n    public static LoggerService getService() {\n        return SERVICE;\n    }\n\n    public void info(String msg) {\n        if (logger == null) {\n            System.out.println(\"info 中没有发现 Logger 服务提供者\");\n        } else {\n            logger.info(msg);\n        }\n    }\n\n    public void debug(String msg) {\n        if (loggerList.isEmpty()) {\n            System.out.println(\"debug 中没有发现 Logger 服务提供者\");\n        }\n        loggerList.forEach(log -\u003e log.debug(msg));\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213662-kcj5hdz","Type":"NodeParagraph","Properties":{"id":"20240201213662-kcj5hdz","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"新建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Main"},{"Type":"NodeText","Data":" 类（服务使用者，调用方），启动程序查看结果。"}]},{"ID":"20240201213663-q5fkf06","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213663-q5fkf06","updated":"20240201213663"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package org.spi.service;\n\npublic class Main {\n    public static void main(String[] args) {\n        LoggerService service = LoggerService.getService();\n\n        service.info(\"Hello SPI\");\n        service.debug(\"Hello SPI\");\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213664-p2r0fcl","Type":"NodeParagraph","Properties":{"id":"20240201213664-p2r0fcl","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"程序结果："}]},{"ID":"20240201213665-6dyn3z1","Type":"NodeBlockquote","Properties":{"id":"20240201213665-6dyn3z1","updated":"20240201213665"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213666-uu2k4pd","Type":"NodeParagraph","Properties":{"id":"20240201213666-uu2k4pd","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"info 中没有发现 Logger 服务提供者"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"debug 中没有发现 Logger 服务提供者"}]}]},{"ID":"20240201213667-8ddpwpo","Type":"NodeParagraph","Properties":{"id":"20240201213667-8ddpwpo","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"此时我们只是空有接口，并没有为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logger"},{"Type":"NodeText","Data":" 接口提供任何的实现，所以输出结果中没有按照预期打印相应的结果。"}]},{"ID":"20240201213668-9p0bo9f","Type":"NodeParagraph","Properties":{"id":"20240201213668-9p0bo9f","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"你可以使用命令或者直接使用 IDEA 将整个程序直接打包成 jar 包。"}]},{"ID":"20240201213669-8y9frqd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213669-8y9frqd","updated":"20240201213669"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Service Provider"}]},{"ID":"20240201213670-qtb4u0n","Type":"NodeParagraph","Properties":{"id":"20240201213670-qtb4u0n","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"接下来新建一个项目用来实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logger"},{"Type":"NodeText","Data":" 接口"}]},{"ID":"20240201213671-rd15k99","Type":"NodeParagraph","Properties":{"id":"20240201213671-rd15k99","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"新建项目 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"service-provider"},{"Type":"NodeText","Data":" 目录结构如下："}]},{"ID":"20240201213672-f1tap19","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213672-f1tap19","updated":"20240201213672"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"│  service-provider.iml\n│\n├─.idea\n│  │  .gitignore\n│  │  misc.xml\n│  │  modules.xml\n│  └─ workspace.xml\n│\n├─lib\n│      service-provider-interface.jar\n|\n└─src\n    ├─edu\n    │  └─jiangxuan\n    │      └─up\n    │          └─spi\n    │              └─service\n    │                      Logback.java\n    │\n    └─META-INF\n        └─services\n                edu.jiangxuan.up.spi.Logger\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213673-tuvqofp","Type":"NodeParagraph","Properties":{"id":"20240201213673-tuvqofp","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"新建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logback"},{"Type":"NodeText","Data":" 类"}]},{"ID":"20240201213674-gaytvzp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213674-gaytvzp","updated":"20240201213674"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package edu.jiangxuan.up.spi.service;\n\nimport edu.jiangxuan.up.spi.Logger;\n\npublic class Logback implements Logger {\n    @Override\n    public void info(String s) {\n        System.out.println(\"Logback info 打印日志：\" + s);\n    }\n\n    @Override\n    public void debug(String s) {\n        System.out.println(\"Logback debug 打印日志：\" + s);\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213675-5bx3eyd","Type":"NodeParagraph","Properties":{"id":"20240201213675-5bx3eyd","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"service-provider-interface"},{"Type":"NodeText","Data":" 的 jar 导入项目中。"}]},{"ID":"20240201213676-rwt57t4","Type":"NodeParagraph","Properties":{"id":"20240201213676-rwt57t4","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"新建 lib 目录，然后将 jar 包拷贝过来，再添加到项目中。"}]},{"ID":"20240201213677-5a25oap","Type":"NodeParagraph","Properties":{"id":"20240201213677-5a25oap","updated":"20240201213677"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/523d5e25198444d3b112baf68ce49daetplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213678-594eybw","Type":"NodeParagraph","Properties":{"id":"20240201213678-594eybw","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"再点击 OK 。"}]},{"ID":"20240201213679-jha8x82","Type":"NodeParagraph","Properties":{"id":"20240201213679-jha8x82","updated":"20240201213679"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/f4ba0aa71e9b4d509b9159892a220850tplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213680-lumipr9","Type":"NodeParagraph","Properties":{"id":"20240201213680-lumipr9","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"接下来就可以在项目中导入 jar 包里面的一些类和方法了，就像 JDK 工具类导包一样的。"}]},{"ID":"20240201213681-7webhjv","Type":"NodeParagraph","Properties":{"id":"20240201213681-7webhjv","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logger"},{"Type":"NodeText","Data":" 接口，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"src"},{"Type":"NodeText","Data":" 目录下新建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF/services"},{"Type":"NodeText","Data":" 文件夹，然后新建文件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"edu.jiangxuan.up.spi.Logger"},{"Type":"NodeText","Data":" （SPI 的全类名），文件里面的内容是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"edu.jiangxuan.up.spi.service.Logback"},{"Type":"NodeText","Data":" （Logback 的全类名，即 SPI 的实现类的包名 + 类名）。"}]},{"ID":"20240201213682-u010e2s","Type":"NodeParagraph","Properties":{"id":"20240201213682-u010e2s","updated":"20240201213682"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这是 JDK SPI 机制 ServiceLoader 约定好的标准。"}]},{"ID":"20240201213683-4i9yaih","Type":"NodeParagraph","Properties":{"id":"20240201213683-4i9yaih","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"这里先大概解释一下：Java 中的 SPI 机制就是在每次类加载的时候会先去找到 class 相对目录下的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"META-INF"},{"Type":"NodeText","Data":" 文件夹下的 services 文件夹下的文件，将这个文件夹下面的所有文件先加载到内存中，然后根据这些文件的文件名和里面的文件内容找到相应接口的具体实现类，找到实现类后就可以通过反射去生成对应的对象，保存在一个 list 列表里面，所以可以通过迭代或者遍历的方式拿到对应的实例对象，生成不同的实现。"}]},{"ID":"20240201213684-hfjc6zp","Type":"NodeParagraph","Properties":{"id":"20240201213684-hfjc6zp","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"所以会提出一些规范要求：文件名一定要是接口的全类名，然后里面的内容一定要是实现类的全类名，实现类可以有多个，直接换行就好了，多个实现类的时候，会一个一个的迭代加载。"}]},{"ID":"20240201213685-dm4i5tf","Type":"NodeParagraph","Properties":{"id":"20240201213685-dm4i5tf","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"接下来同样将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"service-provider"},{"Type":"NodeText","Data":" 项目打包成 jar 包，这个 jar 包就是服务提供方的实现。通常我们导入 maven 的 pom 依赖就有点类似这种，只不过我们现在没有将这个 jar 包发布到 maven 公共仓库中，所以在需要使用的地方只能手动的添加到项目中。"}]},{"ID":"20240201213686-paouivj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213686-paouivj","updated":"20240201213686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"效果展示"}]},{"ID":"20240201213687-04edh6s","Type":"NodeParagraph","Properties":{"id":"20240201213687-04edh6s","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"为了更直观的展示效果，我这里再新建一个专门用来测试的工程项目："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java-spi-test"}]},{"ID":"20240201213688-odsslpy","Type":"NodeParagraph","Properties":{"id":"20240201213688-odsslpy","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"然后先导入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logger"},{"Type":"NodeText","Data":" 的接口 jar 包，再导入具体的实现类的 jar 包。"}]},{"ID":"20240201213689-u843epu","Type":"NodeParagraph","Properties":{"id":"20240201213689-u843epu","updated":"20240201213689"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/image-20220723215812708-165858469599214.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213690-fv6qyef","Type":"NodeParagraph","Properties":{"id":"20240201213690-fv6qyef","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"新建 Main 方法测试："}]},{"ID":"20240201213691-7ct5oak","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213691-7ct5oak","updated":"20240201213691"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package edu.jiangxuan.up.service;\n\nimport edu.jiangxuan.up.spi.LoggerService;\n\npublic class TestJavaSPI {\n    public static void main(String[] args) {\n        LoggerService loggerService = LoggerService.getService();\n        loggerService.info(\"你好\");\n        loggerService.debug(\"测试Java SPI 机制\");\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213692-b3g6207","Type":"NodeParagraph","Properties":{"id":"20240201213692-b3g6207","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"运行结果如下："}]},{"ID":"20240201213693-k1qjth0","Type":"NodeBlockquote","Properties":{"id":"20240201213693-k1qjth0","updated":"20240201213693"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213694-l6qzd9c","Type":"NodeParagraph","Properties":{"id":"20240201213694-l6qzd9c","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"Logback info 打印日志：你好"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Logback debug 打印日志：测试 Java SPI 机制"}]}]},{"ID":"20240201213695-q29apqh","Type":"NodeParagraph","Properties":{"id":"20240201213695-q29apqh","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"说明导入 jar 包中的实现类生效了。"}]},{"ID":"20240201213696-jyv68hz","Type":"NodeParagraph","Properties":{"id":"20240201213696-jyv68hz","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"如果我们不导入具体的实现类的 jar 包，那么此时程序运行的结果就会是："}]},{"ID":"20240201213697-edqtr7v","Type":"NodeBlockquote","Properties":{"id":"20240201213697-edqtr7v","updated":"20240201213697"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213698-5ff0jvq","Type":"NodeParagraph","Properties":{"id":"20240201213698-5ff0jvq","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"info 中没有发现 Logger 服务提供者"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"debug 中没有发现 Logger 服务提供者"}]}]},{"ID":"20240201213699-co70tnv","Type":"NodeParagraph","Properties":{"id":"20240201213699-co70tnv","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"通过使用 SPI 机制，可以看出服务（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LoggerService"},{"Type":"NodeText","Data":"）和 服务提供者两者之间的耦合度非常低，如果说我们想要换一种实现，那么其实只需要修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"service-provider"},{"Type":"NodeText","Data":" 项目中针对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Logger"},{"Type":"NodeText","Data":" 接口的具体实现就可以了，只需要换一个 jar 包即可，也可以有在一个项目里面有多个实现，这不就是 SLF4J 原理吗？"}]},{"ID":"20240201213700-7ibd8kq","Type":"NodeParagraph","Properties":{"id":"20240201213700-7ibd8kq","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"如果某一天需求变更了，此时需要将日志输出到消息队列，或者做一些别的操作，这个时候完全不需要更改 Logback 的实现，只需要新增一个服务实现（service-provider）可以通过在本项目里面新增实现也可以从外部引入新的服务实现 jar 包。我们可以在服务(LoggerService)中选择一个具体的 服务实现(service-provider) 来完成我们需要的操作。"}]},{"ID":"20240201213701-c4zgiri","Type":"NodeParagraph","Properties":{"id":"20240201213701-c4zgiri","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"那么接下来我们具体来说说 Java SPI 工作的重点原理—— "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213702-k71s3xm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213702-k71s3xm","updated":"20240201213702"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ServiceLoader"}]},{"ID":"20240201213703-1z1viwo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213703-1z1viwo","updated":"20240201213703"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ServiceLoader 具体实现"}]},{"ID":"20240201213704-7q6vktn","Type":"NodeParagraph","Properties":{"id":"20240201213704-7q6vktn","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"想要使用 Java 的 SPI 机制是需要依赖 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 来实现的，那么我们接下来看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 具体是怎么做的："}]},{"ID":"20240201213705-sd3606j","Type":"NodeParagraph","Properties":{"id":"20240201213705-sd3606j","updated":"20240201213705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 是 JDK 提供的一个工具类， 位于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"package java.util;"},{"Type":"NodeText","Data":"包下。"}]},{"ID":"20240201213706-4r0bee2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213706-4r0bee2","updated":"20240201213706"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"A facility to load implementations of a service.\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213707-4oaq2t9","Type":"NodeParagraph","Properties":{"id":"20240201213707-4oaq2t9","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"这是 JDK 官方给的注释："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一种加载服务实现的工具。"}]},{"ID":"20240201213708-mk29csy","Type":"NodeParagraph","Properties":{"id":"20240201213708-mk29csy","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"再往下看，我们发现这个类是一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":" 类型的，所以是不可被继承修改，同时它实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Iterable"},{"Type":"NodeText","Data":" 接口。之所以实现了迭代器，是为了方便后续我们能够通过迭代的方式得到对应的服务实现。"}]},{"ID":"20240201213709-toe16pq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213709-toe16pq","updated":"20240201213709"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public final class ServiceLoader\u003cS\u003e implements Iterable\u003cS\u003e{ xxx...}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213710-boqy48s","Type":"NodeParagraph","Properties":{"id":"20240201213710-boqy48s","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"可以看到一个熟悉的常量定义："}]},{"ID":"20240201213711-j7et2xf","Type":"NodeParagraph","Properties":{"id":"20240201213711-j7et2xf","updated":"20240201213711"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"private static final String PREFIX = \u0026quot;META-INF/services/\u0026quot;;"}]},{"ID":"20240201213712-ew9hyo2","Type":"NodeParagraph","Properties":{"id":"20240201213712-ew9hyo2","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"下面是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"load"},{"Type":"NodeText","Data":" 方法：可以发现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"load"},{"Type":"NodeText","Data":" 方法支持两种重载后的入参；"}]},{"ID":"20240201213713-qzqh302","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213713-qzqh302","updated":"20240201213713"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public static \u003cS\u003e ServiceLoader\u003cS\u003e load(Class\u003cS\u003e service) {\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    return ServiceLoader.load(service, cl);\n}\n\npublic static \u003cS\u003e ServiceLoader\u003cS\u003e load(Class\u003cS\u003e service,\n                                        ClassLoader loader) {\n    return new ServiceLoader\u003c\u003e(service, loader);\n}\n\nprivate ServiceLoader(Class\u003cS\u003e svc, ClassLoader cl) {\n    service = Objects.requireNonNull(svc, \"Service interface cannot be null\");\n    loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n    acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n    reload();\n}\n\npublic void reload() {\n    providers.clear();\n    lookupIterator = new LazyIterator(service, loader);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213714-nebc1bj","Type":"NodeParagraph","Properties":{"id":"20240201213714-nebc1bj","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"根据代码的调用顺序，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"reload()"},{"Type":"NodeText","Data":" 方法中是通过一个内部类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LazyIterator"},{"Type":"NodeText","Data":" 实现的。先继续往下面看。"}]},{"ID":"20240201213715-7tyr637","Type":"NodeParagraph","Properties":{"id":"20240201213715-7tyr637","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Iterable"},{"Type":"NodeText","Data":" 接口的方法后，具有了迭代的能力，在这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"iterator"},{"Type":"NodeText","Data":" 方法被调用时，首先会在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Provider"},{"Type":"NodeText","Data":" 缓存中进行查找，如果缓存中没有命中那么则在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LazyIterator"},{"Type":"NodeText","Data":" 中进行查找。"}]},{"ID":"20240201213716-nlvodyj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213716-nlvodyj","updated":"20240201213716"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\npublic Iterator\u003cS\u003e iterator() {\n    return new Iterator\u003cS\u003e() {\n\n        Iterator\u003cMap.Entry\u003cString, S\u003e\u003e knownProviders\n                = providers.entrySet().iterator();\n\n        public boolean hasNext() {\n            if (knownProviders.hasNext())\n                return true;\n            return lookupIterator.hasNext(); // 调用 LazyIterator\n        }\n\n        public S next() {\n            if (knownProviders.hasNext())\n                return knownProviders.next().getValue();\n            return lookupIterator.next(); // 调用 LazyIterator\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n    };\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213717-mgeehyz","Type":"NodeParagraph","Properties":{"id":"20240201213717-mgeehyz","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"在调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LazyIterator"},{"Type":"NodeText","Data":" 时，具体实现如下："}]},{"ID":"20240201213718-vmfo8jp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213718-vmfo8jp","updated":"20240201213718"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\npublic boolean hasNext() {\n    if (acc == null) {\n        return hasNextService();\n    } else {\n        PrivilegedAction\u003cBoolean\u003e action = new PrivilegedAction\u003cBoolean\u003e() {\n            public Boolean run() {\n                return hasNextService();\n            }\n        };\n        return AccessController.doPrivileged(action, acc);\n    }\n}\n\nprivate boolean hasNextService() {\n    if (nextName != null) {\n        return true;\n    }\n    if (configs == null) {\n        try {\n            //通过PREFIX（META-INF/services/）和类名 获取对应的配置文件，得到具体的实现类\n            String fullName = PREFIX + service.getName();\n            if (loader == null)\n                configs = ClassLoader.getSystemResources(fullName);\n            else\n                configs = loader.getResources(fullName);\n        } catch (IOException x) {\n            fail(service, \"Error locating configuration files\", x);\n        }\n    }\n    while ((pending == null) || !pending.hasNext()) {\n        if (!configs.hasMoreElements()) {\n            return false;\n        }\n        pending = parse(service, configs.nextElement());\n    }\n    nextName = pending.next();\n    return true;\n}\n\n\npublic S next() {\n    if (acc == null) {\n        return nextService();\n    } else {\n        PrivilegedAction\u003cS\u003e action = new PrivilegedAction\u003cS\u003e() {\n            public S run() {\n                return nextService();\n            }\n        };\n        return AccessController.doPrivileged(action, acc);\n    }\n}\n\nprivate S nextService() {\n    if (!hasNextService())\n        throw new NoSuchElementException();\n    String cn = nextName;\n    nextName = null;\n    Class\u003c?\u003e c = null;\n    try {\n        c = Class.forName(cn, false, loader);\n    } catch (ClassNotFoundException x) {\n        fail(service,\n                \"Provider \" + cn + \" not found\");\n    }\n    if (!service.isAssignableFrom(c)) {\n        fail(service,\n                \"Provider \" + cn + \" not a subtype\");\n    }\n    try {\n        S p = service.cast(c.newInstance());\n        providers.put(cn, p);\n        return p;\n    } catch (Throwable x) {\n        fail(service,\n                \"Provider \" + cn + \" could not be instantiated\",\n                x);\n    }\n    throw new Error();          // This cannot happen\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213719-i64l5co","Type":"NodeParagraph","Properties":{"id":"20240201213719-i64l5co","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"可能很多人看这个会觉得有点复杂，没关系，我这边实现了一个简单的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 的小模型，流程和原理都是保持一致的，可以先从自己实现一个简易版本的开始学："}]},{"ID":"20240201213720-6qsl342","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213720-6qsl342","updated":"20240201213720"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"自己实现一个 ServiceLoader"}]},{"ID":"20240201213721-cri23zk","Type":"NodeParagraph","Properties":{"id":"20240201213721-cri23zk","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"我先把代码贴出来："}]},{"ID":"20240201213722-jrge6tc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213722-jrge6tc","updated":"20240201213722"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package edu.jiangxuan.up.service;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Constructor;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\n\npublic class MyServiceLoader\u003cS\u003e {\n\n    // 对应的接口 Class 模板\n    private final Class\u003cS\u003e service;\n\n    // 对应实现类的 可以有多个，用 List 进行封装\n    private final List\u003cS\u003e providers = new ArrayList\u003c\u003e();\n\n    // 类加载器\n    private final ClassLoader classLoader;\n\n    // 暴露给外部使用的方法，通过调用这个方法可以开始加载自己定制的实现流程。\n    public static \u003cS\u003e MyServiceLoader\u003cS\u003e load(Class\u003cS\u003e service) {\n        return new MyServiceLoader\u003c\u003e(service);\n    }\n\n    // 构造方法私有化\n    private MyServiceLoader(Class\u003cS\u003e service) {\n        this.service = service;\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n        doLoad();\n    }\n\n    // 关键方法，加载具体实现类的逻辑\n    private void doLoad() {\n        try {\n            // 读取所有 jar 包里面 META-INF/services 包下面的文件，这个文件名就是接口名，然后文件里面的内容就是具体的实现类的路径加全类名\n            Enumeration\u003cURL\u003e urls = classLoader.getResources(\"META-INF/services/\" + service.getName());\n            // 挨个遍历取到的文件\n            while (urls.hasMoreElements()) {\n                // 取出当前的文件\n                URL url = urls.nextElement();\n                System.out.println(\"File = \" + url.getPath());\n                // 建立链接\n                URLConnection urlConnection = url.openConnection();\n                urlConnection.setUseCaches(false);\n                // 获取文件输入流\n                InputStream inputStream = urlConnection.getInputStream();\n                // 从文件输入流获取缓存\n                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                // 从文件内容里面得到实现类的全类名\n                String className = bufferedReader.readLine();\n\n                while (className != null) {\n                    // 通过反射拿到实现类的实例\n                    Class\u003c?\u003e clazz = Class.forName(className, false, classLoader);\n                    // 如果声明的接口跟这个具体的实现类是属于同一类型，（可以理解为Java的一种多态，接口跟实现类、父类和子类等等这种关系。）则构造实例\n                    if (service.isAssignableFrom(clazz)) {\n                        Constructor\u003c? extends S\u003e constructor = (Constructor\u003c? extends S\u003e) clazz.getConstructor();\n                        S instance = constructor.newInstance();\n                        // 把当前构造的实例对象添加到 Provider的列表里面\n                        providers.add(instance);\n                    }\n                    // 继续读取下一行的实现类，可以有多个实现类，只需要换行就可以了。\n                    className = bufferedReader.readLine();\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(\"读取文件异常。。。\");\n        }\n    }\n\n    // 返回spi接口对应的具体实现类列表\n    public List\u003cS\u003e getProviders() {\n        return providers;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213723-78j0byh","Type":"NodeParagraph","Properties":{"id":"20240201213723-78j0byh","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"关键信息基本已经通过代码注释描述出来了，"}]},{"ID":"20240201213724-0g606d3","Type":"NodeParagraph","Properties":{"id":"20240201213724-0g606d3","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"主要的流程就是："}]},{"ID":"20240201213725-dt65sxn","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213725-dt65sxn","updated":"20240201213725"},"Children":[{"ID":"20240201213726-sam2ukq","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213726-sam2ukq","updated":"20240201213726"},"Children":[{"ID":"20240201213727-juvhogd","Type":"NodeParagraph","Properties":{"id":"20240201213727-juvhogd","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"通过 URL 工具类从 jar 包的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"/META-INF/services"},{"Type":"NodeText","Data":" 目录下面找到对应的文件，"}]}]},{"ID":"20240201213728-ort24mw","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213728-ort24mw","updated":"20240201213728"},"Children":[{"ID":"20240201213729-mq7ukeq","Type":"NodeParagraph","Properties":{"id":"20240201213729-mq7ukeq","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"读取这个文件的名称找到对应的 spi 接口，"}]}]},{"ID":"20240201213730-sa01v1x","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213730-sa01v1x","updated":"20240201213730"},"Children":[{"ID":"20240201213731-tykes2m","Type":"NodeParagraph","Properties":{"id":"20240201213731-tykes2m","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 流将文件里面的具体实现类的全类名读取出来，"}]}]},{"ID":"20240201213732-lmxy2kf","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213732-lmxy2kf","updated":"20240201213732"},"Children":[{"ID":"20240201213733-mkbp93f","Type":"NodeParagraph","Properties":{"id":"20240201213733-mkbp93f","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"根据获取到的全类名，先判断跟 spi 接口是否为同一类型，如果是的，那么就通过反射的机制构造对应的实例对象，"}]}]},{"ID":"20240201213734-fb3vf90","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213734-fb3vf90","updated":"20240201213734"},"Children":[{"ID":"20240201213735-3ijjp7y","Type":"NodeParagraph","Properties":{"id":"20240201213735-3ijjp7y","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"将构造出来的实例对象添加到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Providers"},{"Type":"NodeText","Data":" 的列表中。"}]}]}]},{"ID":"20240201213736-0b814cz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213736-0b814cz","updated":"20240201213736"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213737-8ohe1b7","Type":"NodeParagraph","Properties":{"id":"20240201213737-8ohe1b7","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"其实不难发现，SPI 机制的具体实现本质上还是通过反射完成的。即："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们按照规定将要暴露对外使用的具体实现类在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"META-INF/services/"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 文件下声明。"}]},{"ID":"20240201213738-l3mvpkw","Type":"NodeParagraph","Properties":{"id":"20240201213738-l3mvpkw","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"另外，SPI 机制在很多框架中都有应用：Spring 框架的基本原理也是类似的方式。还有 Dubbo 框架提供同样的 SPI 扩展机制，只不过 Dubbo 和 spring 框架中的 SPI 机制具体实现方式跟咱们今天学得这个有些细微的区别，不过整体的原理都是一致的，相信大家通过对 JDK 中 SPI 机制的学习，能够一通百通，加深对其他高深框的理解。"}]},{"ID":"20240201213739-9tb0k9f","Type":"NodeParagraph","Properties":{"id":"20240201213739-9tb0k9f","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"通过 SPI 机制能够大大地提高接口设计的灵活性，但是 SPI 机制也存在一些缺点，比如："}]},{"ID":"20240201213740-njpo0rg","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213740-njpo0rg","updated":"20240201213740"},"Children":[{"ID":"20240201213741-ksay34d","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213741-ksay34d","updated":"20240201213741"},"Children":[{"ID":"20240201213742-kw2myma","Type":"NodeParagraph","Properties":{"id":"20240201213742-kw2myma","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"遍历加载所有的实现类，这样效率还是相对较低的；"}]}]},{"ID":"20240201213743-6qos91h","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213743-6qos91h","updated":"20240201213743"},"Children":[{"ID":"20240201213744-msk7w0v","Type":"NodeParagraph","Properties":{"id":"20240201213744-msk7w0v","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"当多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 同时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"load"},{"Type":"NodeText","Data":" 时，会有并发问题。"}]}]}]},{"ID":"20240201213745-u1p9an0","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-u1p9an0","updated":"20240201213745"}}]}