{"ID":"20240201213302-sjvazss","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213302-sjvazss","title":"java-basic-questions-03","updated":"20240201213302"},"Children":[{"ID":"20240201213303-memkhy1","Type":"NodeThematicBreak","Properties":{"id":"20240201213303-memkhy1","updated":"20240201213303"}},{"ID":"20240201213304-1ufrw7j","Type":"NodeParagraph","Properties":{"id":"20240201213304-1ufrw7j","updated":"20240201213304"},"Children":[{"Type":"NodeText","Data":"title: Java基础常见面试题总结(下)"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213305-ks2yt75","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213305-ks2yt75","updated":"20240201213305"},"Children":[{"ID":"20240201213306-kjaf5vd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213306-kjaf5vd","updated":"20240201213306"},"Children":[{"ID":"20240201213307-40rnf1m","Type":"NodeParagraph","Properties":{"id":"20240201213307-40rnf1m","updated":"20240201213307"},"Children":[{"Type":"NodeText","Data":"Java基础"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213308-pk1rljb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213308-pk1rljb","updated":"20240201213308"},"Children":[{"ID":"20240201213309-mcpdpfj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213309-mcpdpfj","updated":"20240201213309"},"Children":[{"ID":"20240201213310-3joj2pj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213310-3joj2pj","updated":"20240201213310"},"Children":[{"ID":"20240201213311-75wbri7","Type":"NodeParagraph","Properties":{"id":"20240201213311-75wbri7","updated":"20240201213311"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213312-9ccds47","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213312-9ccds47","updated":"20240201213312"},"Children":[{"ID":"20240201213313-9u0c17f","Type":"NodeParagraph","Properties":{"id":"20240201213313-9u0c17f","updated":"20240201213313"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: Java异常,泛型,反射,IO,注解"}]}]}]}]},{"ID":"20240201213314-91olm9e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213314-91olm9e","updated":"20240201213314"},"Children":[{"ID":"20240201213315-2f9kl3q","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213315-2f9kl3q","updated":"20240201213315"},"Children":[{"ID":"20240201213316-ai09vyq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213316-ai09vyq","updated":"20240201213316"},"Children":[{"ID":"20240201213317-nlf14qe","Type":"NodeParagraph","Properties":{"id":"20240201213317-nlf14qe","updated":"20240201213317"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213318-1drndwg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213318-1drndwg","updated":"20240201213318"},"Children":[{"ID":"20240201213319-a88o7b2","Type":"NodeParagraph","Properties":{"id":"20240201213319-a88o7b2","updated":"20240201213319"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 全网质量最高的Java基础常见知识点和面试题总结，希望对你有帮助！"}]}]}]}]}]},{"ID":"20240201213320-qng01uf","Type":"NodeThematicBreak","Properties":{"id":"20240201213320-qng01uf","updated":"20240201213320"}},{"ID":"20240201213321-2ro5n0f","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-header.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213321-2ro5n0f","updated":"20240201213321"}},{"ID":"20240201213322-4k1tadu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213322-4k1tadu","updated":"20240201213322"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"异常"}]},{"ID":"20240201213323-06zio22","Type":"NodeParagraph","Properties":{"id":"20240201213323-06zio22","updated":"20240201213323"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Java 异常类层次结构图概览"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213324-13wy76k","Type":"NodeParagraph","Properties":{"id":"20240201213324-13wy76k","updated":"20240201213324"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Java 异常类层次结构图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/types-of-exceptions-in-java.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213325-l7o2sk2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213325-l7o2sk2","updated":"20240201213325"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Exception 和 Error 有什么区别？"}]},{"ID":"20240201213326-umxbrvm","Type":"NodeParagraph","Properties":{"id":"20240201213326-umxbrvm","updated":"20240201213326"},"Children":[{"Type":"NodeText","Data":"在 Java 中，所有的异常都有一个共同的祖先 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang"},{"Type":"NodeText","Data":" 包中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Throwable"},{"Type":"NodeText","Data":" 类。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Throwable"},{"Type":"NodeText","Data":" 类有两个重要的子类:"}]},{"ID":"20240201213327-h7fm6fb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213327-h7fm6fb","updated":"20240201213327"},"Children":[{"ID":"20240201213328-kos22ev","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213328-kos22ev","updated":"20240201213328"},"Children":[{"ID":"20240201213329-xrxd33w","Type":"NodeParagraph","Properties":{"id":"20240201213329-xrxd33w","updated":"20240201213329"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Exception"},{"Type":"NodeText","Data":" :程序本身可以处理的异常，可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":" 来进行捕获。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Exception"},{"Type":"NodeText","Data":" 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。"}]}]},{"ID":"20240201213330-um0dvl2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213330-um0dvl2","updated":"20240201213330"},"Children":[{"ID":"20240201213331-5igonv7","Type":"NodeParagraph","Properties":{"id":"20240201213331-5igonv7","updated":"20240201213331"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Error"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Error"},{"Type":"NodeText","Data":" 属于程序无法处理的错误 ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"我们没办法通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s code","TextMarkTextContent":"catch"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":" 来进行捕获"},{"Type":"NodeText","Data":"不建议通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":"捕获 。例如 Java 虚拟机运行错误（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Virtual MachineError"},{"Type":"NodeText","Data":"）、虚拟机内存不够错误("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":")、类定义错误（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NoClassDefFoundError"},{"Type":"NodeText","Data":"）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。"}]}]}]},{"ID":"20240201213332-g3gujjz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213332-g3gujjz","updated":"20240201213332"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Checked Exception 和 Unchecked Exception 有什么区别？"}]},{"ID":"20240201213333-hqu4a6u","Type":"NodeParagraph","Properties":{"id":"20240201213333-hqu4a6u","updated":"20240201213333"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Checked Exception"},{"Type":"NodeText","Data":" 即 受检查异常 ，Java 代码在编译过程中，如果受检查异常没有被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":"或者"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"throws"},{"Type":"NodeText","Data":" 关键字处理的话，就没办法通过编译。"}]},{"ID":"20240201213334-aphcd36","Type":"NodeParagraph","Properties":{"id":"20240201213334-aphcd36","updated":"20240201213334"},"Children":[{"Type":"NodeText","Data":"比如下面这段 IO 操作的代码："}]},{"ID":"20240201213335-boy6put","Type":"NodeParagraph","Properties":{"id":"20240201213335-boy6put","updated":"20240201213335"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/checked-exception.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213336-k1pzwbe","Type":"NodeParagraph","Properties":{"id":"20240201213336-k1pzwbe","updated":"20240201213336"},"Children":[{"Type":"NodeText","Data":"除了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":"及其子类以外，其他的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Exception"},{"Type":"NodeText","Data":"类及其子类都属于受检查异常 。常见的受检查异常有：IO 相关的异常、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassNotFoundException"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SQLException"},{"Type":"NodeText","Data":"...。"}]},{"ID":"20240201213337-989ds4v","Type":"NodeParagraph","Properties":{"id":"20240201213337-989ds4v","updated":"20240201213337"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Unchecked Exception"},{"Type":"NodeText","Data":" 即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不受检查异常"},{"Type":"NodeText","Data":" ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。"}]},{"ID":"20240201213338-wueq2gd","Type":"NodeParagraph","Properties":{"id":"20240201213338-wueq2gd","updated":"20240201213338"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":" 及其子类都统称为非受检查异常，常见的有（建议记下来，日常开发中会经常用到）："}]},{"ID":"20240201213339-yf1sgjn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213339-yf1sgjn","updated":"20240201213339"},"Children":[{"ID":"20240201213340-88untlk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213340-88untlk","updated":"20240201213340"},"Children":[{"ID":"20240201213341-ziqq0jt","Type":"NodeParagraph","Properties":{"id":"20240201213341-ziqq0jt","updated":"20240201213341"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NullPointerException"},{"Type":"NodeText","Data":"(空指针错误)"}]}]},{"ID":"20240201213342-bkjlbiy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213342-bkjlbiy","updated":"20240201213342"},"Children":[{"ID":"20240201213343-cpd89kg","Type":"NodeParagraph","Properties":{"id":"20240201213343-cpd89kg","updated":"20240201213343"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IllegalArgumentException"},{"Type":"NodeText","Data":"(参数错误比如方法入参类型错误)"}]}]},{"ID":"20240201213344-hv7m4qp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213344-hv7m4qp","updated":"20240201213344"},"Children":[{"ID":"20240201213345-4dlcmlt","Type":"NodeParagraph","Properties":{"id":"20240201213345-4dlcmlt","updated":"20240201213345"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NumberFormatException"},{"Type":"NodeText","Data":"（字符串转换为数字格式错误，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IllegalArgumentException"},{"Type":"NodeText","Data":"的子类）"}]}]},{"ID":"20240201213346-hs4k3e7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213346-hs4k3e7","updated":"20240201213346"},"Children":[{"ID":"20240201213347-9e4h85z","Type":"NodeParagraph","Properties":{"id":"20240201213347-9e4h85z","updated":"20240201213347"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayIndexOutOfBoundsException"},{"Type":"NodeText","Data":"（数组越界错误）"}]}]},{"ID":"20240201213348-uw4q1ld","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213348-uw4q1ld","updated":"20240201213348"},"Children":[{"ID":"20240201213349-rpbtexq","Type":"NodeParagraph","Properties":{"id":"20240201213349-rpbtexq","updated":"20240201213349"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassCastException"},{"Type":"NodeText","Data":"（类型转换错误）"}]}]},{"ID":"20240201213350-32xy0dq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213350-32xy0dq","updated":"20240201213350"},"Children":[{"ID":"20240201213351-lg864w1","Type":"NodeParagraph","Properties":{"id":"20240201213351-lg864w1","updated":"20240201213351"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArithmeticException"},{"Type":"NodeText","Data":"（算术错误）"}]}]},{"ID":"20240201213352-zw2eu4i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213352-zw2eu4i","updated":"20240201213352"},"Children":[{"ID":"20240201213353-j0nhp6t","Type":"NodeParagraph","Properties":{"id":"20240201213353-j0nhp6t","updated":"20240201213353"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SecurityException"},{"Type":"NodeText","Data":" （安全错误比如权限不够）"}]}]},{"ID":"20240201213354-bgqsgca","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213354-bgqsgca","updated":"20240201213354"},"Children":[{"ID":"20240201213355-tnqulvr","Type":"NodeParagraph","Properties":{"id":"20240201213355-tnqulvr","updated":"20240201213355"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UnsupportedOperationException"},{"Type":"NodeText","Data":"(不支持的操作错误比如重复创建同一用户)"}]}]},{"ID":"20240201213356-nhif8c2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213356-nhif8c2","updated":"20240201213356"},"Children":[{"ID":"20240201213357-irkj646","Type":"NodeParagraph","Properties":{"id":"20240201213357-irkj646","updated":"20240201213357"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213358-a8gxyux","Type":"NodeParagraph","Properties":{"id":"20240201213358-a8gxyux","updated":"20240201213358"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/unchecked-exception.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213359-nns5z9d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213359-nns5z9d","updated":"20240201213359"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Throwable 类常用方法有哪些？"}]},{"ID":"20240201213360-me6seyd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213360-me6seyd","updated":"20240201213360"},"Children":[{"ID":"20240201213361-cxuyzhg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213361-cxuyzhg","updated":"20240201213361"},"Children":[{"ID":"20240201213362-w5wef02","Type":"NodeParagraph","Properties":{"id":"20240201213362-w5wef02","updated":"20240201213362"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"String getMessage()"},{"Type":"NodeText","Data":": 返回异常发生时的简要描述"}]}]},{"ID":"20240201213363-kcoohhn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213363-kcoohhn","updated":"20240201213363"},"Children":[{"ID":"20240201213364-le7yubs","Type":"NodeParagraph","Properties":{"id":"20240201213364-le7yubs","updated":"20240201213364"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"String toString()"},{"Type":"NodeText","Data":": 返回异常发生时的详细信息"}]}]},{"ID":"20240201213365-t2sm3vi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213365-t2sm3vi","updated":"20240201213365"},"Children":[{"ID":"20240201213366-3njolal","Type":"NodeParagraph","Properties":{"id":"20240201213366-3njolal","updated":"20240201213366"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"String getLocalizedMessage()"},{"Type":"NodeText","Data":": 返回异常对象的本地化信息。使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Throwable"},{"Type":"NodeText","Data":" 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getMessage()"},{"Type":"NodeText","Data":"返回的结果相同"}]}]},{"ID":"20240201213367-mwhsfbl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213367-mwhsfbl","updated":"20240201213367"},"Children":[{"ID":"20240201213368-rwybvke","Type":"NodeParagraph","Properties":{"id":"20240201213368-rwybvke","updated":"20240201213368"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"void printStackTrace()"},{"Type":"NodeText","Data":": 在控制台上打印 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Throwable"},{"Type":"NodeText","Data":" 对象封装的异常信息"}]}]}]},{"ID":"20240201213369-mfhogeo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213369-mfhogeo","updated":"20240201213369"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"try-catch-finally 如何使用？"}]},{"ID":"20240201213370-a48dme2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213370-a48dme2","updated":"20240201213370"},"Children":[{"ID":"20240201213371-hbqnhkk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213371-hbqnhkk","updated":"20240201213371"},"Children":[{"ID":"20240201213372-n27lq9l","Type":"NodeParagraph","Properties":{"id":"20240201213372-n27lq9l","updated":"20240201213372"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try"},{"Type":"NodeText","Data":"块：用于捕获异常。其后可接零个或多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":" 块，如果没有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":" 块，则必须跟一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" 块。"}]}]},{"ID":"20240201213373-s4wt64s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213373-s4wt64s","updated":"20240201213373"},"Children":[{"ID":"20240201213374-cwtanrm","Type":"NodeParagraph","Properties":{"id":"20240201213374-cwtanrm","updated":"20240201213374"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":"块：用于处理 try 捕获到的异常。"}]}]},{"ID":"20240201213375-nikqvbe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213375-nikqvbe","updated":"20240201213375"},"Children":[{"ID":"20240201213376-w8s4oxm","Type":"NodeParagraph","Properties":{"id":"20240201213376-w8s4oxm","updated":"20240201213376"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" 块：无论是否捕获或处理异常，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" 块里的语句都会被执行。当在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try"},{"Type":"NodeText","Data":" 块或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"catch"},{"Type":"NodeText","Data":" 块中遇到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"return"},{"Type":"NodeText","Data":" 语句时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" 语句块将在方法返回之前被执行。"}]}]}]},{"ID":"20240201213377-8l53sv3","Type":"NodeParagraph","Properties":{"id":"20240201213377-8l53sv3","updated":"20240201213377"},"Children":[{"Type":"NodeText","Data":"代码示例："}]},{"ID":"20240201213378-joobmiq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213378-joobmiq","updated":"20240201213378"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"try {\n    System.out.println(\"Try to do something\");\n    throw new RuntimeException(\"RuntimeException\");\n} catch (Exception e) {\n    System.out.println(\"Catch Exception -\u003e \" + e.getMessage());\n} finally {\n    System.out.println(\"Finally\");\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213379-636tc6k","Type":"NodeParagraph","Properties":{"id":"20240201213379-636tc6k","updated":"20240201213379"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213380-31y9ibq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213380-31y9ibq","updated":"20240201213380"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Try to do something\nCatch Exception -\u003e RuntimeException\nFinally\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213381-gfd1qk5","Type":"NodeParagraph","Properties":{"id":"20240201213381-gfd1qk5","updated":"20240201213381"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意：不要在 finally 语句块中使用 return!"},{"Type":"NodeText","Data":" 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。"}]},{"ID":"20240201213382-iu60pvj","Type":"NodeParagraph","Properties":{"id":"20240201213382-iu60pvj","updated":"20240201213382"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5","TextMarkTextContent":"jvm 官方文档"},{"Type":"NodeText","Data":"中有明确提到："}]},{"ID":"20240201213383-mlacahr","Type":"NodeBlockquote","Properties":{"id":"20240201213383-mlacahr","updated":"20240201213383"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213384-8fcyuxd","Type":"NodeParagraph","Properties":{"id":"20240201213384-8fcyuxd","updated":"20240201213384"},"Children":[{"Type":"NodeText","Data":"If the "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try"},{"Type":"NodeText","Data":" clause executes a "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"return"},{"Type":"NodeText","Data":", the compiled code does the following:"}]},{"ID":"20240201213385-30c8tqb","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213385-30c8tqb","updated":"20240201213385"},"Children":[{"ID":"20240201213386-pr888rc","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213386-pr888rc","updated":"20240201213386"},"Children":[{"ID":"20240201213387-34daf4n","Type":"NodeParagraph","Properties":{"id":"20240201213387-34daf4n","updated":"20240201213387"},"Children":[{"Type":"NodeText","Data":"Saves the return value (if any) in a local variable."}]}]},{"ID":"20240201213388-02sz8wf","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213388-02sz8wf","updated":"20240201213388"},"Children":[{"ID":"20240201213389-5jmwy6b","Type":"NodeParagraph","Properties":{"id":"20240201213389-5jmwy6b","updated":"20240201213389"},"Children":[{"Type":"NodeText","Data":"Executes a "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"jsr"},{"Type":"NodeText","Data":" to the code for the "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" clause."}]}]},{"ID":"20240201213390-d6fbb3m","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213390-d6fbb3m","updated":"20240201213390"},"Children":[{"ID":"20240201213391-ku4c4e0","Type":"NodeParagraph","Properties":{"id":"20240201213391-ku4c4e0","updated":"20240201213391"},"Children":[{"Type":"NodeText","Data":"Upon return from the "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" clause, returns the value saved in the local variable."}]}]}]}]},{"ID":"20240201213392-b56u0wj","Type":"NodeParagraph","Properties":{"id":"20240201213392-b56u0wj","updated":"20240201213392"},"Children":[{"Type":"NodeText","Data":"代码示例："}]},{"ID":"20240201213393-b1muz70","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213393-b1muz70","updated":"20240201213393"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public static void main(String[] args) {\n    System.out.println(f(2));\n}\n\npublic static int f(int value) {\n    try {\n        return value * value;\n    } finally {\n        if (value == 2) {\n            return 0;\n        }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213394-bgbmxah","Type":"NodeParagraph","Properties":{"id":"20240201213394-bgbmxah","updated":"20240201213394"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213395-veuop45","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213395-veuop45","updated":"20240201213395"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213396-yufpvyg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213396-yufpvyg","updated":"20240201213396"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"finally 中的代码一定会执行吗？"}]},{"ID":"20240201213397-5x9co79","Type":"NodeParagraph","Properties":{"id":"20240201213397-5x9co79","updated":"20240201213397"},"Children":[{"Type":"NodeText","Data":"不一定的！在某些情况下，finally 中的代码不会被执行。"}]},{"ID":"20240201213398-p5ptxpw","Type":"NodeParagraph","Properties":{"id":"20240201213398-p5ptxpw","updated":"20240201213398"},"Children":[{"Type":"NodeText","Data":"就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。"}]},{"ID":"20240201213399-oxo3byy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213399-oxo3byy","updated":"20240201213399"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"try {\n    System.out.println(\"Try to do something\");\n    throw new RuntimeException(\"RuntimeException\");\n} catch (Exception e) {\n    System.out.println(\"Catch Exception -\u003e \" + e.getMessage());\n    // 终止当前正在运行的Java虚拟机\n    System.exit(1);\n} finally {\n    System.out.println(\"Finally\");\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213400-iflbkh7","Type":"NodeParagraph","Properties":{"id":"20240201213400-iflbkh7","updated":"20240201213400"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213401-qwouzto","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213401-qwouzto","updated":"20240201213401"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Try to do something\nCatch Exception -\u003e RuntimeException\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213402-zm0ixyv","Type":"NodeParagraph","Properties":{"id":"20240201213402-zm0ixyv","updated":"20240201213402"},"Children":[{"Type":"NodeText","Data":"另外，在以下 2 种特殊情况下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" 块的代码也不会被执行："}]},{"ID":"20240201213403-cu8nap4","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213403-cu8nap4","updated":"20240201213403"},"Children":[{"ID":"20240201213404-y9m2821","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213404-y9m2821","updated":"20240201213404"},"Children":[{"ID":"20240201213405-l02a8bz","Type":"NodeParagraph","Properties":{"id":"20240201213405-l02a8bz","updated":"20240201213405"},"Children":[{"Type":"NodeText","Data":"程序所在的线程死亡。"}]}]},{"ID":"20240201213406-kafuose","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213406-kafuose","updated":"20240201213406"},"Children":[{"ID":"20240201213407-y35bgcv","Type":"NodeParagraph","Properties":{"id":"20240201213407-y35bgcv","updated":"20240201213407"},"Children":[{"Type":"NodeText","Data":"关闭 CPU。"}]}]}]},{"ID":"20240201213408-0qae1pe","Type":"NodeParagraph","Properties":{"id":"20240201213408-0qae1pe","updated":"20240201213408"},"Children":[{"Type":"NodeText","Data":"相关 issue："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/190","TextMarkTextContent":"https://github.com/Snailclimb/JavaGuide/issues/190"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213409-2o8xnky","Type":"NodeParagraph","Properties":{"id":"20240201213409-2o8xnky","updated":"20240201213409"},"Children":[{"Type":"NodeText","Data":"🧗🏻 进阶一下：从字节码角度分析"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try catch finally"},{"Type":"NodeText","Data":"这个语法糖背后的实现原理。"}]},{"ID":"20240201213410-6klvqcu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213410-6klvqcu","updated":"20240201213410"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":" 代替"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-catch-finally"},{"Type":"NodeText","Data":"？"}]},{"ID":"20240201213411-97ky1kj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213411-97ky1kj","updated":"20240201213411"},"Children":[{"ID":"20240201213412-nde4f4l","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213412-nde4f4l","updated":"20240201213412"},"Children":[{"ID":"20240201213413-fervge0","Type":"NodeParagraph","Properties":{"id":"20240201213413-fervge0","updated":"20240201213413"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适用范围（资源的定义）："},{"Type":"NodeText","Data":" 任何实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.AutoCloseable"},{"Type":"NodeText","Data":"或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.io.Closeable"},{"Type":"NodeText","Data":" 的对象"}]}]},{"ID":"20240201213414-8vgcx19","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213414-8vgcx19","updated":"20240201213414"},"Children":[{"ID":"20240201213415-fh09qlk","Type":"NodeParagraph","Properties":{"id":"20240201213415-fh09qlk","updated":"20240201213415"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"关闭资源和 finally 块的执行顺序："},{"Type":"NodeText","Data":" 在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":" 语句中，任何 catch 或 finally 块在声明的资源关闭后运行"}]}]}]},{"ID":"20240201213416-v5fduvv","Type":"NodeParagraph","Properties":{"id":"20240201213416-v5fduvv","updated":"20240201213416"},"Children":[{"Type":"NodeText","Data":"《Effective Java》中明确指出："}]},{"ID":"20240201213417-q892uez","Type":"NodeBlockquote","Properties":{"id":"20240201213417-q892uez","updated":"20240201213417"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213418-dizv9tu","Type":"NodeParagraph","Properties":{"id":"20240201213418-dizv9tu","updated":"20240201213418"},"Children":[{"Type":"NodeText","Data":"面对必须要关闭的资源，我们总是应该优先使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":" 而不是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-finally"},{"Type":"NodeText","Data":"。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":"语句让我们更容易编写必须要关闭的资源的代码，若采用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-finally"},{"Type":"NodeText","Data":"则几乎做不到这点。"}]}]},{"ID":"20240201213419-q18yoz7","Type":"NodeParagraph","Properties":{"id":"20240201213419-q18yoz7","updated":"20240201213419"},"Children":[{"Type":"NodeText","Data":"Java 中类似于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Scanner"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PrintWriter"},{"Type":"NodeText","Data":"等的资源都需要我们调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"close()"},{"Type":"NodeText","Data":"方法来手动关闭，一般情况下我们都是通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-catch-finally"},{"Type":"NodeText","Data":"语句来实现这个需求，如下："}]},{"ID":"20240201213420-1qudrkl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213420-1qudrkl","updated":"20240201213420"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//读取文本文件的内容\nScanner scanner = null;\ntry {\n    scanner = new Scanner(new File(\"D://read.txt\"));\n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} finally {\n    if (scanner != null) {\n        scanner.close();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213421-5waa2xe","Type":"NodeParagraph","Properties":{"id":"20240201213421-5waa2xe","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"使用 Java 7 之后的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":" 语句改造上面的代码:"}]},{"ID":"20240201213422-rx6x97i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213422-rx6x97i","updated":"20240201213422"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"try (Scanner scanner = new Scanner(new File(\"test.txt\"))) {\n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException fnfe) {\n    fnfe.printStackTrace();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213423-4kzzydc","Type":"NodeParagraph","Properties":{"id":"20240201213423-4kzzydc","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"当然多个资源需要关闭的时候，使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":" 实现起来也非常简单，如果你还是用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-catch-finally"},{"Type":"NodeText","Data":"可能会带来很多问题。"}]},{"ID":"20240201213424-ikvjudv","Type":"NodeParagraph","Properties":{"id":"20240201213424-ikvjudv","updated":"20240201213424"},"Children":[{"Type":"NodeText","Data":"通过使用分号分隔，可以在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"try-with-resources"},{"Type":"NodeText","Data":"块中声明多个资源。"}]},{"ID":"20240201213425-9nhvsgh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213425-9nhvsgh","updated":"20240201213425"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"try (BufferedInputStream bin = new BufferedInputStream(new FileInputStream(new File(\"test.txt\")));\n     BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(new File(\"out.txt\")))) {\n    int b;\n    while ((b = bin.read()) != -1) {\n        bout.write(b);\n    }\n}\ncatch (IOException e) {\n    e.printStackTrace();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213426-vn009jl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213426-vn009jl","updated":"20240201213426"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"异常使用有哪些需要注意的地方？"}]},{"ID":"20240201213427-lwsbz2o","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213427-lwsbz2o","updated":"20240201213427"},"Children":[{"ID":"20240201213428-20t6i7m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213428-20t6i7m","updated":"20240201213428"},"Children":[{"ID":"20240201213429-nxxj0mh","Type":"NodeParagraph","Properties":{"id":"20240201213429-nxxj0mh","updated":"20240201213429"},"Children":[{"Type":"NodeText","Data":"不要把异常定义为静态变量，因为这样会导致异常栈信息错乱。每次手动抛出异常，我们都需要手动 new 一个异常对象抛出。"}]}]},{"ID":"20240201213430-o8k3a22","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213430-o8k3a22","updated":"20240201213430"},"Children":[{"ID":"20240201213431-9h1agr3","Type":"NodeParagraph","Properties":{"id":"20240201213431-9h1agr3","updated":"20240201213431"},"Children":[{"Type":"NodeText","Data":"抛出的异常信息一定要有意义。"}]}]},{"ID":"20240201213432-24e6zvz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213432-24e6zvz","updated":"20240201213432"},"Children":[{"ID":"20240201213433-mr5qvq2","Type":"NodeParagraph","Properties":{"id":"20240201213433-mr5qvq2","updated":"20240201213433"},"Children":[{"Type":"NodeText","Data":"建议抛出更加具体的异常比如字符串转换为数字格式错误的时候应该抛出"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NumberFormatException"},{"Type":"NodeText","Data":"而不是其父类"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IllegalArgumentException"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213434-5ms0v47","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213434-5ms0v47","updated":"20240201213434"},"Children":[{"ID":"20240201213435-9b6hzwv","Type":"NodeParagraph","Properties":{"id":"20240201213435-9b6hzwv","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"使用日志打印异常之后就不要再抛出异常了（两者不要同时存在一段代码逻辑中）。"}]}]},{"ID":"20240201213436-6wtgk12","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213436-6wtgk12","updated":"20240201213436"},"Children":[{"ID":"20240201213437-stgxuh2","Type":"NodeParagraph","Properties":{"id":"20240201213437-stgxuh2","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213438-2tj5241","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213438-2tj5241","updated":"20240201213438"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"泛型"}]},{"ID":"20240201213439-rk559re","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213439-rk559re","updated":"20240201213439"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是泛型？有什么作用？"}]},{"ID":"20240201213440-3j4qzau","Type":"NodeParagraph","Properties":{"id":"20240201213440-3j4qzau","updated":"20240201213440"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Java 泛型（Generics）"},{"Type":"NodeText","Data":" 是 JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。"}]},{"ID":"20240201213441-w560eyo","Type":"NodeParagraph","Properties":{"id":"20240201213441-w560eyo","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList\u0026lt;Person\u0026gt; persons = new ArrayList\u0026lt;Person\u0026gt;()"},{"Type":"NodeText","Data":" 这行代码就指明了该 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 对象只能传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Person"},{"Type":"NodeText","Data":" 对象，如果传入其他类型的对象就会报错。"}]},{"ID":"20240201213442-8fjo7ir","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213442-8fjo7ir","updated":"20240201213442"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ArrayList\u003cE\u003e extends AbstractList\u003cE\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213443-7f0khbj","Type":"NodeParagraph","Properties":{"id":"20240201213443-7f0khbj","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"并且，原生 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 返回类型是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Object"},{"Type":"NodeText","Data":" ，需要手动转换类型才能使用，使用泛型后编译器自动转换。"}]},{"ID":"20240201213444-bqyl4sd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213444-bqyl4sd","updated":"20240201213444"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"泛型的使用方式有哪几种？"}]},{"ID":"20240201213445-rejesl8","Type":"NodeParagraph","Properties":{"id":"20240201213445-rejesl8","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"泛型一般有三种使用方式:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"泛型类"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"泛型接口"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"泛型方法"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213446-wyvrk5g","Type":"NodeParagraph","Properties":{"id":"20240201213446-wyvrk5g","updated":"20240201213446"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.泛型类"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213447-wpej5r2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213447-wpej5r2","updated":"20240201213447"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n//在实例化泛型类时，必须指定T的具体类型\npublic class Generic\u003cT\u003e{\n\n    private T key;\n\n    public Generic(T key) {\n        this.key = key;\n    }\n\n    public T getKey(){\n        return key;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213448-mseltma","Type":"NodeParagraph","Properties":{"id":"20240201213448-mseltma","updated":"20240201213448"},"Children":[{"Type":"NodeText","Data":"如何实例化泛型类："}]},{"ID":"20240201213449-9p6mz2w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213449-9p6mz2w","updated":"20240201213449"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Generic\u003cInteger\u003e genericInteger = new Generic\u003cInteger\u003e(123456);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213450-ols6uc3","Type":"NodeParagraph","Properties":{"id":"20240201213450-ols6uc3","updated":"20240201213450"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.泛型接口"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213451-01ylxod","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213451-01ylxod","updated":"20240201213451"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface Generator\u003cT\u003e {\n    public T method();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213452-yq1x4nt","Type":"NodeParagraph","Properties":{"id":"20240201213452-yq1x4nt","updated":"20240201213452"},"Children":[{"Type":"NodeText","Data":"实现泛型接口，不指定类型："}]},{"ID":"20240201213453-yp8coev","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213453-yp8coev","updated":"20240201213453"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class GeneratorImpl\u003cT\u003e implements Generator\u003cT\u003e{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213454-n0ma12n","Type":"NodeParagraph","Properties":{"id":"20240201213454-n0ma12n","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"实现泛型接口，指定类型："}]},{"ID":"20240201213455-zm1ny7h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213455-zm1ny7h","updated":"20240201213455"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class GeneratorImpl\u003cT\u003e implements Generator\u003cString\u003e{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213456-xmf79vt","Type":"NodeParagraph","Properties":{"id":"20240201213456-xmf79vt","updated":"20240201213456"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3.泛型方法"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213457-r1bfi1v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213457-r1bfi1v","updated":"20240201213457"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"   public static \u003c E \u003e void printArray( E[] inputArray )\n   {\n         for ( E element : inputArray ){\n            System.out.printf( \"%s \", element );\n         }\n         System.out.println();\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213458-nvg9zcg","Type":"NodeParagraph","Properties":{"id":"20240201213458-nvg9zcg","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"使用："}]},{"ID":"20240201213459-e1rs2jg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213459-e1rs2jg","updated":"20240201213459"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建不同类型数组：Integer, Double 和 Character\nInteger[] intArray = { 1, 2, 3 };\nString[] stringArray = { \"Hello\", \"World\" };\nprintArray( intArray  );\nprintArray( stringArray  );\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213460-rv74kfh","Type":"NodeBlockquote","Properties":{"id":"20240201213460-rv74kfh","updated":"20240201213460"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213461-bdku2lr","Type":"NodeParagraph","Properties":{"id":"20240201213461-bdku2lr","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"注意: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"public static \u0026lt; E \u0026gt; void printArray( E[] inputArray )"},{"Type":"NodeText","Data":" 一般被称为静态泛型方法;在 java 中泛型只是一个占位符，必须在传递类型后才能使用。类在实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，也就是说类中的泛型还没有传递真正的类型参数，静态的方法的加载就已经完成了，所以静态泛型方法是没有办法使用类上声明的泛型的。只能使用自己声明的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;E\u0026gt;"}]}]},{"ID":"20240201213462-ehkhjfa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213462-ehkhjfa","updated":"20240201213462"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"项目中哪里用到了泛型？"}]},{"ID":"20240201213463-heq6mrn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-heq6mrn","updated":"20240201213463"},"Children":[{"ID":"20240201213464-lhfx25c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-lhfx25c","updated":"20240201213464"},"Children":[{"ID":"20240201213465-qot9pgf","Type":"NodeParagraph","Properties":{"id":"20240201213465-qot9pgf","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"自定义接口通用返回结果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CommonResult\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":" 通过参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":" 可根据具体的返回类型动态指定结果的数据类型"}]}]},{"ID":"20240201213466-xvunqvv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213466-xvunqvv","updated":"20240201213466"},"Children":[{"ID":"20240201213467-qf18eu7","Type":"NodeParagraph","Properties":{"id":"20240201213467-qf18eu7","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"定义 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Excel"},{"Type":"NodeText","Data":" 处理类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExcelUtil\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":" 用于动态指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Excel"},{"Type":"NodeText","Data":" 导出的数据类型"}]}]},{"ID":"20240201213468-roeawu2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213468-roeawu2","updated":"20240201213468"},"Children":[{"ID":"20240201213469-lf0p0ft","Type":"NodeParagraph","Properties":{"id":"20240201213469-lf0p0ft","updated":"20240201213469"},"Children":[{"Type":"NodeText","Data":"构建集合工具类（参考 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Collections"},{"Type":"NodeText","Data":" 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sort"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"binarySearch"},{"Type":"NodeText","Data":" 方法）。"}]}]},{"ID":"20240201213470-qkhyx6o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213470-qkhyx6o","updated":"20240201213470"},"Children":[{"ID":"20240201213471-58za25p","Type":"NodeParagraph","Properties":{"id":"20240201213471-58za25p","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213472-554nc5j","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213472-554nc5j","updated":"20240201213472"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"反射"}]},{"ID":"20240201213473-j17ixy2","Type":"NodeParagraph","Properties":{"id":"20240201213473-j17ixy2","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"关于反射的详细解读，请看这篇文章 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./reflection.md","TextMarkTextContent":"Java 反射机制详解"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213474-tssscm4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213474-tssscm4","updated":"20240201213474"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何谓反射？"}]},{"ID":"20240201213475-4m83pdr","Type":"NodeParagraph","Properties":{"id":"20240201213475-4m83pdr","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。"}]},{"ID":"20240201213476-5gl9vky","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213476-5gl9vky","updated":"20240201213476"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"反射的优缺点？"}]},{"ID":"20240201213477-8a0fef1","Type":"NodeParagraph","Properties":{"id":"20240201213477-8a0fef1","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"反射可以让我们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。"}]},{"ID":"20240201213478-lmgqg9a","Type":"NodeParagraph","Properties":{"id":"20240201213478-lmgqg9a","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"不过，反射让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。"}]},{"ID":"20240201213479-gjbtps1","Type":"NodeParagraph","Properties":{"id":"20240201213479-gjbtps1","updated":"20240201213479"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://stackoverflow.com/questions/1392351/java-reflection-why-is-it-so-slow","TextMarkTextContent":"Java Reflection: Why is it so slow?"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213480-o5cy40v","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213480-o5cy40v","updated":"20240201213480"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"反射的应用场景？"}]},{"ID":"20240201213481-arn5v3v","Type":"NodeParagraph","Properties":{"id":"20240201213481-arn5v3v","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。但是！这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。"}]},{"ID":"20240201213482-7awfsfk","Type":"NodeParagraph","Properties":{"id":"20240201213482-7awfsfk","updated":"20240201213482"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。"}]},{"ID":"20240201213483-h609qo1","Type":"NodeParagraph","Properties":{"id":"20240201213483-h609qo1","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"比如下面是通过 JDK 实现动态代理的示例代码，其中就使用了反射类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Method"},{"Type":"NodeText","Data":" 来调用指定的方法。"}]},{"ID":"20240201213484-6hycrg3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213484-6hycrg3","updated":"20240201213484"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class DebugInvocationHandler implements InvocationHandler {\n    /**\n     * 代理类中的真实对象\n     */\n    private final Object target;\n\n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        System.out.println(\"before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        System.out.println(\"after method \" + method.getName());\n        return result;\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213485-chi6nz3","Type":"NodeParagraph","Properties":{"id":"20240201213485-chi6nz3","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"另外，像 Java 中的一大利器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注解"},{"Type":"NodeText","Data":" 的实现也用到了反射。"}]},{"ID":"20240201213486-bygoago","Type":"NodeParagraph","Properties":{"id":"20240201213486-bygoago","updated":"20240201213486"},"Children":[{"Type":"NodeText","Data":"为什么你使用 Spring 的时候 ，一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Value"},{"Type":"NodeText","Data":"注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？"}]},{"ID":"20240201213487-dt4sr3c","Type":"NodeParagraph","Properties":{"id":"20240201213487-dt4sr3c","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"这些都是因为你可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。"}]},{"ID":"20240201213488-n9wlds9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213488-n9wlds9","updated":"20240201213488"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"注解"}]},{"ID":"20240201213489-etgagen","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213489-etgagen","updated":"20240201213489"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何谓注解？"}]},{"ID":"20240201213490-euf08ss","Type":"NodeParagraph","Properties":{"id":"20240201213490-euf08ss","updated":"20240201213490"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Annotation"},{"Type":"NodeText","Data":" （注解） 是 Java5 开始引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。"}]},{"ID":"20240201213491-qjfpvfj","Type":"NodeParagraph","Properties":{"id":"20240201213491-qjfpvfj","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"注解本质是一个继承了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Annotation"},{"Type":"NodeText","Data":" 的特殊接口："}]},{"ID":"20240201213492-qq6uu4w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213492-qq6uu4w","updated":"20240201213492"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n\n}\n\npublic interface Override extends Annotation{\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213493-skg9m6g","Type":"NodeParagraph","Properties":{"id":"20240201213493-skg9m6g","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"JDK 提供了很多内置的注解（比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Override"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Deprecated"},{"Type":"NodeText","Data":"），同时，我们还可以自定义注解。"}]},{"ID":"20240201213494-vo8q0yx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213494-vo8q0yx","updated":"20240201213494"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注解的解析方法有哪几种？"}]},{"ID":"20240201213495-x77mdno","Type":"NodeParagraph","Properties":{"id":"20240201213495-x77mdno","updated":"20240201213495"},"Children":[{"Type":"NodeText","Data":"注解只有被解析之后才会生效，常见的解析方法有两种："}]},{"ID":"20240201213496-5p5qme5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213496-5p5qme5","updated":"20240201213496"},"Children":[{"ID":"20240201213497-egcczsd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213497-egcczsd","updated":"20240201213497"},"Children":[{"ID":"20240201213498-pqyjrcz","Type":"NodeParagraph","Properties":{"id":"20240201213498-pqyjrcz","updated":"20240201213498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编译期直接扫描"},{"Type":"NodeText","Data":"：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Override"},{"Type":"NodeText","Data":" 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。"}]}]},{"ID":"20240201213499-w6cfvll","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213499-w6cfvll","updated":"20240201213499"},"Children":[{"ID":"20240201213500-8z6eszs","Type":"NodeParagraph","Properties":{"id":"20240201213500-8z6eszs","updated":"20240201213500"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"运行期通过反射处理"},{"Type":"NodeText","Data":"：像框架中自带的注解(比如 Spring 框架的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Value"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":")都是通过反射来进行处理的。"}]}]}]},{"ID":"20240201213501-0jn9jlx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213501-0jn9jlx","updated":"20240201213501"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"SPI"}]},{"ID":"20240201213502-8t6hxty","Type":"NodeParagraph","Properties":{"id":"20240201213502-8t6hxty","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"关于 SPI 的详细解读，请看这篇文章 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./spi.md","TextMarkTextContent":"Java SPI 机制详解"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213503-rk0iomb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213503-rk0iomb","updated":"20240201213503"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何谓 SPI?"}]},{"ID":"20240201213504-5hetfz3","Type":"NodeParagraph","Properties":{"id":"20240201213504-5hetfz3","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"SPI 即 Service Provider Interface ，字面意思就是：“服务提供者的接口”，我的理解是：专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。"}]},{"ID":"20240201213505-mx97asm","Type":"NodeParagraph","Properties":{"id":"20240201213505-mx97asm","updated":"20240201213505"},"Children":[{"Type":"NodeText","Data":"SPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。"}]},{"ID":"20240201213506-p4wdb1o","Type":"NodeParagraph","Properties":{"id":"20240201213506-p4wdb1o","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"很多框架都使用了 Java 的 SPI 机制，比如：Spring 框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。"}]},{"ID":"20240201213507-ssbl764","Type":"NodeParagraph","Properties":{"id":"20240201213507-ssbl764","updated":"20240201213507"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/22e1830e0b0e4115a882751f6c417857tplv-k3u1fbpfcp-zoom-1.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213508-lfsckwx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213508-lfsckwx","updated":"20240201213508"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SPI 和 API 有什么区别？"}]},{"ID":"20240201213509-mohcm0z","Type":"NodeParagraph","Properties":{"id":"20240201213509-mohcm0z","updated":"20240201213509"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那 SPI 和 API 有啥区别？"}]},{"ID":"20240201213510-ay3t4eg","Type":"NodeParagraph","Properties":{"id":"20240201213510-ay3t4eg","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"说到 SPI 就不得不说一下 API 了，从广义上来说它们都属于接口，而且很容易混淆。下面先用一张图说明一下："}]},{"ID":"20240201213511-7fo6e4d","Type":"NodeParagraph","Properties":{"id":"20240201213511-7fo6e4d","updated":"20240201213511"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/spi/1ebd1df862c34880bc26b9d494535b3dtplv-k3u1fbpfcp-watermark.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213512-qn64l0w","Type":"NodeParagraph","Properties":{"id":"20240201213512-qn64l0w","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"一般模块之间都是通过接口进行通讯，那我们在服务调用方和服务实现方（也称服务提供者）之间引入一个“接口”。"}]},{"ID":"20240201213513-zir13eq","Type":"NodeParagraph","Properties":{"id":"20240201213513-zir13eq","updated":"20240201213513"},"Children":[{"Type":"NodeText","Data":"当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 API ，这种接口和实现都是放在实现方的。"}]},{"ID":"20240201213514-mndvj5i","Type":"NodeParagraph","Properties":{"id":"20240201213514-mndvj5i","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"当接口存在于调用方这边时，就是 SPI ，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。"}]},{"ID":"20240201213515-4stnnym","Type":"NodeParagraph","Properties":{"id":"20240201213515-4stnnym","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"举个通俗易懂的例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好几家芯片制造业公司，这个时候，只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的结果是一样的）。"}]},{"ID":"20240201213516-ckrs2u0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213516-ckrs2u0","updated":"20240201213516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SPI 的优缺点？"}]},{"ID":"20240201213517-wvhio8y","Type":"NodeParagraph","Properties":{"id":"20240201213517-wvhio8y","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"通过 SPI 机制能够大大地提高接口设计的灵活性，但是 SPI 机制也存在一些缺点，比如："}]},{"ID":"20240201213518-7khailv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213518-7khailv","updated":"20240201213518"},"Children":[{"ID":"20240201213519-th1zusc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213519-th1zusc","updated":"20240201213519"},"Children":[{"ID":"20240201213520-lo8lne8","Type":"NodeParagraph","Properties":{"id":"20240201213520-lo8lne8","updated":"20240201213520"},"Children":[{"Type":"NodeText","Data":"需要遍历加载所有的实现类，不能做到按需加载，这样效率还是相对较低的。"}]}]},{"ID":"20240201213521-50haqe1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213521-50haqe1","updated":"20240201213521"},"Children":[{"ID":"20240201213522-edpbs0o","Type":"NodeParagraph","Properties":{"id":"20240201213522-edpbs0o","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"当多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServiceLoader"},{"Type":"NodeText","Data":" 同时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"load"},{"Type":"NodeText","Data":" 时，会有并发问题。"}]}]}]},{"ID":"20240201213523-pnokjz3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213523-pnokjz3","updated":"20240201213523"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"序列化和反序列化"}]},{"ID":"20240201213524-yljtfs3","Type":"NodeParagraph","Properties":{"id":"20240201213524-yljtfs3","updated":"20240201213524"},"Children":[{"Type":"NodeText","Data":"关于序列化和反序列化的详细解读，请看这篇文章 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./serialization.md","TextMarkTextContent":"Java 序列化详解"},{"Type":"NodeText","Data":" ，里面涉及到的知识点和面试题更全面。"}]},{"ID":"20240201213525-0uoihxy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213525-0uoihxy","updated":"20240201213525"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是序列化?什么是反序列化?"}]},{"ID":"20240201213526-954qvdm","Type":"NodeParagraph","Properties":{"id":"20240201213526-954qvdm","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。"}]},{"ID":"20240201213527-y622dfk","Type":"NodeParagraph","Properties":{"id":"20240201213527-y622dfk","updated":"20240201213527"},"Children":[{"Type":"NodeText","Data":"简单来说："}]},{"ID":"20240201213528-rk0yut8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213528-rk0yut8","updated":"20240201213528"},"Children":[{"ID":"20240201213529-4otpp6d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213529-4otpp6d","updated":"20240201213529"},"Children":[{"ID":"20240201213530-xam6lgg","Type":"NodeParagraph","Properties":{"id":"20240201213530-xam6lgg","updated":"20240201213530"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化"},{"Type":"NodeText","Data":"：将数据结构或对象转换成二进制字节流的过程"}]}]},{"ID":"20240201213531-vhhdy20","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213531-vhhdy20","updated":"20240201213531"},"Children":[{"ID":"20240201213532-i5y0ksk","Type":"NodeParagraph","Properties":{"id":"20240201213532-i5y0ksk","updated":"20240201213532"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"反序列化"},{"Type":"NodeText","Data":"：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程"}]}]}]},{"ID":"20240201213533-g5y160d","Type":"NodeParagraph","Properties":{"id":"20240201213533-g5y160d","updated":"20240201213533"},"Children":[{"Type":"NodeText","Data":"对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。"}]},{"ID":"20240201213534-ihikmg6","Type":"NodeParagraph","Properties":{"id":"20240201213534-ihikmg6","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"下面是序列化和反序列化常见应用场景："}]},{"ID":"20240201213535-90o2mdk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213535-90o2mdk","updated":"20240201213535"},"Children":[{"ID":"20240201213536-b92kl6o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213536-b92kl6o","updated":"20240201213536"},"Children":[{"ID":"20240201213537-73jllj6","Type":"NodeParagraph","Properties":{"id":"20240201213537-73jllj6","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；"}]}]},{"ID":"20240201213538-1hg9f92","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213538-1hg9f92","updated":"20240201213538"},"Children":[{"ID":"20240201213539-z21sbn7","Type":"NodeParagraph","Properties":{"id":"20240201213539-z21sbn7","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；"}]}]},{"ID":"20240201213540-ymhd5e4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213540-ymhd5e4","updated":"20240201213540"},"Children":[{"ID":"20240201213541-0aepqja","Type":"NodeParagraph","Properties":{"id":"20240201213541-0aepqja","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；"}]}]},{"ID":"20240201213542-ix4wv94","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213542-ix4wv94","updated":"20240201213542"},"Children":[{"ID":"20240201213543-butffgv","Type":"NodeParagraph","Properties":{"id":"20240201213543-butffgv","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。"}]}]}]},{"ID":"20240201213544-43xevln","Type":"NodeParagraph","Properties":{"id":"20240201213544-43xevln","updated":"20240201213544"},"Children":[{"Type":"NodeText","Data":"维基百科是如是介绍序列化的："}]},{"ID":"20240201213545-bk1wx5v","Type":"NodeBlockquote","Properties":{"id":"20240201213545-bk1wx5v","updated":"20240201213545"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213546-9a3atoq","Type":"NodeParagraph","Properties":{"id":"20240201213546-9a3atoq","updated":"20240201213546"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化"},{"Type":"NodeText","Data":"（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。"}]}]},{"ID":"20240201213547-jajhse1","Type":"NodeParagraph","Properties":{"id":"20240201213547-jajhse1","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"综上："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。"}]},{"ID":"20240201213548-x8p3k47","Type":"NodeParagraph","Properties":{"id":"20240201213548-x8p3k47","updated":"20240201213548"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/a478c74d-2c48-40ae-9374-87aacf05188c.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213549-k5tzl11","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003cp style=\"text-align:right;font-size:13px;color:gray\"\u003ehttps://www.corejavaguru.com/java/serialization/interview-questions-1\u003c/p\u003e\n\u003c/div\u003e","HtmlBlockType":6,"Properties":{"id":"20240201213549-k5tzl11","updated":"20240201213549"}},{"ID":"20240201213550-nb1o7gk","Type":"NodeParagraph","Properties":{"id":"20240201213550-nb1o7gk","updated":"20240201213550"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化协议对应于 TCP/IP 4 层模型的哪一层？"}]},{"ID":"20240201213551-way03ga","Type":"NodeParagraph","Properties":{"id":"20240201213551-way03ga","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"我们知道网络通信的双方必须要采用和遵守相同的协议。TCP/IP 四层模型是下面这样的，序列化协议属于哪一层呢？"}]},{"ID":"20240201213552-jh7no1s","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213552-jh7no1s","updated":"20240201213552"},"Children":[{"ID":"20240201213553-mhtx513","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213553-mhtx513","updated":"20240201213553"},"Children":[{"ID":"20240201213554-w6x71vh","Type":"NodeParagraph","Properties":{"id":"20240201213554-w6x71vh","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"应用层"}]}]},{"ID":"20240201213555-g1ddulm","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213555-g1ddulm","updated":"20240201213555"},"Children":[{"ID":"20240201213556-2an384o","Type":"NodeParagraph","Properties":{"id":"20240201213556-2an384o","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"传输层"}]}]},{"ID":"20240201213557-upl7xwt","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213557-upl7xwt","updated":"20240201213557"},"Children":[{"ID":"20240201213558-yitapoo","Type":"NodeParagraph","Properties":{"id":"20240201213558-yitapoo","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"网络层"}]}]},{"ID":"20240201213559-wirgdoz","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213559-wirgdoz","updated":"20240201213559"},"Children":[{"ID":"20240201213560-j8lezej","Type":"NodeParagraph","Properties":{"id":"20240201213560-j8lezej","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"网络接口层"}]}]}]},{"ID":"20240201213561-cwr42vg","Type":"NodeParagraph","Properties":{"id":"20240201213561-cwr42vg","updated":"20240201213561"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"TCP/IP 四层模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213562-3xknhvp","Type":"NodeParagraph","Properties":{"id":"20240201213562-3xknhvp","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"如上图所示，OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。这不就对应的是序列化和反序列化么？"}]},{"ID":"20240201213563-9k44kr4","Type":"NodeParagraph","Properties":{"id":"20240201213563-9k44kr4","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"因为，OSI 七层协议模型中的应用层、表示层和会话层对应的都是 TCP/IP 四层模型中的应用层，所以序列化协议属于 TCP/IP 协议应用层的一部分。"}]},{"ID":"20240201213564-rzt399q","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213564-rzt399q","updated":"20240201213564"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如果有些字段不想进行序列化怎么办？"}]},{"ID":"20240201213565-wlqpbjw","Type":"NodeParagraph","Properties":{"id":"20240201213565-wlqpbjw","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"对于不想进行序列化的变量，使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 关键字修饰。"}]},{"ID":"20240201213566-zphk5ag","Type":"NodeParagraph","Properties":{"id":"20240201213566-zphk5ag","updated":"20240201213566"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 修饰的变量值不会被持久化和恢复。"}]},{"ID":"20240201213567-tovpva6","Type":"NodeParagraph","Properties":{"id":"20240201213567-tovpva6","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 还有几点注意："}]},{"ID":"20240201213568-ikfyrkd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-ikfyrkd","updated":"20240201213568"},"Children":[{"ID":"20240201213569-kf5cvoc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213569-kf5cvoc","updated":"20240201213569"},"Children":[{"ID":"20240201213570-mhxr5zn","Type":"NodeParagraph","Properties":{"id":"20240201213570-mhxr5zn","updated":"20240201213570"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 只能修饰变量，不能修饰类和方法。"}]}]},{"ID":"20240201213571-68f7ea8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-68f7ea8","updated":"20240201213571"},"Children":[{"ID":"20240201213572-5hbqgii","Type":"NodeParagraph","Properties":{"id":"20240201213572-5hbqgii","updated":"20240201213572"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int"},{"Type":"NodeText","Data":" 类型，那么反序列后结果就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213573-owiq0k5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-owiq0k5","updated":"20240201213573"},"Children":[{"ID":"20240201213574-kzmcp70","Type":"NodeParagraph","Properties":{"id":"20240201213574-kzmcp70","updated":"20240201213574"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static"},{"Type":"NodeText","Data":" 变量因为不属于任何对象(Object)，所以无论有没有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 关键字修饰，均不会被序列化。"}]}]}]},{"ID":"20240201213575-y0mjkro","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213575-y0mjkro","updated":"20240201213575"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见序列化协议有哪些？"}]},{"ID":"20240201213576-t456fo7","Type":"NodeParagraph","Properties":{"id":"20240201213576-t456fo7","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"JDK 自带的序列化方式一般不会用 ，因为序列化效率低并且存在安全问题。比较常用的序列化协议有 Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。"}]},{"ID":"20240201213577-68esd6s","Type":"NodeParagraph","Properties":{"id":"20240201213577-68esd6s","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。"}]},{"ID":"20240201213578-5y3e144","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213578-5y3e144","updated":"20240201213578"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么不推荐使用 JDK 自带的序列化？"}]},{"ID":"20240201213579-b61o7du","Type":"NodeParagraph","Properties":{"id":"20240201213579-b61o7du","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"我们很少或者说几乎不会直接使用 JDK 自带的序列化方式，主要原因有下面这些原因："}]},{"ID":"20240201213580-6armcko","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-6armcko","updated":"20240201213580"},"Children":[{"ID":"20240201213581-wtv1zd1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-wtv1zd1","updated":"20240201213581"},"Children":[{"ID":"20240201213582-o7d9trq","Type":"NodeParagraph","Properties":{"id":"20240201213582-o7d9trq","updated":"20240201213582"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不支持跨语言调用"},{"Type":"NodeText","Data":" : 如果调用的是其他语言开发的服务的时候就不支持了。"}]}]},{"ID":"20240201213583-zzairpa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-zzairpa","updated":"20240201213583"},"Children":[{"ID":"20240201213584-e2qe0kc","Type":"NodeParagraph","Properties":{"id":"20240201213584-e2qe0kc","updated":"20240201213584"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"性能差"},{"Type":"NodeText","Data":"：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。"}]}]},{"ID":"20240201213585-yk1diqm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213585-yk1diqm","updated":"20240201213585"},"Children":[{"ID":"20240201213586-2fks3c7","Type":"NodeParagraph","Properties":{"id":"20240201213586-2fks3c7","updated":"20240201213586"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存在安全问题"},{"Type":"NodeText","Data":"：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/","TextMarkTextContent":"应用安全：JAVA 反序列化漏洞之殇"},{"Type":"NodeText","Data":" 。"}]}]}]},{"ID":"20240201213587-ut8t2bw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213587-ut8t2bw","updated":"20240201213587"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"I/O"}]},{"ID":"20240201213588-dliaozk","Type":"NodeParagraph","Properties":{"id":"20240201213588-dliaozk","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"关于 I/O 的详细解读，请看下面这几篇文章，里面涉及到的知识点和面试题更全面。"}]},{"ID":"20240201213589-0y47vdb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213589-0y47vdb","updated":"20240201213589"},"Children":[{"ID":"20240201213590-mzssksy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213590-mzssksy","updated":"20240201213590"},"Children":[{"ID":"20240201213591-3hsciuf","Type":"NodeParagraph","Properties":{"id":"20240201213591-3hsciuf","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"../io/io-basis.md","TextMarkTextContent":"Java IO 基础知识总结"}]}]},{"ID":"20240201213592-2etvxhy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-2etvxhy","updated":"20240201213592"},"Children":[{"ID":"20240201213593-iafeftz","Type":"NodeParagraph","Properties":{"id":"20240201213593-iafeftz","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"../io/io-design-patterns.md","TextMarkTextContent":"Java IO 设计模式总结"}]}]},{"ID":"20240201213594-ysrppxs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213594-ysrppxs","updated":"20240201213594"},"Children":[{"ID":"20240201213595-1se6ch3","Type":"NodeParagraph","Properties":{"id":"20240201213595-1se6ch3","updated":"20240201213595"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"../io/io-model.md","TextMarkTextContent":"Java IO 模型详解"}]}]}]},{"ID":"20240201213596-hryd3xy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213596-hryd3xy","updated":"20240201213596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Java IO 流了解吗？"}]},{"ID":"20240201213597-814uw1t","Type":"NodeParagraph","Properties":{"id":"20240201213597-814uw1t","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"IO 即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Input/Output"},{"Type":"NodeText","Data":"，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。"}]},{"ID":"20240201213598-afwrh5s","Type":"NodeParagraph","Properties":{"id":"20240201213598-afwrh5s","updated":"20240201213598"},"Children":[{"Type":"NodeText","Data":"Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。"}]},{"ID":"20240201213599-f2c5l48","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213599-f2c5l48","updated":"20240201213599"},"Children":[{"ID":"20240201213600-t3loioa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213600-t3loioa","updated":"20240201213600"},"Children":[{"ID":"20240201213601-7ztypp8","Type":"NodeParagraph","Properties":{"id":"20240201213601-7ztypp8","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":"/"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Reader"},{"Type":"NodeText","Data":": 所有的输入流的基类，前者是字节输入流，后者是字符输入流。"}]}]},{"ID":"20240201213602-8ei8c9u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213602-8ei8c9u","updated":"20240201213602"},"Children":[{"ID":"20240201213603-oy24fcc","Type":"NodeParagraph","Properties":{"id":"20240201213603-oy24fcc","updated":"20240201213603"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":"/"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Writer"},{"Type":"NodeText","Data":": 所有输出流的基类，前者是字节输出流，后者是字符输出流。"}]}]}]},{"ID":"20240201213604-ju43zxn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213604-ju43zxn","updated":"20240201213604"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"I/O 流为什么要分为字节流和字符流呢?"}]},{"ID":"20240201213605-66qc794","Type":"NodeParagraph","Properties":{"id":"20240201213605-66qc794","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"问题本质想问："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？"}]},{"ID":"20240201213606-1ufnymk","Type":"NodeParagraph","Properties":{"id":"20240201213606-1ufnymk","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"个人认为主要有两点原因："}]},{"ID":"20240201213607-hvt3pv4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213607-hvt3pv4","updated":"20240201213607"},"Children":[{"ID":"20240201213608-rv2x28w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-rv2x28w","updated":"20240201213608"},"Children":[{"ID":"20240201213609-1ywh0uh","Type":"NodeParagraph","Properties":{"id":"20240201213609-1ywh0uh","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"字符流是由 Java 虚拟机将字节转换得到的，这个过程还算是比较耗时；"}]}]},{"ID":"20240201213610-1z5x8zj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-1z5x8zj","updated":"20240201213610"},"Children":[{"ID":"20240201213611-e1h89o2","Type":"NodeParagraph","Properties":{"id":"20240201213611-e1h89o2","updated":"20240201213611"},"Children":[{"Type":"NodeText","Data":"如果我们不知道编码类型的话，使用字节流的过程中很容易出现乱码问题。"}]}]}]},{"ID":"20240201213612-3lqd4z0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213612-3lqd4z0","updated":"20240201213612"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Java IO 中的设计模式有哪些？"}]},{"ID":"20240201213613-efngivc","Type":"NodeParagraph","Properties":{"id":"20240201213613-efngivc","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"参考答案："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"../io/io-design-patterns.md","TextMarkTextContent":"Java IO 设计模式总结"}]},{"ID":"20240201213614-q954boe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213614-q954boe","updated":"20240201213614"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"BIO、NIO 和 AIO 的区别？"}]},{"ID":"20240201213615-jsqptim","Type":"NodeParagraph","Properties":{"id":"20240201213615-jsqptim","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"参考答案："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"../io/io-model.md","TextMarkTextContent":"Java IO 模型详解"}]},{"ID":"20240201213616-qo94hts","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213616-qo94hts","updated":"20240201213616"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"语法糖"}]},{"ID":"20240201213617-ivek86b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213617-ivek86b","updated":"20240201213617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是语法糖？"}]},{"ID":"20240201213618-i95helq","Type":"NodeParagraph","Properties":{"id":"20240201213618-i95helq","updated":"20240201213618"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"语法糖（Syntactic sugar）"},{"Type":"NodeText","Data":" 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。"}]},{"ID":"20240201213619-v02km7z","Type":"NodeParagraph","Properties":{"id":"20240201213619-v02km7z","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"举个例子，Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for-each"},{"Type":"NodeText","Data":" 就是一个常用的语法糖，其原理其实就是基于普通的 for 循环和迭代器。"}]},{"ID":"20240201213620-ll8sil9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213620-ll8sil9","updated":"20240201213620"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String[] strs = {\"JavaGuide\", \"公众号：JavaGuide\", \"博客：https://javaguide.cn/\"};\nfor (String s : strs) {\n    System.out.println(s);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213621-dhpfp7x","Type":"NodeParagraph","Properties":{"id":"20240201213621-dhpfp7x","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"不过，JVM 其实并不能识别语法糖，Java 语法糖要想被正确执行，需要先通过编译器进行解糖，也就是在程序编译阶段将其转换成 JVM 认识的基本语法。这也侧面说明，Java 中真正支持语法糖的是 Java 编译器而不是 JVM。如果你去看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"com.sun.tools.javac.main.JavaCompiler"},{"Type":"NodeText","Data":"的源码，你会发现在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compile()"},{"Type":"NodeText","Data":"中有一个步骤就是调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"desugar()"},{"Type":"NodeText","Data":"，这个方法就是负责解语法糖的实现的。"}]},{"ID":"20240201213622-us3mir9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213622-us3mir9","updated":"20240201213622"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Java 中有哪些常见的语法糖？"}]},{"ID":"20240201213623-6c2rvx5","Type":"NodeParagraph","Properties":{"id":"20240201213623-6c2rvx5","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"Java 中最常用的语法糖主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式等。"}]},{"ID":"20240201213624-obc2fhu","Type":"NodeParagraph","Properties":{"id":"20240201213624-obc2fhu","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"关于这些语法糖的详细解读，请看这篇文章 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./syntactic-sugar.md","TextMarkTextContent":"Java 语法糖详解"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213625-8f68vi0","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213625-8f68vi0","updated":"20240201213625"}}]}