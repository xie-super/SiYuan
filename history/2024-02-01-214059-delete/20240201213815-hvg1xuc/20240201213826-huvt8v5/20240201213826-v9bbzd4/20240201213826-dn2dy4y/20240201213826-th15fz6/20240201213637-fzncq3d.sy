{"ID":"20240201213637-fzncq3d","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213637-fzncq3d","title":"serialization","updated":"20240201213637"},"Children":[{"ID":"20240201213638-vsicx0p","Type":"NodeThematicBreak","Properties":{"id":"20240201213638-vsicx0p","updated":"20240201213638"}},{"ID":"20240201213639-27w2tth","Type":"NodeParagraph","Properties":{"id":"20240201213639-27w2tth","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"title: Java 序列化详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213640-mxtz8h1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-mxtz8h1","updated":"20240201213640"},"Children":[{"ID":"20240201213641-pim9qr7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-pim9qr7","updated":"20240201213641"},"Children":[{"ID":"20240201213642-8fdci1o","Type":"NodeParagraph","Properties":{"id":"20240201213642-8fdci1o","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"Java基础"}]}]}]},{"ID":"20240201213643-wxgfqa7","Type":"NodeThematicBreak","Properties":{"id":"20240201213643-wxgfqa7","updated":"20240201213643"}},{"ID":"20240201213644-nx2rum8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213644-nx2rum8","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是序列化和反序列化?"}]},{"ID":"20240201213645-lpe82nj","Type":"NodeParagraph","Properties":{"id":"20240201213645-lpe82nj","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。"}]},{"ID":"20240201213646-b4ydols","Type":"NodeParagraph","Properties":{"id":"20240201213646-b4ydols","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"简单来说："}]},{"ID":"20240201213647-k3ymclb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-k3ymclb","updated":"20240201213647"},"Children":[{"ID":"20240201213648-m3iqotm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-m3iqotm","updated":"20240201213648"},"Children":[{"ID":"20240201213649-ii7s08n","Type":"NodeParagraph","Properties":{"id":"20240201213649-ii7s08n","updated":"20240201213649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化"},{"Type":"NodeText","Data":"：将数据结构或对象转换成二进制字节流的过程"}]}]},{"ID":"20240201213650-js5tfxk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-js5tfxk","updated":"20240201213650"},"Children":[{"ID":"20240201213651-m297fuj","Type":"NodeParagraph","Properties":{"id":"20240201213651-m297fuj","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"反序列化"},{"Type":"NodeText","Data":"：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程"}]}]}]},{"ID":"20240201213652-m4zcu68","Type":"NodeParagraph","Properties":{"id":"20240201213652-m4zcu68","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。"}]},{"ID":"20240201213653-337y1p7","Type":"NodeParagraph","Properties":{"id":"20240201213653-337y1p7","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"下面是序列化和反序列化常见应用场景："}]},{"ID":"20240201213654-0jldhwu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-0jldhwu","updated":"20240201213654"},"Children":[{"ID":"20240201213655-hx2xtvu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-hx2xtvu","updated":"20240201213655"},"Children":[{"ID":"20240201213656-6e1ny9z","Type":"NodeParagraph","Properties":{"id":"20240201213656-6e1ny9z","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；"}]}]},{"ID":"20240201213657-9qb8kis","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213657-9qb8kis","updated":"20240201213657"},"Children":[{"ID":"20240201213658-9p9zq8x","Type":"NodeParagraph","Properties":{"id":"20240201213658-9p9zq8x","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；"}]}]},{"ID":"20240201213659-tffott5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-tffott5","updated":"20240201213659"},"Children":[{"ID":"20240201213660-84f76vm","Type":"NodeParagraph","Properties":{"id":"20240201213660-84f76vm","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；"}]}]},{"ID":"20240201213661-wqyrkkd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-wqyrkkd","updated":"20240201213661"},"Children":[{"ID":"20240201213662-dd6bnew","Type":"NodeParagraph","Properties":{"id":"20240201213662-dd6bnew","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。"}]}]}]},{"ID":"20240201213663-pjlx7s2","Type":"NodeParagraph","Properties":{"id":"20240201213663-pjlx7s2","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"维基百科是如是介绍序列化的："}]},{"ID":"20240201213664-9na0ogb","Type":"NodeBlockquote","Properties":{"id":"20240201213664-9na0ogb","updated":"20240201213664"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213665-r7wpl0v","Type":"NodeParagraph","Properties":{"id":"20240201213665-r7wpl0v","updated":"20240201213665"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化"},{"Type":"NodeText","Data":"（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。"}]}]},{"ID":"20240201213666-7wrnjtp","Type":"NodeParagraph","Properties":{"id":"20240201213666-7wrnjtp","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"综上："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。"}]},{"ID":"20240201213667-2rc3inu","Type":"NodeParagraph","Properties":{"id":"20240201213667-2rc3inu","updated":"20240201213667"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/a478c74d-2c48-40ae-9374-87aacf05188c.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213668-0esohd2","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003cp style=\"text-align:right;font-size:13px;color:gray\"\u003ehttps://www.corejavaguru.com/java/serialization/interview-questions-1\u003c/p\u003e\n\u003c/div\u003e","HtmlBlockType":6,"Properties":{"id":"20240201213668-0esohd2","updated":"20240201213668"}},{"ID":"20240201213669-nech24a","Type":"NodeParagraph","Properties":{"id":"20240201213669-nech24a","updated":"20240201213669"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"序列化协议对应于 TCP/IP 4 层模型的哪一层？"}]},{"ID":"20240201213670-uty3x5f","Type":"NodeParagraph","Properties":{"id":"20240201213670-uty3x5f","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"我们知道网络通信的双方必须要采用和遵守相同的协议。TCP/IP 四层模型是下面这样的，序列化协议属于哪一层呢？"}]},{"ID":"20240201213671-vcl3hnd","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213671-vcl3hnd","updated":"20240201213671"},"Children":[{"ID":"20240201213672-6p0v7ta","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213672-6p0v7ta","updated":"20240201213672"},"Children":[{"ID":"20240201213673-aaeaezd","Type":"NodeParagraph","Properties":{"id":"20240201213673-aaeaezd","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"应用层"}]}]},{"ID":"20240201213674-v2ly0ql","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213674-v2ly0ql","updated":"20240201213674"},"Children":[{"ID":"20240201213675-aca9wr4","Type":"NodeParagraph","Properties":{"id":"20240201213675-aca9wr4","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"传输层"}]}]},{"ID":"20240201213676-dvyrcug","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213676-dvyrcug","updated":"20240201213676"},"Children":[{"ID":"20240201213677-fp9r6t2","Type":"NodeParagraph","Properties":{"id":"20240201213677-fp9r6t2","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"网络层"}]}]},{"ID":"20240201213678-mh1bxbg","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213678-mh1bxbg","updated":"20240201213678"},"Children":[{"ID":"20240201213679-cy72wld","Type":"NodeParagraph","Properties":{"id":"20240201213679-cy72wld","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"网络接口层"}]}]}]},{"ID":"20240201213680-tjey39v","Type":"NodeParagraph","Properties":{"id":"20240201213680-tjey39v","updated":"20240201213680"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"TCP/IP 四层模型","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/network/tcp-ip-4-model.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213681-c4wmkaw","Type":"NodeParagraph","Properties":{"id":"20240201213681-c4wmkaw","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"如上图所示，OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。这不就对应的是序列化和反序列化么？"}]},{"ID":"20240201213682-lafpvts","Type":"NodeParagraph","Properties":{"id":"20240201213682-lafpvts","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"因为，OSI 七层协议模型中的应用层、表示层和会话层对应的都是 TCP/IP 四层模型中的应用层，所以序列化协议属于 TCP/IP 协议应用层的一部分。"}]},{"ID":"20240201213683-oeifhsb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213683-oeifhsb","updated":"20240201213683"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见序列化协议有哪些？"}]},{"ID":"20240201213684-ktxzeak","Type":"NodeParagraph","Properties":{"id":"20240201213684-ktxzeak","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"JDK 自带的序列化方式一般不会用 ，因为序列化效率低并且存在安全问题。比较常用的序列化协议有 Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。"}]},{"ID":"20240201213685-4vou2sz","Type":"NodeParagraph","Properties":{"id":"20240201213685-4vou2sz","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。"}]},{"ID":"20240201213686-lqnlvhk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213686-lqnlvhk","updated":"20240201213686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JDK 自带的序列化方式"}]},{"ID":"20240201213687-s3ra5o8","Type":"NodeParagraph","Properties":{"id":"20240201213687-s3ra5o8","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"JDK 自带的序列化，只需实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.io.Serializable"},{"Type":"NodeText","Data":"接口即可。"}]},{"ID":"20240201213688-aa0qa7l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213688-aa0qa7l","updated":"20240201213688"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Builder\n@ToString\npublic class RpcRequest implements Serializable {\n    private static final long serialVersionUID = 1905122041950251207L;\n    private String requestId;\n    private String interfaceName;\n    private String methodName;\n    private Object[] parameters;\n    private Class\u003c?\u003e[] paramTypes;\n    private RpcMessageTypeEnum rpcMessageTypeEnum;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213689-4dhgd9v","Type":"NodeParagraph","Properties":{"id":"20240201213689-4dhgd9v","updated":"20240201213689"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"serialVersionUID 有什么作用？"}]},{"ID":"20240201213690-f0xyloi","Type":"NodeParagraph","Properties":{"id":"20240201213690-f0xyloi","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"序列化号 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 属于版本控制的作用。反序列化时，会检查 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 是否和当前类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 一致。如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 不一致则会抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InvalidClassException"},{"Type":"NodeText","Data":" 异常。强烈推荐每个序列化类都手动指定其 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":"，如果不手动指定，那么编译器会动态生成默认的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213691-00cntc6","Type":"NodeParagraph","Properties":{"id":"20240201213691-00cntc6","updated":"20240201213691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"serialVersionUID 不是被 static 变量修饰了吗？为什么还会被“序列化”？"}]},{"ID":"20240201213692-e06ba9i","Type":"NodeParagraph","Properties":{"id":"20240201213692-e06ba9i","updated":"20240201213692"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s code","TextMarkTextContent":"static"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":" 修饰的变量是静态变量，位于方法区，本身是不会被序列化的。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s code","TextMarkTextContent":"static"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":" 变量是属于类的而不是对象。你反序列之后，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s code","TextMarkTextContent":"static"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":" 变量的值就像是默认赋予给了对象一样，看着就像是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s code","TextMarkTextContent":"static"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":" 变量被序列化，实际只是假象罢了。"}]},{"ID":"20240201213693-kgzke2e","Type":"NodeParagraph","Properties":{"id":"20240201213693-kgzke2e","updated":"20240201213693"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/2174","TextMarkTextContent":"issue#2174"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static"},{"Type":"NodeText","Data":" 修饰的变量是静态变量，位于方法区，本身是不会被序列化的。但是，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 的序列化做了特殊处理，在序列化时，会将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 序列化到二进制字节流中；在反序列化时，也会解析它并做一致性判断。"}]},{"ID":"20240201213694-mf97f3j","Type":"NodeParagraph","Properties":{"id":"20240201213694-mf97f3j","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"官方说明如下："}]},{"ID":"20240201213695-5w80nwe","Type":"NodeBlockquote","Properties":{"id":"20240201213695-5w80nwe","updated":"20240201213695"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213696-8dumk74","Type":"NodeParagraph","Properties":{"id":"20240201213696-8dumk74","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"A serializable class can declare its own serialVersionUID explicitly by declaring a field named "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026quot;serialVersionUID\u0026quot;"},{"Type":"NodeText","Data":" that must be "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":", and of type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"long"},{"Type":"NodeText","Data":";"}]},{"ID":"20240201213697-aa7qqf0","Type":"NodeParagraph","Properties":{"id":"20240201213697-aa7qqf0","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"如果想显式指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" ，则需要在类中使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":" 关键字来修饰一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"long"},{"Type":"NodeText","Data":" 类型的变量，变量名字必须为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026quot;serialVersionUID\u0026quot;"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213698-cpvneti","Type":"NodeParagraph","Properties":{"id":"20240201213698-cpvneti","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"serialVersionUID"},{"Type":"NodeText","Data":" 只是用来被 JVM 识别，实际并没有被序列化。"}]},{"ID":"20240201213699-wqdhkv5","Type":"NodeParagraph","Properties":{"id":"20240201213699-wqdhkv5","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果有些字段不想进行序列化怎么办？"}]},{"ID":"20240201213700-rx7u3vc","Type":"NodeParagraph","Properties":{"id":"20240201213700-rx7u3vc","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"对于不想进行序列化的变量，可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 关键字修饰。"}]},{"ID":"20240201213701-r3aripu","Type":"NodeParagraph","Properties":{"id":"20240201213701-r3aripu","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 修饰的变量值不会被持久化和恢复。"}]},{"ID":"20240201213702-e0k37nn","Type":"NodeParagraph","Properties":{"id":"20240201213702-e0k37nn","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 还有几点注意："}]},{"ID":"20240201213703-tgdj5lx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-tgdj5lx","updated":"20240201213703"},"Children":[{"ID":"20240201213704-00draj3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-00draj3","updated":"20240201213704"},"Children":[{"ID":"20240201213705-msalnup","Type":"NodeParagraph","Properties":{"id":"20240201213705-msalnup","updated":"20240201213705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 只能修饰变量，不能修饰类和方法。"}]}]},{"ID":"20240201213706-mr6kqji","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-mr6kqji","updated":"20240201213706"},"Children":[{"ID":"20240201213707-vtzzacl","Type":"NodeParagraph","Properties":{"id":"20240201213707-vtzzacl","updated":"20240201213707"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int"},{"Type":"NodeText","Data":" 类型，那么反序列后结果就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213708-1s2wnsg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-1s2wnsg","updated":"20240201213708"},"Children":[{"ID":"20240201213709-9dg775a","Type":"NodeParagraph","Properties":{"id":"20240201213709-9dg775a","updated":"20240201213709"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static"},{"Type":"NodeText","Data":" 变量因为不属于任何对象(Object)，所以无论有没有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transient"},{"Type":"NodeText","Data":" 关键字修饰，均不会被序列化。"}]}]}]},{"ID":"20240201213710-sga2tyl","Type":"NodeParagraph","Properties":{"id":"20240201213710-sga2tyl","updated":"20240201213710"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么不推荐使用 JDK 自带的序列化？"}]},{"ID":"20240201213711-taqd5g1","Type":"NodeParagraph","Properties":{"id":"20240201213711-taqd5g1","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"我们很少或者说几乎不会直接使用 JDK 自带的序列化方式，主要原因有下面这些原因："}]},{"ID":"20240201213712-c73anuq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-c73anuq","updated":"20240201213712"},"Children":[{"ID":"20240201213713-ne9npwz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213713-ne9npwz","updated":"20240201213713"},"Children":[{"ID":"20240201213714-25wobee","Type":"NodeParagraph","Properties":{"id":"20240201213714-25wobee","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不支持跨语言调用"},{"Type":"NodeText","Data":" : 如果调用的是其他语言开发的服务的时候就不支持了。"}]}]},{"ID":"20240201213715-2wdnety","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213715-2wdnety","updated":"20240201213715"},"Children":[{"ID":"20240201213716-sfea3fk","Type":"NodeParagraph","Properties":{"id":"20240201213716-sfea3fk","updated":"20240201213716"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"性能差"},{"Type":"NodeText","Data":"：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。"}]}]},{"ID":"20240201213717-iz04zm1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213717-iz04zm1","updated":"20240201213717"},"Children":[{"ID":"20240201213718-gi4ceay","Type":"NodeParagraph","Properties":{"id":"20240201213718-gi4ceay","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存在安全问题"},{"Type":"NodeText","Data":"：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/","TextMarkTextContent":"应用安全:JAVA 反序列化漏洞之殇 - Cryin"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/37562657/answer/1916596031","TextMarkTextContent":"Java 反序列化安全漏洞怎么回事? - Monica"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213719-j8hao0f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213719-j8hao0f","updated":"20240201213719"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Kryo"}]},{"ID":"20240201213720-t1pz4lo","Type":"NodeParagraph","Properties":{"id":"20240201213720-t1pz4lo","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"Kryo 是一个高性能的序列化/反序列化工具，由于其变长存储特性并使用了字节码生成机制，拥有较高的运行速度和较小的字节码体积。"}]},{"ID":"20240201213721-v9i5ntu","Type":"NodeParagraph","Properties":{"id":"20240201213721-v9i5ntu","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"另外，Kryo 已经是一种非常成熟的序列化实现了，已经在 Twitter、Groupon、Yahoo 以及多个著名开源项目（如 Hive、Storm）中广泛的使用。"}]},{"ID":"20240201213722-unrqpvp","Type":"NodeParagraph","Properties":{"id":"20240201213722-unrqpvp","updated":"20240201213722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/guide-rpc-framework","TextMarkTextContent":"guide-rpc-framework"},{"Type":"NodeText","Data":" 就是使用的 kryo 进行序列化，序列化和反序列化相关的代码如下："}]},{"ID":"20240201213723-k688ewp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213723-k688ewp","updated":"20240201213723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * Kryo serialization class, Kryo serialization efficiency is very high, but only compatible with Java language\n *\n * @author shuang.kou\n * @createTime 2020年05月13日 19:29:00\n */\n@Slf4j\npublic class KryoSerializer implements Serializer {\n\n    /**\n     * Because Kryo is not thread safe. So, use ThreadLocal to store Kryo objects\n     */\n    private final ThreadLocal\u003cKryo\u003e kryoThreadLocal = ThreadLocal.withInitial(() -\u003e {\n        Kryo kryo = new Kryo();\n        kryo.register(RpcResponse.class);\n        kryo.register(RpcRequest.class);\n        return kryo;\n    });\n\n    @Override\n    public byte[] serialize(Object obj) {\n        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n             Output output = new Output(byteArrayOutputStream)) {\n            Kryo kryo = kryoThreadLocal.get();\n            // Object-\u003ebyte:将对象序列化为byte数组\n            kryo.writeObject(output, obj);\n            kryoThreadLocal.remove();\n            return output.toBytes();\n        } catch (Exception e) {\n            throw new SerializeException(\"Serialization failed\");\n        }\n    }\n\n    @Override\n    public \u003cT\u003e T deserialize(byte[] bytes, Class\u003cT\u003e clazz) {\n        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n             Input input = new Input(byteArrayInputStream)) {\n            Kryo kryo = kryoThreadLocal.get();\n            // byte-\u003eObject:从byte数组中反序列化出对象\n            Object o = kryo.readObject(input, clazz);\n            kryoThreadLocal.remove();\n            return clazz.cast(o);\n        } catch (Exception e) {\n            throw new SerializeException(\"Deserialization failed\");\n        }\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213724-ydl36th","Type":"NodeParagraph","Properties":{"id":"20240201213724-ydl36th","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"GitHub 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/EsotericSoftware/kryo","TextMarkTextContent":"https://github.com/EsotericSoftware/kryo"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213725-99arrpi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213725-99arrpi","updated":"20240201213725"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Protobuf"}]},{"ID":"20240201213726-uwbtd0w","Type":"NodeParagraph","Properties":{"id":"20240201213726-uwbtd0w","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"Protobuf 出自于 Google，性能还比较优秀，也支持多种语言，同时还是跨平台的。就是在使用中过于繁琐，因为你需要自己定义 IDL 文件和生成对应的序列化代码。这样虽然不灵活，但是，另一方面导致 protobuf 没有序列化漏洞的风险。"}]},{"ID":"20240201213727-a0ydh3u","Type":"NodeBlockquote","Properties":{"id":"20240201213727-a0ydh3u","updated":"20240201213727"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213728-gsdya8g","Type":"NodeParagraph","Properties":{"id":"20240201213728-gsdya8g","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"Protobuf 包含序列化格式的定义、各种语言的库以及一个 IDL 编译器。正常情况下你需要定义 proto 文件，然后使用 IDL 编译器编译成你需要的语言"}]}]},{"ID":"20240201213729-yi65fb6","Type":"NodeParagraph","Properties":{"id":"20240201213729-yi65fb6","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"一个简单的 proto 文件如下："}]},{"ID":"20240201213730-nmt3rqa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cHJvdG9idWY=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213730-nmt3rqa","updated":"20240201213730"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHJvdG9idWY=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// protobuf的版本\nsyntax = \"proto3\";\n// SearchRequest会被编译成不同的编程语言的相应对象，比如Java中的class、Go中的struct\nmessage Person {\n  //string类型字段\n  string name = 1;\n  // int 类型字段\n  int32 age = 2;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213731-6i7o9ld","Type":"NodeParagraph","Properties":{"id":"20240201213731-6i7o9ld","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"GitHub 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/protocolbuffers/protobuf","TextMarkTextContent":"https://github.com/protocolbuffers/protobuf"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213732-5erxnko","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213732-5erxnko","updated":"20240201213732"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ProtoStuff"}]},{"ID":"20240201213733-bj4ydtt","Type":"NodeParagraph","Properties":{"id":"20240201213733-bj4ydtt","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"由于 Protobuf 的易用性，它的哥哥 Protostuff 诞生了。"}]},{"ID":"20240201213734-99br5o8","Type":"NodeParagraph","Properties":{"id":"20240201213734-99br5o8","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"protostuff 基于 Google protobuf，但是提供了更多的功能和更简易的用法。虽然更加易用，但是不代表 ProtoStuff 性能更差。"}]},{"ID":"20240201213735-wtp6cgt","Type":"NodeParagraph","Properties":{"id":"20240201213735-wtp6cgt","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"GitHub 地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/protostuff/protostuff","TextMarkTextContent":"https://github.com/protostuff/protostuff"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213736-79dokoz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213736-79dokoz","updated":"20240201213736"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Hessian"}]},{"ID":"20240201213737-791b5mr","Type":"NodeParagraph","Properties":{"id":"20240201213737-791b5mr","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"Hessian 是一个轻量级的，自定义描述的二进制 RPC 协议。Hessian 是一个比较老的序列化实现了，并且同样也是跨语言的。"}]},{"ID":"20240201213738-coy2toz","Type":"NodeParagraph","Properties":{"id":"20240201213738-coy2toz","updated":"20240201213738"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/8613ec4c-bde5-47bf-897e-99e0f90b9fa3.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213739-hzsr2pl","Type":"NodeParagraph","Properties":{"id":"20240201213739-hzsr2pl","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"Dubbo2.x 默认启用的序列化方式是 Hessian2 ,但是，Dubbo 对 Hessian2 进行了修改，不过大体结构还是差不多。"}]},{"ID":"20240201213740-o8h7vfj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213740-o8h7vfj","updated":"20240201213740"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213741-54rprab","Type":"NodeParagraph","Properties":{"id":"20240201213741-54rprab","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"Kryo 是专门针对 Java 语言序列化方式并且性能非常好，如果你的应用是专门针对 Java 语言的话可以考虑使用，并且 Dubbo 官网的一篇文章中提到说推荐使用 Kryo 作为生产环境的序列化方式。(文章地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://cn.dubbo.apache.org/zh-cn/docsv2.7/user/serialization/","TextMarkTextContent":"https://cn.dubbo.apache.org/zh-cn/docsv2.7/user/serialization/"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213742-24ck5yi","Type":"NodeParagraph","Properties":{"id":"20240201213742-24ck5yi","updated":"20240201213742"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/569e541a-22b2-4846-aa07-0ad479f07440-20230814090158124.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213743-8e1r0j0","Type":"NodeParagraph","Properties":{"id":"20240201213743-8e1r0j0","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"像 Protobuf、 ProtoStuff、hessian 这类都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。"}]},{"ID":"20240201213744-4rka594","Type":"NodeParagraph","Properties":{"id":"20240201213744-4rka594","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"除了我上面介绍到的序列化方式的话，还有像 Thrift，Avro 这些。"}]},{"ID":"20240201213745-2h3iu23","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-2h3iu23","updated":"20240201213745"}}]}