{"ID":"20240201213655-q1qcecc","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213655-q1qcecc","title":"why-there-only-value-passing-in-java","updated":"20240201213655"},"Children":[{"ID":"20240201213656-vgvjopb","Type":"NodeThematicBreak","Properties":{"id":"20240201213656-vgvjopb","updated":"20240201213656"}},{"ID":"20240201213657-32rkx8w","Type":"NodeParagraph","Properties":{"id":"20240201213657-32rkx8w","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"title: Java 值传递详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213658-qlqkiam","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-qlqkiam","updated":"20240201213658"},"Children":[{"ID":"20240201213659-14dplnk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-14dplnk","updated":"20240201213659"},"Children":[{"ID":"20240201213660-c428kjx","Type":"NodeParagraph","Properties":{"id":"20240201213660-c428kjx","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"Java基础"}]}]}]},{"ID":"20240201213661-6ejp4d6","Type":"NodeThematicBreak","Properties":{"id":"20240201213661-6ejp4d6","updated":"20240201213661"}},{"ID":"20240201213662-muizmlx","Type":"NodeParagraph","Properties":{"id":"20240201213662-muizmlx","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"开始之前，我们先来搞懂下面这两个概念："}]},{"ID":"20240201213663-5wmjyp0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-5wmjyp0","updated":"20240201213663"},"Children":[{"ID":"20240201213664-es5a4zp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-es5a4zp","updated":"20240201213664"},"Children":[{"ID":"20240201213665-8w84woy","Type":"NodeParagraph","Properties":{"id":"20240201213665-8w84woy","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"形参\u0026实参"}]}]},{"ID":"20240201213666-xoeyb0g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213666-xoeyb0g","updated":"20240201213666"},"Children":[{"ID":"20240201213667-7bzg0rl","Type":"NodeParagraph","Properties":{"id":"20240201213667-7bzg0rl","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"值传递\u0026引用传递"}]}]}]},{"ID":"20240201213668-z81yheq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213668-z81yheq","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"形参\u0026实参"}]},{"ID":"20240201213669-qaozbzu","Type":"NodeParagraph","Properties":{"id":"20240201213669-qaozbzu","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"方法的定义可能会用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"参数"},{"Type":"NodeText","Data":"（有参的方法），参数在程序语言中分为："}]},{"ID":"20240201213670-btvdrqo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-btvdrqo","updated":"20240201213670"},"Children":[{"ID":"20240201213671-rzaim3u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213671-rzaim3u","updated":"20240201213671"},"Children":[{"ID":"20240201213672-h93wyyg","Type":"NodeParagraph","Properties":{"id":"20240201213672-h93wyyg","updated":"20240201213672"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实参（实际参数，Arguments）"},{"Type":"NodeText","Data":"：用于传递给函数/方法的参数，必须有确定的值。"}]}]},{"ID":"20240201213673-0hbgm2z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213673-0hbgm2z","updated":"20240201213673"},"Children":[{"ID":"20240201213674-3so52ta","Type":"NodeParagraph","Properties":{"id":"20240201213674-3so52ta","updated":"20240201213674"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"形参（形式参数，Parameters）"},{"Type":"NodeText","Data":"：用于定义函数/方法，接收实参，不需要有确定的值。"}]}]}]},{"ID":"20240201213675-mhpt6ep","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213675-mhpt6ep","updated":"20240201213675"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"String hello = \"Hello!\";\n// hello 为实参\nsayHello(hello);\n// str 为形参\nvoid sayHello(String str) {\n    System.out.println(str);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213676-iopuqib","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213676-iopuqib","updated":"20240201213676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"值传递\u0026引用传递"}]},{"ID":"20240201213677-r5blfgf","Type":"NodeParagraph","Properties":{"id":"20240201213677-r5blfgf","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"程序设计语言将实参传递给方法（或函数）的方式分为两种："}]},{"ID":"20240201213678-iemqp9d","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213678-iemqp9d","updated":"20240201213678"},"Children":[{"ID":"20240201213679-ttwzsto","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-ttwzsto","updated":"20240201213679"},"Children":[{"ID":"20240201213680-yzb8izb","Type":"NodeParagraph","Properties":{"id":"20240201213680-yzb8izb","updated":"20240201213680"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"值传递"},{"Type":"NodeText","Data":"：方法接收的是实参值的拷贝，会创建副本。"}]}]},{"ID":"20240201213681-jglx9az","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-jglx9az","updated":"20240201213681"},"Children":[{"ID":"20240201213682-qupzs6f","Type":"NodeParagraph","Properties":{"id":"20240201213682-qupzs6f","updated":"20240201213682"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"引用传递"},{"Type":"NodeText","Data":"：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。"}]}]}]},{"ID":"20240201213683-390qap2","Type":"NodeParagraph","Properties":{"id":"20240201213683-390qap2","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"很多程序设计语言（比如 C++、 Pascal )提供了两种参数传递的方式，不过，在 Java 中只有值传递。"}]},{"ID":"20240201213684-dqltp65","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213684-dqltp65","updated":"20240201213684"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么 Java 只有值传递？"}]},{"ID":"20240201213685-qfr7bbw","Type":"NodeParagraph","Properties":{"id":"20240201213685-qfr7bbw","updated":"20240201213685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么说 Java 只有值传递呢？"},{"Type":"NodeText","Data":" 不需要太多废话，我通过 3 个例子来给大家证明。"}]},{"ID":"20240201213686-364y1so","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213686-364y1so","updated":"20240201213686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"案例 1：传递基本类型参数"}]},{"ID":"20240201213687-sihoewi","Type":"NodeParagraph","Properties":{"id":"20240201213687-sihoewi","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"代码："}]},{"ID":"20240201213688-38hkrzs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213688-38hkrzs","updated":"20240201213688"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public static void main(String[] args) {\n    int num1 = 10;\n    int num2 = 20;\n    swap(num1, num2);\n    System.out.println(\"num1 = \" + num1);\n    System.out.println(\"num2 = \" + num2);\n}\n\npublic static void swap(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n    System.out.println(\"a = \" + a);\n    System.out.println(\"b = \" + b);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213689-jlen6rw","Type":"NodeParagraph","Properties":{"id":"20240201213689-jlen6rw","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213690-h5qw532","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213690-h5qw532","updated":"20240201213690"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"a = 20\nb = 10\nnum1 = 10\nnum2 = 20\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213691-3y3mjm9","Type":"NodeParagraph","Properties":{"id":"20240201213691-3y3mjm9","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"解析："}]},{"ID":"20240201213692-wllz762","Type":"NodeParagraph","Properties":{"id":"20240201213692-wllz762","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"swap()"},{"Type":"NodeText","Data":" 方法中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"a"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"b"},{"Type":"NodeText","Data":" 的值进行交换，并不会影响到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"num1"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"num2"},{"Type":"NodeText","Data":"。因为，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"a"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"b"},{"Type":"NodeText","Data":" 的值，只是从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"num1"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"num2"},{"Type":"NodeText","Data":" 的复制过来的。也就是说，a、b 相当于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"num1"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"num2"},{"Type":"NodeText","Data":" 的副本，副本的内容无论怎么修改，都不会影响到原件本身。"}]},{"ID":"20240201213693-f87ho6r","Type":"NodeParagraph","Properties":{"id":"20240201213693-f87ho6r","updated":"20240201213693"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/java-value-passing-01.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213694-b3wb92f","Type":"NodeParagraph","Properties":{"id":"20240201213694-b3wb92f","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看案例 2。"}]},{"ID":"20240201213695-1mjxxvl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213695-1mjxxvl","updated":"20240201213695"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"案例 2：传递引用类型参数 1"}]},{"ID":"20240201213696-iiiyyad","Type":"NodeParagraph","Properties":{"id":"20240201213696-iiiyyad","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"代码："}]},{"ID":"20240201213697-re5an3q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213697-re5an3q","updated":"20240201213697"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"  public static void main(String[] args) {\n      int[] arr = { 1, 2, 3, 4, 5 };\n      System.out.println(arr[0]);\n      change(arr);\n      System.out.println(arr[0]);\n  }\n\n  public static void change(int[] array) {\n      // 将数组的第一个元素变为0\n      array[0] = 0;\n  }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213698-r2symrw","Type":"NodeParagraph","Properties":{"id":"20240201213698-r2symrw","updated":"20240201213698"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213699-t9tosu0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213699-t9tosu0","updated":"20240201213699"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"1\n0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213700-iv5h46h","Type":"NodeParagraph","Properties":{"id":"20240201213700-iv5h46h","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"解析："}]},{"ID":"20240201213701-62eerv4","Type":"NodeParagraph","Properties":{"id":"20240201213701-62eerv4","updated":"20240201213701"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/java-value-passing-02.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213702-7yep9t6","Type":"NodeParagraph","Properties":{"id":"20240201213702-7yep9t6","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。"}]},{"ID":"20240201213703-8nc0id0","Type":"NodeParagraph","Properties":{"id":"20240201213703-8nc0id0","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！"}]},{"ID":"20240201213704-pjx7gnu","Type":"NodeParagraph","Properties":{"id":"20240201213704-pjx7gnu","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"也就是说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"change"},{"Type":"NodeText","Data":" 方法的参数拷贝的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"arr"},{"Type":"NodeText","Data":" （实参）的地址，因此，它和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"arr"},{"Type":"NodeText","Data":" 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。"}]},{"ID":"20240201213705-qelb1t4","Type":"NodeParagraph","Properties":{"id":"20240201213705-qelb1t4","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例！"}]},{"ID":"20240201213706-ep6fw5c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213706-ep6fw5c","updated":"20240201213706"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"案例 3：传递引用类型参数 2"}]},{"ID":"20240201213707-uenlavg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213707-uenlavg","updated":"20240201213707"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Person {\n    private String name;\n   // 省略构造函数、Getter\u0026Setter方法\n}\n\npublic static void main(String[] args) {\n    Person xiaoZhang = new Person(\"小张\");\n    Person xiaoLi = new Person(\"小李\");\n    swap(xiaoZhang, xiaoLi);\n    System.out.println(\"xiaoZhang:\" + xiaoZhang.getName());\n    System.out.println(\"xiaoLi:\" + xiaoLi.getName());\n}\n\npublic static void swap(Person person1, Person person2) {\n    Person temp = person1;\n    person1 = person2;\n    person2 = temp;\n    System.out.println(\"person1:\" + person1.getName());\n    System.out.println(\"person2:\" + person2.getName());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213708-vp0vqro","Type":"NodeParagraph","Properties":{"id":"20240201213708-vp0vqro","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"输出:"}]},{"ID":"20240201213709-abe3vca","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213709-abe3vca","updated":"20240201213709"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"person1:小李\nperson2:小张\nxiaoZhang:小张\nxiaoLi:小李\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213710-o1pj6ql","Type":"NodeParagraph","Properties":{"id":"20240201213710-o1pj6ql","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"解析："}]},{"ID":"20240201213711-fvmi3ds","Type":"NodeParagraph","Properties":{"id":"20240201213711-fvmi3ds","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！"}]},{"ID":"20240201213712-92seeyq","Type":"NodeParagraph","Properties":{"id":"20240201213712-92seeyq","updated":"20240201213712"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"swap"},{"Type":"NodeText","Data":" 方法的参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"person1"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"person2"},{"Type":"NodeText","Data":" 只是拷贝的实参 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"xiaoZhang"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"xiaoLi"},{"Type":"NodeText","Data":" 的地址。因此， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"person1"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"person2"},{"Type":"NodeText","Data":" 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"xiaoZhang"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"xiaoLi"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213713-fyt60df","Type":"NodeParagraph","Properties":{"id":"20240201213713-fyt60df","updated":"20240201213713"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/basis/java-value-passing-03.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213714-2kwdq2g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213714-2kwdq2g","updated":"20240201213714"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"引用传递是怎么样的？"}]},{"ID":"20240201213715-jg2n1pu","Type":"NodeParagraph","Properties":{"id":"20240201213715-jg2n1pu","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"看到这里，相信你已经知道了 Java 中只有值传递，是没有引用传递的。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"但是，引用传递到底长什么样呢？下面以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C++"},{"Type":"NodeText","Data":" 的代码为例，让你看一下引用传递的庐山真面目。"}]},{"ID":"20240201213716-9gjuj3o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Qysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213716-9gjuj3o","updated":"20240201213716"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Qysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include \u003ciostream\u003e\n\nvoid incr(int\u0026 num)\n{\n    std::cout \u003c\u003c \"incr before: \" \u003c\u003c num \u003c\u003c \"\\n\";\n    num++;\n    std::cout \u003c\u003c \"incr after: \" \u003c\u003c num \u003c\u003c \"\\n\";\n}\n\nint main()\n{\n    int age = 10;\n    std::cout \u003c\u003c \"invoke before: \" \u003c\u003c age \u003c\u003c \"\\n\";\n    incr(age);\n    std::cout \u003c\u003c \"invoke after: \" \u003c\u003c age \u003c\u003c \"\\n\";\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213717-k91ph18","Type":"NodeParagraph","Properties":{"id":"20240201213717-k91ph18","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20240201213718-b7jxoea","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213718-b7jxoea","updated":"20240201213718"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"invoke before: 10\nincr before: 10\nincr after: 11\ninvoke after: 11\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213719-q0298ms","Type":"NodeParagraph","Properties":{"id":"20240201213719-q0298ms","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"分析：可以看到，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"incr"},{"Type":"NodeText","Data":" 函数中对形参的修改，可以影响到实参的值。要注意：这里的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"incr"},{"Type":"NodeText","Data":" 形参的数据类型用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int\u0026amp;"},{"Type":"NodeText","Data":" 才为引用传递，如果是用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int"},{"Type":"NodeText","Data":" 的话还是值传递哦！"}]},{"ID":"20240201213720-m2pt79h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213720-m2pt79h","updated":"20240201213720"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么 Java 不引入引用传递呢？"}]},{"ID":"20240201213721-hitwif0","Type":"NodeParagraph","Properties":{"id":"20240201213721-hitwif0","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"引用传递看似很好，能在方法内就直接把实参的值修改了，但是，为什么 Java 不引入引用传递呢？"}]},{"ID":"20240201213722-u9485pj","Type":"NodeParagraph","Properties":{"id":"20240201213722-u9485pj","updated":"20240201213722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意：以下为个人观点看法，并非来自于 Java 官方："}]},{"ID":"20240201213723-xje7oxq","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213723-xje7oxq","updated":"20240201213723"},"Children":[{"ID":"20240201213724-yvmw4mx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213724-yvmw4mx","updated":"20240201213724"},"Children":[{"ID":"20240201213725-7r528pd","Type":"NodeParagraph","Properties":{"id":"20240201213725-7r528pd","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"出于安全考虑，方法内部对值进行的操作，对于调用者都是未知的（把方法定义为接口，调用方不关心具体实现）。你也想象一下，如果拿着银行卡去取钱，取的是 100，扣的是 200，是不是很可怕。"}]}]},{"ID":"20240201213726-tmvj9dh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213726-tmvj9dh","updated":"20240201213726"},"Children":[{"ID":"20240201213727-fquhz2j","Type":"NodeParagraph","Properties":{"id":"20240201213727-fquhz2j","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"Java 之父 James Gosling 在设计之初就看到了 C、C++ 的许多弊端，所以才想着去设计一门新的语言 Java。在他设计 Java 的时候就遵循了简单易用的原则，摒弃了许多开发者一不留意就会造成问题的“特性”，语言本身的东西少了，开发者要学习的东西也少了。"}]}]}]},{"ID":"20240201213728-n36f1e0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213728-n36f1e0","updated":"20240201213728"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213729-bnuujfv","Type":"NodeParagraph","Properties":{"id":"20240201213729-bnuujfv","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"Java 中将实参传递给方法（或函数）的方式是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"值传递"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213730-bjmeyvd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213730-bjmeyvd","updated":"20240201213730"},"Children":[{"ID":"20240201213731-peg20yv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213731-peg20yv","updated":"20240201213731"},"Children":[{"ID":"20240201213732-d2e91zz","Type":"NodeParagraph","Properties":{"id":"20240201213732-d2e91zz","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。"}]}]},{"ID":"20240201213733-wsdjnrr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-wsdjnrr","updated":"20240201213733"},"Children":[{"ID":"20240201213734-ipt7q3p","Type":"NodeParagraph","Properties":{"id":"20240201213734-ipt7q3p","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。"}]}]}]},{"ID":"20240201213735-6d81b7r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213735-6d81b7r","updated":"20240201213735"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213736-0ersxno","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213736-0ersxno","updated":"20240201213736"},"Children":[{"ID":"20240201213737-ww7v59v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-ww7v59v","updated":"20240201213737"},"Children":[{"ID":"20240201213738-e0fopyv","Type":"NodeParagraph","Properties":{"id":"20240201213738-e0fopyv","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"《Java 核心技术卷 Ⅰ》基础知识第十版第四章 4.5 小节"}]}]},{"ID":"20240201213739-f91hb2t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-f91hb2t","updated":"20240201213739"},"Children":[{"ID":"20240201213740-eq23ky2","Type":"NodeParagraph","Properties":{"id":"20240201213740-eq23ky2","updated":"20240201213740"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/31203609/answer/576030121","TextMarkTextContent":"Java 到底是值传递还是引用传递？ - Hollis 的回答 - 知乎"}]}]},{"ID":"20240201213741-56s189x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-56s189x","updated":"20240201213741"},"Children":[{"ID":"20240201213742-ppgikem","Type":"NodeParagraph","Properties":{"id":"20240201213742-ppgikem","updated":"20240201213742"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html","TextMarkTextContent":"Oracle Java Tutorials - Passing Information to a Method or a Constructor"}]}]},{"ID":"20240201213743-r8c2yh3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-r8c2yh3","updated":"20240201213743"},"Children":[{"ID":"20240201213744-8ooao9v","Type":"NodeParagraph","Properties":{"id":"20240201213744-8ooao9v","updated":"20240201213744"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mappingthejourney.com/single-post/2017/06/29/episode-3-interview-with-james-gosling-father-of-java/","TextMarkTextContent":"Interview with James Gosling, Father of Java"}]}]}]},{"ID":"20240201213745-u0ewodm","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-u0ewodm","updated":"20240201213745"}}]}