{"ID":"20240201213404-4t5ar9t","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213404-4t5ar9t","title":"jvm-intro","updated":"20240201213404"},"Children":[{"ID":"20240201213405-epxuuej","Type":"NodeThematicBreak","Properties":{"id":"20240201213405-epxuuej","updated":"20240201213405"}},{"ID":"20240201213406-g5ceywh","Type":"NodeParagraph","Properties":{"id":"20240201213406-g5ceywh","updated":"20240201213406"},"Children":[{"Type":"NodeText","Data":"title: 大白话带你认识 JVM"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213407-5wrxisi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213407-5wrxisi","updated":"20240201213407"},"Children":[{"ID":"20240201213408-38nhxqn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213408-38nhxqn","updated":"20240201213408"},"Children":[{"ID":"20240201213409-fn05k3k","Type":"NodeParagraph","Properties":{"id":"20240201213409-fn05k3k","updated":"20240201213409"},"Children":[{"Type":"NodeText","Data":"JVM"}]}]}]},{"ID":"20240201213410-24qtiu8","Type":"NodeThematicBreak","Properties":{"id":"20240201213410-24qtiu8","updated":"20240201213410"}},{"ID":"20240201213411-dgbq4co","Type":"NodeBlockquote","Properties":{"id":"20240201213411-dgbq4co","updated":"20240201213411"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213412-twmmpqk","Type":"NodeParagraph","Properties":{"id":"20240201213412-twmmpqk","updated":"20240201213412"},"Children":[{"Type":"NodeText","Data":"来自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/user/5c2400afe51d45451758aa96","TextMarkTextContent":"说出你的愿望吧丷"},{"Type":"NodeText","Data":"投稿，原文地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/post/5e1505d0f265da5d5d744050","TextMarkTextContent":"https://juejin.im/post/5e1505d0f265da5d5d744050"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213413-0uky7mu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213413-0uky7mu","updated":"20240201213413"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"前言"}]},{"ID":"20240201213414-wk5xxj2","Type":"NodeParagraph","Properties":{"id":"20240201213414-wk5xxj2","updated":"20240201213414"},"Children":[{"Type":"NodeText","Data":"如果在文中用词或者理解方面出现问题，欢迎指出。此文旨在提及而不深究，但会尽量效率地把知识点都抛出来"}]},{"ID":"20240201213415-e5pv431","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213415-e5pv431","updated":"20240201213415"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"一、JVM 的基本介绍"}]},{"ID":"20240201213416-5cxvm58","Type":"NodeParagraph","Properties":{"id":"20240201213416-5cxvm58","updated":"20240201213416"},"Children":[{"Type":"NodeText","Data":"JVM 是 Java Virtual Machine 的缩写，它是一个虚构出来的计算机，一种规范。通过在实际的计算机上仿真模拟各类计算机功能实现···"}]},{"ID":"20240201213417-sapduwv","Type":"NodeParagraph","Properties":{"id":"20240201213417-sapduwv","updated":"20240201213417"},"Children":[{"Type":"NodeText","Data":"好，其实抛开这么专业的句子不说，就知道 JVM 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。"}]},{"ID":"20240201213418-d0u449d","Type":"NodeParagraph","Properties":{"id":"20240201213418-d0u449d","updated":"20240201213418"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/da/da0380a04d9c04facd2add5f6dba06fa.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213419-jh8m6t7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213419-jh8m6t7","updated":"20240201213419"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1 Java 文件是如何被运行的"}]},{"ID":"20240201213420-4rq5roo","Type":"NodeParagraph","Properties":{"id":"20240201213420-4rq5roo","updated":"20240201213420"},"Children":[{"Type":"NodeText","Data":"比如我们现在写了一个 HelloWorld.java 好了，那这个 HelloWorld.java 抛开所有东西不谈，那是不是就类似于一个文本文件，只是这个文本文件它写的都是英文，而且有一定的缩进而已。"}]},{"ID":"20240201213421-cwvx4hf","Type":"NodeParagraph","Properties":{"id":"20240201213421-cwvx4hf","updated":"20240201213421"},"Children":[{"Type":"NodeText","Data":"那我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JVM"},{"Type":"NodeText","Data":" 是不认识文本文件的，所以它需要一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编译"},{"Type":"NodeText","Data":" ，让其成为一个它会读二进制文件的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"HelloWorld.class"}]},{"ID":"20240201213422-2u75wv8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213422-2u75wv8","updated":"20240201213422"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"① 类加载器"}]},{"ID":"20240201213423-w88tpt7","Type":"NodeParagraph","Properties":{"id":"20240201213423-w88tpt7","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JVM"},{"Type":"NodeText","Data":" 想要执行这个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":".class"},{"Type":"NodeText","Data":" 文件，我们需要将其装进一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类加载器"},{"Type":"NodeText","Data":" 中，它就像一个搬运工一样，会把所有的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":".class"},{"Type":"NodeText","Data":" 文件全部搬进 JVM 里面来。"}]},{"ID":"20240201213424-yh3l470","Type":"NodeParagraph","Properties":{"id":"20240201213424-yh3l470","updated":"20240201213424"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/2f/2f012fde94376f43a25dbe1dd07e0dd8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213425-wbpyktm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213425-wbpyktm","updated":"20240201213425"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"② 方法区"}]},{"ID":"20240201213426-bjxgvc2","Type":"NodeParagraph","Properties":{"id":"20240201213426-bjxgvc2","updated":"20240201213426"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法区"},{"Type":"NodeText","Data":" 是用于存放类似于元数据信息方面的数据的，比如类信息，常量，静态变量，编译后代码···等"}]},{"ID":"20240201213427-aa82ahn","Type":"NodeParagraph","Properties":{"id":"20240201213427-aa82ahn","updated":"20240201213427"},"Children":[{"Type":"NodeText","Data":"类加载器将 .class 文件搬过来就是先丢到这一块上"}]},{"ID":"20240201213428-o5u2it7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213428-o5u2it7","updated":"20240201213428"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"③ 堆"}]},{"ID":"20240201213429-zluqs44","Type":"NodeParagraph","Properties":{"id":"20240201213429-zluqs44","updated":"20240201213429"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"堆"},{"Type":"NodeText","Data":" 主要放了一些存储的数据，比如对象实例，数组···等，它和方法区都同属于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程共享区域"},{"Type":"NodeText","Data":" 。也就是说它们都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程不安全"},{"Type":"NodeText","Data":" 的"}]},{"ID":"20240201213430-x43gzqj","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213430-x43gzqj","updated":"20240201213430"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"④ 栈"}]},{"ID":"20240201213431-3swngz5","Type":"NodeParagraph","Properties":{"id":"20240201213431-3swngz5","updated":"20240201213431"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"栈"},{"Type":"NodeText","Data":" 这是我们的代码运行空间。我们编写的每一个方法都会放到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"栈"},{"Type":"NodeText","Data":" 里面运行。"}]},{"ID":"20240201213432-3022h1t","Type":"NodeParagraph","Properties":{"id":"20240201213432-3022h1t","updated":"20240201213432"},"Children":[{"Type":"NodeText","Data":"我们会听说过 本地方法栈 或者 本地方法接口 这两个名词，不过我们基本不会涉及这两块的内容，它俩底层是使用 C 来进行工作的，和 Java 没有太大的关系。"}]},{"ID":"20240201213433-ybeupva","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213433-ybeupva","updated":"20240201213433"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"⑤ 程序计数器"}]},{"ID":"20240201213434-4htr15h","Type":"NodeParagraph","Properties":{"id":"20240201213434-4htr15h","updated":"20240201213434"},"Children":[{"Type":"NodeText","Data":"主要就是完成一个加载工作，类似于一个指针一样的，指向下一行我们需要执行的代码。和栈一样，都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程独享"},{"Type":"NodeText","Data":" 的，就是说每一个线程都会有自己对应的一块区域而不会存在并发和多线程的问题。"}]},{"ID":"20240201213435-md8d7fa","Type":"NodeParagraph","Properties":{"id":"20240201213435-md8d7fa","updated":"20240201213435"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/c6/c602f57ea9297f50bbc265f1821d6263.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213436-j79cr04","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213436-j79cr04","updated":"20240201213436"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"小总结"}]},{"ID":"20240201213437-4gdsh3i","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213437-4gdsh3i","updated":"20240201213437"},"Children":[{"ID":"20240201213438-g72q7e4","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213438-g72q7e4","updated":"20240201213438"},"Children":[{"ID":"20240201213439-eifeam1","Type":"NodeParagraph","Properties":{"id":"20240201213439-eifeam1","updated":"20240201213439"},"Children":[{"Type":"NodeText","Data":"Java 文件经过编译后变成 .class 字节码文件"}]}]},{"ID":"20240201213440-5etlyny","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213440-5etlyny","updated":"20240201213440"},"Children":[{"ID":"20240201213441-xiwj7vm","Type":"NodeParagraph","Properties":{"id":"20240201213441-xiwj7vm","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"字节码文件通过类加载器被搬运到 JVM 虚拟机中"}]}]},{"ID":"20240201213442-y6kqngr","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213442-y6kqngr","updated":"20240201213442"},"Children":[{"ID":"20240201213443-cjjb4mt","Type":"NodeParagraph","Properties":{"id":"20240201213443-cjjb4mt","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"虚拟机主要的 5 大块：方法区，堆都为线程共享区域，有线程安全问题，栈和本地方法栈和计数器都是独享区域，不存在线程安全问题，而 JVM 的调优主要就是围绕堆，栈两大块进行"}]}]}]},{"ID":"20240201213444-vuures5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213444-vuures5","updated":"20240201213444"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.2 简单的代码例子"}]},{"ID":"20240201213445-epkna61","Type":"NodeParagraph","Properties":{"id":"20240201213445-epkna61","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"一个简单的学生类"}]},{"ID":"20240201213446-lv60vja","Type":"NodeParagraph","Properties":{"id":"20240201213446-lv60vja","updated":"20240201213446"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/12/12f0b239db65b8a95f0ce90e9a580e4d.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213447-fktqe2l","Type":"NodeParagraph","Properties":{"id":"20240201213447-fktqe2l","updated":"20240201213447"},"Children":[{"Type":"NodeText","Data":"一个 main 方法"}]},{"ID":"20240201213448-cfp2cov","Type":"NodeParagraph","Properties":{"id":"20240201213448-cfp2cov","updated":"20240201213448"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/0c/0c6d94ab88a9f2b923f5fea3f95bc2eb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213449-1pj4vpy","Type":"NodeParagraph","Properties":{"id":"20240201213449-1pj4vpy","updated":"20240201213449"},"Children":[{"Type":"NodeText","Data":"执行 main 方法的步骤如下:"}]},{"ID":"20240201213450-h9j0bfu","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213450-h9j0bfu","updated":"20240201213450"},"Children":[{"ID":"20240201213451-d3yugqm","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213451-d3yugqm","updated":"20240201213451"},"Children":[{"ID":"20240201213452-31rc3rx","Type":"NodeParagraph","Properties":{"id":"20240201213452-31rc3rx","updated":"20240201213452"},"Children":[{"Type":"NodeText","Data":"编译好 App.java 后得到 App.class 后，执行 App.class，系统会启动一个 JVM 进程，从 classpath 路径中找到一个名为 App.class 的二进制文件，将 App 的类信息加载到运行时数据区的方法区内，这个过程叫做 App 类的加载"}]}]},{"ID":"20240201213453-dc2s405","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213453-dc2s405","updated":"20240201213453"},"Children":[{"ID":"20240201213454-3t12qlw","Type":"NodeParagraph","Properties":{"id":"20240201213454-3t12qlw","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"JVM 找到 App 的主程序入口，执行 main 方法"}]}]},{"ID":"20240201213455-df1t7ts","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213455-df1t7ts","updated":"20240201213455"},"Children":[{"ID":"20240201213456-4cf5tk4","Type":"NodeParagraph","Properties":{"id":"20240201213456-4cf5tk4","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"这个 main 中的第一条语句为 Student student = new Student(\"tellUrDream\") ，就是让 JVM 创建一个 Student 对象，但是这个时候方法区中是没有 Student 类的信息的，所以 JVM 马上加载 Student 类，把 Student 类的信息放到方法区中"}]}]},{"ID":"20240201213457-5c1cx8d","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213457-5c1cx8d","updated":"20240201213457"},"Children":[{"ID":"20240201213458-64deoey","Type":"NodeParagraph","Properties":{"id":"20240201213458-64deoey","updated":"20240201213458"},"Children":[{"Type":"NodeText","Data":"加载完 Student 类后，JVM 在堆中为一个新的 Student 实例分配内存，然后调用构造函数初始化 Student 实例，这个 Student 实例持有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指向方法区中的 Student 类的类型信息"},{"Type":"NodeText","Data":" 的引用"}]}]},{"ID":"20240201213459-1vh9z2p","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213459-1vh9z2p","updated":"20240201213459"},"Children":[{"ID":"20240201213460-ommgvcb","Type":"NodeParagraph","Properties":{"id":"20240201213460-ommgvcb","updated":"20240201213460"},"Children":[{"Type":"NodeText","Data":"执行 student.sayName();时，JVM 根据 student 的引用找到 student 对象，然后根据 student 对象持有的引用定位到方法区中 student 类的类型信息的方法表，获得 sayName() 的字节码地址。"}]}]},{"ID":"20240201213461-5e1hia3","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213461-5e1hia3","updated":"20240201213461"},"Children":[{"ID":"20240201213462-o2eemb1","Type":"NodeParagraph","Properties":{"id":"20240201213462-o2eemb1","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"执行 sayName()"}]}]}]},{"ID":"20240201213463-6gyuk9m","Type":"NodeParagraph","Properties":{"id":"20240201213463-6gyuk9m","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"其实也不用管太多，只需要知道对象实例初始化时会去方法区中找类信息，完成后再到栈那里去运行方法。找方法就在方法表中找。"}]},{"ID":"20240201213464-ct4gyor","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213464-ct4gyor","updated":"20240201213464"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"二、类加载器的介绍"}]},{"ID":"20240201213465-ovdjvai","Type":"NodeParagraph","Properties":{"id":"20240201213465-ovdjvai","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"之前也提到了它是负责加载.class 文件的，它们在文件开头会有特定的文件标示，将 class 文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构，并且 ClassLoader 只负责 class 文件的加载，而是否能够运行则由 Execution Engine 来决定"}]},{"ID":"20240201213466-vdcmzpv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213466-vdcmzpv","updated":"20240201213466"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1 类加载器的流程"}]},{"ID":"20240201213467-yy5vwn6","Type":"NodeParagraph","Properties":{"id":"20240201213467-yy5vwn6","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"从类被加载到虚拟机内存中开始，到释放内存总共有 7 个步骤：加载，验证，准备，解析，初始化，使用，卸载。其中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"验证，准备，解析三个部分统称为连接"}]},{"ID":"20240201213468-8i2fgja","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213468-8i2fgja","updated":"20240201213468"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.1 加载"}]},{"ID":"20240201213469-r62idce","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213469-r62idce","updated":"20240201213469"},"Children":[{"ID":"20240201213470-m51dqtj","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213470-m51dqtj","updated":"20240201213470"},"Children":[{"ID":"20240201213471-nxt49mk","Type":"NodeParagraph","Properties":{"id":"20240201213471-nxt49mk","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"将 class 文件加载到内存"}]}]},{"ID":"20240201213472-q2d502q","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213472-q2d502q","updated":"20240201213472"},"Children":[{"ID":"20240201213473-1rvb4kv","Type":"NodeParagraph","Properties":{"id":"20240201213473-1rvb4kv","updated":"20240201213473"},"Children":[{"Type":"NodeText","Data":"将静态数据结构转化成方法区中运行时的数据结构"}]}]},{"ID":"20240201213474-0vwvi8v","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213474-0vwvi8v","updated":"20240201213474"},"Children":[{"ID":"20240201213475-5z0sswg","Type":"NodeParagraph","Properties":{"id":"20240201213475-5z0sswg","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"在堆中生成一个代表这个类的 java.lang.Class 对象作为数据访问的入口"}]}]}]},{"ID":"20240201213476-z550qjm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213476-z550qjm","updated":"20240201213476"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.2 链接"}]},{"ID":"20240201213477-9otnczp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213477-9otnczp","updated":"20240201213477"},"Children":[{"ID":"20240201213478-hzz1hxs","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213478-hzz1hxs","updated":"20240201213478"},"Children":[{"ID":"20240201213479-fmda4tf","Type":"NodeParagraph","Properties":{"id":"20240201213479-fmda4tf","updated":"20240201213479"},"Children":[{"Type":"NodeText","Data":"验证：确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件，其实就是一个安全检查"}]}]},{"ID":"20240201213480-cu8fx0u","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213480-cu8fx0u","updated":"20240201213480"},"Children":[{"ID":"20240201213481-jyraph0","Type":"NodeParagraph","Properties":{"id":"20240201213481-jyraph0","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"准备：为 static 变量在方法区中分配内存空间，设置变量的初始值，例如 static int a = 3 （注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是对象初始化时赋值的）"}]}]},{"ID":"20240201213482-5jm6jlh","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213482-5jm6jlh","updated":"20240201213482"},"Children":[{"ID":"20240201213483-2slua3w","Type":"NodeParagraph","Properties":{"id":"20240201213483-2slua3w","updated":"20240201213483"},"Children":[{"Type":"NodeText","Data":"解析：虚拟机将常量池内的符号引用替换为直接引用的过程（符号引用比如我现在 import java.util.ArrayList 这就算符号引用，直接引用就是指针或者对象地址，注意引用对象一定是在内存进行）"}]}]}]},{"ID":"20240201213484-qztrbzn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213484-qztrbzn","updated":"20240201213484"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.3 初始化"}]},{"ID":"20240201213485-if3z39e","Type":"NodeParagraph","Properties":{"id":"20240201213485-if3z39e","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"初始化其实就是执行类构造器方法的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt;()"},{"Type":"NodeText","Data":"的过程，而且要保证执行前父类的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt;()"},{"Type":"NodeText","Data":"方法执行完毕。这个方法由编译器收集，顺序执行所有类变量（static 修饰的成员变量）显式初始化和静态代码块中语句。此时准备阶段时的那个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static int a"},{"Type":"NodeText","Data":" 由默认初始化的 0 变成了显式初始化的 3。 由于执行顺序缘故，初始化阶段类变量如果在静态代码块中又进行了更改，会覆盖类变量的显式初始化，最终值会为静态代码块中的赋值。"}]},{"ID":"20240201213486-m0tgmf5","Type":"NodeBlockquote","Properties":{"id":"20240201213486-m0tgmf5","updated":"20240201213486"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213487-4r48zyg","Type":"NodeParagraph","Properties":{"id":"20240201213487-4r48zyg","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"注意：字节码文件中初始化方法有两种，非静态资源初始化的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;init\u0026gt;"},{"Type":"NodeText","Data":"和静态资源初始化的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt;"},{"Type":"NodeText","Data":"，类构造器方法"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt;()"},{"Type":"NodeText","Data":"不同于类的构造器，这些方法都是字节码文件中只能给 JVM 识别的特殊方法。"}]}]},{"ID":"20240201213488-2s5lgru","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213488-2s5lgru","updated":"20240201213488"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.4 卸载"}]},{"ID":"20240201213489-spj7aue","Type":"NodeParagraph","Properties":{"id":"20240201213489-spj7aue","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"GC 将无用对象从内存中卸载"}]},{"ID":"20240201213490-3mpihk6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213490-3mpihk6","updated":"20240201213490"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2 类加载器的加载顺序"}]},{"ID":"20240201213491-z2ob2wt","Type":"NodeParagraph","Properties":{"id":"20240201213491-z2ob2wt","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"加载一个 Class 类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的"}]},{"ID":"20240201213492-gcmxdn1","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213492-gcmxdn1","updated":"20240201213492"},"Children":[{"ID":"20240201213493-mxp4xxy","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213493-mxp4xxy","updated":"20240201213493"},"Children":[{"ID":"20240201213494-v2qbfmq","Type":"NodeParagraph","Properties":{"id":"20240201213494-v2qbfmq","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"BootStrap ClassLoader：rt.jar"}]}]},{"ID":"20240201213495-xkj1npx","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213495-xkj1npx","updated":"20240201213495"},"Children":[{"ID":"20240201213496-vob68g7","Type":"NodeParagraph","Properties":{"id":"20240201213496-vob68g7","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"Extension ClassLoader: 加载扩展的 jar 包"}]}]},{"ID":"20240201213497-2o1y2hl","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213497-2o1y2hl","updated":"20240201213497"},"Children":[{"ID":"20240201213498-jcrstlb","Type":"NodeParagraph","Properties":{"id":"20240201213498-jcrstlb","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"App ClassLoader：指定的 classpath 下面的 jar 包"}]}]},{"ID":"20240201213499-he1x53c","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213499-he1x53c","updated":"20240201213499"},"Children":[{"ID":"20240201213500-f3fujdt","Type":"NodeParagraph","Properties":{"id":"20240201213500-f3fujdt","updated":"20240201213500"},"Children":[{"Type":"NodeText","Data":"Custom ClassLoader：自定义的类加载器"}]}]}]},{"ID":"20240201213501-jp13fwc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213501-jp13fwc","updated":"20240201213501"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.3 双亲委派机制"}]},{"ID":"20240201213502-2i93ckp","Type":"NodeParagraph","Properties":{"id":"20240201213502-2i93ckp","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"当一个类收到了加载请求时，它是不会先自己去尝试加载的，而是委派给父类去完成，比如我现在要 new 一个 Person，这个 Person 是我们自定义的类，如果我们要加载它，就会先委派 App ClassLoader ，只有当父类加载器都反馈自己无法完成这个请求（也就是父类加载器都没有找到加载所需的 Class）时，子类加载器才会自行尝试加载。"}]},{"ID":"20240201213503-0vgbxn8","Type":"NodeParagraph","Properties":{"id":"20240201213503-0vgbxn8","updated":"20240201213503"},"Children":[{"Type":"NodeText","Data":"这样做的好处是，加载位于 rt.jar 包中的类时不管是哪个加载器加载，最终都会委托到 BootStrap ClassLoader 进行加载，这样保证了使用不同的类加载器得到的都是同一个结果。"}]},{"ID":"20240201213504-jexmwe9","Type":"NodeParagraph","Properties":{"id":"20240201213504-jexmwe9","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"其实这个也是一个隔离的作用，避免了我们的代码影响了 JDK 的代码，比如我现在自己定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.String"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213505-f7m23z2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213505-f7m23z2","updated":"20240201213505"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package java.lang;\npublic class String {\n    public static void main(String[] args) {\n        System.out.println();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213506-xbhvuh3","Type":"NodeParagraph","Properties":{"id":"20240201213506-xbhvuh3","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"尝试运行当前类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 函数的时候，我们的代码肯定会报错。这是因为在加载的时候其实是找到了 rt.jar 中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.String"},{"Type":"NodeText","Data":"，然而发现这个里面并没有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法。"}]},{"ID":"20240201213507-ptzta1x","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213507-ptzta1x","updated":"20240201213507"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"三、运行时数据区"}]},{"ID":"20240201213508-suw6zkf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213508-suw6zkf","updated":"20240201213508"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.1 本地方法栈和程序计数器"}]},{"ID":"20240201213509-z1ozowx","Type":"NodeParagraph","Properties":{"id":"20240201213509-z1ozowx","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"比如说我们现在点开 Thread 类的源码，会看到它的 start0 方法带有一个 native 关键字修饰，而且不存在方法体，这种用 native 修饰的方法就是本地方法，这是使用 C 来实现的，然后一般这些方法都会放到一个叫做本地方法栈的区域。"}]},{"ID":"20240201213510-1x8n7qs","Type":"NodeParagraph","Properties":{"id":"20240201213510-1x8n7qs","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"程序计数器其实就是一个指针，它指向了我们程序中下一句需要执行的指令，它也是内存区域中唯一一个不会出现 OutOfMemoryError 的区域，而且占用内存空间小到基本可以忽略不计。这个内存仅代表当前线程所执行的字节码的行号指示器，字节码解析器通过改变这个计数器的值选取下一条需要执行的字节码指令。"}]},{"ID":"20240201213511-jdo2ros","Type":"NodeParagraph","Properties":{"id":"20240201213511-jdo2ros","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"如果执行的是 native 方法，那这个指针就不工作了。"}]},{"ID":"20240201213512-wfluh2l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213512-wfluh2l","updated":"20240201213512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.2 方法区"}]},{"ID":"20240201213513-o1hdr8w","Type":"NodeParagraph","Properties":{"id":"20240201213513-o1hdr8w","updated":"20240201213513"},"Children":[{"Type":"NodeText","Data":"方法区主要的作用是存放类的元数据信息，常量和静态变量···等。当它存储的信息过大时，会在无法满足内存分配时报错。"}]},{"ID":"20240201213514-3r1z6ac","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213514-3r1z6ac","updated":"20240201213514"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3 虚拟机栈和虚拟机堆"}]},{"ID":"20240201213515-0yuz48y","Type":"NodeParagraph","Properties":{"id":"20240201213515-0yuz48y","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"一句话便是：栈管运行，堆管存储。则虚拟机栈负责运行代码，而虚拟机堆负责存储数据。"}]},{"ID":"20240201213516-tlcym2k","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213516-tlcym2k","updated":"20240201213516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.1 虚拟机栈的概念"}]},{"ID":"20240201213517-q65y7qa","Type":"NodeParagraph","Properties":{"id":"20240201213517-q65y7qa","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"它是 Java 方法执行的内存模型。里面会对局部变量，动态链表，方法出口，栈的操作（入栈和出栈）进行存储，且线程独享。同时如果我们听到局部变量表，那也是在说虚拟机栈"}]},{"ID":"20240201213518-igj00m5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213518-igj00m5","updated":"20240201213518"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Person{\n    int a = 1;\n\n    public void doSomething(){\n        int b = 2;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213519-k3fmh5c","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213519-k3fmh5c","updated":"20240201213519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.2 虚拟机栈存在的异常"}]},{"ID":"20240201213520-nznvqs8","Type":"NodeParagraph","Properties":{"id":"20240201213520-nznvqs8","updated":"20240201213520"},"Children":[{"Type":"NodeText","Data":"如果线程请求的栈的深度大于虚拟机栈的最大深度，就会报 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"StackOverflowError"},{"Type":"NodeText","Data":" （这种错误经常出现在递归中）。Java 虚拟机也可以动态扩展，但随着扩展会不断地申请内存，当无法申请足够内存时就会报错 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213521-4gtiqxl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213521-4gtiqxl","updated":"20240201213521"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.3 虚拟机栈的生命周期"}]},{"ID":"20240201213522-0byfbcu","Type":"NodeParagraph","Properties":{"id":"20240201213522-0byfbcu","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"对于栈来说，不存在垃圾回收。只要程序运行结束，栈的空间自然就会释放了。栈的生命周期和所处的线程是一致的。"}]},{"ID":"20240201213523-qiqxmaa","Type":"NodeParagraph","Properties":{"id":"20240201213523-qiqxmaa","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"这里补充一句：8 种基本类型的变量+对象的引用变量+实例方法都是在栈里面分配内存。"}]},{"ID":"20240201213524-ldq9rvb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213524-ldq9rvb","updated":"20240201213524"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.4 虚拟机栈的执行"}]},{"ID":"20240201213525-uhrlxju","Type":"NodeParagraph","Properties":{"id":"20240201213525-uhrlxju","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"我们经常说的栈帧数据，说白了在 JVM 中叫栈帧，放到 Java 中其实就是方法，它也是存放在栈中的。"}]},{"ID":"20240201213526-pclkqul","Type":"NodeParagraph","Properties":{"id":"20240201213526-pclkqul","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"栈中的数据都是以栈帧的格式存在，它是一个关于方法和运行期数据的数据集。比如我们执行一个方法 a，就会对应产生一个栈帧 A1，然后 A1 会被压入栈中。同理方法 b 会有一个 B1，方法 c 会有一个 C1，等到这个线程执行完毕后，栈会先弹出 C1，后 B1,A1。它是一个先进后出，后进先出原则。"}]},{"ID":"20240201213527-l3ayku2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213527-l3ayku2","updated":"20240201213527"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.5 局部变量的复用"}]},{"ID":"20240201213528-few8nyb","Type":"NodeParagraph","Properties":{"id":"20240201213528-few8nyb","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"局部变量表用于存放方法参数和方法内部所定义的局部变量。它的容量是以 Slot 为最小单位，一个 slot 可以存放 32 位以内的数据类型。"}]},{"ID":"20240201213529-d2jpf2v","Type":"NodeParagraph","Properties":{"id":"20240201213529-d2jpf2v","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"虚拟机通过索引定位的方式使用局部变量表，范围为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[0,局部变量表的 slot 的数量]"},{"Type":"NodeText","Data":"。方法中的参数就会按一定顺序排列在这个局部变量表中，至于怎么排的我们可以先不关心。而为了节省栈帧空间，这些 slot 是可以复用的，当方法执行位置超过了某个变量，那么这个变量的 slot 可以被其它变量复用。当然如果需要复用，那我们的垃圾回收自然就不会去动这些内存。"}]},{"ID":"20240201213530-8ji42xt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213530-8ji42xt","updated":"20240201213530"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.6 虚拟机堆的概念"}]},{"ID":"20240201213531-197fp7w","Type":"NodeParagraph","Properties":{"id":"20240201213531-197fp7w","updated":"20240201213531"},"Children":[{"Type":"NodeText","Data":"JVM 内存会划分为堆内存和非堆内存，堆内存中也会划分为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"年轻代"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"老年代"},{"Type":"NodeText","Data":"，而非堆内存则为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"永久代"},{"Type":"NodeText","Data":"。年轻代又会分为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Survivor"},{"Type":"NodeText","Data":"区。Survivor 也会分为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"FromPlace"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ToPlace"},{"Type":"NodeText","Data":"，toPlace 的 survivor 区域是空的。Eden，FromPlace 和 ToPlace 的默认占比为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"8:1:1"},{"Type":"NodeText","Data":"。当然这个东西其实也可以通过一个 -XX:+UsePSAdaptiveSurvivorSizePolicy 参数来根据生成对象的速率动态调整"}]},{"ID":"20240201213532-da6148k","Type":"NodeParagraph","Properties":{"id":"20240201213532-da6148k","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"堆内存中存放的是对象，垃圾收集就是收集这些对象然后交给 GC 算法进行回收。非堆内存其实我们已经说过了，就是方法区。在 1.8 中已经移除永久代，替代品是一个元空间(MetaSpace)，最大区别是 metaSpace 是不存在于 JVM 中的，它使用的是本地内存。并有两个参数"}]},{"ID":"20240201213533-78r0gsg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213533-78r0gsg","updated":"20240201213533"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"MetaspaceSize：初始化元空间大小，控制发生GC\nMaxMetaspaceSize：限制元空间大小上限，防止占用过多物理内存。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213534-xgnuf83","Type":"NodeParagraph","Properties":{"id":"20240201213534-xgnuf83","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"移除的原因可以大致了解一下：融合 HotSpot JVM 和 JRockit VM 而做出的改变，因为 JRockit 是没有永久代的，不过这也间接性地解决了永久代的 OOM 问题。"}]},{"ID":"20240201213535-rgu0982","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213535-rgu0982","updated":"20240201213535"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.7 Eden 年轻代的介绍"}]},{"ID":"20240201213536-cyneq5k","Type":"NodeParagraph","Properties":{"id":"20240201213536-cyneq5k","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"当我们 new 一个对象后，会先放到 Eden 划分出来的一块作为存储空间的内存，但是我们知道对堆内存是线程共享的，所以有可能会出现两个对象共用一个内存的情况。这里 JVM 的处理是为每个线程都预先申请好一块连续的内存空间并规定了对象存放的位置，而如果空间不足会再申请多块内存空间。这个操作我们会称作 TLAB，有兴趣可以了解一下。"}]},{"ID":"20240201213537-s3txu5l","Type":"NodeParagraph","Properties":{"id":"20240201213537-s3txu5l","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"当 Eden 空间满了之后，会触发一个叫做 Minor GC（就是一个发生在年轻代的 GC）的操作，存活下来的对象移动到 Survivor0 区。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"Survivor0 区满后触发 Minor GC，就会将存活对象移动到 Survivor1 区"},{"Type":"NodeText","Data":"，此时还会把 from 和 to 两个指针交换，这样保证了一段时间内总有一个 survivor 区为空且 to 所指向的 survivor 区为空。经过多次的 Minor GC 后仍然存活的对象（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这里的存活判断是 15 次，对应到虚拟机参数为 -XX:MaxTenuringThreshold 。为什么是 15，因为 HotSpot 会在对象头中的标记字段里记录年龄，分配到的空间仅有 4 位，所以最多只能记录到 15"},{"Type":"NodeText","Data":"）会移动到老年代。"}]},{"ID":"20240201213538-5fodycj","Type":"NodeBlockquote","Properties":{"id":"20240201213538-5fodycj","updated":"20240201213538"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213539-c58smgv","Type":"NodeParagraph","Properties":{"id":"20240201213539-c58smgv","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"🐛 修正：当 Eden 区内存空间满了的时候，就会触发 Minor GC，Survivor0 区满不会触发 Minor GC 。"}]},{"ID":"20240201213540-rnctaqv","Type":"NodeParagraph","Properties":{"id":"20240201213540-rnctaqv","updated":"20240201213540"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那 Survivor0 区 的对象什么时候垃圾回收呢？"}]},{"ID":"20240201213541-tbpfena","Type":"NodeParagraph","Properties":{"id":"20240201213541-tbpfena","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"假设 Survivor0 区现在是满的，此时又触发了 Minor GC ，发现 Survivor0 区依旧是满的，存不下，此时会将 S0 区与 Eden 区的对象一起进行可达性分析，找出活跃的对象，将它复制到 S1 区并且将 S0 区域和 Eden 区的对象给清空，这样那些不可达的对象进行清除，并且将 S0 区 和 S1 区交换。"}]}]},{"ID":"20240201213542-8eeugxa","Type":"NodeParagraph","Properties":{"id":"20240201213542-8eeugxa","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"老年代是存储长期存活的对象的，占满时就会触发我们最常听说的 Full GC，期间会停止所有线程等待 GC 的完成。所以对于响应要求高的应用应该尽量去减少发生 Full GC 从而避免响应超时的问题。"}]},{"ID":"20240201213543-5pxwrps","Type":"NodeParagraph","Properties":{"id":"20240201213543-5pxwrps","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"而且当老年区执行了 full gc 之后仍然无法进行对象保存的操作，就会产生 OOM，这时候就是虚拟机中的堆内存不足，原因可能会是堆内存设置的大小过小，这个可以通过参数-Xms、-Xmx 来调整。也可能是代码中创建的对象大且多，而且它们一直在被引用从而长时间垃圾收集无法收集它们。"}]},{"ID":"20240201213544-mqagmvx","Type":"NodeParagraph","Properties":{"id":"20240201213544-mqagmvx","updated":"20240201213544"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/39/398255141fde8ba208f6c99f4edaa9fe.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213545-gfbfy9p","Type":"NodeParagraph","Properties":{"id":"20240201213545-gfbfy9p","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"补充说明：关于-XX:TargetSurvivorRatio 参数的问题。其实也不一定是要满足-XX:MaxTenuringThreshold 才移动到老年代。可以举个例子：如对象年龄 5 的占 30%，年龄 6 的占 36%，年龄 7 的占 34%，加入某个年龄段（如例子中的年龄 6）后，总占用超过 Survivor 空间"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":"TargetSurvivorRatio 的时候，从该年龄段开始及大于的年龄对象就要进入老年代（即例子中的年龄 6 对象，就是年龄 6 和年龄 7 晋升到老年代），这时候无需等到 MaxTenuringThreshold 中要求的 15"}]},{"ID":"20240201213546-d9ol5fq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213546-d9ol5fq","updated":"20240201213546"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.8 如何判断一个对象需要被干掉"}]},{"ID":"20240201213547-41i91gk","Type":"NodeParagraph","Properties":{"id":"20240201213547-41i91gk","updated":"20240201213547"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/1b/1ba7f3cff6e07c6e9c6765cc4ef74997.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213548-rpcziaq","Type":"NodeParagraph","Properties":{"id":"20240201213548-rpcziaq","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"图中程序计数器、虚拟机栈、本地方法栈，3 个区域随着线程的生存而生存的。内存分配和回收都是确定的。随着线程的结束内存自然就被回收了，因此不需要考虑垃圾回收的问题。而 Java 堆和方法区则不一样，各线程共享，内存的分配和回收都是动态的。因此垃圾收集器所关注的都是堆和方法这部分内存。"}]},{"ID":"20240201213549-5hl5ynf","Type":"NodeParagraph","Properties":{"id":"20240201213549-5hl5ynf","updated":"20240201213549"},"Children":[{"Type":"NodeText","Data":"在进行回收前就要判断哪些对象还存活，哪些已经死去。下面介绍两个基础的计算方法"}]},{"ID":"20240201213550-8yyij7s","Type":"NodeParagraph","Properties":{"id":"20240201213550-8yyij7s","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"1.引用计数器计算：给对象添加一个引用计数器，每次引用这个对象时计数器加一，引用失效时减一，计数器等于 0 时就是不会再次使用的。不过这个方法有一种情况就是出现对象的循环引用时 GC 没法回收。"}]},{"ID":"20240201213551-ql9peg7","Type":"NodeParagraph","Properties":{"id":"20240201213551-ql9peg7","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"2.可达性分析计算：这是一种类似于二叉树的实现，将一系列的 GC ROOTS 作为起始的存活对象集，从这个节点往下搜索，搜索所走过的路径成为引用链，把能被该集合引用到的对象加入到集合中。搜索当一个对象到 GC Roots 没有使用任何引用链时，则说明该对象是不可用的。主流的商用程序语言，例如 Java，C#等都是靠这招去判定对象是否存活的。"}]},{"ID":"20240201213552-rrje0az","Type":"NodeParagraph","Properties":{"id":"20240201213552-rrje0az","updated":"20240201213552"},"Children":[{"Type":"NodeText","Data":"（了解一下即可）在 Java 语言汇总能作为 GC Roots 的对象分为以下几种："}]},{"ID":"20240201213553-6kqfry0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213553-6kqfry0","updated":"20240201213553"},"Children":[{"ID":"20240201213554-v0gdh7m","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213554-v0gdh7m","updated":"20240201213554"},"Children":[{"ID":"20240201213555-2qyonzg","Type":"NodeParagraph","Properties":{"id":"20240201213555-2qyonzg","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"虚拟机栈（栈帧中的本地方法表）中引用的对象（局部变量）"}]}]},{"ID":"20240201213556-ivp0s36","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213556-ivp0s36","updated":"20240201213556"},"Children":[{"ID":"20240201213557-9jzzpzs","Type":"NodeParagraph","Properties":{"id":"20240201213557-9jzzpzs","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"方法区中静态变量所引用的对象（静态变量）"}]}]},{"ID":"20240201213558-3dff8l4","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213558-3dff8l4","updated":"20240201213558"},"Children":[{"ID":"20240201213559-qvd3nzp","Type":"NodeParagraph","Properties":{"id":"20240201213559-qvd3nzp","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"方法区中常量引用的对象"}]}]},{"ID":"20240201213560-phoss3m","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213560-phoss3m","updated":"20240201213560"},"Children":[{"ID":"20240201213561-2d7dxnj","Type":"NodeParagraph","Properties":{"id":"20240201213561-2d7dxnj","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"本地方法栈（即 native 修饰的方法）中 JNI 引用的对象（JNI 是 Java 虚拟机调用对应的 C 函数的方式，通过 JNI 函数也可以创建新的 Java 对象。且 JNI 对于对象的局部引用或者全局引用都会把它们指向的对象都标记为不可回收）"}]}]},{"ID":"20240201213562-g09ksz5","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213562-g09ksz5","updated":"20240201213562"},"Children":[{"ID":"20240201213563-w46i4u6","Type":"NodeParagraph","Properties":{"id":"20240201213563-w46i4u6","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"已启动的且未终止的 Java 线程"}]}]}]},{"ID":"20240201213564-ebtrdr0","Type":"NodeParagraph","Properties":{"id":"20240201213564-ebtrdr0","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"这种方法的优点是能够解决循环引用的问题，可它的实现需要耗费大量资源和时间，也需要 GC（它的分析过程引用关系不能发生变化，所以需要停止所有进程）"}]},{"ID":"20240201213565-u3988fd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213565-u3988fd","updated":"20240201213565"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3.9 如何宣告一个对象的真正死亡"}]},{"ID":"20240201213566-4klxqw3","Type":"NodeParagraph","Properties":{"id":"20240201213566-4klxqw3","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"首先必须要提到的是一个名叫 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"finalize()"},{"Type":"NodeText","Data":" 的方法"}]},{"ID":"20240201213567-dkkyo7g","Type":"NodeParagraph","Properties":{"id":"20240201213567-dkkyo7g","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"finalize()是 Object 类的一个方法、一个对象的 finalize()方法只会被系统自动调用一次，经过 finalize()方法逃脱死亡的对象，第二次不会再调用。"}]},{"ID":"20240201213568-biyc6y5","Type":"NodeParagraph","Properties":{"id":"20240201213568-biyc6y5","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"补充一句：并不提倡在程序中调用 finalize()来进行自救。建议忘掉 Java 程序中该方法的存在。因为它执行的时间不确定，甚至是否被执行也不确定（Java 程序的不正常退出），而且运行代价高昂，无法保证各个对象的调用顺序（甚至有不同线程中调用）。在 Java9 中已经被标记为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"deprecated"},{"Type":"NodeText","Data":" ，且 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.ref.Cleaner"},{"Type":"NodeText","Data":"（也就是强、软、弱、幻象引用的那一套）中已经逐步替换掉它，会比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finalize"},{"Type":"NodeText","Data":" 来的更加的轻量及可靠。"}]},{"ID":"20240201213569-1w8f95b","Type":"NodeParagraph","Properties":{"id":"20240201213569-1w8f95b","updated":"20240201213569"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/8d/8d7f0381c7d857c7ceb8ae5a5fef0f4a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213570-cu78co2","Type":"NodeParagraph","Properties":{"id":"20240201213570-cu78co2","updated":"20240201213570"},"Children":[{"Type":"NodeText","Data":"判断一个对象的死亡至少需要两次标记"}]},{"ID":"20240201213571-w8o7yg5","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213571-w8o7yg5","updated":"20240201213571"},"Children":[{"ID":"20240201213572-gylfkk7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213572-gylfkk7","updated":"20240201213572"},"Children":[{"ID":"20240201213573-hngzr20","Type":"NodeParagraph","Properties":{"id":"20240201213573-hngzr20","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"如果对象进行可达性分析之后没发现与 GC Roots 相连的引用链，那它将会第一次标记并且进行一次筛选。判断的条件是决定这个对象是否有必要执行 finalize()方法。如果对象有必要执行 finalize()方法，则被放入 F-Queue 队列中。"}]}]},{"ID":"20240201213574-2fjpgg1","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213574-2fjpgg1","updated":"20240201213574"},"Children":[{"ID":"20240201213575-o9tbr3f","Type":"NodeParagraph","Properties":{"id":"20240201213575-o9tbr3f","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"GC 对 F-Queue 队列中的对象进行二次标记。如果对象在 finalize()方法中重新与引用链上的任何一个对象建立了关联，那么二次标记时则会将它移出“即将回收”集合。如果此时对象还没成功逃脱，那么只能被回收了。"}]}]}]},{"ID":"20240201213576-h0axzzx","Type":"NodeParagraph","Properties":{"id":"20240201213576-h0axzzx","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"如果确定对象已经死亡，我们又该如何回收这些垃圾呢"}]},{"ID":"20240201213577-0nb3a1s","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213577-0nb3a1s","updated":"20240201213577"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.4 垃圾回收算法"}]},{"ID":"20240201213578-rngu5nd","Type":"NodeParagraph","Properties":{"id":"20240201213578-rngu5nd","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"关于常见垃圾回收算法的详细介绍，建议阅读这篇："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/jvm/jvm-garbage-collection.html","TextMarkTextContent":"JVM 垃圾回收详解（重点）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213579-4bwnh2j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213579-4bwnh2j","updated":"20240201213579"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.5 （了解）各种各样的垃圾回收器"}]},{"ID":"20240201213580-plsi2oj","Type":"NodeParagraph","Properties":{"id":"20240201213580-plsi2oj","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"HotSpot VM 中的垃圾回收器，以及适用场景"}]},{"ID":"20240201213581-ov0nd10","Type":"NodeParagraph","Properties":{"id":"20240201213581-ov0nd10","updated":"20240201213581"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/9f/9ff72176ab0bf58bc43e142f69427379.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213582-ehrrfr6","Type":"NodeParagraph","Properties":{"id":"20240201213582-ehrrfr6","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"到 jdk8 为止，默认的垃圾收集器是 Parallel Scavenge 和 Parallel Old"}]},{"ID":"20240201213583-o2pnkor","Type":"NodeParagraph","Properties":{"id":"20240201213583-o2pnkor","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"从 jdk9 开始，G1 收集器成为默认的垃圾收集器"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"目前来看，G1 回收器停顿时间最短而且没有明显缺点，非常适合 Web 应用。在 jdk8 中测试 Web 应用，堆内存 6G，新生代 4.5G 的情况下，Parallel Scavenge 回收新生代停顿长达 1.5 秒。G1 回收器回收同样大小的新生代只停顿 0.2 秒。"}]},{"ID":"20240201213584-8k43qys","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213584-8k43qys","updated":"20240201213584"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.6 （了解）JVM 的常用参数"}]},{"ID":"20240201213585-urod72a","Type":"NodeParagraph","Properties":{"id":"20240201213585-urod72a","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"JVM 的参数非常之多，这里只列举比较重要的几个，通过各种各样的搜索引擎也可以得知这些信息。"}]},{"ID":"20240201213586-c4tij2u","Type":"NodeTable","Data":"| 参数名称                   | 含义                                                           | 默认值                | 说明                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| -------------------------- | -------------------------------------------------------------- | --------------------- ||\n| -Xms                       | 初始堆大小                                                     | 物理内存的 1/64(\u003c1GB) | 默认(MinHeapFreeRatio 参数可以调整)空余堆内存小于 40%时，JVM 就会增大堆直到-Xmx 的最大限制.                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| -Xmx                       | 最大堆大小                                                     | 物理内存的 1/4(\u003c1GB)  | 默认(MaxHeapFreeRatio 参数可以调整)空余堆内存大于 70%时，JVM 会减少堆直到 -Xms 的最小限制                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| -Xmn                       | 年轻代大小(1.4or later)                                        |                       | 注意：此处的大小是（eden+ 2 survivor space).与 jmap -heap 中显示的 New gen 是不同的。整个堆大小=年轻代大小 + 老年代大小 + 持久代（永久代）大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun 官方推荐配置为整个堆的 3/8                                                                                                                                                                                                                                                                               |\n| -XX:NewSize                | 设置年轻代大小(for 1.3/1.4)                                    |                       |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| -XX:MaxNewSize             | 年轻代最大值(for 1.3/1.4)                                      |                       ||\n| -XX:PermSize               | 设置持久代(perm gen)初始值                                     | 物理内存的 1/64       ||\n| -XX:MaxPermSize            | 设置持久代最大值                                               | 物理内存的 1/4        ||\n| -Xss                       | 每个线程的堆栈大小                                             |                       | JDK5.0 以后每个线程堆栈大小为 1M,以前每个线程堆栈大小为 256K.根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在 3000~5000 左右一般小的应用， 如果栈不是很深， 应该是 128k 够用的 大的应用建议使用 256k。这个选项对性能影响比较大，需要严格的测试。（校长）和 threadstacksize 选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了 |\n| -XX:NewRatio               | 年轻代(包括 Eden 和两个 Survivor 区)与年老代的比值(除去持久代) |                       | -XX:NewRatio=4 表示年轻代与年老代所占比值为 1:4,年轻代占整个堆栈的 1/5Xms=Xmx 并且设置了 Xmn 的情况下，该参数不需要进行设置。                                                                                                                                                                                                                                                                                                                                                                                      |\n| -XX:SurvivorRatio          | Eden 区与 Survivor 区的大小比值                                |                       | 设置为 8,则两个 Survivor 区与一个 Eden 区的比值为 2:8,一个 Survivor 区占整个年轻代的 1/10                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| -XX:+DisableExplicitGC     | 关闭 System.gc()                                               |                       | 这个参数需要严格的测试                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| -XX:PretenureSizeThreshold | 对象超过多大是直接在旧生代分配                                 | 0                     | 单位字节 新生代采用 Parallel ScavengeGC 时无效另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| -XX:ParallelGCThreads      | 并行收集器的线程数                                             |                       | 此值最好配置与处理器数目相等 同样适用于 CMS                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| -XX:MaxGCPauseMillis       | 每次年轻代垃圾回收的最长时间(最大暂停时间)                     |                       | 如果无法满足此时间,JVM 会自动调整年轻代大小,以满足此值.                                                                                                                                                                                                                                                                                                                                                                                                                                                            |","TableAligns":[0,0,0,0],"Properties":{"id":"20240201213586-c4tij2u","updated":"20240201213586"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"参数名称"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"含义"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"默认值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"说明"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-Xms"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"初始堆大小"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"物理内存的 1/64(\u003c1GB)"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"默认(MinHeapFreeRatio 参数可以调整)空余堆内存小于 40%时，JVM 就会增大堆直到-Xmx 的最大限制."}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-Xmx"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"最大堆大小"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"物理内存的 1/4(\u003c1GB)"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"默认(MaxHeapFreeRatio 参数可以调整)空余堆内存大于 70%时，JVM 会减少堆直到 -Xms 的最小限制"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-Xmn"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"年轻代大小(1.4or later)"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"注意：此处的大小是（eden+ 2 survivor space).与 jmap -heap 中显示的 New gen 是不同的。整个堆大小=年轻代大小 + 老年代大小 + 持久代（永久代）大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun 官方推荐配置为整个堆的 3/8"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:NewSize"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"设置年轻代大小(for 1.3/1.4)"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:MaxNewSize"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"年轻代最大值(for 1.3/1.4)"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:PermSize"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"设置持久代(perm gen)初始值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"物理内存的 1/64"}]},{"Type":"NodeTableCell","Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:MaxPermSize"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"设置持久代最大值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"物理内存的 1/4"}]},{"Type":"NodeTableCell","Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-Xss"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"每个线程的堆栈大小"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"JDK5.0 以后每个线程堆栈大小为 1M,以前每个线程堆栈大小为 256K.根据应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在 3000~5000 左右一般小的应用， 如果栈不是很深， 应该是 128k 够用的 大的应用建议使用 256k。这个选项对性能影响比较大，需要严格的测试。（校长）和 threadstacksize 选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:NewRatio"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"年轻代(包括 Eden 和两个 Survivor 区)与年老代的比值(除去持久代)"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:NewRatio=4 表示年轻代与年老代所占比值为 1:4,年轻代占整个堆栈的 1/5Xms=Xmx 并且设置了 Xmn 的情况下，该参数不需要进行设置。"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:SurvivorRatio"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Eden 区与 Survivor 区的大小比值"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"设置为 8,则两个 Survivor 区与一个 Eden 区的比值为 2:8,一个 Survivor 区占整个年轻代的 1/10"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:+DisableExplicitGC"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"关闭 System.gc()"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"这个参数需要严格的测试"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:PretenureSizeThreshold"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"对象超过多大是直接在旧生代分配"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"0"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"单位字节 新生代采用 Parallel ScavengeGC 时无效另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象."}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:ParallelGCThreads"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"并行收集器的线程数"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"此值最好配置与处理器数目相等 同样适用于 CMS"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"-XX:MaxGCPauseMillis"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"每次年轻代垃圾回收的最长时间(最大暂停时间)"}]},{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"如果无法满足此时间,JVM 会自动调整年轻代大小,以满足此值."}]}]}]},{"ID":"20240201213587-wam22kl","Type":"NodeParagraph","Properties":{"id":"20240201213587-wam22kl","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"其实还有一些打印及 CMS 方面的参数，这里就不以一一列举了"}]},{"ID":"20240201213588-drqrgfn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213588-drqrgfn","updated":"20240201213588"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"四、关于 JVM 调优的一些方面"}]},{"ID":"20240201213589-nrhsfyd","Type":"NodeParagraph","Properties":{"id":"20240201213589-nrhsfyd","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"根据刚刚涉及的 jvm 的知识点，我们可以尝试对 JVM 进行调优，主要就是堆内存那块"}]},{"ID":"20240201213590-d3x3cqb","Type":"NodeParagraph","Properties":{"id":"20240201213590-d3x3cqb","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"所有线程共享数据区大小=新生代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为 64m。所以 java 堆中增大年轻代后，将会减小年老代大小（因为老年代的清理是使用 fullgc，所以老年代过小的话反而是会增多 fullgc 的）。此值对系统性能影响较大，Sun 官方推荐配置为 java 堆的 3/8。"}]},{"ID":"20240201213591-v3mzfvd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213591-v3mzfvd","updated":"20240201213591"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.1 调整最大堆内存和最小堆内存"}]},{"ID":"20240201213592-jc0kk1i","Type":"NodeParagraph","Properties":{"id":"20240201213592-jc0kk1i","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"-Xmx –Xms：指定 java 堆最大值（默认值是物理内存的 1/4(\u003c1GB)）和初始 java 堆最小值（默认值是物理内存的 1/64(\u003c1GB)）"}]},{"ID":"20240201213593-3lg1a3m","Type":"NodeParagraph","Properties":{"id":"20240201213593-3lg1a3m","updated":"20240201213593"},"Children":[{"Type":"NodeText","Data":"默认(MinHeapFreeRatio 参数可以调整)空余堆内存小于 40%时，JVM 就会增大堆直到-Xmx 的最大限制.，默认(MaxHeapFreeRatio 参数可以调整)空余堆内存大于 70%时，JVM 会减少堆直到 -Xms 的最小限制。简单点来说，你不停地往堆内存里面丢数据，等它剩余大小小于 40%了，JVM 就会动态申请内存空间不过会小于-Xmx，如果剩余大小大于 70%，又会动态缩小不过不会小于–Xms。就这么简单"}]},{"ID":"20240201213594-rqffri0","Type":"NodeParagraph","Properties":{"id":"20240201213594-rqffri0","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"开发过程中，通常会将 -Xms 与 -Xmx 两个参数配置成相同的值，其目的是为了能够在 java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。"}]},{"ID":"20240201213595-lrebxse","Type":"NodeParagraph","Properties":{"id":"20240201213595-lrebxse","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"我们执行下面的代码"}]},{"ID":"20240201213596-39umd7w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213596-39umd7w","updated":"20240201213596"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"System.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");    //系统的最大空间\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");  //系统的空闲空间\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");  //当前可用的总空间\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213597-16sw6a8","Type":"NodeParagraph","Properties":{"id":"20240201213597-16sw6a8","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"注意：此处设置的是 Java 堆大小，也就是新生代大小 + 老年代大小"}]},{"ID":"20240201213598-l4bi5mb","Type":"NodeParagraph","Properties":{"id":"20240201213598-l4bi5mb","updated":"20240201213598"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/11/114f32ddd295b2e30444f42f6180538c.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213599-g2vkkhe","Type":"NodeParagraph","Properties":{"id":"20240201213599-g2vkkhe","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"设置一个 VM options 的参数"}]},{"ID":"20240201213600-qg4rjhh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213600-qg4rjhh","updated":"20240201213600"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-Xmx20m -Xms5m -XX:+PrintGCDetails\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213601-o6lkvqa","Type":"NodeParagraph","Properties":{"id":"20240201213601-o6lkvqa","updated":"20240201213601"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/7e/7ea0bf0dec20e44bf95128c571d6ef0e.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213602-gagh9ex","Type":"NodeParagraph","Properties":{"id":"20240201213602-gagh9ex","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"再次启动 main 方法"}]},{"ID":"20240201213603-gf5knnw","Type":"NodeParagraph","Properties":{"id":"20240201213603-gf5knnw","updated":"20240201213603"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/c8/c89edbd0a147a791cfabdc37923c6836.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213604-qs6o9nk","Type":"NodeParagraph","Properties":{"id":"20240201213604-qs6o9nk","updated":"20240201213604"},"Children":[{"Type":"NodeText","Data":"这里 GC 弹出了一个 Allocation Failure 分配失败，这个事情发生在 PSYoungGen，也就是年轻代中"}]},{"ID":"20240201213605-eabql7w","Type":"NodeParagraph","Properties":{"id":"20240201213605-eabql7w","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"这时候申请到的内存为 18M，空闲内存为 4.214195251464844M"}]},{"ID":"20240201213606-zc7aq06","Type":"NodeParagraph","Properties":{"id":"20240201213606-zc7aq06","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"我们此时创建一个字节数组看看，执行下面的代码"}]},{"ID":"20240201213607-ojvb4ss","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213607-ojvb4ss","updated":"20240201213607"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"byte[] b = new byte[1 * 1024 * 1024];\nSystem.out.println(\"分配了1M空间给数组\");\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");  //系统的最大空间\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");  //系统的空闲空间\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213608-lkpi0bc","Type":"NodeParagraph","Properties":{"id":"20240201213608-lkpi0bc","updated":"20240201213608"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/db/dbeb6aea0a90949f7d7fe4746ddb11a3.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213609-gz9qc4a","Type":"NodeParagraph","Properties":{"id":"20240201213609-gz9qc4a","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"此时 free memory 就又缩水了，不过 total memory 是没有变化的。Java 会尽可能将 total mem 的值维持在最小堆内存大小"}]},{"ID":"20240201213610-dw0ny89","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213610-dw0ny89","updated":"20240201213610"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"byte[] b = new byte[10 * 1024 * 1024];\nSystem.out.println(\"分配了10M空间给数组\");\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");  //系统的最大空间\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");  //系统的空闲空间\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");  //当前可用的总空间\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213611-xdj124u","Type":"NodeParagraph","Properties":{"id":"20240201213611-xdj124u","updated":"20240201213611"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/b6/b6a7c522166dbd425dbb06eb56c9b071.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213612-ye3pchi","Type":"NodeParagraph","Properties":{"id":"20240201213612-ye3pchi","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"这时候我们创建了一个 10M 的字节数据，这时候最小堆内存是顶不住的。我们会发现现在的 total memory 已经变成了 15M，这就是已经申请了一次内存的结果。"}]},{"ID":"20240201213613-d5zq77a","Type":"NodeParagraph","Properties":{"id":"20240201213613-d5zq77a","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"此时我们再跑一下这个代码"}]},{"ID":"20240201213614-5ekwz8k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213614-5ekwz8k","updated":"20240201213614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"System.gc();\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");    //系统的最大空间\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");  //系统的空闲空间\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");  //当前可用的总空间\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213615-jy32gj6","Type":"NodeParagraph","Properties":{"id":"20240201213615-jy32gj6","updated":"20240201213615"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://static001.geekbang.org/infoq/8d/8dd6e8fccfd1394b83251c136ee44ceb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213616-9jhwwg2","Type":"NodeParagraph","Properties":{"id":"20240201213616-9jhwwg2","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"此时我们手动执行了一次 fullgc，此时 total memory 的内存空间又变回 5.5M 了，此时又是把申请的内存释放掉的结果。"}]},{"ID":"20240201213617-fx8xped","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213617-fx8xped","updated":"20240201213617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.2 调整新生代和老年代的比值"}]},{"ID":"20240201213618-hwblk50","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213618-hwblk50","updated":"20240201213618"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:NewRatio --- 新生代（eden+2\\*Survivor）和老年代（不包含永久区）的比值\n\n例如：-XX:NewRatio=4，表示新生代:老年代=1:4，即新生代占整个堆的 1/5。在 Xms=Xmx 并且设置了 Xmn 的情况下，该参数不需要进行设置。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213619-1c3hs2y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213619-1c3hs2y","updated":"20240201213619"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.3 调整 Survivor 区和 Eden 区的比值"}]},{"ID":"20240201213620-6m6lkp7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213620-6m6lkp7","updated":"20240201213620"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:SurvivorRatio（幸存代）--- 设置两个 Survivor 区和 eden 的比值\n\n例如：8，表示两个 Survivor:eden=2:8，即一个 Survivor 占年轻代的 1/10\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213621-7hwpp9d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213621-7hwpp9d","updated":"20240201213621"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.4 设置年轻代和老年代的大小"}]},{"ID":"20240201213622-8t41s7f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213622-8t41s7f","updated":"20240201213622"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:NewSize --- 设置年轻代大小\n-XX:MaxNewSize --- 设置年轻代最大值\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213623-m51ygx1","Type":"NodeParagraph","Properties":{"id":"20240201213623-m51ygx1","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"可以通过设置不同参数来测试不同的情况，反正最优解当然就是官方的 Eden 和 Survivor 的占比为 8:1:1，然后在刚刚介绍这些参数的时候都已经附带了一些说明，感兴趣的也可以看看。反正最大堆内存和最小堆内存如果数值不同会导致多次的 gc，需要注意。"}]},{"ID":"20240201213624-uu89zeg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213624-uu89zeg","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.5 小总结"}]},{"ID":"20240201213625-q7iktlq","Type":"NodeParagraph","Properties":{"id":"20240201213625-q7iktlq","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"根据实际事情调整新生代和幸存代的大小，官方推荐新生代占 java 堆的 3/8，幸存代占新生代的 1/10"}]},{"ID":"20240201213626-a8ep3iz","Type":"NodeParagraph","Properties":{"id":"20240201213626-a8ep3iz","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"在 OOM 时，记得 Dump 出堆，确保可以排查现场问题，通过下面命令你可以输出一个.dump 文件，这个文件可以使用 VisualVM 或者 Java 自带的 Java VisualVM 工具。"}]},{"ID":"20240201213627-gr7n2e5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213627-gr7n2e5","updated":"20240201213627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-Xmx20m -Xms5m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=你要输出的日志路径\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213628-3dlmfwi","Type":"NodeParagraph","Properties":{"id":"20240201213628-3dlmfwi","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"一般我们也可以通过编写脚本的方式来让 OOM 出现时给我们报个信，可以通过发送邮件或者重启程序等来解决。"}]},{"ID":"20240201213629-ink6d27","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213629-ink6d27","updated":"20240201213629"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.6 永久区的设置"}]},{"ID":"20240201213630-y54ex8t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213630-y54ex8t","updated":"20240201213630"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:PermSize -XX:MaxPermSize\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213631-0jt6o8n","Type":"NodeParagraph","Properties":{"id":"20240201213631-0jt6o8n","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"初始空间（默认为物理内存的 1/64）和最大空间（默认为物理内存的 1/4）。也就是说，jvm 启动时，永久区一开始就占用了 PermSize 大小的空间，如果空间还不够，可以继续扩展，但是不能超过 MaxPermSize，否则会 OOM。"}]},{"ID":"20240201213632-4r5gq61","Type":"NodeParagraph","Properties":{"id":"20240201213632-4r5gq61","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"tips：如果堆空间没有用完也抛出了 OOM，有可能是永久区导致的。堆空间实际占用非常少，但是永久区溢出 一样抛出 OOM。"}]},{"ID":"20240201213633-m2b1nt7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213633-m2b1nt7","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.7 JVM 的栈参数调优"}]},{"ID":"20240201213634-9qlxopt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213634-9qlxopt","updated":"20240201213634"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.7.1 调整每个线程栈空间的大小"}]},{"ID":"20240201213635-5ejm93k","Type":"NodeParagraph","Properties":{"id":"20240201213635-5ejm93k","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"可以通过-Xss：调整每个线程栈空间的大小"}]},{"ID":"20240201213636-c2x9boc","Type":"NodeParagraph","Properties":{"id":"20240201213636-c2x9boc","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"JDK5.0 以后每个线程堆栈大小为 1M，以前每个线程堆栈大小为 256K。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000 左右"}]},{"ID":"20240201213637-aclgnj3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213637-aclgnj3","updated":"20240201213637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.7.2 设置线程栈的大小"}]},{"ID":"20240201213638-gy07xfv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213638-gy07xfv","updated":"20240201213638"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XXThreadStackSize：\n设置线程栈的大小(0 means use default stack size)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213639-zlbrptr","Type":"NodeParagraph","Properties":{"id":"20240201213639-zlbrptr","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"这些参数都是可以通过自己编写程序去简单测试的，这里碍于篇幅问题就不再提供 demo 了"}]},{"ID":"20240201213640-krip2r0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213640-krip2r0","updated":"20240201213640"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8 (可以直接跳过了)JVM 其他参数介绍"}]},{"ID":"20240201213641-3dnv1me","Type":"NodeParagraph","Properties":{"id":"20240201213641-3dnv1me","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"形形色色的参数很多，就不会说把所有都扯个遍了，因为大家其实也不会说一定要去深究到底。"}]},{"ID":"20240201213642-lujp9wh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213642-lujp9wh","updated":"20240201213642"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.1 设置内存页的大小"}]},{"ID":"20240201213643-5zoxm3u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213643-5zoxm3u","updated":"20240201213643"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XXThreadStackSize：\n设置内存页的大小，不可设置过大，会影响Perm的大小\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213644-k07vk0f","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213644-k07vk0f","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.2 设置原始类型的快速优化"}]},{"ID":"20240201213645-kim11xr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213645-kim11xr","updated":"20240201213645"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+UseFastAccessorMethods：\n设置原始类型的快速优化\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213646-sd8hzo0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213646-sd8hzo0","updated":"20240201213646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.3 设置关闭手动 GC"}]},{"ID":"20240201213647-fjnbtkf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213647-fjnbtkf","updated":"20240201213647"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+DisableExplicitGC：\n设置关闭System.gc()(这个参数需要严格的测试)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213648-eic4lrg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213648-eic4lrg","updated":"20240201213648"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.4 设置垃圾最大年龄"}]},{"ID":"20240201213649-s6jdavk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213649-s6jdavk","updated":"20240201213649"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:MaxTenuringThreshold\n设置垃圾最大年龄。如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代.对于年老代比较多的应用,可以提高效率。如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活时间,加在年轻代即被回收的概率。该参数只有在串行GC时才有效.\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213650-tmt2ypv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213650-tmt2ypv","updated":"20240201213650"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.5 加快编译速度"}]},{"ID":"20240201213651-icm62is","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213651-icm62is","updated":"20240201213651"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+AggressiveOpts\n加快编译速度\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213652-d4ecb2k","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213652-d4ecb2k","updated":"20240201213652"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.6 改善锁机制性能"}]},{"ID":"20240201213653-h10z8sa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213653-h10z8sa","updated":"20240201213653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+UseBiasedLocking\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213654-93hznkf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213654-93hznkf","updated":"20240201213654"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.7 禁用垃圾回收"}]},{"ID":"20240201213655-e2t0784","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213655-e2t0784","updated":"20240201213655"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-Xnoclassgc\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213656-e28t6xd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213656-e28t6xd","updated":"20240201213656"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.8 设置堆空间存活时间"}]},{"ID":"20240201213657-futzc7z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213657-futzc7z","updated":"20240201213657"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:SoftRefLRUPolicyMSPerMB\n设置每兆堆空闲空间中SoftReference的存活时间，默认值是1s。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213658-fpr3o92","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213658-fpr3o92","updated":"20240201213658"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.9 设置对象直接分配在老年代"}]},{"ID":"20240201213659-x8xvyx0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213659-x8xvyx0","updated":"20240201213659"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:PretenureSizeThreshold\n设置对象超过多大时直接在老年代分配，默认值是0。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213660-eneywhy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213660-eneywhy","updated":"20240201213660"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.10 设置 TLAB 占 eden 区的比例"}]},{"ID":"20240201213661-iob7jlv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213661-iob7jlv","updated":"20240201213661"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:TLABWasteTargetPercent\n设置TLAB占eden区的百分比，默认值是1% 。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213662-m6ys24s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213662-m6ys24s","updated":"20240201213662"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8.11 设置是否优先 YGC"}]},{"ID":"20240201213663-uyxy35t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213663-uyxy35t","updated":"20240201213663"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+CollectGen0First\n设置FullGC时是否先YGC，默认值是false。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213664-sgjcc2j","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213664-sgjcc2j","updated":"20240201213664"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"finally"}]},{"ID":"20240201213665-gsa27cg","Type":"NodeParagraph","Properties":{"id":"20240201213665-gsa27cg","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"真的扯了很久这东西，参考了多方的资料，有极客时间的《深入拆解虚拟机》和《Java 核心技术面试精讲》，也有百度，也有自己在学习的一些线上课程的总结。希望对你有所帮助，谢谢。"}]},{"ID":"20240201213666-i4ffc9g","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213666-i4ffc9g","updated":"20240201213666"}}]}