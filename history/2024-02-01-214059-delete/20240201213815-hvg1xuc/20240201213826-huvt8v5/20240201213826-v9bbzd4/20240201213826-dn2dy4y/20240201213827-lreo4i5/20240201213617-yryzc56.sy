{"ID":"20240201213617-yryzc56","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213617-yryzc56","title":"class-loading-process","updated":"20240201213617"},"Children":[{"ID":"20240201213618-k39ijw1","Type":"NodeThematicBreak","Properties":{"id":"20240201213618-k39ijw1","updated":"20240201213618"}},{"ID":"20240201213619-o51w4tm","Type":"NodeParagraph","Properties":{"id":"20240201213619-o51w4tm","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"title: 类加载过程详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213620-r82fixg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-r82fixg","updated":"20240201213620"},"Children":[{"ID":"20240201213621-655p8cn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-655p8cn","updated":"20240201213621"},"Children":[{"ID":"20240201213622-qiw1622","Type":"NodeParagraph","Properties":{"id":"20240201213622-qiw1622","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"JVM"}]}]}]},{"ID":"20240201213623-haa8bgp","Type":"NodeThematicBreak","Properties":{"id":"20240201213623-haa8bgp","updated":"20240201213623"}},{"ID":"20240201213624-4hv27wh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213624-4hv27wh","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"类的生命周期"}]},{"ID":"20240201213625-dt838nn","Type":"NodeParagraph","Properties":{"id":"20240201213625-dt838nn","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，验证、准备和解析这三个阶段可以统称为连接（Linking）。"}]},{"ID":"20240201213626-oydjj9q","Type":"NodeParagraph","Properties":{"id":"20240201213626-oydjj9q","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"这 7 个阶段的顺序如下图所示："}]},{"ID":"20240201213627-xj04xl9","Type":"NodeParagraph","Properties":{"id":"20240201213627-xj04xl9","updated":"20240201213627"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"一个类的完整生命周期","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/lifecycle-of-a-class.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213628-s2fzilh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213628-s2fzilh","updated":"20240201213628"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"类加载过程"}]},{"ID":"20240201213629-95k9eoz","Type":"NodeParagraph","Properties":{"id":"20240201213629-95k9eoz","updated":"20240201213629"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？"}]},{"ID":"20240201213630-c3zgnyb","Type":"NodeParagraph","Properties":{"id":"20240201213630-c3zgnyb","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"系统加载 Class 类型的文件主要三步："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"加载-\u0026gt;连接-\u0026gt;初始化"},{"Type":"NodeText","Data":"。连接过程又可分为三步："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"验证-\u0026gt;准备-\u0026gt;解析"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213631-8ggqvif","Type":"NodeParagraph","Properties":{"id":"20240201213631-8ggqvif","updated":"20240201213631"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"类加载过程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/class-loading-procedure.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213632-ckr0mfc","Type":"NodeParagraph","Properties":{"id":"20240201213632-ckr0mfc","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"详见 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.3","TextMarkATitle":"Java Virtual Machine Specification - 5.3. Creation and Loading","TextMarkTextContent":"Java Virtual Machine Specification - 5.3. Creation and Loading"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213633-tl3xjmx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213633-tl3xjmx","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"加载"}]},{"ID":"20240201213634-b12a866","Type":"NodeParagraph","Properties":{"id":"20240201213634-b12a866","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"类加载过程的第一步，主要完成下面 3 件事情："}]},{"ID":"20240201213635-ypjwbuq","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213635-ypjwbuq","updated":"20240201213635"},"Children":[{"ID":"20240201213636-zlytp9j","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213636-zlytp9j","updated":"20240201213636"},"Children":[{"ID":"20240201213637-dwjug9i","Type":"NodeParagraph","Properties":{"id":"20240201213637-dwjug9i","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"通过全类名获取定义此类的二进制字节流。"}]}]},{"ID":"20240201213638-z3lg6kf","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213638-z3lg6kf","updated":"20240201213638"},"Children":[{"ID":"20240201213639-q4rto7b","Type":"NodeParagraph","Properties":{"id":"20240201213639-q4rto7b","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"将字节流所代表的静态存储结构转换为方法区的运行时数据结构。"}]}]},{"ID":"20240201213640-hh9wu30","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213640-hh9wu30","updated":"20240201213640"},"Children":[{"ID":"20240201213641-lpskjoy","Type":"NodeParagraph","Properties":{"id":"20240201213641-lpskjoy","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"在内存中生成一个代表该类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Class"},{"Type":"NodeText","Data":" 对象，作为方法区这些数据的访问入口。"}]}]}]},{"ID":"20240201213642-nttque1","Type":"NodeParagraph","Properties":{"id":"20240201213642-nttque1","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"虚拟机规范上面这 3 点并不具体，因此是非常灵活的。比如：\"通过全类名获取定义此类的二进制字节流\" 并没有指明具体从哪里获取（ "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZIP"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"JAR"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EAR"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WAR"},{"Type":"NodeText","Data":"、网络、动态代理技术运行时动态生成、其他文件生成比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"JSP"},{"Type":"NodeText","Data":"...）、怎样获取。"}]},{"ID":"20240201213643-ylh11qa","Type":"NodeParagraph","Properties":{"id":"20240201213643-ylh11qa","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"加载这一步主要是通过我们后面要讲到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类加载器"},{"Type":"NodeText","Data":" 完成的。类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"双亲委派模型"},{"Type":"NodeText","Data":" 决定（不过，我们也能打破由双亲委派模型）。"}]},{"ID":"20240201213644-c9j6unx","Type":"NodeBlockquote","Properties":{"id":"20240201213644-c9j6unx","updated":"20240201213644"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213645-a1ihp56","Type":"NodeParagraph","Properties":{"id":"20240201213645-a1ihp56","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"类加载器、双亲委派模型也是非常重要的知识点，这部分内容在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/jvm/classloader.html","TextMarkATitle":"类加载器详解","TextMarkTextContent":"类加载器详解"},{"Type":"NodeText","Data":"这篇文章中有详细介绍到。阅读本篇文章的时候，大家知道有这么个东西就可以了。"}]}]},{"ID":"20240201213646-cx6etrw","Type":"NodeParagraph","Properties":{"id":"20240201213646-cx6etrw","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"每个 Java 类都有一个引用指向加载它的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassLoader"},{"Type":"NodeText","Data":"。不过，数组类不是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassLoader"},{"Type":"NodeText","Data":" 创建的，而是 JVM 在需要的时候自动创建的，数组类通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getClassLoader()"},{"Type":"NodeText","Data":"方法获取 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassLoader"},{"Type":"NodeText","Data":" 的时候和该数组的元素类型的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassLoader"},{"Type":"NodeText","Data":" 是一致的。"}]},{"ID":"20240201213647-nsvwdgj","Type":"NodeParagraph","Properties":{"id":"20240201213647-nsvwdgj","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"一个非数组类的加载阶段（加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，这一步我们可以去完成还可以自定义类加载器去控制字节流的获取方式（重写一个类加载器的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"loadClass()"},{"Type":"NodeText","Data":" 方法）。"}]},{"ID":"20240201213648-fusnp1z","Type":"NodeParagraph","Properties":{"id":"20240201213648-fusnp1z","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"加载阶段与连接阶段的部分动作(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了。"}]},{"ID":"20240201213649-aioue30","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213649-aioue30","updated":"20240201213649"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"验证"}]},{"ID":"20240201213650-uehe7fm","Type":"NodeParagraph","Properties":{"id":"20240201213650-uehe7fm","updated":"20240201213650"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"验证是连接阶段的第一步，这一阶段的目的是确保 Class 文件的字节流中包含的信息符合《Java 虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。"}]},{"ID":"20240201213651-zfeg7wa","Type":"NodeParagraph","Properties":{"id":"20240201213651-zfeg7wa","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"验证阶段这一步在整个类加载过程中耗费的资源还是相对较多的，但很有必要，可以有效防止恶意代码的执行。任何时候，程序安全都是第一位。"}]},{"ID":"20240201213652-d0q8992","Type":"NodeParagraph","Properties":{"id":"20240201213652-d0q8992","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"不过，验证阶段也不是必须要执行的阶段。如果程序运行的全部代码(包括自己编写的、第三方包中的、从外部加载的、动态生成的等所有代码)都已经被反复使用和验证过，在生产环境的实施阶段就可以考虑使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-Xverify:none"},{"Type":"NodeText","Data":" 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。"}]},{"ID":"20240201213653-dcbgc94","Type":"NodeParagraph","Properties":{"id":"20240201213653-dcbgc94","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"验证阶段主要由四个检验阶段组成："}]},{"ID":"20240201213654-h21yd3s","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213654-h21yd3s","updated":"20240201213654"},"Children":[{"ID":"20240201213655-u8heqru","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213655-u8heqru","updated":"20240201213655"},"Children":[{"ID":"20240201213656-fb1s4yg","Type":"NodeParagraph","Properties":{"id":"20240201213656-fb1s4yg","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"文件格式验证（Class 文件格式检查）"}]}]},{"ID":"20240201213657-a1ajlb2","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213657-a1ajlb2","updated":"20240201213657"},"Children":[{"ID":"20240201213658-e588m8s","Type":"NodeParagraph","Properties":{"id":"20240201213658-e588m8s","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"元数据验证（字节码语义检查）"}]}]},{"ID":"20240201213659-fn94lcn","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213659-fn94lcn","updated":"20240201213659"},"Children":[{"ID":"20240201213660-pxa1ijw","Type":"NodeParagraph","Properties":{"id":"20240201213660-pxa1ijw","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"字节码验证（程序语义检查）"}]}]},{"ID":"20240201213661-15pq5ka","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213661-15pq5ka","updated":"20240201213661"},"Children":[{"ID":"20240201213662-6b4xu6e","Type":"NodeParagraph","Properties":{"id":"20240201213662-6b4xu6e","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"符号引用验证（类的正确性检查）"}]}]}]},{"ID":"20240201213663-3sf7rvh","Type":"NodeParagraph","Properties":{"id":"20240201213663-3sf7rvh","updated":"20240201213663"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"验证阶段示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/class-loading-process-verification.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213664-g825cjb","Type":"NodeParagraph","Properties":{"id":"20240201213664-g825cjb","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"文件格式验证这一阶段是基于该类的二进制字节流进行的，主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个 Java 类型信息的要求。除了这一阶段之外，其余三个验证阶段都是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了。"}]},{"ID":"20240201213665-zfwtdwu","Type":"NodeBlockquote","Properties":{"id":"20240201213665-zfwtdwu","updated":"20240201213665"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213666-3a7e1w0","Type":"NodeParagraph","Properties":{"id":"20240201213666-3a7e1w0","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"方法区属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。当虚拟机要使用一个类时，它需要读取并解析 Class 文件获取相关信息，再将信息存入到方法区。方法区会存储已被虚拟机加载的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213667-1846suv","Type":"NodeParagraph","Properties":{"id":"20240201213667-1846suv","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"关于方法区的详细介绍，推荐阅读 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/jvm/memory-area.html","TextMarkATitle":"Java 内存区域详解","TextMarkTextContent":"Java 内存区域详解"},{"Type":"NodeText","Data":" 这篇文章。"}]}]},{"ID":"20240201213668-ymqfim5","Type":"NodeParagraph","Properties":{"id":"20240201213668-ymqfim5","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"符号引用验证发生在类加载过程中的解析阶段，具体点说是 JVM 将符号引用转化为直接引用的时候（解析阶段会介绍符号引用和直接引用）。"}]},{"ID":"20240201213669-5ckhcxq","Type":"NodeParagraph","Properties":{"id":"20240201213669-5ckhcxq","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"符号引用验证的主要目的是确保解析阶段能正常执行，如果无法通过符号引用验证，JVM 会抛出异常，比如："}]},{"ID":"20240201213670-0ubnqh2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-0ubnqh2","updated":"20240201213670"},"Children":[{"ID":"20240201213671-xyr6x2d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213671-xyr6x2d","updated":"20240201213671"},"Children":[{"ID":"20240201213672-yl7ha0h","Type":"NodeParagraph","Properties":{"id":"20240201213672-yl7ha0h","updated":"20240201213672"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.IllegalAccessError"},{"Type":"NodeText","Data":"：当类试图访问或修改它没有权限访问的字段，或调用它没有权限访问的方法时，抛出该异常。"}]}]},{"ID":"20240201213673-663zhui","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213673-663zhui","updated":"20240201213673"},"Children":[{"ID":"20240201213674-b1azuzi","Type":"NodeParagraph","Properties":{"id":"20240201213674-b1azuzi","updated":"20240201213674"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.NoSuchFieldError"},{"Type":"NodeText","Data":"：当类试图访问或修改一个指定的对象字段，而该对象不再包含该字段时，抛出该异常。"}]}]},{"ID":"20240201213675-ij4fwtn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213675-ij4fwtn","updated":"20240201213675"},"Children":[{"ID":"20240201213676-c47z6sx","Type":"NodeParagraph","Properties":{"id":"20240201213676-c47z6sx","updated":"20240201213676"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.NoSuchMethodError"},{"Type":"NodeText","Data":"：当类试图访问一个指定的方法，而该方法不存在时，抛出该异常。"}]}]},{"ID":"20240201213677-4ltrya1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213677-4ltrya1","updated":"20240201213677"},"Children":[{"ID":"20240201213678-ax2nvlm","Type":"NodeParagraph","Properties":{"id":"20240201213678-ax2nvlm","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213679-vkr9z6z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213679-vkr9z6z","updated":"20240201213679"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"准备"}]},{"ID":"20240201213680-521ypeh","Type":"NodeParagraph","Properties":{"id":"20240201213680-521ypeh","updated":"20240201213680"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"准备阶段是正式为类变量分配内存并设置类变量初始值的阶段"},{"Type":"NodeText","Data":"，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意："}]},{"ID":"20240201213681-iwrflai","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213681-iwrflai","updated":"20240201213681"},"Children":[{"ID":"20240201213682-2g5tyki","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213682-2g5tyki","updated":"20240201213682"},"Children":[{"ID":"20240201213683-0cbo7jd","Type":"NodeParagraph","Properties":{"id":"20240201213683-0cbo7jd","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"这时候进行内存分配的仅包括类变量（ Class Variables ，即静态变量，被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"static"},{"Type":"NodeText","Data":" 关键字修饰的变量，只与类相关，因此被称为类变量），而不包括实例变量。实例变量会在对象实例化时随着对象一块分配在 Java 堆中。"}]}]},{"ID":"20240201213684-pch6rbx","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213684-pch6rbx","updated":"20240201213684"},"Children":[{"ID":"20240201213685-kf66lf2","Type":"NodeParagraph","Properties":{"id":"20240201213685-kf66lf2","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"从概念上讲，类变量所使用的内存都应当在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法区"},{"Type":"NodeText","Data":" 中进行分配。不过有一点需要注意的是：JDK 7 之前，HotSpot 使用永久代来实现方法区的时候，实现是完全符合这种逻辑概念的。 而在 JDK 7 及之后，HotSpot 已经把原本放在永久代的字符串常量池、静态变量等移动到堆中，这个时候类变量则会随着 Class 对象一起存放在 Java 堆中。相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/fenixsoft/jvm_book/issues/75","TextMarkATitle":"《深入理解Java虚拟机（第3版）》勘误#75","TextMarkTextContent":"《深入理解 Java 虚拟机（第 3 版）》勘误#75"}]}]},{"ID":"20240201213686-dmfmyet","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213686-dmfmyet","updated":"20240201213686"},"Children":[{"ID":"20240201213687-clecms6","Type":"NodeParagraph","Properties":{"id":"20240201213687-clecms6","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"这里所设置的初始值\"通常情况\"下是数据类型默认的零值（如 0、0L、null、false 等），比如我们定义了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"public static int value=111"},{"Type":"NodeText","Data":" ，那么 value 变量在准备阶段的初始值就是 0 而不是 111（初始化阶段才会赋值）。特殊情况：比如给 value 变量加上了 final 关键字"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"public static final int value=111"},{"Type":"NodeText","Data":" ，那么准备阶段 value 的值就被赋值为 111。"}]}]}]},{"ID":"20240201213688-8fd4ypu","Type":"NodeParagraph","Properties":{"id":"20240201213688-8fd4ypu","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基本数据类型的零值"},{"Type":"NodeText","Data":"：(图片来自《深入理解 Java 虚拟机》第 3 版 7.33 )"}]},{"ID":"20240201213689-j6a2suy","Type":"NodeParagraph","Properties":{"id":"20240201213689-j6a2suy","updated":"20240201213689"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"基本数据类型的零值","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9B%B6%E5%80%BC.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213690-5y0kn0i","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213690-5y0kn0i","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"解析"}]},{"ID":"20240201213691-0stnzec","Type":"NodeParagraph","Properties":{"id":"20240201213691-0stnzec","updated":"20240201213691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。"},{"Type":"NodeText","Data":" 解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符 7 类符号引用进行。"}]},{"ID":"20240201213692-i33e8s8","Type":"NodeParagraph","Properties":{"id":"20240201213692-i33e8s8","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"《深入理解 Java 虚拟机》7.34 节第三版对符号引用和直接引用的解释如下："}]},{"ID":"20240201213693-g8udq81","Type":"NodeParagraph","Properties":{"id":"20240201213693-g8udq81","updated":"20240201213693"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"符号引用和直接引用","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/symbol-reference-and-direct-reference.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213694-xr33swm","Type":"NodeParagraph","Properties":{"id":"20240201213694-xr33swm","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"举个例子：在程序执行方法时，系统需要明确知道这个方法所在的位置。Java 虚拟机为每个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就可以直接调用该方法了。通过解析操作符号引用就可以直接转变为目标方法在类中方法表的位置，从而使得方法可以被调用。"}]},{"ID":"20240201213695-gva7jvc","Type":"NodeParagraph","Properties":{"id":"20240201213695-gva7jvc","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"综上，解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，也就是得到类或者字段、方法在内存中的指针或者偏移量。"}]},{"ID":"20240201213696-2ndm61e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213696-2ndm61e","updated":"20240201213696"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"初始化"}]},{"ID":"20240201213697-t7c7uf8","Type":"NodeParagraph","Properties":{"id":"20240201213697-t7c7uf8","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"初始化阶段是执行初始化方法 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"\u0026lt;clinit\u0026gt; ()"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法的过程，是类加载的最后一步，这一步 JVM 才开始真正执行类中定义的 Java 程序代码(字节码)。"}]},{"ID":"20240201213698-mi0q1oc","Type":"NodeBlockquote","Properties":{"id":"20240201213698-mi0q1oc","updated":"20240201213698"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213699-r714l2j","Type":"NodeParagraph","Properties":{"id":"20240201213699-r714l2j","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"说明："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt; ()"},{"Type":"NodeText","Data":"方法是编译之后自动生成的。"}]}]},{"ID":"20240201213700-y1bxgz0","Type":"NodeParagraph","Properties":{"id":"20240201213700-y1bxgz0","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"对于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt; ()"},{"Type":"NodeText","Data":" 方法的调用，虚拟机会自己确保其在多线程环境中的安全性。因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;clinit\u0026gt; ()"},{"Type":"NodeText","Data":" 方法是带锁线程安全，所以在多线程环境下进行类初始化的话可能会引起多个线程阻塞，并且这种阻塞很难被发现。"}]},{"ID":"20240201213701-gqfbgdb","Type":"NodeParagraph","Properties":{"id":"20240201213701-gqfbgdb","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"对于初始化阶段，虚拟机严格规范了有且只有 6 种情况下，必须对类进行初始化(只有主动去使用类才会初始化类)："}]},{"ID":"20240201213702-xiciqk4","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213702-xiciqk4","updated":"20240201213702"},"Children":[{"ID":"20240201213703-v76bj78","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213703-v76bj78","updated":"20240201213703"},"Children":[{"ID":"20240201213704-n5f5q64","Type":"NodeParagraph","Properties":{"id":"20240201213704-n5f5q64","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"当遇到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getstatic"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"putstatic"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invokestatic"},{"Type":"NodeText","Data":" 这 4 条字节码指令时，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":" 一个类，读取一个静态字段(未被 final 修饰)、或调用一个类的静态方法时。"}]},{"ID":"20240201213705-jjhh9rw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-jjhh9rw","updated":"20240201213705"},"Children":[{"ID":"20240201213706-sbe55cu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-sbe55cu","updated":"20240201213706"},"Children":[{"ID":"20240201213707-r7e3ozg","Type":"NodeParagraph","Properties":{"id":"20240201213707-r7e3ozg","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"当 jvm 执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":" 指令时会初始化类。即当程序创建一个类的实例对象。"}]}]},{"ID":"20240201213708-g7jkpdz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-g7jkpdz","updated":"20240201213708"},"Children":[{"ID":"20240201213709-31nwypj","Type":"NodeParagraph","Properties":{"id":"20240201213709-31nwypj","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"当 jvm 执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getstatic"},{"Type":"NodeText","Data":" 指令时会初始化类。即程序访问类的静态变量(不是静态常量，常量会被加载到运行时常量池)。"}]}]},{"ID":"20240201213710-dcsdtdl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213710-dcsdtdl","updated":"20240201213710"},"Children":[{"ID":"20240201213711-0e44h40","Type":"NodeParagraph","Properties":{"id":"20240201213711-0e44h40","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"当 jvm 执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"putstatic"},{"Type":"NodeText","Data":" 指令时会初始化类。即程序给类的静态变量赋值。"}]}]},{"ID":"20240201213712-lg1dup6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-lg1dup6","updated":"20240201213712"},"Children":[{"ID":"20240201213713-fr0zrnr","Type":"NodeParagraph","Properties":{"id":"20240201213713-fr0zrnr","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"当 jvm 执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"invokestatic"},{"Type":"NodeText","Data":" 指令时会初始化类。即程序调用类的静态方法。"}]}]}]}]},{"ID":"20240201213714-ou8qvsg","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213714-ou8qvsg","updated":"20240201213714"},"Children":[{"ID":"20240201213715-xufbu7s","Type":"NodeParagraph","Properties":{"id":"20240201213715-xufbu7s","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.reflect"},{"Type":"NodeText","Data":" 包的方法对类进行反射调用时如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Class.forname(\u0026quot;...\u0026quot;)"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"newInstance()"},{"Type":"NodeText","Data":" 等等。如果类没初始化，需要触发其初始化。"}]}]},{"ID":"20240201213716-u0x5nsa","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213716-u0x5nsa","updated":"20240201213716"},"Children":[{"ID":"20240201213717-f3grwz8","Type":"NodeParagraph","Properties":{"id":"20240201213717-f3grwz8","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"初始化一个类，如果其父类还未初始化，则先触发该父类的初始化。"}]}]},{"ID":"20240201213718-11txkpq","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213718-11txkpq","updated":"20240201213718"},"Children":[{"ID":"20240201213719-2su48y8","Type":"NodeParagraph","Properties":{"id":"20240201213719-2su48y8","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"当虚拟机启动时，用户需要定义一个要执行的主类 (包含 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 方法的那个类)，虚拟机会先初始化这个类。"}]}]},{"ID":"20240201213720-bj0r9sa","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213720-bj0r9sa","updated":"20240201213720"},"Children":[{"ID":"20240201213721-vx4pu8d","Type":"NodeParagraph","Properties":{"id":"20240201213721-vx4pu8d","updated":"20240201213721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodHandle"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"VarHandle"},{"Type":"NodeText","Data":" 可以看作是轻量级的反射调用机制，而要想使用这 2 个调用，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"就必须先使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"findStaticVarHandle"},{"Type":"NodeText","Data":" 来初始化要调用的类。"}]}]},{"ID":"20240201213722-qysp38p","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213722-qysp38p","updated":"20240201213722"},"Children":[{"ID":"20240201213723-evwm0vz","Type":"NodeParagraph","Properties":{"id":"20240201213723-evwm0vz","updated":"20240201213723"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"「补充，来自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/745","TextMarkATitle":"issue745","TextMarkTextContent":"issue745"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"」"},{"Type":"NodeText","Data":" 当一个接口中定义了 JDK8 新加入的默认方法（被 default 关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。"}]}]}]},{"ID":"20240201213724-ugclt4v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213724-ugclt4v","updated":"20240201213724"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"类卸载"}]},{"ID":"20240201213725-o9bdkvn","Type":"NodeBlockquote","Properties":{"id":"20240201213725-o9bdkvn","updated":"20240201213725"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213726-uk893ze","Type":"NodeParagraph","Properties":{"id":"20240201213726-uk893ze","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"卸载这部分内容来自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/662","TextMarkATitle":"issue#662","TextMarkTextContent":"issue#662"},{"Type":"NodeText","Data":"由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/guang19","TextMarkATitle":"guang19","TextMarkTextContent":"guang19"},{"Type":"NodeText","Data":" 补充完善。"}]}]},{"ID":"20240201213727-8hxepgq","Type":"NodeParagraph","Properties":{"id":"20240201213727-8hxepgq","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"卸载类即该类的 Class 对象被 GC。"}]},{"ID":"20240201213728-hxzwwnx","Type":"NodeParagraph","Properties":{"id":"20240201213728-hxzwwnx","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"卸载类需要满足 3 个要求:"}]},{"ID":"20240201213729-oel5f4u","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213729-oel5f4u","updated":"20240201213729"},"Children":[{"ID":"20240201213730-nz13fxb","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213730-nz13fxb","updated":"20240201213730"},"Children":[{"ID":"20240201213731-8fo7v9z","Type":"NodeParagraph","Properties":{"id":"20240201213731-8fo7v9z","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"该类的所有的实例对象都已被 GC，也就是说堆不存在该类的实例对象。"}]}]},{"ID":"20240201213732-5v9o2ap","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213732-5v9o2ap","updated":"20240201213732"},"Children":[{"ID":"20240201213733-uc31vp5","Type":"NodeParagraph","Properties":{"id":"20240201213733-uc31vp5","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"该类没有在其他任何地方被引用"}]}]},{"ID":"20240201213734-hhte81c","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213734-hhte81c","updated":"20240201213734"},"Children":[{"ID":"20240201213735-l0sec22","Type":"NodeParagraph","Properties":{"id":"20240201213735-l0sec22","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"该类的类加载器的实例已被 GC"}]}]}]},{"ID":"20240201213736-8sxg0gd","Type":"NodeParagraph","Properties":{"id":"20240201213736-8sxg0gd","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"所以，在 JVM 生命周期内，由 jvm 自带的类加载器加载的类是不会被卸载的。但是由我们自定义的类加载器加载的类是可能被卸载的。"}]},{"ID":"20240201213737-tmdbeux","Type":"NodeParagraph","Properties":{"id":"20240201213737-tmdbeux","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"只要想通一点就好了，JDK 自带的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BootstrapClassLoader"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExtClassLoader"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AppClassLoader"},{"Type":"NodeText","Data":" 负责加载 JDK 提供的类，所以它们(类加载器的实例)肯定不会被回收。而我们自定义的类加载器的实例是可以被回收的，所以使用我们自定义加载器加载的类是可以被卸载掉的。"}]},{"ID":"20240201213738-wtzr26q","Type":"NodeParagraph","Properties":{"id":"20240201213738-wtzr26q","updated":"20240201213738"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"参考"}]},{"ID":"20240201213739-v0bw9ji","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-v0bw9ji","updated":"20240201213739"},"Children":[{"ID":"20240201213740-ywxrb04","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-ywxrb04","updated":"20240201213740"},"Children":[{"ID":"20240201213741-5mfr95i","Type":"NodeParagraph","Properties":{"id":"20240201213741-5mfr95i","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"《深入理解 Java 虚拟机》"}]}]},{"ID":"20240201213742-2r29kt9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-2r29kt9","updated":"20240201213742"},"Children":[{"ID":"20240201213743-v49ucnb","Type":"NodeParagraph","Properties":{"id":"20240201213743-v49ucnb","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"《实战 Java 虚拟机》"}]}]},{"ID":"20240201213744-j8tihvr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-j8tihvr","updated":"20240201213744"},"Children":[{"ID":"20240201213745-r9644yn","Type":"NodeParagraph","Properties":{"id":"20240201213745-r9644yn","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"Chapter 5. Loading, Linking, and Initializing - Java Virtual Machine Specification："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4","TextMarkTextContent":"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4"}]}]}]},{"ID":"20240201213746-72ql1v4","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213746-72ql1v4","updated":"20240201213746"}}]}