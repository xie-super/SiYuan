{"ID":"20240201213431-i7r4e7r","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213431-i7r4e7r","title":"memory-area","updated":"20240201213431"},"Children":[{"ID":"20240201213432-hq7r3r4","Type":"NodeThematicBreak","Properties":{"id":"20240201213432-hq7r3r4","updated":"20240201213432"}},{"ID":"20240201213433-8dn8kvu","Type":"NodeParagraph","Properties":{"id":"20240201213433-8dn8kvu","updated":"20240201213433"},"Children":[{"Type":"NodeText","Data":"title: Java内存区域详解（重点）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213434-dysm0gh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213434-dysm0gh","updated":"20240201213434"},"Children":[{"ID":"20240201213435-ssdxxah","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213435-ssdxxah","updated":"20240201213435"},"Children":[{"ID":"20240201213436-gd4y2cb","Type":"NodeParagraph","Properties":{"id":"20240201213436-gd4y2cb","updated":"20240201213436"},"Children":[{"Type":"NodeText","Data":"JVM"}]}]}]},{"ID":"20240201213437-whjfhay","Type":"NodeThematicBreak","Properties":{"id":"20240201213437-whjfhay","updated":"20240201213437"}},{"ID":"20240201213438-wk06dj7","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @small-advertisement.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213438-wk06dj7","updated":"20240201213438"}},{"ID":"20240201213439-mx13ubb","Type":"NodeBlockquote","Properties":{"id":"20240201213439-mx13ubb","updated":"20240201213439"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213440-drgk0q5","Type":"NodeParagraph","Properties":{"id":"20240201213440-drgk0q5","updated":"20240201213440"},"Children":[{"Type":"NodeText","Data":"如果没有特殊说明，都是针对的是 HotSpot 虚拟机。"}]},{"ID":"20240201213441-01ip067","Type":"NodeParagraph","Properties":{"id":"20240201213441-01ip067","updated":"20240201213441"},"Children":[{"Type":"NodeText","Data":"本文基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》进行总结补充。"}]},{"ID":"20240201213442-5hh71gy","Type":"NodeParagraph","Properties":{"id":"20240201213442-5hh71gy","updated":"20240201213442"},"Children":[{"Type":"NodeText","Data":"常见面试题："}]},{"ID":"20240201213443-ou955yj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213443-ou955yj","updated":"20240201213443"},"Children":[{"ID":"20240201213444-vd1ejni","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213444-vd1ejni","updated":"20240201213444"},"Children":[{"ID":"20240201213445-ue27wet","Type":"NodeParagraph","Properties":{"id":"20240201213445-ue27wet","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"介绍下 Java 内存区域（运行时数据区）"}]}]},{"ID":"20240201213446-q2g8nz3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213446-q2g8nz3","updated":"20240201213446"},"Children":[{"ID":"20240201213447-4v65kqz","Type":"NodeParagraph","Properties":{"id":"20240201213447-4v65kqz","updated":"20240201213447"},"Children":[{"Type":"NodeText","Data":"Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）"}]}]},{"ID":"20240201213448-z5ut4uh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213448-z5ut4uh","updated":"20240201213448"},"Children":[{"ID":"20240201213449-8msxc04","Type":"NodeParagraph","Properties":{"id":"20240201213449-8msxc04","updated":"20240201213449"},"Children":[{"Type":"NodeText","Data":"对象的访问定位的两种方式（句柄和直接指针两种方式）"}]}]}]}]},{"ID":"20240201213450-raoaq2u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213450-raoaq2u","updated":"20240201213450"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"前言"}]},{"ID":"20240201213451-8qx4ebt","Type":"NodeParagraph","Properties":{"id":"20240201213451-8qx4ebt","updated":"20240201213451"},"Children":[{"Type":"NodeText","Data":"对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。"}]},{"ID":"20240201213452-4e4e0yd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213452-4e4e0yd","updated":"20240201213452"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"运行时数据区域"}]},{"ID":"20240201213453-hp5nzcu","Type":"NodeParagraph","Properties":{"id":"20240201213453-hp5nzcu","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。"}]},{"ID":"20240201213454-9v1cfk7","Type":"NodeParagraph","Properties":{"id":"20240201213454-9v1cfk7","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"JDK 1.8 和之前的版本略有不同，我们这里以 JDK 1.7 和 JDK 1.8 这两个版本为例介绍。"}]},{"ID":"20240201213455-50jee45","Type":"NodeParagraph","Properties":{"id":"20240201213455-50jee45","updated":"20240201213455"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 1.7"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213456-dt6eg4l","Type":"NodeParagraph","Properties":{"id":"20240201213456-dt6eg4l","updated":"20240201213456"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Java 运行时数据区域（JDK1.7）","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.7.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213457-uj216io","Type":"NodeParagraph","Properties":{"id":"20240201213457-uj216io","updated":"20240201213457"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 1.8"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213458-ii6doon","Type":"NodeParagraph","Properties":{"id":"20240201213458-ii6doon","updated":"20240201213458"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Java 运行时数据区域（JDK1.8 ）","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213459-6rrnecm","Type":"NodeParagraph","Properties":{"id":"20240201213459-6rrnecm","updated":"20240201213459"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程私有的："}]},{"ID":"20240201213460-l28p38j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-l28p38j","updated":"20240201213460"},"Children":[{"ID":"20240201213461-pylnu7j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213461-pylnu7j","updated":"20240201213461"},"Children":[{"ID":"20240201213462-2odptwg","Type":"NodeParagraph","Properties":{"id":"20240201213462-2odptwg","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"程序计数器"}]}]},{"ID":"20240201213463-6c4cigp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-6c4cigp","updated":"20240201213463"},"Children":[{"ID":"20240201213464-ld4vkz5","Type":"NodeParagraph","Properties":{"id":"20240201213464-ld4vkz5","updated":"20240201213464"},"Children":[{"Type":"NodeText","Data":"虚拟机栈"}]}]},{"ID":"20240201213465-mpmm68a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-mpmm68a","updated":"20240201213465"},"Children":[{"ID":"20240201213466-3r2h8rl","Type":"NodeParagraph","Properties":{"id":"20240201213466-3r2h8rl","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"本地方法栈"}]}]}]},{"ID":"20240201213467-q8vw0fd","Type":"NodeParagraph","Properties":{"id":"20240201213467-q8vw0fd","updated":"20240201213467"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程共享的："}]},{"ID":"20240201213468-vfh81c1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213468-vfh81c1","updated":"20240201213468"},"Children":[{"ID":"20240201213469-di02l8q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-di02l8q","updated":"20240201213469"},"Children":[{"ID":"20240201213470-gcio6xo","Type":"NodeParagraph","Properties":{"id":"20240201213470-gcio6xo","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"堆"}]}]},{"ID":"20240201213471-5bxq1dh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-5bxq1dh","updated":"20240201213471"},"Children":[{"ID":"20240201213472-yppxhzt","Type":"NodeParagraph","Properties":{"id":"20240201213472-yppxhzt","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"方法区"}]}]},{"ID":"20240201213473-ny1pvni","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213473-ny1pvni","updated":"20240201213473"},"Children":[{"ID":"20240201213474-8cl24is","Type":"NodeParagraph","Properties":{"id":"20240201213474-8cl24is","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"直接内存 (非运行时数据区的一部分)"}]}]}]},{"ID":"20240201213475-q0ndjhc","Type":"NodeParagraph","Properties":{"id":"20240201213475-q0ndjhc","updated":"20240201213475"},"Children":[{"Type":"NodeText","Data":"Java 虚拟机规范对于运行时数据区域的规定是相当宽松的。以堆为例：堆可以是连续空间，也可以不连续。堆的大小可以固定，也可以在运行时按需扩展 。虚拟机实现者可以使用任何垃圾回收算法管理堆，甚至完全不进行垃圾收集也是可以的。"}]},{"ID":"20240201213476-n7k1qbs","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213476-n7k1qbs","updated":"20240201213476"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"程序计数器"}]},{"ID":"20240201213477-h24avy9","Type":"NodeParagraph","Properties":{"id":"20240201213477-h24avy9","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。"}]},{"ID":"20240201213478-k4zxkqt","Type":"NodeParagraph","Properties":{"id":"20240201213478-k4zxkqt","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。"}]},{"ID":"20240201213479-kd73hox","Type":"NodeParagraph","Properties":{"id":"20240201213479-kd73hox","updated":"20240201213479"},"Children":[{"Type":"NodeText","Data":"从上面的介绍中我们知道了程序计数器主要有两个作用："}]},{"ID":"20240201213480-1pe4hpr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213480-1pe4hpr","updated":"20240201213480"},"Children":[{"ID":"20240201213481-m3s9vwm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213481-m3s9vwm","updated":"20240201213481"},"Children":[{"ID":"20240201213482-1zl6l85","Type":"NodeParagraph","Properties":{"id":"20240201213482-1zl6l85","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。"}]}]},{"ID":"20240201213483-2r129x6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213483-2r129x6","updated":"20240201213483"},"Children":[{"ID":"20240201213484-8hcljb3","Type":"NodeParagraph","Properties":{"id":"20240201213484-8hcljb3","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。"}]}]}]},{"ID":"20240201213485-3jtwn0w","Type":"NodeParagraph","Properties":{"id":"20240201213485-3jtwn0w","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"⚠️ 注意：程序计数器是唯一一个不会出现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":" 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。"}]},{"ID":"20240201213486-uvhpjvq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213486-uvhpjvq","updated":"20240201213486"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Java 虚拟机栈"}]},{"ID":"20240201213487-tiu2xml","Type":"NodeParagraph","Properties":{"id":"20240201213487-tiu2xml","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"与程序计数器一样，Java 虚拟机栈（后文简称栈）也是线程私有的，它的生命周期和线程相同，随着线程的创建而创建，随着线程的死亡而死亡。"}]},{"ID":"20240201213488-23to642","Type":"NodeParagraph","Properties":{"id":"20240201213488-23to642","updated":"20240201213488"},"Children":[{"Type":"NodeText","Data":"栈绝对算的上是 JVM 运行时数据区域的一个核心，除了一些 Native 方法调用是通过本地方法栈实现的(后面会提到)，其他所有的 Java 方法调用都是通过栈来实现的（也需要和其他运行时数据区域比如程序计数器配合）。"}]},{"ID":"20240201213489-sfrwta9","Type":"NodeParagraph","Properties":{"id":"20240201213489-sfrwta9","updated":"20240201213489"},"Children":[{"Type":"NodeText","Data":"方法调用的数据需要通过栈进行传递，每一次方法调用都会有一个对应的栈帧被压入栈中，每一个方法调用结束后，都会有一个栈帧被弹出。"}]},{"ID":"20240201213490-steb9ig","Type":"NodeParagraph","Properties":{"id":"20240201213490-steb9ig","updated":"20240201213490"},"Children":[{"Type":"NodeText","Data":"栈由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法返回地址。和数据结构上的栈类似，两者都是先进后出的数据结构，只支持出栈和入栈两种操作。"}]},{"ID":"20240201213491-l82ve17","Type":"NodeParagraph","Properties":{"id":"20240201213491-l82ve17","updated":"20240201213491"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Java 虚拟机栈","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/stack-area.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213492-hi9uxoc","Type":"NodeParagraph","Properties":{"id":"20240201213492-hi9uxoc","updated":"20240201213492"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"局部变量表"},{"Type":"NodeText","Data":" 主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。"}]},{"ID":"20240201213493-rylmtf7","Type":"NodeParagraph","Properties":{"id":"20240201213493-rylmtf7","updated":"20240201213493"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"局部变量表","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/local-variables-table.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213494-lcqzx8i","Type":"NodeParagraph","Properties":{"id":"20240201213494-lcqzx8i","updated":"20240201213494"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作数栈"},{"Type":"NodeText","Data":" 主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。"}]},{"ID":"20240201213495-bpbs2is","Type":"NodeParagraph","Properties":{"id":"20240201213495-bpbs2is","updated":"20240201213495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"动态链接"},{"Type":"NodeText","Data":" 主要服务一个方法需要调用其他方法的场景。Class 文件的常量池里保存有大量的符号引用比如方法引用的符号引用。当一个方法要调用其他方法，需要将常量池中指向方法的符号引用转化为其在内存地址中的直接引用。动态链接的作用就是为了将符号引用转换为调用方法的直接引用，这个过程也被称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"动态连接"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213496-msvut42","Type":"NodeParagraph","Properties":{"id":"20240201213496-msvut42","updated":"20240201213496"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/jvmimage-20220331175738692.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213497-r9kqbvm","Type":"NodeParagraph","Properties":{"id":"20240201213497-r9kqbvm","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"栈空间虽然不是无限的，但一般正常调用的情况下是不会出现问题的。不过，如果函数调用陷入无限循环的话，就会导致栈中被压入太多栈帧而占用太多空间，导致栈空间过深。那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StackOverFlowError"},{"Type":"NodeText","Data":" 错误。"}]},{"ID":"20240201213498-hkmk6sn","Type":"NodeParagraph","Properties":{"id":"20240201213498-hkmk6sn","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"Java 方法有两种返回方式，一种是 return 语句正常返回，一种是抛出异常。不管哪种返回方式，都会导致栈帧被弹出。也就是说， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"栈帧随着方法调用而创建，随着方法结束而销毁。无论方法正常完成还是异常完成都算作方法结束。"}]},{"ID":"20240201213499-7680fkp","Type":"NodeParagraph","Properties":{"id":"20240201213499-7680fkp","updated":"20240201213499"},"Children":[{"Type":"NodeText","Data":"除了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StackOverFlowError"},{"Type":"NodeText","Data":" 错误之外，栈还可能会出现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":"错误，这是因为如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":"异常。"}]},{"ID":"20240201213500-gfe4iej","Type":"NodeParagraph","Properties":{"id":"20240201213500-gfe4iej","updated":"20240201213500"},"Children":[{"Type":"NodeText","Data":"简单总结一下程序运行中栈可能会出现两种错误："}]},{"ID":"20240201213501-bivxyup","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213501-bivxyup","updated":"20240201213501"},"Children":[{"ID":"20240201213502-q39agiu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-q39agiu","updated":"20240201213502"},"Children":[{"ID":"20240201213503-8elhmfr","Type":"NodeParagraph","Properties":{"id":"20240201213503-8elhmfr","updated":"20240201213503"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"StackOverFlowError"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 若栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StackOverFlowError"},{"Type":"NodeText","Data":" 错误。"}]}]},{"ID":"20240201213504-rbni6ce","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-rbni6ce","updated":"20240201213504"},"Children":[{"ID":"20240201213505-5s6ryga","Type":"NodeParagraph","Properties":{"id":"20240201213505-5s6ryga","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":"异常。"}]}]}]},{"ID":"20240201213506-1s7zhxe","Type":"NodeParagraph","Properties":{"id":"20240201213506-1s7zhxe","updated":"20240201213506"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B%E7%AC%AC%E4%B8%89%E7%89%88%E7%9A%84%E7%AC%AC2%E7%AB%A0-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213507-rsm3vuh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213507-rsm3vuh","updated":"20240201213507"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"本地方法栈"}]},{"ID":"20240201213508-ohpkpr7","Type":"NodeParagraph","Properties":{"id":"20240201213508-ohpkpr7","updated":"20240201213508"},"Children":[{"Type":"NodeText","Data":"和虚拟机栈所发挥的作用非常相似，区别是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。"},{"Type":"NodeText","Data":" 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。"}]},{"ID":"20240201213509-s72a2jk","Type":"NodeParagraph","Properties":{"id":"20240201213509-s72a2jk","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。"}]},{"ID":"20240201213510-q1481v9","Type":"NodeParagraph","Properties":{"id":"20240201213510-q1481v9","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StackOverFlowError"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":" 两种错误。"}]},{"ID":"20240201213511-dq0ckub","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213511-dq0ckub","updated":"20240201213511"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"堆"}]},{"ID":"20240201213512-i9nn2b7","Type":"NodeParagraph","Properties":{"id":"20240201213512-i9nn2b7","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。"}]},{"ID":"20240201213513-aiz0vsy","Type":"NodeParagraph","Properties":{"id":"20240201213513-aiz0vsy","updated":"20240201213513"},"Children":[{"Type":"NodeText","Data":"Java 世界中“几乎”所有的对象都在堆中分配，但是，随着 JIT 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从 JDK 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。"}]},{"ID":"20240201213514-eerogxh","Type":"NodeParagraph","Properties":{"id":"20240201213514-eerogxh","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"Java 堆是垃圾收集器管理的主要区域，因此也被称作 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"GC 堆（Garbage Collected Heap）"},{"Type":"NodeText","Data":"。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代；再细致一点有：Eden、Survivor、Old 等空间。进一步划分的目的是更好地回收内存，或者更快地分配内存。"}]},{"ID":"20240201213515-p9ybcfx","Type":"NodeParagraph","Properties":{"id":"20240201213515-p9ybcfx","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分："}]},{"ID":"20240201213516-js62bkz","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213516-js62bkz","updated":"20240201213516"},"Children":[{"ID":"20240201213517-6q1sse7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213517-6q1sse7","updated":"20240201213517"},"Children":[{"ID":"20240201213518-iorhewu","Type":"NodeParagraph","Properties":{"id":"20240201213518-iorhewu","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"新生代内存(Young Generation)"}]}]},{"ID":"20240201213519-f78mb3a","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213519-f78mb3a","updated":"20240201213519"},"Children":[{"ID":"20240201213520-g1jvw0r","Type":"NodeParagraph","Properties":{"id":"20240201213520-g1jvw0r","updated":"20240201213520"},"Children":[{"Type":"NodeText","Data":"老生代(Old Generation)"}]}]},{"ID":"20240201213521-zrss9r3","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213521-zrss9r3","updated":"20240201213521"},"Children":[{"ID":"20240201213522-6vo2g3p","Type":"NodeParagraph","Properties":{"id":"20240201213522-6vo2g3p","updated":"20240201213522"},"Children":[{"Type":"NodeText","Data":"永久代(Permanent Generation)"}]}]}]},{"ID":"20240201213523-2l54kdr","Type":"NodeParagraph","Properties":{"id":"20240201213523-2l54kdr","updated":"20240201213523"},"Children":[{"Type":"NodeText","Data":"下图所示的 Eden 区、两个 Survivor 区 S0 和 S1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。"}]},{"ID":"20240201213524-cphdc37","Type":"NodeParagraph","Properties":{"id":"20240201213524-cphdc37","updated":"20240201213524"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"堆内存结构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/hotspot-heap-structure.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213525-1s1yg8t","Type":"NodeParagraph","Properties":{"id":"20240201213525-1s1yg8t","updated":"20240201213525"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 8 版本之后 PermGen(永久代) 已被 Metaspace(元空间) 取代，元空间使用的是本地内存。"},{"Type":"NodeText","Data":" （我会在方法区这部分内容详细介绍到）。"}]},{"ID":"20240201213526-0rujf62","Type":"NodeParagraph","Properties":{"id":"20240201213526-0rujf62","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 S0 或者 S1，并且对象的年龄还会加 1(Eden 区-\u003eSurvivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:MaxTenuringThreshold"},{"Type":"NodeText","Data":" 来设置。"}]},{"ID":"20240201213527-9uj5ibu","Type":"NodeBlockquote","Properties":{"id":"20240201213527-9uj5ibu","updated":"20240201213527"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213528-guyt7mx","Type":"NodeParagraph","Properties":{"id":"20240201213528-guyt7mx","updated":"20240201213528"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/552","TextMarkTextContent":"issue552"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"：“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累加，当累加到某个年龄时，所累加的大小超过了 Survivor 区的一半，则取这个年龄和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MaxTenuringThreshold"},{"Type":"NodeText","Data":" 中更小的一个值，作为新的晋升年龄阈值”。"}]},{"ID":"20240201213529-065hxw1","Type":"NodeParagraph","Properties":{"id":"20240201213529-065hxw1","updated":"20240201213529"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"动态年龄计算的代码如下"}]},{"ID":"20240201213530-1kyjn2r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213530-1kyjn2r","updated":"20240201213530"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"uint ageTable::compute_tenuring_threshold(size_t survivor_capacity) {\n //survivor_capacity是survivor空间的大小\nsize_t desired_survivor_size = (size_t)((((double) survivor_capacity)*TargetSurvivorRatio)/100);\nsize_t total = 0;\nuint age = 1;\nwhile (age \u003c table_size) {\ntotal += sizes[age];//sizes数组是每个年龄段对象大小\nif (total \u003e desired_survivor_size) break;\nage++;\n}\nuint result = age \u003c MaxTenuringThreshold ? age : MaxTenuringThreshold;\n  ...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20240201213531-82y8mox","Type":"NodeParagraph","Properties":{"id":"20240201213531-82y8mox","updated":"20240201213531"},"Children":[{"Type":"NodeText","Data":"堆这里最容易出现的就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":" 错误，并且出现这种错误之后的表现形式还会有几种，比如："}]},{"ID":"20240201213532-zv86sbf","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213532-zv86sbf","updated":"20240201213532"},"Children":[{"ID":"20240201213533-7rk47i3","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213533-7rk47i3","updated":"20240201213533"},"Children":[{"ID":"20240201213534-712o88o","Type":"NodeParagraph","Properties":{"id":"20240201213534-712o88o","updated":"20240201213534"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"java.lang.OutOfMemoryError: GC Overhead Limit Exceeded"},{"Type":"NodeText","Data":"：当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。"}]}]},{"ID":"20240201213535-6rqf0je","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213535-6rqf0je","updated":"20240201213535"},"Children":[{"ID":"20240201213536-ac2xldm","Type":"NodeParagraph","Properties":{"id":"20240201213536-ac2xldm","updated":"20240201213536"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"java.lang.OutOfMemoryError: Java heap space"},{"Type":"NodeText","Data":" :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。(和配置的最大堆内存有关，且受制于物理内存大小。最大堆内存可通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-Xmx"},{"Type":"NodeText","Data":"参数配置，若没有特别配置，将会使用默认值，详见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://stackoverflow.com/questions/28272923/default-xmxsize-in-java-8-max-heap-size","TextMarkTextContent":"Default Java 8 max heap size"},{"Type":"NodeText","Data":")"}]}]},{"ID":"20240201213537-bk3cr7k","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213537-bk3cr7k","updated":"20240201213537"},"Children":[{"ID":"20240201213538-v1d2ff9","Type":"NodeParagraph","Properties":{"id":"20240201213538-v1d2ff9","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213539-qz59m2e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213539-qz59m2e","updated":"20240201213539"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"方法区"}]},{"ID":"20240201213540-nv10ytr","Type":"NodeParagraph","Properties":{"id":"20240201213540-nv10ytr","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"方法区属于是 JVM 运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。"}]},{"ID":"20240201213541-i6e0utl","Type":"NodeParagraph","Properties":{"id":"20240201213541-i6e0utl","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，方法区到底要如何实现那就是虚拟机自己要考虑的事情了。也就是说，在不同的虚拟机实现上，方法区的实现是不同的。"}]},{"ID":"20240201213542-yy5rxzb","Type":"NodeParagraph","Properties":{"id":"20240201213542-yy5rxzb","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"当虚拟机要使用一个类时，它需要读取并解析 Class 文件获取相关信息，再将信息存入到方法区。方法区会存储已被虚拟机加载的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213543-ngatydo","Type":"NodeParagraph","Properties":{"id":"20240201213543-ngatydo","updated":"20240201213543"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法区和永久代以及元空间是什么关系呢？"},{"Type":"NodeText","Data":" 方法区和永久代以及元空间的关系很像 Java 中接口和类的关系，类实现了接口，这里的类就可以看作是永久代和元空间，接口可以看作是方法区，也就是说永久代以及元空间是 HotSpot 虚拟机对虚拟机规范中方法区的两种实现方式。并且，永久代是 JDK 1.8 之前的方法区实现，JDK 1.8 及以后方法区的实现变成了元空间。"}]},{"ID":"20240201213544-e0izspj","Type":"NodeParagraph","Properties":{"id":"20240201213544-e0izspj","updated":"20240201213544"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"HotSpot 虚拟机方法区的两种实现","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/method-area-implementation.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213545-yb2daav","Type":"NodeParagraph","Properties":{"id":"20240201213545-yb2daav","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?"}]},{"ID":"20240201213546-p6qmn6p","Type":"NodeParagraph","Properties":{"id":"20240201213546-p6qmn6p","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5"}]},{"ID":"20240201213547-mwjjz6b","Type":"NodeParagraph","Properties":{"id":"20240201213547-mwjjz6b","updated":"20240201213547"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/20210425134508117.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213548-j1nnrre","Type":"NodeParagraph","Properties":{"id":"20240201213548-j1nnrre","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"1、整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是本地内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。"}]},{"ID":"20240201213549-th3b88r","Type":"NodeBlockquote","Properties":{"id":"20240201213549-th3b88r","updated":"20240201213549"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213550-ntozgle","Type":"NodeParagraph","Properties":{"id":"20240201213550-ntozgle","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"当元空间溢出时会得到如下错误："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.OutOfMemoryError: MetaSpace"}]}]},{"ID":"20240201213551-cvdcx32","Type":"NodeParagraph","Properties":{"id":"20240201213551-cvdcx32","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"你可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX：MaxMetaspaceSize"},{"Type":"NodeText","Data":" 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX：MetaspaceSize"},{"Type":"NodeText","Data":" 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。"}]},{"ID":"20240201213552-3uwzcmg","Type":"NodeParagraph","Properties":{"id":"20240201213552-3uwzcmg","updated":"20240201213552"},"Children":[{"Type":"NodeText","Data":"2、元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MaxPermSize"},{"Type":"NodeText","Data":" 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。"}]},{"ID":"20240201213553-mmp68uv","Type":"NodeParagraph","Properties":{"id":"20240201213553-mmp68uv","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"3、在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。"}]},{"ID":"20240201213554-ab4xf0i","Type":"NodeParagraph","Properties":{"id":"20240201213554-ab4xf0i","updated":"20240201213554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法区常用参数有哪些？"}]},{"ID":"20240201213555-77ylioo","Type":"NodeParagraph","Properties":{"id":"20240201213555-77ylioo","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小。"}]},{"ID":"20240201213556-xicqpl9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213556-xicqpl9","updated":"20240201213556"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:PermSize=N //方法区 (永久代) 初始大小\n-XX:MaxPermSize=N //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213557-q2o4t8v","Type":"NodeParagraph","Properties":{"id":"20240201213557-q2o4t8v","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。"}]},{"ID":"20240201213558-23zpzr6","Type":"NodeParagraph","Properties":{"id":"20240201213558-23zpzr6","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。下面是一些常用参数："}]},{"ID":"20240201213559-w560vtf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213559-w560vtf","updated":"20240201213559"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）\n-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213560-r7emxp6","Type":"NodeParagraph","Properties":{"id":"20240201213560-r7emxp6","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。"}]},{"ID":"20240201213561-x3zbykv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213561-x3zbykv","updated":"20240201213561"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"运行时常量池"}]},{"ID":"20240201213562-fpeb37p","Type":"NodeParagraph","Properties":{"id":"20240201213562-fpeb37p","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"常量池表(Constant Pool Table)"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213563-3wxeubz","Type":"NodeParagraph","Properties":{"id":"20240201213563-3wxeubz","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"字面量是源代码中的固定值的表示法，即通过字面我们就能知道其值的含义。字面量包括整数、浮点数和字符串字面量。常见的符号引用包括类符号引用、字段符号引用、方法符号引用、接口方法符号。"}]},{"ID":"20240201213564-bsn3gzo","Type":"NodeParagraph","Properties":{"id":"20240201213564-bsn3gzo","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"《深入理解 Java 虚拟机》7.34 节第三版对符号引用和直接引用的解释如下："}]},{"ID":"20240201213565-6f4fzwm","Type":"NodeParagraph","Properties":{"id":"20240201213565-6f4fzwm","updated":"20240201213565"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"符号引用和直接引用","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/symbol-reference-and-direct-reference.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213566-m47z63q","Type":"NodeParagraph","Properties":{"id":"20240201213566-m47z63q","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"常量池表会在类加载后存放到方法区的运行时常量池中。"}]},{"ID":"20240201213567-lo5o4e6","Type":"NodeParagraph","Properties":{"id":"20240201213567-lo5o4e6","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"运行时常量池的功能类似于传统编程语言的符号表，尽管它包含了比典型符号表更广泛的数据。"}]},{"ID":"20240201213568-y674qo7","Type":"NodeParagraph","Properties":{"id":"20240201213568-y674qo7","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":" 错误。"}]},{"ID":"20240201213569-dxqyzv8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213569-dxqyzv8","updated":"20240201213569"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"字符串常量池"}]},{"ID":"20240201213570-guyvim4","Type":"NodeParagraph","Properties":{"id":"20240201213570-guyvim4","updated":"20240201213570"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"字符串常量池"},{"Type":"NodeText","Data":" 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。"}]},{"ID":"20240201213571-17xo255","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213571-17xo255","updated":"20240201213571"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 在堆中创建字符串对象”ab“\n// 将字符串对象”ab“的引用保存在字符串常量池中\nString aa = \"ab\";\n// 直接返回字符串常量池中字符串对象”ab“的引用\nString bb = \"ab\";\nSystem.out.println(aa==bb);// true\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213572-rdyu9j5","Type":"NodeParagraph","Properties":{"id":"20240201213572-rdyu9j5","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"HotSpot 虚拟机中字符串常量池的实现是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"src/hotspot/share/classfile/stringTable.cpp"},{"Type":"NodeText","Data":" ,"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StringTable"},{"Type":"NodeText","Data":" 可以简单理解为一个固定大小的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashTable"},{"Type":"NodeText","Data":" ，容量为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StringTableSize"},{"Type":"NodeText","Data":"（可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:StringTableSize"},{"Type":"NodeText","Data":" 参数来设置），保存的是字符串（key）和 字符串对象的引用（value）的映射关系，字符串对象的引用指向堆中的字符串对象。"}]},{"ID":"20240201213573-egca4rc","Type":"NodeParagraph","Properties":{"id":"20240201213573-egca4rc","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"JDK1.7 之前，字符串常量池存放在永久代。JDK1.7 字符串常量池和静态变量从永久代移动了 Java 堆中。"}]},{"ID":"20240201213574-6zt7cro","Type":"NodeParagraph","Properties":{"id":"20240201213574-6zt7cro","updated":"20240201213574"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"method-area-jdk1.6","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/method-area-jdk1.6.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213575-9rz8ev8","Type":"NodeParagraph","Properties":{"id":"20240201213575-9rz8ev8","updated":"20240201213575"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"method-area-jdk1.7","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/method-area-jdk1.7.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213576-9m3s663","Type":"NodeParagraph","Properties":{"id":"20240201213576-9m3s663","updated":"20240201213576"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 1.7 为什么要将字符串常量池移动到堆中？"}]},{"ID":"20240201213577-0isql6o","Type":"NodeParagraph","Properties":{"id":"20240201213577-0isql6o","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"主要是因为永久代（方法区实现）的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。Java 程序中通常会有大量的被创建的字符串等待回收，将字符串常量池放到堆中，能够更高效及时地回收字符串内存。"}]},{"ID":"20240201213578-jk90j9n","Type":"NodeParagraph","Properties":{"id":"20240201213578-jk90j9n","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"相关问题："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/57109429/answer/151717241","TextMarkTextContent":"JVM 常量池中存储的是对象还是引用呢？ - RednaxelaFX - 知乎"}]},{"ID":"20240201213579-2woe1rf","Type":"NodeParagraph","Properties":{"id":"20240201213579-2woe1rf","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"最后再来分享一段周志明老师在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/fenixsoft/jvm_book","TextMarkTextContent":"《深入理解 Java 虚拟机（第 3 版）》样例代码\u0026amp;勘误"},{"Type":"NodeText","Data":" GitHub 仓库的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/fenixsoft/jvm_book/issues/112","TextMarkTextContent":"issue#112"},{"Type":"NodeText","Data":" 中说过的话："}]},{"ID":"20240201213580-9yem8k3","Type":"NodeBlockquote","Properties":{"id":"20240201213580-9yem8k3","updated":"20240201213580"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213581-f396507","Type":"NodeParagraph","Properties":{"id":"20240201213581-f396507","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"运行时常量池、方法区、字符串常量池这些都是不随虚拟机实现而改变的逻辑概念，是公共且抽象的，Metaspace、Heap 是与具体某种虚拟机实现相关的物理概念，是私有且具体的。"}]}]},{"ID":"20240201213582-pyi1gpm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213582-pyi1gpm","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"直接内存"}]},{"ID":"20240201213583-002alny","Type":"NodeParagraph","Properties":{"id":"20240201213583-002alny","updated":"20240201213583"},"Children":[{"Type":"NodeText","Data":"直接内存是一种特殊的内存缓冲区，并不在 Java 堆或方法区中分配的，而是通过 JNI 的方式在本地内存上分配的。"}]},{"ID":"20240201213584-883zmx5","Type":"NodeParagraph","Properties":{"id":"20240201213584-883zmx5","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":" 错误出现。"}]},{"ID":"20240201213585-1g3l0kl","Type":"NodeParagraph","Properties":{"id":"20240201213585-1g3l0kl","updated":"20240201213585"},"Children":[{"Type":"NodeText","Data":"JDK1.4 中新加入的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"NIO（Non-Blocking I/O，也被称为 New I/O）"},{"Type":"NodeText","Data":"，引入了一种基于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通道（Channel）"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"与"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存区（Buffer）"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免了在 Java 堆和 Native 堆之间来回复制数据"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213586-ln4tesw","Type":"NodeParagraph","Properties":{"id":"20240201213586-ln4tesw","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。"}]},{"ID":"20240201213587-ncc71tm","Type":"NodeParagraph","Properties":{"id":"20240201213587-ncc71tm","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"类似的概念还有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"堆外内存"},{"Type":"NodeText","Data":" 。在一些文章中将直接内存等价于堆外内存，个人觉得不是特别准确。"}]},{"ID":"20240201213588-flsw4pl","Type":"NodeParagraph","Properties":{"id":"20240201213588-flsw4pl","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"堆外内存就是把内存对象分配在堆外的内存，这些内存直接受操作系统管理（而不是虚拟机），这样做的结果就是能够在一定程度上减少垃圾回收对应用程序造成的影响。"}]},{"ID":"20240201213589-n9bnhky","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213589-n9bnhky","updated":"20240201213589"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"HotSpot 虚拟机对象探秘"}]},{"ID":"20240201213590-3i6yvl4","Type":"NodeParagraph","Properties":{"id":"20240201213590-3i6yvl4","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。"}]},{"ID":"20240201213591-gj82hie","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213591-gj82hie","updated":"20240201213591"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"对象的创建"}]},{"ID":"20240201213592-zjtd8mu","Type":"NodeParagraph","Properties":{"id":"20240201213592-zjtd8mu","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"Java 对象的创建过程我建议最好是能默写出来，并且要掌握每一步在做什么。"}]},{"ID":"20240201213593-o1cljy1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213593-o1cljy1","updated":"20240201213593"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Step1:类加载检查"}]},{"ID":"20240201213594-jgz6piv","Type":"NodeParagraph","Properties":{"id":"20240201213594-jgz6piv","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。"}]},{"ID":"20240201213595-c8sn23n","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213595-c8sn23n","updated":"20240201213595"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Step2:分配内存"}]},{"ID":"20240201213596-jjxu3on","Type":"NodeParagraph","Properties":{"id":"20240201213596-jjxu3on","updated":"20240201213596"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类加载检查"},{"Type":"NodeText","Data":"通过后，接下来虚拟机将为新生对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分配内存"},{"Type":"NodeText","Data":"。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分配方式"},{"Type":"NodeText","Data":"有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“指针碰撞”"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“空闲列表”"},{"Type":"NodeText","Data":" 两种，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213597-c2rrya3","Type":"NodeParagraph","Properties":{"id":"20240201213597-c2rrya3","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存分配的两种方式"},{"Type":"NodeText","Data":" （补充内容，需要掌握）："}]},{"ID":"20240201213598-2nhlw1f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213598-2nhlw1f","updated":"20240201213598"},"Children":[{"ID":"20240201213599-l0nnv6v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213599-l0nnv6v","updated":"20240201213599"},"Children":[{"ID":"20240201213600-nu0a340","Type":"NodeParagraph","Properties":{"id":"20240201213600-nu0a340","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"指针碰撞："}]},{"ID":"20240201213601-w31fbn4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213601-w31fbn4","updated":"20240201213601"},"Children":[{"ID":"20240201213602-regjx0x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213602-regjx0x","updated":"20240201213602"},"Children":[{"ID":"20240201213603-814d5vk","Type":"NodeParagraph","Properties":{"id":"20240201213603-814d5vk","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"适用场合：堆内存规整（即没有内存碎片）的情况下。"}]}]},{"ID":"20240201213604-xd2kx50","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213604-xd2kx50","updated":"20240201213604"},"Children":[{"ID":"20240201213605-kbc2683","Type":"NodeParagraph","Properties":{"id":"20240201213605-kbc2683","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。"}]}]},{"ID":"20240201213606-jhmh5ky","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213606-jhmh5ky","updated":"20240201213606"},"Children":[{"ID":"20240201213607-77ta7dp","Type":"NodeParagraph","Properties":{"id":"20240201213607-77ta7dp","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"使用该分配方式的 GC 收集器：Serial, ParNew"}]}]}]}]},{"ID":"20240201213608-cgpwtra","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-cgpwtra","updated":"20240201213608"},"Children":[{"ID":"20240201213609-b345xuw","Type":"NodeParagraph","Properties":{"id":"20240201213609-b345xuw","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"空闲列表："}]},{"ID":"20240201213610-ch8sjo1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-ch8sjo1","updated":"20240201213610"},"Children":[{"ID":"20240201213611-eggo6an","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213611-eggo6an","updated":"20240201213611"},"Children":[{"ID":"20240201213612-mljooht","Type":"NodeParagraph","Properties":{"id":"20240201213612-mljooht","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"适用场合：堆内存不规整的情况下。"}]}]},{"ID":"20240201213613-79y357o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213613-79y357o","updated":"20240201213613"},"Children":[{"ID":"20240201213614-zmn9f29","Type":"NodeParagraph","Properties":{"id":"20240201213614-zmn9f29","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"原理：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。"}]}]},{"ID":"20240201213615-yl04acz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213615-yl04acz","updated":"20240201213615"},"Children":[{"ID":"20240201213616-vpvdtyz","Type":"NodeParagraph","Properties":{"id":"20240201213616-vpvdtyz","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"使用该分配方式的 GC 收集器：CMS"}]}]}]}]}]},{"ID":"20240201213617-oant0ow","Type":"NodeParagraph","Properties":{"id":"20240201213617-oant0ow","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是\"标记-清除\"，还是\"标记-整理\"（也称作\"标记-压缩\"），值得注意的是，复制算法内存也是规整的。"}]},{"ID":"20240201213618-ru18ohh","Type":"NodeParagraph","Properties":{"id":"20240201213618-ru18ohh","updated":"20240201213618"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存分配并发问题（补充内容，需要掌握）"}]},{"ID":"20240201213619-nbwouik","Type":"NodeParagraph","Properties":{"id":"20240201213619-nbwouik","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全："}]},{"ID":"20240201213620-5xmffxy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-5xmffxy","updated":"20240201213620"},"Children":[{"ID":"20240201213621-ych0a24","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-ych0a24","updated":"20240201213621"},"Children":[{"ID":"20240201213622-gmtj6n1","Type":"NodeParagraph","Properties":{"id":"20240201213622-gmtj6n1","updated":"20240201213622"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CAS+失败重试："},{"Type":"NodeText","Data":" CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。"}]}]},{"ID":"20240201213623-hbv2ffv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213623-hbv2ffv","updated":"20240201213623"},"Children":[{"ID":"20240201213624-bykiq6s","Type":"NodeParagraph","Properties":{"id":"20240201213624-bykiq6s","updated":"20240201213624"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"TLAB："},{"Type":"NodeText","Data":" 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配"}]}]}]},{"ID":"20240201213625-5v9eupm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213625-5v9eupm","updated":"20240201213625"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Step3:初始化零值"}]},{"ID":"20240201213626-jbog578","Type":"NodeParagraph","Properties":{"id":"20240201213626-jbog578","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。"}]},{"ID":"20240201213627-mbgf1dy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213627-mbgf1dy","updated":"20240201213627"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Step4:设置对象头"}]},{"ID":"20240201213628-s0w6882","Type":"NodeParagraph","Properties":{"id":"20240201213628-s0w6882","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"初始化零值完成之后，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机要对对象进行必要的设置"},{"Type":"NodeText","Data":"，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这些信息存放在对象头中。"},{"Type":"NodeText","Data":" 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。"}]},{"ID":"20240201213629-f0tnxea","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213629-f0tnxea","updated":"20240201213629"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Step5:执行 init 方法"}]},{"ID":"20240201213630-xjxmbmk","Type":"NodeParagraph","Properties":{"id":"20240201213630-xjxmbmk","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;init\u0026gt;"},{"Type":"NodeText","Data":" 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;init\u0026gt;"},{"Type":"NodeText","Data":" 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。"}]},{"ID":"20240201213631-89c8haw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213631-89c8haw","updated":"20240201213631"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"对象的内存布局"}]},{"ID":"20240201213632-g4c1ldd","Type":"NodeParagraph","Properties":{"id":"20240201213632-g4c1ldd","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对象头"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实例数据"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对齐填充"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213633-gtsj4vi","Type":"NodeParagraph","Properties":{"id":"20240201213633-gtsj4vi","updated":"20240201213633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Hotspot 虚拟机的对象头包括两部分信息"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第一部分用于存储对象自身的运行时数据"},{"Type":"NodeText","Data":"（哈希码、GC 分代年龄、锁状态标志等等），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"另一部分是类型指针"},{"Type":"NodeText","Data":"，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。"}]},{"ID":"20240201213634-lhxz4sf","Type":"NodeParagraph","Properties":{"id":"20240201213634-lhxz4sf","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实例数据部分是对象真正存储的有效信息"},{"Type":"NodeText","Data":"，也是在程序中所定义的各种类型的字段内容。"}]},{"ID":"20240201213635-dcfc8ob","Type":"NodeParagraph","Properties":{"id":"20240201213635-dcfc8ob","updated":"20240201213635"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。"},{"Type":"NodeText","Data":" 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。"}]},{"ID":"20240201213636-6j5pfom","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213636-6j5pfom","updated":"20240201213636"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"对象的访问定位"}]},{"ID":"20240201213637-gc3xh3g","Type":"NodeParagraph","Properties":{"id":"20240201213637-gc3xh3g","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用句柄"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"直接指针"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213638-5jrwofg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213638-5jrwofg","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"句柄"}]},{"ID":"20240201213639-pk3maxs","Type":"NodeParagraph","Properties":{"id":"20240201213639-pk3maxs","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与对象类型数据各自的具体地址信息。"}]},{"ID":"20240201213640-sgfgw46","Type":"NodeParagraph","Properties":{"id":"20240201213640-sgfgw46","updated":"20240201213640"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"对象的访问定位-使用句柄","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/access-location-of-object-handle.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213641-m1mp5xa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213641-m1mp5xa","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"直接指针"}]},{"ID":"20240201213642-cdc8jy9","Type":"NodeParagraph","Properties":{"id":"20240201213642-cdc8jy9","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"如果使用直接指针访问，reference 中存储的直接就是对象的地址。"}]},{"ID":"20240201213643-ztivd19","Type":"NodeParagraph","Properties":{"id":"20240201213643-ztivd19","updated":"20240201213643"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"对象的访问定位-直接指针","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/jvm/access-location-of-object-handle-direct-pointer.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213644-elv0s1x","Type":"NodeParagraph","Properties":{"id":"20240201213644-elv0s1x","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。"}]},{"ID":"20240201213645-pcrfin9","Type":"NodeParagraph","Properties":{"id":"20240201213645-pcrfin9","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"HotSpot 虚拟机主要使用的就是这种方式来进行对象访问。"}]},{"ID":"20240201213646-4yvttb2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213646-4yvttb2","updated":"20240201213646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213647-g8tr5u4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-g8tr5u4","updated":"20240201213647"},"Children":[{"ID":"20240201213648-1l9vy0r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-1l9vy0r","updated":"20240201213648"},"Children":[{"ID":"20240201213649-xz1pehn","Type":"NodeParagraph","Properties":{"id":"20240201213649-xz1pehn","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"《深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第二版》"}]}]},{"ID":"20240201213650-i1g5vcm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-i1g5vcm","updated":"20240201213650"},"Children":[{"ID":"20240201213651-zu5dide","Type":"NodeParagraph","Properties":{"id":"20240201213651-zu5dide","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"《自己动手写 Java 虚拟机》"}]}]},{"ID":"20240201213652-hv46izi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-hv46izi","updated":"20240201213652"},"Children":[{"ID":"20240201213653-xc03vt4","Type":"NodeParagraph","Properties":{"id":"20240201213653-xc03vt4","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"Chapter 2. The Structure of the Java Virtual Machine："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html","TextMarkTextContent":"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html"}]}]},{"ID":"20240201213654-90u971b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-90u971b","updated":"20240201213654"},"Children":[{"ID":"20240201213655-s0c76hm","Type":"NodeParagraph","Properties":{"id":"20240201213655-s0c76hm","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"JVM 栈帧内部结构-动态链接："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://chenxitag.com/archives/368","TextMarkTextContent":"https://chenxitag.com/archives/368"}]}]},{"ID":"20240201213656-4zcufbh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-4zcufbh","updated":"20240201213656"},"Children":[{"ID":"20240201213657-fwplype","Type":"NodeParagraph","Properties":{"id":"20240201213657-fwplype","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"Java 中 new String(\"字面量\") 中 \"字面量\" 是何时进入字符串常量池的? - 木女孩的回答 - 知乎："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/55994121/answer/147296098","TextMarkTextContent":"https://www.zhihu.com/question/55994121/answer/147296098"}]}]},{"ID":"20240201213658-bpokqfo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-bpokqfo","updated":"20240201213658"},"Children":[{"ID":"20240201213659-9ympbil","Type":"NodeParagraph","Properties":{"id":"20240201213659-9ympbil","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"JVM 常量池中存储的是对象还是引用呢？ - RednaxelaFX 的回答 - 知乎："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/57109429/answer/151717241","TextMarkTextContent":"https://www.zhihu.com/question/57109429/answer/151717241"}]}]},{"ID":"20240201213660-0scxtfu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213660-0scxtfu","updated":"20240201213660"},"Children":[{"ID":"20240201213661-zjvh03i","Type":"NodeParagraph","Properties":{"id":"20240201213661-zjvh03i","updated":"20240201213661"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/","TextMarkTextContent":"http://www.pointsoftware.ch/en/under-the-hood-runtime-data-areas-javas-memory-model/"}]}]},{"ID":"20240201213662-mag4efo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-mag4efo","updated":"20240201213662"},"Children":[{"ID":"20240201213663-4hxu0c1","Type":"NodeParagraph","Properties":{"id":"20240201213663-4hxu0c1","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dzone.com/articles/jvm-permgen-%E2%80%93-where-art-thou","TextMarkTextContent":"https://dzone.com/articles/jvm-permgen-%E2%80%93-where-art-thou"}]}]},{"ID":"20240201213664-3clb9fd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-3clb9fd","updated":"20240201213664"},"Children":[{"ID":"20240201213665-yidfz0v","Type":"NodeParagraph","Properties":{"id":"20240201213665-yidfz0v","updated":"20240201213665"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://stackoverflow.com/questions/9095748/method-area-and-permgen","TextMarkTextContent":"https://stackoverflow.com/questions/9095748/method-area-and-permgen"}]}]}]},{"ID":"20240201213666-1vnd6s2","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213666-1vnd6s2","updated":"20240201213666"}}]}