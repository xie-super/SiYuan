{"ID":"20240201213608-p97zjxy","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213608-p97zjxy","title":"jvm-parameters-intro","updated":"20240201213608"},"Children":[{"ID":"20240201213609-bc3348l","Type":"NodeThematicBreak","Properties":{"id":"20240201213609-bc3348l","updated":"20240201213609"}},{"ID":"20240201213610-nu22uy5","Type":"NodeParagraph","Properties":{"id":"20240201213610-nu22uy5","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"title: 最重要的JVM参数总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213611-e5itj8f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213611-e5itj8f","updated":"20240201213611"},"Children":[{"ID":"20240201213612-qjw23am","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213612-qjw23am","updated":"20240201213612"},"Children":[{"ID":"20240201213613-j977njm","Type":"NodeParagraph","Properties":{"id":"20240201213613-j977njm","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"JVM"}]}]}]},{"ID":"20240201213614-a64lviq","Type":"NodeThematicBreak","Properties":{"id":"20240201213614-a64lviq","updated":"20240201213614"}},{"ID":"20240201213615-o0z8iim","Type":"NodeBlockquote","Properties":{"id":"20240201213615-o0z8iim","updated":"20240201213615"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213616-fry1kjk","Type":"NodeParagraph","Properties":{"id":"20240201213616-fry1kjk","updated":"20240201213616"},"Children":[{"Type":"NodeText","Data":"本文由 JavaGuide 翻译自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.baeldung.com/jvm-parameters","TextMarkTextContent":"https://www.baeldung.com/jvm-parameters"},{"Type":"NodeText","Data":"，并对文章进行了大量的完善补充。"}]},{"ID":"20240201213617-9ji0rb6","Type":"NodeParagraph","Properties":{"id":"20240201213617-9ji0rb6","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"JDK 版本：1.8"}]}]},{"ID":"20240201213618-ksdu3e5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213618-ksdu3e5","updated":"20240201213618"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.概述"}]},{"ID":"20240201213619-dtvr3x0","Type":"NodeParagraph","Properties":{"id":"20240201213619-dtvr3x0","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"在本篇文章中，你将掌握最常用的 JVM 参数配置。"}]},{"ID":"20240201213620-cxabgkl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213620-cxabgkl","updated":"20240201213620"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.堆内存相关"}]},{"ID":"20240201213621-uimeehv","Type":"NodeBlockquote","Properties":{"id":"20240201213621-uimeehv","updated":"20240201213621"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213622-lsye1re","Type":"NodeParagraph","Properties":{"id":"20240201213622-lsye1re","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。"}]}]},{"ID":"20240201213623-lzdm7kx","Type":"NodeParagraph","Properties":{"id":"20240201213623-lzdm7kx","updated":"20240201213623"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"内存区域常见配置参数","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/内存区域常见配置参数-20240201213827-w0uxfnp.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213624-1kqxsjf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213624-1kqxsjf","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.显式指定堆内存"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"–Xms"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-Xmx"}]},{"ID":"20240201213625-3lhl99d","Type":"NodeParagraph","Properties":{"id":"20240201213625-3lhl99d","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"与性能有关的最常见实践之一是根据应用程序要求初始化堆内存。如果我们需要指定最小和最大堆大小（推荐显示指定大小），以下参数可以帮助你实现："}]},{"ID":"20240201213626-mobkhz9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213626-mobkhz9","updated":"20240201213626"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-Xms\u003cheap size\u003e[unit]\n-Xmx\u003cheap size\u003e[unit]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213627-2in7vma","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-2in7vma","updated":"20240201213627"},"Children":[{"ID":"20240201213628-hw0sy7p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-hw0sy7p","updated":"20240201213628"},"Children":[{"ID":"20240201213629-hq60j2b","Type":"NodeParagraph","Properties":{"id":"20240201213629-hq60j2b","updated":"20240201213629"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"heap size"},{"Type":"NodeText","Data":" 表示要初始化内存的具体大小。"}]}]},{"ID":"20240201213630-s1c1x53","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-s1c1x53","updated":"20240201213630"},"Children":[{"ID":"20240201213631-3pg3h2a","Type":"NodeParagraph","Properties":{"id":"20240201213631-3pg3h2a","updated":"20240201213631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"unit"},{"Type":"NodeText","Data":" 表示要初始化内存的单位。单位为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong em","TextMarkTextContent":"“ g”"},{"Type":"NodeText","Data":" (GB)、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong em","TextMarkTextContent":"“ m”"},{"Type":"NodeText","Data":"（MB）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong em","TextMarkTextContent":"“ k”"},{"Type":"NodeText","Data":"（KB）。"}]}]}]},{"ID":"20240201213632-0anfdst","Type":"NodeParagraph","Properties":{"id":"20240201213632-0anfdst","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"举个栗子 🌰，如果我们要为 JVM 分配最小 2 GB 和最大 5 GB 的堆内存大小，我们的参数应该这样来写："}]},{"ID":"20240201213633-8cku9dl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213633-8cku9dl","updated":"20240201213633"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-Xms2G -Xmx5G\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213634-kzvixrj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213634-kzvixrj","updated":"20240201213634"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2.显式新生代内存(Young Generation)"}]},{"ID":"20240201213635-mohv2k6","Type":"NodeParagraph","Properties":{"id":"20240201213635-mohv2k6","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"根据"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html","TextMarkTextContent":"Oracle 官方文档"},{"Type":"NodeText","Data":"，在堆总可用内存配置完成之后，第二大影响因素是为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young Generation"},{"Type":"NodeText","Data":" 在堆内存所占的比例。默认情况下，YG 的最小大小为 1310 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"MB"},{"Type":"NodeText","Data":"，最大大小为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"无限制"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213636-u6ku1vq","Type":"NodeParagraph","Properties":{"id":"20240201213636-u6ku1vq","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"一共有两种指定 新生代内存(Young Generation)大小的方法："}]},{"ID":"20240201213637-vzo1u24","Type":"NodeParagraph","Properties":{"id":"20240201213637-vzo1u24","updated":"20240201213637"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"-XX:NewSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"-XX:MaxNewSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指定"}]},{"ID":"20240201213638-5hnx1dx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213638-5hnx1dx","updated":"20240201213638"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:NewSize=\u003cyoung size\u003e[unit]\n-XX:MaxNewSize=\u003cyoung size\u003e[unit]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213639-w3vhpdl","Type":"NodeParagraph","Properties":{"id":"20240201213639-w3vhpdl","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"举个栗子 🌰，如果我们要为 新生代分配 最小 256m 的内存，最大 1024m 的内存我们的参数应该这样来写："}]},{"ID":"20240201213640-6pdqf0m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213640-6pdqf0m","updated":"20240201213640"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:NewSize=256m\n-XX:MaxNewSize=1024m\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213641-79uzw92","Type":"NodeParagraph","Properties":{"id":"20240201213641-79uzw92","updated":"20240201213641"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"-Xmn\u0026lt;young size\u0026gt;[unit]"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指定"}]},{"ID":"20240201213642-clpbyc8","Type":"NodeParagraph","Properties":{"id":"20240201213642-clpbyc8","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"举个栗子 🌰，如果我们要为 新生代分配 256m 的内存（NewSize 与 MaxNewSize 设为一致），我们的参数应该这样来写："}]},{"ID":"20240201213643-xnjg09k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213643-xnjg09k","updated":"20240201213643"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-Xmn256m\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213644-jgo0bkf","Type":"NodeParagraph","Properties":{"id":"20240201213644-jgo0bkf","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"GC 调优策略中很重要的一条经验总结是这样说的："}]},{"ID":"20240201213645-b118wfo","Type":"NodeBlockquote","Properties":{"id":"20240201213645-b118wfo","updated":"20240201213645"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213646-29drz07","Type":"NodeParagraph","Properties":{"id":"20240201213646-29drz07","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"将新对象预留在新生代，由于 Full GC 的成本远高于 Minor GC，因此尽可能将对象分配在新生代是明智的做法，实际项目中根据 GC 日志分析新生代空间大小分配是否合理，适当通过“-Xmn”命令调节新生代大小，最大限度降低新对象直接进入老年代的情况。"}]}]},{"ID":"20240201213647-iykxar5","Type":"NodeParagraph","Properties":{"id":"20240201213647-iykxar5","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"另外，你还可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"-XX:NewRatio=\u0026lt;int\u0026gt;"},{"Type":"NodeText","Data":" 来设置老年代与新生代内存的比值。"}]},{"ID":"20240201213648-3w3p19g","Type":"NodeParagraph","Properties":{"id":"20240201213648-3w3p19g","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"比如下面的参数就是设置老年代与新生代内存的比值为 1。也就是说老年代和新生代所占比值为 1：1，新生代占整个堆栈的 1/2。"}]},{"ID":"20240201213649-qjgyf5f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213649-qjgyf5f","updated":"20240201213649"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:NewRatio=1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213650-fgqvef4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213650-fgqvef4","updated":"20240201213650"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.3.显式指定永久代/元空间的大小"}]},{"ID":"20240201213651-q4ylohu","Type":"NodeParagraph","Properties":{"id":"20240201213651-q4ylohu","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"从 Java 8 开始，如果我们没有指定 Metaspace 的大小，随着更多类的创建，虚拟机会耗尽所有可用的系统内存（永久代并不会出现这种情况）。"}]},{"ID":"20240201213652-h7n68mv","Type":"NodeParagraph","Properties":{"id":"20240201213652-h7n68mv","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小"}]},{"ID":"20240201213653-fxmkkhe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213653-fxmkkhe","updated":"20240201213653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:PermSize=N #方法区 (永久代) 初始大小\n-XX:MaxPermSize=N #方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213654-npkk2dl","Type":"NodeParagraph","Properties":{"id":"20240201213654-npkk2dl","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。"}]},{"ID":"20240201213655-prbwhfx","Type":"NodeParagraph","Properties":{"id":"20240201213655-prbwhfx","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。"}]},{"ID":"20240201213656-2a7w50m","Type":"NodeParagraph","Properties":{"id":"20240201213656-2a7w50m","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"下面是一些常用参数："}]},{"ID":"20240201213657-d3otjwd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213657-d3otjwd","updated":"20240201213657"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:MetaspaceSize=N #设置 Metaspace 的初始大小（是一个常见的误区，后面会解释）\n-XX:MaxMetaspaceSize=N #设置 Metaspace 的最大大小\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213658-yklz5c9","Type":"NodeParagraph","Properties":{"id":"20240201213658-yklz5c9","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1947","TextMarkTextContent":"issue#1947"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213659-thqy7em","Type":"NodeParagraph","Properties":{"id":"20240201213659-thqy7em","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"1、Metaspace 的初始容量并不是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:MetaspaceSize"},{"Type":"NodeText","Data":" 设置，无论 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:MetaspaceSize"},{"Type":"NodeText","Data":" 配置什么值，对于 64 位 JVM 来说，Metaspace 的初始容量都是 21807104（约 20.8m）。"}]},{"ID":"20240201213660-h3rxte0","Type":"NodeParagraph","Properties":{"id":"20240201213660-h3rxte0","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"可以参考 Oracle 官方文档 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/considerations.html","TextMarkTextContent":"Other Considerations"},{"Type":"NodeText","Data":" 中提到的："}]},{"ID":"20240201213661-da77ql8","Type":"NodeBlockquote","Properties":{"id":"20240201213661-da77ql8","updated":"20240201213661"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213662-yoic2vq","Type":"NodeParagraph","Properties":{"id":"20240201213662-yoic2vq","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"Specify a higher value for the option MetaspaceSize to avoid early garbage collections induced for class metadata. The amount of class metadata allocated for an application is application-dependent and general guidelines do not exist for the selection of MetaspaceSize. The default size of MetaspaceSize is platform-dependent and ranges from 12 MB to about 20 MB."}]},{"ID":"20240201213663-k1460f6","Type":"NodeParagraph","Properties":{"id":"20240201213663-k1460f6","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"MetaspaceSize 的默认大小取决于平台，范围从 12 MB 到大约 20 MB。"}]}]},{"ID":"20240201213664-fz0lb2p","Type":"NodeParagraph","Properties":{"id":"20240201213664-fz0lb2p","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"另外，还可以看一下这个试验："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/jqfppqqd98DfAJHZhFbmxA","TextMarkTextContent":"JVM 参数 MetaspaceSize 的误解"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213665-cfma0xi","Type":"NodeParagraph","Properties":{"id":"20240201213665-cfma0xi","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"2、Metaspace 由于使用不断扩容到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:MetaspaceSize"},{"Type":"NodeText","Data":"参数指定的量，就会发生 FGC，且之后每次 Metaspace 扩容都会发生 Full GC。"}]},{"ID":"20240201213666-azfqxx1","Type":"NodeParagraph","Properties":{"id":"20240201213666-azfqxx1","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"也就是说，MetaspaceSize 表示 Metaspace 使用过程中触发 Full GC 的阈值，只对触发起作用。"}]},{"ID":"20240201213667-vvjqnd8","Type":"NodeParagraph","Properties":{"id":"20240201213667-vvjqnd8","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"垃圾搜集器内部是根据变量 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"_capacity_until_GC"},{"Type":"NodeText","Data":"来判断 Metaspace 区域是否达到阈值的，初始化代码如下所示："}]},{"ID":"20240201213668-vkdmu2g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213668-vkdmu2g","updated":"20240201213668"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"void MetaspaceGC::initialize() {\n  // Set the high-water mark to MaxMetapaceSize during VM initialization since\n  // we can't do a GC during initialization.\n  _capacity_until_GC = MaxMetaspaceSize;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213669-xa2fkrq","Type":"NodeParagraph","Properties":{"id":"20240201213669-xa2fkrq","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1204","TextMarkTextContent":"issue 更正：MaxMetaspaceSize 如果不指定大小的话，不会耗尽内存 #1204"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213670-6faysf2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213670-6faysf2","updated":"20240201213670"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.垃圾收集相关"}]},{"ID":"20240201213671-enx4oxa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213671-enx4oxa","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.1.垃圾回收器"}]},{"ID":"20240201213672-je9ng7l","Type":"NodeParagraph","Properties":{"id":"20240201213672-je9ng7l","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"为了提高应用程序的稳定性，选择正确的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html","TextMarkTextContent":"垃圾收集"},{"Type":"NodeText","Data":"算法至关重要。"}]},{"ID":"20240201213673-hu1avqt","Type":"NodeParagraph","Properties":{"id":"20240201213673-hu1avqt","updated":"20240201213673"},"Children":[{"Type":"NodeText","Data":"JVM 具有四种类型的 GC 实现："}]},{"ID":"20240201213674-a4u64xq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213674-a4u64xq","updated":"20240201213674"},"Children":[{"ID":"20240201213675-m9tedqh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213675-m9tedqh","updated":"20240201213675"},"Children":[{"ID":"20240201213676-3dww4mx","Type":"NodeParagraph","Properties":{"id":"20240201213676-3dww4mx","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"串行垃圾收集器"}]}]},{"ID":"20240201213677-a8w031l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213677-a8w031l","updated":"20240201213677"},"Children":[{"ID":"20240201213678-uwsssy0","Type":"NodeParagraph","Properties":{"id":"20240201213678-uwsssy0","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"并行垃圾收集器"}]}]},{"ID":"20240201213679-c8q84ts","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-c8q84ts","updated":"20240201213679"},"Children":[{"ID":"20240201213680-m1tymam","Type":"NodeParagraph","Properties":{"id":"20240201213680-m1tymam","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"CMS 垃圾收集器"}]}]},{"ID":"20240201213681-ao3gmur","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-ao3gmur","updated":"20240201213681"},"Children":[{"ID":"20240201213682-4h1ls8p","Type":"NodeParagraph","Properties":{"id":"20240201213682-4h1ls8p","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"G1 垃圾收集器"}]}]}]},{"ID":"20240201213683-ylqxf2w","Type":"NodeParagraph","Properties":{"id":"20240201213683-ylqxf2w","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"可以使用以下参数声明这些实现："}]},{"ID":"20240201213684-i4g8ybk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213684-i4g8ybk","updated":"20240201213684"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+UseSerialGC\n-XX:+UseParallelGC\n-XX:+UseParNewGC\n-XX:+UseG1GC\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213685-ce1qfiu","Type":"NodeParagraph","Properties":{"id":"20240201213685-ce1qfiu","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"有关"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"垃圾回收"},{"Type":"NodeText","Data":"实施的更多详细信息，请参见"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.md","TextMarkTextContent":"此处"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213686-w5ijfpj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213686-w5ijfpj","updated":"20240201213686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.2.GC 日志记录"}]},{"ID":"20240201213687-kfhjrhm","Type":"NodeParagraph","Properties":{"id":"20240201213687-kfhjrhm","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"生产环境上，或者其他要测试 GC 问题的环境上，一定会配置上打印 GC 日志的参数，便于分析 GC 相关的问题。"}]},{"ID":"20240201213688-p7ir2x9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213688-p7ir2x9","updated":"20240201213688"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 必选\n# 打印基本 GC 信息\n-XX:+PrintGCDetails\n-XX:+PrintGCDateStamps\n# 打印对象分布\n-XX:+PrintTenuringDistribution\n# 打印堆数据\n-XX:+PrintHeapAtGC\n# 打印Reference处理信息\n# 强引用/弱引用/软引用/虚引用/finalize 相关的方法\n-XX:+PrintReferenceGC\n# 打印STW时间\n-XX:+PrintGCApplicationStoppedTime\n\n# 可选\n# 打印safepoint信息，进入 STW 阶段之前，需要要找到一个合适的 safepoint\n-XX:+PrintSafepointStatistics\n-XX:PrintSafepointStatisticsCount=1\n\n# GC日志输出的文件路径\n-Xloggc:/path/to/gc-%t.log\n# 开启日志文件分割\n-XX:+UseGCLogFileRotation\n# 最多分割几个文件，超过之后从头文件开始写\n-XX:NumberOfGCLogFiles=14\n# 每个文件上限大小，超过就触发分割\n-XX:GCLogFileSize=50M\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213689-nchx3kl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213689-nchx3kl","updated":"20240201213689"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.处理 OOM"}]},{"ID":"20240201213690-q7gp4hp","Type":"NodeParagraph","Properties":{"id":"20240201213690-q7gp4hp","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"对于大型应用程序来说，面对内存不足错误是非常常见的，这反过来会导致应用程序崩溃。这是一个非常关键的场景，很难通过复制来解决这个问题。"}]},{"ID":"20240201213691-jgudu0l","Type":"NodeParagraph","Properties":{"id":"20240201213691-jgudu0l","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"这就是为什么 JVM 提供了一些参数，这些参数将堆内存转储到一个物理文件中，以后可以用来查找泄漏:"}]},{"ID":"20240201213692-joales8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213692-joales8","updated":"20240201213692"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-XX:+HeapDumpOnOutOfMemoryError\n-XX:HeapDumpPath=./java_pid\u003cpid\u003e.hprof\n-XX:OnOutOfMemoryError=\"\u003c cmd args \u003e;\u003c cmd args \u003e\"\n-XX:+UseGCOverheadLimit\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213693-ggk83zc","Type":"NodeParagraph","Properties":{"id":"20240201213693-ggk83zc","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"这里有几点需要注意:"}]},{"ID":"20240201213694-9vwpwad","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-9vwpwad","updated":"20240201213694"},"Children":[{"ID":"20240201213695-00hk924","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-00hk924","updated":"20240201213695"},"Children":[{"ID":"20240201213696-6wi7aqx","Type":"NodeParagraph","Properties":{"id":"20240201213696-6wi7aqx","updated":"20240201213696"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"HeapDumpOnOutOfMemoryError"},{"Type":"NodeText","Data":" 指示 JVM 在遇到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"OutOfMemoryError"},{"Type":"NodeText","Data":" 错误时将 heap 转储到物理文件中。"}]}]},{"ID":"20240201213697-qs640wk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213697-qs640wk","updated":"20240201213697"},"Children":[{"ID":"20240201213698-1gzdtvb","Type":"NodeParagraph","Properties":{"id":"20240201213698-1gzdtvb","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"HeapDumpPath"},{"Type":"NodeText","Data":" 表示要写入文件的路径; 可以给出任何文件名; 但是，如果 JVM 在名称中找到一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;pid\u0026gt;"},{"Type":"NodeText","Data":" 标记，则当前进程的进程 id 将附加到文件名中，并使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":".hprof"},{"Type":"NodeText","Data":"格式"}]}]},{"ID":"20240201213699-3b1dmog","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213699-3b1dmog","updated":"20240201213699"},"Children":[{"ID":"20240201213700-r8lxj2l","Type":"NodeParagraph","Properties":{"id":"20240201213700-r8lxj2l","updated":"20240201213700"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"OnOutOfMemoryError"},{"Type":"NodeText","Data":" 用于发出紧急命令，以便在内存不足的情况下执行; 应该在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cmd args"},{"Type":"NodeText","Data":" 空间中使用适当的命令。例如，如果我们想在内存不足时重启服务器，我们可以设置参数: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:OnOutOfMemoryError=\u0026quot;shutdown -r\u0026quot;"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213701-sz31yph","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213701-sz31yph","updated":"20240201213701"},"Children":[{"ID":"20240201213702-pfsesko","Type":"NodeParagraph","Properties":{"id":"20240201213702-pfsesko","updated":"20240201213702"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"UseGCOverheadLimit"},{"Type":"NodeText","Data":" 是一种策略，它限制在抛出 OutOfMemory 错误之前在 GC 中花费的 VM 时间的比例"}]}]}]},{"ID":"20240201213703-j7abl1y","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213703-j7abl1y","updated":"20240201213703"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.其他"}]},{"ID":"20240201213704-ll4sc81","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-ll4sc81","updated":"20240201213704"},"Children":[{"ID":"20240201213705-dkpb8hk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213705-dkpb8hk","updated":"20240201213705"},"Children":[{"ID":"20240201213706-xssudvw","Type":"NodeParagraph","Properties":{"id":"20240201213706-xssudvw","updated":"20240201213706"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-server"},{"Type":"NodeText","Data":" : 启用“ Server Hotspot VM”; 此参数默认用于 64 位 JVM"}]}]},{"ID":"20240201213707-c1kd52o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213707-c1kd52o","updated":"20240201213707"},"Children":[{"ID":"20240201213708-9v72m2p","Type":"NodeParagraph","Properties":{"id":"20240201213708-9v72m2p","updated":"20240201213708"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:+UseStringDeduplication"},{"Type":"NodeText","Data":" : "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Java 8u20"},{"Type":"NodeText","Data":" 引入了这个 JVM 参数，通过创建太多相同 String 的实例来减少不必要的内存使用; 这通过将重复 String 值减少为单个全局 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"char []"},{"Type":"NodeText","Data":" 数组来优化堆内存。"}]}]},{"ID":"20240201213709-ukiwxqr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213709-ukiwxqr","updated":"20240201213709"},"Children":[{"ID":"20240201213710-hfbuc5k","Type":"NodeParagraph","Properties":{"id":"20240201213710-hfbuc5k","updated":"20240201213710"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:+UseLWPSynchronization"},{"Type":"NodeText","Data":": 设置基于 LWP (轻量级进程)的同步策略，而不是基于线程的同步。"}]}]},{"ID":"20240201213711-fh7d1hd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213711-fh7d1hd","updated":"20240201213711"},"Children":[{"ID":"20240201213712-55gpf3o","Type":"NodeParagraph","Properties":{"id":"20240201213712-55gpf3o","updated":"20240201213712"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:LargePageSizeInBytes"},{"Type":"NodeText","Data":": 设置用于 Java 堆的较大页面大小; 它采用 GB/MB/KB 的参数; 页面大小越大，我们可以更好地利用虚拟内存硬件资源; 然而，这可能会导致 PermGen 的空间大小更大，这反过来又会迫使 Java 堆空间的大小减小。"}]}]},{"ID":"20240201213713-behwj5e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213713-behwj5e","updated":"20240201213713"},"Children":[{"ID":"20240201213714-gnvrexj","Type":"NodeParagraph","Properties":{"id":"20240201213714-gnvrexj","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:MaxHeapFreeRatio"},{"Type":"NodeText","Data":" : 设置 GC 后, 堆空闲的最大百分比，以避免收缩。"}]}]},{"ID":"20240201213715-abktkae","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213715-abktkae","updated":"20240201213715"},"Children":[{"ID":"20240201213716-6zm8k0c","Type":"NodeParagraph","Properties":{"id":"20240201213716-6zm8k0c","updated":"20240201213716"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:SurvivorRatio"},{"Type":"NodeText","Data":" : eden/survivor 空间的比例, 例如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:SurvivorRatio=6"},{"Type":"NodeText","Data":" 设置每个 survivor 和 eden 之间的比例为 1:6。"}]}]},{"ID":"20240201213717-x3f328v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213717-x3f328v","updated":"20240201213717"},"Children":[{"ID":"20240201213718-zixh4kt","Type":"NodeParagraph","Properties":{"id":"20240201213718-zixh4kt","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:+UseLargePages"},{"Type":"NodeText","Data":" : 如果系统支持，则使用大页面内存; 请注意，如果使用这个 JVM 参数，OpenJDK 7 可能会崩溃。"}]}]},{"ID":"20240201213719-z6ww5o5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213719-z6ww5o5","updated":"20240201213719"},"Children":[{"ID":"20240201213720-0o20ylx","Type":"NodeParagraph","Properties":{"id":"20240201213720-0o20ylx","updated":"20240201213720"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:+UseStringCache"},{"Type":"NodeText","Data":" : 启用 String 池中可用的常用分配字符串的缓存。"}]}]},{"ID":"20240201213721-qqo3i0k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213721-qqo3i0k","updated":"20240201213721"},"Children":[{"ID":"20240201213722-56yosn8","Type":"NodeParagraph","Properties":{"id":"20240201213722-56yosn8","updated":"20240201213722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:+UseCompressedStrings"},{"Type":"NodeText","Data":" : 对 String 对象使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byte []"},{"Type":"NodeText","Data":" 类型，该类型可以用纯 ASCII 格式表示。"}]}]},{"ID":"20240201213723-sp79vxq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-sp79vxq","updated":"20240201213723"},"Children":[{"ID":"20240201213724-q62yaeh","Type":"NodeParagraph","Properties":{"id":"20240201213724-q62yaeh","updated":"20240201213724"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-XX:+OptimizeStringConcat"},{"Type":"NodeText","Data":" : 它尽可能优化字符串串联操作。"}]}]}]},{"ID":"20240201213725-q9qm3cc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213725-q9qm3cc","updated":"20240201213725"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"文章推荐"}]},{"ID":"20240201213726-mnw3ieh","Type":"NodeParagraph","Properties":{"id":"20240201213726-mnw3ieh","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"这里推荐了非常多优质的 JVM 实践相关的文章，推荐阅读，尤其是 JVM 性能优化和问题排查相关的文章。"}]},{"ID":"20240201213727-9noifv9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213727-9noifv9","updated":"20240201213727"},"Children":[{"ID":"20240201213728-n14ccnd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213728-n14ccnd","updated":"20240201213728"},"Children":[{"ID":"20240201213729-mok7jk3","Type":"NodeParagraph","Properties":{"id":"20240201213729-mok7jk3","updated":"20240201213729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://help.aliyun.com/document_detail/148851.html","TextMarkTextContent":"JVM 参数配置说明 - 阿里云官方文档 - 2022"}]}]},{"ID":"20240201213730-t20c498","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213730-t20c498","updated":"20240201213730"},"Children":[{"ID":"20240201213731-xvcw0tf","Type":"NodeParagraph","Properties":{"id":"20240201213731-xvcw0tf","updated":"20240201213731"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://help.aliyun.com/document_detail/383255.html","TextMarkTextContent":"JVM 内存配置最佳实践 - 阿里云官方文档 - 2022"}]}]},{"ID":"20240201213732-ovmti8r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213732-ovmti8r","updated":"20240201213732"},"Children":[{"ID":"20240201213733-tsmgaj1","Type":"NodeParagraph","Properties":{"id":"20240201213733-tsmgaj1","updated":"20240201213733"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000039806436","TextMarkTextContent":"求你了，GC 日志打印别再瞎配置了 - 思否 - 2022"}]}]},{"ID":"20240201213734-q3hh5vr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-q3hh5vr","updated":"20240201213734"},"Children":[{"ID":"20240201213735-fs9nw6m","Type":"NodeParagraph","Properties":{"id":"20240201213735-fs9nw6m","updated":"20240201213735"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7078624931826794503","TextMarkTextContent":"一次大量 JVM Native 内存泄露的排查分析（64M 问题） - 掘金 - 2022"}]}]},{"ID":"20240201213736-dhbzl1q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213736-dhbzl1q","updated":"20240201213736"},"Children":[{"ID":"20240201213737-i2kz3rm","Type":"NodeParagraph","Properties":{"id":"20240201213737-i2kz3rm","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://heapdump.cn/article/1859160","TextMarkTextContent":"一次线上 JVM 调优实践，FullGC40 次/天到 10 天一次的优化过程 - HeapDump - 2021"}]}]},{"ID":"20240201213738-8nf17ve","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-8nf17ve","updated":"20240201213738"},"Children":[{"ID":"20240201213739-kkzpk79","Type":"NodeParagraph","Properties":{"id":"20240201213739-kkzpk79","updated":"20240201213739"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://shuyi.tech/archives/have-a-try-in-jvm-combat","TextMarkTextContent":"听说 JVM 性能优化很难？今天我小试了一把！ - 陈树义 - 2021"}]}]},{"ID":"20240201213740-lqe83iw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-lqe83iw","updated":"20240201213740"},"Children":[{"ID":"20240201213741-fqkh4f5","Type":"NodeParagraph","Properties":{"id":"20240201213741-fqkh4f5","updated":"20240201213741"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/df1uxHWUXzhErxW1sZ6OvQ","TextMarkTextContent":"你们要的线上 GC 问题案例来啦 - 编了个程 - 2021"}]}]},{"ID":"20240201213742-1aixpuf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-1aixpuf","updated":"20240201213742"},"Children":[{"ID":"20240201213743-i8zioru","Type":"NodeParagraph","Properties":{"id":"20240201213743-i8zioru","updated":"20240201213743"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2020/11/12/java-9-cms-gc.html","TextMarkTextContent":"Java 中 9 种常见的 CMS GC 问题分析与解决 - 美团技术团队 - 2020"}]}]},{"ID":"20240201213744-7jyxc6b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-7jyxc6b","updated":"20240201213744"},"Children":[{"ID":"20240201213745-oyowte3","Type":"NodeParagraph","Properties":{"id":"20240201213745-oyowte3","updated":"20240201213745"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2017/12/29/jvm-optimize.html","TextMarkTextContent":"从实际案例聊聊 Java 应用的 GC 优化-美团技术团队 - 美团技术团队 - 2017"}]}]}]},{"ID":"20240201213746-s6yhypy","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213746-s6yhypy","updated":"20240201213746"}}]}