{"ID":"20240201213705-0wyjm6l","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213705-0wyjm6l","title":"hashmap-source-code","updated":"20240201213705"},"Children":[{"ID":"20240201213706-nzjgyku","Type":"NodeThematicBreak","Properties":{"id":"20240201213706-nzjgyku","updated":"20240201213706"}},{"ID":"20240201213707-64houe9","Type":"NodeParagraph","Properties":{"id":"20240201213707-64houe9","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"title: HashMap 源码分析"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213708-kf7d6uu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213708-kf7d6uu","updated":"20240201213708"},"Children":[{"ID":"20240201213709-13dk7d2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213709-13dk7d2","updated":"20240201213709"},"Children":[{"ID":"20240201213710-n8uaoeu","Type":"NodeParagraph","Properties":{"id":"20240201213710-n8uaoeu","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"Java集合"}]}]}]},{"ID":"20240201213711-eyt9i7n","Type":"NodeThematicBreak","Properties":{"id":"20240201213711-eyt9i7n","updated":"20240201213711"}},{"ID":"20240201213712-gh59har","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-header.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213712-gh59har","updated":"20240201213712"}},{"ID":"20240201213713-49aveyn","Type":"NodeBlockquote","Properties":{"id":"20240201213713-49aveyn","updated":"20240201213713"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213714-vx6xqjk","Type":"NodeParagraph","Properties":{"id":"20240201213714-vx6xqjk","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"感谢 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/changfubai","TextMarkTextContent":"changfubai"},{"Type":"NodeText","Data":" 对本文的改进做出的贡献！"}]}]},{"ID":"20240201213715-73p0e38","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213715-73p0e38","updated":"20240201213715"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"HashMap 简介"}]},{"ID":"20240201213716-cuznoes","Type":"NodeParagraph","Properties":{"id":"20240201213716-cuznoes","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"HashMap 主要用来存放键值对，它基于哈希表的 Map 接口实现，是常用的 Java 集合之一，是非线程安全的。"}]},{"ID":"20240201213717-cdldobe","Type":"NodeParagraph","Properties":{"id":"20240201213717-cdldobe","updated":"20240201213717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":" 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个"}]},{"ID":"20240201213718-ct2t5l2","Type":"NodeParagraph","Properties":{"id":"20240201213718-ct2t5l2","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。 JDK1.8 以后的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":" 在解决哈希冲突时有了较大的变化，当链表长度大于等于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。"}]},{"ID":"20240201213719-e6nsjpa","Type":"NodeParagraph","Properties":{"id":"20240201213719-e6nsjpa","updated":"20240201213719"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":" 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。并且， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":" 总是使用 2 的幂作为哈希表的大小。"}]},{"ID":"20240201213720-b6p90k9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213720-b6p90k9","updated":"20240201213720"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"底层数据结构分析"}]},{"ID":"20240201213721-vdm8vax","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213721-vdm8vax","updated":"20240201213721"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JDK1.8 之前"}]},{"ID":"20240201213722-y7o4o7y","Type":"NodeParagraph","Properties":{"id":"20240201213722-y7o4o7y","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"JDK1.8 之前 HashMap 底层是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数组和链表"},{"Type":"NodeText","Data":" 结合在一起使用也就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"链表散列"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213723-yf1rnul","Type":"NodeParagraph","Properties":{"id":"20240201213723-yf1rnul","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"(n - 1) \u0026amp; hash"},{"Type":"NodeText","Data":" 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。"}]},{"ID":"20240201213724-sgy0tr4","Type":"NodeParagraph","Properties":{"id":"20240201213724-sgy0tr4","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。"}]},{"ID":"20240201213725-fqvhke0","Type":"NodeParagraph","Properties":{"id":"20240201213725-fqvhke0","updated":"20240201213725"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK 1.8 HashMap 的 hash 方法源码:"}]},{"ID":"20240201213726-6hvoa5l","Type":"NodeParagraph","Properties":{"id":"20240201213726-6hvoa5l","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"JDK 1.8 的 hash 方法 相比于 JDK 1.7 hash 方法更加简化，但是原理不变。"}]},{"ID":"20240201213727-r1g8fbd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213727-r1g8fbd","updated":"20240201213727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    static final int hash(Object key) {\n      int h;\n      // key.hashCode()：返回散列值也就是hashcode\n      // ^：按位异或\n      // \u003e\u003e\u003e:无符号右移，忽略符号位，空位都以0补齐\n      return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u003e\u003e\u003e 16);\n  }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213728-vq6nz9i","Type":"NodeParagraph","Properties":{"id":"20240201213728-vq6nz9i","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"对比一下 JDK1.7 的 HashMap 的 hash 方法源码."}]},{"ID":"20240201213729-qatbksq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213729-qatbksq","updated":"20240201213729"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static int hash(int h) {\n    // This function ensures that hashCodes that differ only by\n    // constant multiples at each bit position have a bounded\n    // number of collisions (approximately 8 at default load factor).\n\n    h ^= (h \u003e\u003e\u003e 20) ^ (h \u003e\u003e\u003e 12);\n    return h ^ (h \u003e\u003e\u003e 7) ^ (h \u003e\u003e\u003e 4);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213730-299hvps","Type":"NodeParagraph","Properties":{"id":"20240201213730-299hvps","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。"}]},{"ID":"20240201213731-4qz8yqm","Type":"NodeParagraph","Properties":{"id":"20240201213731-4qz8yqm","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"所谓 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"“拉链法”"},{"Type":"NodeText","Data":" 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。"}]},{"ID":"20240201213732-tu996vn","Type":"NodeParagraph","Properties":{"id":"20240201213732-tu996vn","updated":"20240201213732"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"jdk1.8 之前的内部结构-HashMap","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/jdk1.7_hashmap.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213733-0unw9ky","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213733-0unw9ky","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JDK1.8 之后"}]},{"ID":"20240201213734-yszt6xb","Type":"NodeParagraph","Properties":{"id":"20240201213734-yszt6xb","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"相比于之前的版本，JDK1.8 以后在解决哈希冲突时有了较大的变化。"}]},{"ID":"20240201213735-2gajws8","Type":"NodeParagraph","Properties":{"id":"20240201213735-2gajws8","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"当链表长度大于阈值（默认为 8）时，会首先调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"treeifyBin()"},{"Type":"NodeText","Data":"方法。这个方法会根据 HashMap 数组来决定是否转换为红黑树。只有当数组长度大于或者等于 64 的情况下，才会执行转换红黑树操作，以减少搜索时间。否则，就是只是执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"resize()"},{"Type":"NodeText","Data":" 方法对数组扩容。相关源码这里就不贴了，重点关注 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"treeifyBin()"},{"Type":"NodeText","Data":"方法即可！"}]},{"ID":"20240201213736-yp4j7jq","Type":"NodeParagraph","Properties":{"id":"20240201213736-yp4j7jq","updated":"20240201213736"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"jdk1.8之后的内部结构-HashMap","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/jdk1.8_hashmap.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213737-f52mxmn","Type":"NodeParagraph","Properties":{"id":"20240201213737-f52mxmn","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类的属性："}]},{"ID":"20240201213738-1p94gqc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213738-1p94gqc","updated":"20240201213738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class HashMap\u003cK,V\u003e extends AbstractMap\u003cK,V\u003e implements Map\u003cK,V\u003e, Cloneable, Serializable {\n    // 序列号\n    private static final long serialVersionUID = 362498820763181265L;\n    // 默认的初始容量是16\n    static final int DEFAULT_INITIAL_CAPACITY = 1 \u003c\u003c 4;\n    // 最大容量\n    static final int MAXIMUM_CAPACITY = 1 \u003c\u003c 30;\n    // 默认的负载因子\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    // 当桶(bucket)上的结点数大于等于这个值时会转成红黑树\n    static final int TREEIFY_THRESHOLD = 8;\n    // 当桶(bucket)上的结点数小于等于这个值时树转链表\n    static final int UNTREEIFY_THRESHOLD = 6;\n    // 桶中结构转化为红黑树对应的table的最小容量\n    static final int MIN_TREEIFY_CAPACITY = 64;\n    // 存储元素的数组，总是2的幂次倍\n    transient Node\u003ck,v\u003e[] table;\n    // 存放具体元素的集\n    transient Set\u003cmap.entry\u003ck,v\u003e\u003e entrySet;\n    // 存放元素的个数，注意这个不等于数组的长度。\n    transient int size;\n    // 每次扩容和更改map结构的计数器\n    transient int modCount;\n    // 阈值(容量*负载因子) 当实际大小超过阈值时，会进行扩容\n    int threshold;\n    // 负载因子\n    final float loadFactor;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213739-ho1cs66","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-ho1cs66","updated":"20240201213739"},"Children":[{"ID":"20240201213740-gfo8n2o","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-gfo8n2o","updated":"20240201213740"},"Children":[{"ID":"20240201213741-5d2ls54","Type":"NodeParagraph","Properties":{"id":"20240201213741-5d2ls54","updated":"20240201213741"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"loadFactor 负载因子"}]},{"ID":"20240201213742-7cq0p5f","Type":"NodeParagraph","Properties":{"id":"20240201213742-7cq0p5f","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"loadFactor 负载因子是控制数组存放数据的疏密程度，loadFactor 越趋近于 1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor 越小，也就是趋近于 0，数组中存放的数据(entry)也就越少，也就越稀疏。"}]},{"ID":"20240201213743-h2xm6ti","Type":"NodeParagraph","Properties":{"id":"20240201213743-h2xm6ti","updated":"20240201213743"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213744-j2ckqih","Type":"NodeParagraph","Properties":{"id":"20240201213744-j2ckqih","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量超过了 16 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"*","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。"}]}]},{"ID":"20240201213745-9ffux5v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213745-9ffux5v","updated":"20240201213745"},"Children":[{"ID":"20240201213746-x93zhq4","Type":"NodeParagraph","Properties":{"id":"20240201213746-x93zhq4","updated":"20240201213746"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"threshold"}]},{"ID":"20240201213747-i6k511v","Type":"NodeParagraph","Properties":{"id":"20240201213747-i6k511v","updated":"20240201213747"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"threshold = capacity "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"*"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" loadFactor"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当 Size\u0026gt;threshold"},{"Type":"NodeText","Data":"的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"衡量数组是否需要扩增的一个标准"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213748-wgvvhae","Type":"NodeParagraph","Properties":{"id":"20240201213748-wgvvhae","updated":"20240201213748"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Node 节点类源码:"}]},{"ID":"20240201213749-xcnbysi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213749-xcnbysi","updated":"20240201213749"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 继承自 Map.Entry\u003cK,V\u003e\nstatic class Node\u003cK,V\u003e implements Map.Entry\u003cK,V\u003e {\n       final int hash;// 哈希值，存放元素到hashmap中时用来与其他元素hash值比较\n       final K key;//键\n       V value;//值\n       // 指向下一个节点\n       Node\u003cK,V\u003e next;\n       Node(int hash, K key, V value, Node\u003cK,V\u003e next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n        public final K getKey()        { return key; }\n        public final V getValue()      { return value; }\n        public final String toString() { return key + \"=\" + value; }\n        // 重写hashCode()方法\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n        // 重写 equals() 方法\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry\u003c?,?\u003e e = (Map.Entry\u003c?,?\u003e)o;\n                if (Objects.equals(key, e.getKey()) \u0026\u0026\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213750-kjfy1ie","Type":"NodeParagraph","Properties":{"id":"20240201213750-kjfy1ie","updated":"20240201213750"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"树节点类源码:"}]},{"ID":"20240201213751-yd51th0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213751-yd51th0","updated":"20240201213751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static final class TreeNode\u003cK,V\u003e extends LinkedHashMap.Entry\u003cK,V\u003e {\n        TreeNode\u003cK,V\u003e parent;  // 父\n        TreeNode\u003cK,V\u003e left;    // 左\n        TreeNode\u003cK,V\u003e right;   // 右\n        TreeNode\u003cK,V\u003e prev;    // needed to unlink next upon deletion\n        boolean red;           // 判断颜色\n        TreeNode(int hash, K key, V val, Node\u003cK,V\u003e next) {\n            super(hash, key, val, next);\n        }\n        // 返回根节点\n        final TreeNode\u003cK,V\u003e root() {\n            for (TreeNode\u003cK,V\u003e r = this, p;;) {\n                if ((p = r.parent) == null)\n                    return r;\n                r = p;\n       }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213752-khe9nf1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213752-khe9nf1","updated":"20240201213752"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"HashMap 源码分析"}]},{"ID":"20240201213753-4a5v2mx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213753-4a5v2mx","updated":"20240201213753"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"构造方法"}]},{"ID":"20240201213754-e6zc23s","Type":"NodeParagraph","Properties":{"id":"20240201213754-e6zc23s","updated":"20240201213754"},"Children":[{"Type":"NodeText","Data":"HashMap 中有四个构造方法，它们分别如下："}]},{"ID":"20240201213755-xk84gzc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213755-xk84gzc","updated":"20240201213755"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    // 默认构造函数。\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all   other fields defaulted\n     }\n\n     // 包含另一个“Map”的构造函数\n     public HashMap(Map\u003c? extends K, ? extends V\u003e m) {\n         this.loadFactor = DEFAULT_LOAD_FACTOR;\n         putMapEntries(m, false);//下面会分析到这个方法\n     }\n\n     // 指定“容量大小”的构造函数\n     public HashMap(int initialCapacity) {\n         this(initialCapacity, DEFAULT_LOAD_FACTOR);\n     }\n\n     // 指定“容量大小”和“负载因子”的构造函数\n     public HashMap(int initialCapacity, float loadFactor) {\n         if (initialCapacity \u003c 0)\n             throw new IllegalArgumentException(\"Illegal initial capacity: \" + initialCapacity);\n         if (initialCapacity \u003e MAXIMUM_CAPACITY)\n             initialCapacity = MAXIMUM_CAPACITY;\n         if (loadFactor \u003c= 0 || Float.isNaN(loadFactor))\n             throw new IllegalArgumentException(\"Illegal load factor: \" + loadFactor);\n         this.loadFactor = loadFactor;\n         // 初始容量暂时存放到 threshold ，在resize中再赋值给 newCap 进行table初始化\n         this.threshold = tableSizeFor(initialCapacity);\n     }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213756-oin615a","Type":"NodeBlockquote","Properties":{"id":"20240201213756-oin615a","updated":"20240201213756"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213757-fcexmrb","Type":"NodeParagraph","Properties":{"id":"20240201213757-fcexmrb","updated":"20240201213757"},"Children":[{"Type":"NodeText","Data":"值得注意的是上述四个构造方法中，都初始化了负载因子 loadFactor，由于 HashMap 中没有 capacity 这样的字段，即使指定了初始化容量 initialCapacity ，也只是通过 tableSizeFor 将其扩容到与 initialCapacity 最接近的 2 的幂次方大小，然后暂时赋值给 threshold ，后续通过 resize 方法将 threshold 赋值给 newCap 进行 table 的初始化。"}]}]},{"ID":"20240201213758-6btuc21","Type":"NodeParagraph","Properties":{"id":"20240201213758-6btuc21","updated":"20240201213758"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"putMapEntries 方法："}]},{"ID":"20240201213759-g8hkfbl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213759-g8hkfbl","updated":"20240201213759"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"final void putMapEntries(Map\u003c? extends K, ? extends V\u003e m, boolean evict) {\n    int s = m.size();\n    if (s \u003e 0) {\n        // 判断table是否已经初始化\n        if (table == null) { // pre-size\n            /*\n             * 未初始化，s为m的实际元素个数，ft=s/loadFactor =\u003e s=ft*loadFactor, 跟我们前面提到的\n             * 阈值=容量*负载因子 是不是很像，是的，ft指的是要添加s个元素所需的最小的容量\n             */\n            float ft = ((float)s / loadFactor) + 1.0F;\n            int t = ((ft \u003c (float)MAXIMUM_CAPACITY) ?\n                    (int)ft : MAXIMUM_CAPACITY);\n            /*\n             * 根据构造函数可知，table未初始化，threshold实际上是存放的初始化容量，如果添加s个元素所\n             * 需的最小容量大于初始化容量，则将最小容量扩容为最接近的2的幂次方大小作为初始化。\n             * 注意这里不是初始化阈值\n             */\n            if (t \u003e threshold)\n                threshold = tableSizeFor(t);\n        }\n        // 已初始化，并且m元素个数大于阈值，进行扩容处理\n        else if (s \u003e threshold)\n            resize();\n        // 将m中的所有元素添加至HashMap中，如果table未初始化，putVal中会调用resize初始化或扩容\n        for (Map.Entry\u003c? extends K, ? extends V\u003e e : m.entrySet()) {\n            K key = e.getKey();\n            V value = e.getValue();\n            putVal(hash(key), key, value, false, evict);\n        }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213760-r6p452p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213760-r6p452p","updated":"20240201213760"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"put 方法"}]},{"ID":"20240201213761-81ll05n","Type":"NodeParagraph","Properties":{"id":"20240201213761-81ll05n","updated":"20240201213761"},"Children":[{"Type":"NodeText","Data":"HashMap 只提供了 put 用于添加元素，putVal 方法只是给 put 方法调用的一个方法，并没有提供给用户使用。"}]},{"ID":"20240201213762-jv7im9e","Type":"NodeParagraph","Properties":{"id":"20240201213762-jv7im9e","updated":"20240201213762"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对 putVal 方法添加元素的分析如下："}]},{"ID":"20240201213763-qckc9n4","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213763-qckc9n4","updated":"20240201213763"},"Children":[{"ID":"20240201213764-20qom8y","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213764-20qom8y","updated":"20240201213764"},"Children":[{"ID":"20240201213765-0o8sarw","Type":"NodeParagraph","Properties":{"id":"20240201213765-0o8sarw","updated":"20240201213765"},"Children":[{"Type":"NodeText","Data":"如果定位到的数组位置没有元素 就直接插入。"}]}]},{"ID":"20240201213766-50ai1lg","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213766-50ai1lg","updated":"20240201213766"},"Children":[{"ID":"20240201213767-lmelt4p","Type":"NodeParagraph","Properties":{"id":"20240201213767-lmelt4p","updated":"20240201213767"},"Children":[{"Type":"NodeText","Data":"如果定位到的数组位置有元素就和要插入的 key 比较，如果 key 相同就直接覆盖，如果 key 不相同，就判断 p 是否是一个树节点，如果是就调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(this, tab, hash, key, value)"},{"Type":"NodeText","Data":"将元素添加进入。如果不是就遍历链表插入(插入的是链表尾部)。"}]}]}]},{"ID":"20240201213768-rgbg3cp","Type":"NodeParagraph","Properties":{"id":"20240201213768-rgbg3cp","updated":"20240201213768"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":" ","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/database/sql/put.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213769-1zfssmr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213769-1zfssmr","updated":"20240201213769"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    Node\u003cK,V\u003e[] tab; Node\u003cK,V\u003e p; int n, i;\n    // table未初始化或者长度为0，进行扩容\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    // (n - 1) \u0026 hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)\n    if ((p = tab[i = (n - 1) \u0026 hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    // 桶中已经存在元素（处理hash冲突）\n    else {\n        Node\u003cK,V\u003e e; K k;\n        //快速判断第一个节点table[i]的key是否与插入的key一样，若相同就直接使用插入的值p替换掉旧的值e。\n        if (p.hash == hash \u0026\u0026\n            ((k = p.key) == key || (key != null \u0026\u0026 key.equals(k))))\n                e = p;\n        // 判断插入的是否是红黑树节点\n        else if (p instanceof TreeNode)\n            // 放入树中\n            e = ((TreeNode\u003cK,V\u003e)p).putTreeVal(this, tab, hash, key, value);\n        // 不是红黑树节点则说明为链表结点\n        else {\n            // 在链表最末插入结点\n            for (int binCount = 0; ; ++binCount) {\n                // 到达链表的尾部\n                if ((e = p.next) == null) {\n                    // 在尾部插入新结点\n                    p.next = newNode(hash, key, value, null);\n                    // 结点数量达到阈值(默认为 8 )，执行 treeifyBin 方法\n                    // 这个方法会根据 HashMap 数组来决定是否转换为红黑树。\n                    // 只有当数组长度大于或者等于 64 的情况下，才会执行转换红黑树操作，以减少搜索时间。否则，就是只是对数组扩容。\n                    if (binCount \u003e= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    // 跳出循环\n                    break;\n                }\n                // 判断链表中结点的key值与插入的元素的key值是否相等\n                if (e.hash == hash \u0026\u0026\n                    ((k = e.key) == key || (key != null \u0026\u0026 key.equals(k))))\n                    // 相等，跳出循环\n                    break;\n                // 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表\n                p = e;\n            }\n        }\n        // 表示在桶中找到key值、hash值与插入元素相等的结点\n        if (e != null) {\n            // 记录e的value\n            V oldValue = e.value;\n            // onlyIfAbsent为false或者旧值为null\n            if (!onlyIfAbsent || oldValue == null)\n                //用新值替换旧值\n                e.value = value;\n            // 访问后回调\n            afterNodeAccess(e);\n            // 返回旧值\n            return oldValue;\n        }\n    }\n    // 结构性修改\n    ++modCount;\n    // 实际大小大于阈值则扩容\n    if (++size \u003e threshold)\n        resize();\n    // 插入后回调\n    afterNodeInsertion(evict);\n    return null;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213770-b5wrel2","Type":"NodeParagraph","Properties":{"id":"20240201213770-b5wrel2","updated":"20240201213770"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们再来对比一下 JDK1.7 put 方法的代码"}]},{"ID":"20240201213771-kjl5oy8","Type":"NodeParagraph","Properties":{"id":"20240201213771-kjl5oy8","updated":"20240201213771"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对于 put 方法的分析如下："}]},{"ID":"20240201213772-ndlyvig","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213772-ndlyvig","updated":"20240201213772"},"Children":[{"ID":"20240201213773-i8uozjj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213773-i8uozjj","updated":"20240201213773"},"Children":[{"ID":"20240201213774-73lhuhg","Type":"NodeParagraph","Properties":{"id":"20240201213774-73lhuhg","updated":"20240201213774"},"Children":[{"Type":"NodeText","Data":"① 如果定位到的数组位置没有元素 就直接插入。"}]}]},{"ID":"20240201213775-hj410d7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213775-hj410d7","updated":"20240201213775"},"Children":[{"ID":"20240201213776-uy4rgri","Type":"NodeParagraph","Properties":{"id":"20240201213776-uy4rgri","updated":"20240201213776"},"Children":[{"Type":"NodeText","Data":"② 如果定位到的数组位置有元素，遍历以这个元素为头结点的链表，依次和插入的 key 比较，如果 key 相同就直接覆盖，不同就采用头插法插入元素。"}]}]}]},{"ID":"20240201213777-usxee2q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213777-usxee2q","updated":"20240201213777"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public V put(K key, V value)\n    if (table == EMPTY_TABLE) {\n    inflateTable(threshold);\n}\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry\u003cK,V\u003e e = table[i]; e != null; e = e.next) { // 先遍历\n        Object k;\n        if (e.hash == hash \u0026\u0026 ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);  // 再插入\n    return null;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213778-9qpz6f0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213778-9qpz6f0","updated":"20240201213778"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"get 方法"}]},{"ID":"20240201213779-emkk0cv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213779-emkk0cv","updated":"20240201213779"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public V get(Object key) {\n    Node\u003cK,V\u003e e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node\u003cK,V\u003e getNode(int hash, Object key) {\n    Node\u003cK,V\u003e[] tab; Node\u003cK,V\u003e first, e; int n; K k;\n    if ((tab = table) != null \u0026\u0026 (n = tab.length) \u003e 0 \u0026\u0026\n        (first = tab[(n - 1) \u0026 hash]) != null) {\n        // 数组元素相等\n        if (first.hash == hash \u0026\u0026 // always check first node\n            ((k = first.key) == key || (key != null \u0026\u0026 key.equals(k))))\n            return first;\n        // 桶中不止一个节点\n        if ((e = first.next) != null) {\n            // 在树中get\n            if (first instanceof TreeNode)\n                return ((TreeNode\u003cK,V\u003e)first).getTreeNode(hash, key);\n            // 在链表中get\n            do {\n                if (e.hash == hash \u0026\u0026\n                    ((k = e.key) == key || (key != null \u0026\u0026 key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213780-depuiy6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213780-depuiy6","updated":"20240201213780"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"resize 方法"}]},{"ID":"20240201213781-bus1x6t","Type":"NodeParagraph","Properties":{"id":"20240201213781-bus1x6t","updated":"20240201213781"},"Children":[{"Type":"NodeText","Data":"进行扩容，会伴随着一次重新 hash 分配，并且会遍历 hash 表中所有的元素，是非常耗时的。在编写程序中，要尽量避免 resize。resize 方法实际上是将 table 初始化和 table 扩容 进行了整合，底层的行为都是给 table 赋值一个新的数组。"}]},{"ID":"20240201213782-0u1ce8o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213782-0u1ce8o","updated":"20240201213782"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"final Node\u003cK,V\u003e[] resize() {\n    Node\u003cK,V\u003e[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap \u003e 0) {\n        // 超过最大值就不再扩充了，就只好随你碰撞去吧\n        if (oldCap \u003e= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        // 没超过最大值，就扩充为原来的2倍\n        else if ((newCap = oldCap \u003c\u003c 1) \u003c MAXIMUM_CAPACITY \u0026\u0026 oldCap \u003e= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr \u003c\u003c 1; // double threshold\n    }\n    else if (oldThr \u003e 0) // initial capacity was placed in threshold\n        // 创建对象时初始化容量大小放在threshold中，此时只需要将其作为新的数组容量\n        newCap = oldThr;\n    else {\n        // signifies using defaults 无参构造函数创建的对象在这里计算容量和阈值\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    if (newThr == 0) {\n        // 创建时指定了初始化容量或者负载因子，在这里进行阈值初始化，\n    \t// 或者扩容前的旧容量小于16，在这里计算新的resize上限\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap \u003c MAXIMUM_CAPACITY \u0026\u0026 ft \u003c (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node\u003cK,V\u003e[] newTab = (Node\u003cK,V\u003e[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        // 把每个bucket都移动到新的buckets中\n        for (int j = 0; j \u003c oldCap; ++j) {\n            Node\u003cK,V\u003e e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    // 只有一个节点，直接计算元素新的位置即可\n                    newTab[e.hash \u0026 (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    // 将红黑树拆分成2棵子树，如果子树节点数小于等于 UNTREEIFY_THRESHOLD（默认为 6），则将子树转换为链表。\n                    // 如果子树节点数大于 UNTREEIFY_THRESHOLD，则保持子树的树结构。\n                    ((TreeNode\u003cK,V\u003e)e).split(this, newTab, j, oldCap);\n                else {\n                    Node\u003cK,V\u003e loHead = null, loTail = null;\n                    Node\u003cK,V\u003e hiHead = null, hiTail = null;\n                    Node\u003cK,V\u003e next;\n                    do {\n                        next = e.next;\n                        // 原索引\n                        if ((e.hash \u0026 oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        // 原索引+oldCap\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    // 原索引放到bucket里\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    // 原索引+oldCap放到bucket里\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213783-vs90vi2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213783-vs90vi2","updated":"20240201213783"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"HashMap 常用方法测试"}]},{"ID":"20240201213784-fw0un34","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213784-fw0un34","updated":"20240201213784"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package map;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Set;\n\npublic class HashMapDemo {\n\n    public static void main(String[] args) {\n        HashMap\u003cString, String\u003e map = new HashMap\u003cString, String\u003e();\n        // 键不能重复，值可以重复\n        map.put(\"san\", \"张三\");\n        map.put(\"si\", \"李四\");\n        map.put(\"wu\", \"王五\");\n        map.put(\"wang\", \"老王\");\n        map.put(\"wang\", \"老王2\");// 老王被覆盖\n        map.put(\"lao\", \"老王\");\n        System.out.println(\"-------直接输出hashmap:-------\");\n        System.out.println(map);\n        /**\n         * 遍历HashMap\n         */\n        // 1.获取Map中的所有键\n        System.out.println(\"-------foreach获取Map中所有的键:------\");\n        Set\u003cString\u003e keys = map.keySet();\n        for (String key : keys) {\n            System.out.print(key+\"  \");\n        }\n        System.out.println();//换行\n        // 2.获取Map中所有值\n        System.out.println(\"-------foreach获取Map中所有的值:------\");\n        Collection\u003cString\u003e values = map.values();\n        for (String value : values) {\n            System.out.print(value+\"  \");\n        }\n        System.out.println();//换行\n        // 3.得到key的值的同时得到key所对应的值\n        System.out.println(\"-------得到key的值的同时得到key所对应的值:-------\");\n        Set\u003cString\u003e keys2 = map.keySet();\n        for (String key : keys2) {\n            System.out.print(key + \"：\" + map.get(key)+\"   \");\n\n        }\n        /**\n         * 如果既要遍历key又要value，那么建议这种方式，因为如果先获取keySet然后再执行map.get(key)，map内部会执行两次遍历。\n         * 一次是在获取keySet的时候，一次是在遍历所有key的时候。\n         */\n        // 当我调用put(key,value)方法的时候，首先会把key和value封装到\n        // Entry这个静态内部类对象中，把Entry对象再添加到数组中，所以我们想获取\n        // map中的所有键值对，我们只要获取数组中的所有Entry对象，接下来\n        // 调用Entry对象中的getKey()和getValue()方法就能获取键值对了\n        Set\u003cjava.util.Map.Entry\u003cString, String\u003e\u003e entrys = map.entrySet();\n        for (java.util.Map.Entry\u003cString, String\u003e entry : entrys) {\n            System.out.println(entry.getKey() + \"--\" + entry.getValue());\n        }\n\n        /**\n         * HashMap其他常用方法\n         */\n        System.out.println(\"after map.size()：\"+map.size());\n        System.out.println(\"after map.isEmpty()：\"+map.isEmpty());\n        System.out.println(map.remove(\"san\"));\n        System.out.println(\"after map.remove()：\"+map);\n        System.out.println(\"after map.get(si)：\"+map.get(\"si\"));\n        System.out.println(\"after map.containsKey(si)：\"+map.containsKey(\"si\"));\n        System.out.println(\"after containsValue(李四)：\"+map.containsValue(\"李四\"));\n        System.out.println(map.replace(\"si\", \"李四2\"));\n        System.out.println(\"after map.replace(si, 李四2):\"+map);\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213785-l0d9diy","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213785-l0d9diy","updated":"20240201213785"}}]}