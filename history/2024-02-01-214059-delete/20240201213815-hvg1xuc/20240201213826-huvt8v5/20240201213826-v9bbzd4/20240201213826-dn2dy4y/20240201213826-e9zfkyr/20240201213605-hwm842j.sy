{"ID":"20240201213605-hwm842j","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213605-hwm842j","title":"arraylist-source-code","updated":"20240201213605"},"Children":[{"ID":"20240201213606-7a6p0v3","Type":"NodeThematicBreak","Properties":{"id":"20240201213606-7a6p0v3","updated":"20240201213606"}},{"ID":"20240201213607-xhs4bl4","Type":"NodeParagraph","Properties":{"id":"20240201213607-xhs4bl4","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"title: ArrayList 源码分析"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213608-kvrug63","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-kvrug63","updated":"20240201213608"},"Children":[{"ID":"20240201213609-m19c1bk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213609-m19c1bk","updated":"20240201213609"},"Children":[{"ID":"20240201213610-xt25yd8","Type":"NodeParagraph","Properties":{"id":"20240201213610-xt25yd8","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"Java集合"}]}]}]},{"ID":"20240201213611-rkc7kph","Type":"NodeThematicBreak","Properties":{"id":"20240201213611-rkc7kph","updated":"20240201213611"}},{"ID":"20240201213612-640xzbi","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @small-advertisement.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213612-640xzbi","updated":"20240201213612"}},{"ID":"20240201213613-bsucnt8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213613-bsucnt8","updated":"20240201213613"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ArrayList 简介"}]},{"ID":"20240201213614-wcyv0xp","Type":"NodeParagraph","Properties":{"id":"20240201213614-wcyv0xp","updated":"20240201213614"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacity"},{"Type":"NodeText","Data":"操作来增加 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 实例的容量。这可以减少递增式再分配的数量。"}]},{"ID":"20240201213615-xkwl7y7","Type":"NodeParagraph","Properties":{"id":"20240201213615-xkwl7y7","updated":"20240201213615"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 继承于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractList"},{"Type":"NodeText","Data":" ，实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomAccess"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Cloneable"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.io.Serializable"},{"Type":"NodeText","Data":" 这些接口。"}]},{"ID":"20240201213616-iu8a29x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213616-iu8a29x","updated":"20240201213616"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\npublic class ArrayList\u003cE\u003e extends AbstractList\u003cE\u003e\n        implements List\u003cE\u003e, RandomAccess, Cloneable, java.io.Serializable{\n\n  }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213617-9nexokg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213617-9nexokg","updated":"20240201213617"},"Children":[{"ID":"20240201213618-eusmd56","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213618-eusmd56","updated":"20240201213618"},"Children":[{"ID":"20240201213619-7qcyeax","Type":"NodeParagraph","Properties":{"id":"20240201213619-7qcyeax","updated":"20240201213619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" : 表明它是一个列表，支持添加、删除、查找等操作，并且可以通过下标进行访问。"}]}]},{"ID":"20240201213620-860xh1y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-860xh1y","updated":"20240201213620"},"Children":[{"ID":"20240201213621-pr0whqp","Type":"NodeParagraph","Properties":{"id":"20240201213621-pr0whqp","updated":"20240201213621"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomAccess"},{"Type":"NodeText","Data":" ：这是一个标志接口，表明实现这个接口的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 集合是支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快速随机访问"},{"Type":"NodeText","Data":" 的。在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。"}]}]},{"ID":"20240201213622-rlu03qh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-rlu03qh","updated":"20240201213622"},"Children":[{"ID":"20240201213623-9fj0eow","Type":"NodeParagraph","Properties":{"id":"20240201213623-9fj0eow","updated":"20240201213623"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Cloneable"},{"Type":"NodeText","Data":" ：表明它具有拷贝能力，可以进行深拷贝或浅拷贝操作。"}]}]},{"ID":"20240201213624-uxh2zqg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213624-uxh2zqg","updated":"20240201213624"},"Children":[{"ID":"20240201213625-xsr076f","Type":"NodeParagraph","Properties":{"id":"20240201213625-xsr076f","updated":"20240201213625"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Serializable"},{"Type":"NodeText","Data":" : 表明它可以进行序列化操作，也就是可以将对象转换为字节流进行持久化存储或网络传输，非常方便。"}]}]}]},{"ID":"20240201213626-jhz2h8u","Type":"NodeParagraph","Properties":{"id":"20240201213626-jhz2h8u","updated":"20240201213626"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ArrayList 类图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/arraylist-class-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213627-1xc21ia","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213627-1xc21ia","updated":"20240201213627"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ArrayList 和 Vector 的区别?（了解即可）"}]},{"ID":"20240201213628-3nx3172","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-3nx3172","updated":"20240201213628"},"Children":[{"ID":"20240201213629-pmmbvpk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-pmmbvpk","updated":"20240201213629"},"Children":[{"ID":"20240201213630-qysgh0v","Type":"NodeParagraph","Properties":{"id":"20240201213630-qysgh0v","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 的主要实现类，底层使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Object[]"},{"Type":"NodeText","Data":"存储，适用于频繁的查找工作，线程不安全 。"}]}]},{"ID":"20240201213631-tw2kii4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213631-tw2kii4","updated":"20240201213631"},"Children":[{"ID":"20240201213632-ktmpeta","Type":"NodeParagraph","Properties":{"id":"20240201213632-ktmpeta","updated":"20240201213632"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Vector"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 的古老实现类，底层使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Object[]"},{"Type":"NodeText","Data":" 存储，线程安全。"}]}]}]},{"ID":"20240201213633-mt9i1en","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213633-mt9i1en","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ArrayList 可以添加 null 值吗？"}]},{"ID":"20240201213634-nsis1dp","Type":"NodeParagraph","Properties":{"id":"20240201213634-nsis1dp","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 中可以存储任何类型的对象，包括 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":" 值。不过，不建议向"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 中添加 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":" 值， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":" 值无意义，会让代码难以维护比如忘记做判空处理就会导致空指针异常。"}]},{"ID":"20240201213635-us3e3jc","Type":"NodeParagraph","Properties":{"id":"20240201213635-us3e3jc","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20240201213636-36puuia","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213636-36puuia","updated":"20240201213636"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ArrayList\u003cString\u003e listOfStrings = new ArrayList\u003c\u003e();\nlistOfStrings.add(null);\nlistOfStrings.add(\"java\");\nSystem.out.println(listOfStrings);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213637-p1518q6","Type":"NodeParagraph","Properties":{"id":"20240201213637-p1518q6","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213638-x44marp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213638-x44marp","updated":"20240201213638"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[null, java]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213639-hs6clcz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213639-hs6clcz","updated":"20240201213639"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Arraylist 与 LinkedList 区别?"}]},{"ID":"20240201213640-gba8mb0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-gba8mb0","updated":"20240201213640"},"Children":[{"ID":"20240201213641-495vpxi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-495vpxi","updated":"20240201213641"},"Children":[{"ID":"20240201213642-5scji8a","Type":"NodeParagraph","Properties":{"id":"20240201213642-5scji8a","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"是否保证线程安全："},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 都是不同步的，也就是不保证线程安全；"}]}]},{"ID":"20240201213643-2ru0xsm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-2ru0xsm","updated":"20240201213643"},"Children":[{"ID":"20240201213644-mjhpa0z","Type":"NodeParagraph","Properties":{"id":"20240201213644-mjhpa0z","updated":"20240201213644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"底层数据结构："},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 底层使用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Object"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 数组"},{"Type":"NodeText","Data":"；"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 底层使用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"双向链表"},{"Type":"NodeText","Data":" 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）"}]}]},{"ID":"20240201213645-pr0f4j2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-pr0f4j2","updated":"20240201213645"},"Children":[{"ID":"20240201213646-g8gohsl","Type":"NodeParagraph","Properties":{"id":"20240201213646-g8gohsl","updated":"20240201213646"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"插入和删除是否受元素位置的影响："}]},{"ID":"20240201213647-r7q3v19","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-r7q3v19","updated":"20240201213647"},"Children":[{"ID":"20240201213648-4qybrzf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-4qybrzf","updated":"20240201213648"},"Children":[{"ID":"20240201213649-b6ia3s2","Type":"NodeParagraph","Properties":{"id":"20240201213649-b6ia3s2","updated":"20240201213649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(E e)"},{"Type":"NodeText","Data":"方法的时候， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(int index, E element)"},{"Type":"NodeText","Data":"），时间复杂度就为 O(n)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。"}]}]},{"ID":"20240201213650-4dccqdf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-4dccqdf","updated":"20240201213650"},"Children":[{"ID":"20240201213651-9ud696h","Type":"NodeParagraph","Properties":{"id":"20240201213651-9ud696h","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 采用链表存储，所以在头尾插入或者删除元素不受元素位置的影响（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(E e)"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"addFirst(E e)"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"addLast(E e)"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"removeFirst()"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"removeLast()"},{"Type":"NodeText","Data":"），时间复杂度为 O(1)，如果是要在指定位置 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"i"},{"Type":"NodeText","Data":" 插入和删除元素的话（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(int index, E element)"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(Object o)"},{"Type":"NodeText","Data":","},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(int index)"},{"Type":"NodeText","Data":"）， 时间复杂度为 O(n) ，因为需要先移动到指定位置再插入和删除。"}]}]}]}]},{"ID":"20240201213652-n9e8e28","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-n9e8e28","updated":"20240201213652"},"Children":[{"ID":"20240201213653-b4guyhw","Type":"NodeParagraph","Properties":{"id":"20240201213653-b4guyhw","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"是否支持快速随机访问："},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 不支持高效的随机元素访问，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":"（实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomAccess"},{"Type":"NodeText","Data":" 接口） 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get(int index)"},{"Type":"NodeText","Data":"方法)。"}]}]},{"ID":"20240201213654-ua30d6h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-ua30d6h","updated":"20240201213654"},"Children":[{"ID":"20240201213655-8ibjfzb","Type":"NodeParagraph","Properties":{"id":"20240201213655-8ibjfzb","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存空间占用："},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 的空间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。"}]}]}]},{"ID":"20240201213656-165yrat","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213656-165yrat","updated":"20240201213656"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ArrayList 核心源码解读"}]},{"ID":"20240201213657-fi4lz55","Type":"NodeParagraph","Properties":{"id":"20240201213657-fi4lz55","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"这里以 JDK1.8 为例，分析一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 的底层源码。"}]},{"ID":"20240201213658-yhwh55v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213658-yhwh55v","updated":"20240201213658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class ArrayList\u003cE\u003e extends AbstractList\u003cE\u003e\n        implements List\u003cE\u003e, RandomAccess, Cloneable, java.io.Serializable {\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * 默认初始容量大小\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * 空数组（用于空实例）。\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n\n    //用于默认大小空实例的共享空数组实例。\n    //我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    /**\n     * 保存ArrayList数据的数组\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n\n    /**\n     * ArrayList 所包含的元素个数\n     */\n    private int size;\n\n    /**\n     * 带初始容量参数的构造函数（用户可以在创建ArrayList对象时自己指定集合的初始大小）\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity \u003e 0) {\n            //如果传入的参数大于0，创建initialCapacity大小的数组\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            //如果传入的参数等于0，创建空数组\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            //其他情况，抛出异常\n            throw new IllegalArgumentException(\"Illegal Capacity: \" +\n                    initialCapacity);\n        }\n    }\n\n    /**\n     * 默认无参构造函数\n     * DEFAULTCAPACITY_EMPTY_ELEMENTDATA 为0.初始化为10，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10\n     */\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。\n     */\n    public ArrayList(Collection\u003c? extends E\u003e c) {\n        //将指定集合转换为数组\n        elementData = c.toArray();\n        //如果elementData数组的长度不为0\n        if ((size = elementData.length) != 0) {\n            // 如果elementData不是Object类型数据（c.toArray可能返回的不是Object类型的数组所以加上下面的语句用于判断）\n            if (elementData.getClass() != Object[].class)\n                //将原来不是Object类型的elementData数组的内容，赋值给新的Object类型的elementData数组\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // 其他情况，用空数组代替\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n    /**\n     * 修改这个ArrayList实例的容量是列表的当前大小。 应用程序可以使用此操作来最小化ArrayList实例的存储。\n     */\n    public void trimToSize() {\n        modCount++;\n        if (size \u003c elementData.length) {\n            elementData = (size == 0)\n                    ? EMPTY_ELEMENTDATA\n                    : Arrays.copyOf(elementData, size);\n        }\n    }\n//下面是ArrayList的扩容机制\n//ArrayList的扩容机制提高了性能，如果每次只扩充一个，\n//那么频繁的插入会导致频繁的拷贝，降低性能，而ArrayList的扩容机制避免了这种情况。\n\n    /**\n     * 如有必要，增加此ArrayList实例的容量，以确保它至少能容纳元素的数量\n     *\n     * @param minCapacity 所需的最小容量\n     */\n    public void ensureCapacity(int minCapacity) {\n        //如果是true，minExpand的值为0，如果是false,minExpand的值为10\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n                // any size if not default element table\n                ? 0\n                // larger than default for default empty table. It's already\n                // supposed to be at default size.\n                : DEFAULT_CAPACITY;\n        //如果最小容量大于已有的最大容量\n        if (minCapacity \u003e minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n\n    // 根据给定的最小容量和当前数组元素来计算所需容量。\n    private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        // 如果当前数组元素为空数组（初始情况），返回默认容量和最小容量中的较大值作为所需容量\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        // 否则直接返回最小容量\n        return minCapacity;\n    }\n\n    // 确保内部容量达到指定的最小容量。\n    private void ensureCapacityInternal(int minCapacity) {\n        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n    }\n\n    //判断是否需要扩容\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n        // overflow-conscious code\n        if (minCapacity - elementData.length \u003e 0)\n            //调用grow方法进行扩容，调用此方法代表已经开始扩容了\n            grow(minCapacity);\n    }\n\n    /**\n     * 要分配的最大数组大小\n     */\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    /**\n     * ArrayList扩容的核心方法。\n     */\n    private void grow(int minCapacity) {\n        // oldCapacity为旧容量，newCapacity为新容量\n        int oldCapacity = elementData.length;\n        //将oldCapacity 右移一位，其效果相当于oldCapacity /2，\n        //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，\n        int newCapacity = oldCapacity + (oldCapacity \u003e\u003e 1);\n        //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，\n        if (newCapacity - minCapacity \u003c 0)\n            newCapacity = minCapacity;\n        //再检查新容量是否超出了ArrayList所定义的最大容量，\n        //若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，\n        //如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Integer.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。\n        if (newCapacity - MAX_ARRAY_SIZE \u003e 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\n    //比较minCapacity和 MAX_ARRAY_SIZE\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity \u003c 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity \u003e MAX_ARRAY_SIZE) ?\n                Integer.MAX_VALUE :\n                MAX_ARRAY_SIZE;\n    }\n\n    /**\n     * 返回此列表中的元素数。\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 如果此列表不包含元素，则返回 true 。\n     */\n    public boolean isEmpty() {\n        //注意=和==的区别\n        return size == 0;\n    }\n\n    /**\n     * 如果此列表包含指定的元素，则返回true 。\n     */\n    public boolean contains(Object o) {\n        //indexOf()方法：返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1\n        return indexOf(o) \u003e= 0;\n    }\n\n    /**\n     * 返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1\n     */\n    public int indexOf(Object o) {\n        if (o == null) {\n            for (int i = 0; i \u003c size; i++)\n                if (elementData[i] == null)\n                    return i;\n        } else {\n            for (int i = 0; i \u003c size; i++)\n                //equals()方法比较\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。.\n     */\n    public int lastIndexOf(Object o) {\n        if (o == null) {\n            for (int i = size - 1; i \u003e= 0; i--)\n                if (elementData[i] == null)\n                    return i;\n        } else {\n            for (int i = size - 1; i \u003e= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }\n\n    /**\n     * 返回此ArrayList实例的浅拷贝。 （元素本身不被复制。）\n     */\n    public Object clone() {\n        try {\n            ArrayList\u003c?\u003e v = (ArrayList\u003c?\u003e) super.clone();\n            //Arrays.copyOf功能是实现数组的复制，返回复制后的数组。参数是被复制的数组和复制的长度\n            v.elementData = Arrays.copyOf(elementData, size);\n            v.modCount = 0;\n            return v;\n        } catch (CloneNotSupportedException e) {\n            // 这不应该发生，因为我们是可以克隆的\n            throw new InternalError(e);\n        }\n    }\n\n    /**\n     * 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。\n     * 返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。\n     * 因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。\n     */\n    public Object[] toArray() {\n        return Arrays.copyOf(elementData, size);\n    }\n\n    /**\n     * 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）;\n     * 返回的数组的运行时类型是指定数组的运行时类型。 如果列表适合指定的数组，则返回其中。\n     * 否则，将为指定数组的运行时类型和此列表的大小分配一个新数组。\n     * 如果列表适用于指定的数组，其余空间（即数组的列表数量多于此元素），则紧跟在集合结束后的数组中的元素设置为null 。\n     * （这仅在调用者知道列表不包含任何空元素的情况下才能确定列表的长度。）\n     */\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e T[] toArray(T[] a) {\n        if (a.length \u003c size)\n            // 新建一个运行时类型的数组，但是ArrayList数组的内容\n            return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n        //调用System提供的arraycopy()方法实现数组之间的复制\n        System.arraycopy(elementData, 0, a, 0, size);\n        if (a.length \u003e size)\n            a[size] = null;\n        return a;\n    }\n\n    // Positional Access Operations\n\n    @SuppressWarnings(\"unchecked\")\n    E elementData(int index) {\n        return (E) elementData[index];\n    }\n\n    /**\n     * 返回此列表中指定位置的元素。\n     */\n    public E get(int index) {\n        rangeCheck(index);\n\n        return elementData(index);\n    }\n\n    /**\n     * 用指定的元素替换此列表中指定位置的元素。\n     */\n    public E set(int index, E element) {\n        //对index进行界限检查\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        //返回原来在这个位置的元素\n        return oldValue;\n    }\n\n    /**\n     * 将指定的元素追加到此列表的末尾。\n     */\n    public boolean add(E e) {\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //这里看到ArrayList添加元素的实质就相当于为数组赋值\n        elementData[size++] = e;\n        return true;\n    }\n\n    /**\n     * 在此列表中的指定位置插入指定的元素。\n     * 先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；\n     * 再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //arraycopy()这个实现数组之间复制的方法一定要看一下，下面就用到了arraycopy()方法实现数组自己复制自己\n        System.arraycopy(elementData, index, elementData, index + 1,\n                size - index);\n        elementData[index] = element;\n        size++;\n    }\n\n    /**\n     * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。\n     */\n    public E remove(int index) {\n        rangeCheck(index);\n\n        modCount++;\n        E oldValue = elementData(index);\n\n        int numMoved = size - index - 1;\n        if (numMoved \u003e 0)\n            System.arraycopy(elementData, index + 1, elementData, index,\n                    numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n        //从列表中删除的元素\n        return oldValue;\n    }\n\n    /**\n     * 从列表中删除指定元素的第一个出现（如果存在）。 如果列表不包含该元素，则它不会更改。\n     * 返回true，如果此列表包含指定的元素\n     */\n    public boolean remove(Object o) {\n        if (o == null) {\n            for (int index = 0; index \u003c size; index++)\n                if (elementData[index] == null) {\n                    fastRemove(index);\n                    return true;\n                }\n        } else {\n            for (int index = 0; index \u003c size; index++)\n                if (o.equals(elementData[index])) {\n                    fastRemove(index);\n                    return true;\n                }\n        }\n        return false;\n    }\n\n    /*\n     * Private remove method that skips bounds checking and does not\n     * return the value removed.\n     */\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved \u003e 0)\n            System.arraycopy(elementData, index + 1, elementData, index,\n                    numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }\n\n    /**\n     * 从列表中删除所有元素。\n     */\n    public void clear() {\n        modCount++;\n\n        // 把数组中所有的元素的值设为null\n        for (int i = 0; i \u003c size; i++)\n            elementData[i] = null;\n\n        size = 0;\n    }\n\n    /**\n     * 按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。\n     */\n    public boolean addAll(Collection\u003c? extends E\u003e c) {\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n        System.arraycopy(a, 0, elementData, size, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 将指定集合中的所有元素插入到此列表中，从指定的位置开始。\n     */\n    public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n        rangeCheckForAdd(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n\n        int numMoved = size - index;\n        if (numMoved \u003e 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                    numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }\n\n    /**\n     * 从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。\n     * 将任何后续元素移动到左侧（减少其索引）。\n     */\n    protected void removeRange(int fromIndex, int toIndex) {\n        modCount++;\n        int numMoved = size - toIndex;\n        System.arraycopy(elementData, toIndex, elementData, fromIndex,\n                numMoved);\n\n        // clear to let GC do its work\n        int newSize = size - (toIndex - fromIndex);\n        for (int i = newSize; i \u003c size; i++) {\n            elementData[i] = null;\n        }\n        size = newSize;\n    }\n\n    /**\n     * 检查给定的索引是否在范围内。\n     */\n    private void rangeCheck(int index) {\n        if (index \u003e= size)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    /**\n     * add和addAll使用的rangeCheck的一个版本\n     */\n    private void rangeCheckForAdd(int index) {\n        if (index \u003e size || index \u003c 0)\n            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n    }\n\n    /**\n     * 返回IndexOutOfBoundsException细节信息\n     */\n    private String outOfBoundsMsg(int index) {\n        return \"Index: \" + index + \", Size: \" + size;\n    }\n\n    /**\n     * 从此列表中删除指定集合中包含的所有元素。\n     */\n    public boolean removeAll(Collection\u003c?\u003e c) {\n        Objects.requireNonNull(c);\n        //如果此列表被修改则返回true\n        return batchRemove(c, false);\n    }\n\n    /**\n     * 仅保留此列表中包含在指定集合中的元素。\n     * 换句话说，从此列表中删除其中不包含在指定集合中的所有元素。\n     */\n    public boolean retainAll(Collection\u003c?\u003e c) {\n        Objects.requireNonNull(c);\n        return batchRemove(c, true);\n    }\n\n\n    /**\n     * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。\n     * 指定的索引表示初始调用将返回的第一个元素为next 。 初始调用previous将返回指定索引减1的元素。\n     * 返回的列表迭代器是fail-fast 。\n     */\n    public ListIterator\u003cE\u003e listIterator(int index) {\n        if (index \u003c 0 || index \u003e size)\n            throw new IndexOutOfBoundsException(\"Index: \" + index);\n        return new ListItr(index);\n    }\n\n    /**\n     * 返回列表中的列表迭代器（按适当的顺序）。\n     * 返回的列表迭代器是fail-fast 。\n     */\n    public ListIterator\u003cE\u003e listIterator() {\n        return new ListItr(0);\n    }\n\n    /**\n     * 以正确的顺序返回该列表中的元素的迭代器。\n     * 返回的迭代器是fail-fast 。\n     */\n    public Iterator\u003cE\u003e iterator() {\n        return new Itr();\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213659-w6sdozx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213659-w6sdozx","updated":"20240201213659"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ArrayList 扩容机制分析"}]},{"ID":"20240201213660-ddyk58m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213660-ddyk58m","updated":"20240201213660"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"先从 ArrayList 的构造函数说起"}]},{"ID":"20240201213661-1frya67","Type":"NodeParagraph","Properties":{"id":"20240201213661-1frya67","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"ArrayList 有三种方式来初始化，构造方法源码如下（JDK8）："}]},{"ID":"20240201213662-1qtpa4p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213662-1qtpa4p","updated":"20240201213662"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 默认初始容量大小\n */\nprivate static final int DEFAULT_CAPACITY = 10;\n\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n/**\n * 默认构造函数，使用初始容量10构造一个空列表(无参数构造)\n */\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\n/**\n * 带初始容量参数的构造函数。（用户自己指定容量）\n */\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity \u003e 0) {//初始容量大于0\n        //创建initialCapacity大小的数组\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {//初始容量等于0\n        //创建空数组\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {//初始容量小于0，抛出异常\n        throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n    }\n}\n\n\n/**\n *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回\n *如果指定的集合为null，throws NullPointerException。\n */\npublic ArrayList(Collection\u003c? extends E\u003e c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213663-u3buwj2","Type":"NodeParagraph","Properties":{"id":"20240201213663-u3buwj2","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"细心的同学一定会发现："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"以无参数构造方法创建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ArrayList"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。"},{"Type":"NodeText","Data":" 下面在我们分析 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 扩容时会讲到这一点内容！"}]},{"ID":"20240201213664-1lcjib7","Type":"NodeBlockquote","Properties":{"id":"20240201213664-1lcjib7","updated":"20240201213664"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213665-b84eulv","Type":"NodeParagraph","Properties":{"id":"20240201213665-b84eulv","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"补充：JDK6 new 无参构造的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 对象时，直接创建了长度是 10 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Object[]"},{"Type":"NodeText","Data":" 数组 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"elementData"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213666-y1bgtq0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213666-y1bgtq0","updated":"20240201213666"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"一步一步分析 ArrayList 扩容机制"}]},{"ID":"20240201213667-j5o5wzk","Type":"NodeParagraph","Properties":{"id":"20240201213667-j5o5wzk","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"这里以无参构造函数创建的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 为例分析。"}]},{"ID":"20240201213668-9ucu8c7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213668-9ucu8c7","updated":"20240201213668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"add 方法"}]},{"ID":"20240201213669-fe0d8w3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213669-fe0d8w3","updated":"20240201213669"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n* 将指定的元素追加到此列表的末尾。\n*/\npublic boolean add(E e) {\n    // 加元素之前，先调用ensureCapacityInternal方法\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    // 这里看到ArrayList添加元素的实质就相当于为数组赋值\n    elementData[size++] = e;\n    return true;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213670-d0355u7","Type":"NodeParagraph","Properties":{"id":"20240201213670-d0355u7","updated":"20240201213670"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意"},{"Type":"NodeText","Data":"：JDK11 移除了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacityInternal()"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureExplicitCapacity()"},{"Type":"NodeText","Data":" 方法"}]},{"ID":"20240201213671-ut3naol","Type":"NodeParagraph","Properties":{"id":"20240201213671-ut3naol","updated":"20240201213671"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacityInternal"},{"Type":"NodeText","Data":" 方法的源码如下："}]},{"ID":"20240201213672-nmgx7nt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213672-nmgx7nt","updated":"20240201213672"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 根据给定的最小容量和当前数组元素来计算所需容量。\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    // 如果当前数组元素为空数组（初始情况），返回默认容量和最小容量中的较大值作为所需容量\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    // 否则直接返回最小容量\n    return minCapacity;\n}\n\n// 确保内部容量达到指定的最小容量。\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213673-h8p7pxk","Type":"NodeParagraph","Properties":{"id":"20240201213673-h8p7pxk","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacityInternal"},{"Type":"NodeText","Data":" 方法非常简单，内部直接调用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureExplicitCapacity"},{"Type":"NodeText","Data":" 方法："}]},{"ID":"20240201213674-e8g1lme","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213674-e8g1lme","updated":"20240201213674"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//判断是否需要扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n    //判断当前数组容量是否足以存储minCapacity个元素\n    if (minCapacity - elementData.length \u003e 0)\n        //调用grow方法进行扩容\n        grow(minCapacity);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213675-xdukaca","Type":"NodeParagraph","Properties":{"id":"20240201213675-xdukaca","updated":"20240201213675"},"Children":[{"Type":"NodeText","Data":"我们来仔细分析一下："}]},{"ID":"20240201213676-w6dlxx3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213676-w6dlxx3","updated":"20240201213676"},"Children":[{"ID":"20240201213677-hdkcv0e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213677-hdkcv0e","updated":"20240201213677"},"Children":[{"ID":"20240201213678-5nootdw","Type":"NodeParagraph","Properties":{"id":"20240201213678-5nootdw","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"当我们要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":" 进第 1 个元素到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"elementData.length"},{"Type":"NodeText","Data":" 为 0 （因为还是一个空的 list），因为执行了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacityInternal()"},{"Type":"NodeText","Data":" 方法 ，所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity"},{"Type":"NodeText","Data":" 此时为 10。此时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity - elementData.length \u0026gt; 0"},{"Type":"NodeText","Data":"成立，所以会进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"grow(minCapacity)"},{"Type":"NodeText","Data":" 方法。"}]}]},{"ID":"20240201213679-0l0gev9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-0l0gev9","updated":"20240201213679"},"Children":[{"ID":"20240201213680-or4huk9","Type":"NodeParagraph","Properties":{"id":"20240201213680-or4huk9","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":" 第 2 个元素时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity"},{"Type":"NodeText","Data":" 为 2，此时 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"elementData.length"},{"Type":"NodeText","Data":"(容量)在添加第一个元素后扩容成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"10"},{"Type":"NodeText","Data":" 了。此时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity - elementData.length \u0026gt; 0"},{"Type":"NodeText","Data":" 不成立，所以不会进入 （执行）"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"grow(minCapacity)"},{"Type":"NodeText","Data":" 方法。"}]}]},{"ID":"20240201213681-inc6ulh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-inc6ulh","updated":"20240201213681"},"Children":[{"ID":"20240201213682-7noau5x","Type":"NodeParagraph","Properties":{"id":"20240201213682-7noau5x","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"添加第 3、4···到第 10 个元素时，依然不会执行 grow 方法，数组容量都为 10。"}]}]}]},{"ID":"20240201213683-zcqpyco","Type":"NodeParagraph","Properties":{"id":"20240201213683-zcqpyco","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"直到添加第 11 个元素，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity"},{"Type":"NodeText","Data":"(为 11)比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"elementData.length"},{"Type":"NodeText","Data":"（为 10）要大。进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"grow"},{"Type":"NodeText","Data":" 方法进行扩容。"}]},{"ID":"20240201213684-cdqjfob","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213684-cdqjfob","updated":"20240201213684"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"grow 方法"}]},{"ID":"20240201213685-evaeqxd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213685-evaeqxd","updated":"20240201213685"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 要分配的最大数组大小\n */\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n * ArrayList扩容的核心方法。\n */\nprivate void grow(int minCapacity) {\n    // oldCapacity为旧容量，newCapacity为新容量\n    int oldCapacity = elementData.length;\n    // 将oldCapacity 右移一位，其效果相当于oldCapacity /2，\n    // 我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，\n    int newCapacity = oldCapacity + (oldCapacity \u003e\u003e 1);\n\n    // 然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，\n    if (newCapacity - minCapacity \u003c 0)\n        newCapacity = minCapacity;\n\n    // 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，\n    // 如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。\n    if (newCapacity - MAX_ARRAY_SIZE \u003e 0)\n        newCapacity = hugeCapacity(minCapacity);\n\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213686-tg6v9qm","Type":"NodeParagraph","Properties":{"id":"20240201213686-tg6v9qm","updated":"20240201213686"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"int newCapacity = oldCapacity + (oldCapacity \u0026gt;\u0026gt; 1)"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":",所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！"},{"Type":"NodeText","Data":" 奇偶不同，比如：10+10/2 = 15, 33+33/2=49。如果是奇数的话会丢掉小数."}]},{"ID":"20240201213687-5r3qvby","Type":"NodeBlockquote","Properties":{"id":"20240201213687-5r3qvby","updated":"20240201213687"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213688-58sr89j","Type":"NodeParagraph","Properties":{"id":"20240201213688-58sr89j","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"\"\u003e\u003e\"（移位运算符）：\u003e\u003e1 右移一位相当于除 2，右移 n 位相当于除以 2 的 n 次方。这里 oldCapacity 明显右移了 1 位所以相当于 oldCapacity /2。对于大数据的 2 进制运算,位移运算符比那些普通运算符的运算要快很多,因为程序仅仅移动一下而已,不去计算,这样提高了效率,节省了资源"}]}]},{"ID":"20240201213689-g33ym4n","Type":"NodeParagraph","Properties":{"id":"20240201213689-g33ym4n","updated":"20240201213689"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们再来通过例子探究一下"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"grow()"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 方法："}]},{"ID":"20240201213690-czne4jc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-czne4jc","updated":"20240201213690"},"Children":[{"ID":"20240201213691-cntx3pa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213691-cntx3pa","updated":"20240201213691"},"Children":[{"ID":"20240201213692-n2b27ec","Type":"NodeParagraph","Properties":{"id":"20240201213692-n2b27ec","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":" 第 1 个元素时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"oldCapacity"},{"Type":"NodeText","Data":" 为 0，经比较后第一个 if 判断成立，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"newCapacity = minCapacity"},{"Type":"NodeText","Data":"(为 10)。但是第二个 if 判断不会成立，即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"newCapacity"},{"Type":"NodeText","Data":" 不比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MAX_ARRAY_SIZE"},{"Type":"NodeText","Data":" 大，则不会进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hugeCapacity"},{"Type":"NodeText","Data":" 方法。数组容量为 10，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":" 方法中 return true,size 增为 1。"}]}]},{"ID":"20240201213693-qptl7u5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-qptl7u5","updated":"20240201213693"},"Children":[{"ID":"20240201213694-6ssb9qc","Type":"NodeParagraph","Properties":{"id":"20240201213694-6ssb9qc","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":" 第 11 个元素进入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"grow"},{"Type":"NodeText","Data":" 方法时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"newCapacity"},{"Type":"NodeText","Data":" 为 15，比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity"},{"Type":"NodeText","Data":"（为 11）大，第一个 if 判断不成立。新容量没有大于数组最大 size，不会进入 huge"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"apacity 方法。数组容量扩为 15，add 方法中 return true,size 增为 11。"}]}]},{"ID":"20240201213695-j7bvlmk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-j7bvlmk","updated":"20240201213695"},"Children":[{"ID":"20240201213696-flvmat4","Type":"NodeParagraph","Properties":{"id":"20240201213696-flvmat4","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"以此类推······"}]}]}]},{"ID":"20240201213697-7dk0knl","Type":"NodeParagraph","Properties":{"id":"20240201213697-7dk0knl","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这里补充一点比较重要，但是容易被忽视掉的知识点："}]},{"ID":"20240201213698-yk29wvr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-yk29wvr","updated":"20240201213698"},"Children":[{"ID":"20240201213699-3131uql","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213699-3131uql","updated":"20240201213699"},"Children":[{"ID":"20240201213700-1y5hos9","Type":"NodeParagraph","Properties":{"id":"20240201213700-1y5hos9","updated":"20240201213700"},"Children":[{"Type":"NodeText","Data":"Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"length"},{"Type":"NodeText","Data":"属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属性."}]}]},{"ID":"20240201213701-6czt5s0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213701-6czt5s0","updated":"20240201213701"},"Children":[{"ID":"20240201213702-gu9i9rm","Type":"NodeParagraph","Properties":{"id":"20240201213702-gu9i9rm","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"length()"},{"Type":"NodeText","Data":" 方法是针对字符串说的,如果想看这个字符串的长度则用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"length()"},{"Type":"NodeText","Data":" 这个方法."}]}]},{"ID":"20240201213703-g14imqk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-g14imqk","updated":"20240201213703"},"Children":[{"ID":"20240201213704-gwjogpw","Type":"NodeParagraph","Properties":{"id":"20240201213704-gwjogpw","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"Java 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"size()"},{"Type":"NodeText","Data":" 方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!"}]}]}]},{"ID":"20240201213705-wdurpnw","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213705-wdurpnw","updated":"20240201213705"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"hugeCapacity() 方法"}]},{"ID":"20240201213706-1a850yg","Type":"NodeParagraph","Properties":{"id":"20240201213706-1a850yg","updated":"20240201213706"},"Children":[{"Type":"NodeText","Data":"从上面 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"grow()"},{"Type":"NodeText","Data":" 方法源码我们知道：如果新容量大于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MAX_ARRAY_SIZE"},{"Type":"NodeText","Data":",进入(执行) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hugeCapacity()"},{"Type":"NodeText","Data":" 方法来比较 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MAX_ARRAY_SIZE"},{"Type":"NodeText","Data":"，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"minCapacity"},{"Type":"NodeText","Data":" 大于最大容量，则新容量则为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":"，否则，新容量大小则为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MAX_ARRAY_SIZE"},{"Type":"NodeText","Data":" 即为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE - 8"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213707-fxk1d75","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213707-fxk1d75","updated":"20240201213707"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static int hugeCapacity(int minCapacity) {\n    if (minCapacity \u003c 0) // overflow\n        throw new OutOfMemoryError();\n    // 对minCapacity和MAX_ARRAY_SIZE进行比较\n    // 若minCapacity大，将Integer.MAX_VALUE作为新数组的大小\n    // 若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小\n    // MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n    return (minCapacity \u003e MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213708-60793df","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213708-60793df","updated":"20240201213708"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"System.arraycopy()"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arrays.copyOf()"},{"Type":"NodeText","Data":"方法"}]},{"ID":"20240201213709-e6dmcud","Type":"NodeParagraph","Properties":{"id":"20240201213709-e6dmcud","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"阅读源码的话，我们就会发现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 中大量调用了这两个方法。比如：我们上面讲的扩容操作以及"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(int index, E element)"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"toArray()"},{"Type":"NodeText","Data":" 等方法中都用到了该方法！"}]},{"ID":"20240201213710-jzo1doo","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213710-jzo1doo","updated":"20240201213710"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"System.arraycopy()"},{"Type":"NodeText","Data":" 方法"}]},{"ID":"20240201213711-uvlddbc","Type":"NodeParagraph","Properties":{"id":"20240201213711-uvlddbc","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"源码："}]},{"ID":"20240201213712-ff3jvm7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213712-ff3jvm7","updated":"20240201213712"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    // 我们发现 arraycopy 是一个 native 方法,接下来我们解释一下各个参数的具体意义\n    /**\n    *   复制数组\n    * @param src 源数组\n    * @param srcPos 源数组中的起始位置\n    * @param dest 目标数组\n    * @param destPos 目标数组中的起始位置\n    * @param length 要复制的数组元素的数量\n    */\n    public static native void arraycopy(Object src,  int  srcPos,\n                                        Object dest, int destPos,\n                                        int length);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213713-j1ozlu1","Type":"NodeParagraph","Properties":{"id":"20240201213713-j1ozlu1","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"场景："}]},{"ID":"20240201213714-g6mtr6n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213714-g6mtr6n","updated":"20240201213714"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    /**\n     * 在此列表中的指定位置插入指定的元素。\n     *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；\n     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //arraycopy()方法实现数组自己复制自己\n        //elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        elementData[index] = element;\n        size++;\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213715-kfkiptg","Type":"NodeParagraph","Properties":{"id":"20240201213715-kfkiptg","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"我们写一个简单的方法测试以下："}]},{"ID":"20240201213716-uf6rmx3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213716-uf6rmx3","updated":"20240201213716"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class ArraycopyTest {\n\n  public static void main(String[] args) {\n    // TODO Auto-generated method stub\n    int[] a = new int[10];\n    a[0] = 0;\n    a[1] = 1;\n    a[2] = 2;\n    a[3] = 3;\n    System.arraycopy(a, 2, a, 3, 3);\n    a[2]=99;\n    for (int i = 0; i \u003c a.length; i++) {\n      System.out.print(a[i] + \" \");\n    }\n  }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213717-4tvuecj","Type":"NodeParagraph","Properties":{"id":"20240201213717-4tvuecj","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"结果："}]},{"ID":"20240201213718-sb8585s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213718-sb8585s","updated":"20240201213718"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"0 1 99 2 3 0 0 0 0 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213719-0681ax8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213719-0681ax8","updated":"20240201213719"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arrays.copyOf()"},{"Type":"NodeText","Data":"方法"}]},{"ID":"20240201213720-xbka8y0","Type":"NodeParagraph","Properties":{"id":"20240201213720-xbka8y0","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"源码："}]},{"ID":"20240201213721-v5ge96w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213721-v5ge96w","updated":"20240201213721"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    public static int[] copyOf(int[] original, int newLength) {\n      // 申请一个新的数组\n        int[] copy = new int[newLength];\n  // 调用System.arraycopy,将源数组中的数据进行拷贝,并返回新的数组\n        System.arraycopy(original, 0, copy, 0,\n                         Math.min(original.length, newLength));\n        return copy;\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213722-8hzzgm0","Type":"NodeParagraph","Properties":{"id":"20240201213722-8hzzgm0","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"场景："}]},{"ID":"20240201213723-8earf4i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213723-8earf4i","updated":"20240201213723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"   /**\n     以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。\n     */\n    public Object[] toArray() {\n    //elementData：要复制的数组；size：要复制的长度\n        return Arrays.copyOf(elementData, size);\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213724-anpa3ln","Type":"NodeParagraph","Properties":{"id":"20240201213724-anpa3ln","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"个人觉得使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arrays.copyOf()"},{"Type":"NodeText","Data":"方法主要是为了给原有数组扩容，测试代码如下："}]},{"ID":"20240201213725-ot6dox5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213725-ot6dox5","updated":"20240201213725"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class ArrayscopyOfTest {\n\n  public static void main(String[] args) {\n    int[] a = new int[3];\n    a[0] = 0;\n    a[1] = 1;\n    a[2] = 2;\n    int[] b = Arrays.copyOf(a, 10);\n    System.out.println(\"b.length\"+b.length);\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213726-29v91yz","Type":"NodeParagraph","Properties":{"id":"20240201213726-29v91yz","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"结果："}]},{"ID":"20240201213727-574szjz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213727-574szjz","updated":"20240201213727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"10\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213728-cpzmb05","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213728-cpzmb05","updated":"20240201213728"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"两者联系和区别"}]},{"ID":"20240201213729-epbdkbu","Type":"NodeParagraph","Properties":{"id":"20240201213729-epbdkbu","updated":"20240201213729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"联系："}]},{"ID":"20240201213730-ctxfwhj","Type":"NodeParagraph","Properties":{"id":"20240201213730-ctxfwhj","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"看两者源代码可以发现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"copyOf()"},{"Type":"NodeText","Data":"内部实际调用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"System.arraycopy()"},{"Type":"NodeText","Data":" 方法"}]},{"ID":"20240201213731-byrsxat","Type":"NodeParagraph","Properties":{"id":"20240201213731-byrsxat","updated":"20240201213731"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"区别："}]},{"ID":"20240201213732-xa4bfg3","Type":"NodeParagraph","Properties":{"id":"20240201213732-xa4bfg3","updated":"20240201213732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"arraycopy()"},{"Type":"NodeText","Data":" 需要目标数组，将原数组拷贝到你自己定义的数组里或者原数组，而且可以选择拷贝的起点和长度以及放入新数组中的位置 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"copyOf()"},{"Type":"NodeText","Data":" 是系统自动在内部新建一个数组，并返回该数组。"}]},{"ID":"20240201213733-dn09k79","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213733-dn09k79","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacity"},{"Type":"NodeText","Data":"方法"}]},{"ID":"20240201213734-01dmkx1","Type":"NodeParagraph","Properties":{"id":"20240201213734-01dmkx1","updated":"20240201213734"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 源码中有一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacity"},{"Type":"NodeText","Data":" 方法不知道大家注意到没有，这个方法 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 内部没有被调用过，所以很显然是提供给用户调用的，那么这个方法有什么作用呢？"}]},{"ID":"20240201213735-jmdcwah","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213735-jmdcwah","updated":"20240201213735"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    /**\n    如有必要，增加此 ArrayList 实例的容量，以确保它至少可以容纳由minimum capacity参数指定的元素数。\n     *\n     * @param   minCapacity   所需的最小容量\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It's already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity \u003e minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213736-geeyth5","Type":"NodeParagraph","Properties":{"id":"20240201213736-geeyth5","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"理论上来说，最好在向 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 添加大量元素之前用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacity"},{"Type":"NodeText","Data":" 方法，以减少增量重新分配的次数"}]},{"ID":"20240201213737-h2zshbs","Type":"NodeParagraph","Properties":{"id":"20240201213737-h2zshbs","updated":"20240201213737"},"Children":[{"Type":"NodeText","Data":"我们通过下面的代码实际测试以下这个方法的效果："}]},{"ID":"20240201213738-md3e13k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213738-md3e13k","updated":"20240201213738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class EnsureCapacityTest {\n  public static void main(String[] args) {\n    ArrayList\u003cObject\u003e list = new ArrayList\u003cObject\u003e();\n    final int N = 10000000;\n    long startTime = System.currentTimeMillis();\n    for (int i = 0; i \u003c N; i++) {\n      list.add(i);\n    }\n    long endTime = System.currentTimeMillis();\n    System.out.println(\"使用ensureCapacity方法前：\"+(endTime - startTime));\n\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213739-6xqqnaj","Type":"NodeParagraph","Properties":{"id":"20240201213739-6xqqnaj","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"运行结果："}]},{"ID":"20240201213740-cco1rc0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213740-cco1rc0","updated":"20240201213740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"使用ensureCapacity方法前：2158\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213741-qlcvw5b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213741-qlcvw5b","updated":"20240201213741"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class EnsureCapacityTest {\n    public static void main(String[] args) {\n        ArrayList\u003cObject\u003e list = new ArrayList\u003cObject\u003e();\n        final int N = 10000000;\n        long startTime1 = System.currentTimeMillis();\n        list.ensureCapacity(N);\n        for (int i = 0; i \u003c N; i++) {\n            list.add(i);\n        }\n        long endTime1 = System.currentTimeMillis();\n        System.out.println(\"使用ensureCapacity方法后：\"+(endTime1 - startTime1));\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213742-ibp83ix","Type":"NodeParagraph","Properties":{"id":"20240201213742-ibp83ix","updated":"20240201213742"},"Children":[{"Type":"NodeText","Data":"运行结果："}]},{"ID":"20240201213743-r1040v5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213743-r1040v5","updated":"20240201213743"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"使用ensureCapacity方法后：1773\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213744-rpkn1s4","Type":"NodeParagraph","Properties":{"id":"20240201213744-rpkn1s4","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"通过运行结果，我们可以看出向 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 添加大量元素之前使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ensureCapacity"},{"Type":"NodeText","Data":" 方法可以提升性能。不过，这个性能差距几乎可以忽略不计。而且，实际项目根本也不可能往 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 里面添加这么多元素。"}]},{"ID":"20240201213745-nhj020t","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-nhj020t","updated":"20240201213745"}}]}