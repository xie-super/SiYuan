{"ID":"20240201213619-ihphcds","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213619-ihphcds","title":"linkedlist-source-code","updated":"20240201213619"},"Children":[{"ID":"20240201213620-c655rmc","Type":"NodeThematicBreak","Properties":{"id":"20240201213620-c655rmc","updated":"20240201213620"}},{"ID":"20240201213621-pccoogr","Type":"NodeParagraph","Properties":{"id":"20240201213621-pccoogr","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"title: LinkedList 源码分析"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213622-9j7k8s3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-9j7k8s3","updated":"20240201213622"},"Children":[{"ID":"20240201213623-st5tp44","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213623-st5tp44","updated":"20240201213623"},"Children":[{"ID":"20240201213624-ff88bkh","Type":"NodeParagraph","Properties":{"id":"20240201213624-ff88bkh","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"Java集合"}]}]}]},{"ID":"20240201213625-qik1t9y","Type":"NodeThematicBreak","Properties":{"id":"20240201213625-qik1t9y","updated":"20240201213625"}},{"ID":"20240201213626-veoazvl","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-header.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213626-veoazvl","updated":"20240201213626"}},{"ID":"20240201213627-ifvab9s","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213627-ifvab9s","updated":"20240201213627"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"LinkedList 简介"}]},{"ID":"20240201213628-jbs930u","Type":"NodeParagraph","Properties":{"id":"20240201213628-jbs930u","updated":"20240201213628"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 是一个基于双向链表实现的集合类，经常被拿来和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 做比较。关于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":"的详细对比，我们 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./java-collection-questions-01.md","TextMarkTextContent":"Java 集合常见面试题总结(上)"},{"Type":"NodeText","Data":"有详细介绍到。"}]},{"ID":"20240201213629-wv96aqb","Type":"NodeParagraph","Properties":{"id":"20240201213629-wv96aqb","updated":"20240201213629"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"双向链表","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-linkedlist.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213630-1vk0r08","Type":"NodeParagraph","Properties":{"id":"20240201213630-1vk0r08","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"不过，我们在项目中一般是不会使用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的，需要用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的场景几乎都可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 来代替，并且，性能通常会更好！就连 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的作者约书亚 · 布洛克（Josh Bloch）自己都说从来不会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213631-mnt7zy0","Type":"NodeParagraph","Properties":{"id":"20240201213631-mnt7zy0","updated":"20240201213631"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/redisimage-20220412110853807.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213632-jqoj1u9","Type":"NodeParagraph","Properties":{"id":"20240201213632-jqoj1u9","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"另外，不要下意识地认为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 作为链表就最适合元素增删的场景。我在上面也说了，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 仅仅在头尾插入或者删除元素的时候时间复杂度近似 O(1)，其他情况增删元素的平均时间复杂度都是 O(n) 。"}]},{"ID":"20240201213633-sge07j7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213633-sge07j7","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"LinkedList 插入和删除元素的时间复杂度？"}]},{"ID":"20240201213634-hy5u15r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213634-hy5u15r","updated":"20240201213634"},"Children":[{"ID":"20240201213635-kyi7wf8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-kyi7wf8","updated":"20240201213635"},"Children":[{"ID":"20240201213636-y7va8f2","Type":"NodeParagraph","Properties":{"id":"20240201213636-y7va8f2","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"头部插入/删除：只需要修改头结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。"}]}]},{"ID":"20240201213637-fsjd74l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-fsjd74l","updated":"20240201213637"},"Children":[{"ID":"20240201213638-acd6nz4","Type":"NodeParagraph","Properties":{"id":"20240201213638-acd6nz4","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"尾部插入/删除：只需要修改尾结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。"}]}]},{"ID":"20240201213639-wxuenu2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-wxuenu2","updated":"20240201213639"},"Children":[{"ID":"20240201213640-by75095","Type":"NodeParagraph","Properties":{"id":"20240201213640-by75095","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"指定位置插入/删除：需要先移动到指定位置，再修改指定节点的指针完成插入/删除，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。"}]}]}]},{"ID":"20240201213641-vsigoli","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213641-vsigoli","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"LinkedList 为什么不能实现 RandomAccess 接口？"}]},{"ID":"20240201213642-7fzfip2","Type":"NodeParagraph","Properties":{"id":"20240201213642-7fzfip2","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomAccess"},{"Type":"NodeText","Data":" 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。由于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomAccess"},{"Type":"NodeText","Data":" 接口。"}]},{"ID":"20240201213643-wu35j90","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213643-wu35j90","updated":"20240201213643"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"LinkedList 源码分析"}]},{"ID":"20240201213644-ma57ae7","Type":"NodeParagraph","Properties":{"id":"20240201213644-ma57ae7","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"这里以 JDK1.8 为例，分析一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的底层核心源码。"}]},{"ID":"20240201213645-7t2mqt0","Type":"NodeParagraph","Properties":{"id":"20240201213645-7t2mqt0","updated":"20240201213645"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的类定义如下："}]},{"ID":"20240201213646-2x2ob8m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213646-2x2ob8m","updated":"20240201213646"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class LinkedList\u003cE\u003e\n    extends AbstractSequentialList\u003cE\u003e\n    implements List\u003cE\u003e, Deque\u003cE\u003e, Cloneable, java.io.Serializable\n{\n  //...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213647-jts2r11","Type":"NodeParagraph","Properties":{"id":"20240201213647-jts2r11","updated":"20240201213647"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 继承了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractSequentialList"},{"Type":"NodeText","Data":" ，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractSequentialList"},{"Type":"NodeText","Data":" 又继承于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractList"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213648-y3gp9ri","Type":"NodeParagraph","Properties":{"id":"20240201213648-y3gp9ri","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"阅读过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 的源码我们就知道，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 同样继承了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractList"},{"Type":"NodeText","Data":" ， 所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 会有大部分方法和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 相似。"}]},{"ID":"20240201213649-996rrw7","Type":"NodeParagraph","Properties":{"id":"20240201213649-996rrw7","updated":"20240201213649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 实现了以下接口："}]},{"ID":"20240201213650-b7hq37b","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-b7hq37b","updated":"20240201213650"},"Children":[{"ID":"20240201213651-3ss7m5u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-3ss7m5u","updated":"20240201213651"},"Children":[{"ID":"20240201213652-uojlfex","Type":"NodeParagraph","Properties":{"id":"20240201213652-uojlfex","updated":"20240201213652"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" : 表明它是一个列表，支持添加、删除、查找等操作，并且可以通过下标进行访问。"}]}]},{"ID":"20240201213653-6btzwmh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213653-6btzwmh","updated":"20240201213653"},"Children":[{"ID":"20240201213654-iwghzjg","Type":"NodeParagraph","Properties":{"id":"20240201213654-iwghzjg","updated":"20240201213654"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Deque"},{"Type":"NodeText","Data":" ：继承自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Queue"},{"Type":"NodeText","Data":" 接口，具有双端队列的特性，支持从两端插入和删除元素，方便实现栈和队列等数据结构。需要注意，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Deque"},{"Type":"NodeText","Data":" 的发音为 \"deck\" [dɛk]，这个大部分人都会读错。"}]}]},{"ID":"20240201213655-v72ug6p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-v72ug6p","updated":"20240201213655"},"Children":[{"ID":"20240201213656-qksyy50","Type":"NodeParagraph","Properties":{"id":"20240201213656-qksyy50","updated":"20240201213656"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Cloneable"},{"Type":"NodeText","Data":" ：表明它具有拷贝能力，可以进行深拷贝或浅拷贝操作。"}]}]},{"ID":"20240201213657-sze193s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213657-sze193s","updated":"20240201213657"},"Children":[{"ID":"20240201213658-4nhu51o","Type":"NodeParagraph","Properties":{"id":"20240201213658-4nhu51o","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Serializable"},{"Type":"NodeText","Data":" : 表明它可以进行序列化操作，也就是可以将对象转换为字节流进行持久化存储或网络传输，非常方便。"}]}]}]},{"ID":"20240201213659-vrj9pd2","Type":"NodeParagraph","Properties":{"id":"20240201213659-vrj9pd2","updated":"20240201213659"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"LinkedList 类图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/linkedlist--class-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213660-lankx4y","Type":"NodeParagraph","Properties":{"id":"20240201213660-lankx4y","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 中的元素是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Node"},{"Type":"NodeText","Data":" 定义的："}]},{"ID":"20240201213661-oqzghvk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213661-oqzghvk","updated":"20240201213661"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static class Node\u003cE\u003e {\n    E item;// 节点值\n    Node\u003cE\u003e next; // 指向的下一个节点（后继节点）\n    Node\u003cE\u003e prev; // 指向的前一个节点（前驱结点）\n\n    // 初始化参数顺序分别是：前驱结点、本身节点值、后继节点\n    Node(Node\u003cE\u003e prev, E element, Node\u003cE\u003e next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213662-b6qvjh7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213662-b6qvjh7","updated":"20240201213662"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"初始化"}]},{"ID":"20240201213663-ybm1fnx","Type":"NodeParagraph","Properties":{"id":"20240201213663-ybm1fnx","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 中有一个无参构造函数和一个有参构造函数。"}]},{"ID":"20240201213664-j3jl8h3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213664-j3jl8h3","updated":"20240201213664"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建一个空的链表对象\npublic LinkedList() {\n}\n\n// 接收一个集合类型作为参数，会创建一个与传入集合相同元素的链表对象\npublic LinkedList(Collection\u003c? extends E\u003e c) {\n    this();\n    addAll(c);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213665-r7i8hl7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213665-r7i8hl7","updated":"20240201213665"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"插入元素"}]},{"ID":"20240201213666-rgi1vaf","Type":"NodeParagraph","Properties":{"id":"20240201213666-rgi1vaf","updated":"20240201213666"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 除了实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 接口相关方法，还实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Deque"},{"Type":"NodeText","Data":" 接口的很多方法，所以我们有很多种方式插入元素。"}]},{"ID":"20240201213667-3tbttsn","Type":"NodeParagraph","Properties":{"id":"20240201213667-3tbttsn","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"我们这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 接口中相关的插入方法为例进行源码讲解，对应的是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add()"},{"Type":"NodeText","Data":" 方法。"}]},{"ID":"20240201213668-tk0twt4","Type":"NodeParagraph","Properties":{"id":"20240201213668-tk0twt4","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add()"},{"Type":"NodeText","Data":" 方法有两个版本："}]},{"ID":"20240201213669-eks3veu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-eks3veu","updated":"20240201213669"},"Children":[{"ID":"20240201213670-srdwwsp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-srdwwsp","updated":"20240201213670"},"Children":[{"ID":"20240201213671-yl4bkox","Type":"NodeParagraph","Properties":{"id":"20240201213671-yl4bkox","updated":"20240201213671"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(E e)"},{"Type":"NodeText","Data":"：用于在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的尾部插入元素，即将新元素作为链表的最后一个元素，时间复杂度为 O(1)。"}]}]},{"ID":"20240201213672-chfbt8f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213672-chfbt8f","updated":"20240201213672"},"Children":[{"ID":"20240201213673-bavullt","Type":"NodeParagraph","Properties":{"id":"20240201213673-bavullt","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(int index, E element)"},{"Type":"NodeText","Data":":用于在指定位置插入元素。这种插入方式需要先移动到指定位置，再修改指定节点的指针完成插入/删除，因此需要移动平均 n/2 个元素，时间复杂度为 O(n)。"}]}]}]},{"ID":"20240201213674-6wk7ja0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213674-6wk7ja0","updated":"20240201213674"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 在链表尾部插入元素\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n\n// 在链表指定位置插入元素\npublic void add(int index, E element) {\n    // 下标越界检查\n    checkPositionIndex(index);\n\n    // 判断 index 是不是链表尾部位置\n    if (index == size)\n        // 如果是就直接调用 linkLast 方法将元素节点插入链表尾部即可\n        linkLast(element);\n    else\n        // 如果不是则调用 linkBefore 方法将其插入指定元素之前\n        linkBefore(element, node(index));\n}\n\n// 将元素节点插入到链表尾部\nvoid linkLast(E e) {\n    // 将最后一个元素赋值（引用传递）给节点 l\n    final Node\u003cE\u003e l = last;\n    // 创建节点，并指定节点前驱为链表尾节点 last，后继引用为空\n    final Node\u003cE\u003e newNode = new Node\u003c\u003e(l, e, null);\n    // 将 last 引用指向新节点\n    last = newNode;\n    // 判断尾节点是否为空\n    // 如果 l 是null 意味着这是第一次添加元素\n    if (l == null)\n        // 如果是第一次添加，将first赋值为新节点，此时链表只有一个元素\n        first = newNode;\n    else\n        // 如果不是第一次添加，将新节点赋值给l（添加前的最后一个元素）的next\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n\n// 在指定元素之前插入元素\nvoid linkBefore(E e, Node\u003cE\u003e succ) {\n    // assert succ != null;断言 succ不为 null\n    // 定义一个节点元素保存 succ 的 prev 引用，也就是它的前一节点信息\n    final Node\u003cE\u003e pred = succ.prev;\n    // 初始化节点，并指明前驱和后继节点\n    final Node\u003cE\u003e newNode = new Node\u003c\u003e(pred, e, succ);\n    // 将 succ 节点前驱引用 prev 指向新节点\n    succ.prev = newNode;\n    // 判断尾节点是否为空，为空表示当前链表还没有节点\n    if (pred == null)\n        first = newNode;\n    else\n        // succ 节点前驱的后继引用指向新节点\n        pred.next = newNode;\n    size++;\n    modCount++;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213675-o5o2fwa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213675-o5o2fwa","updated":"20240201213675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"获取元素"}]},{"ID":"20240201213676-jke1jvd","Type":"NodeParagraph","Properties":{"id":"20240201213676-jke1jvd","updated":"20240201213676"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":"获取元素相关的方法一共有 3 个："}]},{"ID":"20240201213677-pkndsvj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213677-pkndsvj","updated":"20240201213677"},"Children":[{"ID":"20240201213678-taf9azs","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213678-taf9azs","updated":"20240201213678"},"Children":[{"ID":"20240201213679-y0ca94n","Type":"NodeParagraph","Properties":{"id":"20240201213679-y0ca94n","updated":"20240201213679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getFirst()"},{"Type":"NodeText","Data":"：获取链表的第一个元素。"}]}]},{"ID":"20240201213680-mg7tu20","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213680-mg7tu20","updated":"20240201213680"},"Children":[{"ID":"20240201213681-xeelvce","Type":"NodeParagraph","Properties":{"id":"20240201213681-xeelvce","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getLast()"},{"Type":"NodeText","Data":"：获取链表的最后一个元素。"}]}]},{"ID":"20240201213682-kx13myi","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213682-kx13myi","updated":"20240201213682"},"Children":[{"ID":"20240201213683-9twgm75","Type":"NodeParagraph","Properties":{"id":"20240201213683-9twgm75","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get(int index)"},{"Type":"NodeText","Data":"：获取链表指定位置的元素。"}]}]}]},{"ID":"20240201213684-azhbs7n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213684-azhbs7n","updated":"20240201213684"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 获取链表的第一个元素\npublic E getFirst() {\n    final Node\u003cE\u003e f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return f.item;\n}\n\n// 获取链表的最后一个元素\npublic E getLast() {\n    final Node\u003cE\u003e l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return l.item;\n}\n\n// 获取链表指定位置的元素\npublic E get(int index) {\n  // 下标越界检查，如果越界就抛异常\n  checkElementIndex(index);\n  // 返回链表中对应下标的元素\n  return node(index).item;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213685-19f1kbt","Type":"NodeParagraph","Properties":{"id":"20240201213685-19f1kbt","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"这里的核心在于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"node(int index)"},{"Type":"NodeText","Data":" 这个方法："}]},{"ID":"20240201213686-63rn7m1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213686-63rn7m1","updated":"20240201213686"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 返回指定下标的非空节点\nNode\u003cE\u003e node(int index) {\n    // 断言下标未越界\n    // assert isElementIndex(index);\n    // 如果index小于size的二分之一  从前开始查找（向后查找）  反之向前查找\n    if (index \u003c (size \u003e\u003e 1)) {\n        Node\u003cE\u003e x = first;\n        // 遍历，循环向后查找，直至 i == index\n        for (int i = 0; i \u003c index; i++)\n            x = x.next;\n        return x;\n    } else {\n        Node\u003cE\u003e x = last;\n        for (int i = size - 1; i \u003e index; i--)\n            x = x.prev;\n        return x;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213687-22cbd7q","Type":"NodeParagraph","Properties":{"id":"20240201213687-22cbd7q","updated":"20240201213687"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get(int index)"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(int index)"},{"Type":"NodeText","Data":" 等方法内部都调用了该方法来获取对应的节点。"}]},{"ID":"20240201213688-akc7evg","Type":"NodeParagraph","Properties":{"id":"20240201213688-akc7evg","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"从这个方法的源码可以看出，该方法通过比较索引值与链表 size 的一半大小来确定从链表头还是尾开始遍历。如果索引值小于 size 的一半，就从链表头开始遍历，反之从链表尾开始遍历。这样可以在较短的时间内找到目标节点，充分利用了双向链表的特性来提高效率。"}]},{"ID":"20240201213689-2b11027","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213689-2b11027","updated":"20240201213689"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"删除元素"}]},{"ID":"20240201213690-kuifp3j","Type":"NodeParagraph","Properties":{"id":"20240201213690-kuifp3j","updated":"20240201213690"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":"删除元素相关的方法一共有 5 个："}]},{"ID":"20240201213691-tmphdvx","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213691-tmphdvx","updated":"20240201213691"},"Children":[{"ID":"20240201213692-9tt8hb2","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213692-9tt8hb2","updated":"20240201213692"},"Children":[{"ID":"20240201213693-3m61b5m","Type":"NodeParagraph","Properties":{"id":"20240201213693-3m61b5m","updated":"20240201213693"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"removeFirst()"},{"Type":"NodeText","Data":"：删除并返回链表的第一个元素。"}]}]},{"ID":"20240201213694-55sek16","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213694-55sek16","updated":"20240201213694"},"Children":[{"ID":"20240201213695-aaap5xs","Type":"NodeParagraph","Properties":{"id":"20240201213695-aaap5xs","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"removeLast()"},{"Type":"NodeText","Data":"：删除并返回链表的最后一个元素。"}]}]},{"ID":"20240201213696-8l096fd","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213696-8l096fd","updated":"20240201213696"},"Children":[{"ID":"20240201213697-qsak522","Type":"NodeParagraph","Properties":{"id":"20240201213697-qsak522","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(E e)"},{"Type":"NodeText","Data":"：删除链表中首次出现的指定元素，如果不存在该元素则返回 false。"}]}]},{"ID":"20240201213698-mx1qksx","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213698-mx1qksx","updated":"20240201213698"},"Children":[{"ID":"20240201213699-uo1ld0b","Type":"NodeParagraph","Properties":{"id":"20240201213699-uo1ld0b","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(int index)"},{"Type":"NodeText","Data":"：删除指定索引处的元素，并返回该元素的值。"}]}]},{"ID":"20240201213700-qtyhp38","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213700-qtyhp38","updated":"20240201213700"},"Children":[{"ID":"20240201213701-r483fnt","Type":"NodeParagraph","Properties":{"id":"20240201213701-r483fnt","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"void clear()"},{"Type":"NodeText","Data":"：移除此链表中的所有元素。"}]}]}]},{"ID":"20240201213702-zu23ozd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213702-zu23ozd","updated":"20240201213702"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 删除并返回链表的第一个元素\npublic E removeFirst() {\n    final Node\u003cE\u003e f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return unlinkFirst(f);\n}\n\n// 删除并返回链表的最后一个元素\npublic E removeLast() {\n    final Node\u003cE\u003e l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return unlinkLast(l);\n}\n\n// 删除链表中首次出现的指定元素，如果不存在该元素则返回 fals\npublic boolean remove(Object o) {\n    // 如果指定元素为 null，遍历链表找到第一个为 null 的元素进行删除\n    if (o == null) {\n        for (Node\u003cE\u003e x = first; x != null; x = x.next) {\n            if (x.item == null) {\n                unlink(x);\n                return true;\n            }\n        }\n    } else {\n        // 如果不为 null ,遍历链表找到要删除的节点\n        for (Node\u003cE\u003e x = first; x != null; x = x.next) {\n            if (o.equals(x.item)) {\n                unlink(x);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// 删除链表指定位置的元素\npublic E remove(int index) {\n    // 下标越界检查，如果越界就抛异常\n    checkElementIndex(index);\n    return unlink(node(index));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213703-nyvucu2","Type":"NodeParagraph","Properties":{"id":"20240201213703-nyvucu2","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"这里的核心在于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"unlink(Node\u0026lt;E\u0026gt; x)"},{"Type":"NodeText","Data":" 这个方法："}]},{"ID":"20240201213704-x5cur7r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213704-x5cur7r","updated":"20240201213704"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"E unlink(Node\u003cE\u003e x) {\n    // 断言 x 不为 null\n    // assert x != null;\n    // 获取当前节点（也就是待删除节点）的元素\n    final E element = x.item;\n    // 获取当前节点的下一个节点\n    final Node\u003cE\u003e next = x.next;\n    // 获取当前节点的前一个节点\n    final Node\u003cE\u003e prev = x.prev;\n\n    // 如果前一个节点为空，则说明当前节点是头节点\n    if (prev == null) {\n        // 直接让链表头指向当前节点的下一个节点\n        first = next;\n    } else { // 如果前一个节点不为空\n        // 将前一个节点的 next 指针指向当前节点的下一个节点\n        prev.next = next;\n        // 将当前节点的 prev 指针置为 null，，方便 GC 回收\n        x.prev = null;\n    }\n\n    // 如果下一个节点为空，则说明当前节点是尾节点\n    if (next == null) {\n        // 直接让链表尾指向当前节点的前一个节点\n        last = prev;\n    } else { // 如果下一个节点不为空\n        // 将下一个节点的 prev 指针指向当前节点的前一个节点\n        next.prev = prev;\n        // 将当前节点的 next 指针置为 null，方便 GC 回收\n        x.next = null;\n    }\n\n    // 将当前节点元素置为 null，方便 GC 回收\n    x.item = null;\n    size--;\n    modCount++;\n    return element;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213705-7aayzy2","Type":"NodeParagraph","Properties":{"id":"20240201213705-7aayzy2","updated":"20240201213705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"unlink()"},{"Type":"NodeText","Data":" 方法的逻辑如下："}]},{"ID":"20240201213706-jhtdcu0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213706-jhtdcu0","updated":"20240201213706"},"Children":[{"ID":"20240201213707-owi5z97","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213707-owi5z97","updated":"20240201213707"},"Children":[{"ID":"20240201213708-hemasuj","Type":"NodeParagraph","Properties":{"id":"20240201213708-hemasuj","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"首先获取待删除节点 x 的前驱和后继节点；"}]}]},{"ID":"20240201213709-6irv6q9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213709-6irv6q9","updated":"20240201213709"},"Children":[{"ID":"20240201213710-95zlf93","Type":"NodeParagraph","Properties":{"id":"20240201213710-95zlf93","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"判断待删除节点是否为头节点或尾节点："}]},{"ID":"20240201213711-afxmh4n","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213711-afxmh4n","updated":"20240201213711"},"Children":[{"ID":"20240201213712-lheaa7e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-lheaa7e","updated":"20240201213712"},"Children":[{"ID":"20240201213713-lwa9vil","Type":"NodeParagraph","Properties":{"id":"20240201213713-lwa9vil","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"如果 x 是头节点，则将 first 指向 x 的后继节点 next"}]}]},{"ID":"20240201213714-p6p1xlc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213714-p6p1xlc","updated":"20240201213714"},"Children":[{"ID":"20240201213715-1z7sjiz","Type":"NodeParagraph","Properties":{"id":"20240201213715-1z7sjiz","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"如果 x 是尾节点，则将 last 指向 x 的前驱节点 prev"}]}]},{"ID":"20240201213716-4gnuam4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213716-4gnuam4","updated":"20240201213716"},"Children":[{"ID":"20240201213717-j0d09cm","Type":"NodeParagraph","Properties":{"id":"20240201213717-j0d09cm","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"如果 x 不是头节点也不是尾节点，执行下一步操作"}]}]}]}]},{"ID":"20240201213718-hxif0u3","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213718-hxif0u3","updated":"20240201213718"},"Children":[{"ID":"20240201213719-0peduln","Type":"NodeParagraph","Properties":{"id":"20240201213719-0peduln","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"将待删除节点 x 的前驱的后继指向待删除节点的后继 next，断开 x 和 x.prev 之间的链接；"}]}]},{"ID":"20240201213720-24rbtk3","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213720-24rbtk3","updated":"20240201213720"},"Children":[{"ID":"20240201213721-fx9e4pm","Type":"NodeParagraph","Properties":{"id":"20240201213721-fx9e4pm","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"将待删除节点 x 的后继的前驱指向待删除节点的前驱 prev，断开 x 和 x.next 之间的链接；"}]}]},{"ID":"20240201213722-i6i1kc2","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213722-i6i1kc2","updated":"20240201213722"},"Children":[{"ID":"20240201213723-w0wxlsl","Type":"NodeParagraph","Properties":{"id":"20240201213723-w0wxlsl","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"将待删除节点 x 的元素置空，修改链表长度。"}]}]}]},{"ID":"20240201213724-bdscwcb","Type":"NodeParagraph","Properties":{"id":"20240201213724-bdscwcb","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"可以参考下图理解（图源："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.tianxiaobo.com/2018/01/31/LinkedList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK-1-8/","TextMarkTextContent":"LinkedList 源码分析(JDK 1.8)"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213725-qz4ti95","Type":"NodeParagraph","Properties":{"id":"20240201213725-qz4ti95","updated":"20240201213725"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"unlink 方法逻辑","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/linkedlist-unlink.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213726-276blpu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213726-276blpu","updated":"20240201213726"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"遍历链表"}]},{"ID":"20240201213727-nwjmpgz","Type":"NodeParagraph","Properties":{"id":"20240201213727-nwjmpgz","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"推荐使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for-each"},{"Type":"NodeText","Data":" 循环来遍历 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 中的元素， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for-each"},{"Type":"NodeText","Data":" 循环最终会转换成迭代器形式。"}]},{"ID":"20240201213728-riwt9gd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213728-riwt9gd","updated":"20240201213728"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"LinkedList\u003cString\u003e list = new LinkedList\u003c\u003e();\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"pear\");\n\nfor (String fruit : list) {\n    System.out.println(fruit);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213729-af6uhpk","Type":"NodeParagraph","Properties":{"id":"20240201213729-af6uhpk","updated":"20240201213729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedList"},{"Type":"NodeText","Data":" 的遍历的核心就是它的迭代器的实现。"}]},{"ID":"20240201213730-3ifw4oe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213730-3ifw4oe","updated":"20240201213730"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 双向迭代器\nprivate class ListItr implements ListIterator\u003cE\u003e {\n    // 表示上一次调用 next() 或 previous() 方法时经过的节点；\n    private Node\u003cE\u003e lastReturned;\n    // 表示下一个要遍历的节点；\n    private Node\u003cE\u003e next;\n    // 表示下一个要遍历的节点的下标，也就是当前节点的后继节点的下标；\n    private int nextIndex;\n    // 表示当前遍历期望的修改计数值，用于和 LinkedList 的 modCount 比较，判断链表是否被其他线程修改过。\n    private int expectedModCount = modCount;\n    …………\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213731-l7atu82","Type":"NodeParagraph","Properties":{"id":"20240201213731-l7atu82","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"下面我们对迭代器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ListItr"},{"Type":"NodeText","Data":" 中的核心方法进行详细介绍。"}]},{"ID":"20240201213732-cy21iyq","Type":"NodeParagraph","Properties":{"id":"20240201213732-cy21iyq","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"我们先来看下从头到尾方向的迭代："}]},{"ID":"20240201213733-dz9twbp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213733-dz9twbp","updated":"20240201213733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 判断还有没有下一个节点\npublic boolean hasNext() {\n    // 判断下一个节点的下标是否小于链表的大小，如果是则表示还有下一个元素可以遍历\n    return nextIndex \u003c size;\n}\n// 获取下一个节点\npublic E next() {\n    // 检查在迭代过程中链表是否被修改过\n    checkForComodification();\n    // 判断是否还有下一个节点可以遍历，如果没有则抛出 NoSuchElementException 异常\n    if (!hasNext())\n        throw new NoSuchElementException();\n    // 将 lastReturned 指向当前节点\n    lastReturned = next;\n    // 将 next 指向下一个节点\n    next = next.next;\n    nextIndex++;\n    return lastReturned.item;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213734-83rhcm2","Type":"NodeParagraph","Properties":{"id":"20240201213734-83rhcm2","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"再来看一下从尾到头方向的迭代："}]},{"ID":"20240201213735-v1zrvus","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213735-v1zrvus","updated":"20240201213735"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 判断是否还有前一个节点\npublic boolean hasPrevious() {\n    return nextIndex \u003e 0;\n}\n\n// 获取前一个节点\npublic E previous() {\n    // 检查是否在迭代过程中链表被修改\n    checkForComodification();\n    // 如果没有前一个节点，则抛出异常\n    if (!hasPrevious())\n        throw new NoSuchElementException();\n    // 将 lastReturned 和 next 指针指向上一个节点\n    lastReturned = next = (next == null) ? last : next.prev;\n    nextIndex--;\n    return lastReturned.item;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213736-m9772k0","Type":"NodeParagraph","Properties":{"id":"20240201213736-m9772k0","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"如果需要删除或插入元素，也可以使用迭代器进行操作。"}]},{"ID":"20240201213737-auv4l1v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213737-auv4l1v","updated":"20240201213737"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"LinkedList\u003cString\u003e list = new LinkedList\u003c\u003e();\nlist.add(\"apple\");\nlist.add(null);\nlist.add(\"banana\");\n\n//  Collection 接口的 removeIf 方法底层依然是基于迭代器\nlist.removeIf(Objects::isNull);\n\nfor (String fruit : list) {\n    System.out.println(fruit);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213738-t1dgxk6","Type":"NodeParagraph","Properties":{"id":"20240201213738-t1dgxk6","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"迭代器对应的移除元素的方法如下："}]},{"ID":"20240201213739-zk4lsgq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213739-zk4lsgq","updated":"20240201213739"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 从列表中删除上次被返回的元素\npublic void remove() {\n    // 检查是否在迭代过程中链表被修改\n    checkForComodification();\n    // 如果上次返回的节点为空，则抛出异常\n    if (lastReturned == null)\n        throw new IllegalStateException();\n\n    // 获取当前节点的下一个节点\n    Node\u003cE\u003e lastNext = lastReturned.next;\n    // 从链表中删除上次返回的节点\n    unlink(lastReturned);\n    // 修改指针\n    if (next == lastReturned)\n        next = lastNext;\n    else\n        nextIndex--;\n    // 将上次返回的节点引用置为 null，方便 GC 回收\n    lastReturned = null;\n    expectedModCount++;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213740-quav3bf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213740-quav3bf","updated":"20240201213740"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"LinkedList 常用方法测试"}]},{"ID":"20240201213741-lhscb1q","Type":"NodeParagraph","Properties":{"id":"20240201213741-lhscb1q","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"代码："}]},{"ID":"20240201213742-wjhr7qd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213742-wjhr7qd","updated":"20240201213742"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建 LinkedList 对象\nLinkedList\u003cString\u003e list = new LinkedList\u003c\u003e();\n\n// 添加元素到链表末尾\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"pear\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 在指定位置插入元素\nlist.add(1, \"orange\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 获取指定位置的元素\nString fruit = list.get(2);\nSystem.out.println(\"索引为 2 的元素：\" + fruit);\n\n// 修改指定位置的元素\nlist.set(3, \"grape\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 删除指定位置的元素\nlist.remove(0);\nSystem.out.println(\"链表内容：\" + list);\n\n// 删除第一个出现的指定元素\nlist.remove(\"banana\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 获取链表的长度\nint size = list.size();\nSystem.out.println(\"链表长度：\" + size);\n\n// 清空链表\nlist.clear();\nSystem.out.println(\"清空后的链表：\" + list);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213743-vtgqipg","Type":"NodeParagraph","Properties":{"id":"20240201213743-vtgqipg","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213744-rhasysw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213744-rhasysw","updated":"20240201213744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"索引为 2 的元素：banana\n链表内容：[apple, orange, banana, grape]\n链表内容：[orange, banana, grape]\n链表内容：[orange, grape]\n链表长度：2\n清空后的链表：[]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213745-7154rvi","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-7154rvi","updated":"20240201213745"}}]}