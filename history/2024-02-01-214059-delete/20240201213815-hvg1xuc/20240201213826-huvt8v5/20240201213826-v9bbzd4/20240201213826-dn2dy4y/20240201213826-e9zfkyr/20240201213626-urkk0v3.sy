{"ID":"20240201213626-urkk0v3","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213626-urkk0v3","title":"copyonwritearraylist-source-code","updated":"20240201213626"},"Children":[{"ID":"20240201213627-glbxf4s","Type":"NodeThematicBreak","Properties":{"id":"20240201213627-glbxf4s","updated":"20240201213627"}},{"ID":"20240201213628-9bjdsom","Type":"NodeParagraph","Properties":{"id":"20240201213628-9bjdsom","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"title: CopyOnWriteArrayList 源码分析"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213629-ptz3rkt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-ptz3rkt","updated":"20240201213629"},"Children":[{"ID":"20240201213630-396oy8m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-396oy8m","updated":"20240201213630"},"Children":[{"ID":"20240201213631-1890pg2","Type":"NodeParagraph","Properties":{"id":"20240201213631-1890pg2","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"Java集合"}]}]}]},{"ID":"20240201213632-33nrdta","Type":"NodeThematicBreak","Properties":{"id":"20240201213632-33nrdta","updated":"20240201213632"}},{"ID":"20240201213633-e6m3cjk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213633-e6m3cjk","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"CopyOnWriteArrayList 简介"}]},{"ID":"20240201213634-3jv2wza","Type":"NodeParagraph","Properties":{"id":"20240201213634-3jv2wza","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"在 JDK1.5 之前，如果想要使用并发安全的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 只能选择 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Vector"},{"Type":"NodeText","Data":"。而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Vector"},{"Type":"NodeText","Data":" 是一种老旧的集合，已经被淘汰。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Vector"},{"Type":"NodeText","Data":" 对于增删改查等方法基本都加了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":"，这种方式虽然能够保证同步，但这相当于对整个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Vector"},{"Type":"NodeText","Data":" 加上了一把大锁，使得每个方法执行的时候都要去获得锁，导致性能非常低下。"}]},{"ID":"20240201213635-e5q86ww","Type":"NodeParagraph","Properties":{"id":"20240201213635-e5q86ww","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"JDK1.5 引入了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Java.util.concurrent"},{"Type":"NodeText","Data":"（JUC）包，其中提供了很多线程安全且并发性能良好的容器，其中唯一的线程安全 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 实现就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 。关于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent"},{"Type":"NodeText","Data":" 包下常见并发容器的总结，可以看我写的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/concurrent/java-concurrent-collections.html","TextMarkTextContent":"Java 常见并发容器总结"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213636-tigr2z6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213636-tigr2z6","updated":"20240201213636"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CopyOnWriteArrayList 到底有什么厉害之处？"}]},{"ID":"20240201213637-78aqbqa","Type":"NodeParagraph","Properties":{"id":"20240201213637-78aqbqa","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"对于大部分业务场景来说，读取操作往往是远大于写入操作的。由于读取操作不会对原有数据进行修改，因此，对于每次读取都进行加锁其实是一种资源浪费。相比之下，我们应该允许多个线程同时访问 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 的内部数据，毕竟对于读取操作来说是安全的。"}]},{"ID":"20240201213638-vcvmjra","Type":"NodeParagraph","Properties":{"id":"20240201213638-vcvmjra","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"这种思路与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantReadWriteLock"},{"Type":"NodeText","Data":" 读写锁的设计思想非常类似，即读读不互斥、读写互斥、写写互斥（只有读读不互斥）。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 更进一步地实现了这一思想。为了将读操作性能发挥到极致，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 中的读取操作是完全无需加锁的。更加厉害的是，写入操作也不会阻塞读取操作，只有写写才会互斥。这样一来，读操作的性能就可以大幅度提升。"}]},{"ID":"20240201213639-8a0ql0l","Type":"NodeParagraph","Properties":{"id":"20240201213639-8a0ql0l","updated":"20240201213639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 线程安全的核心在于其采用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写时复制（Copy-On-Write）"},{"Type":"NodeText","Data":" 的策略，从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的名字就能看出了。"}]},{"ID":"20240201213640-th8jpak","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213640-th8jpak","updated":"20240201213640"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Copy-On-Write 的思想是什么？"}]},{"ID":"20240201213641-0y4x87z","Type":"NodeParagraph","Properties":{"id":"20240201213641-0y4x87z","updated":"20240201213641"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"名字中的“Copy-On-Write”即写时复制，简称 COW。"}]},{"ID":"20240201213642-7l66grr","Type":"NodeParagraph","Properties":{"id":"20240201213642-7l66grr","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"下面是维基百科对 Copy-On-Write 的介绍，介绍的挺不错："}]},{"ID":"20240201213643-i3sqqij","Type":"NodeBlockquote","Properties":{"id":"20240201213643-i3sqqij","updated":"20240201213643"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213644-uof4yy9","Type":"NodeParagraph","Properties":{"id":"20240201213644-uof4yy9","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"写入时复制（英语：Copy-on-write，简称 COW）是一种计算机程序设计领域的优化策略。其核心思想是，如果有多个调用者（callers）同时请求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的。此作法主要的优点是如果调用者没有修改该资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。"}]}]},{"ID":"20240201213645-8cuemdn","Type":"NodeParagraph","Properties":{"id":"20240201213645-8cuemdn","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"这里再以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"为例介绍：当需要修改（ "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove"},{"Type":"NodeText","Data":" 等操作） "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的内容时，不会直接修改原数组，而是会先创建底层数组的副本，对副本数组进行修改，修改完之后再将修改后的数组赋值回去，这样就可以保证写操作不会影响读操作了。"}]},{"ID":"20240201213646-sidzhwr","Type":"NodeParagraph","Properties":{"id":"20240201213646-sidzhwr","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"可以看出，写时复制机制非常适合读多写少的并发场景，能够极大地提高系统的并发性能。"}]},{"ID":"20240201213647-clbznkv","Type":"NodeParagraph","Properties":{"id":"20240201213647-clbznkv","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"不过，写时复制机制并不是银弹，其依然存在一些缺点，下面列举几点："}]},{"ID":"20240201213648-ziefx0h","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213648-ziefx0h","updated":"20240201213648"},"Children":[{"ID":"20240201213649-fzbjgcn","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213649-fzbjgcn","updated":"20240201213649"},"Children":[{"ID":"20240201213650-kt6lf19","Type":"NodeParagraph","Properties":{"id":"20240201213650-kt6lf19","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"内存占用：每次写操作都需要复制一份原始数据，会占用额外的内存空间，在数据量比较大的情况下，可能会导致内存资源不足。"}]}]},{"ID":"20240201213651-1nsplz9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213651-1nsplz9","updated":"20240201213651"},"Children":[{"ID":"20240201213652-z1a3l5s","Type":"NodeParagraph","Properties":{"id":"20240201213652-z1a3l5s","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"写操作开销：每一次写操作都需要复制一份原始数据，然后再进行修改和替换，所以写操作的开销相对较大，在写入比较频繁的场景下，性能可能会受到影响。"}]}]},{"ID":"20240201213653-cw8v8x9","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213653-cw8v8x9","updated":"20240201213653"},"Children":[{"ID":"20240201213654-sy32djg","Type":"NodeParagraph","Properties":{"id":"20240201213654-sy32djg","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"数据一致性问题：修改操作不会立即反映到最终结果中，还需要等待复制完成，这可能会导致一定的数据一致性问题。"}]}]},{"ID":"20240201213655-wd5r73z","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213655-wd5r73z","updated":"20240201213655"},"Children":[{"ID":"20240201213656-58l7quq","Type":"NodeParagraph","Properties":{"id":"20240201213656-58l7quq","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213657-1g49sol","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213657-1g49sol","updated":"20240201213657"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"CopyOnWriteArrayList 源码分析"}]},{"ID":"20240201213658-20sn14j","Type":"NodeParagraph","Properties":{"id":"20240201213658-20sn14j","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"这里以 JDK1.8 为例，分析一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的底层核心源码。"}]},{"ID":"20240201213659-w1qcgsz","Type":"NodeParagraph","Properties":{"id":"20240201213659-w1qcgsz","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的类定义如下："}]},{"ID":"20240201213660-9dtqobq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213660-9dtqobq","updated":"20240201213660"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class CopyOnWriteArrayList\u003cE\u003e\nextends Object\nimplements List\u003cE\u003e, RandomAccess, Cloneable, Serializable\n{\n  //...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213661-rhum430","Type":"NodeParagraph","Properties":{"id":"20240201213661-rhum430","updated":"20240201213661"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 实现了以下接口："}]},{"ID":"20240201213662-et1cnch","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-et1cnch","updated":"20240201213662"},"Children":[{"ID":"20240201213663-f5bi2sl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-f5bi2sl","updated":"20240201213663"},"Children":[{"ID":"20240201213664-wk91jps","Type":"NodeParagraph","Properties":{"id":"20240201213664-wk91jps","updated":"20240201213664"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" : 表明它是一个列表，支持添加、删除、查找等操作，并且可以通过下标进行访问。"}]}]},{"ID":"20240201213665-uqrfyvp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213665-uqrfyvp","updated":"20240201213665"},"Children":[{"ID":"20240201213666-wu5tln1","Type":"NodeParagraph","Properties":{"id":"20240201213666-wu5tln1","updated":"20240201213666"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RandomAccess"},{"Type":"NodeText","Data":" ：这是一个标志接口，表明实现这个接口的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 集合是支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快速随机访问"},{"Type":"NodeText","Data":" 的。"}]}]},{"ID":"20240201213667-ldpv3on","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-ldpv3on","updated":"20240201213667"},"Children":[{"ID":"20240201213668-wch57sd","Type":"NodeParagraph","Properties":{"id":"20240201213668-wch57sd","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Cloneable"},{"Type":"NodeText","Data":" ：表明它具有拷贝能力，可以进行深拷贝或浅拷贝操作。"}]}]},{"ID":"20240201213669-vqzpm6c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213669-vqzpm6c","updated":"20240201213669"},"Children":[{"ID":"20240201213670-yk7810z","Type":"NodeParagraph","Properties":{"id":"20240201213670-yk7810z","updated":"20240201213670"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Serializable"},{"Type":"NodeText","Data":" : 表明它可以进行序列化操作，也就是可以将对象转换为字节流进行持久化存储或网络传输，非常方便。"}]}]}]},{"ID":"20240201213671-7isiaez","Type":"NodeParagraph","Properties":{"id":"20240201213671-7isiaez","updated":"20240201213671"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"CopyOnWriteArrayList 类图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/collection/copyonwritearraylist-class-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213672-b7byl0h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213672-b7byl0h","updated":"20240201213672"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"初始化"}]},{"ID":"20240201213673-ywsm2d0","Type":"NodeParagraph","Properties":{"id":"20240201213673-ywsm2d0","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 中有一个无参构造函数和两个有参构造函数。"}]},{"ID":"20240201213674-yvnypsk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213674-yvnypsk","updated":"20240201213674"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建一个空的 CopyOnWriteArrayList\npublic CopyOnWriteArrayList() {\n    setArray(new Object[0]);\n}\n\n// 按照集合的迭代器返回的顺序创建一个包含指定集合元素的 CopyOnWriteArrayList\npublic CopyOnWriteArrayList(Collection\u003c? extends E\u003e c) {\n    Object[] elements;\n    if (c.getClass() == CopyOnWriteArrayList.class)\n        elements = ((CopyOnWriteArrayList\u003c?\u003e)c).getArray();\n    else {\n        elements = c.toArray();\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elements.getClass() != Object[].class)\n            elements = Arrays.copyOf(elements, elements.length, Object[].class);\n    }\n    setArray(elements);\n}\n\n// 创建一个包含指定数组的副本的列表\npublic CopyOnWriteArrayList(E[] toCopyIn) {\n    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213675-hdfb970","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213675-hdfb970","updated":"20240201213675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"插入元素"}]},{"ID":"20240201213676-ufgj819","Type":"NodeParagraph","Properties":{"id":"20240201213676-ufgj819","updated":"20240201213676"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add()"},{"Type":"NodeText","Data":"方法有三个版本："}]},{"ID":"20240201213677-z6ipj6w","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213677-z6ipj6w","updated":"20240201213677"},"Children":[{"ID":"20240201213678-ztkpvtv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213678-ztkpvtv","updated":"20240201213678"},"Children":[{"ID":"20240201213679-tawxpgj","Type":"NodeParagraph","Properties":{"id":"20240201213679-tawxpgj","updated":"20240201213679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(E e)"},{"Type":"NodeText","Data":"：在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的尾部插入元素。"}]}]},{"ID":"20240201213680-5fzuo5i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213680-5fzuo5i","updated":"20240201213680"},"Children":[{"ID":"20240201213681-arim79m","Type":"NodeParagraph","Properties":{"id":"20240201213681-arim79m","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(int index, E element)"},{"Type":"NodeText","Data":"：在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的指定位置插入元素。"}]}]},{"ID":"20240201213682-tfogj8j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213682-tfogj8j","updated":"20240201213682"},"Children":[{"ID":"20240201213683-x17uwu9","Type":"NodeParagraph","Properties":{"id":"20240201213683-x17uwu9","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"addIfAbsent(E e)"},{"Type":"NodeText","Data":"：如果指定元素不存在，那么添加该元素。如果成功添加元素则返回 true。"}]}]}]},{"ID":"20240201213684-vhsrk3m","Type":"NodeParagraph","Properties":{"id":"20240201213684-vhsrk3m","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"这里以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add(E e)"},{"Type":"NodeText","Data":"为例进行介绍："}]},{"ID":"20240201213685-5t6u2ua","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213685-5t6u2ua","updated":"20240201213685"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 插入元素到 CopyOnWriteArrayList 的尾部\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    // 加锁\n    lock.lock();\n    try {\n        // 获取原来的数组\n        Object[] elements = getArray();\n        // 原来数组的长度\n        int len = elements.length;\n        // 创建一个长度+1的新数组，并将原来数组的元素复制给新数组\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        // 元素放在新数组末尾\n        newElements[len] = e;\n        // array指向新数组\n        setArray(newElements);\n        return true;\n    } finally {\n        // 解锁\n        lock.unlock();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213686-98n2axw","Type":"NodeParagraph","Properties":{"id":"20240201213686-98n2axw","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"从上面的源码可以看出："}]},{"ID":"20240201213687-f5ltigm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213687-f5ltigm","updated":"20240201213687"},"Children":[{"ID":"20240201213688-xcmhfdb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213688-xcmhfdb","updated":"20240201213688"},"Children":[{"ID":"20240201213689-wi8pmvq","Type":"NodeParagraph","Properties":{"id":"20240201213689-wi8pmvq","updated":"20240201213689"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":"方法内部用到了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 加锁，保证了同步，避免了多线程写的时候会复制出多个副本出来。锁被修饰保证了锁的内存地址肯定不会被修改，并且，释放锁的逻辑放在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"finally"},{"Type":"NodeText","Data":" 中，可以保证锁能被释放。"}]}]},{"ID":"20240201213690-gblsi2m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-gblsi2m","updated":"20240201213690"},"Children":[{"ID":"20240201213691-tk13i9a","Type":"NodeParagraph","Properties":{"id":"20240201213691-tk13i9a","updated":"20240201213691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 通过复制底层数组的方式实现写操作，即先创建一个新的数组来容纳新添加的元素，然后在新数组中进行写操作，最后将新数组赋值给底层数组的引用，替换掉旧的数组。这也就证明了我们前面说的："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 线程安全的核心在于其采用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写时复制（Copy-On-Write）"},{"Type":"NodeText","Data":" 的策略。"}]}]},{"ID":"20240201213692-uwggcg0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-uwggcg0","updated":"20240201213692"},"Children":[{"ID":"20240201213693-xtemrpw","Type":"NodeParagraph","Properties":{"id":"20240201213693-xtemrpw","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"每次写操作都需要通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arrays.copyOf"},{"Type":"NodeText","Data":" 复制底层数组，时间复杂度是 O(n) 的，且会占用额外的内存空间。因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 适用于读多写少的场景，在写操作不频繁且内存资源充足的情况下，可以提升系统的性能表现。"}]}]},{"ID":"20240201213694-jql708l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-jql708l","updated":"20240201213694"},"Children":[{"ID":"20240201213695-3a148ji","Type":"NodeParagraph","Properties":{"id":"20240201213695-3a148ji","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 中并没有类似于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"grow()"},{"Type":"NodeText","Data":" 方法扩容的操作。"}]}]}]},{"ID":"20240201213696-ixoltft","Type":"NodeBlockquote","Properties":{"id":"20240201213696-ixoltft","updated":"20240201213696"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213697-herbnhu","Type":"NodeParagraph","Properties":{"id":"20240201213697-herbnhu","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Arrays.copyOf"},{"Type":"NodeText","Data":" 方法的时间复杂度是 O(n)，其中 n 表示需要复制的数组长度。因为这个方法的实现原理是先创建一个新的数组，然后将源数组中的数据复制到新数组中，最后返回新数组。这个方法会复制整个数组，因此其时间复杂度与数组长度成正比，即 O(n)。值得注意的是，由于底层调用了系统级别的拷贝指令，因此在实际应用中这个方法的性能表现比较优秀，但是也需要注意控制复制的数据量，避免出现内存占用过高的情况。"}]}]},{"ID":"20240201213698-m6931u2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213698-m6931u2","updated":"20240201213698"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"读取元素"}]},{"ID":"20240201213699-4hn1ghw","Type":"NodeParagraph","Properties":{"id":"20240201213699-4hn1ghw","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":" 的读取操作是基于内部数组 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"array"},{"Type":"NodeText","Data":" 并没有发生实际的修改，因此在读取操作时不需要进行同步控制和锁操作，可以保证数据的安全性。这种机制下，多个线程可以同时读取列表中的元素。"}]},{"ID":"20240201213700-76v6m50","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213700-76v6m50","updated":"20240201213700"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 底层数组，只能通过getArray和setArray方法访问\nprivate transient volatile Object[] array;\n\npublic E get(int index) {\n    return get(getArray(), index);\n}\n\nfinal Object[] getArray() {\n    return array;\n}\n\nprivate E get(Object[] a, int index) {\n    return (E) a[index];\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213701-cv7cn0k","Type":"NodeParagraph","Properties":{"id":"20240201213701-cv7cn0k","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"不过，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get"},{"Type":"NodeText","Data":"方法是弱一致性的，在某些情况下可能读到旧的元素值。"}]},{"ID":"20240201213702-z6bhcco","Type":"NodeParagraph","Properties":{"id":"20240201213702-z6bhcco","updated":"20240201213702"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get(int index)"},{"Type":"NodeText","Data":"方法是分两步进行的："}]},{"ID":"20240201213703-k8d5d0f","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213703-k8d5d0f","updated":"20240201213703"},"Children":[{"ID":"20240201213704-94nk4pf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213704-94nk4pf","updated":"20240201213704"},"Children":[{"ID":"20240201213705-sxxwl29","Type":"NodeParagraph","Properties":{"id":"20240201213705-sxxwl29","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getArray()"},{"Type":"NodeText","Data":"获取当前数组的引用；"}]}]},{"ID":"20240201213706-k3wub5x","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213706-k3wub5x","updated":"20240201213706"},"Children":[{"ID":"20240201213707-qmlh8n6","Type":"NodeParagraph","Properties":{"id":"20240201213707-qmlh8n6","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"直接从数组中获取下标为 index 的元素。"}]}]}]},{"ID":"20240201213708-qbdrrck","Type":"NodeParagraph","Properties":{"id":"20240201213708-qbdrrck","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"这个过程并没有加锁，所以在并发环境下可能出现如下情况："}]},{"ID":"20240201213709-lejiham","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213709-lejiham","updated":"20240201213709"},"Children":[{"ID":"20240201213710-fw4nrzp","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213710-fw4nrzp","updated":"20240201213710"},"Children":[{"ID":"20240201213711-jo81rw4","Type":"NodeParagraph","Properties":{"id":"20240201213711-jo81rw4","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"线程 1 调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get(int index)"},{"Type":"NodeText","Data":"方法获取值，内部通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getArray()"},{"Type":"NodeText","Data":"方法获取到了 array 属性值；"}]}]},{"ID":"20240201213712-brpadxh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213712-brpadxh","updated":"20240201213712"},"Children":[{"ID":"20240201213713-86e0yev","Type":"NodeParagraph","Properties":{"id":"20240201213713-86e0yev","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"线程 2 调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove"},{"Type":"NodeText","Data":" 等修改方法时，内部通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setArray"},{"Type":"NodeText","Data":"方法修改了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"array"},{"Type":"NodeText","Data":"属性的值；"}]}]},{"ID":"20240201213714-jhk6s7i","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213714-jhk6s7i","updated":"20240201213714"},"Children":[{"ID":"20240201213715-4yfx0xs","Type":"NodeParagraph","Properties":{"id":"20240201213715-4yfx0xs","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"线程 1 还是从旧的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"array"},{"Type":"NodeText","Data":" 数组中取值。"}]}]}]},{"ID":"20240201213716-o0ggizc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213716-o0ggizc","updated":"20240201213716"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"获取列表中元素的个数"}]},{"ID":"20240201213717-cno3nlt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213717-cno3nlt","updated":"20240201213717"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public int size() {\n    return getArray().length;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213718-9gb4yat","Type":"NodeParagraph","Properties":{"id":"20240201213718-9gb4yat","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"array"},{"Type":"NodeText","Data":"数组每次复制都刚好能够容纳下所有元素，并不像"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ArrayList"},{"Type":"NodeText","Data":"那样会预留一定的空间。因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"中并没有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"size"},{"Type":"NodeText","Data":"属性"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"的底层数组的长度就是元素个数，因此"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"size()"},{"Type":"NodeText","Data":"方法只要返回数组长度就可以了。"}]},{"ID":"20240201213719-ic2epav","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213719-ic2epav","updated":"20240201213719"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"删除元素"}]},{"ID":"20240201213720-mklcyib","Type":"NodeParagraph","Properties":{"id":"20240201213720-mklcyib","updated":"20240201213720"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"删除元素相关的方法一共有 4 个："}]},{"ID":"20240201213721-uor6ksv","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213721-uor6ksv","updated":"20240201213721"},"Children":[{"ID":"20240201213722-d03hity","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213722-d03hity","updated":"20240201213722"},"Children":[{"ID":"20240201213723-2f1gxgk","Type":"NodeParagraph","Properties":{"id":"20240201213723-2f1gxgk","updated":"20240201213723"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(int index)"},{"Type":"NodeText","Data":"：移除此列表中指定位置上的元素。将任何后续元素向左移动（从它们的索引中减去 1）。"}]}]},{"ID":"20240201213724-lq8r2wd","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213724-lq8r2wd","updated":"20240201213724"},"Children":[{"ID":"20240201213725-vlwkrcc","Type":"NodeParagraph","Properties":{"id":"20240201213725-vlwkrcc","updated":"20240201213725"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"boolean remove(Object o)"},{"Type":"NodeText","Data":"：删除此列表中首次出现的指定元素，如果不存在该元素则返回 false。"}]}]},{"ID":"20240201213726-52wj9f9","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213726-52wj9f9","updated":"20240201213726"},"Children":[{"ID":"20240201213727-b2iiqkz","Type":"NodeParagraph","Properties":{"id":"20240201213727-b2iiqkz","updated":"20240201213727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"boolean removeAll(Collection\u0026lt;?\u0026gt; c)"},{"Type":"NodeText","Data":"：从此列表中删除指定集合中包含的所有元素。"}]}]},{"ID":"20240201213728-76mns82","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213728-76mns82","updated":"20240201213728"},"Children":[{"ID":"20240201213729-d8safbg","Type":"NodeParagraph","Properties":{"id":"20240201213729-d8safbg","updated":"20240201213729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"void clear()"},{"Type":"NodeText","Data":"：移除此列表中的所有元素。"}]}]}]},{"ID":"20240201213730-b0xbru4","Type":"NodeParagraph","Properties":{"id":"20240201213730-b0xbru4","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"这里以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove(int index)"},{"Type":"NodeText","Data":"为例进行介绍："}]},{"ID":"20240201213731-gqklrei","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213731-gqklrei","updated":"20240201213731"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public E remove(int index) {\n    // 获取可重入锁\n    final ReentrantLock lock = this.lock;\n    // 加锁\n    lock.lock();\n    try {\n         //获取当前array数组\n        Object[] elements = getArray();\n        // 获取当前array长度\n        int len = elements.length;\n        //获取指定索引的元素(旧值)\n        E oldValue = get(elements, index);\n        int numMoved = len - index - 1;\n        // 判断删除的是否是最后一个元素\n        if (numMoved == 0)\n             // 如果删除的是最后一个元素，直接复制该元素前的所有元素到新的数组\n            setArray(Arrays.copyOf(elements, len - 1));\n        else {\n            // 分段复制，将index前的元素和index+1后的元素复制到新数组\n            // 新数组长度为旧数组长度-1\n            Object[] newElements = new Object[len - 1];\n            System.arraycopy(elements, 0, newElements, 0, index);\n            System.arraycopy(elements, index + 1, newElements, index,\n                             numMoved);\n            //将新数组赋值给array引用\n            setArray(newElements);\n        }\n        return oldValue;\n    } finally {\n         // 解锁\n        lock.unlock();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213732-idrpkn4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213732-idrpkn4","updated":"20240201213732"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"判断元素是否存在"}]},{"ID":"20240201213733-ngsahax","Type":"NodeParagraph","Properties":{"id":"20240201213733-ngsahax","updated":"20240201213733"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CopyOnWriteArrayList"},{"Type":"NodeText","Data":"提供了两个用于判断指定元素是否在列表中的方法："}]},{"ID":"20240201213734-lfee997","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-lfee997","updated":"20240201213734"},"Children":[{"ID":"20240201213735-njrsg1y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213735-njrsg1y","updated":"20240201213735"},"Children":[{"ID":"20240201213736-y4eegru","Type":"NodeParagraph","Properties":{"id":"20240201213736-y4eegru","updated":"20240201213736"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"contains(Object o)"},{"Type":"NodeText","Data":"：判断是否包含指定元素。"}]}]},{"ID":"20240201213737-iyeu0mw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-iyeu0mw","updated":"20240201213737"},"Children":[{"ID":"20240201213738-3xf6v6n","Type":"NodeParagraph","Properties":{"id":"20240201213738-3xf6v6n","updated":"20240201213738"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"containsAll(Collection\u0026lt;?\u0026gt; c)"},{"Type":"NodeText","Data":"：判断是否保证指定集合的全部元素。"}]}]}]},{"ID":"20240201213739-n0mil83","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213739-n0mil83","updated":"20240201213739"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 判断是否包含指定元素\npublic boolean contains(Object o) {\n    //获取当前array数组\n    Object[] elements = getArray();\n    //调用index尝试查找指定元素，如果返回值大于等于0，则返回true，否则返回false\n    return indexOf(o, elements, 0, elements.length) \u003e= 0;\n}\n\n// 判断是否保证指定集合的全部元素\npublic boolean containsAll(Collection\u003c?\u003e c) {\n    //获取当前array数组\n    Object[] elements = getArray();\n    //获取数组长度\n    int len = elements.length;\n    //遍历指定集合\n    for (Object e : c) {\n        //循环调用indexOf方法判断，只要有一个没有包含就直接返回false\n        if (indexOf(e, elements, 0, len) \u003c 0)\n            return false;\n    }\n    //最后表示全部包含或者制定集合为空集合，那么返回true\n    return true;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213740-rxmg2zo","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213740-rxmg2zo","updated":"20240201213740"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"CopyOnWriteArrayList 常用方法测试"}]},{"ID":"20240201213741-8yf7jfr","Type":"NodeParagraph","Properties":{"id":"20240201213741-8yf7jfr","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"代码："}]},{"ID":"20240201213742-g6ay3bd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213742-g6ay3bd","updated":"20240201213742"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建一个 CopyOnWriteArrayList 对象\nCopyOnWriteArrayList\u003cString\u003e list = new CopyOnWriteArrayList\u003c\u003e();\n\n// 向列表中添加元素\nlist.add(\"Java\");\nlist.add(\"Python\");\nlist.add(\"C++\");\nSystem.out.println(\"初始列表：\" + list);\n\n// 使用 get 方法获取指定位置的元素\nSystem.out.println(\"列表第二个元素为：\" + list.get(1));\n\n// 使用 remove 方法删除指定元素\nboolean result = list.remove(\"C++\");\nSystem.out.println(\"删除结果：\" + result);\nSystem.out.println(\"列表删除元素后为：\" + list);\n\n// 使用 set 方法更新指定位置的元素\nlist.set(1, \"Golang\");\nSystem.out.println(\"列表更新后为：\" + list);\n\n// 使用 add 方法在指定位置插入元素\nlist.add(0, \"PHP\");\nSystem.out.println(\"列表插入元素后为：\" + list);\n\n// 使用 size 方法获取列表大小\nSystem.out.println(\"列表大小为：\" + list.size());\n\n// 使用 removeAll 方法删除指定集合中所有出现的元素\nresult = list.removeAll(List.of(\"Java\", \"Golang\"));\nSystem.out.println(\"批量删除结果：\" + result);\nSystem.out.println(\"列表批量删除元素后为：\" + list);\n\n// 使用 clear 方法清空列表中所有元素\nlist.clear();\nSystem.out.println(\"列表清空后为：\" + list);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213743-1hj5kxl","Type":"NodeParagraph","Properties":{"id":"20240201213743-1hj5kxl","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20240201213744-2cwqca0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213744-2cwqca0","updated":"20240201213744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"列表更新后为：[Java, Golang]\n列表插入元素后为：[PHP, Java, Golang]\n列表大小为：3\n批量删除结果：true\n列表批量删除元素后为：[PHP]\n列表清空后为：[]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213745-jh3pl84","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-jh3pl84","updated":"20240201213745"}}]}