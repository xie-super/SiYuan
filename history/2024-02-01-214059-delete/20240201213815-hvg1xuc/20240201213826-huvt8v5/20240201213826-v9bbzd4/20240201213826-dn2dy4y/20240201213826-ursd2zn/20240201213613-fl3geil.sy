{"ID":"20240201213613-fl3geil","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213613-fl3geil","title":"java-thread-pool-best-practices","updated":"20240201213613"},"Children":[{"ID":"20240201213614-glrehxw","Type":"NodeThematicBreak","Properties":{"id":"20240201213614-glrehxw","updated":"20240201213614"}},{"ID":"20240201213615-ilha90d","Type":"NodeParagraph","Properties":{"id":"20240201213615-ilha90d","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"title: Java 线程池最佳实践"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213616-8476a9k","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-8476a9k","updated":"20240201213616"},"Children":[{"ID":"20240201213617-xisl24y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213617-xisl24y","updated":"20240201213617"},"Children":[{"ID":"20240201213618-sx49b79","Type":"NodeParagraph","Properties":{"id":"20240201213618-sx49b79","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"Java并发"}]}]}]},{"ID":"20240201213619-zy63fki","Type":"NodeThematicBreak","Properties":{"id":"20240201213619-zy63fki","updated":"20240201213619"}},{"ID":"20240201213620-jkocs8p","Type":"NodeParagraph","Properties":{"id":"20240201213620-jkocs8p","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"简单总结一下我了解的使用线程池的时候应该注意的东西，网上似乎还没有专门写这方面的文章。"}]},{"ID":"20240201213621-lcr8fsv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213621-lcr8fsv","updated":"20240201213621"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1、正确声明线程池"}]},{"ID":"20240201213622-jvvlh9n","Type":"NodeParagraph","Properties":{"id":"20240201213622-jvvlh9n","updated":"20240201213622"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程池必须手动通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 的构造函数来声明，避免使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Executors"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类创建线程池，会有 OOM 风险。"}]},{"ID":"20240201213623-vw5bnii","Type":"NodeParagraph","Properties":{"id":"20240201213623-vw5bnii","updated":"20240201213623"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":" 返回线程池对象的弊端如下(后文会详细介绍到)："}]},{"ID":"20240201213624-yxymkhb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213624-yxymkhb","updated":"20240201213624"},"Children":[{"ID":"20240201213625-ecvrcqo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-ecvrcqo","updated":"20240201213625"},"Children":[{"ID":"20240201213626-btv1g6d","Type":"NodeParagraph","Properties":{"id":"20240201213626-btv1g6d","updated":"20240201213626"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SingleThreadExecutor"},{"Type":"NodeText","Data":"：使用的是无界的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedBlockingQueue"},{"Type":"NodeText","Data":"，任务队列最大长度为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":",可能堆积大量的请求，从而导致 OOM。"}]}]},{"ID":"20240201213627-m73z3ez","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213627-m73z3ez","updated":"20240201213627"},"Children":[{"ID":"20240201213628-4ti2lbv","Type":"NodeParagraph","Properties":{"id":"20240201213628-4ti2lbv","updated":"20240201213628"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"CachedThreadPool"},{"Type":"NodeText","Data":"：使用的是同步队列 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SynchronousQueue"},{"Type":"NodeText","Data":", 允许创建的线程数量为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":" ，可能会创建大量线程，从而导致 OOM。"}]}]},{"ID":"20240201213629-moe9pvh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213629-moe9pvh","updated":"20240201213629"},"Children":[{"ID":"20240201213630-ggrtgn0","Type":"NodeParagraph","Properties":{"id":"20240201213630-ggrtgn0","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ScheduledThreadPool"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SingleThreadScheduledExecutor"},{"Type":"NodeText","Data":" : 使用的无界的延迟阻塞队列"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayedWorkQueue"},{"Type":"NodeText","Data":"，任务队列最大长度为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":",可能堆积大量的请求，从而导致 OOM。"}]}]}]},{"ID":"20240201213631-16xlu5g","Type":"NodeParagraph","Properties":{"id":"20240201213631-16xlu5g","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"说白了就是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用有界队列，控制线程创建数量。"}]},{"ID":"20240201213632-x87qhj5","Type":"NodeParagraph","Properties":{"id":"20240201213632-x87qhj5","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"除了避免 OOM 的原因之外，不推荐使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":"提供的两种快捷的线程池的原因还有："}]},{"ID":"20240201213633-m5k894z","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213633-m5k894z","updated":"20240201213633"},"Children":[{"ID":"20240201213634-1o0bdqy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213634-1o0bdqy","updated":"20240201213634"},"Children":[{"ID":"20240201213635-a2c2d18","Type":"NodeParagraph","Properties":{"id":"20240201213635-a2c2d18","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"实际使用中需要根据自己机器的性能、业务场景来手动配置线程池的参数比如核心线程数、使用的任务队列、饱和策略等等。"}]}]},{"ID":"20240201213636-u8la9t0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213636-u8la9t0","updated":"20240201213636"},"Children":[{"ID":"20240201213637-sbo957b","Type":"NodeParagraph","Properties":{"id":"20240201213637-sbo957b","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"我们应该显示地给我们的线程池命名，这样有助于我们定位问题。"}]}]}]},{"ID":"20240201213638-m94a245","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213638-m94a245","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"2、监测线程池运行状态"}]},{"ID":"20240201213639-w6on6wa","Type":"NodeParagraph","Properties":{"id":"20240201213639-w6on6wa","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"你可以通过一些手段来检测线程池的运行状态比如 SpringBoot 中的 Actuator 组件。"}]},{"ID":"20240201213640-2n6gihu","Type":"NodeParagraph","Properties":{"id":"20240201213640-2n6gihu","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"除此之外，我们还可以利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 的相关 API 做一个简陋的监控。从下图可以看出， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":"提供了获取线程池当前的线程数和活跃线程数、已经执行完成的任务数、正在排队中的任务数等等。"}]},{"ID":"20240201213641-77h0lrr","Type":"NodeParagraph","Properties":{"id":"20240201213641-77h0lrr","updated":"20240201213641"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadpool-methods-information.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213642-omf8sn9","Type":"NodeParagraph","Properties":{"id":"20240201213642-omf8sn9","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"下面是一个简单的 Demo。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"printThreadPoolStatus()"},{"Type":"NodeText","Data":"会每隔一秒打印出线程池的线程数、活跃线程数、完成的任务数、以及队列中的任务数。"}]},{"ID":"20240201213643-92v4uvr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213643-92v4uvr","updated":"20240201213643"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 打印线程池的状态\n *\n * @param threadPool 线程池对象\n */\npublic static void printThreadPoolStatus(ThreadPoolExecutor threadPool) {\n    ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1, createThreadFactory(\"print-images/thread-pool-status\", false));\n    scheduledExecutorService.scheduleAtFixedRate(() -\u003e {\n        log.info(\"=========================\");\n        log.info(\"ThreadPool Size: [{}]\", threadPool.getPoolSize());\n        log.info(\"Active Threads: {}\", threadPool.getActiveCount());\n        log.info(\"Number of Tasks : {}\", threadPool.getCompletedTaskCount());\n        log.info(\"Number of Tasks in Queue: {}\", threadPool.getQueue().size());\n        log.info(\"=========================\");\n    }, 0, 1, TimeUnit.SECONDS);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213644-op6u48c","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213644-op6u48c","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"3、建议不同类别的业务用不同的线程池"}]},{"ID":"20240201213645-uvc7iu8","Type":"NodeParagraph","Properties":{"id":"20240201213645-uvc7iu8","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"很多人在实际项目中都会有类似这样的问题："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我的项目中多个业务需要用到线程池，是为每个线程池都定义一个还是说定义一个公共的线程池呢？"}]},{"ID":"20240201213646-vve6508","Type":"NodeParagraph","Properties":{"id":"20240201213646-vve6508","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"一般建议是不同的业务使用不同的线程池，配置线程池的时候根据当前业务的情况对当前线程池进行配置，因为不同的业务的并发以及对资源的使用情况都不同，重心优化系统性能瓶颈相关的业务。"}]},{"ID":"20240201213647-p16gf59","Type":"NodeParagraph","Properties":{"id":"20240201213647-p16gf59","updated":"20240201213647"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们再来看一个真实的事故案例！"},{"Type":"NodeText","Data":" (本案例来源自："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://heapdump.cn/article/646639","TextMarkTextContent":"《线程池运用不当的一次线上事故》"},{"Type":"NodeText","Data":" ，很精彩的一个案例)"}]},{"ID":"20240201213648-3eqq4hu","Type":"NodeParagraph","Properties":{"id":"20240201213648-3eqq4hu","updated":"20240201213648"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"案例代码概览","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/production-accident-threadpool-sharing-example.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213649-abxvk43","Type":"NodeParagraph","Properties":{"id":"20240201213649-abxvk43","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"上面的代码可能会存在死锁的情况，为什么呢？画个图给大家捋一捋。"}]},{"ID":"20240201213650-08jnptp","Type":"NodeParagraph","Properties":{"id":"20240201213650-08jnptp","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"试想这样一种极端情况：假如我们线程池的核心线程数为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"，父任务（扣费任务）数量为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"，父任务下面有两个子任务（扣费任务下的子任务），其中一个已经执行完成，另外一个被放在了任务队列中。由于父任务把线程池核心线程资源用完，所以子任务因为无法获取到线程资源无法正常执行，一直被阻塞在队列中。父任务等待子任务执行完成，而子任务等待父任务释放线程池资源，这也就造成了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"\u0026quot;死锁\u0026quot;"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213651-d0wgssi","Type":"NodeParagraph","Properties":{"id":"20240201213651-d0wgssi","updated":"20240201213651"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"线程池使用不当导致死锁","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/production-accident-threadpool-sharing-deadlock.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213652-242sy7a","Type":"NodeParagraph","Properties":{"id":"20240201213652-242sy7a","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"解决方法也很简单，就是新增加一个用于执行子任务的线程池专门为其服务。"}]},{"ID":"20240201213653-r5x7q54","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213653-r5x7q54","updated":"20240201213653"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"4、别忘记给线程池命名"}]},{"ID":"20240201213654-sc1zy73","Type":"NodeParagraph","Properties":{"id":"20240201213654-sc1zy73","updated":"20240201213654"},"Children":[{"Type":"NodeText","Data":"初始化线程池的时候需要显示命名（设置线程池名称前缀），有利于定位问题。"}]},{"ID":"20240201213655-dtqlehu","Type":"NodeParagraph","Properties":{"id":"20240201213655-dtqlehu","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"默认情况下创建的线程名字类似 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"pool-1-thread-n"},{"Type":"NodeText","Data":" 这样的，没有业务含义，不利于我们定位问题。"}]},{"ID":"20240201213656-ibhw1kw","Type":"NodeParagraph","Properties":{"id":"20240201213656-ibhw1kw","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"给线程池里的线程命名通常有下面两种方式："}]},{"ID":"20240201213657-llfetif","Type":"NodeParagraph","Properties":{"id":"20240201213657-llfetif","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、利用 guava 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadFactoryBuilder"}]},{"ID":"20240201213658-cnuvdpy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213658-cnuvdpy","updated":"20240201213658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ThreadFactory threadFactory = new ThreadFactoryBuilder()\n                        .setNameFormat(threadNamePrefix + \"-%d\")\n                        .setDaemon(true).build();\nExecutorService threadPool = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213659-l60gu61","Type":"NodeParagraph","Properties":{"id":"20240201213659-l60gu61","updated":"20240201213659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、自己实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadFactory"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"。"}]},{"ID":"20240201213660-7opyj6s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213660-7opyj6s","updated":"20240201213660"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * 线程工厂，它设置线程名称，有利于我们定位问题。\n */\npublic final class NamingThreadFactory implements ThreadFactory {\n\n    private final AtomicInteger threadNum = new AtomicInteger();\n    private final String name;\n\n    /**\n     * 创建一个带名字的线程池生产工厂\n     */\n    public NamingThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(r);\n        t.setName(name + \" [#\" + threadNum.incrementAndGet() + \"]\");\n        return t;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213661-daa94mm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213661-daa94mm","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"5、正确配置线程池参数"}]},{"ID":"20240201213662-rpdo0mx","Type":"NodeParagraph","Properties":{"id":"20240201213662-rpdo0mx","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"说到如何给线程池配置参数，美团的骚操作至今让我难忘（后面会提到）！"}]},{"ID":"20240201213663-pjgbk6c","Type":"NodeParagraph","Properties":{"id":"20240201213663-pjgbk6c","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"我们先来看一下各种书籍和博客上一般推荐的配置线程池参数的方式，可以作为参考。"}]},{"ID":"20240201213664-s5f2buh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213664-s5f2buh","updated":"20240201213664"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常规操作"}]},{"ID":"20240201213665-k5dajyn","Type":"NodeParagraph","Properties":{"id":"20240201213665-k5dajyn","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"很多人甚至可能都会觉得把线程池配置过大一点比较好！我觉得这明显是有问题的。就拿我们生活中非常常见的一例子来说："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"并不是人多就能把事情做好，增加了沟通交流成本。你本来一件事情只需要 3 个人做，你硬是拉来了 6 个人，会提升做事效率嘛？我想并不会。"},{"Type":"NodeText","Data":" 线程数量过多的影响也是和我们分配多少人做事情一样，对于多线程这个场景来说主要是增加了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"上下文切换"},{"Type":"NodeText","Data":" 成本。不清楚什么是上下文切换的话，可以看我下面的介绍。"}]},{"ID":"20240201213666-clz862l","Type":"NodeBlockquote","Properties":{"id":"20240201213666-clz862l","updated":"20240201213666"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213667-63fsrn0","Type":"NodeParagraph","Properties":{"id":"20240201213667-63fsrn0","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"上下文切换："}]},{"ID":"20240201213668-cxfc4ui","Type":"NodeParagraph","Properties":{"id":"20240201213668-cxfc4ui","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任务从保存到再加载的过程就是一次上下文切换"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213669-k1psew5","Type":"NodeParagraph","Properties":{"id":"20240201213669-k1psew5","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。"}]},{"ID":"20240201213670-z2jq5at","Type":"NodeParagraph","Properties":{"id":"20240201213670-z2jq5at","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。"}]}]},{"ID":"20240201213671-iua6043","Type":"NodeParagraph","Properties":{"id":"20240201213671-iua6043","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"类比于实现世界中的人类通过合作做某件事情，我们可以肯定的一点是线程池大小设置过大或者过小都会有问题，合适的才是最好。"}]},{"ID":"20240201213672-fx1ond4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213672-fx1ond4","updated":"20240201213672"},"Children":[{"ID":"20240201213673-jzt82on","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213673-jzt82on","updated":"20240201213673"},"Children":[{"ID":"20240201213674-a63yfoy","Type":"NodeParagraph","Properties":{"id":"20240201213674-a63yfoy","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"如果我们设置的线程池数量太小的话，如果同一时间有大量任务/请求需要处理，可能会导致大量的请求/任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务/请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。这样很明显是有问题的，CPU 根本没有得到充分利用。"}]}]},{"ID":"20240201213675-unyv8wo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213675-unyv8wo","updated":"20240201213675"},"Children":[{"ID":"20240201213676-xs2b4vd","Type":"NodeParagraph","Properties":{"id":"20240201213676-xs2b4vd","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"如果我们设置线程数量太大，大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。"}]}]}]},{"ID":"20240201213677-4vyiapi","Type":"NodeParagraph","Properties":{"id":"20240201213677-4vyiapi","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"有一个简单并且适用面比较广的公式："}]},{"ID":"20240201213678-gulj9p1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213678-gulj9p1","updated":"20240201213678"},"Children":[{"ID":"20240201213679-ra92jom","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-ra92jom","updated":"20240201213679"},"Children":[{"ID":"20240201213680-yr5nqxt","Type":"NodeParagraph","Properties":{"id":"20240201213680-yr5nqxt","updated":"20240201213680"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU 密集型任务(N+1)："},{"Type":"NodeText","Data":" 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。"}]}]},{"ID":"20240201213681-myz657c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-myz657c","updated":"20240201213681"},"Children":[{"ID":"20240201213682-c6hhvt9","Type":"NodeParagraph","Properties":{"id":"20240201213682-c6hhvt9","updated":"20240201213682"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"I/O 密集型任务(2N)："},{"Type":"NodeText","Data":" 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。"}]}]}]},{"ID":"20240201213683-vaap47z","Type":"NodeParagraph","Properties":{"id":"20240201213683-vaap47z","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何判断是 CPU 密集任务还是 IO 密集任务？"}]},{"ID":"20240201213684-0mzamiv","Type":"NodeParagraph","Properties":{"id":"20240201213684-0mzamiv","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。"}]},{"ID":"20240201213685-cbzax4b","Type":"NodeParagraph","Properties":{"id":"20240201213685-cbzax4b","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"🌈 拓展一下（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1737","TextMarkTextContent":"issue#1737"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213686-gcu99d8","Type":"NodeParagraph","Properties":{"id":"20240201213686-gcu99d8","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"线程数更严谨的计算的方法应该是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"最佳线程数 = N（CPU 核心数）∗（1+WT（线程等待时间）/ST（线程计算时间））"},{"Type":"NodeText","Data":"，其中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WT（线程等待时间）=线程运行总时间 - ST（线程计算时间）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213687-01gajoi","Type":"NodeParagraph","Properties":{"id":"20240201213687-01gajoi","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"线程等待时间所占比例越高，需要越多线程。线程计算时间所占比例越高，需要越少线程。"}]},{"ID":"20240201213688-z5g6swz","Type":"NodeParagraph","Properties":{"id":"20240201213688-z5g6swz","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"我们可以通过 JDK 自带的工具 VisualVM 来查看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WT/ST"},{"Type":"NodeText","Data":" 比例。"}]},{"ID":"20240201213689-odvbwl6","Type":"NodeParagraph","Properties":{"id":"20240201213689-odvbwl6","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"CPU 密集型任务的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WT/ST"},{"Type":"NodeText","Data":" 接近或者等于 0，因此， 线程数可以设置为 N（CPU 核心数）∗（1+0）= N，和我们上面说的 N（CPU 核心数）+1 差不多。"}]},{"ID":"20240201213690-0i1b6h5","Type":"NodeParagraph","Properties":{"id":"20240201213690-0i1b6h5","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"IO 密集型任务下，几乎全是线程等待时间，从理论上来说，你就可以将线程数设置为 2N（按道理来说，WT/ST 的结果应该比较大，这里选择 2N 的原因应该是为了避免创建过多线程吧）。"}]},{"ID":"20240201213691-eq4ahl8","Type":"NodeParagraph","Properties":{"id":"20240201213691-eq4ahl8","updated":"20240201213691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意"},{"Type":"NodeText","Data":"：上面提到的公示也只是参考，实际项目不太可能直接按照公式来设置线程池参数，毕竟不同的业务场景对应的需求不同，具体还是要根据项目实际线上运行情况来动态调整。接下来介绍的美团的线程池参数动态配置这种方案就非常不错，很实用！"}]},{"ID":"20240201213692-vjrq2dx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213692-vjrq2dx","updated":"20240201213692"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"美团的骚操作"}]},{"ID":"20240201213693-tqmfw24","Type":"NodeParagraph","Properties":{"id":"20240201213693-tqmfw24","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"美团技术团队在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html","TextMarkTextContent":"《Java 线程池实现原理及其在美团业务中的实践》"},{"Type":"NodeText","Data":"这篇文章中介绍到对线程池参数实现可自定义配置的思路和方法。"}]},{"ID":"20240201213694-qv5rnsb","Type":"NodeParagraph","Properties":{"id":"20240201213694-qv5rnsb","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"美团技术团队的思路是主要对线程池的核心参数实现自定义可配置。这三个核心参数是："}]},{"ID":"20240201213695-tm3iext","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-tm3iext","updated":"20240201213695"},"Children":[{"ID":"20240201213696-t45u93d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-t45u93d","updated":"20240201213696"},"Children":[{"ID":"20240201213697-168hcop","Type":"NodeParagraph","Properties":{"id":"20240201213697-168hcop","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" :"},{"Type":"NodeText","Data":" 核心线程数线程数定义了最小可以同时运行的线程数量。"}]}]},{"ID":"20240201213698-xyyv7yo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-xyyv7yo","updated":"20240201213698"},"Children":[{"ID":"20240201213699-bfzo9c3","Type":"NodeParagraph","Properties":{"id":"20240201213699-bfzo9c3","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"maximumPoolSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" :"},{"Type":"NodeText","Data":" 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。"}]}]},{"ID":"20240201213700-7hvhg8x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-7hvhg8x","updated":"20240201213700"},"Children":[{"ID":"20240201213701-8u1c3up","Type":"NodeParagraph","Properties":{"id":"20240201213701-8u1c3up","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"workQueue"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":":"},{"Type":"NodeText","Data":" 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。"}]}]}]},{"ID":"20240201213702-wjwio5m","Type":"NodeParagraph","Properties":{"id":"20240201213702-wjwio5m","updated":"20240201213702"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么是这三个参数？"}]},{"ID":"20240201213703-q2f1mip","Type":"NodeParagraph","Properties":{"id":"20240201213703-q2f1mip","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"我在这篇"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==\u0026mid=2247485808\u0026idx=1\u0026sn=1013253533d73450cef673aee13267ab\u0026chksm=cea246bbf9d5cfad1c21316340a0ef1609a7457fea4113a1f8d69e8c91e7d9cd6285f5ee1490\u0026token=510053261\u0026lang=zh_CN\u0026scene=21#wechat_redirect","TextMarkTextContent":"《新手也能看懂的线程池学习总结》"},{"Type":"NodeText","Data":" 中就说过这三个参数是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 最重要的参数，它们基本决定了线程池对于任务的处理策略。"}]},{"ID":"20240201213704-jxlk8xr","Type":"NodeParagraph","Properties":{"id":"20240201213704-jxlk8xr","updated":"20240201213704"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何支持参数动态配置？"},{"Type":"NodeText","Data":" 且看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 提供的下面这些方法。"}]},{"ID":"20240201213705-nkh5l7a","Type":"NodeParagraph","Properties":{"id":"20240201213705-nkh5l7a","updated":"20240201213705"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadpoolexecutor-methods.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213706-3d0jfdr","Type":"NodeParagraph","Properties":{"id":"20240201213706-3d0jfdr","updated":"20240201213706"},"Children":[{"Type":"NodeText","Data":"格外需要注意的是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeText","Data":"， 程序运行期间的时候，我们调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setCorePoolSize（）"},{"Type":"NodeText","Data":"这个方法的话，线程池会首先判断当前工作线程数是否大于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeText","Data":"，如果大于的话就会回收工作线程。"}]},{"ID":"20240201213707-7gyb050","Type":"NodeParagraph","Properties":{"id":"20240201213707-7gyb050","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"另外，你也看到了上面并没有动态指定队列长度的方法，美团的方式是自定义了一个叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ResizableCapacityLinkedBlockIngQueue"},{"Type":"NodeText","Data":" 的队列（主要就是把"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedBlockingQueue"},{"Type":"NodeText","Data":"的 capacity 字段的 final 关键字修饰给去掉了，让它变为可变的）。"}]},{"ID":"20240201213708-2zub05q","Type":"NodeParagraph","Properties":{"id":"20240201213708-2zub05q","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"最终实现的可动态修改线程池参数效果如下。👏👏👏"}]},{"ID":"20240201213709-kuqpzww","Type":"NodeParagraph","Properties":{"id":"20240201213709-kuqpzww","updated":"20240201213709"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"动态配置线程池参数最终效果","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/meituan-dynamically-configuring-thread-pool-parameters.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213710-ubnf986","Type":"NodeParagraph","Properties":{"id":"20240201213710-ubnf986","updated":"20240201213710"},"Children":[{"Type":"NodeText","Data":"如果我们的项目也想要实现这种效果的话，可以借助现成的开源项目："}]},{"ID":"20240201213711-4qrvph6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213711-4qrvph6","updated":"20240201213711"},"Children":[{"ID":"20240201213712-kxw4w56","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213712-kxw4w56","updated":"20240201213712"},"Children":[{"ID":"20240201213713-beauz0c","Type":"NodeParagraph","Properties":{"id":"20240201213713-beauz0c","updated":"20240201213713"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/opengoofy/hippo4j","TextMarkTextContent":"Hippo4j"},{"Type":"NodeText","Data":"：异步线程池框架，支持线程池动态变更\u0026监控\u0026报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。"}]}]},{"ID":"20240201213714-ossfe7o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213714-ossfe7o","updated":"20240201213714"},"Children":[{"ID":"20240201213715-60ucp7r","Type":"NodeParagraph","Properties":{"id":"20240201213715-60ucp7r","updated":"20240201213715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/dromara/dynamic-tp","TextMarkTextContent":"Dynamic TP"},{"Type":"NodeText","Data":"：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。"}]}]}]},{"ID":"20240201213716-8ve4xb5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213716-8ve4xb5","updated":"20240201213716"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"6、别忘记关闭线程池"}]},{"ID":"20240201213717-xuswfxd","Type":"NodeParagraph","Properties":{"id":"20240201213717-xuswfxd","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"当线程池不再需要使用时，应该显式地关闭线程池，释放线程资源。"}]},{"ID":"20240201213718-v1axqb1","Type":"NodeParagraph","Properties":{"id":"20240201213718-v1axqb1","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"线程池提供了两个关闭方法："}]},{"ID":"20240201213719-vocc1qp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213719-vocc1qp","updated":"20240201213719"},"Children":[{"ID":"20240201213720-cxzguz7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213720-cxzguz7","updated":"20240201213720"},"Children":[{"ID":"20240201213721-i8kyk9h","Type":"NodeParagraph","Properties":{"id":"20240201213721-i8kyk9h","updated":"20240201213721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"shutdown（）"},{"Type":"NodeText","Data":" :关闭线程池，线程池的状态变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SHUTDOWN"},{"Type":"NodeText","Data":"。线程池不再接受新任务了，但是队列里的任务得执行完毕。"}]}]},{"ID":"20240201213722-ejdx28e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213722-ejdx28e","updated":"20240201213722"},"Children":[{"ID":"20240201213723-snyashd","Type":"NodeParagraph","Properties":{"id":"20240201213723-snyashd","updated":"20240201213723"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"shutdownNow（）"},{"Type":"NodeText","Data":" :关闭线程池，线程池的状态变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STOP"},{"Type":"NodeText","Data":"。线程池会终止当前正在运行的任务，停止处理排队的任务并返回正在等待执行的 List。"}]}]}]},{"ID":"20240201213724-raanegb","Type":"NodeParagraph","Properties":{"id":"20240201213724-raanegb","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"调用完 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"shutdownNow"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"shuwdown"},{"Type":"NodeText","Data":" 方法后，并不代表线程池已经完成关闭操作，它只是异步的通知线程池进行关闭处理。如果要同步等待线程池彻底关闭后才继续往下执行，需要调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"awaitTermination"},{"Type":"NodeText","Data":"方法进行同步等待。"}]},{"ID":"20240201213725-atm350l","Type":"NodeParagraph","Properties":{"id":"20240201213725-atm350l","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"在调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"awaitTermination()"},{"Type":"NodeText","Data":" 方法时，应该设置合理的超时时间，以避免程序长时间阻塞而导致性能问题。另外。由于线程池中的任务可能会被取消或抛出异常，因此在使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"awaitTermination()"},{"Type":"NodeText","Data":" 方法时还需要进行异常处理。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"awaitTermination()"},{"Type":"NodeText","Data":" 方法会抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InterruptedException"},{"Type":"NodeText","Data":" 异常，需要捕获并处理该异常，以避免程序崩溃或者无法正常退出。"}]},{"ID":"20240201213726-vetwzxw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213726-vetwzxw","updated":"20240201213726"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// ...\n// 关闭线程池\nexecutor.shutdown();\ntry {\n    // 等待线程池关闭，最多等待5分钟\n    if (!executor.awaitTermination(5, TimeUnit.MINUTES)) {\n        // 如果等待超时，则打印日志\n        System.err.println(\"线程池未能在5分钟内完全关闭\");\n    }\n} catch (InterruptedException e) {\n    // 异常处理\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213727-cbpusac","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213727-cbpusac","updated":"20240201213727"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"7、线程池尽量不要放耗时任务"}]},{"ID":"20240201213728-wjmst0j","Type":"NodeParagraph","Properties":{"id":"20240201213728-wjmst0j","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"线程池本身的目的是为了提高任务执行效率，避免因频繁创建和销毁线程而带来的性能开销。如果将耗时任务提交到线程池中执行，可能会导致线程池中的线程被长时间占用，无法及时响应其他任务，甚至会导致线程池崩溃或者程序假死。"}]},{"ID":"20240201213729-mg0omwx","Type":"NodeParagraph","Properties":{"id":"20240201213729-mg0omwx","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"因此，在使用线程池时，我们应该尽量避免将耗时任务提交到线程池中执行。对于一些比较耗时的操作，如网络请求、文件读写等，可以采用异步操作的方式来处理，以避免阻塞线程池中的线程。"}]},{"ID":"20240201213730-gkpvfz4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213730-gkpvfz4","updated":"20240201213730"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"8、线程池使用的一些小坑"}]},{"ID":"20240201213731-r3l45ey","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213731-r3l45ey","updated":"20240201213731"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"重复创建线程池的坑"}]},{"ID":"20240201213732-vnugvoq","Type":"NodeParagraph","Properties":{"id":"20240201213732-vnugvoq","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"线程池是可以复用的，一定不要频繁创建线程池比如一个用户请求到了就单独创建一个线程池。"}]},{"ID":"20240201213733-u8hi17i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213733-u8hi17i","updated":"20240201213733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"wrong\")\npublic String wrong() throws InterruptedException {\n    // 自定义线程池\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(5,10,1L,TimeUnit.SECONDS,new ArrayBlockingQueue\u003c\u003e(100),new ThreadPoolExecutor.CallerRunsPolicy());\n\n    //  处理任务\n    executor.execute(() -\u003e {\n      // ......\n    }\n    return \"OK\";\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213734-6t9uere","Type":"NodeParagraph","Properties":{"id":"20240201213734-6t9uere","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"出现这种问题的原因还是对于线程池认识不够，需要加强线程池的基础知识。"}]},{"ID":"20240201213735-qlf1akf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213735-qlf1akf","updated":"20240201213735"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 内部线程池的坑"}]},{"ID":"20240201213736-prjb5u3","Type":"NodeParagraph","Properties":{"id":"20240201213736-prjb5u3","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"使用 Spring 内部线程池时，一定要手动自定义线程池，配置合理的参数，不然会出现生产问题（一个请求创建一个线程）。"}]},{"ID":"20240201213737-nsefm2e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213737-nsefm2e","updated":"20240201213737"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\n@EnableAsync\npublic class ThreadPoolExecutorConfig {\n\n    @Bean(name=\"threadPoolExecutor\")\n    public Executor threadPoolExecutor(){\n        ThreadPoolTaskExecutor threadPoolExecutor = new ThreadPoolTaskExecutor();\n        int processNum = Runtime.getRuntime().availableProcessors(); // 返回可用处理器的Java虚拟机的数量\n        int corePoolSize = (int) (processNum / (1 - 0.2));\n        int maxPoolSize = (int) (processNum / (1 - 0.5));\n        threadPoolExecutor.setCorePoolSize(corePoolSize); // 核心池大小\n        threadPoolExecutor.setMaxPoolSize(maxPoolSize); // 最大线程数\n        threadPoolExecutor.setQueueCapacity(maxPoolSize * 1000); // 队列程度\n        threadPoolExecutor.setThreadPriority(Thread.MAX_PRIORITY);\n        threadPoolExecutor.setDaemon(false);\n        threadPoolExecutor.setKeepAliveSeconds(300);// 线程空闲时间\n        threadPoolExecutor.setThreadNamePrefix(\"test-Executor-\"); // 线程名字前缀\n        return threadPoolExecutor;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213738-xlxmhke","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213738-xlxmhke","updated":"20240201213738"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程池和 ThreadLocal 共用的坑"}]},{"ID":"20240201213739-gfjvwpt","Type":"NodeParagraph","Properties":{"id":"20240201213739-gfjvwpt","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"线程池和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"共用，可能会导致线程从"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"获取到的是旧值/脏数据。这是因为线程池会复用线程对象，与线程对象绑定的类的静态属性 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 变量也会被重用，这就导致一个线程可能获取到其他线程的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 值。"}]},{"ID":"20240201213740-c7ioyt8","Type":"NodeParagraph","Properties":{"id":"20240201213740-c7ioyt8","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"不要以为代码中没有显示使用线程池就不存在线程池了，像常用的 Web 服务器 Tomcat 处理任务为了提高并发量，就使用到了线程池，并且使用的是基于原生 Java 线程池改进完善得到的自定义线程池。"}]},{"ID":"20240201213741-490wx86","Type":"NodeParagraph","Properties":{"id":"20240201213741-490wx86","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"当然了，你可以将 Tomcat 设置为单线程处理任务。不过，这并不合适，会严重影响其处理任务的速度。"}]},{"ID":"20240201213742-mdzp776","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cHJvcGVydGllcw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213742-mdzp776","updated":"20240201213742"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHJvcGVydGllcw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"server.tomcat.max-threads=1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213743-6jcbvo3","Type":"NodeParagraph","Properties":{"id":"20240201213743-6jcbvo3","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"解决上述问题比较建议的办法是使用阿里巴巴开源的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransmittableThreadLocal"},{"Type":"NodeText","Data":"("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TTL"},{"Type":"NodeText","Data":")。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransmittableThreadLocal"},{"Type":"NodeText","Data":"类继承并加强了 JDK 内置的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InheritableThreadLocal"},{"Type":"NodeText","Data":"类，在使用线程池等会池化复用线程的执行组件情况下，提供"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"值的传递功能，解决异步执行时上下文传递的问题。"}]},{"ID":"20240201213744-s40eqa3","Type":"NodeParagraph","Properties":{"id":"20240201213744-s40eqa3","updated":"20240201213744"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransmittableThreadLocal"},{"Type":"NodeText","Data":" 项目地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/alibaba/transmittable-thread-local","TextMarkTextContent":"https://github.com/alibaba/transmittable-thread-local"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213745-3ekejo3","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-3ekejo3","updated":"20240201213745"}}]}