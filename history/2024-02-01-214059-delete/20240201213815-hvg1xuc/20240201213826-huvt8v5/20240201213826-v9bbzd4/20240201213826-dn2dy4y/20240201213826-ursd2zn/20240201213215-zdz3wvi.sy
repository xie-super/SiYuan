{"ID":"20240201213215-zdz3wvi","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213215-zdz3wvi","title":"java-concurrent-questions-03","updated":"20240201213215"},"Children":[{"ID":"20240201213216-yn28o65","Type":"NodeThematicBreak","Properties":{"id":"20240201213216-yn28o65","updated":"20240201213216"}},{"ID":"20240201213217-35ygnqi","Type":"NodeParagraph","Properties":{"id":"20240201213217-35ygnqi","updated":"20240201213217"},"Children":[{"Type":"NodeText","Data":"title: Java并发常见面试题总结（下）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213218-sglpq5r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213218-sglpq5r","updated":"20240201213218"},"Children":[{"ID":"20240201213219-tue1vao","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213219-tue1vao","updated":"20240201213219"},"Children":[{"ID":"20240201213220-x3xz1y8","Type":"NodeParagraph","Properties":{"id":"20240201213220-x3xz1y8","updated":"20240201213220"},"Children":[{"Type":"NodeText","Data":"Java并发"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213221-opsouc6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213221-opsouc6","updated":"20240201213221"},"Children":[{"ID":"20240201213222-xd46ho6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213222-xd46ho6","updated":"20240201213222"},"Children":[{"ID":"20240201213223-9zhrs26","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213223-9zhrs26","updated":"20240201213223"},"Children":[{"ID":"20240201213224-wie1iti","Type":"NodeParagraph","Properties":{"id":"20240201213224-wie1iti","updated":"20240201213224"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213225-jiks7pd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213225-jiks7pd","updated":"20240201213225"},"Children":[{"ID":"20240201213226-78o7rtx","Type":"NodeParagraph","Properties":{"id":"20240201213226-78o7rtx","updated":"20240201213226"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 多线程,死锁,线程池,CAS,AQS"}]}]}]}]},{"ID":"20240201213227-x4l7h1v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213227-x4l7h1v","updated":"20240201213227"},"Children":[{"ID":"20240201213228-yen0a2q","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213228-yen0a2q","updated":"20240201213228"},"Children":[{"ID":"20240201213229-cixinvo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213229-cixinvo","updated":"20240201213229"},"Children":[{"ID":"20240201213230-7xtwtgl","Type":"NodeParagraph","Properties":{"id":"20240201213230-7xtwtgl","updated":"20240201213230"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213231-oonfy3m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213231-oonfy3m","updated":"20240201213231"},"Children":[{"ID":"20240201213232-ul5h35m","Type":"NodeParagraph","Properties":{"id":"20240201213232-ul5h35m","updated":"20240201213232"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: Java并发常见知识点和面试题总结（含详细解答），希望对你有帮助！"}]}]}]}]}]},{"ID":"20240201213233-gqw57z9","Type":"NodeThematicBreak","Properties":{"id":"20240201213233-gqw57z9","updated":"20240201213233"}},{"ID":"20240201213234-qz8u2dv","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-header.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213234-qz8u2dv","updated":"20240201213234"}},{"ID":"20240201213235-1wkxlup","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213235-1wkxlup","updated":"20240201213235"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ThreadLocal"}]},{"ID":"20240201213236-qks2vh6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213236-qks2vh6","updated":"20240201213236"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ThreadLocal 有什么用？"}]},{"ID":"20240201213237-pb71vnj","Type":"NodeParagraph","Properties":{"id":"20240201213237-pb71vnj","updated":"20240201213237"},"Children":[{"Type":"NodeText","Data":"通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果想实现每一个线程都有自己的专属本地变量该如何解决呢？"}]},{"ID":"20240201213238-pqvlnbf","Type":"NodeParagraph","Properties":{"id":"20240201213238-pqvlnbf","updated":"20240201213238"},"Children":[{"Type":"NodeText","Data":"JDK 中自带的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"类正是为了解决这样的问题。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类主要解决的就是让每个线程绑定自己的值，可以将"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。"}]},{"ID":"20240201213239-bmf29vu","Type":"NodeParagraph","Properties":{"id":"20240201213239-bmf29vu","updated":"20240201213239"},"Children":[{"Type":"NodeText","Data":"如果你创建了一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"变量名的由来。他们可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get()"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set()"},{"Type":"NodeText","Data":" 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。"}]},{"ID":"20240201213240-0qwd289","Type":"NodeParagraph","Properties":{"id":"20240201213240-0qwd289","updated":"20240201213240"},"Children":[{"Type":"NodeText","Data":"再举个简单的例子：两个人去宝屋收集宝物，这两个共用一个袋子的话肯定会产生争执，但是给他们两个人每个人分配一个袋子的话就不会出现这样的问题。如果把这两个人比作线程的话，那么 ThreadLocal 就是用来避免这两个线程竞争的。"}]},{"ID":"20240201213241-g6d3ecf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213241-g6d3ecf","updated":"20240201213241"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何使用 ThreadLocal？"}]},{"ID":"20240201213242-i1kz2ff","Type":"NodeParagraph","Properties":{"id":"20240201213242-i1kz2ff","updated":"20240201213242"},"Children":[{"Type":"NodeText","Data":"相信看了上面的解释，大家已经搞懂 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 类是个什么东西了。下面简单演示一下如何在项目中实际使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213243-oo3mfoa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213243-oo3mfoa","updated":"20240201213243"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.text.SimpleDateFormat;\nimport java.util.Random;\n\npublic class ThreadLocalExample implements Runnable{\n\n     // SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本\n    private static final ThreadLocal\u003cSimpleDateFormat\u003e formatter = ThreadLocal.withInitial(() -\u003e new SimpleDateFormat(\"yyyyMMdd HHmm\"));\n\n    public static void main(String[] args) throws InterruptedException {\n        ThreadLocalExample obj = new ThreadLocalExample();\n        for(int i=0 ; i\u003c10; i++){\n            Thread t = new Thread(obj, \"\"+i);\n            Thread.sleep(new Random().nextInt(1000));\n            t.start();\n        }\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"Thread Name= \"+Thread.currentThread().getName()+\" default Formatter = \"+formatter.get().toPattern());\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        //formatter pattern is changed here by thread, but it won't reflect to other threads\n        formatter.set(new SimpleDateFormat());\n\n        System.out.println(\"Thread Name= \"+Thread.currentThread().getName()+\" formatter = \"+formatter.get().toPattern());\n    }\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213244-wemoma0","Type":"NodeParagraph","Properties":{"id":"20240201213244-wemoma0","updated":"20240201213244"},"Children":[{"Type":"NodeText","Data":"输出结果 :"}]},{"ID":"20240201213245-jh1gxwu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213245-jh1gxwu","updated":"20240201213245"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Thread Name= 0 default Formatter = yyyyMMdd HHmm\nThread Name= 0 formatter = yy-M-d ah:mm\nThread Name= 1 default Formatter = yyyyMMdd HHmm\nThread Name= 2 default Formatter = yyyyMMdd HHmm\nThread Name= 1 formatter = yy-M-d ah:mm\nThread Name= 3 default Formatter = yyyyMMdd HHmm\nThread Name= 2 formatter = yy-M-d ah:mm\nThread Name= 4 default Formatter = yyyyMMdd HHmm\nThread Name= 3 formatter = yy-M-d ah:mm\nThread Name= 4 formatter = yy-M-d ah:mm\nThread Name= 5 default Formatter = yyyyMMdd HHmm\nThread Name= 5 formatter = yy-M-d ah:mm\nThread Name= 6 default Formatter = yyyyMMdd HHmm\nThread Name= 6 formatter = yy-M-d ah:mm\nThread Name= 7 default Formatter = yyyyMMdd HHmm\nThread Name= 7 formatter = yy-M-d ah:mm\nThread Name= 8 default Formatter = yyyyMMdd HHmm\nThread Name= 9 default Formatter = yyyyMMdd HHmm\nThread Name= 8 formatter = yy-M-d ah:mm\nThread Name= 9 formatter = yy-M-d ah:mm\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213246-4ky73e4","Type":"NodeParagraph","Properties":{"id":"20240201213246-4ky73e4","updated":"20240201213246"},"Children":[{"Type":"NodeText","Data":"从输出中可以看出，虽然 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread-0"},{"Type":"NodeText","Data":" 已经改变了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"formatter"},{"Type":"NodeText","Data":" 的值，但 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread-1"},{"Type":"NodeText","Data":" 默认格式化值与初始化值相同，其他线程也一样。"}]},{"ID":"20240201213247-pzfvmhv","Type":"NodeParagraph","Properties":{"id":"20240201213247-pzfvmhv","updated":"20240201213247"},"Children":[{"Type":"NodeText","Data":"上面有一段代码用到了创建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 变量的那段代码用到了 Java8 的知识，它等于下面这段代码，如果你写了下面这段代码的话，IDEA 会提示你转换为 Java8 的格式(IDEA 真的不错！)。因为 ThreadLocal 类在 Java 8 中扩展，使用一个新的方法"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"withInitial()"},{"Type":"NodeText","Data":"，将 Supplier 功能接口作为参数。"}]},{"ID":"20240201213248-ct2li6b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213248-ct2li6b","updated":"20240201213248"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final ThreadLocal\u003cSimpleDateFormat\u003e formatter = new ThreadLocal\u003cSimpleDateFormat\u003e(){\n    @Override\n    protected SimpleDateFormat initialValue(){\n        return new SimpleDateFormat(\"yyyyMMdd HHmm\");\n    }\n};\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213249-m2bc7iz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213249-m2bc7iz","updated":"20240201213249"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ThreadLocal 原理了解吗？"}]},{"ID":"20240201213250-xwkv84f","Type":"NodeParagraph","Properties":{"id":"20240201213250-xwkv84f","updated":"20240201213250"},"Children":[{"Type":"NodeText","Data":"从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":"类源代码入手。"}]},{"ID":"20240201213251-2gddl5t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213251-2gddl5t","updated":"20240201213251"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Thread implements Runnable {\n    //......\n    //与此线程有关的ThreadLocal值。由ThreadLocal类维护\n    ThreadLocal.ThreadLocalMap threadLocals = null;\n\n    //与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护\n    ThreadLocal.ThreadLocalMap inheritableThreadLocals = null;\n    //......\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213252-73fo4ay","Type":"NodeParagraph","Properties":{"id":"20240201213252-73fo4ay","updated":"20240201213252"},"Children":[{"Type":"NodeText","Data":"从上面"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":"类 源代码可以看出"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":" 类中有一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"threadLocals"},{"Type":"NodeText","Data":" 和 一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"inheritableThreadLocals"},{"Type":"NodeText","Data":" 变量，它们都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":" 类型的变量,我们可以把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":" 理解为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 类实现的定制化的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HashMap"},{"Type":"NodeText","Data":"。默认情况下这两个变量都是 null，只有当前线程调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set"},{"Type":"NodeText","Data":"或"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get"},{"Type":"NodeText","Data":"方法时才创建它们，实际上调用这两个方法的时候，我们调用的是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":"类对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get()"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set()"},{"Type":"NodeText","Data":"方法。"}]},{"ID":"20240201213253-z2wi58j","Type":"NodeParagraph","Properties":{"id":"20240201213253-z2wi58j","updated":"20240201213253"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"类的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set()"},{"Type":"NodeText","Data":"方法"}]},{"ID":"20240201213254-gxcmbu3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213254-gxcmbu3","updated":"20240201213254"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public void set(T value) {\n    //获取当前请求的线程\n    Thread t = Thread.currentThread();\n    //取出 Thread 类内部的 threadLocals 变量(哈希表结构)\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        // 将需要存储的值放入到这个哈希表中\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\nThreadLocalMap getMap(Thread t) {\n    return t.threadLocals;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213255-kk6kzzh","Type":"NodeParagraph","Properties":{"id":"20240201213255-kk6kzzh","updated":"20240201213255"},"Children":[{"Type":"NodeText","Data":"通过上面这些内容，我们足以通过猜测得出结论："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最终的变量是放在了当前线程的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 中，并不是存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 上，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 可以理解为只是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"的封装，传递了变量值。"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThrealLocal"},{"Type":"NodeText","Data":" 类中可以通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread.currentThread()"},{"Type":"NodeText","Data":"获取到当前线程对象后，直接通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getMap(Thread t)"},{"Type":"NodeText","Data":"可以访问到该线程的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":"对象。"}]},{"ID":"20240201213256-f5tr87z","Type":"NodeParagraph","Properties":{"id":"20240201213256-f5tr87z","updated":"20240201213256"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"每个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Thread"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"中都具备一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以存储以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为 key ，Object 对象为 value 的键值对。"}]},{"ID":"20240201213257-0q209l2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213257-0q209l2","updated":"20240201213257"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ThreadLocalMap(ThreadLocal\u003c?\u003e firstKey, Object firstValue) {\n    //......\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213258-qt6jxoz","Type":"NodeParagraph","Properties":{"id":"20240201213258-qt6jxoz","updated":"20240201213258"},"Children":[{"Type":"NodeText","Data":"比如我们在同一个线程中声明了两个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 对象的话， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":"内部都是使用仅有的那个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":" 存放数据的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":"的 key 就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"对象，value 就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 对象调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set"},{"Type":"NodeText","Data":"方法设置的值。"}]},{"ID":"20240201213259-ejgqnms","Type":"NodeParagraph","Properties":{"id":"20240201213259-ejgqnms","updated":"20240201213259"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 数据结构如下图所示："}]},{"ID":"20240201213260-l7rcyq1","Type":"NodeParagraph","Properties":{"id":"20240201213260-l7rcyq1","updated":"20240201213260"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ThreadLocal 数据结构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadlocal-data-structure.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213261-x09pjvw","Type":"NodeParagraph","Properties":{"id":"20240201213261-x09pjvw","updated":"20240201213261"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":"是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"的静态内部类。"}]},{"ID":"20240201213262-3ra7sv6","Type":"NodeParagraph","Properties":{"id":"20240201213262-3ra7sv6","updated":"20240201213262"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ThreadLocal内部类","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/thread-local-inner-class.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213263-x1kfcag","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213263-x1kfcag","updated":"20240201213263"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ThreadLocal 内存泄露问题是怎么导致的？"}]},{"ID":"20240201213264-ng4bh50","Type":"NodeParagraph","Properties":{"id":"20240201213264-ng4bh50","updated":"20240201213264"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":" 中使用的 key 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 的弱引用，而 value 是强引用。所以，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。"}]},{"ID":"20240201213265-xo4lrep","Type":"NodeParagraph","Properties":{"id":"20240201213265-xo4lrep","updated":"20240201213265"},"Children":[{"Type":"NodeText","Data":"这样一来，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":" 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocalMap"},{"Type":"NodeText","Data":" 实现中已经考虑了这种情况，在调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set()"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get()"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove()"},{"Type":"NodeText","Data":" 方法的时候，会清理掉 key 为 null 的记录。使用完 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":"方法后最好手动调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"remove()"},{"Type":"NodeText","Data":"方法"}]},{"ID":"20240201213266-vwstcha","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213266-vwstcha","updated":"20240201213266"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static class Entry extends WeakReference\u003cThreadLocal\u003c?\u003e\u003e {\n    /** The value associated with this ThreadLocal. */\n    Object value;\n\n    Entry(ThreadLocal\u003c?\u003e k, Object v) {\n        super(k);\n        value = v;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213267-454xz65","Type":"NodeParagraph","Properties":{"id":"20240201213267-454xz65","updated":"20240201213267"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"弱引用介绍："}]},{"ID":"20240201213268-wskk1cz","Type":"NodeBlockquote","Properties":{"id":"20240201213268-wskk1cz","updated":"20240201213268"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213269-h6fdqub","Type":"NodeParagraph","Properties":{"id":"20240201213269-h6fdqub","updated":"20240201213269"},"Children":[{"Type":"NodeText","Data":"如果一个对象只具有弱引用，那就类似于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可有可无的生活用品"},{"Type":"NodeText","Data":"。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。"}]},{"ID":"20240201213270-tzr39vb","Type":"NodeParagraph","Properties":{"id":"20240201213270-tzr39vb","updated":"20240201213270"},"Children":[{"Type":"NodeText","Data":"弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。"}]}]},{"ID":"20240201213271-mvozyxc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213271-mvozyxc","updated":"20240201213271"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程池"}]},{"ID":"20240201213272-6wnrlyq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213272-6wnrlyq","updated":"20240201213272"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是线程池?"}]},{"ID":"20240201213273-hnvrmnn","Type":"NodeParagraph","Properties":{"id":"20240201213273-hnvrmnn","updated":"20240201213273"},"Children":[{"Type":"NodeText","Data":"顾名思义，线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。"}]},{"ID":"20240201213274-42tw6k4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213274-42tw6k4","updated":"20240201213274"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要用线程池？"}]},{"ID":"20240201213275-5trtu63","Type":"NodeParagraph","Properties":{"id":"20240201213275-5trtu63","updated":"20240201213275"},"Children":[{"Type":"NodeText","Data":"池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、HTTP 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。"}]},{"ID":"20240201213276-ttn3x5n","Type":"NodeParagraph","Properties":{"id":"20240201213276-ttn3x5n","updated":"20240201213276"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程池"},{"Type":"NodeText","Data":"提供了一种限制和管理资源（包括执行一个任务）的方式。 每个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程池"},{"Type":"NodeText","Data":"还维护一些基本统计信息，例如已完成任务的数量。"}]},{"ID":"20240201213277-1zx8j8w","Type":"NodeParagraph","Properties":{"id":"20240201213277-1zx8j8w","updated":"20240201213277"},"Children":[{"Type":"NodeText","Data":"这里借用《Java 并发编程的艺术》提到的来说一下"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用线程池的好处"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213278-tizxchq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213278-tizxchq","updated":"20240201213278"},"Children":[{"ID":"20240201213279-r4ku3lo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213279-r4ku3lo","updated":"20240201213279"},"Children":[{"ID":"20240201213280-3qc2oyu","Type":"NodeParagraph","Properties":{"id":"20240201213280-3qc2oyu","updated":"20240201213280"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"降低资源消耗"},{"Type":"NodeText","Data":"。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。"}]}]},{"ID":"20240201213281-1f57ok9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213281-1f57ok9","updated":"20240201213281"},"Children":[{"ID":"20240201213282-he9d927","Type":"NodeParagraph","Properties":{"id":"20240201213282-he9d927","updated":"20240201213282"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提高响应速度"},{"Type":"NodeText","Data":"。当任务到达时，任务可以不需要等到线程创建就能立即执行。"}]}]},{"ID":"20240201213283-aldgdqh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213283-aldgdqh","updated":"20240201213283"},"Children":[{"ID":"20240201213284-8n1unyd","Type":"NodeParagraph","Properties":{"id":"20240201213284-8n1unyd","updated":"20240201213284"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提高线程的可管理性"},{"Type":"NodeText","Data":"。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。"}]}]}]},{"ID":"20240201213285-tce2lct","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213285-tce2lct","updated":"20240201213285"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何创建线程池？"}]},{"ID":"20240201213286-yjtlyj2","Type":"NodeParagraph","Properties":{"id":"20240201213286-yjtlyj2","updated":"20240201213286"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方式一：通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"构造函数来创建（推荐）。"}]},{"ID":"20240201213287-j23ak66","Type":"NodeParagraph","Properties":{"id":"20240201213287-j23ak66","updated":"20240201213287"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"通过构造方法实现","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/threadpoolexecutor构造函数-20240201213826-kl0wwl8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213288-5actb45","Type":"NodeParagraph","Properties":{"id":"20240201213288-5actb45","updated":"20240201213288"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方式二：通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Executor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 框架的工具类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Executors"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 来创建。"}]},{"ID":"20240201213289-od81rk9","Type":"NodeParagraph","Properties":{"id":"20240201213289-od81rk9","updated":"20240201213289"},"Children":[{"Type":"NodeText","Data":"我们可以创建多种类型的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213290-c2fznef","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213290-c2fznef","updated":"20240201213290"},"Children":[{"ID":"20240201213291-9t900ci","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213291-9t900ci","updated":"20240201213291"},"Children":[{"ID":"20240201213292-mk4yeey","Type":"NodeParagraph","Properties":{"id":"20240201213292-mk4yeey","updated":"20240201213292"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeText","Data":"：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。"}]}]},{"ID":"20240201213293-grpmp9j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213293-grpmp9j","updated":"20240201213293"},"Children":[{"ID":"20240201213294-pfjm6g5","Type":"NodeParagraph","Properties":{"id":"20240201213294-pfjm6g5","updated":"20240201213294"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SingleThreadExecutor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。"}]}]},{"ID":"20240201213295-p9wt5v3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213295-p9wt5v3","updated":"20240201213295"},"Children":[{"ID":"20240201213296-e6snwfb","Type":"NodeParagraph","Properties":{"id":"20240201213296-e6snwfb","updated":"20240201213296"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"CachedThreadPool"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 该方法返回一个可根据实际情况调整线程数量的线程池。初始大小为 0。当有新任务提交时，如果当前线程池中没有线程可用，它会创建一个新的线程来处理该任务。如果在一段时间内（默认为 60 秒）没有新任务提交，核心线程会超时并被销毁，从而缩小线程池的大小。"}]}]},{"ID":"20240201213297-ad16whk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213297-ad16whk","updated":"20240201213297"},"Children":[{"ID":"20240201213298-1otwnow","Type":"NodeParagraph","Properties":{"id":"20240201213298-1otwnow","updated":"20240201213298"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ScheduledThreadPool"},{"Type":"NodeText","Data":"：该方法返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。"}]}]}]},{"ID":"20240201213299-8fg2j1d","Type":"NodeParagraph","Properties":{"id":"20240201213299-8fg2j1d","updated":"20240201213299"},"Children":[{"Type":"NodeText","Data":"对应 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":" 工具类中的方法如图所示："}]},{"ID":"20240201213300-o3c1ypg","Type":"NodeParagraph","Properties":{"id":"20240201213300-o3c1ypg","updated":"20240201213300"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/executors-inner-threadpool.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213301-dj5vv1p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213301-dj5vv1p","updated":"20240201213301"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么不推荐使用内置线程池？"}]},{"ID":"20240201213302-mbn10y9","Type":"NodeParagraph","Properties":{"id":"20240201213302-mbn10y9","updated":"20240201213302"},"Children":[{"Type":"NodeText","Data":"在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。"}]},{"ID":"20240201213303-gvi7dev","Type":"NodeParagraph","Properties":{"id":"20240201213303-gvi7dev","updated":"20240201213303"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么呢？"}]},{"ID":"20240201213304-1ax1gdc","Type":"NodeBlockquote","Properties":{"id":"20240201213304-1ax1gdc","updated":"20240201213304"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213305-nbp5u1b","Type":"NodeParagraph","Properties":{"id":"20240201213305-nbp5u1b","updated":"20240201213305"},"Children":[{"Type":"NodeText","Data":"使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。"}]}]},{"ID":"20240201213306-ow5xtay","Type":"NodeParagraph","Properties":{"id":"20240201213306-ow5xtay","updated":"20240201213306"},"Children":[{"Type":"NodeText","Data":"另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":" 去创建，而是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险"}]},{"ID":"20240201213307-jhrpzrv","Type":"NodeParagraph","Properties":{"id":"20240201213307-jhrpzrv","updated":"20240201213307"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":" 返回线程池对象的弊端如下(后文会详细介绍到)："}]},{"ID":"20240201213308-gkggmxe","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213308-gkggmxe","updated":"20240201213308"},"Children":[{"ID":"20240201213309-oveh6v1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213309-oveh6v1","updated":"20240201213309"},"Children":[{"ID":"20240201213310-tc7sakk","Type":"NodeParagraph","Properties":{"id":"20240201213310-tc7sakk","updated":"20240201213310"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SingleThreadExecutor"},{"Type":"NodeText","Data":"：使用的是无界的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedBlockingQueue"},{"Type":"NodeText","Data":"，任务队列最大长度为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":",可能堆积大量的请求，从而导致 OOM。"}]}]},{"ID":"20240201213311-r4bqtny","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213311-r4bqtny","updated":"20240201213311"},"Children":[{"ID":"20240201213312-8m87p11","Type":"NodeParagraph","Properties":{"id":"20240201213312-8m87p11","updated":"20240201213312"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"CachedThreadPool"},{"Type":"NodeText","Data":"：使用的是同步队列 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SynchronousQueue"},{"Type":"NodeText","Data":", 允许创建的线程数量为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":" ，如果任务数量过多且执行速度较慢，可能会创建大量的线程，从而导致 OOM。"}]}]},{"ID":"20240201213313-z0qva7z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213313-z0qva7z","updated":"20240201213313"},"Children":[{"ID":"20240201213314-g7z1vuo","Type":"NodeParagraph","Properties":{"id":"20240201213314-g7z1vuo","updated":"20240201213314"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ScheduledThreadPool"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SingleThreadScheduledExecutor"},{"Type":"NodeText","Data":" : 使用的无界的延迟阻塞队列"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayedWorkQueue"},{"Type":"NodeText","Data":"，任务队列最大长度为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":",可能堆积大量的请求，从而导致 OOM。"}]}]}]},{"ID":"20240201213315-nz3wu7v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213315-nz3wu7v","updated":"20240201213315"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 无界队列 LinkedBlockingQueue\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n\n    return new ThreadPoolExecutor(nThreads, nThreads,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue\u003cRunnable\u003e());\n\n}\n\n// 无界队列 LinkedBlockingQueue\npublic static ExecutorService newSingleThreadExecutor() {\n\n    return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue\u003cRunnable\u003e()));\n\n}\n\n// 同步队列 SynchronousQueue，没有容量，最大线程数是 Integer.MAX_VALUE`\npublic static ExecutorService newCachedThreadPool() {\n\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,60L, TimeUnit.SECONDS,new SynchronousQueue\u003cRunnable\u003e());\n\n}\n\n// DelayedWorkQueue（延迟阻塞队列）\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n    return new ScheduledThreadPoolExecutor(corePoolSize);\n}\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213316-57aax6k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213316-57aax6k","updated":"20240201213316"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程池常见参数有哪些？如何解释？"}]},{"ID":"20240201213317-t5j3nvl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213317-t5j3nvl","updated":"20240201213317"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    /**\n     * 用给定的初始参数创建一个新的ThreadPoolExecutor。\n     */\n    public ThreadPoolExecutor(int corePoolSize,//线程池的核心线程数量\n                              int maximumPoolSize,//线程池的最大线程数\n                              long keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间\n                              TimeUnit unit,//时间单位\n                              BlockingQueue\u003cRunnable\u003e workQueue,//任务队列，用来储存等待执行任务的队列\n                              ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可\n                              RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务\n                               ) {\n        if (corePoolSize \u003c 0 ||\n            maximumPoolSize \u003c= 0 ||\n            maximumPoolSize \u003c corePoolSize ||\n            keepAliveTime \u003c 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213318-5apog5z","Type":"NodeParagraph","Properties":{"id":"20240201213318-5apog5z","updated":"20240201213318"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 3 个最重要的参数："}]},{"ID":"20240201213319-ed6e0lr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213319-ed6e0lr","updated":"20240201213319"},"Children":[{"ID":"20240201213320-najdogf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213320-najdogf","updated":"20240201213320"},"Children":[{"ID":"20240201213321-fyihauu","Type":"NodeParagraph","Properties":{"id":"20240201213321-fyihauu","updated":"20240201213321"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" :"},{"Type":"NodeText","Data":" 任务队列未达到队列容量时，最大可以同时运行的线程数量。"}]}]},{"ID":"20240201213322-1po08mr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213322-1po08mr","updated":"20240201213322"},"Children":[{"ID":"20240201213323-6w3hzdv","Type":"NodeParagraph","Properties":{"id":"20240201213323-6w3hzdv","updated":"20240201213323"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"maximumPoolSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" :"},{"Type":"NodeText","Data":" 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。"}]}]},{"ID":"20240201213324-qkfgar9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213324-qkfgar9","updated":"20240201213324"},"Children":[{"ID":"20240201213325-0v7mjku","Type":"NodeParagraph","Properties":{"id":"20240201213325-0v7mjku","updated":"20240201213325"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"workQueue"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":":"},{"Type":"NodeText","Data":" 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。"}]}]}]},{"ID":"20240201213326-oujc5wn","Type":"NodeParagraph","Properties":{"id":"20240201213326-oujc5wn","updated":"20240201213326"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":"其他常见参数 :"}]},{"ID":"20240201213327-7u5rabi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213327-7u5rabi","updated":"20240201213327"},"Children":[{"ID":"20240201213328-rmskwt1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213328-rmskwt1","updated":"20240201213328"},"Children":[{"ID":"20240201213329-ns8489a","Type":"NodeParagraph","Properties":{"id":"20240201213329-ns8489a","updated":"20240201213329"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"keepAliveTime"},{"Type":"NodeText","Data":":线程池中的线程数量大于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeText","Data":" 的时候，如果这时没有新的任务提交，多余的空闲线程不会立即销毁，而是会等待，直到等待的时间超过了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"keepAliveTime"},{"Type":"NodeText","Data":"才会被回收销毁，线程池回收线程时，会对核心线程和非核心线程一视同仁，直到线程池中线程的数量等于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeText","Data":" ，回收过程才会停止。"}]}]},{"ID":"20240201213330-3lfvge3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213330-3lfvge3","updated":"20240201213330"},"Children":[{"ID":"20240201213331-zygf4ol","Type":"NodeParagraph","Properties":{"id":"20240201213331-zygf4ol","updated":"20240201213331"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"unit"},{"Type":"NodeText","Data":" : "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"keepAliveTime"},{"Type":"NodeText","Data":" 参数的时间单位。"}]}]},{"ID":"20240201213332-8et8939","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213332-8et8939","updated":"20240201213332"},"Children":[{"ID":"20240201213333-etdq0cb","Type":"NodeParagraph","Properties":{"id":"20240201213333-etdq0cb","updated":"20240201213333"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"threadFactory"},{"Type":"NodeText","Data":" :executor 创建新线程的时候会用到。"}]}]},{"ID":"20240201213334-au80qxn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213334-au80qxn","updated":"20240201213334"},"Children":[{"ID":"20240201213335-7yhzerj","Type":"NodeParagraph","Properties":{"id":"20240201213335-7yhzerj","updated":"20240201213335"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"handler"},{"Type":"NodeText","Data":" :饱和策略。关于饱和策略下面单独介绍一下。"}]}]}]},{"ID":"20240201213336-cgff247","Type":"NodeParagraph","Properties":{"id":"20240201213336-cgff247","updated":"20240201213336"},"Children":[{"Type":"NodeText","Data":"下面这张图可以加深你对线程池中各个参数的相互关系的理解（图片来源：《Java 性能调优实战》）："}]},{"ID":"20240201213337-c987sgi","Type":"NodeParagraph","Properties":{"id":"20240201213337-c987sgi","updated":"20240201213337"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"线程池各个参数的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/线程池各个参数之间的关系-20240201213826-odjlpxd.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213338-czsdiy7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213338-czsdiy7","updated":"20240201213338"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程池的饱和策略有哪些？"}]},{"ID":"20240201213339-9yn1nf9","Type":"NodeParagraph","Properties":{"id":"20240201213339-9yn1nf9","updated":"20240201213339"},"Children":[{"Type":"NodeText","Data":"如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 定义一些策略:"}]},{"ID":"20240201213340-fs1alnd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213340-fs1alnd","updated":"20240201213340"},"Children":[{"ID":"20240201213341-on41up0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213341-on41up0","updated":"20240201213341"},"Children":[{"ID":"20240201213342-slox0k7","Type":"NodeParagraph","Properties":{"id":"20240201213342-slox0k7","updated":"20240201213342"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor.AbortPolicy"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RejectedExecutionException"},{"Type":"NodeText","Data":"来拒绝新任务的处理。"}]}]},{"ID":"20240201213343-1swe539","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213343-1swe539","updated":"20240201213343"},"Children":[{"ID":"20240201213344-fiogmxv","Type":"NodeParagraph","Properties":{"id":"20240201213344-fiogmxv","updated":"20240201213344"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor.CallerRunsPolicy"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 调用执行自己的线程运行任务，也就是直接在调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"execute"},{"Type":"NodeText","Data":"方法的线程中运行("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"run"},{"Type":"NodeText","Data":")被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。"}]}]},{"ID":"20240201213345-1mscje7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213345-1mscje7","updated":"20240201213345"},"Children":[{"ID":"20240201213346-6e5hy29","Type":"NodeParagraph","Properties":{"id":"20240201213346-6e5hy29","updated":"20240201213346"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor.DiscardPolicy"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 不处理新任务，直接丢弃掉。"}]}]},{"ID":"20240201213347-x24xe1l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213347-x24xe1l","updated":"20240201213347"},"Children":[{"ID":"20240201213348-4boi84j","Type":"NodeParagraph","Properties":{"id":"20240201213348-4boi84j","updated":"20240201213348"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadPoolExecutor.DiscardOldestPolicy"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"："},{"Type":"NodeText","Data":" 此策略将丢弃最早的未处理的任务请求。"}]}]}]},{"ID":"20240201213349-9apt7nr","Type":"NodeParagraph","Properties":{"id":"20240201213349-9apt7nr","updated":"20240201213349"},"Children":[{"Type":"NodeText","Data":"举个例子：Spring 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolTaskExecutor"},{"Type":"NodeText","Data":" 或者我们直接通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 的构造函数创建线程池的时候，当我们不指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RejectedExecutionHandler"},{"Type":"NodeText","Data":" 饱和策略来配置线程池的时候，默认使用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbortPolicy"},{"Type":"NodeText","Data":"。在这种饱和策略下，如果队列满了，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 将抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RejectedExecutionException"},{"Type":"NodeText","Data":" 异常来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。如果不想丢弃任务的话，可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CallerRunsPolicy"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CallerRunsPolicy"},{"Type":"NodeText","Data":" 和其他的几个策略不同，它既不会抛弃任务，也不会抛出异常，而是将任务回退给调用者，使用调用者的线程来执行任务"}]},{"ID":"20240201213350-1atqg0l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213350-1atqg0l","updated":"20240201213350"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public static class CallerRunsPolicy implements RejectedExecutionHandler {\n\n        public CallerRunsPolicy() { }\n\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                // 直接主线程执行，而不是线程池中的线程执行\n                r.run();\n            }\n        }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213351-2nwiwov","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213351-2nwiwov","updated":"20240201213351"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程池常用的阻塞队列有哪些？"}]},{"ID":"20240201213352-tb8g69l","Type":"NodeParagraph","Properties":{"id":"20240201213352-tb8g69l","updated":"20240201213352"},"Children":[{"Type":"NodeText","Data":"新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。"}]},{"ID":"20240201213353-zq18w5j","Type":"NodeParagraph","Properties":{"id":"20240201213353-zq18w5j","updated":"20240201213353"},"Children":[{"Type":"NodeText","Data":"不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。"}]},{"ID":"20240201213354-xn98ptu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213354-xn98ptu","updated":"20240201213354"},"Children":[{"ID":"20240201213355-wy1s3tw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213355-wy1s3tw","updated":"20240201213355"},"Children":[{"ID":"20240201213356-epz4ova","Type":"NodeParagraph","Properties":{"id":"20240201213356-epz4ova","updated":"20240201213356"},"Children":[{"Type":"NodeText","Data":"容量为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedBlockingQueue"},{"Type":"NodeText","Data":"（无界队列）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SingleThreadExector"},{"Type":"NodeText","Data":" 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeText","Data":"最多只能创建核心线程数的线程（核心线程数和最大线程数相等），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SingleThreadExector"},{"Type":"NodeText","Data":"只能创建一个线程（核心线程数和最大线程数都是 1），二者的任务队列永远不会被放满。"}]}]},{"ID":"20240201213357-mjp9xhl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213357-mjp9xhl","updated":"20240201213357"},"Children":[{"ID":"20240201213358-t3u13xd","Type":"NodeParagraph","Properties":{"id":"20240201213358-t3u13xd","updated":"20240201213358"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SynchronousQueue"},{"Type":"NodeText","Data":"（同步队列）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CachedThreadPool"},{"Type":"NodeText","Data":" 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SynchronousQueue"},{"Type":"NodeText","Data":" 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CachedThreadPool"},{"Type":"NodeText","Data":" 的最大线程数是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":" ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。"}]}]},{"ID":"20240201213359-h8u1k39","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213359-h8u1k39","updated":"20240201213359"},"Children":[{"ID":"20240201213360-gfubo42","Type":"NodeParagraph","Properties":{"id":"20240201213360-gfubo42","updated":"20240201213360"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayedWorkQueue"},{"Type":"NodeText","Data":"（延迟阻塞队列）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ScheduledThreadPool"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SingleThreadScheduledExecutor"},{"Type":"NodeText","Data":" 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayedWorkQueue"},{"Type":"NodeText","Data":" 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelayedWorkQueue"},{"Type":"NodeText","Data":" 添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Integer.MAX_VALUE"},{"Type":"NodeText","Data":"，所以最多只能创建核心线程数的线程。"}]}]}]},{"ID":"20240201213361-kr1a3ir","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213361-kr1a3ir","updated":"20240201213361"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程池处理任务的流程了解吗？"}]},{"ID":"20240201213362-ow3e9du","Type":"NodeParagraph","Properties":{"id":"20240201213362-ow3e9du","updated":"20240201213362"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图解线程池实现原理","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/%E5%9B%BE%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213363-jd3boze","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213363-jd3boze","updated":"20240201213363"},"Children":[{"ID":"20240201213364-3aw16k3","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213364-3aw16k3","updated":"20240201213364"},"Children":[{"ID":"20240201213365-dylz1eh","Type":"NodeParagraph","Properties":{"id":"20240201213365-dylz1eh","updated":"20240201213365"},"Children":[{"Type":"NodeText","Data":"如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。"}]}]},{"ID":"20240201213366-ify3oky","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213366-ify3oky","updated":"20240201213366"},"Children":[{"ID":"20240201213367-tf6phk7","Type":"NodeParagraph","Properties":{"id":"20240201213367-tf6phk7","updated":"20240201213367"},"Children":[{"Type":"NodeText","Data":"如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。"}]}]},{"ID":"20240201213368-zq3uoge","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213368-zq3uoge","updated":"20240201213368"},"Children":[{"ID":"20240201213369-jpuoevv","Type":"NodeParagraph","Properties":{"id":"20240201213369-jpuoevv","updated":"20240201213369"},"Children":[{"Type":"NodeText","Data":"如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。"}]}]},{"ID":"20240201213370-24zbr2z","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213370-24zbr2z","updated":"20240201213370"},"Children":[{"ID":"20240201213371-gynwtns","Type":"NodeParagraph","Properties":{"id":"20240201213371-gynwtns","updated":"20240201213371"},"Children":[{"Type":"NodeText","Data":"如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RejectedExecutionHandler.rejectedExecution()"},{"Type":"NodeText","Data":"方法。"}]}]}]},{"ID":"20240201213372-ym4s00l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213372-ym4s00l","updated":"20240201213372"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何给线程池命名？"}]},{"ID":"20240201213373-u6xazmw","Type":"NodeParagraph","Properties":{"id":"20240201213373-u6xazmw","updated":"20240201213373"},"Children":[{"Type":"NodeText","Data":"初始化线程池的时候需要显示命名（设置线程池名称前缀），有利于定位问题。"}]},{"ID":"20240201213374-hyswa2k","Type":"NodeParagraph","Properties":{"id":"20240201213374-hyswa2k","updated":"20240201213374"},"Children":[{"Type":"NodeText","Data":"默认情况下创建的线程名字类似 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"pool-1-thread-n"},{"Type":"NodeText","Data":" 这样的，没有业务含义，不利于我们定位问题。"}]},{"ID":"20240201213375-ffg9dyq","Type":"NodeParagraph","Properties":{"id":"20240201213375-ffg9dyq","updated":"20240201213375"},"Children":[{"Type":"NodeText","Data":"给线程池里的线程命名通常有下面两种方式："}]},{"ID":"20240201213376-rhqiszb","Type":"NodeParagraph","Properties":{"id":"20240201213376-rhqiszb","updated":"20240201213376"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、利用 guava 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadFactoryBuilder"}]},{"ID":"20240201213377-y4lh3e6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213377-y4lh3e6","updated":"20240201213377"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ThreadFactory threadFactory = new ThreadFactoryBuilder()\n                        .setNameFormat(threadNamePrefix + \"-%d\")\n                        .setDaemon(true).build();\nExecutorService threadPool = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213378-8odjcrz","Type":"NodeParagraph","Properties":{"id":"20240201213378-8odjcrz","updated":"20240201213378"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、自己实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ThreadFactory"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"。"}]},{"ID":"20240201213379-9xlf9ub","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213379-9xlf9ub","updated":"20240201213379"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * 线程工厂，它设置线程名称，有利于我们定位问题。\n */\npublic final class NamingThreadFactory implements ThreadFactory {\n\n    private final AtomicInteger threadNum = new AtomicInteger();\n    private final String name;\n\n    /**\n     * 创建一个带名字的线程池生产工厂\n     */\n    public NamingThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(r);\n        t.setName(name + \" [#\" + threadNum.incrementAndGet() + \"]\");\n        return t;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213380-kfj1j46","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213380-kfj1j46","updated":"20240201213380"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何设定线程池的大小？"}]},{"ID":"20240201213381-hykkcf6","Type":"NodeParagraph","Properties":{"id":"20240201213381-hykkcf6","updated":"20240201213381"},"Children":[{"Type":"NodeText","Data":"很多人甚至可能都会觉得把线程池配置过大一点比较好！我觉得这明显是有问题的。就拿我们生活中非常常见的一例子来说："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"并不是人多就能把事情做好，增加了沟通交流成本。你本来一件事情只需要 3 个人做，你硬是拉来了 6 个人，会提升做事效率嘛？我想并不会。"},{"Type":"NodeText","Data":" 线程数量过多的影响也是和我们分配多少人做事情一样，对于多线程这个场景来说主要是增加了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"上下文切换"},{"Type":"NodeText","Data":"成本。不清楚什么是上下文切换的话，可以看我下面的介绍。"}]},{"ID":"20240201213382-nc80z8m","Type":"NodeBlockquote","Properties":{"id":"20240201213382-nc80z8m","updated":"20240201213382"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213383-ebq1oye","Type":"NodeParagraph","Properties":{"id":"20240201213383-ebq1oye","updated":"20240201213383"},"Children":[{"Type":"NodeText","Data":"上下文切换："}]},{"ID":"20240201213384-tiv0a61","Type":"NodeParagraph","Properties":{"id":"20240201213384-tiv0a61","updated":"20240201213384"},"Children":[{"Type":"NodeText","Data":"多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任务从保存到再加载的过程就是一次上下文切换"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213385-qhibkhf","Type":"NodeParagraph","Properties":{"id":"20240201213385-qhibkhf","updated":"20240201213385"},"Children":[{"Type":"NodeText","Data":"上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。"}]},{"ID":"20240201213386-3vt4yfe","Type":"NodeParagraph","Properties":{"id":"20240201213386-3vt4yfe","updated":"20240201213386"},"Children":[{"Type":"NodeText","Data":"Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。"}]}]},{"ID":"20240201213387-6icyen8","Type":"NodeParagraph","Properties":{"id":"20240201213387-6icyen8","updated":"20240201213387"},"Children":[{"Type":"NodeText","Data":"类比于实现世界中的人类通过合作做某件事情，我们可以肯定的一点是线程池大小设置过大或者过小都会有问题，合适的才是最好。"}]},{"ID":"20240201213388-5crlnfs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213388-5crlnfs","updated":"20240201213388"},"Children":[{"ID":"20240201213389-uikvfnm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213389-uikvfnm","updated":"20240201213389"},"Children":[{"ID":"20240201213390-r1f3hww","Type":"NodeParagraph","Properties":{"id":"20240201213390-r1f3hww","updated":"20240201213390"},"Children":[{"Type":"NodeText","Data":"如果我们设置的线程池数量太小的话，如果同一时间有大量任务/请求需要处理，可能会导致大量的请求/任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务/请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。这样很明显是有问题的，CPU 根本没有得到充分利用。"}]}]},{"ID":"20240201213391-xjej8m3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213391-xjej8m3","updated":"20240201213391"},"Children":[{"ID":"20240201213392-fl1fx0m","Type":"NodeParagraph","Properties":{"id":"20240201213392-fl1fx0m","updated":"20240201213392"},"Children":[{"Type":"NodeText","Data":"如果我们设置线程数量太大，大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。"}]}]}]},{"ID":"20240201213393-tbs9uj2","Type":"NodeParagraph","Properties":{"id":"20240201213393-tbs9uj2","updated":"20240201213393"},"Children":[{"Type":"NodeText","Data":"有一个简单并且适用面比较广的公式："}]},{"ID":"20240201213394-dt7aoz7","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213394-dt7aoz7","updated":"20240201213394"},"Children":[{"ID":"20240201213395-lbsr9pw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213395-lbsr9pw","updated":"20240201213395"},"Children":[{"ID":"20240201213396-771bp14","Type":"NodeParagraph","Properties":{"id":"20240201213396-771bp14","updated":"20240201213396"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU 密集型任务(N+1)："},{"Type":"NodeText","Data":" 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。"}]}]},{"ID":"20240201213397-6lbbueo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213397-6lbbueo","updated":"20240201213397"},"Children":[{"ID":"20240201213398-zouu92l","Type":"NodeParagraph","Properties":{"id":"20240201213398-zouu92l","updated":"20240201213398"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"I/O 密集型任务(2N)："},{"Type":"NodeText","Data":" 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。"}]}]}]},{"ID":"20240201213399-vtq3vas","Type":"NodeParagraph","Properties":{"id":"20240201213399-vtq3vas","updated":"20240201213399"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何判断是 CPU 密集任务还是 IO 密集任务？"}]},{"ID":"20240201213400-1t1o8po","Type":"NodeParagraph","Properties":{"id":"20240201213400-1t1o8po","updated":"20240201213400"},"Children":[{"Type":"NodeText","Data":"CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。"}]},{"ID":"20240201213401-dnpzoqk","Type":"NodeBlockquote","Properties":{"id":"20240201213401-dnpzoqk","updated":"20240201213401"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213402-df3pqac","Type":"NodeParagraph","Properties":{"id":"20240201213402-df3pqac","updated":"20240201213402"},"Children":[{"Type":"NodeText","Data":"🌈 拓展一下（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1737","TextMarkTextContent":"issue#1737"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213403-3ajdg3f","Type":"NodeParagraph","Properties":{"id":"20240201213403-3ajdg3f","updated":"20240201213403"},"Children":[{"Type":"NodeText","Data":"线程数更严谨的计算的方法应该是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"最佳线程数 = N（CPU 核心数）∗（1+WT（线程等待时间）/ST（线程计算时间））"},{"Type":"NodeText","Data":"，其中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WT（线程等待时间）=线程运行总时间 - ST（线程计算时间）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213404-2sekcqx","Type":"NodeParagraph","Properties":{"id":"20240201213404-2sekcqx","updated":"20240201213404"},"Children":[{"Type":"NodeText","Data":"线程等待时间所占比例越高，需要越多线程。线程计算时间所占比例越高，需要越少线程。"}]},{"ID":"20240201213405-d9kyup2","Type":"NodeParagraph","Properties":{"id":"20240201213405-d9kyup2","updated":"20240201213405"},"Children":[{"Type":"NodeText","Data":"我们可以通过 JDK 自带的工具 VisualVM 来查看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WT/ST"},{"Type":"NodeText","Data":" 比例。"}]},{"ID":"20240201213406-qzd0eeo","Type":"NodeParagraph","Properties":{"id":"20240201213406-qzd0eeo","updated":"20240201213406"},"Children":[{"Type":"NodeText","Data":"CPU 密集型任务的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WT/ST"},{"Type":"NodeText","Data":" 接近或者等于 0，因此， 线程数可以设置为 N（CPU 核心数）∗（1+0）= N，和我们上面说的 N（CPU 核心数）+1 差不多。"}]},{"ID":"20240201213407-89x0t22","Type":"NodeParagraph","Properties":{"id":"20240201213407-89x0t22","updated":"20240201213407"},"Children":[{"Type":"NodeText","Data":"IO 密集型任务下，几乎全是线程等待时间，从理论上来说，你就可以将线程数设置为 2N（按道理来说，WT/ST 的结果应该比较大，这里选择 2N 的原因应该是为了避免创建过多线程吧）。"}]}]},{"ID":"20240201213408-rcvoemq","Type":"NodeParagraph","Properties":{"id":"20240201213408-rcvoemq","updated":"20240201213408"},"Children":[{"Type":"NodeText","Data":"公示也只是参考，具体还是要根据项目实际线上运行情况来动态调整。我在后面介绍的美团的线程池参数动态配置这种方案就非常不错，很实用！"}]},{"ID":"20240201213409-xado9z2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213409-xado9z2","updated":"20240201213409"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何动态修改线程池的参数？"}]},{"ID":"20240201213410-9mcge32","Type":"NodeParagraph","Properties":{"id":"20240201213410-9mcge32","updated":"20240201213410"},"Children":[{"Type":"NodeText","Data":"美团技术团队在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html","TextMarkTextContent":"《Java 线程池实现原理及其在美团业务中的实践》"},{"Type":"NodeText","Data":"这篇文章中介绍到对线程池参数实现可自定义配置的思路和方法。"}]},{"ID":"20240201213411-4slqf66","Type":"NodeParagraph","Properties":{"id":"20240201213411-4slqf66","updated":"20240201213411"},"Children":[{"Type":"NodeText","Data":"美团技术团队的思路是主要对线程池的核心参数实现自定义可配置。这三个核心参数是："}]},{"ID":"20240201213412-7z7lk1g","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213412-7z7lk1g","updated":"20240201213412"},"Children":[{"ID":"20240201213413-6gnjn0l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213413-6gnjn0l","updated":"20240201213413"},"Children":[{"ID":"20240201213414-qxxqlf3","Type":"NodeParagraph","Properties":{"id":"20240201213414-qxxqlf3","updated":"20240201213414"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" :"},{"Type":"NodeText","Data":" 核心线程数线程数定义了最小可以同时运行的线程数量。"}]}]},{"ID":"20240201213415-9rdh0cu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213415-9rdh0cu","updated":"20240201213415"},"Children":[{"ID":"20240201213416-cejg4nx","Type":"NodeParagraph","Properties":{"id":"20240201213416-cejg4nx","updated":"20240201213416"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"maximumPoolSize"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" :"},{"Type":"NodeText","Data":" 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。"}]}]},{"ID":"20240201213417-ua04lxn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213417-ua04lxn","updated":"20240201213417"},"Children":[{"ID":"20240201213418-f2v9l8f","Type":"NodeParagraph","Properties":{"id":"20240201213418-f2v9l8f","updated":"20240201213418"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"workQueue"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":":"},{"Type":"NodeText","Data":" 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。"}]}]}]},{"ID":"20240201213419-jezvz8p","Type":"NodeParagraph","Properties":{"id":"20240201213419-jezvz8p","updated":"20240201213419"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么是这三个参数？"}]},{"ID":"20240201213420-0ermdg7","Type":"NodeParagraph","Properties":{"id":"20240201213420-0ermdg7","updated":"20240201213420"},"Children":[{"Type":"NodeText","Data":"我在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/concurrent/java-thread-pool-summary.html","TextMarkTextContent":"Java 线程池详解"},{"Type":"NodeText","Data":" 这篇文章中就说过这三个参数是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 最重要的参数，它们基本决定了线程池对于任务的处理策略。"}]},{"ID":"20240201213421-mjp3sla","Type":"NodeParagraph","Properties":{"id":"20240201213421-mjp3sla","updated":"20240201213421"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何支持参数动态配置？"},{"Type":"NodeText","Data":" 且看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 提供的下面这些方法。"}]},{"ID":"20240201213422-l1vjy01","Type":"NodeParagraph","Properties":{"id":"20240201213422-l1vjy01","updated":"20240201213422"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadpoolexecutor-methods.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213423-y44a7oh","Type":"NodeParagraph","Properties":{"id":"20240201213423-y44a7oh","updated":"20240201213423"},"Children":[{"Type":"NodeText","Data":"格外需要注意的是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeText","Data":"， 程序运行期间的时候，我们调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setCorePoolSize（）"},{"Type":"NodeText","Data":"这个方法的话，线程池会首先判断当前工作线程数是否大于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"corePoolSize"},{"Type":"NodeText","Data":"，如果大于的话就会回收工作线程。"}]},{"ID":"20240201213424-4ehytz4","Type":"NodeParagraph","Properties":{"id":"20240201213424-4ehytz4","updated":"20240201213424"},"Children":[{"Type":"NodeText","Data":"另外，你也看到了上面并没有动态指定队列长度的方法，美团的方式是自定义了一个叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ResizableCapacityLinkedBlockIngQueue"},{"Type":"NodeText","Data":" 的队列（主要就是把"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedBlockingQueue"},{"Type":"NodeText","Data":"的 capacity 字段的 final 关键字修饰给去掉了，让它变为可变的）。"}]},{"ID":"20240201213425-lyi9vu3","Type":"NodeParagraph","Properties":{"id":"20240201213425-lyi9vu3","updated":"20240201213425"},"Children":[{"Type":"NodeText","Data":"最终实现的可动态修改线程池参数效果如下。👏👏👏"}]},{"ID":"20240201213426-kq6ktt6","Type":"NodeParagraph","Properties":{"id":"20240201213426-kq6ktt6","updated":"20240201213426"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"动态配置线程池参数最终效果","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/meituan-dynamically-configuring-thread-pool-parameters.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213427-xc2z6um","Type":"NodeParagraph","Properties":{"id":"20240201213427-xc2z6um","updated":"20240201213427"},"Children":[{"Type":"NodeText","Data":"还没看够？推荐 why 神的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/9HLuPcoWmTqAeFKa1kj-_A","TextMarkTextContent":"如何设置线程池参数？美团给出了一个让面试官虎躯一震的回答。"},{"Type":"NodeText","Data":"这篇文章，深度剖析，很不错哦！"}]},{"ID":"20240201213428-pakam5y","Type":"NodeParagraph","Properties":{"id":"20240201213428-pakam5y","updated":"20240201213428"},"Children":[{"Type":"NodeText","Data":"如果我们的项目也想要实现这种效果的话，可以借助现成的开源项目："}]},{"ID":"20240201213429-556dvnf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213429-556dvnf","updated":"20240201213429"},"Children":[{"ID":"20240201213430-0oacosr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213430-0oacosr","updated":"20240201213430"},"Children":[{"ID":"20240201213431-97e2yry","Type":"NodeParagraph","Properties":{"id":"20240201213431-97e2yry","updated":"20240201213431"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/opengoofy/hippo4j","TextMarkTextContent":"Hippo4j"},{"Type":"NodeText","Data":"：异步线程池框架，支持线程池动态变更\u0026监控\u0026报警，无需修改代码轻松引入。支持多种使用模式，轻松引入，致力于提高系统运行保障能力。"}]}]},{"ID":"20240201213432-st2t7gm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213432-st2t7gm","updated":"20240201213432"},"Children":[{"ID":"20240201213433-ohwj4n0","Type":"NodeParagraph","Properties":{"id":"20240201213433-ohwj4n0","updated":"20240201213433"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/dromara/dynamic-tp","TextMarkTextContent":"Dynamic TP"},{"Type":"NodeText","Data":"：轻量级动态线程池，内置监控告警功能，集成三方中间件线程池管理，基于主流配置中心（已支持 Nacos、Apollo，Zookeeper、Consul、Etcd，可通过 SPI 自定义实现）。"}]}]}]},{"ID":"20240201213434-fydjkje","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213434-fydjkje","updated":"20240201213434"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何设计一个能够根据任务的优先级来执行的线程池？"}]},{"ID":"20240201213435-lgz5e1k","Type":"NodeParagraph","Properties":{"id":"20240201213435-lgz5e1k","updated":"20240201213435"},"Children":[{"Type":"NodeText","Data":"这是一个常见的面试问题，本质其实还是在考察求职者对于线程池以及阻塞队列的掌握。"}]},{"ID":"20240201213436-ml8or65","Type":"NodeParagraph","Properties":{"id":"20240201213436-ml8or65","updated":"20240201213436"},"Children":[{"Type":"NodeText","Data":"我们上面也提到了，不同的线程池会选用不同的阻塞队列作为任务队列，比如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeText","Data":" 使用的是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LinkedBlockingQueue"},{"Type":"NodeText","Data":"（无界队列），由于队列永远不会被放满，因此"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FixedThreadPool"},{"Type":"NodeText","Data":"最多只能创建核心线程数的线程。"}]},{"ID":"20240201213437-zk0l0af","Type":"NodeParagraph","Properties":{"id":"20240201213437-zk0l0af","updated":"20240201213437"},"Children":[{"Type":"NodeText","Data":"假如我们需要实现一个优先级任务线程池的话，那可以考虑使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityBlockingQueue"},{"Type":"NodeText","Data":" （优先级阻塞队列）作为任务队列（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadPoolExecutor"},{"Type":"NodeText","Data":" 的构造函数有一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"workQueue"},{"Type":"NodeText","Data":" 参数可以传入任务队列）。"}]},{"ID":"20240201213438-hhcxhaa","Type":"NodeParagraph","Properties":{"id":"20240201213438-hhcxhaa","updated":"20240201213438"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"ThreadPoolExecutor构造函数","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/common-parameters-of-threadpool-workqueue.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213439-gzxn0vl","Type":"NodeParagraph","Properties":{"id":"20240201213439-gzxn0vl","updated":"20240201213439"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityBlockingQueue"},{"Type":"NodeText","Data":" 是一个支持优先级的无界阻塞队列，可以看作是线程安全的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityQueue"},{"Type":"NodeText","Data":"，两者底层都是使用小顶堆形式的二叉堆，即值最小的元素优先出队。不过，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityQueue"},{"Type":"NodeText","Data":" 不支持阻塞操作。"}]},{"ID":"20240201213440-lmradex","Type":"NodeParagraph","Properties":{"id":"20240201213440-lmradex","updated":"20240201213440"},"Children":[{"Type":"NodeText","Data":"要想让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityBlockingQueue"},{"Type":"NodeText","Data":" 实现对任务的排序，传入其中的任务必须是具备排序能力的，方式有两种："}]},{"ID":"20240201213441-cez9bwh","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213441-cez9bwh","updated":"20240201213441"},"Children":[{"ID":"20240201213442-btsx38u","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213442-btsx38u","updated":"20240201213442"},"Children":[{"ID":"20240201213443-s29ldi7","Type":"NodeParagraph","Properties":{"id":"20240201213443-s29ldi7","updated":"20240201213443"},"Children":[{"Type":"NodeText","Data":"提交到线程池的任务实现 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Comparable"},{"Type":"NodeText","Data":" 接口，并重写 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compareTo"},{"Type":"NodeText","Data":" 方法来指定任务之间的优先级比较规则。"}]}]},{"ID":"20240201213444-sp8mlow","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213444-sp8mlow","updated":"20240201213444"},"Children":[{"ID":"20240201213445-qrnoy12","Type":"NodeParagraph","Properties":{"id":"20240201213445-qrnoy12","updated":"20240201213445"},"Children":[{"Type":"NodeText","Data":"创建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityBlockingQueue"},{"Type":"NodeText","Data":" 时传入一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Comparator"},{"Type":"NodeText","Data":" 对象来指定任务之间的排序规则(推荐)。"}]}]}]},{"ID":"20240201213446-8h7aso8","Type":"NodeParagraph","Properties":{"id":"20240201213446-8h7aso8","updated":"20240201213446"},"Children":[{"Type":"NodeText","Data":"不过，这存在一些风险和问题，比如："}]},{"ID":"20240201213447-btpzmdn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213447-btpzmdn","updated":"20240201213447"},"Children":[{"ID":"20240201213448-4rmcrto","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213448-4rmcrto","updated":"20240201213448"},"Children":[{"ID":"20240201213449-3qskzc6","Type":"NodeParagraph","Properties":{"id":"20240201213449-3qskzc6","updated":"20240201213449"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityBlockingQueue"},{"Type":"NodeText","Data":" 是无界的，可能堆积大量的请求，从而导致 OOM。"}]}]},{"ID":"20240201213450-da0gk06","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213450-da0gk06","updated":"20240201213450"},"Children":[{"ID":"20240201213451-t6jbtll","Type":"NodeParagraph","Properties":{"id":"20240201213451-t6jbtll","updated":"20240201213451"},"Children":[{"Type":"NodeText","Data":"可能会导致饥饿问题，即低优先级的任务长时间得不到执行。"}]}]},{"ID":"20240201213452-x5e3b8q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213452-x5e3b8q","updated":"20240201213452"},"Children":[{"ID":"20240201213453-v7r0pfo","Type":"NodeParagraph","Properties":{"id":"20240201213453-v7r0pfo","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"由于需要对队列中的元素进行排序操作以及保证线程安全（并发控制采用的是可重入锁 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":"），因此会降低性能。"}]}]}]},{"ID":"20240201213454-670rdhq","Type":"NodeParagraph","Properties":{"id":"20240201213454-670rdhq","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"对于 OOM 这个问题的解决比较简单粗暴，就是继承"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PriorityBlockingQueue"},{"Type":"NodeText","Data":" 并重写一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"offer"},{"Type":"NodeText","Data":" 方法(入队)的逻辑，当插入的元素数量超过指定值就返回 false 。"}]},{"ID":"20240201213455-lyx38xc","Type":"NodeParagraph","Properties":{"id":"20240201213455-lyx38xc","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"饥饿问题这个可以通过优化设计来解决（比较麻烦），比如等待时间过长的任务会被移除并重新添加到队列中，但是优先级会被提升。"}]},{"ID":"20240201213456-v4k67px","Type":"NodeParagraph","Properties":{"id":"20240201213456-v4k67px","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"对于性能方面的影响，是没办法避免的，毕竟需要对任务进行排序操作。并且，对于大部分业务场景来说，这点性能影响是可以接受的。"}]},{"ID":"20240201213457-l3d2quj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213457-l3d2quj","updated":"20240201213457"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Future"}]},{"ID":"20240201213458-whj8xdi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213458-whj8xdi","updated":"20240201213458"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Future 类有什么用？"}]},{"ID":"20240201213459-bdhtogk","Type":"NodeParagraph","Properties":{"id":"20240201213459-bdhtogk","updated":"20240201213459"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 类是异步思想的典型运用，主要用在一些需要执行耗时任务的场景，避免程序一直原地等待耗时任务执行完成，执行效率太低。具体来说是这样的：当我们执行某一耗时的任务时，可以将这个耗时任务交给一个子线程去异步执行，同时我们可以干点其他事情，不用傻傻等待耗时任务执行完成。等我们的事情干完后，我们再通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 类获取到耗时任务的执行结果。这样一来，程序的执行效率就明显提高了。"}]},{"ID":"20240201213460-pjegesf","Type":"NodeParagraph","Properties":{"id":"20240201213460-pjegesf","updated":"20240201213460"},"Children":[{"Type":"NodeText","Data":"这其实就是多线程中经典的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Future 模式"},{"Type":"NodeText","Data":"，你可以将其看作是一种设计模式，核心思想是异步调用，主要用在多线程领域，并非 Java 语言独有。"}]},{"ID":"20240201213461-3obcol6","Type":"NodeParagraph","Properties":{"id":"20240201213461-3obcol6","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"在 Java 中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 类只是一个泛型接口，位于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent"},{"Type":"NodeText","Data":" 包下，其中定义了 5 个方法，主要包括下面这 4 个功能："}]},{"ID":"20240201213462-ljnz45p","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213462-ljnz45p","updated":"20240201213462"},"Children":[{"ID":"20240201213463-knzobny","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-knzobny","updated":"20240201213463"},"Children":[{"ID":"20240201213464-wmse79x","Type":"NodeParagraph","Properties":{"id":"20240201213464-wmse79x","updated":"20240201213464"},"Children":[{"Type":"NodeText","Data":"取消任务；"}]}]},{"ID":"20240201213465-3go2isu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-3go2isu","updated":"20240201213465"},"Children":[{"ID":"20240201213466-oy2j8ks","Type":"NodeParagraph","Properties":{"id":"20240201213466-oy2j8ks","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"判断任务是否被取消;"}]}]},{"ID":"20240201213467-f1a5ysm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213467-f1a5ysm","updated":"20240201213467"},"Children":[{"ID":"20240201213468-ff9zs1y","Type":"NodeParagraph","Properties":{"id":"20240201213468-ff9zs1y","updated":"20240201213468"},"Children":[{"Type":"NodeText","Data":"判断任务是否已经执行完成;"}]}]},{"ID":"20240201213469-yufq0wt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-yufq0wt","updated":"20240201213469"},"Children":[{"ID":"20240201213470-6z97jbn","Type":"NodeParagraph","Properties":{"id":"20240201213470-6z97jbn","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"获取任务执行结果。"}]}]}]},{"ID":"20240201213471-uz2pzct","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213471-uz2pzct","updated":"20240201213471"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// V 代表了Future执行的任务返回值的类型\npublic interface Future\u003cV\u003e {\n    // 取消任务执行\n    // 成功取消返回 true，否则返回 false\n    boolean cancel(boolean mayInterruptIfRunning);\n    // 判断任务是否被取消\n    boolean isCancelled();\n    // 判断任务是否已经执行完成\n    boolean isDone();\n    // 获取任务执行结果\n    V get() throws InterruptedException, ExecutionException;\n    // 指定时间内没有返回计算结果就抛出 TimeOutException 异常\n    V get(long timeout, TimeUnit unit)\n\n        throws InterruptedException, ExecutionException, TimeoutExceptio\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213472-wjmq9h1","Type":"NodeParagraph","Properties":{"id":"20240201213472-wjmq9h1","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"简单理解就是：我有一个任务，提交给了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 来处理。任务执行期间我自己可以去做任何想做的事情。并且，在这期间我还可以取消任务以及获取任务的执行状态。一段时间之后，我就可以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 那里直接取出任务执行结果。"}]},{"ID":"20240201213473-f9145wn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213473-f9145wn","updated":"20240201213473"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Callable 和 Future 有什么关系？"}]},{"ID":"20240201213474-4ljjdxn","Type":"NodeParagraph","Properties":{"id":"20240201213474-4ljjdxn","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"我们可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":" 来理解 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 之间的关系。"}]},{"ID":"20240201213475-4w19a7d","Type":"NodeParagraph","Properties":{"id":"20240201213475-4w19a7d","updated":"20240201213475"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":" 提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 接口的基本实现，常用来封装 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Runnable"},{"Type":"NodeText","Data":"，具有取消任务、查看任务是否执行完成以及获取任务执行结果的方法。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExecutorService.submit()"},{"Type":"NodeText","Data":" 方法返回的其实就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 的实现类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213476-95mydsn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213476-95mydsn","updated":"20240201213476"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cT\u003e Future\u003cT\u003e submit(Callable\u003cT\u003e task);\nFuture\u003c?\u003e submit(Runnable task);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213477-nb004xj","Type":"NodeParagraph","Properties":{"id":"20240201213477-nb004xj","updated":"20240201213477"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":" 不光实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":"接口，还实现了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Runnable"},{"Type":"NodeText","Data":" 接口，因此可以作为任务直接被线程执行。"}]},{"ID":"20240201213478-l8cztgw","Type":"NodeParagraph","Properties":{"id":"20240201213478-l8cztgw","updated":"20240201213478"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/completablefuture-class-diagram.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213479-d7u0qde","Type":"NodeParagraph","Properties":{"id":"20240201213479-d7u0qde","updated":"20240201213479"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":" 有两个构造函数，可传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":" 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Runnable"},{"Type":"NodeText","Data":" 对象。实际上，传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Runnable"},{"Type":"NodeText","Data":" 对象也会在方法内部转换为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":" 对象。"}]},{"ID":"20240201213480-vdjyj0g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213480-vdjyj0g","updated":"20240201213480"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public FutureTask(Callable\u003cV\u003e callable) {\n    if (callable == null)\n        throw new NullPointerException();\n    this.callable = callable;\n    this.state = NEW;\n}\npublic FutureTask(Runnable runnable, V result) {\n    // 通过适配器RunnableAdapter来将Runnable对象runnable转换成Callable对象\n    this.callable = Executors.callable(runnable, result);\n    this.state = NEW;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213481-o9nngjw","Type":"NodeParagraph","Properties":{"id":"20240201213481-o9nngjw","updated":"20240201213481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":"相当于对"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":" 进行了封装，管理着任务执行的情况，存储了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"call"},{"Type":"NodeText","Data":" 方法的任务执行结果。"}]},{"ID":"20240201213482-rk81gg4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213482-rk81gg4","updated":"20240201213482"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CompletableFuture 类有什么用？"}]},{"ID":"20240201213483-jq3dgln","Type":"NodeParagraph","Properties":{"id":"20240201213483-jq3dgln","updated":"20240201213483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 在实际使用过程中存在一些局限性比如不支持异步任务的编排组合、获取计算结果的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get()"},{"Type":"NodeText","Data":" 方法为阻塞调用。"}]},{"ID":"20240201213484-8979dqw","Type":"NodeParagraph","Properties":{"id":"20240201213484-8979dqw","updated":"20240201213484"},"Children":[{"Type":"NodeText","Data":"Java 8 才被引入"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 类可以解决"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 的这些缺陷。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 除了提供了更为好用和强大的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 特性之外，还提供了函数式编程、异步任务编排组合（可以将多个异步任务串联起来，组成一个完整的链式调用）等能力。"}]},{"ID":"20240201213485-t2n3kar","Type":"NodeParagraph","Properties":{"id":"20240201213485-t2n3kar","updated":"20240201213485"},"Children":[{"Type":"NodeText","Data":"下面我们来简单看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 类的定义。"}]},{"ID":"20240201213486-8mb05k6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213486-8mb05k6","updated":"20240201213486"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class CompletableFuture\u003cT\u003e implements Future\u003cT\u003e, CompletionStage\u003cT\u003e {\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213487-v6l8md1","Type":"NodeParagraph","Properties":{"id":"20240201213487-v6l8md1","updated":"20240201213487"},"Children":[{"Type":"NodeText","Data":"可以看到，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 同时实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletionStage"},{"Type":"NodeText","Data":" 接口。"}]},{"ID":"20240201213488-yv6g9gc","Type":"NodeParagraph","Properties":{"id":"20240201213488-yv6g9gc","updated":"20240201213488"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/completablefuture-class-diagram.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213489-76wg39m","Type":"NodeParagraph","Properties":{"id":"20240201213489-76wg39m","updated":"20240201213489"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletionStage"},{"Type":"NodeText","Data":" 接口描述了一个异步计算的阶段。很多计算可以分成多个阶段或步骤，此时可以通过它将所有步骤组合起来，形成异步计算的流水线。"}]},{"ID":"20240201213490-iaqlye3","Type":"NodeParagraph","Properties":{"id":"20240201213490-iaqlye3","updated":"20240201213490"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletionStage"},{"Type":"NodeText","Data":" 接口中的方法比较多，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 的函数式能力就是这个接口赋予的。从这个接口的方法参数你就可以发现其大量使用了 Java8 引入的函数式编程。"}]},{"ID":"20240201213491-2wgzfs6","Type":"NodeParagraph","Properties":{"id":"20240201213491-2wgzfs6","updated":"20240201213491"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/javaguide/image-20210902093026059.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213492-5vcwice","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213492-5vcwice","updated":"20240201213492"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS"}]},{"ID":"20240201213493-ad5c7gq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213493-ad5c7gq","updated":"20240201213493"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS 是什么？"}]},{"ID":"20240201213494-95xbguv","Type":"NodeParagraph","Properties":{"id":"20240201213494-95xbguv","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"AQS 的全称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" ，翻译过来的意思就是抽象队列同步器。这个类在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent.locks"},{"Type":"NodeText","Data":" 包下面。"}]},{"ID":"20240201213495-hj4j3sy","Type":"NodeParagraph","Properties":{"id":"20240201213495-hj4j3sy","updated":"20240201213495"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/AQS.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213496-oyt8iav","Type":"NodeParagraph","Properties":{"id":"20240201213496-oyt8iav","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"AQS 就是一个抽象类，主要用来构建锁和同步器。"}]},{"ID":"20240201213497-f4ohp8h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213497-f4ohp8h","updated":"20240201213497"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable {\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213498-mt3q1dp","Type":"NodeParagraph","Properties":{"id":"20240201213498-mt3q1dp","updated":"20240201213498"},"Children":[{"Type":"NodeText","Data":"AQS 为构建锁和同步器提供了一些通用功能的实现，因此，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":"，其他的诸如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantReadWriteLock"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SynchronousQueue"},{"Type":"NodeText","Data":"等等皆是基于 AQS 的。"}]},{"ID":"20240201213499-2a5n14m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213499-2a5n14m","updated":"20240201213499"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS 的原理是什么？"}]},{"ID":"20240201213500-gd5i01a","Type":"NodeParagraph","Properties":{"id":"20240201213500-gd5i01a","updated":"20240201213500"},"Children":[{"Type":"NodeText","Data":"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CLH 队列锁"},{"Type":"NodeText","Data":" 实现的，即将暂时获取不到锁的线程加入到队列中。"}]},{"ID":"20240201213501-8gelx5m","Type":"NodeParagraph","Properties":{"id":"20240201213501-8gelx5m","updated":"20240201213501"},"Children":[{"Type":"NodeText","Data":"CLH(Craig,Landin,and Hagersten) 队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。在 CLH 同步队列中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。"}]},{"ID":"20240201213502-3b6rv6i","Type":"NodeParagraph","Properties":{"id":"20240201213502-3b6rv6i","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"CLH 队列结构如下图所示："}]},{"ID":"20240201213503-m9m7uae","Type":"NodeParagraph","Properties":{"id":"20240201213503-m9m7uae","updated":"20240201213503"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/p3-juejin/40cb932a64694262993907ebda6a0bfe~tplv-k3u1fbpfcp-zoom-1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213504-aa0pvy2","Type":"NodeParagraph","Properties":{"id":"20240201213504-aa0pvy2","updated":"20240201213504"},"Children":[{"Type":"NodeText","Data":"AQS("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":")的核心原理图（图源"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/waterystone/p/4920797.html","TextMarkTextContent":"Java 并发之 AQS 详解"},{"Type":"NodeText","Data":"）如下："}]},{"ID":"20240201213505-aytytad","Type":"NodeParagraph","Properties":{"id":"20240201213505-aytytad","updated":"20240201213505"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/CLH.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213506-5mfjuj7","Type":"NodeParagraph","Properties":{"id":"20240201213506-5mfjuj7","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"AQS 使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"int 成员变量 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"state"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 表示同步状态"},{"Type":"NodeText","Data":"，通过内置的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程等待队列"},{"Type":"NodeText","Data":" 来完成获取资源线程的排队工作。"}]},{"ID":"20240201213507-d8c56d7","Type":"NodeParagraph","Properties":{"id":"20240201213507-d8c56d7","updated":"20240201213507"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 变量由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":" 修饰，用于展示当前临界资源的获锁情况。"}]},{"ID":"20240201213508-e4yih8k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213508-e4yih8k","updated":"20240201213508"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 共享变量，使用volatile修饰保证线程可见性\nprivate volatile int state;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213509-rpddagx","Type":"NodeParagraph","Properties":{"id":"20240201213509-rpddagx","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"另外，状态信息 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"protected"},{"Type":"NodeText","Data":" 类型的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getState()"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setState()"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compareAndSetState()"},{"Type":"NodeText","Data":" 进行操作。并且，这几个方法都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":" 修饰的，在子类中无法被重写。"}]},{"ID":"20240201213510-o0gkn7y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213510-o0gkn7y","updated":"20240201213510"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//返回同步状态的当前值\nprotected final int getState() {\n     return state;\n}\n // 设置同步状态的值\nprotected final void setState(int newState) {\n     state = newState;\n}\n//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）\nprotected final boolean compareAndSetState(int expect, int update) {\n      return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213511-k8mvj85","Type":"NodeParagraph","Properties":{"id":"20240201213511-k8mvj85","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 为例，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 初始值为 0，表示未锁定状态。A 线程 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lock()"},{"Type":"NodeText","Data":" 时，会调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquire()"},{"Type":"NodeText","Data":" 独占该锁并将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state+1"},{"Type":"NodeText","Data":" 。此后，其他线程再 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquire()"},{"Type":"NodeText","Data":" 时就会失败，直到 A 线程 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"unlock()"},{"Type":"NodeText","Data":" 到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state="},{"Type":"NodeText","Data":"0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多少次，这样才能保证 state 是能回到零态的。"}]},{"ID":"20240201213512-3925ymj","Type":"NodeParagraph","Properties":{"id":"20240201213512-3925ymj","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"再以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 以例，任务分为 N 个子线程去执行，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown()"},{"Type":"NodeText","Data":" 一次，state 会 CAS(Compare and Swap) 减 1。等到所有子线程都执行完后(即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=0"},{"Type":"NodeText","Data":" )，会 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"unpark()"},{"Type":"NodeText","Data":" 主调用线程，然后主调用线程就会从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 函数返回，继续后余动作。"}]},{"ID":"20240201213513-gv33906","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213513-gv33906","updated":"20240201213513"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Semaphore 有什么用？"}]},{"ID":"20240201213514-d1ya3nt","Type":"NodeParagraph","Properties":{"id":"20240201213514-d1ya3nt","updated":"20240201213514"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 都是一次只允许一个线程访问某个资源，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":"(信号量)可以用来控制同时访问特定资源的线程数量。"}]},{"ID":"20240201213515-0lya23i","Type":"NodeParagraph","Properties":{"id":"20240201213515-0lya23i","updated":"20240201213515"},"Children":[{"Type":"NodeText","Data":"Semaphore 的使用简单，我们这里假设有 N(N\u003e5) 个线程来获取 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 中的共享资源，下面的代码表示同一时刻 N 个线程中只有 5 个线程能获取到共享资源，其他线程都会阻塞，只有获取到共享资源的线程才能执行。等到有线程释放了共享资源，其他阻塞的线程才能获取到。"}]},{"ID":"20240201213516-jemeqne","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213516-jemeqne","updated":"20240201213516"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 初始共享资源数量\nfinal Semaphore semaphore = new Semaphore(5);\n// 获取1个许可\nsemaphore.acquire();\n// 释放1个许可\nsemaphore.release();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213517-lqqxbva","Type":"NodeParagraph","Properties":{"id":"20240201213517-lqqxbva","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"当初始的资源个数为 1 的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 退化为排他锁。"}]},{"ID":"20240201213518-y0ziubd","Type":"NodeParagraph","Properties":{"id":"20240201213518-y0ziubd","updated":"20240201213518"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 有两种模式：。"}]},{"ID":"20240201213519-3dhlwfo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213519-3dhlwfo","updated":"20240201213519"},"Children":[{"ID":"20240201213520-ryh0n51","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213520-ryh0n51","updated":"20240201213520"},"Children":[{"ID":"20240201213521-b9iakrr","Type":"NodeParagraph","Properties":{"id":"20240201213521-b9iakrr","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"公平模式："},{"Type":"NodeText","Data":" 调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire()"},{"Type":"NodeText","Data":" 方法的顺序就是获取许可证的顺序，遵循 FIFO；"}]}]},{"ID":"20240201213522-p28k7ez","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213522-p28k7ez","updated":"20240201213522"},"Children":[{"ID":"20240201213523-635l8v6","Type":"NodeParagraph","Properties":{"id":"20240201213523-635l8v6","updated":"20240201213523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非公平模式："},{"Type":"NodeText","Data":" 抢占式的。"}]}]}]},{"ID":"20240201213524-jed46hz","Type":"NodeParagraph","Properties":{"id":"20240201213524-jed46hz","updated":"20240201213524"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 对应的两个构造方法如下："}]},{"ID":"20240201213525-aqz05qv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213525-aqz05qv","updated":"20240201213525"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213526-zzb9xou","Type":"NodeParagraph","Properties":{"id":"20240201213526-zzb9xou","updated":"20240201213526"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。"}]},{"ID":"20240201213527-wcqkwyw","Type":"NodeParagraph","Properties":{"id":"20240201213527-wcqkwyw","updated":"20240201213527"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 通常用于那些资源有明确访问数量限制的场景比如限流（仅限于单机模式，实际项目中推荐使用 Redis +Lua 来做限流）。"}]},{"ID":"20240201213528-x5d3arl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213528-x5d3arl","updated":"20240201213528"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Semaphore 的原理是什么？"}]},{"ID":"20240201213529-1yzzzcv","Type":"NodeParagraph","Properties":{"id":"20240201213529-1yzzzcv","updated":"20240201213529"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 是共享锁的一种实现，它默认构造 AQS 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":"，你可以将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":" 的值理解为许可证的数量，只有拿到许可证的线程才能执行。"}]},{"ID":"20240201213530-18z8cbl","Type":"NodeParagraph","Properties":{"id":"20240201213530-18z8cbl","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semaphore.acquire()"},{"Type":"NodeText","Data":" ，线程尝试获取许可证，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state \u0026gt;= 0"},{"Type":"NodeText","Data":" 的话，则表示可以获取成功。如果获取成功的话，使用 CAS 操作去修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=state-1"},{"Type":"NodeText","Data":"。如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state\u0026lt;0"},{"Type":"NodeText","Data":" 的话，则表示许可证数量不足。此时会创建一个 Node 节点加入阻塞队列，挂起当前线程。"}]},{"ID":"20240201213531-knor49c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213531-knor49c","updated":"20240201213531"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n *  获取1个许可证\n */\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n/**\n * 共享模式下获取许可证，获取成功则返回，失败则加入阻塞队列，挂起线程\n */\npublic final void acquireSharedInterruptibly(int arg)\n    throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n        // 尝试获取许可证，arg为获取许可证个数，当可用许可证数减当前获取的许可证数结果小于0,则创建一个节点加入阻塞队列，挂起当前线程。\n    if (tryAcquireShared(arg) \u003c 0)\n      doAcquireSharedInterruptibly(arg);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213532-37u3zvx","Type":"NodeParagraph","Properties":{"id":"20240201213532-37u3zvx","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semaphore.release();"},{"Type":"NodeText","Data":" ，线程尝试释放许可证，并使用 CAS 操作去修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=state+1"},{"Type":"NodeText","Data":"。释放许可证成功之后，同时会唤醒同步队列中的一个线程。被唤醒的线程会重新尝试去修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=state-1"},{"Type":"NodeText","Data":" ，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state\u0026gt;=0"},{"Type":"NodeText","Data":" 则获取令牌成功，否则重新进入阻塞队列，挂起线程。"}]},{"ID":"20240201213533-mmwqfcf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213533-mmwqfcf","updated":"20240201213533"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 释放一个许可证\npublic void release() {\n    sync.releaseShared(1);\n}\n\n// 释放共享锁，同时会唤醒同步队列中的一个线程。\npublic final boolean releaseShared(int arg) {\n    //释放共享锁\n    if (tryReleaseShared(arg)) {\n      //唤醒同步队列中的一个线程\n      doReleaseShared();\n      return true;\n    }\n    return false;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213534-dph2hmg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213534-dph2hmg","updated":"20240201213534"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CountDownLatch 有什么用？"}]},{"ID":"20240201213535-1hq7cjs","Type":"NodeParagraph","Properties":{"id":"20240201213535-1hq7cjs","updated":"20240201213535"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 允许 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。"}]},{"ID":"20240201213536-yutk1ry","Type":"NodeParagraph","Properties":{"id":"20240201213536-yutk1ry","updated":"20240201213536"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 使用完毕后，它不能再次被使用。"}]},{"ID":"20240201213537-tfewdwm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213537-tfewdwm","updated":"20240201213537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CountDownLatch 的原理是什么？"}]},{"ID":"20240201213538-bc4ycsy","Type":"NodeParagraph","Properties":{"id":"20240201213538-bc4ycsy","updated":"20240201213538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 是共享锁的一种实现,它默认构造 AQS 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":"。当线程使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown()"},{"Type":"NodeText","Data":" 方法时,其实使用了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryReleaseShared"},{"Type":"NodeText","Data":"方法以 CAS 的操作来减少 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":",直至 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 为 0 。当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法的时候，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 不为 0，那就证明任务还没有执行完毕，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法就会一直阻塞，也就是说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法之后的语句不会被执行。直到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 个线程调用了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown()"},{"Type":"NodeText","Data":"使 state 值被减为 0，或者调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":"的线程被中断，该线程才会从阻塞中被唤醒，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法之后的语句得到执行。"}]},{"ID":"20240201213539-1m6xw27","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213539-1m6xw27","updated":"20240201213539"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"用过 CountDownLatch 么？什么场景下用的？"}]},{"ID":"20240201213540-qnursi0","Type":"NodeParagraph","Properties":{"id":"20240201213540-qnursi0","updated":"20240201213540"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的作用就是 允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。之前在项目中，有一个使用多线程读取多个文件处理的场景，我用到了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 。具体场景是下面这样的："}]},{"ID":"20240201213541-ut9fbi7","Type":"NodeParagraph","Properties":{"id":"20240201213541-ut9fbi7","updated":"20240201213541"},"Children":[{"Type":"NodeText","Data":"我们要读取处理 6 个文件，这 6 个任务都是没有执行顺序依赖的任务，但是我们需要返回给用户的时候将这几个文件的处理的结果进行统计整理。"}]},{"ID":"20240201213542-q20vdv8","Type":"NodeParagraph","Properties":{"id":"20240201213542-q20vdv8","updated":"20240201213542"},"Children":[{"Type":"NodeText","Data":"为此我们定义了一个线程池和 count 为 6 的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":"对象 。使用线程池处理读取任务，每一个线程处理完之后就将 count-1，调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":"对象的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":"方法，直到所有文件读取完之后，才会接着执行后面的逻辑。"}]},{"ID":"20240201213543-k7dkjpc","Type":"NodeParagraph","Properties":{"id":"20240201213543-k7dkjpc","updated":"20240201213543"},"Children":[{"Type":"NodeText","Data":"伪代码是下面这样的："}]},{"ID":"20240201213544-u7ai3x0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213544-u7ai3x0","updated":"20240201213544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class CountDownLatchExample1 {\n    // 处理文件的数量\n    private static final int threadCount = 6;\n\n    public static void main(String[] args) throws InterruptedException {\n        // 创建一个具有固定线程数量的线程池对象（推荐使用构造方法创建）\n        ExecutorService threadPool = Executors.newFixedThreadPool(10);\n        final CountDownLatch countDownLatch = new CountDownLatch(threadCount);\n        for (int i = 0; i \u003c threadCount; i++) {\n            final int threadnum = i;\n            threadPool.execute(() -\u003e {\n                try {\n                    //处理文件的业务操作\n                    //......\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } finally {\n                    //表示一个文件已经被完成\n                    countDownLatch.countDown();\n                }\n\n            });\n        }\n        countDownLatch.await();\n        threadPool.shutdown();\n        System.out.println(\"finish\");\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213545-f02n20a","Type":"NodeParagraph","Properties":{"id":"20240201213545-f02n20a","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有没有可以改进的地方呢？"}]},{"ID":"20240201213546-1r7cgsx","Type":"NodeParagraph","Properties":{"id":"20240201213546-1r7cgsx","updated":"20240201213546"},"Children":[{"Type":"NodeText","Data":"可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 类来改进！Java8 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CompletableFuture"},{"Type":"NodeText","Data":" 提供了很多对多线程友好的方法，使用它可以很方便地为我们编写多线程程序，什么异步、串行、并行或者等待所有线程执行完任务什么的都非常方便。"}]},{"ID":"20240201213547-zajhn1e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213547-zajhn1e","updated":"20240201213547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CompletableFuture\u003cVoid\u003e task1 =\n    CompletableFuture.supplyAsync(()-\u003e{\n        //自定义业务操作\n    });\n......\nCompletableFuture\u003cVoid\u003e task6 =\n    CompletableFuture.supplyAsync(()-\u003e{\n    //自定义业务操作\n    });\n......\nCompletableFuture\u003cVoid\u003e headerFuture=CompletableFuture.allOf(task1,.....,task6);\n\ntry {\n    headerFuture.join();\n} catch (Exception ex) {\n    //......\n}\nSystem.out.println(\"all done. \");\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213548-9r8pnr7","Type":"NodeParagraph","Properties":{"id":"20240201213548-9r8pnr7","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"上面的代码还可以继续优化，当任务过多的时候，把每一个 task 都列出来不太现实，可以考虑通过循环来添加任务。"}]},{"ID":"20240201213549-h6aw2ys","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213549-h6aw2ys","updated":"20240201213549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//文件夹位置\nList\u003cString\u003e filePaths = Arrays.asList(...)\n// 异步处理所有文件\nList\u003cCompletableFuture\u003cString\u003e\u003e fileFutures = filePaths.stream()\n    .map(filePath -\u003e doSomeThing(filePath))\n    .collect(Collectors.toList());\n// 将他们合并起来\nCompletableFuture\u003cVoid\u003e allFutures = CompletableFuture.allOf(\n    fileFutures.toArray(new CompletableFuture[fileFutures.size()])\n);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213550-amo9nbh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213550-amo9nbh","updated":"20240201213550"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CyclicBarrier 有什么用？"}]},{"ID":"20240201213551-ltgl2wq","Type":"NodeParagraph","Properties":{"id":"20240201213551-ltgl2wq","updated":"20240201213551"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 非常类似，它也可以实现线程间的技术等待，但是它的功能比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 更加复杂和强大。主要应用场景和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 类似。"}]},{"ID":"20240201213552-voclauu","Type":"NodeBlockquote","Properties":{"id":"20240201213552-voclauu","updated":"20240201213552"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213553-lrck18l","Type":"NodeParagraph","Properties":{"id":"20240201213553-lrck18l","updated":"20240201213553"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的实现是基于 AQS 的，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CycliBarrier"},{"Type":"NodeText","Data":" 是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":"("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 也属于 AQS 同步器)和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Condition"},{"Type":"NodeText","Data":" 的。"}]}]},{"ID":"20240201213554-ggnsup3","Type":"NodeParagraph","Properties":{"id":"20240201213554-ggnsup3","updated":"20240201213554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是：让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。"}]},{"ID":"20240201213555-ykk5uce","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213555-ykk5uce","updated":"20240201213555"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CyclicBarrier 的原理是什么？"}]},{"ID":"20240201213556-6nx0as0","Type":"NodeParagraph","Properties":{"id":"20240201213556-6nx0as0","updated":"20240201213556"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 内部通过一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 变量作为计数器，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 的初始值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parties"},{"Type":"NodeText","Data":" 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减 1。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。"}]},{"ID":"20240201213557-dy908v3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213557-dy908v3","updated":"20240201213557"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//每次拦截的线程数\nprivate final int parties;\n//计数器\nprivate int count;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213558-c973wid","Type":"NodeParagraph","Properties":{"id":"20240201213558-c973wid","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"下面我们结合源码来简单看看。"}]},{"ID":"20240201213559-3uxneq0","Type":"NodeParagraph","Properties":{"id":"20240201213559-3uxneq0","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"1、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 默认的构造方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier(int parties)"},{"Type":"NodeText","Data":"，其参数表示屏障拦截的线程数量，每个线程调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法告诉 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 我已经到达了屏障，然后当前线程被阻塞。"}]},{"ID":"20240201213560-jjede22","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213560-jjede22","updated":"20240201213560"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public CyclicBarrier(int parties) {\n    this(parties, null);\n}\n\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties \u003c= 0) throw new IllegalArgumentException();\n    this.parties = parties;\n    this.count = parties;\n    this.barrierCommand = barrierAction;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213561-zsrnko1","Type":"NodeParagraph","Properties":{"id":"20240201213561-zsrnko1","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"其中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parties"},{"Type":"NodeText","Data":" 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。"}]},{"ID":"20240201213562-e3ljsvi","Type":"NodeParagraph","Properties":{"id":"20240201213562-e3ljsvi","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"2、当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 对象调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法时，实际上调用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dowait(false, 0L)"},{"Type":"NodeText","Data":"方法。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parties"},{"Type":"NodeText","Data":" 的值时，栅栏才会打开，线程才得以通过执行。"}]},{"ID":"20240201213563-bix2jbg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213563-bix2jbg","updated":"20240201213563"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public int await() throws InterruptedException, BrokenBarrierException {\n  try {\n      return dowait(false, 0L);\n  } catch (TimeoutException toe) {\n      throw new Error(toe); // cannot happen\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213564-hh9nv1a","Type":"NodeParagraph","Properties":{"id":"20240201213564-hh9nv1a","updated":"20240201213564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dowait(false, 0L)"},{"Type":"NodeText","Data":"方法源码分析如下："}]},{"ID":"20240201213565-15bfz7r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213565-15bfz7r","updated":"20240201213565"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    // 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。\n    private int count;\n    /**\n     * Main barrier code, covering the various policies.\n     */\n    private int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        // 锁住\n        lock.lock();\n        try {\n            final Generation g = generation;\n\n            if (g.broken)\n                throw new BrokenBarrierException();\n\n            // 如果线程中断了，抛出异常\n            if (Thread.interrupted()) {\n                breakBarrier();\n                throw new InterruptedException();\n            }\n            // cout减1\n            int index = --count;\n            // 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行await 方法之后的条件\n            if (index == 0) {  // tripped\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)\n                        command.run();\n                    ranAction = true;\n                    // 将 count 重置为 parties 属性的初始化值\n                    // 唤醒之前等待的线程\n                    // 下一波执行开始\n                    nextGeneration();\n                    return 0;\n                } finally {\n                    if (!ranAction)\n                        breakBarrier();\n                }\n            }\n\n            // loop until tripped, broken, interrupted, or timed out\n            for (;;) {\n                try {\n                    if (!timed)\n                        trip.await();\n                    else if (nanos \u003e 0L)\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    if (g == generation \u0026\u0026 ! g.broken) {\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                        // We're about to finish waiting even if we had not\n                        // been interrupted, so this interrupt is deemed to\n                        // \"belong\" to subsequent execution.\n                        Thread.currentThread().interrupt();\n                    }\n                }\n\n                if (g.broken)\n                    throw new BrokenBarrierException();\n\n                if (g != generation)\n                    return index;\n\n                if (timed \u0026\u0026 nanos \u003c= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213566-w364gjg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213566-w364gjg","updated":"20240201213566"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟线程"}]},{"ID":"20240201213567-7anax61","Type":"NodeParagraph","Properties":{"id":"20240201213567-7anax61","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"虚拟线程在 Java 21 正式发布，这是一项重量级的更新。"}]},{"ID":"20240201213568-frmplul","Type":"NodeParagraph","Properties":{"id":"20240201213568-frmplul","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"虽然目前面试中问的不多，但还是建议大家去简单了解一下，具体可以阅读这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./virtual-thread.md","TextMarkTextContent":"虚拟线程极简入门"},{"Type":"NodeText","Data":" 。重点搞清楚虚拟线程和平台线程的关系以及虚拟线程的优势即可。"}]},{"ID":"20240201213569-0g6en1h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213569-0g6en1h","updated":"20240201213569"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213570-era2y7r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-era2y7r","updated":"20240201213570"},"Children":[{"ID":"20240201213571-06e0lup","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-06e0lup","updated":"20240201213571"},"Children":[{"ID":"20240201213572-0fnqca7","Type":"NodeParagraph","Properties":{"id":"20240201213572-0fnqca7","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"《深入理解 Java 虚拟机》"}]}]},{"ID":"20240201213573-eftseos","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-eftseos","updated":"20240201213573"},"Children":[{"ID":"20240201213574-tf3b47e","Type":"NodeParagraph","Properties":{"id":"20240201213574-tf3b47e","updated":"20240201213574"},"Children":[{"Type":"NodeText","Data":"《实战 Java 高并发程序设计》"}]}]},{"ID":"20240201213575-b1t6jpu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-b1t6jpu","updated":"20240201213575"},"Children":[{"ID":"20240201213576-fm7c54n","Type":"NodeParagraph","Properties":{"id":"20240201213576-fm7c54n","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"带你了解下 SynchronousQueue（并发队列专题）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.cn/post/7031196740128768037","TextMarkTextContent":"https://juejin.cn/post/7031196740128768037"}]}]},{"ID":"20240201213577-83t2ml1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-83t2ml1","updated":"20240201213577"},"Children":[{"ID":"20240201213578-ncrgty9","Type":"NodeParagraph","Properties":{"id":"20240201213578-ncrgty9","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"阻塞队列 — DelayedWorkQueue 源码分析："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/310621485","TextMarkTextContent":"https://zhuanlan.zhihu.com/p/310621485"}]}]},{"ID":"20240201213579-s9itdz3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213579-s9itdz3","updated":"20240201213579"},"Children":[{"ID":"20240201213580-6v717hi","Type":"NodeParagraph","Properties":{"id":"20240201213580-6v717hi","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"Java 多线程（三）——FutureTask/CompletableFuture："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/iwehdio/p/14285282.html","TextMarkTextContent":"https://www.cnblogs.com/iwehdio/p/14285282.html"}]}]},{"ID":"20240201213581-dj7vyiy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213581-dj7vyiy","updated":"20240201213581"},"Children":[{"ID":"20240201213582-fw73okg","Type":"NodeParagraph","Properties":{"id":"20240201213582-fw73okg","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"Java 并发之 AQS 详解："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/waterystone/p/4920797.html","TextMarkTextContent":"https://www.cnblogs.com/waterystone/p/4920797.html"}]}]},{"ID":"20240201213583-e5iipjb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-e5iipjb","updated":"20240201213583"},"Children":[{"ID":"20240201213584-98i1ada","Type":"NodeParagraph","Properties":{"id":"20240201213584-98i1ada","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"Java 并发包基石-AQS 详解："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html","TextMarkTextContent":"https://www.cnblogs.com/chengxiao/archive/2017/07/24/7141160.html"}]}]}]},{"ID":"20240201213585-vnevb1y","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213585-vnevb1y","updated":"20240201213585"}}]}