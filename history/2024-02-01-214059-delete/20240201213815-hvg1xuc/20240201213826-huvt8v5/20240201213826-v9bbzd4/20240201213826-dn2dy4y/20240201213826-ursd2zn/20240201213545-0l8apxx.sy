{"ID":"20240201213545-0l8apxx","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213545-0l8apxx","title":"aqs","updated":"20240201213545"},"Children":[{"ID":"20240201213546-gz8pkff","Type":"NodeThematicBreak","Properties":{"id":"20240201213546-gz8pkff","updated":"20240201213546"}},{"ID":"20240201213547-zoj0e3q","Type":"NodeParagraph","Properties":{"id":"20240201213547-zoj0e3q","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"title: AQS 详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213548-wtqjxdy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213548-wtqjxdy","updated":"20240201213548"},"Children":[{"ID":"20240201213549-bet8wn1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-bet8wn1","updated":"20240201213549"},"Children":[{"ID":"20240201213550-bgr0vup","Type":"NodeParagraph","Properties":{"id":"20240201213550-bgr0vup","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"Java并发"}]}]}]},{"ID":"20240201213551-trctaq1","Type":"NodeThematicBreak","Properties":{"id":"20240201213551-trctaq1","updated":"20240201213551"}},{"ID":"20240201213552-ohr6x48","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213552-ohr6x48","updated":"20240201213552"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS 介绍"}]},{"ID":"20240201213553-bgljj76","Type":"NodeParagraph","Properties":{"id":"20240201213553-bgljj76","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"AQS 的全称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" ，翻译过来的意思就是抽象队列同步器。这个类在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent.locks"},{"Type":"NodeText","Data":" 包下面。"}]},{"ID":"20240201213554-u9aje8f","Type":"NodeParagraph","Properties":{"id":"20240201213554-u9aje8f","updated":"20240201213554"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/AQS.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213555-kfuimn2","Type":"NodeParagraph","Properties":{"id":"20240201213555-kfuimn2","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"AQS 就是一个抽象类，主要用来构建锁和同步器。"}]},{"ID":"20240201213556-2p8xbap","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213556-2p8xbap","updated":"20240201213556"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable {\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213557-pujdxw9","Type":"NodeParagraph","Properties":{"id":"20240201213557-pujdxw9","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"AQS 为构建锁和同步器提供了一些通用功能的实现，因此，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":"，其他的诸如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantReadWriteLock"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SynchronousQueue"},{"Type":"NodeText","Data":"等等皆是基于 AQS 的。"}]},{"ID":"20240201213558-aaqexmk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213558-aaqexmk","updated":"20240201213558"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS 原理"}]},{"ID":"20240201213559-pcyja7c","Type":"NodeParagraph","Properties":{"id":"20240201213559-pcyja7c","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"在面试中被问到并发知识的时候，大多都会被问到“请你说一下自己对于 AQS 原理的理解”。下面给大家一个示例供大家参考，面试不是背题，大家一定要加入自己的思想，即使加入不了自己的思想也要保证自己能够通俗的讲出来而不是背出来。"}]},{"ID":"20240201213560-6osd4by","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213560-6osd4by","updated":"20240201213560"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS 核心思想"}]},{"ID":"20240201213561-ql9w52a","Type":"NodeParagraph","Properties":{"id":"20240201213561-ql9w52a","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CLH 锁"},{"Type":"NodeText","Data":" （Craig, Landin, and Hagersten locks） 实现的。"}]},{"ID":"20240201213562-5g0by7j","Type":"NodeParagraph","Properties":{"id":"20240201213562-5g0by7j","updated":"20240201213562"},"Children":[{"Type":"NodeText","Data":"CLH 锁是对自旋锁的一种改进，是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系），暂时获取不到锁的线程将被加入到该队列中。AQS 将每条请求共享资源的线程封装成一个 CLH 队列锁的一个结点（Node）来实现锁的分配。在 CLH 队列锁中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。"}]},{"ID":"20240201213563-zqwut70","Type":"NodeParagraph","Properties":{"id":"20240201213563-zqwut70","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"CLH 队列结构如下图所示："}]},{"ID":"20240201213564-iutmi8b","Type":"NodeParagraph","Properties":{"id":"20240201213564-iutmi8b","updated":"20240201213564"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"CLH 队列结构","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/clh-queue-structure.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213565-ifzyui5","Type":"NodeParagraph","Properties":{"id":"20240201213565-ifzyui5","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"关于 AQS 核心数据结构-CLH 锁的详细解读，强烈推荐阅读 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/jEx-4XhNGOFdCo4Nou5tqg","TextMarkTextContent":"Java AQS 核心数据结构-CLH 锁 - Qunar 技术沙龙"},{"Type":"NodeText","Data":" 这篇文章。"}]},{"ID":"20240201213566-hfps170","Type":"NodeParagraph","Properties":{"id":"20240201213566-hfps170","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"AQS("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":")的核心原理图："}]},{"ID":"20240201213567-8ucfrs8","Type":"NodeParagraph","Properties":{"id":"20240201213567-8ucfrs8","updated":"20240201213567"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"CLH 队列","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/clh-queue-state.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213568-drm9hxu","Type":"NodeParagraph","Properties":{"id":"20240201213568-drm9hxu","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"AQS 使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"int 成员变量 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"state"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 表示同步状态"},{"Type":"NodeText","Data":"，通过内置的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"FIFO 线程等待/等待队列"},{"Type":"NodeText","Data":" 来完成获取资源线程的排队工作。"}]},{"ID":"20240201213569-yi08bry","Type":"NodeParagraph","Properties":{"id":"20240201213569-yi08bry","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 变量由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":" 修饰，用于展示当前临界资源的获锁情况。"}]},{"ID":"20240201213570-c6q7dc8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213570-c6q7dc8","updated":"20240201213570"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 共享变量，使用volatile修饰保证线程可见性\nprivate volatile int state;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213571-qpk7moa","Type":"NodeParagraph","Properties":{"id":"20240201213571-qpk7moa","updated":"20240201213571"},"Children":[{"Type":"NodeText","Data":"另外，状态信息 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"protected"},{"Type":"NodeText","Data":" 类型的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getState()"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setState()"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compareAndSetState()"},{"Type":"NodeText","Data":" 进行操作。并且，这几个方法都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":" 修饰的，在子类中无法被重写。"}]},{"ID":"20240201213572-kjqg3ug","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213572-kjqg3ug","updated":"20240201213572"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//返回同步状态的当前值\nprotected final int getState() {\n     return state;\n}\n // 设置同步状态的值\nprotected final void setState(int newState) {\n     state = newState;\n}\n//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）\nprotected final boolean compareAndSetState(int expect, int update) {\n      return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213573-mp8ks4h","Type":"NodeParagraph","Properties":{"id":"20240201213573-mp8ks4h","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"以可重入的互斥锁 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 为例，它的内部维护了一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 变量，用来表示锁的占用状态。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的初始值为 0，表示锁处于未锁定状态。当线程 A 调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"lock()"},{"Type":"NodeText","Data":" 方法时，会尝试通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquire()"},{"Type":"NodeText","Data":" 方法独占该锁，并让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值加 1。如果成功了，那么线程 A 就获取到了锁。如果失败了，那么线程 A 就会被加入到一个等待队列（CLH 队列）中，直到其他线程释放该锁。假设线程 A 获取锁成功了，释放锁之前，A 线程自己是可以重复获取此锁的（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 会累加）。这就是可重入性的体现：一个线程可以多次获取同一个锁而不会被阻塞。但是，这也意味着，一个线程必须释放与获取的次数相同的锁，才能让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值回到 0，也就是让锁恢复到未锁定状态。只有这样，其他等待的线程才能有机会获取该锁。"}]},{"ID":"20240201213574-6lt3pab","Type":"NodeParagraph","Properties":{"id":"20240201213574-6lt3pab","updated":"20240201213574"},"Children":[{"Type":"NodeText","Data":"线程 A 尝试获取锁的过程如下图所示（图源"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"./reentrantlock.md","TextMarkTextContent":"从 ReentrantLock 的实现看 AQS 的原理及应用 - 美团技术团队"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213575-t26sr4b","Type":"NodeParagraph","Properties":{"id":"20240201213575-t26sr4b","updated":"20240201213575"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"AQS 独占模式获取锁","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/aqs-exclusive-mode-acquire-lock.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213576-xn3kkot","Type":"NodeParagraph","Properties":{"id":"20240201213576-xn3kkot","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"再以倒计时器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 以例，任务分为 N 个子线程去执行，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程开始执行任务，每执行完一个子线程，就调用一次 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown()"},{"Type":"NodeText","Data":" 方法。该方法会尝试使用 CAS(Compare and Swap) 操作，让 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值减少 1。当所有的子线程都执行完毕后（即 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值变为 0），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 会调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"unpark()"},{"Type":"NodeText","Data":" 方法，唤醒主线程。这时，主线程就可以从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法而非 AQS 中的）返回，继续执行后续的操作。"}]},{"ID":"20240201213577-w9sit6l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213577-w9sit6l","updated":"20240201213577"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AQS 资源共享方式"}]},{"ID":"20240201213578-7oenc0d","Type":"NodeParagraph","Properties":{"id":"20240201213578-7oenc0d","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"AQS 定义两种资源共享方式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Exclusive"},{"Type":"NodeText","Data":"（独占，只有一个线程能执行，如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":"）和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Share"},{"Type":"NodeText","Data":"（共享，多个线程可同时执行，如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":"/"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201213579-8gwsf0s","Type":"NodeParagraph","Properties":{"id":"20240201213579-8gwsf0s","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"一般来说，自定义同步器的共享方式要么是独占，要么是共享，他们也只需实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquire-tryRelease"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquireShared-tryReleaseShared"},{"Type":"NodeText","Data":"中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantReadWriteLock"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213580-6enrnlr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213580-6enrnlr","updated":"20240201213580"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"自定义同步器"}]},{"ID":"20240201213581-da2s9fa","Type":"NodeParagraph","Properties":{"id":"20240201213581-da2s9fa","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样（模板方法模式很经典的一个应用）："}]},{"ID":"20240201213582-8zu7gei","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213582-8zu7gei","updated":"20240201213582"},"Children":[{"ID":"20240201213583-wsajxq8","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213583-wsajxq8","updated":"20240201213583"},"Children":[{"ID":"20240201213584-klt80sh","Type":"NodeParagraph","Properties":{"id":"20240201213584-klt80sh","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"使用者继承 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" 并重写指定的方法。"}]}]},{"ID":"20240201213585-gqcy1mp","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213585-gqcy1mp","updated":"20240201213585"},"Children":[{"ID":"20240201213586-3s879i3","Type":"NodeParagraph","Properties":{"id":"20240201213586-3s879i3","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。"}]}]}]},{"ID":"20240201213587-ch2exxe","Type":"NodeParagraph","Properties":{"id":"20240201213587-ch2exxe","updated":"20240201213587"},"Children":[{"Type":"NodeText","Data":"这和我们以往通过实现接口的方式有很大区别，这是模板方法模式很经典的一个运用。"}]},{"ID":"20240201213588-oh1j7e1","Type":"NodeParagraph","Properties":{"id":"20240201213588-oh1j7e1","updated":"20240201213588"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的钩子方法："}]},{"ID":"20240201213589-wqxzfck","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213589-wqxzfck","updated":"20240201213589"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//独占方式。尝试获取资源，成功则返回true，失败则返回false。\nprotected boolean tryAcquire(int)\n//独占方式。尝试释放资源，成功则返回true，失败则返回false。\nprotected boolean tryRelease(int)\n//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。\nprotected int tryAcquireShared(int)\n//共享方式。尝试释放资源，成功则返回true，失败则返回false。\nprotected boolean tryReleaseShared(int)\n//该线程是否正在独占资源。只有用到condition才需要去实现它。\nprotected boolean isHeldExclusively()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213590-3f6l8j2","Type":"NodeParagraph","Properties":{"id":"20240201213590-3f6l8j2","updated":"20240201213590"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是钩子方法呢？"},{"Type":"NodeText","Data":" 钩子方法是一种被声明在抽象类中的方法，一般使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"protected"},{"Type":"NodeText","Data":" 关键字修饰，它可以是空方法（由子类实现），也可以是默认实现的方法。模板设计模式通过钩子方法控制固定步骤的实现。"}]},{"ID":"20240201213591-w7ag7dx","Type":"NodeParagraph","Properties":{"id":"20240201213591-w7ag7dx","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"篇幅问题，这里就不详细介绍模板方法模式了，不太了解的小伙伴可以看看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/zpScSCktFpnSWHWIQem2jg","TextMarkTextContent":"用 Java8 改造后的模板方法模式真的是 yyds!"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213592-o2svpwm","Type":"NodeParagraph","Properties":{"id":"20240201213592-o2svpwm","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"除了上面提到的钩子方法之外，AQS 类中的其他方法都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":" ，所以无法被其他类重写。"}]},{"ID":"20240201213593-40hsryn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213593-40hsryn","updated":"20240201213593"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见同步工具类"}]},{"ID":"20240201213594-gx94brw","Type":"NodeParagraph","Properties":{"id":"20240201213594-gx94brw","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"下面介绍几个基于 AQS 的常见同步工具类。"}]},{"ID":"20240201213595-jymi9bq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213595-jymi9bq","updated":"20240201213595"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Semaphore(信号量)"}]},{"ID":"20240201213596-cicv1d3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213596-cicv1d3","updated":"20240201213596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"介绍"}]},{"ID":"20240201213597-1q7rlcx","Type":"NodeParagraph","Properties":{"id":"20240201213597-1q7rlcx","updated":"20240201213597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 都是一次只允许一个线程访问某个资源，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":"(信号量)可以用来控制同时访问特定资源的线程数量。"}]},{"ID":"20240201213598-sjonnqt","Type":"NodeParagraph","Properties":{"id":"20240201213598-sjonnqt","updated":"20240201213598"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 的使用简单，我们这里假设有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"N(N\u0026gt;5)"},{"Type":"NodeText","Data":" 个线程来获取 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 中的共享资源，下面的代码表示同一时刻 N 个线程中只有 5 个线程能获取到共享资源，其他线程都会阻塞，只有获取到共享资源的线程才能执行。等到有线程释放了共享资源，其他阻塞的线程才能获取到。"}]},{"ID":"20240201213599-cj4qo53","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213599-cj4qo53","updated":"20240201213599"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 初始共享资源数量\nfinal Semaphore semaphore = new Semaphore(5);\n// 获取1个许可\nsemaphore.acquire();\n// 释放1个许可\nsemaphore.release();\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213600-6r2u89m","Type":"NodeParagraph","Properties":{"id":"20240201213600-6r2u89m","updated":"20240201213600"},"Children":[{"Type":"NodeText","Data":"当初始的资源个数为 1 的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 退化为排他锁。"}]},{"ID":"20240201213601-nyrfjjf","Type":"NodeParagraph","Properties":{"id":"20240201213601-nyrfjjf","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 有两种模式：。"}]},{"ID":"20240201213602-z2crakl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213602-z2crakl","updated":"20240201213602"},"Children":[{"ID":"20240201213603-6yvc9la","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213603-6yvc9la","updated":"20240201213603"},"Children":[{"ID":"20240201213604-114bw7k","Type":"NodeParagraph","Properties":{"id":"20240201213604-114bw7k","updated":"20240201213604"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"公平模式："},{"Type":"NodeText","Data":" 调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire()"},{"Type":"NodeText","Data":" 方法的顺序就是获取许可证的顺序，遵循 FIFO；"}]}]},{"ID":"20240201213605-wnfm5jz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213605-wnfm5jz","updated":"20240201213605"},"Children":[{"ID":"20240201213606-wum4b2c","Type":"NodeParagraph","Properties":{"id":"20240201213606-wum4b2c","updated":"20240201213606"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非公平模式："},{"Type":"NodeText","Data":" 抢占式的。"}]}]}]},{"ID":"20240201213607-7lpflro","Type":"NodeParagraph","Properties":{"id":"20240201213607-7lpflro","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 对应的两个构造方法如下："}]},{"ID":"20240201213608-ivif9xd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213608-ivif9xd","updated":"20240201213608"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213609-bt9uurr","Type":"NodeParagraph","Properties":{"id":"20240201213609-bt9uurr","updated":"20240201213609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。"}]},{"ID":"20240201213610-gntq1zb","Type":"NodeParagraph","Properties":{"id":"20240201213610-gntq1zb","updated":"20240201213610"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 通常用于那些资源有明确访问数量限制的场景比如限流（仅限于单机模式，实际项目中推荐使用 Redis +Lua 来做限流）。"}]},{"ID":"20240201213611-ig0se7s","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213611-ig0se7s","updated":"20240201213611"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"原理"}]},{"ID":"20240201213612-thk75u4","Type":"NodeParagraph","Properties":{"id":"20240201213612-thk75u4","updated":"20240201213612"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 是共享锁的一种实现，它默认构造 AQS 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":"，你可以将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":" 的值理解为许可证的数量，只有拿到许可证的线程才能执行。"}]},{"ID":"20240201213613-kndwusq","Type":"NodeParagraph","Properties":{"id":"20240201213613-kndwusq","updated":"20240201213613"},"Children":[{"Type":"NodeText","Data":"以无参 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire"},{"Type":"NodeText","Data":" 方法为例，调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semaphore.acquire()"},{"Type":"NodeText","Data":" ，线程尝试获取许可证，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state \u0026gt; 0"},{"Type":"NodeText","Data":" 的话，则表示可以获取成功，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state \u0026lt;= 0"},{"Type":"NodeText","Data":" 的话，则表示许可证数量不足，获取失败。"}]},{"ID":"20240201213614-r8b1155","Type":"NodeParagraph","Properties":{"id":"20240201213614-r8b1155","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"如果可以获取成功的话("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state \u0026gt; 0"},{"Type":"NodeText","Data":" )，会尝试使用 CAS 操作去修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=state-1"},{"Type":"NodeText","Data":"。如果获取失败则会创建一个 Node 节点加入等待队列，挂起当前线程。"}]},{"ID":"20240201213615-9k6gcok","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213615-9k6gcok","updated":"20240201213615"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 获取1个许可证\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n\n// 获取一个或者多个许可证\npublic void acquire(int permits) throws InterruptedException {\n    if (permits \u003c 0) throw new IllegalArgumentException();\n    sync.acquireSharedInterruptibly(permits);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213616-3mnxrht","Type":"NodeParagraph","Properties":{"id":"20240201213616-3mnxrht","updated":"20240201213616"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquireSharedInterruptibly"},{"Type":"NodeText","Data":"方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" 中的默认实现。"}]},{"ID":"20240201213617-u0jiyhg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213617-u0jiyhg","updated":"20240201213617"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 共享模式下获取许可证，获取成功则返回，失败则加入等待队列，挂起线程\npublic final void acquireSharedInterruptibly(int arg)\n    throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n        // 尝试获取许可证，arg为获取许可证个数，当获取失败时,则创建一个节点加入等待队列，挂起当前线程。\n    if (tryAcquireShared(arg) \u003c 0)\n      doAcquireSharedInterruptibly(arg);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213618-6oldzdx","Type":"NodeParagraph","Properties":{"id":"20240201213618-6oldzdx","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"这里再以非公平模式（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NonfairSync"},{"Type":"NodeText","Data":"）的为例，看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquireShared"},{"Type":"NodeText","Data":" 方法的实现。"}]},{"ID":"20240201213619-9l0ah9j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213619-9l0ah9j","updated":"20240201213619"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 共享模式下尝试获取资源(在Semaphore中的资源即许可证):\nprotected int tryAcquireShared(int acquires) {\n    return nonfairTryAcquireShared(acquires);\n}\n\n// 非公平的共享模式获取许可证\nfinal int nonfairTryAcquireShared(int acquires) {\n    for (;;) {\n        // 当前可用许可证数量\n        int available = getState();\n        /*\n         * 尝试获取许可证，当前可用许可证数量小于等于0时，返回负值，表示获取失败，\n         * 当前可用许可证大于0时才可能获取成功，CAS失败了会循环重新获取最新的值尝试获取\n         */\n        int remaining = available - acquires;\n        if (remaining \u003c 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213620-fit663r","Type":"NodeParagraph","Properties":{"id":"20240201213620-fit663r","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"以无参 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"release"},{"Type":"NodeText","Data":" 方法为例，调用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semaphore.release();"},{"Type":"NodeText","Data":" ，线程尝试释放许可证，并使用 CAS 操作去修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=state+1"},{"Type":"NodeText","Data":"。释放许可证成功之后，同时会唤醒等待队列中的一个线程。被唤醒的线程会重新尝试去修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state=state-1"},{"Type":"NodeText","Data":" ，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state \u0026gt; 0"},{"Type":"NodeText","Data":" 则获取令牌成功，否则重新进入等待队列，挂起线程。"}]},{"ID":"20240201213621-cfretvs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213621-cfretvs","updated":"20240201213621"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 释放一个许可证\npublic void release() {\n    sync.releaseShared(1);\n}\n\n// 释放一个或者多个许可证\npublic void release(int permits) {\n    if (permits \u003c 0) throw new IllegalArgumentException();\n    sync.releaseShared(permits);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213622-dfvmn83","Type":"NodeParagraph","Properties":{"id":"20240201213622-dfvmn83","updated":"20240201213622"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"releaseShared"},{"Type":"NodeText","Data":"方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" 中的默认实现。"}]},{"ID":"20240201213623-w4pv283","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213623-w4pv283","updated":"20240201213623"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 释放共享锁\n// 如果 tryReleaseShared 返回 true，就唤醒等待队列中的一个或多个线程。\npublic final boolean releaseShared(int arg) {\n    //释放共享锁\n    if (tryReleaseShared(arg)) {\n      //释放当前节点的后置等待节点\n      doReleaseShared();\n      return true;\n    }\n    return false;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213624-pqzydcv","Type":"NodeParagraph","Properties":{"id":"20240201213624-pqzydcv","updated":"20240201213624"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryReleaseShared"},{"Type":"NodeText","Data":" 方法是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 的内部类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Sync"},{"Type":"NodeText","Data":" 重写的一个方法， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":"中的默认实现仅仅抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UnsupportedOperationException"},{"Type":"NodeText","Data":" 异常。"}]},{"ID":"20240201213625-7wvqyf5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213625-7wvqyf5","updated":"20240201213625"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 内部类 Sync 中重写的一个方法\n// 尝试释放资源\nprotected final boolean tryReleaseShared(int releases) {\n    for (;;) {\n        int current = getState();\n        // 可用许可证+1\n        int next = current + releases;\n        if (next \u003c current) // overflow\n            throw new Error(\"Maximum permit count exceeded\");\n         // CAS修改state的值\n        if (compareAndSetState(current, next))\n            return true;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213626-8o0xgye","Type":"NodeParagraph","Properties":{"id":"20240201213626-8o0xgye","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"可以看到，上面提到的几个方法底层基本都是通过同步器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sync"},{"Type":"NodeText","Data":" 实现的。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Sync"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的内部类 , 继承了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" ，重写了其中的某些方法。并且，Sync 对应的还有两个子类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NonfairSync"},{"Type":"NodeText","Data":"（对应非公平模式） 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FairSync"},{"Type":"NodeText","Data":"（对应公平模式）。"}]},{"ID":"20240201213627-40tog9o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213627-40tog9o","updated":"20240201213627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final class Sync extends AbstractQueuedSynchronizer {\n  // ...\n}\nstatic final class NonfairSync extends Sync {\n  // ...\n}\nstatic final class FairSync extends Sync {\n  // ...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213628-9plfpgy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213628-9plfpgy","updated":"20240201213628"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实战"}]},{"ID":"20240201213629-mekgfku","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213629-mekgfku","updated":"20240201213629"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class SemaphoreExample {\n  // 请求的数量\n  private static final int threadCount = 550;\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）\n    ExecutorService threadPool = Executors.newFixedThreadPool(300);\n    // 初始许可证数量\n    final Semaphore semaphore = new Semaphore(20);\n\n    for (int i = 0; i \u003c threadCount; i++) {\n      final int threadnum = i;\n      threadPool.execute(() -\u003e {// Lambda 表达式的运用\n        try {\n          semaphore.acquire();// 获取一个许可，所以可运行线程数量为20/1=20\n          test(threadnum);\n          semaphore.release();// 释放一个许可\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n\n      });\n    }\n    threadPool.shutdown();\n    System.out.println(\"finish\");\n  }\n\n  public static void test(int threadnum) throws InterruptedException {\n    Thread.sleep(1000);// 模拟请求的耗时操作\n    System.out.println(\"threadnum:\" + threadnum);\n    Thread.sleep(1000);// 模拟请求的耗时操作\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213630-i1xruys","Type":"NodeParagraph","Properties":{"id":"20240201213630-i1xruys","updated":"20240201213630"},"Children":[{"Type":"NodeText","Data":"执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire()"},{"Type":"NodeText","Data":" 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"release"},{"Type":"NodeText","Data":" 方法增加一个许可证，这可能会释放一个阻塞的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire()"},{"Type":"NodeText","Data":" 方法。然而，其实并没有实际的许可证这个对象，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 只是维持了一个可获得许可证的数量。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 经常用于限制获取某种资源的线程数量。"}]},{"ID":"20240201213631-u4kn7mx","Type":"NodeParagraph","Properties":{"id":"20240201213631-u4kn7mx","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"当然一次也可以一次拿取和释放多个许可，不过一般没有必要这样做："}]},{"ID":"20240201213632-j1dfe5s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213632-j1dfe5s","updated":"20240201213632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"semaphore.acquire(5);// 获取5个许可，所以可运行线程数量为20/5=4\ntest(threadnum);\nsemaphore.release(5);// 释放5个许可\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213633-vc0aghb","Type":"NodeParagraph","Properties":{"id":"20240201213633-vc0aghb","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"除了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquire()"},{"Type":"NodeText","Data":" 方法之外，另一个比较常用的与之对应的方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquire()"},{"Type":"NodeText","Data":" 方法，该方法如果获取不到许可就立即返回 false。"}]},{"ID":"20240201213634-s4rr5d9","Type":"NodeParagraph","Properties":{"id":"20240201213634-s4rr5d9","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/645","TextMarkTextContent":"issue645 补充内容"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213635-9rgyqe8","Type":"NodeBlockquote","Properties":{"id":"20240201213635-9rgyqe8","updated":"20240201213635"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213636-lo9lttk","Type":"NodeParagraph","Properties":{"id":"20240201213636-lo9lttk","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Semaphore"},{"Type":"NodeText","Data":" 与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 一样，也是共享锁的一种实现。它默认构造 AQS 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":"。当执行任务的线程数量超出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":"，那么多余的线程将会被放入等待队列 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Park"},{"Type":"NodeText","Data":",并自旋判断 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 是否大于 0。只有当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 大于 0 的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"release()"},{"Type":"NodeText","Data":" 方法，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"release()"},{"Type":"NodeText","Data":" 方法使得 state 的变量会加 1，那么自旋的线程便会判断成功。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如此，每次只有最多不超过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permits"},{"Type":"NodeText","Data":" 数量的线程能自旋成功，便限制了执行任务线程的数量。"}]}]},{"ID":"20240201213637-paa83pa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213637-paa83pa","updated":"20240201213637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CountDownLatch （倒计时器）"}]},{"ID":"20240201213638-fjl6v0r","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213638-fjl6v0r","updated":"20240201213638"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"介绍"}]},{"ID":"20240201213639-noq56qs","Type":"NodeParagraph","Properties":{"id":"20240201213639-noq56qs","updated":"20240201213639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 允许 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。"}]},{"ID":"20240201213640-en0tw3e","Type":"NodeParagraph","Properties":{"id":"20240201213640-en0tw3e","updated":"20240201213640"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 使用完毕后，它不能再次被使用。"}]},{"ID":"20240201213641-zcxqfaq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213641-zcxqfaq","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"原理"}]},{"ID":"20240201213642-q7n52d6","Type":"NodeParagraph","Properties":{"id":"20240201213642-q7n52d6","updated":"20240201213642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 是共享锁的一种实现，它默认构造 AQS 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":"。这个我们通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的构造方法即可看出。"}]},{"ID":"20240201213643-f56cr24","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213643-f56cr24","updated":"20240201213643"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public CountDownLatch(int count) {\n    if (count \u003c 0) throw new IllegalArgumentException(\"count \u003c 0\");\n    this.sync = new Sync(count);\n}\n\nprivate static final class Sync extends AbstractQueuedSynchronizer {\n    Sync(int count) {\n        setState(count);\n    }\n  //...\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213644-lq3plzg","Type":"NodeParagraph","Properties":{"id":"20240201213644-lq3plzg","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"当线程调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown()"},{"Type":"NodeText","Data":" 时，其实使用了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryReleaseShared"},{"Type":"NodeText","Data":"方法以 CAS 的操作来减少 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":"，直至 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 为 0 。当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 为 0 时，表示所有的线程都调用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown"},{"Type":"NodeText","Data":" 方法，那么在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 上等待的线程就会被唤醒并继续执行。"}]},{"ID":"20240201213645-czqwliu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213645-czqwliu","updated":"20240201213645"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public void countDown() {\n    // Sync 是 CountDownLatch 的内部类 , 继承了 AbstractQueuedSynchronizer\n    sync.releaseShared(1);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213646-cuqco42","Type":"NodeParagraph","Properties":{"id":"20240201213646-cuqco42","updated":"20240201213646"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"releaseShared"},{"Type":"NodeText","Data":"方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" 中的默认实现。"}]},{"ID":"20240201213647-1etxxt5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213647-1etxxt5","updated":"20240201213647"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 释放共享锁\n// 如果 tryReleaseShared 返回 true，就唤醒等待队列中的一个或多个线程。\npublic final boolean releaseShared(int arg) {\n    //释放共享锁\n    if (tryReleaseShared(arg)) {\n      //释放当前节点的后置等待节点\n      doReleaseShared();\n      return true;\n    }\n    return false;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213648-rw5mu3d","Type":"NodeParagraph","Properties":{"id":"20240201213648-rw5mu3d","updated":"20240201213648"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryReleaseShared"},{"Type":"NodeText","Data":" 方法是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的内部类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Sync"},{"Type":"NodeText","Data":" 重写的一个方法， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":"中的默认实现仅仅抛出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UnsupportedOperationException"},{"Type":"NodeText","Data":" 异常。"}]},{"ID":"20240201213649-mpynq57","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213649-mpynq57","updated":"20240201213649"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 对 state 进行递减，直到 state 变成 0；\n// 只有 count 递减到 0 时，countDown 才会返回 true\nprotected boolean tryReleaseShared(int releases) {\n    // 自选检查 state 是否为 0\n    for (;;) {\n        int c = getState();\n        // 如果 state 已经是 0 了，直接返回 false\n        if (c == 0)\n            return false;\n        // 对 state 进行递减\n        int nextc = c-1;\n        // CAS 操作更新 state 的值\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213650-4h054gt","Type":"NodeParagraph","Properties":{"id":"20240201213650-4h054gt","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"以无参 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await"},{"Type":"NodeText","Data":"方法为例，当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 的时候，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 不为 0，那就证明任务还没有执行完毕，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 就会一直阻塞，也就是说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 之后的语句不会被执行（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"main"},{"Type":"NodeText","Data":" 线程被加入到等待队列也就是 CLH 队列中了）。然后，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 会自旋 CAS 判断 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state == 0"},{"Type":"NodeText","Data":"，如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state == 0"},{"Type":"NodeText","Data":" 的话，就会释放所有等待的线程，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法之后的语句得到执行。"}]},{"ID":"20240201213651-cusm7j9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213651-cusm7j9","updated":"20240201213651"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 等待（也可以叫做加锁）\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n// 带有超时时间的等待\npublic boolean await(long timeout, TimeUnit unit)\n    throws InterruptedException {\n    return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213652-qcykpzv","Type":"NodeParagraph","Properties":{"id":"20240201213652-qcykpzv","updated":"20240201213652"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acquireSharedInterruptibly"},{"Type":"NodeText","Data":"方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AbstractQueuedSynchronizer"},{"Type":"NodeText","Data":" 中的默认实现。"}]},{"ID":"20240201213653-mr3z8k5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213653-mr3z8k5","updated":"20240201213653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 尝试获取锁，获取成功则返回，失败则加入等待队列，挂起线程\npublic final void acquireSharedInterruptibly(int arg)\n    throws InterruptedException {\n    if (Thread.interrupted())\n      throw new InterruptedException();\n        // 尝试获得锁，获取成功则返回\n    if (tryAcquireShared(arg) \u003c 0)\n      // 获取失败加入等待队列，挂起线程\n      doAcquireSharedInterruptibly(arg);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213654-sp4yq7i","Type":"NodeParagraph","Properties":{"id":"20240201213654-sp4yq7i","updated":"20240201213654"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tryAcquireShared"},{"Type":"NodeText","Data":" 方法是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的内部类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Sync"},{"Type":"NodeText","Data":" 重写的一个方法，其作用就是判断 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"state"},{"Type":"NodeText","Data":" 的值是否为 0，是的话就返回 1，否则返回 -1。"}]},{"ID":"20240201213655-vmalr62","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213655-vmalr62","updated":"20240201213655"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"protected int tryAcquireShared(int acquires) {\n    return (getState() == 0) ? 1 : -1;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213656-lz1znjc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213656-lz1znjc","updated":"20240201213656"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实战"}]},{"ID":"20240201213657-225fy9s","Type":"NodeParagraph","Properties":{"id":"20240201213657-225fy9s","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CountDownLatch 的两种典型用法"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213658-jzdoxjs","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213658-jzdoxjs","updated":"20240201213658"},"Children":[{"ID":"20240201213659-wpmrtg7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213659-wpmrtg7","updated":"20240201213659"},"Children":[{"ID":"20240201213660-rqqp074","Type":"NodeParagraph","Properties":{"id":"20240201213660-rqqp074","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"某一线程在开始运行前等待 n 个线程执行完毕 : 将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的计数器初始化为 n （"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new CountDownLatch(n)"},{"Type":"NodeText","Data":"），每当一个任务线程执行完毕，就将计数器减 1 （"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countdownlatch.countDown()"},{"Type":"NodeText","Data":"），当计数器的值变为 0 时，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch 上 await()"},{"Type":"NodeText","Data":" 的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。"}]}]},{"ID":"20240201213661-d9q3p7c","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213661-d9q3p7c","updated":"20240201213661"},"Children":[{"ID":"20240201213662-s2m5jch","Type":"NodeParagraph","Properties":{"id":"20240201213662-s2m5jch","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"实现多个线程开始执行任务的最大并行性：注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 对象，将其计数器初始化为 1 （"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new CountDownLatch(1)"},{"Type":"NodeText","Data":"），多个线程在开始执行任务前首先 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"coundownlatch.await()"},{"Type":"NodeText","Data":"，当主线程调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"countDown()"},{"Type":"NodeText","Data":" 时，计数器变为 0，多个线程同时被唤醒。"}]}]}]},{"ID":"20240201213663-ygpddeu","Type":"NodeParagraph","Properties":{"id":"20240201213663-ygpddeu","updated":"20240201213663"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CountDownLatch 代码示例"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213664-q4enqcj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213664-q4enqcj","updated":"20240201213664"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class CountDownLatchExample {\n  // 请求的数量\n  private static final int THREAD_COUNT = 550;\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢）\n    // 只是测试使用，实际场景请手动赋值线程池参数\n    ExecutorService threadPool = Executors.newFixedThreadPool(300);\n    final CountDownLatch countDownLatch = new CountDownLatch(THREAD_COUNT);\n    for (int i = 0; i \u003c THREAD_COUNT; i++) {\n      final int threadNum = i;\n      threadPool.execute(() -\u003e {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n          // 表示一个请求已经被完成\n          countDownLatch.countDown();\n        }\n\n      });\n    }\n    countDownLatch.await();\n    threadPool.shutdown();\n    System.out.println(\"finish\");\n  }\n\n  public static void test(int threadnum) throws InterruptedException {\n    Thread.sleep(1000);\n    System.out.println(\"threadNum:\" + threadnum);\n    Thread.sleep(1000);\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213665-s2330dk","Type":"NodeParagraph","Properties":{"id":"20240201213665-s2330dk","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"上面的代码中，我们定义了请求的数量为 550，当这 550 个请求被处理完成之后，才会执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"System.out.println(\u0026quot;finish\u0026quot;);"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213666-6yyufm9","Type":"NodeParagraph","Properties":{"id":"20240201213666-6yyufm9","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的第一次交互是主线程等待其他线程。主线程必须在启动其他线程后立即调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch.await()"},{"Type":"NodeText","Data":" 方法。这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。"}]},{"ID":"20240201213667-nnf6nky","Type":"NodeParagraph","Properties":{"id":"20240201213667-nnf6nky","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"其他 N 个线程必须引用闭锁对象，因为他们需要通知 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 对象，他们已经完成了各自的任务。这种通知机制是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch.countDown()"},{"Type":"NodeText","Data":"方法来完成的；每调用一次这个方法，在构造函数中初始化的 count 值就减 1。所以当 N 个线程都调 用了这个方法，count 的值等于 0，然后主线程就能通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":"方法，恢复执行自己的任务。"}]},{"ID":"20240201213668-vx02gyk","Type":"NodeParagraph","Properties":{"id":"20240201213668-vx02gyk","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"再插一嘴："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法使用不当很容易产生死锁，比如我们上面代码中的 for 循环改为："}]},{"ID":"20240201213669-ifjwika","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213669-ifjwika","updated":"20240201213669"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"for (int i = 0; i \u003c threadCount-1; i++) {\n.......\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213670-buojlco","Type":"NodeParagraph","Properties":{"id":"20240201213670-buojlco","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"这样就导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 的值没办法等于 0，然后就会导致一直等待。"}]},{"ID":"20240201213671-iz4ems9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213671-iz4ems9","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CyclicBarrier(循环栅栏)"}]},{"ID":"20240201213672-xhs2cru","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213672-xhs2cru","updated":"20240201213672"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"介绍"}]},{"ID":"20240201213673-r260fgg","Type":"NodeParagraph","Properties":{"id":"20240201213673-r260fgg","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 非常类似，它也可以实现线程间的技术等待，但是它的功能比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 更加复杂和强大。主要应用场景和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 类似。"}]},{"ID":"20240201213674-hc4lb9g","Type":"NodeBlockquote","Properties":{"id":"20240201213674-hc4lb9g","updated":"20240201213674"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213675-cd7plfg","Type":"NodeParagraph","Properties":{"id":"20240201213675-cd7plfg","updated":"20240201213675"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CountDownLatch"},{"Type":"NodeText","Data":" 的实现是基于 AQS 的，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CycliBarrier"},{"Type":"NodeText","Data":" 是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":"("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReentrantLock"},{"Type":"NodeText","Data":" 也属于 AQS 同步器)和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Condition"},{"Type":"NodeText","Data":" 的。"}]}]},{"ID":"20240201213676-dgvrdjw","Type":"NodeParagraph","Properties":{"id":"20240201213676-dgvrdjw","updated":"20240201213676"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是：让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。"}]},{"ID":"20240201213677-rajwonp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213677-rajwonp","updated":"20240201213677"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"原理"}]},{"ID":"20240201213678-4a48ak1","Type":"NodeParagraph","Properties":{"id":"20240201213678-4a48ak1","updated":"20240201213678"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 内部通过一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 变量作为计数器，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":" 的初始值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parties"},{"Type":"NodeText","Data":" 属性的初始化值，每当一个线程到了栅栏这里了，那么就将计数器减 1。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就尝试执行我们构造方法中输入的任务。"}]},{"ID":"20240201213679-x9vf9el","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213679-x9vf9el","updated":"20240201213679"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//每次拦截的线程数\nprivate final int parties;\n//计数器\nprivate int count;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213680-nbfv8hu","Type":"NodeParagraph","Properties":{"id":"20240201213680-nbfv8hu","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"下面我们结合源码来简单看看。"}]},{"ID":"20240201213681-6i5np3a","Type":"NodeParagraph","Properties":{"id":"20240201213681-6i5np3a","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"1、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 默认的构造方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier(int parties)"},{"Type":"NodeText","Data":"，其参数表示屏障拦截的线程数量，每个线程调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法告诉 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 我已经到达了屏障，然后当前线程被阻塞。"}]},{"ID":"20240201213682-su5t7kd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213682-su5t7kd","updated":"20240201213682"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public CyclicBarrier(int parties) {\n    this(parties, null);\n}\n\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties \u003c= 0) throw new IllegalArgumentException();\n    this.parties = parties;\n    this.count = parties;\n    this.barrierCommand = barrierAction;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213683-osasfrw","Type":"NodeParagraph","Properties":{"id":"20240201213683-osasfrw","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"其中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parties"},{"Type":"NodeText","Data":" 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。"}]},{"ID":"20240201213684-qxiepg3","Type":"NodeParagraph","Properties":{"id":"20240201213684-qxiepg3","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"2、当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 对象调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法时，实际上调用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dowait(false, 0L)"},{"Type":"NodeText","Data":"方法。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法就像树立起一个栅栏的行为一样，将线程挡住了，当拦住的线程数量达到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"parties"},{"Type":"NodeText","Data":" 的值时，栅栏才会打开，线程才得以通过执行。"}]},{"ID":"20240201213685-ro4t76c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213685-ro4t76c","updated":"20240201213685"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public int await() throws InterruptedException, BrokenBarrierException {\n  try {\n      return dowait(false, 0L);\n  } catch (TimeoutException toe) {\n      throw new Error(toe); // cannot happen\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213686-cu7t7q2","Type":"NodeParagraph","Properties":{"id":"20240201213686-cu7t7q2","updated":"20240201213686"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"dowait(false, 0L)"},{"Type":"NodeText","Data":"方法源码分析如下："}]},{"ID":"20240201213687-kwj2nwh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213687-kwj2nwh","updated":"20240201213687"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    // 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。上面的示例中 count 的值就为 5。\n    private int count;\n    /**\n     * Main barrier code, covering the various policies.\n     */\n    private int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        // 锁住\n        lock.lock();\n        try {\n            final Generation g = generation;\n\n            if (g.broken)\n                throw new BrokenBarrierException();\n\n            // 如果线程中断了，抛出异常\n            if (Thread.interrupted()) {\n                breakBarrier();\n                throw new InterruptedException();\n            }\n            // count 减1\n            int index = --count;\n            // 当 count 数量减为 0 之后说明最后一个线程已经到达栅栏了，也就是达到了可以执行await 方法之后的条件\n            if (index == 0) {  // tripped\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)\n                        command.run();\n                    ranAction = true;\n                    // 将 count 重置为 parties 属性的初始化值\n                    // 唤醒之前等待的线程\n                    // 下一波执行开始\n                    nextGeneration();\n                    return 0;\n                } finally {\n                    if (!ranAction)\n                        breakBarrier();\n                }\n            }\n\n            // loop until tripped, broken, interrupted, or timed out\n            for (;;) {\n                try {\n                    if (!timed)\n                        trip.await();\n                    else if (nanos \u003e 0L)\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    if (g == generation \u0026\u0026 ! g.broken) {\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                        // We're about to finish waiting even if we had not\n                        // been interrupted, so this interrupt is deemed to\n                        // \"belong\" to subsequent execution.\n                        Thread.currentThread().interrupt();\n                    }\n                }\n\n                if (g.broken)\n                    throw new BrokenBarrierException();\n\n                if (g != generation)\n                    return index;\n\n                if (timed \u0026\u0026 nanos \u003c= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213688-3vodvu0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213688-3vodvu0","updated":"20240201213688"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实战"}]},{"ID":"20240201213689-nz0fwsi","Type":"NodeParagraph","Properties":{"id":"20240201213689-nz0fwsi","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"示例 1："}]},{"ID":"20240201213690-ecsxoah","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213690-ecsxoah","updated":"20240201213690"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class CyclicBarrierExample1 {\n  // 请求的数量\n  private static final int threadCount = 550;\n  // 需要同步的线程数量\n  private static final CyclicBarrier cyclicBarrier = new CyclicBarrier(5);\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建线程池\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    for (int i = 0; i \u003c threadCount; i++) {\n      final int threadNum = i;\n      Thread.sleep(1000);\n      threadPool.execute(() -\u003e {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      });\n    }\n    threadPool.shutdown();\n  }\n\n  public static void test(int threadnum) throws InterruptedException, BrokenBarrierException {\n    System.out.println(\"threadnum:\" + threadnum + \"is ready\");\n    try {\n      /**等待60秒，保证子线程完全执行结束*/\n      cyclicBarrier.await(60, TimeUnit.SECONDS);\n    } catch (Exception e) {\n      System.out.println(\"-----CyclicBarrierException------\");\n    }\n    System.out.println(\"threadnum:\" + threadnum + \"is finish\");\n  }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213691-kt0hg2o","Type":"NodeParagraph","Properties":{"id":"20240201213691-kt0hg2o","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"运行结果，如下："}]},{"ID":"20240201213692-sjeoxmp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213692-sjeoxmp","updated":"20240201213692"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"threadnum:0is ready\nthreadnum:1is ready\nthreadnum:2is ready\nthreadnum:3is ready\nthreadnum:4is ready\nthreadnum:4is finish\nthreadnum:0is finish\nthreadnum:1is finish\nthreadnum:2is finish\nthreadnum:3is finish\nthreadnum:5is ready\nthreadnum:6is ready\nthreadnum:7is ready\nthreadnum:8is ready\nthreadnum:9is ready\nthreadnum:9is finish\nthreadnum:5is finish\nthreadnum:8is finish\nthreadnum:7is finish\nthreadnum:6is finish\n......\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213693-5z5qs5u","Type":"NodeParagraph","Properties":{"id":"20240201213693-5z5qs5u","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"可以看到当线程数量也就是请求数量达到我们定义的 5 个的时候， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"await()"},{"Type":"NodeText","Data":" 方法之后的方法才被执行。"}]},{"ID":"20240201213694-b7mi6vn","Type":"NodeParagraph","Properties":{"id":"20240201213694-b7mi6vn","updated":"20240201213694"},"Children":[{"Type":"NodeText","Data":"另外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier"},{"Type":"NodeText","Data":" 还提供一个更高级的构造函数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CyclicBarrier(int parties, Runnable barrierAction)"},{"Type":"NodeText","Data":"，用于在线程到达屏障时，优先执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"barrierAction"},{"Type":"NodeText","Data":"，方便处理更复杂的业务场景。"}]},{"ID":"20240201213695-9k0371c","Type":"NodeParagraph","Properties":{"id":"20240201213695-9k0371c","updated":"20240201213695"},"Children":[{"Type":"NodeText","Data":"示例 2："}]},{"ID":"20240201213696-2mpdvw6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213696-2mpdvw6","updated":"20240201213696"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class CyclicBarrierExample2 {\n  // 请求的数量\n  private static final int threadCount = 550;\n  // 需要同步的线程数量\n  private static final CyclicBarrier cyclicBarrier = new CyclicBarrier(5, () -\u003e {\n    System.out.println(\"------当线程数达到之后，优先执行------\");\n  });\n\n  public static void main(String[] args) throws InterruptedException {\n    // 创建线程池\n    ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    for (int i = 0; i \u003c threadCount; i++) {\n      final int threadNum = i;\n      Thread.sleep(1000);\n      threadPool.execute(() -\u003e {\n        try {\n          test(threadNum);\n        } catch (InterruptedException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      });\n    }\n    threadPool.shutdown();\n  }\n\n  public static void test(int threadnum) throws InterruptedException, BrokenBarrierException {\n    System.out.println(\"threadnum:\" + threadnum + \"is ready\");\n    cyclicBarrier.await();\n    System.out.println(\"threadnum:\" + threadnum + \"is finish\");\n  }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213697-jwkuysz","Type":"NodeParagraph","Properties":{"id":"20240201213697-jwkuysz","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"运行结果，如下："}]},{"ID":"20240201213698-nnq4bfu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213698-nnq4bfu","updated":"20240201213698"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"threadnum:0is ready\nthreadnum:1is ready\nthreadnum:2is ready\nthreadnum:3is ready\nthreadnum:4is ready\n------当线程数达到之后，优先执行------\nthreadnum:4is finish\nthreadnum:0is finish\nthreadnum:2is finish\nthreadnum:1is finish\nthreadnum:3is finish\nthreadnum:5is ready\nthreadnum:6is ready\nthreadnum:7is ready\nthreadnum:8is ready\nthreadnum:9is ready\n------当线程数达到之后，优先执行------\nthreadnum:9is finish\nthreadnum:5is finish\nthreadnum:6is finish\nthreadnum:8is finish\nthreadnum:7is finish\n......\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213699-1omaaii","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213699-1omaaii","updated":"20240201213699"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213700-xbalm5a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-xbalm5a","updated":"20240201213700"},"Children":[{"ID":"20240201213701-aut1uc8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213701-aut1uc8","updated":"20240201213701"},"Children":[{"ID":"20240201213702-vnr7n7n","Type":"NodeParagraph","Properties":{"id":"20240201213702-vnr7n7n","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"Java 并发之 AQS 详解："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/waterystone/p/4920797.html","TextMarkTextContent":"https://www.cnblogs.com/waterystone/p/4920797.html"}]}]},{"ID":"20240201213703-j8ba9dp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-j8ba9dp","updated":"20240201213703"},"Children":[{"ID":"20240201213704-2rsb69f","Type":"NodeParagraph","Properties":{"id":"20240201213704-2rsb69f","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"从 ReentrantLock 的实现看 AQS 的原理及应用："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html","TextMarkTextContent":"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html"}]}]}]},{"ID":"20240201213705-hi3y3ll","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213705-hi3y3ll","updated":"20240201213705"}}]}