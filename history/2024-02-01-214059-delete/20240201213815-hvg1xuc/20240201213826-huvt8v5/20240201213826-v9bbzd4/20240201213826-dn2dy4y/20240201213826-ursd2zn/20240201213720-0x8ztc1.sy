{"ID":"20240201213720-0x8ztc1","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213720-0x8ztc1","title":"virtual-thread","updated":"20240201213720"},"Children":[{"ID":"20240201213721-plj6x1e","Type":"NodeThematicBreak","Properties":{"id":"20240201213721-plj6x1e","updated":"20240201213721"}},{"ID":"20240201213722-cn73bol","Type":"NodeParagraph","Properties":{"id":"20240201213722-cn73bol","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"title: 虚拟线程极简入门"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213723-etdjzxq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-etdjzxq","updated":"20240201213723"},"Children":[{"ID":"20240201213724-ii4kf3k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213724-ii4kf3k","updated":"20240201213724"},"Children":[{"ID":"20240201213725-hg2c7iw","Type":"NodeParagraph","Properties":{"id":"20240201213725-hg2c7iw","updated":"20240201213725"},"Children":[{"Type":"NodeText","Data":"Java并发"}]}]}]},{"ID":"20240201213726-3ed70ef","Type":"NodeThematicBreak","Properties":{"id":"20240201213726-3ed70ef","updated":"20240201213726"}},{"ID":"20240201213727-29eku84","Type":"NodeBlockquote","Properties":{"id":"20240201213727-29eku84","updated":"20240201213727"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213728-em980gb","Type":"NodeParagraph","Properties":{"id":"20240201213728-em980gb","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"本文部分内容来自 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Lorin-github","TextMarkTextContent":"Lorin"},{"Type":"NodeText","Data":" 的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/pull/2190","TextMarkTextContent":"PR"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213729-8ixfh1d","Type":"NodeParagraph","Properties":{"id":"20240201213729-8ixfh1d","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"虚拟线程在 Java 21 正式发布，这是一项重量级的更新。"}]},{"ID":"20240201213730-4kq9gwh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213730-4kq9gwh","updated":"20240201213730"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是虚拟线程？"}]},{"ID":"20240201213731-e547rnz","Type":"NodeParagraph","Properties":{"id":"20240201213731-e547rnz","updated":"20240201213731"},"Children":[{"Type":"NodeText","Data":"虚拟线程（Virtual Thread）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），由 JVM 调度。许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。"}]},{"ID":"20240201213732-5yuj2i2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213732-5yuj2i2","updated":"20240201213732"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟线程和平台线程有什么关系？"}]},{"ID":"20240201213733-xyd5480","Type":"NodeParagraph","Properties":{"id":"20240201213733-xyd5480","updated":"20240201213733"},"Children":[{"Type":"NodeText","Data":"在引入虚拟线程之前，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.lang.Thread"},{"Type":"NodeText","Data":" 包已经支持所谓的平台线程（Platform Thread），也就是没有虚拟线程之前，我们一直使用的线程。JVM 调度程序通过平台线程（载体线程）来管理虚拟线程，一个平台线程可以在不同的时间执行不同的虚拟线程（多个虚拟线程挂载在一个平台线程上），当虚拟线程被阻塞或等待时，平台线程可以切换到执行另一个虚拟线程。"}]},{"ID":"20240201213734-c28ekwx","Type":"NodeParagraph","Properties":{"id":"20240201213734-c28ekwx","updated":"20240201213734"},"Children":[{"Type":"NodeText","Data":"虚拟线程、平台线程和系统内核线程的关系图如下所示（图源："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://medium.com/javarevisited/how-to-use-java-19-virtual-threads-c16a32bad5f7","TextMarkTextContent":"How to Use Java 19 Virtual Threads"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213735-9mrcr8h","Type":"NodeParagraph","Properties":{"id":"20240201213735-9mrcr8h","updated":"20240201213735"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"虚拟线程、平台线程和系统内核线程的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/new-features/virtual-threads-platform-threads-kernel-threads-relationship.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213736-hg7062x","Type":"NodeParagraph","Properties":{"id":"20240201213736-hg7062x","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"关于平台线程和系统内核线程的对应关系多提一点：在 Windows 和 Linux 等主流操作系统中，Java 线程采用的是一对一的线程模型，也就是一个平台线程对应一个系统内核线程。Solaris 系统是一个特例，HotSpot VM 在 Solaris 上支持多对多和一对一。具体可以参考 R 大的回答: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/23096638/answer/29617153","TextMarkTextContent":"JVM 中的线程模型是用户级的么？"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213737-2w6fihl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213737-2w6fihl","updated":"20240201213737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟线程有什么优点和缺点？"}]},{"ID":"20240201213738-zk1q2ik","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213738-zk1q2ik","updated":"20240201213738"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优点"}]},{"ID":"20240201213739-p16by7u","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213739-p16by7u","updated":"20240201213739"},"Children":[{"ID":"20240201213740-bd66yvi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-bd66yvi","updated":"20240201213740"},"Children":[{"ID":"20240201213741-64psva2","Type":"NodeParagraph","Properties":{"id":"20240201213741-64psva2","updated":"20240201213741"},"Children":[{"Type":"NodeText","Data":"非常轻量级：可以在单个线程中创建成百上千个虚拟线程而不会导致过多的线程创建和上下文切换。"}]}]},{"ID":"20240201213742-tjzkp0l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-tjzkp0l","updated":"20240201213742"},"Children":[{"ID":"20240201213743-acf3tlm","Type":"NodeParagraph","Properties":{"id":"20240201213743-acf3tlm","updated":"20240201213743"},"Children":[{"Type":"NodeText","Data":"简化异步编程： 虚拟线程可以简化异步编程，使代码更易于理解和维护。它可以将异步代码编写得更像同步代码，避免了回调地狱（Callback Hell）。"}]}]},{"ID":"20240201213744-py4l9ev","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-py4l9ev","updated":"20240201213744"},"Children":[{"ID":"20240201213745-uic2kik","Type":"NodeParagraph","Properties":{"id":"20240201213745-uic2kik","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"减少资源开销： 相比于操作系统线程，虚拟线程的资源开销更小。本质上是提高了线程的执行效率，从而减少线程资源的创建和上下文切换。"}]}]}]},{"ID":"20240201213746-7zntbu6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213746-7zntbu6","updated":"20240201213746"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点"}]},{"ID":"20240201213747-ktxl1bq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213747-ktxl1bq","updated":"20240201213747"},"Children":[{"ID":"20240201213748-inh7n4q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213748-inh7n4q","updated":"20240201213748"},"Children":[{"ID":"20240201213749-8psjb58","Type":"NodeParagraph","Properties":{"id":"20240201213749-8psjb58","updated":"20240201213749"},"Children":[{"Type":"NodeText","Data":"不适用于计算密集型任务： 虚拟线程适用于 I/O 密集型任务，但不适用于计算密集型任务，因为密集型计算始终需要 CPU 资源作为支持。"}]}]},{"ID":"20240201213750-ztg6tu2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213750-ztg6tu2","updated":"20240201213750"},"Children":[{"ID":"20240201213751-01zdbc9","Type":"NodeParagraph","Properties":{"id":"20240201213751-01zdbc9","updated":"20240201213751"},"Children":[{"Type":"NodeText","Data":"依赖于语言或库的支持： 协程需要编程语言或库提供支持。不是所有编程语言都原生支持协程。比如 Java 实现的虚拟线程。"}]}]}]},{"ID":"20240201213752-h30nl5h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213752-h30nl5h","updated":"20240201213752"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"四种创建虚拟线程的方法"}]},{"ID":"20240201213753-7d6lac8","Type":"NodeParagraph","Properties":{"id":"20240201213753-7d6lac8","updated":"20240201213753"},"Children":[{"Type":"NodeText","Data":"Java 21 已经正式支持虚拟线程，大家可以在官网下载使用，在使用上官方为了降低使用门槛，尽量复用原有的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread"},{"Type":"NodeText","Data":" 类，让大家可以更加平滑的使用。"}]},{"ID":"20240201213754-3v9df0h","Type":"NodeParagraph","Properties":{"id":"20240201213754-3v9df0h","updated":"20240201213754"},"Children":[{"Type":"NodeText","Data":"官方提供了以下四种方式创建虚拟线程："}]},{"ID":"20240201213755-z5uenw8","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213755-z5uenw8","updated":"20240201213755"},"Children":[{"ID":"20240201213756-l1q5uzr","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213756-l1q5uzr","updated":"20240201213756"},"Children":[{"ID":"20240201213757-9lbjigi","Type":"NodeParagraph","Properties":{"id":"20240201213757-9lbjigi","updated":"20240201213757"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread.startVirtualThread()"},{"Type":"NodeText","Data":" 创建"}]}]},{"ID":"20240201213758-z3ek7e7","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213758-z3ek7e7","updated":"20240201213758"},"Children":[{"ID":"20240201213759-pxk7rm8","Type":"NodeParagraph","Properties":{"id":"20240201213759-pxk7rm8","updated":"20240201213759"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Thread.ofVirtual()"},{"Type":"NodeText","Data":" 创建"}]}]},{"ID":"20240201213760-nhhd1sk","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213760-nhhd1sk","updated":"20240201213760"},"Children":[{"ID":"20240201213761-7j1lsnm","Type":"NodeParagraph","Properties":{"id":"20240201213761-7j1lsnm","updated":"20240201213761"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadFactory"},{"Type":"NodeText","Data":" 创建"}]}]}]},{"ID":"20240201213762-qjyu1g0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213762-qjyu1g0","updated":"20240201213762"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Thread.startVirtualThread()创建"}]},{"ID":"20240201213763-udhkhgy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213763-udhkhgy","updated":"20240201213763"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    Thread.startVirtualThread(customThread);\n  }\n}\n\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213764-jik8ts2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213764-jik8ts2","updated":"20240201213764"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Thread.ofVirtual()创建"}]},{"ID":"20240201213765-yoe20r6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213765-yoe20r6","updated":"20240201213765"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    // 创建不启动\n    Thread unStarted = Thread.ofVirtual().unstarted(customThread);\n    unStarted.start();\n    // 创建直接启动\n    Thread.ofVirtual().start(customThread);\n  }\n}\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213766-odptt8a","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213766-odptt8a","updated":"20240201213766"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 ThreadFactory 创建"}]},{"ID":"20240201213767-x0qsyyo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213767-x0qsyyo","updated":"20240201213767"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    ThreadFactory factory = Thread.ofVirtual().factory();\n    Thread thread = factory.newThread(customThread);\n    thread.start();\n  }\n}\n\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213768-elyn68y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213768-elyn68y","updated":"20240201213768"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Executors.newVirtualThreadPerTaskExecutor()创建"}]},{"ID":"20240201213769-huyqe0w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213769-huyqe0w","updated":"20240201213769"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n    executor.submit(customThread);\n  }\n}\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213770-urlqamk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213770-urlqamk","updated":"20240201213770"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟线程和平台线程性能对比"}]},{"ID":"20240201213771-trdd5db","Type":"NodeParagraph","Properties":{"id":"20240201213771-trdd5db","updated":"20240201213771"},"Children":[{"Type":"NodeText","Data":"通过多线程和虚拟线程的方式处理相同的任务，对比创建的系统线程数和处理耗时。"}]},{"ID":"20240201213772-w9skfpq","Type":"NodeParagraph","Properties":{"id":"20240201213772-w9skfpq","updated":"20240201213772"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"说明"},{"Type":"NodeText","Data":"：统计创建的系统线程中部分为后台线程（比如 GC 线程），两种场景下都一样，所以并不影响对比。"}]},{"ID":"20240201213773-manlwu8","Type":"NodeParagraph","Properties":{"id":"20240201213773-manlwu8","updated":"20240201213773"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"测试代码"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213774-mwz9o62","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213774-mwz9o62","updated":"20240201213774"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class VirtualThreadTest {\n    static List\u003cInteger\u003e list = new ArrayList\u003c\u003e();\n    public static void main(String[] args) {\n        // 开启线程 统计平台线程数\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n        scheduledExecutorService.scheduleAtFixedRate(() -\u003e {\n            ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n            ThreadInfo[] threadInfo = threadBean.dumpAllThreads(false, false);\n            updateMaxThreadNum(threadInfo.length);\n        }, 10, 10, TimeUnit.MILLISECONDS);\n\n        long start = System.currentTimeMillis();\n        // 虚拟线程\n        ExecutorService executor =  Executors.newVirtualThreadPerTaskExecutor();\n        // 使用平台线程\n        // ExecutorService executor =  Executors.newFixedThreadPool(200);\n        for (int i = 0; i \u003c 10000; i++) {\n            executor.submit(() -\u003e {\n                try {\n                    // 线程睡眠 0.5 s，模拟业务处理\n                    TimeUnit.MILLISECONDS.sleep(500);\n                } catch (InterruptedException ignored) {\n                }\n            });\n        }\n        executor.close();\n        System.out.println(\"max：\" + list.get(0) + \" platform thread/os thread\");\n        System.out.printf(\"totalMillis：%dms\\n\", System.currentTimeMillis() - start);\n\n\n    }\n    // 更新创建的平台最大线程数\n    private static void updateMaxThreadNum(int num) {\n        if (list.isEmpty()) {\n            list.add(num);\n        } else {\n            Integer integer = list.get(0);\n            if (num \u003e integer) {\n                list.add(0, num);\n            }\n        }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213775-v1bf48a","Type":"NodeParagraph","Properties":{"id":"20240201213775-v1bf48a","updated":"20240201213775"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求数 10000 单请求耗时 1s"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213776-jidh850","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213776-jidh850","updated":"20240201213776"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Virtual Thread\nmax：22 platform thread/os thread\ntotalMillis：1806ms\n\n// Platform Thread  线程数200\nmax：209 platform thread/os thread\ntotalMillis：50578ms\n\n// Platform Thread  线程数500\nmax：509 platform thread/os thread\ntotalMillis：20254ms\n\n// Platform Thread  线程数1000\nmax：1009 platform thread/os thread\ntotalMillis：10214ms\n\n// Platform Thread  线程数2000\nmax：2009 platform thread/os thread\ntotalMillis：5358ms\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213777-jz4vm5k","Type":"NodeParagraph","Properties":{"id":"20240201213777-jz4vm5k","updated":"20240201213777"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求数 10000 单请求耗时 0.5s"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213778-lhcsc9e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213778-lhcsc9e","updated":"20240201213778"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Virtual Thread\nmax：22 platform thread/os thread\ntotalMillis：1316ms\n\n// Platform Thread  线程数200\nmax：209 platform thread/os thread\ntotalMillis：25619ms\n\n// Platform Thread  线程数500\nmax：509 platform thread/os thread\ntotalMillis：10277ms\n\n// Platform Thread  线程数1000\nmax：1009 platform thread/os thread\ntotalMillis：5197ms\n\n// Platform Thread  线程数2000\nmax：2009 platform thread/os thread\ntotalMillis：2865ms\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213779-bobdjcw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213779-bobdjcw","updated":"20240201213779"},"Children":[{"ID":"20240201213780-t0j8low","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213780-t0j8low","updated":"20240201213780"},"Children":[{"ID":"20240201213781-pft1qm7","Type":"NodeParagraph","Properties":{"id":"20240201213781-pft1qm7","updated":"20240201213781"},"Children":[{"Type":"NodeText","Data":"可以看到在密集 IO 的场景下，需要创建大量的平台线程异步处理才能达到虚拟线程的处理速度。"}]}]},{"ID":"20240201213782-csyvmys","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213782-csyvmys","updated":"20240201213782"},"Children":[{"ID":"20240201213783-34w2p7z","Type":"NodeParagraph","Properties":{"id":"20240201213783-34w2p7z","updated":"20240201213783"},"Children":[{"Type":"NodeText","Data":"因此，在密集 IO 的场景，虚拟线程可以大幅提高线程的执行效率，减少线程资源的创建以及上下文切换。"}]}]},{"ID":"20240201213784-8svlxmw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213784-8svlxmw","updated":"20240201213784"},"Children":[{"ID":"20240201213785-opgg5ib","Type":"NodeParagraph","Properties":{"id":"20240201213785-opgg5ib","updated":"20240201213785"},"Children":[{"Type":"NodeText","Data":"吐槽：虽然虚拟线程我很想用，但是我 Java8 有机会升级到 Java21 吗？呜呜"}]}]}]},{"ID":"20240201213786-qfirvwi","Type":"NodeParagraph","Properties":{"id":"20240201213786-qfirvwi","updated":"20240201213786"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意"},{"Type":"NodeText","Data":"：有段时间 JDK 一直致力于 Reactor 响应式编程来提高 Java 性能，但响应式编程难以理解、调试、使用，最终又回到了同步编程，最终虚拟线程诞生。"}]}]}