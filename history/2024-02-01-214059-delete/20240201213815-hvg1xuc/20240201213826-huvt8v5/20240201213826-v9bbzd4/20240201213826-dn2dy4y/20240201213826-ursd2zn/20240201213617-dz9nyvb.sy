{"ID":"20240201213617-dz9nyvb","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213617-dz9nyvb","title":"atomic-classes","updated":"20240201213617"},"Children":[{"ID":"20240201213618-vpoj47w","Type":"NodeThematicBreak","Properties":{"id":"20240201213618-vpoj47w","updated":"20240201213618"}},{"ID":"20240201213619-iz2fvl5","Type":"NodeParagraph","Properties":{"id":"20240201213619-iz2fvl5","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"title: Atomic 原子类总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213620-lot2qui","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-lot2qui","updated":"20240201213620"},"Children":[{"ID":"20240201213621-9p9r7yf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-9p9r7yf","updated":"20240201213621"},"Children":[{"ID":"20240201213622-xlklo6l","Type":"NodeParagraph","Properties":{"id":"20240201213622-xlklo6l","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"Java并发"}]}]}]},{"ID":"20240201213623-qxklbh4","Type":"NodeThematicBreak","Properties":{"id":"20240201213623-qxklbh4","updated":"20240201213623"}},{"ID":"20240201213624-roo0xiu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213624-roo0xiu","updated":"20240201213624"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Atomic 原子类介绍"}]},{"ID":"20240201213625-9o7t0rh","Type":"NodeParagraph","Properties":{"id":"20240201213625-9o7t0rh","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"Atomic 翻译成中文是原子的意思。在化学上，我们知道原子是构成一般物质的最小单位，在化学反应中是不可分割的。在我们这里 Atomic 是指一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程干扰。"}]},{"ID":"20240201213626-2yp1hjy","Type":"NodeParagraph","Properties":{"id":"20240201213626-2yp1hjy","updated":"20240201213626"},"Children":[{"Type":"NodeText","Data":"所以，所谓原子类说简单点就是具有原子/原子操作特征的类。"}]},{"ID":"20240201213627-3au9ab8","Type":"NodeParagraph","Properties":{"id":"20240201213627-3au9ab8","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"并发包 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent"},{"Type":"NodeText","Data":" 的原子类都存放在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.util.concurrent.atomic"},{"Type":"NodeText","Data":"下,如下图所示。"}]},{"ID":"20240201213628-5jaa14n","Type":"NodeParagraph","Properties":{"id":"20240201213628-5jaa14n","updated":"20240201213628"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"JUC原子类概览","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/JUC%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%A6%82%E8%A7%88.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213629-7oeke5p","Type":"NodeParagraph","Properties":{"id":"20240201213629-7oeke5p","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"根据操作的数据类型，可以将 JUC 包中的原子类分为 4 类"}]},{"ID":"20240201213630-xkxzs97","Type":"NodeParagraph","Properties":{"id":"20240201213630-xkxzs97","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基本类型"}]},{"ID":"20240201213631-h4epslq","Type":"NodeParagraph","Properties":{"id":"20240201213631-h4epslq","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"使用原子的方式更新基本类型"}]},{"ID":"20240201213632-dt9nklr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213632-dt9nklr","updated":"20240201213632"},"Children":[{"ID":"20240201213633-0v3wjgw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213633-0v3wjgw","updated":"20240201213633"},"Children":[{"ID":"20240201213634-98hc44d","Type":"NodeParagraph","Properties":{"id":"20240201213634-98hc44d","updated":"20240201213634"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":"：整型原子类"}]}]},{"ID":"20240201213635-zoni2i7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213635-zoni2i7","updated":"20240201213635"},"Children":[{"ID":"20240201213636-n1s1iuk","Type":"NodeParagraph","Properties":{"id":"20240201213636-n1s1iuk","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicLong"},{"Type":"NodeText","Data":"：长整型原子类"}]}]},{"ID":"20240201213637-vqwp3a7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213637-vqwp3a7","updated":"20240201213637"},"Children":[{"ID":"20240201213638-2ce27xs","Type":"NodeParagraph","Properties":{"id":"20240201213638-2ce27xs","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicBoolean"},{"Type":"NodeText","Data":"：布尔型原子类"}]}]}]},{"ID":"20240201213639-2j1qdv1","Type":"NodeParagraph","Properties":{"id":"20240201213639-2j1qdv1","updated":"20240201213639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数组类型"}]},{"ID":"20240201213640-8lyoci7","Type":"NodeParagraph","Properties":{"id":"20240201213640-8lyoci7","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"使用原子的方式更新数组里的某个元素"}]},{"ID":"20240201213641-a6htsgi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213641-a6htsgi","updated":"20240201213641"},"Children":[{"ID":"20240201213642-xtr1k7j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-xtr1k7j","updated":"20240201213642"},"Children":[{"ID":"20240201213643-xlany6y","Type":"NodeParagraph","Properties":{"id":"20240201213643-xlany6y","updated":"20240201213643"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicIntegerArray"},{"Type":"NodeText","Data":"：整型数组原子类"}]}]},{"ID":"20240201213644-4iba0vg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213644-4iba0vg","updated":"20240201213644"},"Children":[{"ID":"20240201213645-q2bk14w","Type":"NodeParagraph","Properties":{"id":"20240201213645-q2bk14w","updated":"20240201213645"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicLongArray"},{"Type":"NodeText","Data":"：长整型数组原子类"}]}]},{"ID":"20240201213646-idf3514","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-idf3514","updated":"20240201213646"},"Children":[{"ID":"20240201213647-8yvyl3n","Type":"NodeParagraph","Properties":{"id":"20240201213647-8yvyl3n","updated":"20240201213647"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReferenceArray"},{"Type":"NodeText","Data":"：引用类型数组原子类"}]}]}]},{"ID":"20240201213648-svvbvz7","Type":"NodeParagraph","Properties":{"id":"20240201213648-svvbvz7","updated":"20240201213648"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"引用类型"}]},{"ID":"20240201213649-r0ujg9c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-r0ujg9c","updated":"20240201213649"},"Children":[{"ID":"20240201213650-q2kdh74","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-q2kdh74","updated":"20240201213650"},"Children":[{"ID":"20240201213651-h0m1fl8","Type":"NodeParagraph","Properties":{"id":"20240201213651-h0m1fl8","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReference"},{"Type":"NodeText","Data":"：引用类型原子类"}]}]},{"ID":"20240201213652-cr5zc7o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-cr5zc7o","updated":"20240201213652"},"Children":[{"ID":"20240201213653-4v4swst","Type":"NodeParagraph","Properties":{"id":"20240201213653-4v4swst","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicMarkableReference"},{"Type":"NodeText","Data":"：原子更新带有标记的引用类型。该类将 boolean 标记与引用关联起来，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"也可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213654-j8g6qog","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-j8g6qog","updated":"20240201213654"},"Children":[{"ID":"20240201213655-bt2vcmw","Type":"NodeParagraph","Properties":{"id":"20240201213655-bt2vcmw","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicStampedReference"},{"Type":"NodeText","Data":"：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。"}]}]}]},{"ID":"20240201213656-tddcha5","Type":"NodeParagraph","Properties":{"id":"20240201213656-tddcha5","updated":"20240201213656"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/626","TextMarkTextContent":"issue#626"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":" : "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicMarkableReference"},{"Type":"NodeText","Data":" 不能解决 ABA 问题。"}]},{"ID":"20240201213657-9txm0dp","Type":"NodeParagraph","Properties":{"id":"20240201213657-9txm0dp","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"对象的属性修改类型"}]},{"ID":"20240201213658-xck0qmn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-xck0qmn","updated":"20240201213658"},"Children":[{"ID":"20240201213659-jlzuh0y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-jlzuh0y","updated":"20240201213659"},"Children":[{"ID":"20240201213660-sorltjn","Type":"NodeParagraph","Properties":{"id":"20240201213660-sorltjn","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicIntegerFieldUpdater"},{"Type":"NodeText","Data":":原子更新整型字段的更新器"}]}]},{"ID":"20240201213661-wzi01z0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-wzi01z0","updated":"20240201213661"},"Children":[{"ID":"20240201213662-8paa6h1","Type":"NodeParagraph","Properties":{"id":"20240201213662-8paa6h1","updated":"20240201213662"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicLongFieldUpdater"},{"Type":"NodeText","Data":"：原子更新长整型字段的更新器"}]}]},{"ID":"20240201213663-ewpdvji","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-ewpdvji","updated":"20240201213663"},"Children":[{"ID":"20240201213664-5t5ner4","Type":"NodeParagraph","Properties":{"id":"20240201213664-5t5ner4","updated":"20240201213664"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReferenceFieldUpdater"},{"Type":"NodeText","Data":"：原子更新引用类型里的字段"}]}]}]},{"ID":"20240201213665-e4v7wcs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213665-e4v7wcs","updated":"20240201213665"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"基本类型原子类"}]},{"ID":"20240201213666-8j3iwfz","Type":"NodeParagraph","Properties":{"id":"20240201213666-8j3iwfz","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"使用原子的方式更新基本类型"}]},{"ID":"20240201213667-9ddyuyn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-9ddyuyn","updated":"20240201213667"},"Children":[{"ID":"20240201213668-zyhwnhk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213668-zyhwnhk","updated":"20240201213668"},"Children":[{"ID":"20240201213669-0cdxvmc","Type":"NodeParagraph","Properties":{"id":"20240201213669-0cdxvmc","updated":"20240201213669"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":"：整型原子类"}]}]},{"ID":"20240201213670-mgtl06j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-mgtl06j","updated":"20240201213670"},"Children":[{"ID":"20240201213671-rhwwzkj","Type":"NodeParagraph","Properties":{"id":"20240201213671-rhwwzkj","updated":"20240201213671"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicLong"},{"Type":"NodeText","Data":"：长整型原子类"}]}]},{"ID":"20240201213672-8fhd3sw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213672-8fhd3sw","updated":"20240201213672"},"Children":[{"ID":"20240201213673-7e11d6h","Type":"NodeParagraph","Properties":{"id":"20240201213673-7e11d6h","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicBoolean"},{"Type":"NodeText","Data":"：布尔型原子类"}]}]}]},{"ID":"20240201213674-xe4hzus","Type":"NodeParagraph","Properties":{"id":"20240201213674-xe4hzus","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"上面三个类提供的方法几乎相同，所以我们这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":" 为例子来介绍。"}]},{"ID":"20240201213675-c4xhg5a","Type":"NodeParagraph","Properties":{"id":"20240201213675-c4xhg5a","updated":"20240201213675"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AtomicInteger 类常用方法"}]},{"ID":"20240201213676-eijr8fw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213676-eijr8fw","updated":"20240201213676"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public final int get() //获取当前的值\npublic final int getAndSet(int newValue)//获取当前的值，并设置新的值\npublic final int getAndIncrement()//获取当前的值，并自增\npublic final int getAndDecrement() //获取当前的值，并自减\npublic final int getAndAdd(int delta) //获取当前的值，并加上预期的值\nboolean compareAndSet(int expect, int update) //如果输入的数值等于预期值，则以原子方式将该值设置为输入值（update）\npublic final void lazySet(int newValue)//最终设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213677-m90mn30","Type":"NodeParagraph","Properties":{"id":"20240201213677-m90mn30","updated":"20240201213677"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类使用示例"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213678-jdfxhj2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213678-jdfxhj2","updated":"20240201213678"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.atomic.AtomicInteger;\n\npublic class AtomicIntegerTest {\n\n    public static void main(String[] args) {\n        int temvalue = 0;\n        AtomicInteger i = new AtomicInteger(0);\n        temvalue = i.getAndSet(3);\n        System.out.println(\"temvalue:\" + temvalue + \";  i:\" + i); //temvalue:0;  i:3\n        temvalue = i.getAndIncrement();\n        System.out.println(\"temvalue:\" + temvalue + \";  i:\" + i); //temvalue:3;  i:4\n        temvalue = i.getAndAdd(5);\n        System.out.println(\"temvalue:\" + temvalue + \";  i:\" + i); //temvalue:4;  i:9\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213679-gv1xjvm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213679-gv1xjvm","updated":"20240201213679"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"基本数据类型原子类的优势"}]},{"ID":"20240201213680-9kf1pdl","Type":"NodeParagraph","Properties":{"id":"20240201213680-9kf1pdl","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"通过一个简单例子带大家看一下基本数据类型原子类的优势"}]},{"ID":"20240201213681-zbe7a31","Type":"NodeParagraph","Properties":{"id":"20240201213681-zbe7a31","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、多线程环境不使用原子类保证线程安全（基本数据类型）"}]},{"ID":"20240201213682-2sowbfb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213682-2sowbfb","updated":"20240201213682"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Test {\n        private volatile int count = 0;\n        //若要线程安全执行执行count++，需要加锁\n        public synchronized void increment() {\n                  count++;\n        }\n\n        public int getCount() {\n                  return count;\n        }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213683-0ntxpid","Type":"NodeParagraph","Properties":{"id":"20240201213683-0ntxpid","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、多线程环境使用原子类保证线程安全（基本数据类型）"}]},{"ID":"20240201213684-m15rjjs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213684-m15rjjs","updated":"20240201213684"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Test2 {\n        private AtomicInteger count = new AtomicInteger();\n\n        public void increment() {\n                  count.incrementAndGet();\n        }\n      //使用AtomicInteger之后，不需要加锁，也可以实现线程安全。\n       public int getCount() {\n                return count.get();\n        }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213685-c755i80","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213685-c755i80","updated":"20240201213685"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AtomicInteger 线程安全原理简单分析"}]},{"ID":"20240201213686-s8ftuus","Type":"NodeParagraph","Properties":{"id":"20240201213686-s8ftuus","updated":"20240201213686"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":" 类的部分源码："}]},{"ID":"20240201213687-nk9wmur","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213687-nk9wmur","updated":"20240201213687"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    // setup to use Unsafe.compareAndSwapInt for updates（更新操作时提供“比较并替换”的作用）\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213688-mlizzkt","Type":"NodeParagraph","Properties":{"id":"20240201213688-mlizzkt","updated":"20240201213688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":" 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。"}]},{"ID":"20240201213689-rrknsne","Type":"NodeParagraph","Properties":{"id":"20240201213689-rrknsne","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"CAS 的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"objectFieldOffset()"},{"Type":"NodeText","Data":" 方法是一个本地方法，这个方法是用来拿到“原来的值”的内存地址。另外 value 是一个 volatile 变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新值。"}]},{"ID":"20240201213690-y856bfk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213690-y856bfk","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"数组类型原子类"}]},{"ID":"20240201213691-0b14w8w","Type":"NodeParagraph","Properties":{"id":"20240201213691-0b14w8w","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"使用原子的方式更新数组里的某个元素"}]},{"ID":"20240201213692-cos37wm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-cos37wm","updated":"20240201213692"},"Children":[{"ID":"20240201213693-rq4sids","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-rq4sids","updated":"20240201213693"},"Children":[{"ID":"20240201213694-t83pnir","Type":"NodeParagraph","Properties":{"id":"20240201213694-t83pnir","updated":"20240201213694"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicIntegerArray"},{"Type":"NodeText","Data":"：整形数组原子类"}]}]},{"ID":"20240201213695-mufbr7w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213695-mufbr7w","updated":"20240201213695"},"Children":[{"ID":"20240201213696-jzekzxt","Type":"NodeParagraph","Properties":{"id":"20240201213696-jzekzxt","updated":"20240201213696"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicLongArray"},{"Type":"NodeText","Data":"：长整形数组原子类"}]}]},{"ID":"20240201213697-e48cb72","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213697-e48cb72","updated":"20240201213697"},"Children":[{"ID":"20240201213698-ouqlvzl","Type":"NodeParagraph","Properties":{"id":"20240201213698-ouqlvzl","updated":"20240201213698"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReferenceArray"},{"Type":"NodeText","Data":"：引用类型数组原子类"}]}]}]},{"ID":"20240201213699-7wnxuie","Type":"NodeParagraph","Properties":{"id":"20240201213699-7wnxuie","updated":"20240201213699"},"Children":[{"Type":"NodeText","Data":"上面三个类提供的方法几乎相同，所以我们这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicIntegerArray"},{"Type":"NodeText","Data":" 为例子来介绍。"}]},{"ID":"20240201213700-4ywk3o1","Type":"NodeParagraph","Properties":{"id":"20240201213700-4ywk3o1","updated":"20240201213700"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicIntegerArray"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类常用方法"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213701-svufx4m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213701-svufx4m","updated":"20240201213701"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public final int get(int i) //获取 index=i 位置元素的值\npublic final int getAndSet(int i, int newValue)//返回 index=i 位置的当前的值，并将其设置为新值：newValue\npublic final int getAndIncrement(int i)//获取 index=i 位置元素的值，并让该位置的元素自增\npublic final int getAndDecrement(int i) //获取 index=i 位置元素的值，并让该位置的元素自减\npublic final int getAndAdd(int i, int delta) //获取 index=i 位置元素的值，并加上预期的值\nboolean compareAndSet(int i, int expect, int update) //如果输入的数值等于预期值，则以原子方式将 index=i 位置的元素值设置为输入值（update）\npublic final void lazySet(int i, int newValue)//最终 将index=i 位置的元素设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213702-itzdvzs","Type":"NodeParagraph","Properties":{"id":"20240201213702-itzdvzs","updated":"20240201213702"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicIntegerArray"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类使用示例"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213703-2dp0jba","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213703-2dp0jba","updated":"20240201213703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.atomic.AtomicIntegerArray;\n\npublic class AtomicIntegerArrayTest {\n\n    public static void main(String[] args) {\n        int temvalue = 0;\n        int[] nums = { 1, 2, 3, 4, 5, 6 };\n        AtomicIntegerArray i = new AtomicIntegerArray(nums);\n        for (int j = 0; j \u003c nums.length; j++) {\n            System.out.println(i.get(j));\n        }\n        temvalue = i.getAndSet(0, 2);\n        System.out.println(\"temvalue:\" + temvalue + \";  i:\" + i);\n        temvalue = i.getAndIncrement(0);\n        System.out.println(\"temvalue:\" + temvalue + \";  i:\" + i);\n        temvalue = i.getAndAdd(0, 5);\n        System.out.println(\"temvalue:\" + temvalue + \";  i:\" + i);\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213704-ty08eyn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213704-ty08eyn","updated":"20240201213704"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"引用类型原子类"}]},{"ID":"20240201213705-3tdgj45","Type":"NodeParagraph","Properties":{"id":"20240201213705-3tdgj45","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"基本类型原子类只能更新一个变量，如果需要原子更新多个变量，需要使用 引用类型原子类。"}]},{"ID":"20240201213706-2ifppp2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-2ifppp2","updated":"20240201213706"},"Children":[{"ID":"20240201213707-z7dhbw0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213707-z7dhbw0","updated":"20240201213707"},"Children":[{"ID":"20240201213708-guamhqn","Type":"NodeParagraph","Properties":{"id":"20240201213708-guamhqn","updated":"20240201213708"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReference"},{"Type":"NodeText","Data":"：引用类型原子类"}]}]},{"ID":"20240201213709-d77ir27","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213709-d77ir27","updated":"20240201213709"},"Children":[{"ID":"20240201213710-i9yj9ix","Type":"NodeParagraph","Properties":{"id":"20240201213710-i9yj9ix","updated":"20240201213710"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicStampedReference"},{"Type":"NodeText","Data":"：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。"}]}]},{"ID":"20240201213711-mmkm3sr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213711-mmkm3sr","updated":"20240201213711"},"Children":[{"ID":"20240201213712-4x8j1yl","Type":"NodeParagraph","Properties":{"id":"20240201213712-4x8j1yl","updated":"20240201213712"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicMarkableReference"},{"Type":"NodeText","Data":"：原子更新带有标记的引用类型。该类将 boolean 标记与引用关联起来，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"也可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。"}]}]}]},{"ID":"20240201213713-dms7o4t","Type":"NodeParagraph","Properties":{"id":"20240201213713-dms7o4t","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"上面三个类提供的方法几乎相同，所以我们这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReference"},{"Type":"NodeText","Data":" 为例子来介绍。"}]},{"ID":"20240201213714-d3ezeh0","Type":"NodeParagraph","Properties":{"id":"20240201213714-d3ezeh0","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicReference"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类使用示例"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213715-ezq12cq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213715-ezq12cq","updated":"20240201213715"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceTest {\n\n    public static void main(String[] args) {\n        AtomicReference \u003c Person \u003e ar = new AtomicReference \u003c Person \u003e ();\n        Person person = new Person(\"SnailClimb\", 22);\n        ar.set(person);\n        Person updatePerson = new Person(\"Daisy\", 20);\n        ar.compareAndSet(person, updatePerson);\n\n        System.out.println(ar.get().getName());\n        System.out.println(ar.get().getAge());\n    }\n}\n\nclass Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        super();\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213716-7klx2qr","Type":"NodeParagraph","Properties":{"id":"20240201213716-7klx2qr","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"上述代码首先创建了一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Person"},{"Type":"NodeText","Data":" 对象，然后把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Person"},{"Type":"NodeText","Data":" 对象设置进 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReference"},{"Type":"NodeText","Data":" 对象中，然后调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compareAndSet"},{"Type":"NodeText","Data":" 方法，该方法就是通过 CAS 操作设置 ar。如果 ar 的值为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"person"},{"Type":"NodeText","Data":" 的话，则将其设置为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"updatePerson"},{"Type":"NodeText","Data":"。实现原理与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicInteger"},{"Type":"NodeText","Data":" 类中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compareAndSet"},{"Type":"NodeText","Data":" 方法相同。运行上面的代码后的输出结果如下："}]},{"ID":"20240201213717-n3dxf7x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213717-n3dxf7x","updated":"20240201213717"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Daisy\n20\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213718-1qk8zem","Type":"NodeParagraph","Properties":{"id":"20240201213718-1qk8zem","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicStampedReference"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类使用示例"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213719-pe6tmj6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213719-pe6tmj6","updated":"20240201213719"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.atomic.AtomicStampedReference;\n\npublic class AtomicStampedReferenceDemo {\n    public static void main(String[] args) {\n        // 实例化、取当前值和 stamp 值\n        final Integer initialRef = 0, initialStamp = 0;\n        final AtomicStampedReference\u003cInteger\u003e asr = new AtomicStampedReference\u003c\u003e(initialRef, initialStamp);\n        System.out.println(\"currentValue=\" + asr.getReference() + \", currentStamp=\" + asr.getStamp());\n\n        // compare and set\n        final Integer newReference = 666, newStamp = 999;\n        final boolean casResult = asr.compareAndSet(initialRef, newReference, initialStamp, newStamp);\n        System.out.println(\"currentValue=\" + asr.getReference()\n                + \", currentStamp=\" + asr.getStamp()\n                + \", casResult=\" + casResult);\n\n        // 获取当前的值和当前的 stamp 值\n        int[] arr = new int[1];\n        final Integer currentValue = asr.get(arr);\n        final int currentStamp = arr[0];\n        System.out.println(\"currentValue=\" + currentValue + \", currentStamp=\" + currentStamp);\n\n        // 单独设置 stamp 值\n        final boolean attemptStampResult = asr.attemptStamp(newReference, 88);\n        System.out.println(\"currentValue=\" + asr.getReference()\n                + \", currentStamp=\" + asr.getStamp()\n                + \", attemptStampResult=\" + attemptStampResult);\n\n        // 重新设置当前值和 stamp 值\n        asr.set(initialRef, initialStamp);\n        System.out.println(\"currentValue=\" + asr.getReference() + \", currentStamp=\" + asr.getStamp());\n\n        // [不推荐使用，除非搞清楚注释的意思了] weak compare and set\n        // 困惑！weakCompareAndSet 这个方法最终还是调用 compareAndSet 方法。[版本: jdk-8u191]\n        // 但是注释上写着 \"May fail spuriously and does not provide ordering guarantees,\n        // so is only rarely an appropriate alternative to compareAndSet.\"\n        // todo 感觉有可能是 jvm 通过方法名在 native 方法里面做了转发\n        final boolean wCasResult = asr.weakCompareAndSet(initialRef, newReference, initialStamp, newStamp);\n        System.out.println(\"currentValue=\" + asr.getReference()\n                + \", currentStamp=\" + asr.getStamp()\n                + \", wCasResult=\" + wCasResult);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213720-8enuwif","Type":"NodeParagraph","Properties":{"id":"20240201213720-8enuwif","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"输出结果如下："}]},{"ID":"20240201213721-qvi7el5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213721-qvi7el5","updated":"20240201213721"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"currentValue=0, currentStamp=0\ncurrentValue=666, currentStamp=999, casResult=true\ncurrentValue=666, currentStamp=999\ncurrentValue=666, currentStamp=88, attemptStampResult=true\ncurrentValue=0, currentStamp=0\ncurrentValue=666, currentStamp=999, wCasResult=true\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213722-tbml2b5","Type":"NodeParagraph","Properties":{"id":"20240201213722-tbml2b5","updated":"20240201213722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicMarkableReference"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类使用示例"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213723-ksectl9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213723-ksectl9","updated":"20240201213723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.atomic.AtomicMarkableReference;\n\npublic class AtomicMarkableReferenceDemo {\n    public static void main(String[] args) {\n        // 实例化、取当前值和 mark 值\n        final Boolean initialRef = null, initialMark = false;\n        final AtomicMarkableReference\u003cBoolean\u003e amr = new AtomicMarkableReference\u003c\u003e(initialRef, initialMark);\n        System.out.println(\"currentValue=\" + amr.getReference() + \", currentMark=\" + amr.isMarked());\n\n        // compare and set\n        final Boolean newReference1 = true, newMark1 = true;\n        final boolean casResult = amr.compareAndSet(initialRef, newReference1, initialMark, newMark1);\n        System.out.println(\"currentValue=\" + amr.getReference()\n                + \", currentMark=\" + amr.isMarked()\n                + \", casResult=\" + casResult);\n\n        // 获取当前的值和当前的 mark 值\n        boolean[] arr = new boolean[1];\n        final Boolean currentValue = amr.get(arr);\n        final boolean currentMark = arr[0];\n        System.out.println(\"currentValue=\" + currentValue + \", currentMark=\" + currentMark);\n\n        // 单独设置 mark 值\n        final boolean attemptMarkResult = amr.attemptMark(newReference1, false);\n        System.out.println(\"currentValue=\" + amr.getReference()\n                + \", currentMark=\" + amr.isMarked()\n                + \", attemptMarkResult=\" + attemptMarkResult);\n\n        // 重新设置当前值和 mark 值\n        amr.set(initialRef, initialMark);\n        System.out.println(\"currentValue=\" + amr.getReference() + \", currentMark=\" + amr.isMarked());\n\n        // [不推荐使用，除非搞清楚注释的意思了] weak compare and set\n        // 困惑！weakCompareAndSet 这个方法最终还是调用 compareAndSet 方法。[版本: jdk-8u191]\n        // 但是注释上写着 \"May fail spuriously and does not provide ordering guarantees,\n        // so is only rarely an appropriate alternative to compareAndSet.\"\n        // todo 感觉有可能是 jvm 通过方法名在 native 方法里面做了转发\n        final boolean wCasResult = amr.weakCompareAndSet(initialRef, newReference1, initialMark, newMark1);\n        System.out.println(\"currentValue=\" + amr.getReference()\n                + \", currentMark=\" + amr.isMarked()\n                + \", wCasResult=\" + wCasResult);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213724-znf6v1j","Type":"NodeParagraph","Properties":{"id":"20240201213724-znf6v1j","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"输出结果如下："}]},{"ID":"20240201213725-x0sxc21","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213725-x0sxc21","updated":"20240201213725"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"currentValue=null, currentMark=false\ncurrentValue=true, currentMark=true, casResult=true\ncurrentValue=true, currentMark=true\ncurrentValue=true, currentMark=false, attemptMarkResult=true\ncurrentValue=null, currentMark=false\ncurrentValue=true, currentMark=true, wCasResult=true\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213726-v0tiu9j","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213726-v0tiu9j","updated":"20240201213726"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"对象的属性修改类型原子类"}]},{"ID":"20240201213727-bf0nw05","Type":"NodeParagraph","Properties":{"id":"20240201213727-bf0nw05","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"如果需要原子更新某个类里的某个字段时，需要用到对象的属性修改类型原子类。"}]},{"ID":"20240201213728-ebja0ad","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213728-ebja0ad","updated":"20240201213728"},"Children":[{"ID":"20240201213729-vzfk0jv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213729-vzfk0jv","updated":"20240201213729"},"Children":[{"ID":"20240201213730-0p50024","Type":"NodeParagraph","Properties":{"id":"20240201213730-0p50024","updated":"20240201213730"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicIntegerFieldUpdater"},{"Type":"NodeText","Data":":原子更新整形字段的更新器"}]}]},{"ID":"20240201213731-uoypusu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213731-uoypusu","updated":"20240201213731"},"Children":[{"ID":"20240201213732-8gvm41c","Type":"NodeParagraph","Properties":{"id":"20240201213732-8gvm41c","updated":"20240201213732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicLongFieldUpdater"},{"Type":"NodeText","Data":"：原子更新长整形字段的更新器"}]}]},{"ID":"20240201213733-y1fgigg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-y1fgigg","updated":"20240201213733"},"Children":[{"ID":"20240201213734-oj64k6i","Type":"NodeParagraph","Properties":{"id":"20240201213734-oj64k6i","updated":"20240201213734"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicReferenceFieldUpdater"},{"Type":"NodeText","Data":"：原子更新引用类型里的字段的更新器"}]}]}]},{"ID":"20240201213735-5hzpwek","Type":"NodeParagraph","Properties":{"id":"20240201213735-5hzpwek","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"要想原子地更新对象的属性需要两步。第一步，因为对象的属性修改类型原子类都是抽象类，所以每次使用都必须使用静态方法 newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。第二步，更新的对象属性必须使用 public volatile 修饰符。"}]},{"ID":"20240201213736-zeuruou","Type":"NodeParagraph","Properties":{"id":"20240201213736-zeuruou","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"上面三个类提供的方法几乎相同，所以我们这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"AtomicIntegerFieldUpdater"},{"Type":"NodeText","Data":"为例子来介绍。"}]},{"ID":"20240201213737-exeyq6b","Type":"NodeParagraph","Properties":{"id":"20240201213737-exeyq6b","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"AtomicIntegerFieldUpdater"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 类使用示例"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213738-0otptkb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213738-0otptkb","updated":"20240201213738"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n\npublic class AtomicIntegerFieldUpdaterTest {\n  public static void main(String[] args) {\n    AtomicIntegerFieldUpdater\u003cUser\u003e a = AtomicIntegerFieldUpdater.newUpdater(User.class, \"age\");\n\n    User user = new User(\"Java\", 22);\n    System.out.println(a.getAndIncrement(user));// 22\n    System.out.println(a.get(user));// 23\n  }\n}\n\nclass User {\n  private String name;\n  public volatile int age;\n\n  public User(String name, int age) {\n    super();\n    this.name = name;\n    this.age = age;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getAge() {\n    return age;\n  }\n\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213739-znzxhj3","Type":"NodeParagraph","Properties":{"id":"20240201213739-znzxhj3","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20240201213740-mdwdgtl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cGxhaW4=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213740-mdwdgtl","updated":"20240201213740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cGxhaW4=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"22\n23\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213741-o6fshhc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213741-o6fshhc","updated":"20240201213741"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213742-by7dlvt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-by7dlvt","updated":"20240201213742"},"Children":[{"ID":"20240201213743-w0oppen","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-w0oppen","updated":"20240201213743"},"Children":[{"ID":"20240201213744-ql4zyr7","Type":"NodeParagraph","Properties":{"id":"20240201213744-ql4zyr7","updated":"20240201213744"},"Children":[{"Type":"NodeText","Data":"《Java 并发编程的艺术》"}]}]}]},{"ID":"20240201213745-tpb23et","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213745-tpb23et","updated":"20240201213745"}}]}