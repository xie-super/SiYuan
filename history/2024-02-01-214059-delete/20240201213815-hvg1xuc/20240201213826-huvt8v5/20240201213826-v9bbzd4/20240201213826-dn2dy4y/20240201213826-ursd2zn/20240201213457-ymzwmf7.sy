{"ID":"20240201213457-ymzwmf7","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213457-ymzwmf7","title":"jmm","updated":"20240201213457"},"Children":[{"ID":"20240201213458-g5w4p4w","Type":"NodeThematicBreak","Properties":{"id":"20240201213458-g5w4p4w","updated":"20240201213458"}},{"ID":"20240201213459-lim0l6n","Type":"NodeParagraph","Properties":{"id":"20240201213459-lim0l6n","updated":"20240201213459"},"Children":[{"Type":"NodeText","Data":"title: JMM（Java 内存模型）详解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213460-0ochkad","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213460-0ochkad","updated":"20240201213460"},"Children":[{"ID":"20240201213461-9mc3btu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213461-9mc3btu","updated":"20240201213461"},"Children":[{"ID":"20240201213462-fwksbo6","Type":"NodeParagraph","Properties":{"id":"20240201213462-fwksbo6","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"Java并发"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"head:"}]}]},{"ID":"20240201213463-9hz8a1k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213463-9hz8a1k","updated":"20240201213463"},"Children":[{"ID":"20240201213464-7su8yvr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213464-7su8yvr","updated":"20240201213464"},"Children":[{"ID":"20240201213465-qakm02w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213465-qakm02w","updated":"20240201213465"},"Children":[{"ID":"20240201213466-jd77h48","Type":"NodeParagraph","Properties":{"id":"20240201213466-jd77h48","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213467-fjqz2kk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213467-fjqz2kk","updated":"20240201213467"},"Children":[{"ID":"20240201213468-wz0si9u","Type":"NodeParagraph","Properties":{"id":"20240201213468-wz0si9u","updated":"20240201213468"},"Children":[{"Type":"NodeText","Data":"name: keywords"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: CPU 缓存模型,指令重排序,Java 内存模型（JMM）,happens-before"}]}]}]}]},{"ID":"20240201213469-b60ehgx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-b60ehgx","updated":"20240201213469"},"Children":[{"ID":"20240201213470-fd23sv2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213470-fd23sv2","updated":"20240201213470"},"Children":[{"ID":"20240201213471-obrx90h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-obrx90h","updated":"20240201213471"},"Children":[{"ID":"20240201213472-64gued4","Type":"NodeParagraph","Properties":{"id":"20240201213472-64gued4","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"meta"}]}]},{"ID":"20240201213473-oxyrg0f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213473-oxyrg0f","updated":"20240201213473"},"Children":[{"ID":"20240201213474-ir6mt2d","Type":"NodeParagraph","Properties":{"id":"20240201213474-ir6mt2d","updated":"20240201213474"},"Children":[{"Type":"NodeText","Data":"name: description"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"content: 对于 Java 来说，你可以把 JMM 看作是 Java 定义的并发编程相关的一组规范，除了抽象了线程和主内存之间的关系之外，其还规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。"}]}]}]}]}]},{"ID":"20240201213475-128fhys","Type":"NodeThematicBreak","Properties":{"id":"20240201213475-128fhys","updated":"20240201213475"}},{"ID":"20240201213476-ylq15tc","Type":"NodeParagraph","Properties":{"id":"20240201213476-ylq15tc","updated":"20240201213476"},"Children":[{"Type":"NodeText","Data":"JMM(Java 内存模型)主要定义了对于一个共享变量，当另一个线程对这个共享变量执行写操作后，这个线程对这个共享变量的可见性。"}]},{"ID":"20240201213477-83td0eh","Type":"NodeParagraph","Properties":{"id":"20240201213477-83td0eh","updated":"20240201213477"},"Children":[{"Type":"NodeText","Data":"要想理解透彻 JMM（Java 内存模型），我们先要从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU 缓存模型和指令重排序"},{"Type":"NodeText","Data":" 说起！"}]},{"ID":"20240201213478-wz37lg9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213478-wz37lg9","updated":"20240201213478"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"从 CPU 缓存模型说起"}]},{"ID":"20240201213479-l1tu8my","Type":"NodeParagraph","Properties":{"id":"20240201213479-l1tu8my","updated":"20240201213479"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么要弄一个 CPU 高速缓存呢？"},{"Type":"NodeText","Data":" 类比我们开发网站后台系统使用的缓存（比如 Redis）是为了解决程序处理速度和访问常规关系型数据库速度不对等的问题。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU 缓存则是为了解决 CPU 处理速度和内存处理速度不对等的问题。"}]},{"ID":"20240201213480-7iq3xxr","Type":"NodeParagraph","Properties":{"id":"20240201213480-7iq3xxr","updated":"20240201213480"},"Children":[{"Type":"NodeText","Data":"我们甚至可以把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存看作外存的高速缓存"},{"Type":"NodeText","Data":"，程序运行的时候我们把外存的数据复制到内存，由于内存的处理速度远远高于外存，这样提高了处理速度。"}]},{"ID":"20240201213481-p2r2a15","Type":"NodeParagraph","Properties":{"id":"20240201213481-p2r2a15","updated":"20240201213481"},"Children":[{"Type":"NodeText","Data":"总结："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。"}]},{"ID":"20240201213482-xp230ux","Type":"NodeParagraph","Properties":{"id":"20240201213482-xp230ux","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"为了更好地理解，我画了一个简单的 CPU Cache 示意图如下所示。"}]},{"ID":"20240201213483-34748op","Type":"NodeBlockquote","Properties":{"id":"20240201213483-34748op","updated":"20240201213483"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213484-wh0flf0","Type":"NodeParagraph","Properties":{"id":"20240201213484-wh0flf0","updated":"20240201213484"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"🐛 修正（参见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1848","TextMarkTextContent":"issue#1848"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"：对 CPU 缓存模型绘图不严谨的地方进行完善。"}]}]},{"ID":"20240201213485-rjhx8pz","Type":"NodeParagraph","Properties":{"id":"20240201213485-rjhx8pz","updated":"20240201213485"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"CPU 缓存模型示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/cpu-cache.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213486-d8e1kfb","Type":"NodeParagraph","Properties":{"id":"20240201213486-d8e1kfb","updated":"20240201213486"},"Children":[{"Type":"NodeText","Data":"现代的 CPU Cache 通常分为三层，分别叫 L1,L2,L3 Cache。有些 CPU 可能还有 L4 Cache，这里不做讨论，并不常见"}]},{"ID":"20240201213487-vmh02bo","Type":"NodeParagraph","Properties":{"id":"20240201213487-vmh02bo","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU Cache 的工作方式："},{"Type":"NodeText","Data":" 先复制一份数据到 CPU Cache 中，当 CPU 需要用到的时候就可以直接从 CPU Cache 中读取数据，当运算完成后，再将运算得到的数据写回 Main Memory 中。但是，这样存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存缓存不一致性的问题"},{"Type":"NodeText","Data":" ！比如我执行一个 i++ 操作的话，如果两个线程同时执行的话，假设两个线程从 CPU Cache 中读取的 i=1，两个线程做了 i++ 运算完之后再写回 Main Memory 之后 i=2，而正确结果应该是 i=3。"}]},{"ID":"20240201213488-m1ywjh9","Type":"NodeParagraph","Properties":{"id":"20240201213488-m1ywjh9","updated":"20240201213488"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU 为了解决内存缓存不一致性问题可以通过制定缓存一致协议（比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://zh.wikipedia.org/wiki/MESI%E5%8D%8F%E8%AE%AE","TextMarkTextContent":"MESI 协议"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）或者其他手段来解决。"},{"Type":"NodeText","Data":" 这个缓存一致性协议指的是在 CPU 高速缓存与主内存交互的时候需要遵守的原则和规范。不同的 CPU 中，使用的缓存一致性协议通常也会有所不同。"}]},{"ID":"20240201213489-na2nfdj","Type":"NodeParagraph","Properties":{"id":"20240201213489-na2nfdj","updated":"20240201213489"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"缓存一致性协议","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/cpu-cache-protocol.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213490-1547pg7","Type":"NodeParagraph","Properties":{"id":"20240201213490-1547pg7","updated":"20240201213490"},"Children":[{"Type":"NodeText","Data":"我们的程序运行在操作系统之上，操作系统屏蔽了底层硬件的操作细节，将各种硬件资源虚拟化。于是，操作系统也就同样需要解决内存缓存不一致性问题。"}]},{"ID":"20240201213491-5hly7bw","Type":"NodeParagraph","Properties":{"id":"20240201213491-5hly7bw","updated":"20240201213491"},"Children":[{"Type":"NodeText","Data":"操作系统通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存模型（Memory Model）"},{"Type":"NodeText","Data":" 定义一系列规范来解决这个问题。无论是 Windows 系统，还是 Linux 系统，它们都有特定的内存模型。"}]},{"ID":"20240201213492-cizm47l","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213492-cizm47l","updated":"20240201213492"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"指令重排序"}]},{"ID":"20240201213493-vbj6bu2","Type":"NodeParagraph","Properties":{"id":"20240201213493-vbj6bu2","updated":"20240201213493"},"Children":[{"Type":"NodeText","Data":"说完了 CPU 缓存模型，我们再来看看另外一个比较重要的概念 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指令重排序"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213494-78p4r1e","Type":"NodeParagraph","Properties":{"id":"20240201213494-78p4r1e","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"为了提升执行速度/性能，计算机在执行程序代码的时候，会对指令进行重排序。"}]},{"ID":"20240201213495-5kb8lcc","Type":"NodeParagraph","Properties":{"id":"20240201213495-5kb8lcc","updated":"20240201213495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是指令重排序？"},{"Type":"NodeText","Data":" 简单来说就是系统在执行代码的时候并不一定是按照你写的代码的顺序依次执行。"}]},{"ID":"20240201213496-ter13ks","Type":"NodeParagraph","Properties":{"id":"20240201213496-ter13ks","updated":"20240201213496"},"Children":[{"Type":"NodeText","Data":"常见的指令重排序有下面 2 种情况："}]},{"ID":"20240201213497-c8uspox","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213497-c8uspox","updated":"20240201213497"},"Children":[{"ID":"20240201213498-z8gz13t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213498-z8gz13t","updated":"20240201213498"},"Children":[{"ID":"20240201213499-as3nyck","Type":"NodeParagraph","Properties":{"id":"20240201213499-as3nyck","updated":"20240201213499"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编译器优化重排"},{"Type":"NodeText","Data":"：编译器（包括 JVM、JIT 编译器等）在不改变单线程程序语义的前提下，重新安排语句的执行顺序。"}]}]},{"ID":"20240201213500-y6fxhdk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213500-y6fxhdk","updated":"20240201213500"},"Children":[{"ID":"20240201213501-81s8u1a","Type":"NodeParagraph","Properties":{"id":"20240201213501-81s8u1a","updated":"20240201213501"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指令并行重排"},{"Type":"NodeText","Data":"：现代处理器采用了指令级并行技术(Instruction-Level Parallelism，ILP)来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。"}]}]}]},{"ID":"20240201213502-jw87rk6","Type":"NodeParagraph","Properties":{"id":"20240201213502-jw87rk6","updated":"20240201213502"},"Children":[{"Type":"NodeText","Data":"另外，内存系统也会有“重排序”，但又不是真正意义上的重排序。在 JMM 里表现为主存和本地内存的内容可能不一致，进而导致程序在多线程下执行可能出现问题。"}]},{"ID":"20240201213503-f6150bm","Type":"NodeParagraph","Properties":{"id":"20240201213503-f6150bm","updated":"20240201213503"},"Children":[{"Type":"NodeText","Data":"Java 源代码会经历 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编译器优化重排 —\u0026gt; 指令并行重排 —\u0026gt; 内存系统重排"},{"Type":"NodeText","Data":" 的过程，最终才变成操作系统可执行的指令序列。"}]},{"ID":"20240201213504-cieaak5","Type":"NodeParagraph","Properties":{"id":"20240201213504-cieaak5","updated":"20240201213504"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致"},{"Type":"NodeText","Data":" ，所以在多线程下，指令重排序可能会导致一些问题。"}]},{"ID":"20240201213505-zeuou8x","Type":"NodeParagraph","Properties":{"id":"20240201213505-zeuou8x","updated":"20240201213505"},"Children":[{"Type":"NodeText","Data":"编译器和处理器的指令重排序的处理方式不一样。对于编译器，通过禁止特定类型的编译器重排序的方式来禁止重排序。对于处理器，通过插入内存屏障（Memory Barrier，或有时叫做内存栅栏，Memory Fence）的方式来禁止特定类型的处理器重排序。指令并行重排和内存系统重排都属于是处理器级别的指令重排序。"}]},{"ID":"20240201213506-45o19ev","Type":"NodeBlockquote","Properties":{"id":"20240201213506-45o19ev","updated":"20240201213506"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213507-fctz2a4","Type":"NodeParagraph","Properties":{"id":"20240201213507-fctz2a4","updated":"20240201213507"},"Children":[{"Type":"NodeText","Data":"内存屏障（Memory Barrier，或有时叫做内存栅栏，Memory Fence）是一种 CPU 指令，用来禁止处理器指令发生重排序（像屏障一样），从而保障指令执行的有序性。另外，为了达到屏障的效果，它也会使处理器写入、读取值之前，将主内存的值写入高速缓存，清空无效队列，从而保障变量的可见性。"}]}]},{"ID":"20240201213508-z0szcwz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213508-z0szcwz","updated":"20240201213508"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"JMM(Java Memory Model)"}]},{"ID":"20240201213509-dxl16da","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213509-dxl16da","updated":"20240201213509"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 JMM？为什么需要 JMM？"}]},{"ID":"20240201213510-ior91lu","Type":"NodeParagraph","Properties":{"id":"20240201213510-ior91lu","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"Java 是最早尝试提供内存模型的编程语言。由于早期内存模型存在一些缺陷（比如非常容易削弱编译器的优化能力），从 Java5 开始，Java 开始使用新的内存模型 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.cs.umd.edu/~pugh/java/memoryModel/CommunityReview.pdf","TextMarkTextContent":"《JSR-133：Java Memory Model and Thread Specification》"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213511-ej9qx7p","Type":"NodeParagraph","Properties":{"id":"20240201213511-ej9qx7p","updated":"20240201213511"},"Children":[{"Type":"NodeText","Data":"一般来说，编程语言也可以直接复用操作系统层面的内存模型。不过，不同的操作系统内存模型不同。如果直接复用操作系统层面的内存模型，就可能会导致同样一套代码换了一个操作系统就无法执行了。Java 语言是跨平台的，它需要自己提供一套内存模型以屏蔽系统差异。"}]},{"ID":"20240201213512-4ds47mr","Type":"NodeParagraph","Properties":{"id":"20240201213512-4ds47mr","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"这只是 JMM 存在的其中一个原因。实际上，对于 Java 来说，你可以把 JMM 看作是 Java 定义的并发编程相关的一组规范，除了抽象了线程和主内存之间的关系之外，其还规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。"}]},{"ID":"20240201213513-iyq9xaq","Type":"NodeParagraph","Properties":{"id":"20240201213513-iyq9xaq","updated":"20240201213513"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么要遵守这些并发相关的原则和规范呢？"},{"Type":"NodeText","Data":" 这是因为并发编程下，像 CPU 多级缓存和指令重排这类设计可能会导致程序运行出现一些问题。就比如说我们上面提到的指令重排序就可能会让多线程程序的执行出现问题，为此，JMM 抽象了 happens-before 原则（后文会详细介绍到）来解决这个指令重排序问题。"}]},{"ID":"20240201213514-emnweir","Type":"NodeParagraph","Properties":{"id":"20240201213514-emnweir","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"JMM 说白了就是定义了一些规范来解决这些问题，开发者可以利用这些规范更方便地开发多线程程序。对于 Java 开发者说，你不需要了解底层原理，直接使用并发相关的一些关键字和类（比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":"、各种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Lock"},{"Type":"NodeText","Data":"）即可开发出并发安全的程序。"}]},{"ID":"20240201213515-8z83cej","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213515-8z83cej","updated":"20240201213515"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JMM 是如何抽象线程和主内存之间的关系？"}]},{"ID":"20240201213516-r1d6t8k","Type":"NodeParagraph","Properties":{"id":"20240201213516-r1d6t8k","updated":"20240201213516"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Java 内存模型（JMM）"},{"Type":"NodeText","Data":" 抽象了线程和主内存之间的关系，就比如说线程之间的共享变量必须存储在主内存中。"}]},{"ID":"20240201213517-9udb2wq","Type":"NodeParagraph","Properties":{"id":"20240201213517-9udb2wq","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"在 JDK1.2 之前，Java 的内存模型实现总是从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主存"},{"Type":"NodeText","Data":" （即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本地内存"},{"Type":"NodeText","Data":" （比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。"}]},{"ID":"20240201213518-ggrq1x6","Type":"NodeParagraph","Properties":{"id":"20240201213518-ggrq1x6","updated":"20240201213518"},"Children":[{"Type":"NodeText","Data":"这和我们上面讲到的 CPU 缓存模型非常相似。"}]},{"ID":"20240201213519-e8e3gzn","Type":"NodeParagraph","Properties":{"id":"20240201213519-e8e3gzn","updated":"20240201213519"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是主内存？什么是本地内存？"}]},{"ID":"20240201213520-5roz0qm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213520-5roz0qm","updated":"20240201213520"},"Children":[{"ID":"20240201213521-9ztt5xs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213521-9ztt5xs","updated":"20240201213521"},"Children":[{"ID":"20240201213522-vdn3duo","Type":"NodeParagraph","Properties":{"id":"20240201213522-vdn3duo","updated":"20240201213522"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主内存"},{"Type":"NodeText","Data":"：所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量，还是局部变量，类信息、常量、静态变量都是放在主内存中。为了获取更好的运行速度，虚拟机及硬件系统可能会让工作内存优先存储于寄存器和高速缓存中。"}]}]},{"ID":"20240201213523-u28fc8f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213523-u28fc8f","updated":"20240201213523"},"Children":[{"ID":"20240201213524-ajz7kzp","Type":"NodeParagraph","Properties":{"id":"20240201213524-ajz7kzp","updated":"20240201213524"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本地内存"},{"Type":"NodeText","Data":"：每个线程都有一个私有的本地内存，本地内存存储了该线程以读 / 写共享变量的副本。每个线程只能操作自己本地内存中的变量，无法直接访问其他线程的本地内存。如果线程间需要通信，必须通过主内存来进行。本地内存是 JMM 抽象出来的一个概念，并不真实存在，它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。"}]}]}]},{"ID":"20240201213525-kbxdbe6","Type":"NodeParagraph","Properties":{"id":"20240201213525-kbxdbe6","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"Java 内存模型的抽象示意图如下："}]},{"ID":"20240201213526-depfoib","Type":"NodeParagraph","Properties":{"id":"20240201213526-depfoib","updated":"20240201213526"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"JMM(Java 内存模型)","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/jmm.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213527-dhxo0vt","Type":"NodeParagraph","Properties":{"id":"20240201213527-dhxo0vt","updated":"20240201213527"},"Children":[{"Type":"NodeText","Data":"从上图来看，线程 1 与线程 2 之间如果要进行通信的话，必须要经历下面 2 个步骤："}]},{"ID":"20240201213528-luppn1o","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213528-luppn1o","updated":"20240201213528"},"Children":[{"ID":"20240201213529-g4b4ncx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213529-g4b4ncx","updated":"20240201213529"},"Children":[{"ID":"20240201213530-jguiksw","Type":"NodeParagraph","Properties":{"id":"20240201213530-jguiksw","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"线程 1 把本地内存中修改过的共享变量副本的值同步到主内存中去。"}]}]},{"ID":"20240201213531-avcqqdu","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213531-avcqqdu","updated":"20240201213531"},"Children":[{"ID":"20240201213532-yc104xc","Type":"NodeParagraph","Properties":{"id":"20240201213532-yc104xc","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"线程 2 到主存中读取对应的共享变量的值。"}]}]}]},{"ID":"20240201213533-jeo23bn","Type":"NodeParagraph","Properties":{"id":"20240201213533-jeo23bn","updated":"20240201213533"},"Children":[{"Type":"NodeText","Data":"也就是说，JMM 为共享变量提供了可见性的保障。"}]},{"ID":"20240201213534-y0u3oaw","Type":"NodeParagraph","Properties":{"id":"20240201213534-y0u3oaw","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"不过，多线程下，对主内存中的一个共享变量进行操作有可能诱发线程安全问题。举个例子："}]},{"ID":"20240201213535-c0eaeyh","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213535-c0eaeyh","updated":"20240201213535"},"Children":[{"ID":"20240201213536-sj19b5s","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213536-sj19b5s","updated":"20240201213536"},"Children":[{"ID":"20240201213537-7v46y9z","Type":"NodeParagraph","Properties":{"id":"20240201213537-7v46y9z","updated":"20240201213537"},"Children":[{"Type":"NodeText","Data":"线程 1 和线程 2 分别对同一个共享变量进行操作，一个执行修改，一个执行读取。"}]}]},{"ID":"20240201213538-ci48vju","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213538-ci48vju","updated":"20240201213538"},"Children":[{"ID":"20240201213539-hnkcghh","Type":"NodeParagraph","Properties":{"id":"20240201213539-hnkcghh","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"线程 2 读取到的是线程 1 修改之前的值还是修改后的值并不确定，都有可能，因为线程 1 和线程 2 都是先将共享变量从主内存拷贝到对应线程的工作内存中。"}]}]}]},{"ID":"20240201213540-6jx357e","Type":"NodeParagraph","Properties":{"id":"20240201213540-6jx357e","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"关于主内存与工作内存直接的具体交互协议，即一个变量如何从主内存拷贝到工作内存，如何从工作内存同步到主内存之间的实现细节，Java 内存模型定义来以下八种同步操作（了解即可，无需死记硬背）："}]},{"ID":"20240201213541-lsjr6q1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-lsjr6q1","updated":"20240201213541"},"Children":[{"ID":"20240201213542-jlbcgkj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213542-jlbcgkj","updated":"20240201213542"},"Children":[{"ID":"20240201213543-vlgu1py","Type":"NodeParagraph","Properties":{"id":"20240201213543-vlgu1py","updated":"20240201213543"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"锁定（lock）"},{"Type":"NodeText","Data":": 作用于主内存中的变量，将他标记为一个线程独享变量。"}]}]},{"ID":"20240201213544-ph7a8f8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213544-ph7a8f8","updated":"20240201213544"},"Children":[{"ID":"20240201213545-rgjwb54","Type":"NodeParagraph","Properties":{"id":"20240201213545-rgjwb54","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解锁（unlock）"},{"Type":"NodeText","Data":": 作用于主内存中的变量，解除变量的锁定状态，被解除锁定状态的变量才能被其他线程锁定。"}]}]},{"ID":"20240201213546-7ilcg0i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-7ilcg0i","updated":"20240201213546"},"Children":[{"ID":"20240201213547-in20wbb","Type":"NodeParagraph","Properties":{"id":"20240201213547-in20wbb","updated":"20240201213547"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"read（读取）"},{"Type":"NodeText","Data":"：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。"}]}]},{"ID":"20240201213548-wrnl7zd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213548-wrnl7zd","updated":"20240201213548"},"Children":[{"ID":"20240201213549-t7soe12","Type":"NodeParagraph","Properties":{"id":"20240201213549-t7soe12","updated":"20240201213549"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"load(载入)"},{"Type":"NodeText","Data":"：把 read 操作从主内存中得到的变量值放入工作内存的变量的副本中。"}]}]},{"ID":"20240201213550-jhaink8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213550-jhaink8","updated":"20240201213550"},"Children":[{"ID":"20240201213551-psg5p28","Type":"NodeParagraph","Properties":{"id":"20240201213551-psg5p28","updated":"20240201213551"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"use(使用)"},{"Type":"NodeText","Data":"：把工作内存中的一个变量的值传给执行引擎，每当虚拟机遇到一个使用到变量的指令时都会使用该指令。"}]}]},{"ID":"20240201213552-9bhhjj9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-9bhhjj9","updated":"20240201213552"},"Children":[{"ID":"20240201213553-ckarcoh","Type":"NodeParagraph","Properties":{"id":"20240201213553-ckarcoh","updated":"20240201213553"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"assign（赋值）"},{"Type":"NodeText","Data":"：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。"}]}]},{"ID":"20240201213554-5pgu3ho","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213554-5pgu3ho","updated":"20240201213554"},"Children":[{"ID":"20240201213555-hj2luax","Type":"NodeParagraph","Properties":{"id":"20240201213555-hj2luax","updated":"20240201213555"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"store（存储）"},{"Type":"NodeText","Data":"：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的 write 操作使用。"}]}]},{"ID":"20240201213556-fz1h5i9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-fz1h5i9","updated":"20240201213556"},"Children":[{"ID":"20240201213557-paac9b7","Type":"NodeParagraph","Properties":{"id":"20240201213557-paac9b7","updated":"20240201213557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"write（写入）"},{"Type":"NodeText","Data":"：作用于主内存的变量，它把 store 操作从工作内存中得到的变量的值放入主内存的变量中。"}]}]}]},{"ID":"20240201213558-vcutnwh","Type":"NodeParagraph","Properties":{"id":"20240201213558-vcutnwh","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"除了这 8 种同步操作之外，还规定了下面这些同步规则来保证这些同步操作的正确执行（了解即可，无需死记硬背）："}]},{"ID":"20240201213559-bc82v49","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213559-bc82v49","updated":"20240201213559"},"Children":[{"ID":"20240201213560-xwfzqla","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213560-xwfzqla","updated":"20240201213560"},"Children":[{"ID":"20240201213561-866bwlw","Type":"NodeParagraph","Properties":{"id":"20240201213561-866bwlw","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从线程的工作内存同步回主内存中。"}]}]},{"ID":"20240201213562-sow4vdr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-sow4vdr","updated":"20240201213562"},"Children":[{"ID":"20240201213563-raa6nyz","Type":"NodeParagraph","Properties":{"id":"20240201213563-raa6nyz","updated":"20240201213563"},"Children":[{"Type":"NodeText","Data":"一个新的变量只能在主内存中 “诞生”，不允许在工作内存中直接使用一个未被初始化（load 或 assign）的变量，换句话说就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。"}]}]},{"ID":"20240201213564-3e4xj1c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213564-3e4xj1c","updated":"20240201213564"},"Children":[{"ID":"20240201213565-nbh1o92","Type":"NodeParagraph","Properties":{"id":"20240201213565-nbh1o92","updated":"20240201213565"},"Children":[{"Type":"NodeText","Data":"一个变量在同一个时刻只允许一条线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。"}]}]},{"ID":"20240201213566-d2chp91","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-d2chp91","updated":"20240201213566"},"Children":[{"ID":"20240201213567-hocclxh","Type":"NodeParagraph","Properties":{"id":"20240201213567-hocclxh","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行 load 或 assign 操作初始化变量的值。"}]}]},{"ID":"20240201213568-xwccizd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-xwccizd","updated":"20240201213568"},"Children":[{"ID":"20240201213569-s90382r","Type":"NodeParagraph","Properties":{"id":"20240201213569-s90382r","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作，也不允许去 unlock 一个被其他线程锁定住的变量。"}]}]},{"ID":"20240201213570-8pa45fh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-8pa45fh","updated":"20240201213570"},"Children":[{"ID":"20240201213571-pxtlbu1","Type":"NodeParagraph","Properties":{"id":"20240201213571-pxtlbu1","updated":"20240201213571"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213572-6imh9vm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213572-6imh9vm","updated":"20240201213572"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Java 内存区域和 JMM 有何区别？"}]},{"ID":"20240201213573-ir4opbp","Type":"NodeParagraph","Properties":{"id":"20240201213573-ir4opbp","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"这是一个比较常见的问题，很多初学者非常容易搞混。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Java 内存区域和内存模型是完全不一样的两个东西"},{"Type":"NodeText","Data":"："}]},{"ID":"20240201213574-jr7c8ao","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213574-jr7c8ao","updated":"20240201213574"},"Children":[{"ID":"20240201213575-wlrwqi8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-wlrwqi8","updated":"20240201213575"},"Children":[{"ID":"20240201213576-g8aqnhu","Type":"NodeParagraph","Properties":{"id":"20240201213576-g8aqnhu","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"JVM 内存结构和 Java 虚拟机的运行时区域相关，定义了 JVM 在运行时如何分区存储程序数据，就比如说堆主要用于存放对象实例。"}]}]},{"ID":"20240201213577-nvkute2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213577-nvkute2","updated":"20240201213577"},"Children":[{"ID":"20240201213578-scyeij5","Type":"NodeParagraph","Properties":{"id":"20240201213578-scyeij5","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"Java 内存模型和 Java 的并发编程相关，抽象了线程和主内存之间的关系就比如说线程之间的共享变量必须存储在主内存中，规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。"}]}]}]},{"ID":"20240201213579-bw8gwsw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213579-bw8gwsw","updated":"20240201213579"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"happens-before 原则是什么？"}]},{"ID":"20240201213580-volbfo0","Type":"NodeParagraph","Properties":{"id":"20240201213580-volbfo0","updated":"20240201213580"},"Children":[{"Type":"NodeText","Data":"happens-before 这个概念最早诞生于 Leslie Lamport 于 1978 年发表的论文"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://lamport.azurewebsites.net/pubs/time-clocks.pdf","TextMarkTextContent":"《Time，Clocks and the Ordering of Events in a Distributed System》"},{"Type":"NodeText","Data":"。在这篇论文中，Leslie Lamport 提出了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://writings.sh/post/logical-clocks","TextMarkTextContent":"逻辑时钟"},{"Type":"NodeText","Data":"的概念，这也成了第一个逻辑时钟算法 。在分布式环境中，通过一系列规则来定义逻辑时钟的变化，从而能通过逻辑时钟来对分布式系统中的事件的先后顺序进行判断。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"逻辑时钟并不度量时间本身，仅区分事件发生的前后顺序，其本质就是定义了一种 happens-before 关系。"}]},{"ID":"20240201213581-ygt3lft","Type":"NodeParagraph","Properties":{"id":"20240201213581-ygt3lft","updated":"20240201213581"},"Children":[{"Type":"NodeText","Data":"上面提到的 happens-before 这个概念诞生的背景并不是重点，简单了解即可。"}]},{"ID":"20240201213582-dksx493","Type":"NodeParagraph","Properties":{"id":"20240201213582-dksx493","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"JSR 133 引入了 happens-before 这个概念来描述两个操作之间的内存可见性。"}]},{"ID":"20240201213583-m81lqx7","Type":"NodeParagraph","Properties":{"id":"20240201213583-m81lqx7","updated":"20240201213583"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么需要 happens-before 原则？"},{"Type":"NodeText","Data":" happens-before 原则的诞生是为了程序员和编译器、处理器之间的平衡。程序员追求的是易于理解和编程的强内存模型，遵守既定规则编码即可。编译器和处理器追求的是较少约束的弱内存模型，让它们尽己所能地去优化性能，让性能最大化。happens-before 原则的设计思想其实非常简单："}]},{"ID":"20240201213584-cyzqzvi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213584-cyzqzvi","updated":"20240201213584"},"Children":[{"ID":"20240201213585-ens60hh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213585-ens60hh","updated":"20240201213585"},"Children":[{"ID":"20240201213586-s1qi7zn","Type":"NodeParagraph","Properties":{"id":"20240201213586-s1qi7zn","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"为了对编译器和处理器的约束尽可能少，只要不改变程序的执行结果（单线程程序和正确执行的多线程程序），编译器和处理器怎么进行重排序优化都行。"}]}]},{"ID":"20240201213587-2uv4xx4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213587-2uv4xx4","updated":"20240201213587"},"Children":[{"ID":"20240201213588-r6tver4","Type":"NodeParagraph","Properties":{"id":"20240201213588-r6tver4","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"对于会改变程序执行结果的重排序，JMM 要求编译器和处理器必须禁止这种重排序。"}]}]}]},{"ID":"20240201213589-ifs8jqk","Type":"NodeParagraph","Properties":{"id":"20240201213589-ifs8jqk","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"下面这张是 《Java 并发编程的艺术》这本书中的一张 JMM 设计思想的示意图，非常清晰。"}]},{"ID":"20240201213590-won6hkx","Type":"NodeParagraph","Properties":{"id":"20240201213590-won6hkx","updated":"20240201213590"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/image-20220731155332375.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213591-dcx8voe","Type":"NodeParagraph","Properties":{"id":"20240201213591-dcx8voe","updated":"20240201213591"},"Children":[{"Type":"NodeText","Data":"了解了 happens-before 原则的设计思想，我们再来看看 JSR-133 对 happens-before 原则的定义："}]},{"ID":"20240201213592-xfvqgit","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213592-xfvqgit","updated":"20240201213592"},"Children":[{"ID":"20240201213593-0gwfo2q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213593-0gwfo2q","updated":"20240201213593"},"Children":[{"ID":"20240201213594-hpvm4g3","Type":"NodeParagraph","Properties":{"id":"20240201213594-hpvm4g3","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，并且第一个操作的执行顺序排在第二个操作之前。"}]}]},{"ID":"20240201213595-x544v1x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213595-x544v1x","updated":"20240201213595"},"Children":[{"ID":"20240201213596-1hmvp0m","Type":"NodeParagraph","Properties":{"id":"20240201213596-1hmvp0m","updated":"20240201213596"},"Children":[{"Type":"NodeText","Data":"两个操作之间存在 happens-before 关系，并不意味着 Java 平台的具体实现必须要按照 happens-before 关系指定的顺序来执行。如果重排序之后的执行结果，与按 happens-before 关系来执行的结果一致，那么 JMM 也允许这样的重排序。"}]}]}]},{"ID":"20240201213597-cc1kog7","Type":"NodeParagraph","Properties":{"id":"20240201213597-cc1kog7","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"我们看下面这段代码："}]},{"ID":"20240201213598-qtbgazd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213598-qtbgazd","updated":"20240201213598"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int userNum = getUserNum();   // 1\nint teacherNum = getTeacherNum();   // 2\nint totalNum = userNum + teacherNum;  // 3\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213599-w7dc8tf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213599-w7dc8tf","updated":"20240201213599"},"Children":[{"ID":"20240201213600-o5abt59","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213600-o5abt59","updated":"20240201213600"},"Children":[{"ID":"20240201213601-mrgdcrg","Type":"NodeParagraph","Properties":{"id":"20240201213601-mrgdcrg","updated":"20240201213601"},"Children":[{"Type":"NodeText","Data":"1 happens-before 2"}]}]},{"ID":"20240201213602-5ktbcfq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213602-5ktbcfq","updated":"20240201213602"},"Children":[{"ID":"20240201213603-mrow9hx","Type":"NodeParagraph","Properties":{"id":"20240201213603-mrow9hx","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"2 happens-before 3"}]}]},{"ID":"20240201213604-qca4kg9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213604-qca4kg9","updated":"20240201213604"},"Children":[{"ID":"20240201213605-vjj4ldf","Type":"NodeParagraph","Properties":{"id":"20240201213605-vjj4ldf","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"1 happens-before 3"}]}]}]},{"ID":"20240201213606-2hz2ytz","Type":"NodeParagraph","Properties":{"id":"20240201213606-2hz2ytz","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"虽然 1 happens-before 2，但对 1 和 2 进行重排序不会影响代码的执行结果，所以 JMM 是允许编译器和处理器执行这种重排序的。但 1 和 2 必须是在 3 执行之前，也就是说 1,2 happens-before 3 。"}]},{"ID":"20240201213607-rmjsaei","Type":"NodeParagraph","Properties":{"id":"20240201213607-rmjsaei","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"happens-before 原则表达的意义其实并不是一个操作发生在另外一个操作的前面，虽然这从程序员的角度上来说也并无大碍。更准确地来说，它更想表达的意义是前一个操作的结果对于后一个操作是可见的，无论这两个操作是否在同一个线程里。"}]},{"ID":"20240201213608-r8b66ob","Type":"NodeParagraph","Properties":{"id":"20240201213608-r8b66ob","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"举个例子：操作 1 happens-before 操作 2，即使操作 1 和操作 2 不在同一个线程内，JMM 也会保证操作 1 的结果对操作 2 是可见的。"}]},{"ID":"20240201213609-1zu5z0a","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213609-1zu5z0a","updated":"20240201213609"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"happens-before 常见规则有哪些？谈谈你的理解？"}]},{"ID":"20240201213610-43v0gub","Type":"NodeParagraph","Properties":{"id":"20240201213610-43v0gub","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"happens-before 的规则就 8 条，说多不多，重点了解下面列举的 5 条即可。全记是不可能的，很快就忘记了，意义不大，随时查阅即可。"}]},{"ID":"20240201213611-bfxnp54","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213611-bfxnp54","updated":"20240201213611"},"Children":[{"ID":"20240201213612-5b5t2et","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213612-5b5t2et","updated":"20240201213612"},"Children":[{"ID":"20240201213613-fc20aew","Type":"NodeParagraph","Properties":{"id":"20240201213613-fc20aew","updated":"20240201213613"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"程序顺序规则"},{"Type":"NodeText","Data":"：一个线程内，按照代码顺序，书写在前面的操作 happens-before 于书写在后面的操作；"}]}]},{"ID":"20240201213614-jgiy9at","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213614-jgiy9at","updated":"20240201213614"},"Children":[{"ID":"20240201213615-vo4i2np","Type":"NodeParagraph","Properties":{"id":"20240201213615-vo4i2np","updated":"20240201213615"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解锁规则"},{"Type":"NodeText","Data":"：解锁 happens-before 于加锁；"}]}]},{"ID":"20240201213616-o5dww3o","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213616-o5dww3o","updated":"20240201213616"},"Children":[{"ID":"20240201213617-tk8d50r","Type":"NodeParagraph","Properties":{"id":"20240201213617-tk8d50r","updated":"20240201213617"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"volatile 变量规则"},{"Type":"NodeText","Data":"：对一个 volatile 变量的写操作 happens-before 于后面对这个 volatile 变量的读操作。说白了就是对 volatile 变量的写操作的结果对于发生于其后的任何操作都是可见的。"}]}]},{"ID":"20240201213618-ds4zhwy","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213618-ds4zhwy","updated":"20240201213618"},"Children":[{"ID":"20240201213619-nugeydl","Type":"NodeParagraph","Properties":{"id":"20240201213619-nugeydl","updated":"20240201213619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"传递规则"},{"Type":"NodeText","Data":"：如果 A happens-before B，且 B happens-before C，那么 A happens-before C；"}]}]},{"ID":"20240201213620-dpmky4k","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213620-dpmky4k","updated":"20240201213620"},"Children":[{"ID":"20240201213621-dt6e7rt","Type":"NodeParagraph","Properties":{"id":"20240201213621-dt6e7rt","updated":"20240201213621"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"线程启动规则"},{"Type":"NodeText","Data":"：Thread 对象的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"start()"},{"Type":"NodeText","Data":"方法 happens-before 于此线程的每一个动作。"}]}]}]},{"ID":"20240201213622-6pl9dww","Type":"NodeParagraph","Properties":{"id":"20240201213622-6pl9dww","updated":"20240201213622"},"Children":[{"Type":"NodeText","Data":"如果两个操作不满足上述任意一个 happens-before 规则，那么这两个操作就没有顺序的保障，JVM 可以对这两个操作进行重排序。"}]},{"ID":"20240201213623-kegmy9j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213623-kegmy9j","updated":"20240201213623"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"happens-before 和 JMM 什么关系？"}]},{"ID":"20240201213624-pkhm6k5","Type":"NodeParagraph","Properties":{"id":"20240201213624-pkhm6k5","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"happens-before 与 JMM 的关系用《Java 并发编程的艺术》这本书中的一张图就可以非常好的解释清楚。"}]},{"ID":"20240201213625-3fsr771","Type":"NodeParagraph","Properties":{"id":"20240201213625-3fsr771","updated":"20240201213625"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"happens-before 与 JMM 的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/concurrent/image-20220731084604667.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213626-sxhc4te","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213626-sxhc4te","updated":"20240201213626"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"再看并发编程三个重要特性"}]},{"ID":"20240201213627-ffosz32","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213627-ffosz32","updated":"20240201213627"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"原子性"}]},{"ID":"20240201213628-8c4prgw","Type":"NodeParagraph","Properties":{"id":"20240201213628-8c4prgw","updated":"20240201213628"},"Children":[{"Type":"NodeText","Data":"一次操作或者多次操作，要么所有的操作全部都得到执行并且不会受到任何因素的干扰而中断，要么都不执行。"}]},{"ID":"20240201213629-yqugrm8","Type":"NodeParagraph","Properties":{"id":"20240201213629-yqugrm8","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"在 Java 中，可以借助"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":"、各种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Lock"},{"Type":"NodeText","Data":" 以及各种原子类实现原子性。"}]},{"ID":"20240201213630-kcpojkl","Type":"NodeParagraph","Properties":{"id":"20240201213630-kcpojkl","updated":"20240201213630"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":" 和各种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Lock"},{"Type":"NodeText","Data":" 可以保证任一时刻只有一个线程访问该代码块，因此可以保障原子性。各种原子类是利用 CAS (compare and swap) 操作（可能也会用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":"或者"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"final"},{"Type":"NodeText","Data":"关键字）来保证原子操作。"}]},{"ID":"20240201213631-bf9bu0z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213631-bf9bu0z","updated":"20240201213631"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"可见性"}]},{"ID":"20240201213632-9jxbyzf","Type":"NodeParagraph","Properties":{"id":"20240201213632-9jxbyzf","updated":"20240201213632"},"Children":[{"Type":"NodeText","Data":"当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。"}]},{"ID":"20240201213633-8shtd4h","Type":"NodeParagraph","Properties":{"id":"20240201213633-8shtd4h","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"在 Java 中，可以借助"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"synchronized"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":" 以及各种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Lock"},{"Type":"NodeText","Data":" 实现可见性。"}]},{"ID":"20240201213634-6bq5xou","Type":"NodeParagraph","Properties":{"id":"20240201213634-6bq5xou","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"如果我们将变量声明为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":" ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。"}]},{"ID":"20240201213635-e90kszj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213635-e90kszj","updated":"20240201213635"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有序性"}]},{"ID":"20240201213636-b66cwqe","Type":"NodeParagraph","Properties":{"id":"20240201213636-b66cwqe","updated":"20240201213636"},"Children":[{"Type":"NodeText","Data":"由于指令重排序问题，代码的执行顺序未必就是编写代码时候的顺序。"}]},{"ID":"20240201213637-7hprovv","Type":"NodeParagraph","Properties":{"id":"20240201213637-7hprovv","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"我们上面讲重排序的时候也提到过："}]},{"ID":"20240201213638-228kmsh","Type":"NodeBlockquote","Properties":{"id":"20240201213638-228kmsh","updated":"20240201213638"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213639-bdz1t8k","Type":"NodeParagraph","Properties":{"id":"20240201213639-bdz1t8k","updated":"20240201213639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致"},{"Type":"NodeText","Data":" ，所以在多线程下，指令重排序可能会导致一些问题。"}]}]},{"ID":"20240201213640-m9z70nb","Type":"NodeParagraph","Properties":{"id":"20240201213640-m9z70nb","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"在 Java 中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"volatile"},{"Type":"NodeText","Data":" 关键字可以禁止指令进行重排序优化。"}]},{"ID":"20240201213641-cl3yr2g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213641-cl3yr2g","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213642-f3occn2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-f3occn2","updated":"20240201213642"},"Children":[{"ID":"20240201213643-i06skwp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213643-i06skwp","updated":"20240201213643"},"Children":[{"ID":"20240201213644-v1zmzfi","Type":"NodeParagraph","Properties":{"id":"20240201213644-v1zmzfi","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"Java 是最早尝试提供内存模型的语言，其主要目的是为了简化多线程编程，增强程序可移植性的。"}]}]},{"ID":"20240201213645-ngd4la1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-ngd4la1","updated":"20240201213645"},"Children":[{"ID":"20240201213646-qv42a2l","Type":"NodeParagraph","Properties":{"id":"20240201213646-qv42a2l","updated":"20240201213646"},"Children":[{"Type":"NodeText","Data":"CPU 可以通过制定缓存一致协议（比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/MESI%E5%8D%8F%E8%AE%AE","TextMarkTextContent":"MESI 协议"},{"Type":"NodeText","Data":"）来解决内存缓存不一致性问题。"}]}]},{"ID":"20240201213647-wysimm7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213647-wysimm7","updated":"20240201213647"},"Children":[{"ID":"20240201213648-e0xwmz5","Type":"NodeParagraph","Properties":{"id":"20240201213648-e0xwmz5","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"为了提升执行速度/性能，计算机在执行程序代码的时候，会对指令进行重排序。 简单来说就是系统在执行代码的时候并不一定是按照你写的代码的顺序依次执行。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致"},{"Type":"NodeText","Data":" ，所以在多线程下，指令重排序可能会导致一些问题。"}]}]},{"ID":"20240201213649-6dg3xbs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213649-6dg3xbs","updated":"20240201213649"},"Children":[{"ID":"20240201213650-scrcuyo","Type":"NodeParagraph","Properties":{"id":"20240201213650-scrcuyo","updated":"20240201213650"},"Children":[{"Type":"NodeText","Data":"你可以把 JMM 看作是 Java 定义的并发编程相关的一组规范，除了抽象了线程和主内存之间的关系之外，其还规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。"}]}]},{"ID":"20240201213651-0zu147u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213651-0zu147u","updated":"20240201213651"},"Children":[{"ID":"20240201213652-2kgzjy4","Type":"NodeParagraph","Properties":{"id":"20240201213652-2kgzjy4","updated":"20240201213652"},"Children":[{"Type":"NodeText","Data":"JSR 133 引入了 happens-before 这个概念来描述两个操作之间的内存可见性。"}]}]}]},{"ID":"20240201213653-2odxhy7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213653-2odxhy7","updated":"20240201213653"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213654-e7f6pqc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-e7f6pqc","updated":"20240201213654"},"Children":[{"ID":"20240201213655-781m01o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-781m01o","updated":"20240201213655"},"Children":[{"ID":"20240201213656-jum5myn","Type":"NodeParagraph","Properties":{"id":"20240201213656-jum5myn","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"《Java 并发编程的艺术》第三章 Java 内存模型"}]}]},{"ID":"20240201213657-ung5osm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213657-ung5osm","updated":"20240201213657"},"Children":[{"ID":"20240201213658-mmhzq9t","Type":"NodeParagraph","Properties":{"id":"20240201213658-mmhzq9t","updated":"20240201213658"},"Children":[{"Type":"NodeText","Data":"《深入浅出 Java 多线程》："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://concurrent.redspider.group/RedSpider.html","TextMarkTextContent":"http://concurrent.redspider.group/RedSpider.html"}]}]},{"ID":"20240201213659-6wm5rch","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-6wm5rch","updated":"20240201213659"},"Children":[{"ID":"20240201213660-781gmhb","Type":"NodeParagraph","Properties":{"id":"20240201213660-781gmhb","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"Java 内存访问重排序的研究："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2014/09/23/java-memory-reordering.html","TextMarkTextContent":"https://tech.meituan.com/2014/09/23/java-memory-reordering.html"}]}]},{"ID":"20240201213661-jr0q8i8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213661-jr0q8i8","updated":"20240201213661"},"Children":[{"ID":"20240201213662-1gxadfi","Type":"NodeParagraph","Properties":{"id":"20240201213662-1gxadfi","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"嘿，同学，你要的 Java 内存模型 (JMM) 来了："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://xie.infoq.cn/article/739920a92d0d27e2053174ef2","TextMarkTextContent":"https://xie.infoq.cn/article/739920a92d0d27e2053174ef2"}]}]},{"ID":"20240201213663-q1v9rdq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213663-q1v9rdq","updated":"20240201213663"},"Children":[{"ID":"20240201213664-t0rbg5j","Type":"NodeParagraph","Properties":{"id":"20240201213664-t0rbg5j","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"JSR 133 (Java Memory Model) FAQ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html","TextMarkTextContent":"https://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html"}]}]}]},{"ID":"20240201213665-whq20bg","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213665-whq20bg","updated":"20240201213665"}}]}