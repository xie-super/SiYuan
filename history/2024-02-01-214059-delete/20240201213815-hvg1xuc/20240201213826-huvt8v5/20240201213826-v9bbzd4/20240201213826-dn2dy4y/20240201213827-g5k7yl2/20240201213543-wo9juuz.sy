{"ID":"20240201213543-wo9juuz","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213543-wo9juuz","title":"nio-basis","updated":"20240201213543"},"Children":[{"ID":"20240201213544-e5ftmez","Type":"NodeThematicBreak","Properties":{"id":"20240201213544-e5ftmez","updated":"20240201213544"}},{"ID":"20240201213545-rraclsu","Type":"NodeParagraph","Properties":{"id":"20240201213545-rraclsu","updated":"20240201213545"},"Children":[{"Type":"NodeText","Data":"title: Java NIO 核心知识总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213546-2zlqpl3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-2zlqpl3","updated":"20240201213546"},"Children":[{"ID":"20240201213547-avixvy0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213547-avixvy0","updated":"20240201213547"},"Children":[{"ID":"20240201213548-4chkmfw","Type":"NodeParagraph","Properties":{"id":"20240201213548-4chkmfw","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"Java IO"}]}]},{"ID":"20240201213549-cfrwn4o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213549-cfrwn4o","updated":"20240201213549"},"Children":[{"ID":"20240201213550-i424kso","Type":"NodeParagraph","Properties":{"id":"20240201213550-i424kso","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"Java基础"}]}]}]},{"ID":"20240201213551-r5ccj1k","Type":"NodeThematicBreak","Properties":{"id":"20240201213551-r5ccj1k","updated":"20240201213551"}},{"ID":"20240201213552-s7bq1nl","Type":"NodeParagraph","Properties":{"id":"20240201213552-s7bq1nl","updated":"20240201213552"},"Children":[{"Type":"NodeText","Data":"在学习 NIO 之前，需要先了解一下计算机 I/O 模型的基础理论知识。还不了解的话，可以参考我写的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/io/io-model.html","TextMarkTextContent":"Java IO 模型详解"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213553-91zdarj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213553-91zdarj","updated":"20240201213553"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"NIO 简介"}]},{"ID":"20240201213554-alcaxkh","Type":"NodeParagraph","Properties":{"id":"20240201213554-alcaxkh","updated":"20240201213554"},"Children":[{"Type":"NodeText","Data":"在传统的 Java I/O 模型（BIO）中，I/O 操作是以阻塞的方式进行的。也就是说，当一个线程执行一个 I/O 操作时，它会被阻塞直到操作完成。这种阻塞模型在处理多个并发连接时可能会导致性能瓶颈，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。"}]},{"ID":"20240201213555-lesehs5","Type":"NodeParagraph","Properties":{"id":"20240201213555-lesehs5","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"为了解决这个问题，在 Java1.4 版本引入了一种新的 I/O 模型 — "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"NIO"},{"Type":"NodeText","Data":" （New IO，也称为 Non-blocking IO） 。NIO 弥补了同步阻塞 I/O 的不足，它在标准 Java 代码中提供了非阻塞、面向缓冲、基于通道的 I/O，可以使用少量的线程来处理多个连接，大大提高了 I/O 效率和并发。"}]},{"ID":"20240201213556-4dxrsex","Type":"NodeParagraph","Properties":{"id":"20240201213556-4dxrsex","updated":"20240201213556"},"Children":[{"Type":"NodeText","Data":"下图是 BIO、NIO 和 AIO 处理客户端请求的简单对比图（关于 AIO 的介绍，可以看我写的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/java/io/io-model.html","TextMarkTextContent":"Java IO 模型详解"},{"Type":"NodeText","Data":"，不是重点，了解即可）。"}]},{"ID":"20240201213557-q4keoee","Type":"NodeParagraph","Properties":{"id":"20240201213557-q4keoee","updated":"20240201213557"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"BIO、NIO 和 AIO 对比","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/bio-aio-nio.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213558-jb46swr","Type":"NodeParagraph","Properties":{"id":"20240201213558-jb46swr","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"⚠️需要注意：使用 NIO 并不一定意味着高性能，它的性能优势主要体现在高并发和高延迟的网络环境下。当连接数较少、并发程度较低或者网络传输速度较快时，NIO 的性能并不一定优于传统的 BIO 。"}]},{"ID":"20240201213559-iwjbkdc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213559-iwjbkdc","updated":"20240201213559"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"NIO 核心组件"}]},{"ID":"20240201213560-dklavz5","Type":"NodeParagraph","Properties":{"id":"20240201213560-dklavz5","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"NIO 主要包括以下三个核心组件："}]},{"ID":"20240201213561-29cs6aa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213561-29cs6aa","updated":"20240201213561"},"Children":[{"ID":"20240201213562-nmxzq4v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-nmxzq4v","updated":"20240201213562"},"Children":[{"ID":"20240201213563-dwbpdsh","Type":"NodeParagraph","Properties":{"id":"20240201213563-dwbpdsh","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Buffer（缓冲区）"},{"Type":"NodeText","Data":"：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。"}]}]},{"ID":"20240201213564-kgd1wp8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213564-kgd1wp8","updated":"20240201213564"},"Children":[{"ID":"20240201213565-ucewovp","Type":"NodeParagraph","Properties":{"id":"20240201213565-ucewovp","updated":"20240201213565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Channel（通道）"},{"Type":"NodeText","Data":"：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过 Channel 来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。"}]}]},{"ID":"20240201213566-amhz187","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-amhz187","updated":"20240201213566"},"Children":[{"ID":"20240201213567-sw1axqc","Type":"NodeParagraph","Properties":{"id":"20240201213567-sw1axqc","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Selector（选择器）"},{"Type":"NodeText","Data":"：允许一个线程处理多个 Channel，基于事件驱动的 I/O 多路复用模型。所有的 Channel 都可以注册到 Selector 上，由 Selector 来分配线程来处理事件。"}]}]}]},{"ID":"20240201213568-n7i74fp","Type":"NodeParagraph","Properties":{"id":"20240201213568-n7i74fp","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"三者的关系如下图所示（暂时不理解没关系，后文会详细介绍）："}]},{"ID":"20240201213569-cf4o3ht","Type":"NodeParagraph","Properties":{"id":"20240201213569-cf4o3ht","updated":"20240201213569"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Buffer、Channel和Selector三者之间的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/channel-buffer-selector.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213570-c10qpxg","Type":"NodeParagraph","Properties":{"id":"20240201213570-c10qpxg","updated":"20240201213570"},"Children":[{"Type":"NodeText","Data":"下面详细介绍一下这三个组件。"}]},{"ID":"20240201213571-h4x4m9w","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213571-h4x4m9w","updated":"20240201213571"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Buffer（缓冲区）"}]},{"ID":"20240201213572-58zafjp","Type":"NodeParagraph","Properties":{"id":"20240201213572-58zafjp","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"在传统的 BIO 中，数据的读写是面向流的， 分为字节流和字符流。"}]},{"ID":"20240201213573-oeszqts","Type":"NodeParagraph","Properties":{"id":"20240201213573-oeszqts","updated":"20240201213573"},"Children":[{"Type":"NodeText","Data":"在 Java 1.4 的 NIO 库中，所有数据都是用缓冲区处理的，这是新库和之前的 BIO 的一个重要区别，有点类似于 BIO 中的缓冲流。NIO 在读取数据时，它是直接读到缓冲区中的。在写入数据时，写入到缓冲区中。 使用 NIO 在读写数据时，都是通过缓冲区进行操作。"}]},{"ID":"20240201213574-p2u3udi","Type":"NodeParagraph","Properties":{"id":"20240201213574-p2u3udi","updated":"20240201213574"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":" 的子类如下图所示。其中，最常用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ByteBuffer"},{"Type":"NodeText","Data":"，它可以用来存储和操作字节数据。"}]},{"ID":"20240201213575-8vmjul2","Type":"NodeParagraph","Properties":{"id":"20240201213575-8vmjul2","updated":"20240201213575"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Buffer 的子类","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/buffer-subclasses.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213576-neuku9r","Type":"NodeParagraph","Properties":{"id":"20240201213576-neuku9r","updated":"20240201213576"},"Children":[{"Type":"NodeText","Data":"你可以将 Buffer 理解为一个数组，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IntBuffer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FloatBuffer"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CharBuffer"},{"Type":"NodeText","Data":" 等分别对应 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int[]"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"float[]"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"char[]"},{"Type":"NodeText","Data":" 等。"}]},{"ID":"20240201213577-ppr1ij0","Type":"NodeParagraph","Properties":{"id":"20240201213577-ppr1ij0","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"为了更清晰地认识缓冲区，我们来简单看看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":" 类中定义的四个成员变量："}]},{"ID":"20240201213578-fsyh6h3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213578-fsyh6h3","updated":"20240201213578"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public abstract class Buffer {\n    // Invariants: mark \u003c= position \u003c= limit \u003c= capacity\n    private int mark = -1;\n    private int position = 0;\n    private int limit;\n    private int capacity;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213579-25usm4m","Type":"NodeParagraph","Properties":{"id":"20240201213579-25usm4m","updated":"20240201213579"},"Children":[{"Type":"NodeText","Data":"这四个成员变量的具体含义如下："}]},{"ID":"20240201213580-waf6oi4","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213580-waf6oi4","updated":"20240201213580"},"Children":[{"ID":"20240201213581-u6s3ow0","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213581-u6s3ow0","updated":"20240201213581"},"Children":[{"ID":"20240201213582-0ttwcfh","Type":"NodeParagraph","Properties":{"id":"20240201213582-0ttwcfh","updated":"20240201213582"},"Children":[{"Type":"NodeText","Data":"容量（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"capacity"},{"Type":"NodeText","Data":"）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":"可以存储的最大数据量，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":"创建时设置且不可改变；"}]}]},{"ID":"20240201213583-03soy46","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213583-03soy46","updated":"20240201213583"},"Children":[{"ID":"20240201213584-gj2rhv8","Type":"NodeParagraph","Properties":{"id":"20240201213584-gj2rhv8","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"界限（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":"）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":" 中可以读/写数据的边界。写模式下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":" 代表最多能写入的数据，一般等于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"capacity"},{"Type":"NodeText","Data":"（可以通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit(int newLimit)"},{"Type":"NodeText","Data":"方法设置）；读模式下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":" 等于 Buffer 中实际写入的数据大小。"}]}]},{"ID":"20240201213585-egi7y0k","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213585-egi7y0k","updated":"20240201213585"},"Children":[{"ID":"20240201213586-b4hqmjx","Type":"NodeParagraph","Properties":{"id":"20240201213586-b4hqmjx","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"位置（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"）：下一个可以被读写的数据的位置（索引）。从写操作模式到读操作模式切换的时候（flip），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":" 都会归零，这样就可以从头开始读写了。"}]}]},{"ID":"20240201213587-9vy6pho","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213587-9vy6pho","updated":"20240201213587"},"Children":[{"ID":"20240201213588-qedyxtt","Type":"NodeParagraph","Properties":{"id":"20240201213588-qedyxtt","updated":"20240201213588"},"Children":[{"Type":"NodeText","Data":"标记（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mark"},{"Type":"NodeText","Data":"）："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":"允许将位置直接定位到该标记处，这是一个可选属性；"}]}]}]},{"ID":"20240201213589-zyn3xq6","Type":"NodeParagraph","Properties":{"id":"20240201213589-zyn3xq6","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"并且，上述变量满足如下的关系："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"0 \u0026lt;= mark \u0026lt;= position \u0026lt;= limit \u0026lt;= capacity"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213590-6ys8ycs","Type":"NodeParagraph","Properties":{"id":"20240201213590-6ys8ycs","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"另外，Buffer 有读模式和写模式这两种模式，分别用于从 Buffer 中读取数据或者向 Buffer 中写入数据。Buffer 被创建之后默认是写模式，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"flip()"},{"Type":"NodeText","Data":" 可以切换到读模式。如果要再次切换回写模式，可以调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"clear()"},{"Type":"NodeText","Data":" 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"compact()"},{"Type":"NodeText","Data":" 方法。"}]},{"ID":"20240201213591-0xsj19i","Type":"NodeParagraph","Properties":{"id":"20240201213591-0xsj19i","updated":"20240201213591"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"position 、limit 和 capacity 之前的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/JavaNIOBuffer.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213592-4pivojn","Type":"NodeParagraph","Properties":{"id":"20240201213592-4pivojn","updated":"20240201213592"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"position 、limit 和 capacity 之前的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/NIOBufferClassAttributes.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213593-cquw4dl","Type":"NodeParagraph","Properties":{"id":"20240201213593-cquw4dl","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":" 对象不能通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":" 调用构造方法创建对象 ，只能通过静态方法实例化 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213594-vlydpiq","Type":"NodeParagraph","Properties":{"id":"20240201213594-vlydpiq","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"这里以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ByteBuffer"},{"Type":"NodeText","Data":"为例进行介绍："}]},{"ID":"20240201213595-lf9wc4f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213595-lf9wc4f","updated":"20240201213595"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 分配堆内存\npublic static ByteBuffer allocate(int capacity);\n// 分配直接内存\npublic static ByteBuffer allocateDirect(int capacity);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213596-4q0h7w8","Type":"NodeParagraph","Properties":{"id":"20240201213596-4q0h7w8","updated":"20240201213596"},"Children":[{"Type":"NodeText","Data":"Buffer 最核心的两个方法："}]},{"ID":"20240201213597-idxxed0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213597-idxxed0","updated":"20240201213597"},"Children":[{"ID":"20240201213598-acip1kx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213598-acip1kx","updated":"20240201213598"},"Children":[{"ID":"20240201213599-f50xc4e","Type":"NodeParagraph","Properties":{"id":"20240201213599-f50xc4e","updated":"20240201213599"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get"},{"Type":"NodeText","Data":" : 读取缓冲区的数据"}]}]},{"ID":"20240201213600-lrnge6u","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213600-lrnge6u","updated":"20240201213600"},"Children":[{"ID":"20240201213601-d7ucqk4","Type":"NodeParagraph","Properties":{"id":"20240201213601-d7ucqk4","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"put"},{"Type":"NodeText","Data":" ：向缓冲区写入数据"}]}]}]},{"ID":"20240201213602-44i6i2n","Type":"NodeParagraph","Properties":{"id":"20240201213602-44i6i2n","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"除上述两个方法之外，其他的重要方法："}]},{"ID":"20240201213603-2voodka","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213603-2voodka","updated":"20240201213603"},"Children":[{"ID":"20240201213604-kc0t4qd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213604-kc0t4qd","updated":"20240201213604"},"Children":[{"ID":"20240201213605-qm5zj0e","Type":"NodeParagraph","Properties":{"id":"20240201213605-qm5zj0e","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"flip"},{"Type":"NodeText","Data":" ：将缓冲区从写模式切换到读模式，它会将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":" 的值设置为当前 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":" 的值，将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":" 的值设置为 0。"}]}]},{"ID":"20240201213606-eu7miiq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213606-eu7miiq","updated":"20240201213606"},"Children":[{"ID":"20240201213607-2hgv1lk","Type":"NodeParagraph","Properties":{"id":"20240201213607-2hgv1lk","updated":"20240201213607"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"clear"},{"Type":"NodeText","Data":": 清空缓冲区，将缓冲区从读模式切换到写模式，并将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":" 的值设置为 0，将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":" 的值设置为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"capacity"},{"Type":"NodeText","Data":" 的值。"}]}]},{"ID":"20240201213608-y5w87zt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213608-y5w87zt","updated":"20240201213608"},"Children":[{"ID":"20240201213609-1zf642p","Type":"NodeParagraph","Properties":{"id":"20240201213609-1zf642p","updated":"20240201213609"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213610-uf511q5","Type":"NodeParagraph","Properties":{"id":"20240201213610-uf511q5","updated":"20240201213610"},"Children":[{"Type":"NodeText","Data":"Buffer 中数据变化的过程："}]},{"ID":"20240201213611-ypxu0ep","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213611-ypxu0ep","updated":"20240201213611"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.nio.*;\n\npublic class CharBufferDemo {\n    public static void main(String[] args) {\n        // 分配一个容量为8的CharBuffer\n        CharBuffer buffer = CharBuffer.allocate(8);\n        System.out.println(\"初始状态：\");\n        printState(buffer);\n\n        // 向buffer写入3个字符\n        buffer.put('a').put('b').put('c');\n        System.out.println(\"写入3个字符后的状态：\");\n        printState(buffer);\n\n        // 调用flip()方法，准备读取buffer中的数据，将 position 置 0,limit 的置 3\n        buffer.flip();\n        System.out.println(\"调用flip()方法后的状态：\");\n        printState(buffer);\n\n        // 读取字符\n        while (buffer.hasRemaining()) {\n            System.out.print(buffer.get());\n        }\n\n        // 调用clear()方法，清空缓冲区，将 position 的值置为 0，将 limit 的值置为 capacity 的值\n        buffer.clear();\n        System.out.println(\"调用clear()方法后的状态：\");\n        printState(buffer);\n\n    }\n\n    // 打印buffer的capacity、limit、position、mark的位置\n    private static void printState(CharBuffer buffer) {\n        System.out.print(\"capacity: \" + buffer.capacity());\n        System.out.print(\", limit: \" + buffer.limit());\n        System.out.print(\", position: \" + buffer.position());\n        System.out.print(\", mark 开始读取的字符: \" + buffer.mark());\n        System.out.println(\"\\n\");\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213612-kt05hao","Type":"NodeParagraph","Properties":{"id":"20240201213612-kt05hao","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"输出:"}]},{"ID":"20240201213613-5veq29i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213613-5veq29i","updated":"20240201213613"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"初始状态：\ncapacity: 8, limit: 8, position: 0\n\n写入3个字符后的状态：\ncapacity: 8, limit: 8, position: 3\n\n准备读取buffer中的数据！\n\n调用flip()方法后的状态：\ncapacity: 8, limit: 3, position: 0\n\n读取到的数据：abc\n\n调用clear()方法后的状态：\ncapacity: 8, limit: 8, position: 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213614-u21cia1","Type":"NodeParagraph","Properties":{"id":"20240201213614-u21cia1","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"为了帮助理解，我绘制了一张图片展示 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"capacity"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"每一阶段的变化。"}]},{"ID":"20240201213615-gjj5aua","Type":"NodeParagraph","Properties":{"id":"20240201213615-gjj5aua","updated":"20240201213615"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"capacity、limit和position每一阶段的变化","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/NIOBufferClassAttributesDataChanges.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213616-gwas8sk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213616-gwas8sk","updated":"20240201213616"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Channel（通道）"}]},{"ID":"20240201213617-herl283","Type":"NodeParagraph","Properties":{"id":"20240201213617-herl283","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"Channel 是一个通道，它建立了与数据源（如文件、网络套接字等）之间的连接。我们可以利用它来读取和写入数据，就像打开了一条自来水管，让数据在 Channel 中自由流动。"}]},{"ID":"20240201213618-wiwsiqq","Type":"NodeParagraph","Properties":{"id":"20240201213618-wiwsiqq","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"BIO 中的流是单向的，分为各种 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":"（输入流）和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":"（输出流），数据只是在一个方向上传输。通道与流的不同之处在于通道是双向的，它可以用于读、写或者同时用于读写。"}]},{"ID":"20240201213619-bu5o85f","Type":"NodeParagraph","Properties":{"id":"20240201213619-bu5o85f","updated":"20240201213619"},"Children":[{"Type":"NodeText","Data":"Channel 与前面介绍的 Buffer 打交道，读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。"}]},{"ID":"20240201213620-scbrfws","Type":"NodeParagraph","Properties":{"id":"20240201213620-scbrfws","updated":"20240201213620"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Channel 和 Buffer之间的关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/channel-buffer.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213621-osz03js","Type":"NodeParagraph","Properties":{"id":"20240201213621-osz03js","updated":"20240201213621"},"Children":[{"Type":"NodeText","Data":"另外，因为 Channel 是全双工的，所以它可以比流更好地映射底层操作系统的 API。特别是在 UNIX 网络编程模型中，底层操作系统的通道都是全双工的，同时支持读写操作。"}]},{"ID":"20240201213622-wd96urt","Type":"NodeParagraph","Properties":{"id":"20240201213622-wd96urt","updated":"20240201213622"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":" 的子类如下图所示。"}]},{"ID":"20240201213623-zz24y35","Type":"NodeParagraph","Properties":{"id":"20240201213623-zz24y35","updated":"20240201213623"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Channel 的子类","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/channel-subclasses.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213624-975m1ys","Type":"NodeParagraph","Properties":{"id":"20240201213624-975m1ys","updated":"20240201213624"},"Children":[{"Type":"NodeText","Data":"其中，最常用的是以下几种类型的通道："}]},{"ID":"20240201213625-fgo2fhk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213625-fgo2fhk","updated":"20240201213625"},"Children":[{"ID":"20240201213626-85rkoi9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213626-85rkoi9","updated":"20240201213626"},"Children":[{"ID":"20240201213627-hbs3w8s","Type":"NodeParagraph","Properties":{"id":"20240201213627-hbs3w8s","updated":"20240201213627"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":"：文件访问通道；"}]}]},{"ID":"20240201213628-1ibbkxy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-1ibbkxy","updated":"20240201213628"},"Children":[{"ID":"20240201213629-lgekfyn","Type":"NodeParagraph","Properties":{"id":"20240201213629-lgekfyn","updated":"20240201213629"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SocketChannel"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServerSocketChannel"},{"Type":"NodeText","Data":"：TCP 通信通道；"}]}]},{"ID":"20240201213630-fmd47uu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213630-fmd47uu","updated":"20240201213630"},"Children":[{"ID":"20240201213631-apbze0l","Type":"NodeParagraph","Properties":{"id":"20240201213631-apbze0l","updated":"20240201213631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DatagramChannel"},{"Type":"NodeText","Data":"：UDP 通信通道；"}]}]}]},{"ID":"20240201213632-d9lfp5b","Type":"NodeParagraph","Properties":{"id":"20240201213632-d9lfp5b","updated":"20240201213632"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Channel继承关系图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/channel-inheritance-relationship.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213633-6ht4yzc","Type":"NodeParagraph","Properties":{"id":"20240201213633-6ht4yzc","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"Channel 最核心的两个方法："}]},{"ID":"20240201213634-92v1iyy","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213634-92v1iyy","updated":"20240201213634"},"Children":[{"ID":"20240201213635-rhc2ted","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213635-rhc2ted","updated":"20240201213635"},"Children":[{"ID":"20240201213636-zfr7s1v","Type":"NodeParagraph","Properties":{"id":"20240201213636-zfr7s1v","updated":"20240201213636"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"read"},{"Type":"NodeText","Data":" ：读取数据并写入到 Buffer 中。"}]}]},{"ID":"20240201213637-2mtov28","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213637-2mtov28","updated":"20240201213637"},"Children":[{"ID":"20240201213638-y8a433c","Type":"NodeParagraph","Properties":{"id":"20240201213638-y8a433c","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"write"},{"Type":"NodeText","Data":" ：将 Buffer 中的数据写入到 Channel 中。"}]}]}]},{"ID":"20240201213639-m8f95mm","Type":"NodeParagraph","Properties":{"id":"20240201213639-m8f95mm","updated":"20240201213639"},"Children":[{"Type":"NodeText","Data":"这里我们以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":" 为例演示一下是读取文件数据的。"}]},{"ID":"20240201213640-irv9g0f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213640-irv9g0f","updated":"20240201213640"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"RandomAccessFile reader = new RandomAccessFile(\"/Users/guide/Documents/test_read.in\", \"r\"))\nFileChannel channel = reader.getChannel();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nchannel.read(buffer);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213641-mllxqt8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213641-mllxqt8","updated":"20240201213641"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Selector（选择器）"}]},{"ID":"20240201213642-0fwn8ee","Type":"NodeParagraph","Properties":{"id":"20240201213642-0fwn8ee","updated":"20240201213642"},"Children":[{"Type":"NodeText","Data":"Selector（选择器） 是 NIO 中的一个关键组件，它允许一个线程处理多个 Channel。Selector 是基于事件驱动的 I/O 多路复用模型，主要运作原理是：通过 Selector 注册通道的事件，Selector 会不断地轮询注册在其上的 Channel。当事件发生时，比如：某个 Channel 上面有新的 TCP 连接接入、读和写事件，这个 Channel 就处于就绪状态，会被 Selector 轮询出来。Selector 会将相关的 Channel 加入到就绪集合中。通过 SelectionKey 可以获取就绪 Channel 的集合，然后对这些就绪的 Channel 进行响应的 I/O 操作。"}]},{"ID":"20240201213643-79je87n","Type":"NodeParagraph","Properties":{"id":"20240201213643-79je87n","updated":"20240201213643"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Selector 选择器工作示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oss.javaguide.cn/github/javaguide/java/nio/selector-channel-selectionkey.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213644-0r0jnav","Type":"NodeParagraph","Properties":{"id":"20240201213644-0r0jnav","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"一个多路复用器 Selector 可以同时轮询多个 Channel，由于 JDK 使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"epoll()"},{"Type":"NodeText","Data":" 代替传统的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select"},{"Type":"NodeText","Data":" 实现，所以它并没有最大连接句柄 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1024/2048"},{"Type":"NodeText","Data":" 的限制。这也就意味着只需要一个线程负责 Selector 的轮询，就可以接入成千上万的客户端。"}]},{"ID":"20240201213645-o7pog7t","Type":"NodeParagraph","Properties":{"id":"20240201213645-o7pog7t","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"Selector 可以监听以下四种事件类型："}]},{"ID":"20240201213646-ri7yjov","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213646-ri7yjov","updated":"20240201213646"},"Children":[{"ID":"20240201213647-p5iyi8t","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213647-p5iyi8t","updated":"20240201213647"},"Children":[{"ID":"20240201213648-jhcmlg1","Type":"NodeParagraph","Properties":{"id":"20240201213648-jhcmlg1","updated":"20240201213648"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey.OP_ACCEPT"},{"Type":"NodeText","Data":"：表示通道接受连接的事件，这通常用于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ServerSocketChannel"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213649-i51c2t8","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213649-i51c2t8","updated":"20240201213649"},"Children":[{"ID":"20240201213650-fk1snpc","Type":"NodeParagraph","Properties":{"id":"20240201213650-fk1snpc","updated":"20240201213650"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey.OP_CONNECT"},{"Type":"NodeText","Data":"：表示通道完成连接的事件，这通常用于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SocketChannel"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213651-nlmlwu7","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213651-nlmlwu7","updated":"20240201213651"},"Children":[{"ID":"20240201213652-qi8cxpu","Type":"NodeParagraph","Properties":{"id":"20240201213652-qi8cxpu","updated":"20240201213652"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey.OP_READ"},{"Type":"NodeText","Data":"：表示通道准备好进行读取的事件，即有数据可读。"}]}]},{"ID":"20240201213653-h79qf9n","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213653-h79qf9n","updated":"20240201213653"},"Children":[{"ID":"20240201213654-o0n1c87","Type":"NodeParagraph","Properties":{"id":"20240201213654-o0n1c87","updated":"20240201213654"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey.OP_WRITE"},{"Type":"NodeText","Data":"：表示通道准备好进行写入的事件，即可以写入数据。"}]}]}]},{"ID":"20240201213655-49ldobp","Type":"NodeParagraph","Properties":{"id":"20240201213655-49ldobp","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Selector"},{"Type":"NodeText","Data":"是抽象类，可以通过调用此类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"open()"},{"Type":"NodeText","Data":" 静态方法来创建 Selector 实例。Selector 可以同时监控多个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectableChannel"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IO"},{"Type":"NodeText","Data":" 状况，是非阻塞 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IO"},{"Type":"NodeText","Data":" 的核心。"}]},{"ID":"20240201213656-r81t2bv","Type":"NodeParagraph","Properties":{"id":"20240201213656-r81t2bv","updated":"20240201213656"},"Children":[{"Type":"NodeText","Data":"一个 Selector 实例有三个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 集合："}]},{"ID":"20240201213657-mzcg4e0","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213657-mzcg4e0","updated":"20240201213657"},"Children":[{"ID":"20240201213658-zpinbgt","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213658-zpinbgt","updated":"20240201213658"},"Children":[{"ID":"20240201213659-icx1uaw","Type":"NodeParagraph","Properties":{"id":"20240201213659-icx1uaw","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"所有的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 集合：代表了注册在该 Selector 上的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":"，这个集合可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"keys()"},{"Type":"NodeText","Data":" 方法返回。"}]}]},{"ID":"20240201213660-mywzlyk","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213660-mywzlyk","updated":"20240201213660"},"Children":[{"ID":"20240201213661-h6a9i5u","Type":"NodeParagraph","Properties":{"id":"20240201213661-h6a9i5u","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"被选择的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 集合：代表了所有可通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 方法获取的、需要进行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IO"},{"Type":"NodeText","Data":" 处理的 Channel，这个集合可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"selectedKeys()"},{"Type":"NodeText","Data":" 返回。"}]}]},{"ID":"20240201213662-s9ngqhq","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213662-s9ngqhq","updated":"20240201213662"},"Children":[{"ID":"20240201213663-ayp1ye8","Type":"NodeParagraph","Properties":{"id":"20240201213663-ayp1ye8","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"被取消的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 集合：代表了所有被取消注册关系的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":"，在下一次执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 方法时，这些 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":" 对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 会被彻底删除，程序通常无须直接访问该集合，也没有暴露访问的方法。"}]}]}]},{"ID":"20240201213664-x8xc522","Type":"NodeParagraph","Properties":{"id":"20240201213664-x8xc522","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"简单演示一下如何遍历被选择的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 集合并进行处理："}]},{"ID":"20240201213665-wco7ha4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213665-wco7ha4","updated":"20240201213665"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Set\u003cSelectionKey\u003e selectedKeys = selector.selectedKeys();\nIterator\u003cSelectionKey\u003e keyIterator = selectedKeys.iterator();\nwhile (keyIterator.hasNext()) {\n    SelectionKey key = keyIterator.next();\n    if (key != null) {\n        if (key.isAcceptable()) {\n            // ServerSocketChannel 接收了一个新连接\n        } else if (key.isConnectable()) {\n            // 表示一个新连接建立\n        } else if (key.isReadable()) {\n            // Channel 有准备好的数据，可以读取\n        } else if (key.isWritable()) {\n            // Channel 有空闲的 Buffer，可以写入数据\n        }\n    }\n    keyIterator.remove();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213666-1u5ypvs","Type":"NodeParagraph","Properties":{"id":"20240201213666-1u5ypvs","updated":"20240201213666"},"Children":[{"Type":"NodeText","Data":"Selector 还提供了一系列和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 相关的方法："}]},{"ID":"20240201213667-nv6juhu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213667-nv6juhu","updated":"20240201213667"},"Children":[{"ID":"20240201213668-399mlo6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213668-399mlo6","updated":"20240201213668"},"Children":[{"ID":"20240201213669-fpfpel4","Type":"NodeParagraph","Properties":{"id":"20240201213669-fpfpel4","updated":"20240201213669"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int select()"},{"Type":"NodeText","Data":"：监控所有注册的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":"，当它们中间有需要处理的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IO"},{"Type":"NodeText","Data":" 操作时，该方法返回，并将对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 加入被选择的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":" 集合中，该方法返回这些 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":" 的数量。"}]}]},{"ID":"20240201213670-8309bnv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-8309bnv","updated":"20240201213670"},"Children":[{"ID":"20240201213671-l7tg3ax","Type":"NodeParagraph","Properties":{"id":"20240201213671-l7tg3ax","updated":"20240201213671"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int select(long timeout)"},{"Type":"NodeText","Data":"：可以设置超时时长的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 操作。"}]}]},{"ID":"20240201213672-efhu9gn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213672-efhu9gn","updated":"20240201213672"},"Children":[{"ID":"20240201213673-wznbmy0","Type":"NodeParagraph","Properties":{"id":"20240201213673-wznbmy0","updated":"20240201213673"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"int selectNow()"},{"Type":"NodeText","Data":"：执行一个立即返回的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 操作，相对于无参数的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 方法而言，该方法不会阻塞线程。"}]}]},{"ID":"20240201213674-gd8qoby","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213674-gd8qoby","updated":"20240201213674"},"Children":[{"ID":"20240201213675-23ercrz","Type":"NodeParagraph","Properties":{"id":"20240201213675-23ercrz","updated":"20240201213675"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Selector wakeup()"},{"Type":"NodeText","Data":"：使一个还未返回的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select()"},{"Type":"NodeText","Data":" 方法立刻返回。"}]}]},{"ID":"20240201213676-ffg5ryd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213676-ffg5ryd","updated":"20240201213676"},"Children":[{"ID":"20240201213677-gmfnmtf","Type":"NodeParagraph","Properties":{"id":"20240201213677-gmfnmtf","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"……"}]}]}]},{"ID":"20240201213678-5hn9uhh","Type":"NodeParagraph","Properties":{"id":"20240201213678-5hn9uhh","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"使用 Selector 实现网络读写的简单示例："}]},{"ID":"20240201213679-rcqzu3c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213679-rcqzu3c","updated":"20240201213679"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioSelectorExample {\n\n  public static void main(String[] args) {\n    try {\n      ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n      serverSocketChannel.configureBlocking(false);\n      serverSocketChannel.socket().bind(new InetSocketAddress(8080));\n\n      Selector selector = Selector.open();\n      // 将 ServerSocketChannel 注册到 Selector 并监听 OP_ACCEPT 事件\n      serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n      while (true) {\n        int readyChannels = selector.select();\n\n        if (readyChannels == 0) {\n          continue;\n        }\n\n        Set\u003cSelectionKey\u003e selectedKeys = selector.selectedKeys();\n        Iterator\u003cSelectionKey\u003e keyIterator = selectedKeys.iterator();\n\n        while (keyIterator.hasNext()) {\n          SelectionKey key = keyIterator.next();\n\n          if (key.isAcceptable()) {\n            // 处理连接事件\n            ServerSocketChannel server = (ServerSocketChannel) key.channel();\n            SocketChannel client = server.accept();\n            client.configureBlocking(false);\n\n            // 将客户端通道注册到 Selector 并监听 OP_READ 事件\n            client.register(selector, SelectionKey.OP_READ);\n          } else if (key.isReadable()) {\n            // 处理读事件\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            int bytesRead = client.read(buffer);\n\n            if (bytesRead \u003e 0) {\n              buffer.flip();\n              System.out.println(\"收到数据：\" +new String(buffer.array(), 0, bytesRead));\n              // 将客户端通道注册到 Selector 并监听 OP_WRITE 事件\n              client.register(selector, SelectionKey.OP_WRITE);\n            } else if (bytesRead \u003c 0) {\n              // 客户端断开连接\n              client.close();\n            }\n          } else if (key.isWritable()) {\n            // 处理写事件\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer buffer = ByteBuffer.wrap(\"Hello, Client!\".getBytes());\n            client.write(buffer);\n\n            // 将客户端通道注册到 Selector 并监听 OP_READ 事件\n            client.register(selector, SelectionKey.OP_READ);\n          }\n\n          keyIterator.remove();\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213680-n7g01e0","Type":"NodeParagraph","Properties":{"id":"20240201213680-n7g01e0","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"在示例中，我们创建了一个简单的服务器，监听 8080 端口，使用 Selector 处理连接、读取和写入事件。当接收到客户端的数据时，服务器将读取数据并将其打印到控制台，然后向客户端回复 \"Hello, Client!\"。"}]},{"ID":"20240201213681-5yrb56z","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213681-5yrb56z","updated":"20240201213681"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"NIO 零拷贝"}]},{"ID":"20240201213682-7c28th3","Type":"NodeParagraph","Properties":{"id":"20240201213682-7c28th3","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"零拷贝是提升 IO 操作性能的一个常用手段，像 ActiveMQ、Kafka 、RocketMQ、QMQ、Netty 等顶级开源项目都用到了零拷贝。"}]},{"ID":"20240201213683-qfelmie","Type":"NodeParagraph","Properties":{"id":"20240201213683-qfelmie","updated":"20240201213683"},"Children":[{"Type":"NodeText","Data":"零拷贝是指计算机执行 IO 操作时，CPU 不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少上下文切换以及 CPU 的拷贝时间。也就是说，零拷贝主主要解决操作系统在处理 I/O 操作时频繁复制数据的问题。零拷贝的常见实现技术有： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mmap+write"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sendfile"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sendfile + DMA gather copy"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213684-ba9r67w","Type":"NodeParagraph","Properties":{"id":"20240201213684-ba9r67w","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"下图展示了各种零拷贝技术的对比图："}]},{"ID":"20240201213685-zee9m9q","Type":"NodeTable","Data":"|                            | CPU 拷贝 | DMA 拷贝 | 系统调用   | 上下文切换 |\n| -------------------------- | -------- | -------- | ---------- | ---------- |\n| 传统方法                   | 2        | 2        | read+write | 4          |\n| mmap+write                 | 1        | 2        | mmap+write | 4          |\n| sendfile                   | 1        | 2        | sendfile   | 2          |\n| sendfile + DMA gather copy | 0        | 2        | sendfile   | 2          |","TableAligns":[0,0,0,0,0],"Properties":{"id":"20240201213685-zee9m9q","updated":"20240201213685"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""}},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"CPU 拷贝"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"DMA 拷贝"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"系统调用"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"上下文切换"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"传统方法"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"read+write"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"4"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"mmap+write"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"mmap+write"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"4"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"sendfile"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"1"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"sendfile"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"sendfile + DMA gather copy"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"0"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"sendfile"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"2"}]}]}]},{"ID":"20240201213686-g808njq","Type":"NodeParagraph","Properties":{"id":"20240201213686-g808njq","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"可以看出，无论是传统的 I/O 方式，还是引入了零拷贝之后，2 次 DMA(Direct Memory Access) 拷贝是都少不了的。因为两次 DMA 都是依赖硬件完成的。零拷贝主要是减少了 CPU 拷贝及上下文的切换。"}]},{"ID":"20240201213687-x4xy50e","Type":"NodeParagraph","Properties":{"id":"20240201213687-x4xy50e","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"Java 对零拷贝的支持："}]},{"ID":"20240201213688-joy2x43","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213688-joy2x43","updated":"20240201213688"},"Children":[{"ID":"20240201213689-4xq0hxd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213689-4xq0hxd","updated":"20240201213689"},"Children":[{"ID":"20240201213690-if5bx4p","Type":"NodeParagraph","Properties":{"id":"20240201213690-if5bx4p","updated":"20240201213690"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MappedByteBuffer"},{"Type":"NodeText","Data":" 是 NIO 基于内存映射（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mmap"},{"Type":"NodeText","Data":"）这种零拷⻉⽅式的提供的⼀种实现，底层实际是调用了 Linux 内核的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mmap"},{"Type":"NodeText","Data":" 系统调用。它可以将一个文件或者文件的一部分映射到内存中，形成一个虚拟内存文件，这样就可以直接操作内存中的数据，而不需要通过系统调用来读写文件。"}]}]},{"ID":"20240201213691-gi39g5n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213691-gi39g5n","updated":"20240201213691"},"Children":[{"ID":"20240201213692-txjw0tn","Type":"NodeParagraph","Properties":{"id":"20240201213692-txjw0tn","updated":"20240201213692"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":" 的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"transferTo()/transferFrom()"},{"Type":"NodeText","Data":"是 NIO 基于发送文件（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sendfile"},{"Type":"NodeText","Data":"）这种零拷贝方式的提供的一种实现，底层实际是调用了 Linux 内核的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sendfile"},{"Type":"NodeText","Data":"系统调用。它可以直接将文件数据从磁盘发送到网络，而不需要经过用户空间的缓冲区。关于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":"的用法可以看看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/robothy/p/14235598.html","TextMarkTextContent":"Java NIO 文件通道 FileChannel 用法"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213693-lscq90u","Type":"NodeParagraph","Properties":{"id":"20240201213693-lscq90u","updated":"20240201213693"},"Children":[{"Type":"NodeText","Data":"代码示例："}]},{"ID":"20240201213694-avsoeg1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213694-avsoeg1","updated":"20240201213694"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private void loadFileIntoMemory(File xmlFile) throws IOException {\n  FileInputStream fis = new FileInputStream(xmlFile);\n  // 创建 FileChannel 对象\n  FileChannel fc = fis.getChannel();\n  // FileChannel.map() 将文件映射到直接内存并返回 MappedByteBuffer 对象\n  MappedByteBuffer mmb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\n  xmlFileBuffer = new byte[(int)fc.size()];\n  mmb.get(xmlFileBuffer);\n  fis.close();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213695-d7yimi0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213695-d7yimi0","updated":"20240201213695"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213696-sb79kz6","Type":"NodeParagraph","Properties":{"id":"20240201213696-sb79kz6","updated":"20240201213696"},"Children":[{"Type":"NodeText","Data":"这篇文章我们主要介绍了 NIO 的核心知识点，包括 NIO 的核心组件和零拷贝。"}]},{"ID":"20240201213697-awpj649","Type":"NodeParagraph","Properties":{"id":"20240201213697-awpj649","updated":"20240201213697"},"Children":[{"Type":"NodeText","Data":"如果我们需要使用 NIO 构建网络程序的话，不建议直接使用原生 NIO，编程复杂且功能性太弱，推荐使用一些成熟的基于 NIO 的网络编程框架比如 Netty。Netty 在 NIO 的基础上进行了一些优化和扩展比如支持多种协议、支持 SSL/TLS 等等。"}]},{"ID":"20240201213698-mwn5q1w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213698-mwn5q1w","updated":"20240201213698"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213699-ct30ga6","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213699-ct30ga6","updated":"20240201213699"},"Children":[{"ID":"20240201213700-132876n","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-132876n","updated":"20240201213700"},"Children":[{"ID":"20240201213701-zrwxi3f","Type":"NodeParagraph","Properties":{"id":"20240201213701-zrwxi3f","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"Java NIO 浅析："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2016/11/04/nio.html","TextMarkTextContent":"https://tech.meituan.com/2016/11/04/nio.html"}]}]},{"ID":"20240201213702-k9qlz0a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213702-k9qlz0a","updated":"20240201213702"},"Children":[{"ID":"20240201213703-e6bagpn","Type":"NodeParagraph","Properties":{"id":"20240201213703-e6bagpn","updated":"20240201213703"},"Children":[{"Type":"NodeText","Data":"面试官：Java NIO 了解？"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/mZobf-U8OSYQfHfYBEB6KA","TextMarkTextContent":"https://mp.weixin.qq.com/s/mZobf-U8OSYQfHfYBEB6KA"}]}]},{"ID":"20240201213704-e4w5rdd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-e4w5rdd","updated":"20240201213704"},"Children":[{"ID":"20240201213705-ottv5cd","Type":"NodeParagraph","Properties":{"id":"20240201213705-ottv5cd","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"Java NIO：Buffer、Channel 和 Selector："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.javadoop.com/post/java-nio","TextMarkTextContent":"https://www.javadoop.com/post/java-nio"}]}]}]},{"ID":"20240201213706-y95ffgx","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213706-y95ffgx","updated":"20240201213706"}}]}