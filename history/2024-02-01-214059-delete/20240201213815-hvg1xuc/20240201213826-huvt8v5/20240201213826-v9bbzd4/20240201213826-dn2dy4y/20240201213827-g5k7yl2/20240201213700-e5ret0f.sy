{"ID":"20240201213700-e5ret0f","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213700-e5ret0f","title":"io-design-patterns","updated":"20240201213700"},"Children":[{"ID":"20240201213701-jr65uer","Type":"NodeThematicBreak","Properties":{"id":"20240201213701-jr65uer","updated":"20240201213701"}},{"ID":"20240201213702-1ziyaij","Type":"NodeParagraph","Properties":{"id":"20240201213702-1ziyaij","updated":"20240201213702"},"Children":[{"Type":"NodeText","Data":"title: Java IO 设计模式总结"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"category: Java"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tag:"}]},{"ID":"20240201213703-q77rt83","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213703-q77rt83","updated":"20240201213703"},"Children":[{"ID":"20240201213704-zdk6jos","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213704-zdk6jos","updated":"20240201213704"},"Children":[{"ID":"20240201213705-vfz008m","Type":"NodeParagraph","Properties":{"id":"20240201213705-vfz008m","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"Java IO"}]}]},{"ID":"20240201213706-1oky5ps","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213706-1oky5ps","updated":"20240201213706"},"Children":[{"ID":"20240201213707-duw9pjv","Type":"NodeParagraph","Properties":{"id":"20240201213707-duw9pjv","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"Java基础"}]}]}]},{"ID":"20240201213708-7y4qkfb","Type":"NodeThematicBreak","Properties":{"id":"20240201213708-7y4qkfb","updated":"20240201213708"}},{"ID":"20240201213709-py8hze4","Type":"NodeParagraph","Properties":{"id":"20240201213709-py8hze4","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"这篇文章我们简单来看看我们从 IO 中能够学习到哪些设计模式的应用。"}]},{"ID":"20240201213710-mj6ghbq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213710-mj6ghbq","updated":"20240201213710"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"装饰器模式"}]},{"ID":"20240201213711-1v5cqy4","Type":"NodeParagraph","Properties":{"id":"20240201213711-1v5cqy4","updated":"20240201213711"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"装饰器（Decorator）模式"},{"Type":"NodeText","Data":" 可以在不改变原有对象的情况下拓展其功能。"}]},{"ID":"20240201213712-n1yjh7k","Type":"NodeParagraph","Properties":{"id":"20240201213712-n1yjh7k","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。"}]},{"ID":"20240201213713-nvbiaem","Type":"NodeParagraph","Properties":{"id":"20240201213713-nvbiaem","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"对于字节流来说， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FilterInputStream"},{"Type":"NodeText","Data":" （对应输入流）和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FilterOutputStream"},{"Type":"NodeText","Data":"（对应输出流）是装饰器模式的核心，分别用于增强 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":"子类对象的功能。"}]},{"ID":"20240201213714-g2dz9xd","Type":"NodeParagraph","Properties":{"id":"20240201213714-g2dz9xd","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"我们常见的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":"(字节缓冲输入流)、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DataInputStream"},{"Type":"NodeText","Data":" 等等都是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FilterInputStream"},{"Type":"NodeText","Data":" 的子类，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedOutputStream"},{"Type":"NodeText","Data":"（字节缓冲输出流）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DataOutputStream"},{"Type":"NodeText","Data":"等等都是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FilterOutputStream"},{"Type":"NodeText","Data":"的子类。"}]},{"ID":"20240201213715-nyk5jdb","Type":"NodeParagraph","Properties":{"id":"20240201213715-nyk5jdb","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"举个例子，我们可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":"（字节缓冲输入流）来增强 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileInputStream"},{"Type":"NodeText","Data":" 的功能。"}]},{"ID":"20240201213716-c0av1wi","Type":"NodeParagraph","Properties":{"id":"20240201213716-c0av1wi","updated":"20240201213716"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":" 构造函数如下："}]},{"ID":"20240201213717-k648gdn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213717-k648gdn","updated":"20240201213717"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public BufferedInputStream(InputStream in) {\n    this(in, DEFAULT_BUFFER_SIZE);\n}\n\npublic BufferedInputStream(InputStream in, int size) {\n    super(in);\n    if (size \u003c= 0) {\n        throw new IllegalArgumentException(\"Buffer size \u003c= 0\");\n    }\n    buf = new byte[size];\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213718-6map8ev","Type":"NodeParagraph","Properties":{"id":"20240201213718-6map8ev","updated":"20240201213718"},"Children":[{"Type":"NodeText","Data":"可以看出，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":" 的构造函数其中的一个参数就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213719-vbexe86","Type":"NodeParagraph","Properties":{"id":"20240201213719-vbexe86","updated":"20240201213719"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":" 代码示例："}]},{"ID":"20240201213720-mwl6prg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213720-mwl6prg","updated":"20240201213720"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"input.txt\"))) {\n    int content;\n    long skip = bis.skip(2);\n    while ((content = bis.read()) != -1) {\n        System.out.print((char) content);\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213721-jig4j4q","Type":"NodeParagraph","Properties":{"id":"20240201213721-jig4j4q","updated":"20240201213721"},"Children":[{"Type":"NodeText","Data":"这个时候，你可以会想了："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为啥我们直接不弄一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"BufferedFileInputStream"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（字符缓冲文件输入流）呢？"}]},{"ID":"20240201213722-l0rgr3v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213722-l0rgr3v","updated":"20240201213722"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"BufferedFileInputStream bfis = new BufferedFileInputStream(\"input.txt\");\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213723-uh39fe4","Type":"NodeParagraph","Properties":{"id":"20240201213723-uh39fe4","updated":"20240201213723"},"Children":[{"Type":"NodeText","Data":"如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":"的子类比较少的话，这样做是没问题的。不过， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":"的子类实在太多，继承关系也太复杂了。如果我们为每一个子类都定制一个对应的缓冲输入流，那岂不是太麻烦了。"}]},{"ID":"20240201213724-09bcj7s","Type":"NodeParagraph","Properties":{"id":"20240201213724-09bcj7s","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"如果你对 IO 流比较熟悉的话，你会发现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZipInputStream"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZipOutputStream"},{"Type":"NodeText","Data":" 还可以分别增强 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedInputStream"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedOutputStream"},{"Type":"NodeText","Data":" 的能力。"}]},{"ID":"20240201213725-t2oyecc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213725-t2oyecc","updated":"20240201213725"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fileName));\nZipInputStream zis = new ZipInputStream(bis);\n\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileName));\nZipOutputStream zipOut = new ZipOutputStream(bos);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213726-vggnps4","Type":"NodeParagraph","Properties":{"id":"20240201213726-vggnps4","updated":"20240201213726"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZipInputStream"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZipOutputStream"},{"Type":"NodeText","Data":" 分别继承自"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InflaterInputStream"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DeflaterOutputStream"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213727-okp2qzm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213727-okp2qzm","updated":"20240201213727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public\nclass InflaterInputStream extends FilterInputStream {\n}\n\npublic\nclass DeflaterOutputStream extends FilterOutputStream {\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213728-lti6yqw","Type":"NodeParagraph","Properties":{"id":"20240201213728-lti6yqw","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"这也是装饰器模式很重要的一个特征，那就是可以对原始类嵌套使用多个装饰器。"}]},{"ID":"20240201213729-t595yb6","Type":"NodeParagraph","Properties":{"id":"20240201213729-t595yb6","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"为了实现这一效果，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。上面介绍到的这些 IO 相关的装饰类和原始类共同的父类是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213730-9jxyvry","Type":"NodeParagraph","Properties":{"id":"20240201213730-9jxyvry","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"对于字符流来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedReader"},{"Type":"NodeText","Data":" 可以用来增加 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Reader"},{"Type":"NodeText","Data":" （字符输入流）子类的功能，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BufferedWriter"},{"Type":"NodeText","Data":" 可以用来增加 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Writer"},{"Type":"NodeText","Data":" （字符输出流）子类的功能。"}]},{"ID":"20240201213731-58u9irq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213731-58u9irq","updated":"20240201213731"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName), \"UTF-8\"));\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213732-smb2jd9","Type":"NodeParagraph","Properties":{"id":"20240201213732-smb2jd9","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"IO 流中的装饰器模式应用的例子实在是太多了，不需要特意记忆，完全没必要哈！搞清了装饰器模式的核心之后，你在使用的时候自然就会知道哪些地方运用到了装饰器模式。"}]},{"ID":"20240201213733-ugmqd8h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213733-ugmqd8h","updated":"20240201213733"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"适配器模式"}]},{"ID":"20240201213734-b7otks1","Type":"NodeParagraph","Properties":{"id":"20240201213734-b7otks1","updated":"20240201213734"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器（Adapter Pattern）模式"},{"Type":"NodeText","Data":" 主要用于接口互不兼容的类的协调工作，你可以将其联想到我们日常经常使用的电源适配器。"}]},{"ID":"20240201213735-og1pmcz","Type":"NodeParagraph","Properties":{"id":"20240201213735-og1pmcz","updated":"20240201213735"},"Children":[{"Type":"NodeText","Data":"适配器模式中存在被适配的对象或者类称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配者(Adaptee)"},{"Type":"NodeText","Data":" ，作用于适配者的对象或者类称为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器(Adapter)"},{"Type":"NodeText","Data":" 。适配器分为对象适配器和类适配器。类适配器使用继承关系来实现，对象适配器使用组合关系来实现。"}]},{"ID":"20240201213736-q7lxhvi","Type":"NodeParagraph","Properties":{"id":"20240201213736-q7lxhvi","updated":"20240201213736"},"Children":[{"Type":"NodeText","Data":"IO 流中的字符流和字节流的接口不同，它们之间可以协调工作就是基于适配器模式来做的，更准确点来说是对象适配器。通过适配器，我们可以将字节流对象适配成一个字符流对象，这样我们可以直接通过字节流对象来读取或者写入字符数据。"}]},{"ID":"20240201213737-urjlw9x","Type":"NodeParagraph","Properties":{"id":"20240201213737-urjlw9x","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStreamReader"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStreamWriter"},{"Type":"NodeText","Data":" 就是两个适配器(Adapter)， 同时，它们两个也是字节流和字符流之间的桥梁。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStreamReader"},{"Type":"NodeText","Data":" 使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StreamDecoder"},{"Type":"NodeText","Data":" （流解码器）对字节进行解码，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实现字节流到字符流的转换，"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStreamWriter"},{"Type":"NodeText","Data":" 使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StreamEncoder"},{"Type":"NodeText","Data":"（流编码器）对字符进行编码，实现字符流到字节流的转换。"}]},{"ID":"20240201213738-00a1x7s","Type":"NodeParagraph","Properties":{"id":"20240201213738-00a1x7s","updated":"20240201213738"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":" 的子类是被适配者， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStreamReader"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStreamWriter"},{"Type":"NodeText","Data":"是适配器。"}]},{"ID":"20240201213739-muu42oi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213739-muu42oi","updated":"20240201213739"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// InputStreamReader 是适配器，FileInputStream 是被适配的类\nInputStreamReader isr = new InputStreamReader(new FileInputStream(fileName), \"UTF-8\");\n// BufferedReader 增强 InputStreamReader 的功能（装饰器模式）\nBufferedReader bufferedReader = new BufferedReader(isr);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213740-1p4m9be","Type":"NodeParagraph","Properties":{"id":"20240201213740-1p4m9be","updated":"20240201213740"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.io.InputStreamReader"},{"Type":"NodeText","Data":" 部分源码："}]},{"ID":"20240201213741-pe8ogv0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213741-pe8ogv0","updated":"20240201213741"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class InputStreamReader extends Reader {\n //用于解码的对象\n private final StreamDecoder sd;\n    public InputStreamReader(InputStream in) {\n        super(in);\n        try {\n            // 获取 StreamDecoder 对象\n            sd = StreamDecoder.forInputStreamReader(in, this, (String)null);\n        } catch (UnsupportedEncodingException e) {\n            throw new Error(e);\n        }\n    }\n    // 使用 StreamDecoder 对象做具体的读取工作\n public int read() throws IOException {\n        return sd.read();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213742-oeun12p","Type":"NodeParagraph","Properties":{"id":"20240201213742-oeun12p","updated":"20240201213742"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.io.OutputStreamWriter"},{"Type":"NodeText","Data":" 部分源码："}]},{"ID":"20240201213743-mmg03dg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213743-mmg03dg","updated":"20240201213743"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class OutputStreamWriter extends Writer {\n    // 用于编码的对象\n    private final StreamEncoder se;\n    public OutputStreamWriter(OutputStream out) {\n        super(out);\n        try {\n           // 获取 StreamEncoder 对象\n            se = StreamEncoder.forOutputStreamWriter(out, this, (String)null);\n        } catch (UnsupportedEncodingException e) {\n            throw new Error(e);\n        }\n    }\n    // 使用 StreamEncoder 对象做具体的写入工作\n    public void write(int c) throws IOException {\n        se.write(c);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213744-chvg4s4","Type":"NodeParagraph","Properties":{"id":"20240201213744-chvg4s4","updated":"20240201213744"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器模式和装饰器模式有什么区别呢？"}]},{"ID":"20240201213745-n1vvsbz","Type":"NodeParagraph","Properties":{"id":"20240201213745-n1vvsbz","updated":"20240201213745"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"装饰器模式"},{"Type":"NodeText","Data":" 更侧重于动态地增强原始类的功能，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。并且，装饰器模式支持对原始类嵌套使用多个装饰器。"}]},{"ID":"20240201213746-us58q4v","Type":"NodeParagraph","Properties":{"id":"20240201213746-us58q4v","updated":"20240201213746"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器模式"},{"Type":"NodeText","Data":" 更侧重于让接口不兼容而不能交互的类可以一起工作，当我们调用适配器对应的方法时，适配器内部会调用适配者类或者和适配类相关的类的方法，这个过程透明的。就比如说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StreamDecoder"},{"Type":"NodeText","Data":" （流解码器）和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StreamEncoder"},{"Type":"NodeText","Data":"（流编码器）就是分别基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OutputStream"},{"Type":"NodeText","Data":" 来获取 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":"对象并调用对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"read"},{"Type":"NodeText","Data":" 方法和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"write"},{"Type":"NodeText","Data":" 方法进行字节数据的读取和写入。"}]},{"ID":"20240201213747-838x9z8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213747-838x9z8","updated":"20240201213747"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"StreamDecoder(InputStream in, Object lock, CharsetDecoder dec) {\n    // 省略大部分代码\n    // 根据 InputStream 对象获取 FileChannel 对象\n    ch = getChannel((FileInputStream)in);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213748-oz3bg8j","Type":"NodeParagraph","Properties":{"id":"20240201213748-oz3bg8j","updated":"20240201213748"},"Children":[{"Type":"NodeText","Data":"适配器和适配者两者不需要继承相同的抽象类或者实现相同的接口。"}]},{"ID":"20240201213749-atig6br","Type":"NodeParagraph","Properties":{"id":"20240201213749-atig6br","updated":"20240201213749"},"Children":[{"Type":"NodeText","Data":"另外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":" 类使用了适配器模式，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":" 的内部类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RunnableAdapter"},{"Type":"NodeText","Data":" 实现属于适配器，用于将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Runnable"},{"Type":"NodeText","Data":" 适配成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213750-wvdhl4w","Type":"NodeParagraph","Properties":{"id":"20240201213750-wvdhl4w","updated":"20240201213750"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FutureTask"},{"Type":"NodeText","Data":"参数包含 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Runnable"},{"Type":"NodeText","Data":" 的一个构造方法："}]},{"ID":"20240201213751-a5sd586","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213751-a5sd586","updated":"20240201213751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public FutureTask(Runnable runnable, V result) {\n    // 调用 Executors 类的 callable 方法\n    this.callable = Executors.callable(runnable, result);\n    this.state = NEW;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213752-aztsqx7","Type":"NodeParagraph","Properties":{"id":"20240201213752-aztsqx7","updated":"20240201213752"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Executors"},{"Type":"NodeText","Data":"中对应的方法和适配器："}]},{"ID":"20240201213753-zmdgv5d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213753-zmdgv5d","updated":"20240201213753"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 实际调用的是 Executors 的内部类 RunnableAdapter 的构造方法\npublic static \u003cT\u003e Callable\u003cT\u003e callable(Runnable task, T result) {\n    if (task == null)\n        throw new NullPointerException();\n    return new RunnableAdapter\u003cT\u003e(task, result);\n}\n// 适配器\nstatic final class RunnableAdapter\u003cT\u003e implements Callable\u003cT\u003e {\n    final Runnable task;\n    final T result;\n    RunnableAdapter(Runnable task, T result) {\n        this.task = task;\n        this.result = result;\n    }\n    public T call() {\n        task.run();\n        return result;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213754-3qzg40r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213754-3qzg40r","updated":"20240201213754"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"工厂模式"}]},{"ID":"20240201213755-p02qz0c","Type":"NodeParagraph","Properties":{"id":"20240201213755-p02qz0c","updated":"20240201213755"},"Children":[{"Type":"NodeText","Data":"工厂模式用于创建对象，NIO 中大量用到了工厂模式，比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Files"},{"Type":"NodeText","Data":" 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"newInputStream"},{"Type":"NodeText","Data":" 方法用于创建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InputStream"},{"Type":"NodeText","Data":" 对象（静态工厂）、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Paths"},{"Type":"NodeText","Data":" 类的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get"},{"Type":"NodeText","Data":" 方法创建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Path"},{"Type":"NodeText","Data":" 对象（静态工厂）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZipFileSystem"},{"Type":"NodeText","Data":" 类（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sun.nio"},{"Type":"NodeText","Data":"包下的类，属于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java.nio"},{"Type":"NodeText","Data":" 相关的一些内部实现）的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getPath"},{"Type":"NodeText","Data":" 的方法创建 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Path"},{"Type":"NodeText","Data":" 对象（简单工厂）。"}]},{"ID":"20240201213756-t0pjdl5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213756-t0pjdl5","updated":"20240201213756"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"InputStream is = Files.newInputStream(Paths.get(generatorLogoPath))\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213757-iffjv2u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213757-iffjv2u","updated":"20240201213757"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"观察者模式"}]},{"ID":"20240201213758-r19jilt","Type":"NodeParagraph","Properties":{"id":"20240201213758-r19jilt","updated":"20240201213758"},"Children":[{"Type":"NodeText","Data":"NIO 中的文件目录监听服务使用到了观察者模式。"}]},{"ID":"20240201213759-a4efqa1","Type":"NodeParagraph","Properties":{"id":"20240201213759-a4efqa1","updated":"20240201213759"},"Children":[{"Type":"NodeText","Data":"NIO 中的文件目录监听服务基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchService"},{"Type":"NodeText","Data":" 接口和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watchable"},{"Type":"NodeText","Data":" 接口。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchService"},{"Type":"NodeText","Data":" 属于观察者，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watchable"},{"Type":"NodeText","Data":" 属于被观察者。"}]},{"ID":"20240201213760-lc3jd2l","Type":"NodeParagraph","Properties":{"id":"20240201213760-lc3jd2l","updated":"20240201213760"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Watchable"},{"Type":"NodeText","Data":" 接口定义了一个用于将对象注册到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchService"},{"Type":"NodeText","Data":"（监控服务） 并绑定监听事件的方法 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"register"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213761-cn7qkum","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213761-cn7qkum","updated":"20240201213761"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface Path\n    extends Comparable\u003cPath\u003e, Iterable\u003cPath\u003e, Watchable{\n}\n\npublic interface Watchable {\n    WatchKey register(WatchService watcher,\n                      WatchEvent.Kind\u003c?\u003e[] events,\n                      WatchEvent.Modifier... modifiers)\n        throws IOException;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213762-4g3klq2","Type":"NodeParagraph","Properties":{"id":"20240201213762-4g3klq2","updated":"20240201213762"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchService"},{"Type":"NodeText","Data":" 用于监听文件目录的变化，同一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchService"},{"Type":"NodeText","Data":" 对象能够监听多个文件目录。"}]},{"ID":"20240201213763-ha0vrxo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213763-ha0vrxo","updated":"20240201213763"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 创建 WatchService 对象\nWatchService watchService = FileSystems.getDefault().newWatchService();\n\n// 初始化一个被监控文件夹的 Path 类:\nPath path = Paths.get(\"workingDirectory\");\n// 将这个 path 对象注册到 WatchService（监控服务） 中去\nWatchKey watchKey = path.register(\nwatchService, StandardWatchEventKinds...);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213764-beoetbv","Type":"NodeParagraph","Properties":{"id":"20240201213764-beoetbv","updated":"20240201213764"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Path"},{"Type":"NodeText","Data":" 类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"register"},{"Type":"NodeText","Data":" 方法的第二个参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"events"},{"Type":"NodeText","Data":" （需要监听的事件）为可变长参数，也就是说我们可以同时监听多种事件。"}]},{"ID":"20240201213765-midchd9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213765-midchd9","updated":"20240201213765"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"WatchKey register(WatchService watcher,\n                  WatchEvent.Kind\u003c?\u003e... events)\n    throws IOException;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213766-tot2jtg","Type":"NodeParagraph","Properties":{"id":"20240201213766-tot2jtg","updated":"20240201213766"},"Children":[{"Type":"NodeText","Data":"常用的监听事件有 3 种："}]},{"ID":"20240201213767-i61v1yj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213767-i61v1yj","updated":"20240201213767"},"Children":[{"ID":"20240201213768-wl7dncl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213768-wl7dncl","updated":"20240201213768"},"Children":[{"ID":"20240201213769-yy4vhx1","Type":"NodeParagraph","Properties":{"id":"20240201213769-yy4vhx1","updated":"20240201213769"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StandardWatchEventKinds.ENTRY_CREATE"},{"Type":"NodeText","Data":"：文件创建。"}]}]},{"ID":"20240201213770-ey7clh1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213770-ey7clh1","updated":"20240201213770"},"Children":[{"ID":"20240201213771-glera2k","Type":"NodeParagraph","Properties":{"id":"20240201213771-glera2k","updated":"20240201213771"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StandardWatchEventKinds.ENTRY_DELETE"},{"Type":"NodeText","Data":" : 文件删除。"}]}]},{"ID":"20240201213772-q3f13wr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213772-q3f13wr","updated":"20240201213772"},"Children":[{"ID":"20240201213773-jbucrxq","Type":"NodeParagraph","Properties":{"id":"20240201213773-jbucrxq","updated":"20240201213773"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"StandardWatchEventKinds.ENTRY_MODIFY"},{"Type":"NodeText","Data":" : 文件修改。"}]}]}]},{"ID":"20240201213774-rakttiy","Type":"NodeParagraph","Properties":{"id":"20240201213774-rakttiy","updated":"20240201213774"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"register"},{"Type":"NodeText","Data":" 方法返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchKey"},{"Type":"NodeText","Data":" 对象，通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchKey"},{"Type":"NodeText","Data":" 对象可以获取事件的具体信息比如文件目录下是创建、删除还是修改了文件、创建、删除或者修改的文件的具体名称是什么。"}]},{"ID":"20240201213775-4rt3grz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213775-4rt3grz","updated":"20240201213775"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"WatchKey key;\nwhile ((key = watchService.take()) != null) {\n    for (WatchEvent\u003c?\u003e event : key.pollEvents()) {\n      // 可以调用 WatchEvent 对象的方法做一些事情比如输出事件的具体上下文信息\n    }\n    key.reset();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213776-8dd4e29","Type":"NodeParagraph","Properties":{"id":"20240201213776-8dd4e29","updated":"20240201213776"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WatchService"},{"Type":"NodeText","Data":" 内部是通过一个 daemon thread（守护线程）采用定期轮询的方式来检测文件的变化，简化后的源码如下所示。"}]},{"ID":"20240201213777-vge1fwb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213777-vge1fwb","updated":"20240201213777"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class PollingWatchService\n    extends AbstractWatchService\n{\n    // 定义一个 daemon thread（守护线程）轮询检测文件变化\n    private final ScheduledExecutorService scheduledExecutor;\n\n    PollingWatchService() {\n        scheduledExecutor = Executors\n            .newSingleThreadScheduledExecutor(new ThreadFactory() {\n                 @Override\n                 public Thread newThread(Runnable r) {\n                     Thread t = new Thread(r);\n                     t.setDaemon(true);\n                     return t;\n                 }});\n    }\n\n  void enable(Set\u003c? extends WatchEvent.Kind\u003c?\u003e\u003e events, long period) {\n    synchronized (this) {\n      // 更新监听事件\n      this.events = events;\n\n        // 开启定期轮询\n      Runnable thunk = new Runnable() { public void run() { poll(); }};\n      this.poller = scheduledExecutor\n        .scheduleAtFixedRate(thunk, period, period, TimeUnit.SECONDS);\n    }\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213778-v16t569","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213778-v16t569","updated":"20240201213778"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"参考"}]},{"ID":"20240201213779-mwad042","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213779-mwad042","updated":"20240201213779"},"Children":[{"ID":"20240201213780-qim6vv7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213780-qim6vv7","updated":"20240201213780"},"Children":[{"ID":"20240201213781-88unrme","Type":"NodeParagraph","Properties":{"id":"20240201213781-88unrme","updated":"20240201213781"},"Children":[{"Type":"NodeText","Data":"Patterns in Java APIs："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://cecs.wright.edu/~tkprasad/courses/ceg860/paper/node26.html","TextMarkTextContent":"http://cecs.wright.edu/~tkprasad/courses/ceg860/paper/node26.html"}]}]},{"ID":"20240201213782-wrxy9mp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213782-wrxy9mp","updated":"20240201213782"},"Children":[{"ID":"20240201213783-fb7t38p","Type":"NodeParagraph","Properties":{"id":"20240201213783-fb7t38p","updated":"20240201213783"},"Children":[{"Type":"NodeText","Data":"装饰器模式：通过剖析 Java IO 类库源码学习装饰器模式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/column/article/204845","TextMarkTextContent":"https://time.geekbang.org/column/article/204845"}]}]},{"ID":"20240201213784-mnciyk5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213784-mnciyk5","updated":"20240201213784"},"Children":[{"ID":"20240201213785-nxya923","Type":"NodeParagraph","Properties":{"id":"20240201213785-nxya923","updated":"20240201213785"},"Children":[{"Type":"NodeText","Data":"sun.nio 包是什么，是 java 代码么？ - RednaxelaFX "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.zhihu.com/question/29237781/answer/43653953","TextMarkTextContent":"https://www.zhihu.com/question/29237781/answer/43653953"}]}]}]},{"ID":"20240201213786-2ddgtj4","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003c!-- @include: @article-footer.snippet.md --\u003e\n\u003c/div\u003e","HtmlBlockType":2,"Properties":{"id":"20240201213786-2ddgtj4","updated":"20240201213786"}}]}