{"ID":"20240102185042-kjkq3du","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240102185042-kjkq3du","title":"设计模式总结","updated":"20240102185110"},"Children":[{"ID":"20240102185055-yj1j0tb","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240102185055-yj1j0tb","updated":"20240102185110"},"Children":[{"Type":"NodeText","Data":"创造型模式"}]},{"ID":"20240102185117-q3o6oju","Type":"NodeParagraph","Properties":{"id":"20240102185117-q3o6oju","updated":"20240102185117"},"Children":[{"Type":"NodeText","Data":"工厂方法模式、抽象工厂模式和单例模式都属于设计模式中的创造型模式，这些模式的主要目的是处理对象的创建和组合，以便更灵活、可维护、可扩展的系统设计。让我们逐个解释为什么它们被归类为创造型模式："}]},{"ID":"20240102185117-r60zgyt","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240102185117-r60zgyt","updated":"20240102185117"},"Children":[{"ID":"20240102185117-no480t3","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240102185117-no480t3","updated":"20240102185117"},"Children":[{"ID":"20240102185117-s9rm8kr","Type":"NodeParagraph","Properties":{"id":"20240102185117-s9rm8kr","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工厂方法模式（Factory Method Pattern）："}]},{"ID":"20240102185117-z3okgpe","Type":"NodeList","ListData":{},"Properties":{"id":"20240102185117-z3okgpe","updated":"20240102185117"},"Children":[{"ID":"20240102185117-dl09acu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102185117-dl09acu","updated":"20240102185117"},"Children":[{"ID":"20240102185117-r4n1mhp","Type":"NodeParagraph","Properties":{"id":"20240102185117-r4n1mhp","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目的："},{"Type":"NodeText","Data":" 定义一个接口用于创建对象，但将具体的实例化推迟到子类中。这样，客户端代码在不必指定所需对象具体类的情况下，就可以使用这些对象。"}]}]},{"ID":"20240102185117-u03kwtm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102185117-u03kwtm","updated":"20240102185117"},"Children":[{"ID":"20240102185117-c4kobnz","Type":"NodeParagraph","Properties":{"id":"20240102185117-c4kobnz","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创造性贡献："},{"Type":"NodeText","Data":" 将对象的实例化过程延迟到子类，使得系统更容易扩展，客户端代码更加灵活，可以通过增加新的工厂类来创建新的对象。"}]}]}]}]},{"ID":"20240102185117-el69lsq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240102185117-el69lsq","updated":"20240102185117"},"Children":[{"ID":"20240102185117-lfdj74j","Type":"NodeParagraph","Properties":{"id":"20240102185117-lfdj74j","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"抽象工厂模式（Abstract Factory Pattern）："}]},{"ID":"20240102185117-svc0med","Type":"NodeList","ListData":{},"Properties":{"id":"20240102185117-svc0med","updated":"20240102185117"},"Children":[{"ID":"20240102185117-eiwq9n4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102185117-eiwq9n4","updated":"20240102185117"},"Children":[{"ID":"20240102185117-lfnjx8i","Type":"NodeParagraph","Properties":{"id":"20240102185117-lfnjx8i","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目的："},{"Type":"NodeText","Data":" 提供一个接口，用于创建一系列相关或依赖对象的家族，而无需指定它们的具体类。"}]}]},{"ID":"20240102185117-bf3hb3n","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102185117-bf3hb3n","updated":"20240102185117"},"Children":[{"ID":"20240102185117-uw69fol","Type":"NodeParagraph","Properties":{"id":"20240102185117-uw69fol","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创造性贡献："},{"Type":"NodeText","Data":" 将一组相关的产品的创建集中在一个工厂中，使得系统更容易进行产品族的替换，同时保持一致性。客户端无需关心具体的工厂和产品类，只需要使用抽象接口即可。"}]}]}]}]},{"ID":"20240102185117-l87m5x1","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240102185117-l87m5x1","updated":"20240102185117"},"Children":[{"ID":"20240102185117-3nvuc7i","Type":"NodeParagraph","Properties":{"id":"20240102185117-3nvuc7i","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单例模式（Singleton Pattern）："}]},{"ID":"20240102185117-uc1jlk4","Type":"NodeList","ListData":{},"Properties":{"id":"20240102185117-uc1jlk4","updated":"20240102185117"},"Children":[{"ID":"20240102185117-jnvgcvd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102185117-jnvgcvd","updated":"20240102185117"},"Children":[{"ID":"20240102185117-0sheges","Type":"NodeParagraph","Properties":{"id":"20240102185117-0sheges","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目的："},{"Type":"NodeText","Data":" 确保一个类只有一个实例，并提供一个全局访问点。"}]}]},{"ID":"20240102185117-kuquwhf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102185117-kuquwhf","updated":"20240102185117"},"Children":[{"ID":"20240102185117-3bz4osi","Type":"NodeParagraph","Properties":{"id":"20240102185117-3bz4osi","updated":"20240102185117"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创造性贡献："},{"Type":"NodeText","Data":" 通过限制一个类的实例数量，单例模式可以确保系统中特定功能的唯一实例。这对于需要共享资源的场景非常有用，例如配置管理、日志记录等。单例模式提供了一个全局访问点，使得整个系统中可以方便地访问单一实例。"}]}]}]}]}]},{"ID":"20240102185119-225wuks","Type":"NodeParagraph","Properties":{"id":"20240102185119-225wuks"}}]}