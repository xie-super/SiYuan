{"ID":"20240201213642-87324wz","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213642-87324wz","title":"c-2操作系统","updated":"20240201213642"},"Children":[{"ID":"20240201213643-1q3mdcr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213643-1q3mdcr","updated":"20240201213643"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.2 操作系统"}]},{"ID":"20240201213644-l6xfi01","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213644-l6xfi01","updated":"20240201213644"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"操作系统基础"}]},{"ID":"20240201213645-yf2g9aj","Type":"NodeParagraph","Properties":{"id":"20240201213645-yf2g9aj","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"面试官顶着蓬松的假发向我走来，只见他一手拿着厚重的 Thinkpad ，一手提着他那淡黄的长裙。"}]},{"ID":"20240201213646-6219dg5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213646-6219dg5","updated":"20240201213646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是操作系统？"}]},{"ID":"20240201213647-oaki54x","Type":"NodeParagraph","Properties":{"id":"20240201213647-oaki54x","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ： 先来个简单问题吧！"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是操作系统？"}]},{"ID":"20240201213648-semmz8j","Type":"NodeParagraph","Properties":{"id":"20240201213648-semmz8j","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：我通过以下四点向您介绍一下什么是操作系统吧！"}]},{"ID":"20240201213649-d44qd60","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213649-d44qd60","updated":"20240201213649"},"Children":[{"ID":"20240201213650-vegxpm2","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213650-vegxpm2","updated":"20240201213650"},"Children":[{"ID":"20240201213651-mgcjx6a","Type":"NodeParagraph","Properties":{"id":"20240201213651-mgcjx6a","updated":"20240201213651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机的基石。"}]}]},{"ID":"20240201213652-l802cyh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213652-l802cyh","updated":"20240201213652"},"Children":[{"ID":"20240201213653-3qjdj81","Type":"NodeParagraph","Properties":{"id":"20240201213653-3qjdj81","updated":"20240201213653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统本质上是一个运行在计算机上的软件程序 ，用于管理计算机硬件和软件资源。"},{"Type":"NodeText","Data":" 举例：运行在你电脑上的所有应用程序都通过操作系统来调用系统内存以及磁盘等等硬件。"}]}]},{"ID":"20240201213654-vhxotdd","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213654-vhxotdd","updated":"20240201213654"},"Children":[{"ID":"20240201213655-qogby1k","Type":"NodeParagraph","Properties":{"id":"20240201213655-qogby1k","updated":"20240201213655"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统存在屏蔽了硬件层的复杂性。"},{"Type":"NodeText","Data":" 操作系统就像是硬件使用的负责人，统筹着各种相关事项。"}]}]},{"ID":"20240201213656-6ar04ic","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213656-6ar04ic","updated":"20240201213656"},"Children":[{"ID":"20240201213657-3u46c7e","Type":"NodeParagraph","Properties":{"id":"20240201213657-3u46c7e","updated":"20240201213657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理"},{"Type":"NodeText","Data":"。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。"}]}]}]},{"ID":"20240201213658-ynohoru","Type":"NodeParagraph","Properties":{"id":"20240201213658-ynohoru","updated":"20240201213658"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Kernel_Layout","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-8/Kernel_Layout.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213659-gbnsxt7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213659-gbnsxt7","updated":"20240201213659"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"系统调用"}]},{"ID":"20240201213660-xpuubm2","Type":"NodeParagraph","Properties":{"id":"20240201213660-xpuubm2","updated":"20240201213660"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是系统调用呢？"},{"Type":"NodeText","Data":" 能不能详细介绍一下。"}]},{"ID":"20240201213661-70wt4ys","Type":"NodeParagraph","Properties":{"id":"20240201213661-70wt4ys","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：介绍系统调用之前，我们先来了解一下用户态和系统态。"}]},{"ID":"20240201213662-tx1o1hj","Type":"NodeParagraph","Properties":{"id":"20240201213662-tx1o1hj","updated":"20240201213662"},"Children":[{"Type":"NodeText","Data":"根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别："}]},{"ID":"20240201213663-y5sgsz1","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213663-y5sgsz1","updated":"20240201213663"},"Children":[{"ID":"20240201213664-rj9yf5c","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213664-rj9yf5c","updated":"20240201213664"},"Children":[{"ID":"20240201213665-3stxbu5","Type":"NodeParagraph","Properties":{"id":"20240201213665-3stxbu5","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"用户态(user mode) : 用户态运行的进程可以直接读取用户程序的数据。"}]}]},{"ID":"20240201213666-hx5m50x","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213666-hx5m50x","updated":"20240201213666"},"Children":[{"ID":"20240201213667-i6zq712","Type":"NodeParagraph","Properties":{"id":"20240201213667-i6zq712","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"系统态(kernel mode):可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。"}]}]}]},{"ID":"20240201213668-y9fpqow","Type":"NodeParagraph","Properties":{"id":"20240201213668-y9fpqow","updated":"20240201213668"},"Children":[{"Type":"NodeText","Data":"说了用户态和系统态之后，那么什么是系统调用呢？"}]},{"ID":"20240201213669-r6wv8km","Type":"NodeParagraph","Properties":{"id":"20240201213669-r6wv8km","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的系统态级别的子功能咋办呢？那就需要系统调用了！"}]},{"ID":"20240201213670-qo8i5gq","Type":"NodeParagraph","Properties":{"id":"20240201213670-qo8i5gq","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。"}]},{"ID":"20240201213671-uy5nre2","Type":"NodeParagraph","Properties":{"id":"20240201213671-uy5nre2","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"这些系统调用按功能大致可分为如下几类："}]},{"ID":"20240201213672-8a6hwu2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213672-8a6hwu2","updated":"20240201213672"},"Children":[{"ID":"20240201213673-s146w0c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213673-s146w0c","updated":"20240201213673"},"Children":[{"ID":"20240201213674-jjsoxi6","Type":"NodeParagraph","Properties":{"id":"20240201213674-jjsoxi6","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"设备管理。完成设备的请求或释放，以及设备启动等功能。"}]}]},{"ID":"20240201213675-nklqiuj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213675-nklqiuj","updated":"20240201213675"},"Children":[{"ID":"20240201213676-und7xgc","Type":"NodeParagraph","Properties":{"id":"20240201213676-und7xgc","updated":"20240201213676"},"Children":[{"Type":"NodeText","Data":"文件管理。完成文件的读、写、创建及删除等功能。"}]}]},{"ID":"20240201213677-4vko3em","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213677-4vko3em","updated":"20240201213677"},"Children":[{"ID":"20240201213678-vq0jh77","Type":"NodeParagraph","Properties":{"id":"20240201213678-vq0jh77","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"进程控制。完成进程的创建、撤销、阻塞及唤醒等功能。"}]}]},{"ID":"20240201213679-7mygs99","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213679-7mygs99","updated":"20240201213679"},"Children":[{"ID":"20240201213680-srwkqzu","Type":"NodeParagraph","Properties":{"id":"20240201213680-srwkqzu","updated":"20240201213680"},"Children":[{"Type":"NodeText","Data":"进程通信。完成进程之间的消息传递或信号传递等功能。"}]}]},{"ID":"20240201213681-0n0e612","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213681-0n0e612","updated":"20240201213681"},"Children":[{"ID":"20240201213682-wqbczsp","Type":"NodeParagraph","Properties":{"id":"20240201213682-wqbczsp","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"内存管理。完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。"}]}]}]},{"ID":"20240201213683-3cgv76a","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213683-3cgv76a","updated":"20240201213683"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程和线程"}]},{"ID":"20240201213684-9ql9xgb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213684-9ql9xgb","updated":"20240201213684"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程和线程的区别"}]},{"ID":"20240201213685-h2g4u7p","Type":"NodeParagraph","Properties":{"id":"20240201213685-h2g4u7p","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":": 好的！我明白了！那你再说一下： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程和线程的区别"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213686-ducvyna","Type":"NodeParagraph","Properties":{"id":"20240201213686-ducvyna","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我："},{"Type":"NodeText","Data":" 好的！ 下图是 Java 内存区域，我们从 JVM 的角度来说一下线程和进程之间的关系吧！"}]},{"ID":"20240201213687-piy8osi","Type":"NodeParagraph","Properties":{"id":"20240201213687-piy8osi","updated":"20240201213687"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Java 运行时数据区域（JDK1.8 之后）","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213688-xift3hy","Type":"NodeParagraph","Properties":{"id":"20240201213688-xift3hy","updated":"20240201213688"},"Children":[{"Type":"NodeText","Data":"从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"堆"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法区 (JDK1.8 之后的元空间)"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"资源，但是每个线程有自己的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"程序计数器"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟机栈"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"本地方法栈"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213689-rk677uj","Type":"NodeParagraph","Properties":{"id":"20240201213689-rk677uj","updated":"20240201213689"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"总结："},{"Type":"NodeText","Data":" 线程是进程划分成的更小的运行单位,一个进程在其执行的过程中可以产生多个线程。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。"}]},{"ID":"20240201213690-0vcp1c6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213690-0vcp1c6","updated":"20240201213690"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程有哪几种状态?"}]},{"ID":"20240201213691-cqei38j","Type":"NodeParagraph","Properties":{"id":"20240201213691-cqei38j","updated":"20240201213691"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ： 那你再说说"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程有哪几种状态?"}]},{"ID":"20240201213692-57jzam2","Type":"NodeParagraph","Properties":{"id":"20240201213692-57jzam2","updated":"20240201213692"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：我们一般把进程大致分为 5 种状态，这一点和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Multithread/JavaConcurrencyBasicsCommonInterviewQuestionsSummary.md#6-%E8%AF%B4%E8%AF%B4%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81","TextMarkTextContent":"线程"},{"Type":"NodeText","Data":"很像！"}]},{"ID":"20240201213693-7swmwyw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213693-7swmwyw","updated":"20240201213693"},"Children":[{"ID":"20240201213694-56u2iti","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-56u2iti","updated":"20240201213694"},"Children":[{"ID":"20240201213695-kewf2lf","Type":"NodeParagraph","Properties":{"id":"20240201213695-kewf2lf","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建状态(new)"},{"Type":"NodeText","Data":" ：进程正在被创建，尚未到就绪状态。"}]}]},{"ID":"20240201213696-hka4aeq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-hka4aeq","updated":"20240201213696"},"Children":[{"ID":"20240201213697-6myrkhg","Type":"NodeParagraph","Properties":{"id":"20240201213697-6myrkhg","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"就绪状态(ready)"},{"Type":"NodeText","Data":" ：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。"}]}]},{"ID":"20240201213698-0l2lj2u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-0l2lj2u","updated":"20240201213698"},"Children":[{"ID":"20240201213699-dt6nzug","Type":"NodeParagraph","Properties":{"id":"20240201213699-dt6nzug","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"运行状态(running)"},{"Type":"NodeText","Data":" ：进程正在处理器上上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。"}]}]},{"ID":"20240201213700-c3qag82","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213700-c3qag82","updated":"20240201213700"},"Children":[{"ID":"20240201213701-dbqwp5r","Type":"NodeParagraph","Properties":{"id":"20240201213701-dbqwp5r","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"阻塞状态(waiting)"},{"Type":"NodeText","Data":" ：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。"}]}]},{"ID":"20240201213702-mls430i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213702-mls430i","updated":"20240201213702"},"Children":[{"ID":"20240201213703-041r0fl","Type":"NodeParagraph","Properties":{"id":"20240201213703-041r0fl","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"结束状态(terminated)"},{"Type":"NodeText","Data":" ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。"}]}]}]},{"ID":"20240201213704-fn3lc3d","Type":"NodeBlockquote","Properties":{"id":"20240201213704-fn3lc3d","updated":"20240201213704"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213705-y5mpz6r","Type":"NodeParagraph","Properties":{"id":"20240201213705-y5mpz6r","updated":"20240201213705"},"Children":[{"Type":"NodeText","Data":"订正：下图中 running 状态被 interrupt 向 ready 状态转换的箭头方向反了。"}]}]},{"ID":"20240201213706-a2am6gs","Type":"NodeParagraph","Properties":{"id":"20240201213706-a2am6gs","updated":"20240201213706"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"process-state","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-11/d38202593012b457debbcd74994c6292.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213707-hbeq6o6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213707-hbeq6o6","updated":"20240201213707"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程间的通信方式"}]},{"ID":"20240201213708-c9i15bt","Type":"NodeParagraph","Properties":{"id":"20240201213708-c9i15bt","updated":"20240201213708"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程间的通信常见的的有哪几种方式呢?"}]},{"ID":"20240201213709-k5pc1u8","Type":"NodeParagraph","Properties":{"id":"20240201213709-k5pc1u8","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：大概有 7 种常见的进程间的通信方式。"}]},{"ID":"20240201213710-ayvbi66","Type":"NodeBlockquote","Properties":{"id":"20240201213710-ayvbi66","updated":"20240201213710"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213711-ya57j25","Type":"NodeParagraph","Properties":{"id":"20240201213711-ya57j25","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"下面这部分总结参考了:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.jianshu.com/p/c1015f5ffa74","TextMarkTextContent":"《进程间通信 IPC (InterProcess Communication)》"},{"Type":"NodeText","Data":" 这篇文章，推荐阅读，总结的非常不错。"}]}]},{"ID":"20240201213712-nbr0o72","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213712-nbr0o72","updated":"20240201213712"},"Children":[{"ID":"20240201213713-syt5quh","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213713-syt5quh","updated":"20240201213713"},"Children":[{"ID":"20240201213714-qihyy2r","Type":"NodeParagraph","Properties":{"id":"20240201213714-qihyy2r","updated":"20240201213714"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"管道/匿名管道(Pipes)"},{"Type":"NodeText","Data":" ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。"}]}]},{"ID":"20240201213715-1j210ka","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":2},"Properties":{"id":"20240201213715-1j210ka","updated":"20240201213715"},"Children":[{"ID":"20240201213716-p4adfp9","Type":"NodeParagraph","Properties":{"id":"20240201213716-p4adfp9","updated":"20240201213716"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有名管道(Names Pipes)"},{"Type":"NodeText","Data":" : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先进先出(first in first out)"},{"Type":"NodeText","Data":"。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。"}]}]},{"ID":"20240201213717-kk9kfzo","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":3},"Properties":{"id":"20240201213717-kk9kfzo","updated":"20240201213717"},"Children":[{"ID":"20240201213718-xdc3smn","Type":"NodeParagraph","Properties":{"id":"20240201213718-xdc3smn","updated":"20240201213718"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"信号(Signal)"},{"Type":"NodeText","Data":" ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；"}]}]},{"ID":"20240201213719-jxwl25l","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":4},"Properties":{"id":"20240201213719-jxwl25l","updated":"20240201213719"},"Children":[{"ID":"20240201213720-2enzhhg","Type":"NodeParagraph","Properties":{"id":"20240201213720-2enzhhg","updated":"20240201213720"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列(Message Queuing)"},{"Type":"NodeText","Data":" ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。"}]}]},{"ID":"20240201213721-xqhi3mc","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":5},"Properties":{"id":"20240201213721-xqhi3mc","updated":"20240201213721"},"Children":[{"ID":"20240201213722-ab9l4t1","Type":"NodeParagraph","Properties":{"id":"20240201213722-ab9l4t1","updated":"20240201213722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"信号量(Semaphores)"},{"Type":"NodeText","Data":" ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。"}]}]},{"ID":"20240201213723-ocflnby","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":6},"Properties":{"id":"20240201213723-ocflnby","updated":"20240201213723"},"Children":[{"ID":"20240201213724-doharra","Type":"NodeParagraph","Properties":{"id":"20240201213724-doharra","updated":"20240201213724"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"共享内存(Shared memory)"},{"Type":"NodeText","Data":" ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。"}]}]},{"ID":"20240201213725-j9z9qzr","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":7},"Properties":{"id":"20240201213725-j9z9qzr","updated":"20240201213725"},"Children":[{"ID":"20240201213726-q5b16qy","Type":"NodeParagraph","Properties":{"id":"20240201213726-q5b16qy","updated":"20240201213726"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"套接字(Sockets)"},{"Type":"NodeText","Data":" : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。"}]}]}]},{"ID":"20240201213727-gtr6q4y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213727-gtr6q4y","updated":"20240201213727"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"线程间的同步的方式"}]},{"ID":"20240201213728-kp8om8x","Type":"NodeParagraph","Properties":{"id":"20240201213728-kp8om8x","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那线程间的同步的方式有哪些呢?"}]},{"ID":"20240201213729-9omsrjm","Type":"NodeParagraph","Properties":{"id":"20240201213729-9omsrjm","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。操作系统一般有下面三种线程同步的方式："}]},{"ID":"20240201213730-mjy1ljg","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213730-mjy1ljg","updated":"20240201213730"},"Children":[{"ID":"20240201213731-sc862rn","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213731-sc862rn","updated":"20240201213731"},"Children":[{"ID":"20240201213732-few26bo","Type":"NodeParagraph","Properties":{"id":"20240201213732-few26bo","updated":"20240201213732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥量(Mutex)"},{"Type":"NodeText","Data":"：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。"}]}]},{"ID":"20240201213733-cmdpd8i","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":2},"Properties":{"id":"20240201213733-cmdpd8i","updated":"20240201213733"},"Children":[{"ID":"20240201213734-u37qp4z","Type":"NodeParagraph","Properties":{"id":"20240201213734-u37qp4z","updated":"20240201213734"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"信号量(Semaphore)"},{"Type":"NodeText","Data":" ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。"}]}]},{"ID":"20240201213735-axf20y0","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":3},"Properties":{"id":"20240201213735-axf20y0","updated":"20240201213735"},"Children":[{"ID":"20240201213736-g3h4qjl","Type":"NodeParagraph","Properties":{"id":"20240201213736-g3h4qjl","updated":"20240201213736"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事件(Event)"},{"Type":"NodeText","Data":" :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。"}]}]}]},{"ID":"20240201213737-7oxdsv0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213737-7oxdsv0","updated":"20240201213737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程的调度算法"}]},{"ID":"20240201213738-gj9jzmf","Type":"NodeParagraph","Properties":{"id":"20240201213738-gj9jzmf","updated":"20240201213738"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"你知道操作系统中进程的调度算法有哪些吗?"}]},{"ID":"20240201213739-iwtyn1j","Type":"NodeParagraph","Properties":{"id":"20240201213739-iwtyn1j","updated":"20240201213739"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：嗯嗯！这个我们大学的时候学过，是一个很重要的知识点！"}]},{"ID":"20240201213740-nffvgrf","Type":"NodeParagraph","Properties":{"id":"20240201213740-nffvgrf","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"为了确定首先执行哪个进程以及最后执行哪个进程以实现最大 CPU 利用率，计算机科学家已经定义了一些算法，它们是："}]},{"ID":"20240201213741-a0s76gw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213741-a0s76gw","updated":"20240201213741"},"Children":[{"ID":"20240201213742-7m6ybr1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-7m6ybr1","updated":"20240201213742"},"Children":[{"ID":"20240201213743-xdyaudd","Type":"NodeParagraph","Properties":{"id":"20240201213743-xdyaudd","updated":"20240201213743"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"先到先服务(FCFS)调度算法"},{"Type":"NodeText","Data":" : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。"}]}]},{"ID":"20240201213744-th533v5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-th533v5","updated":"20240201213744"},"Children":[{"ID":"20240201213745-5a54639","Type":"NodeParagraph","Properties":{"id":"20240201213745-5a54639","updated":"20240201213745"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"短作业优先(SJF)的调度算法"},{"Type":"NodeText","Data":" : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。"}]}]},{"ID":"20240201213746-bah9jc1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213746-bah9jc1","updated":"20240201213746"},"Children":[{"ID":"20240201213747-wukue9k","Type":"NodeParagraph","Properties":{"id":"20240201213747-wukue9k","updated":"20240201213747"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间片轮转调度算法"},{"Type":"NodeText","Data":" : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。"}]}]},{"ID":"20240201213748-m4010tb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213748-m4010tb","updated":"20240201213748"},"Children":[{"ID":"20240201213749-1t3y7vi","Type":"NodeParagraph","Properties":{"id":"20240201213749-1t3y7vi","updated":"20240201213749"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多级反馈队列调度算法"},{"Type":"NodeText","Data":" ：前面介绍的几种进程调度的算法都有一定的局限性。如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"短进程优先的调度算法，仅照顾了短进程而忽略了长进程"},{"Type":"NodeText","Data":" 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"被公认的一种较好的进程调度算法"},{"Type":"NodeText","Data":"，UNIX 操作系统采取的便是这种调度算法。"}]}]},{"ID":"20240201213750-xg4xbke","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213750-xg4xbke","updated":"20240201213750"},"Children":[{"ID":"20240201213751-n0dbrg1","Type":"NodeParagraph","Properties":{"id":"20240201213751-n0dbrg1","updated":"20240201213751"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优先级调度"},{"Type":"NodeText","Data":" ： 为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。"}]}]}]},{"ID":"20240201213752-slaq214","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213752-slaq214","updated":"20240201213752"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是死锁"}]},{"ID":"20240201213753-2vs5mbn","Type":"NodeParagraph","Properties":{"id":"20240201213753-2vs5mbn","updated":"20240201213753"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"你知道什么是死锁吗?"}]},{"ID":"20240201213754-7ffssop","Type":"NodeParagraph","Properties":{"id":"20240201213754-7ffssop","updated":"20240201213754"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：死锁描述的是这样一种情况：多个进程/线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于进程/线程被无限期地阻塞，因此程序不可能正常终止。"}]},{"ID":"20240201213755-aj771m5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213755-aj771m5","updated":"20240201213755"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的四个条件"}]},{"ID":"20240201213756-6m8a7f2","Type":"NodeParagraph","Properties":{"id":"20240201213756-6m8a7f2","updated":"20240201213756"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"产生死锁的四个必要条件是什么?"}]},{"ID":"20240201213757-c1o997b","Type":"NodeParagraph","Properties":{"id":"20240201213757-c1o997b","updated":"20240201213757"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：如果系统中以下四个条件同时成立，那么就能引起死锁："}]},{"ID":"20240201213758-uat6uj1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213758-uat6uj1","updated":"20240201213758"},"Children":[{"ID":"20240201213759-z29kqg8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213759-z29kqg8","updated":"20240201213759"},"Children":[{"ID":"20240201213760-rn3pmwl","Type":"NodeParagraph","Properties":{"id":"20240201213760-rn3pmwl","updated":"20240201213760"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥"},{"Type":"NodeText","Data":"：资源必须处于非共享模式，即一次只有一个进程可以使用。如果另一进程申请该资源，那么必须等待直到该资源被释放为止。"}]}]},{"ID":"20240201213761-8qx917b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213761-8qx917b","updated":"20240201213761"},"Children":[{"ID":"20240201213762-gtn5xwc","Type":"NodeParagraph","Properties":{"id":"20240201213762-gtn5xwc","updated":"20240201213762"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"占有并等待"},{"Type":"NodeText","Data":"：一个进程至少应该占有一个资源，并等待另一资源，而该资源被其他进程所占有。"}]}]},{"ID":"20240201213763-gm4gu2w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213763-gm4gu2w","updated":"20240201213763"},"Children":[{"ID":"20240201213764-93tdj0o","Type":"NodeParagraph","Properties":{"id":"20240201213764-93tdj0o","updated":"20240201213764"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非抢占"},{"Type":"NodeText","Data":"：资源不能被抢占。只能在持有资源的进程完成任务后，该资源才会被释放。"}]}]},{"ID":"20240201213765-huyyjoq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213765-huyyjoq","updated":"20240201213765"},"Children":[{"ID":"20240201213766-4f965nf","Type":"NodeParagraph","Properties":{"id":"20240201213766-4f965nf","updated":"20240201213766"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"循环等待"},{"Type":"NodeText","Data":"：有一组等待进程 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"{P0, P1,..., Pn}"},{"Type":"NodeText","Data":"， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P0"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P1"},{"Type":"NodeText","Data":" 占有，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P1"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P2"},{"Type":"NodeText","Data":" 占有，......，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pn-1"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pn"},{"Type":"NodeText","Data":" 占有，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Pn"},{"Type":"NodeText","Data":" 等待的资源被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"P0"},{"Type":"NodeText","Data":" 占有。"}]}]}]},{"ID":"20240201213767-mzpe7zr","Type":"NodeParagraph","Properties":{"id":"20240201213767-mzpe7zr","updated":"20240201213767"},"Children":[{"Type":"NodeText","Data":"注意，只有四个条件同时成立时，死锁才会出现。"}]},{"ID":"20240201213768-fsjzk6j","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213768-fsjzk6j","updated":"20240201213768"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"解决死锁的方法"}]},{"ID":"20240201213769-nl3jhsy","Type":"NodeParagraph","Properties":{"id":"20240201213769-nl3jhsy","updated":"20240201213769"},"Children":[{"Type":"NodeText","Data":"解决死锁的方法可以从多个角度去分析，一般的情况下，有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防，避免，检测和解除四种"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213770-zy522q4","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213770-zy522q4","updated":"20240201213770"},"Children":[{"ID":"20240201213771-6uk9nzw","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213771-6uk9nzw","updated":"20240201213771"},"Children":[{"ID":"20240201213772-jwxmts3","Type":"NodeParagraph","Properties":{"id":"20240201213772-jwxmts3","updated":"20240201213772"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防"},{"Type":"NodeText","Data":" 是采用某种策略，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"限制并发进程对资源的请求"},{"Type":"NodeText","Data":"，从而使得死锁的必要条件在系统执行的任何时间上都不满足。"}]}]},{"ID":"20240201213773-dpwjqj7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213773-dpwjqj7","updated":"20240201213773"},"Children":[{"ID":"20240201213774-fvu08m9","Type":"NodeParagraph","Properties":{"id":"20240201213774-fvu08m9","updated":"20240201213774"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免"},{"Type":"NodeText","Data":"则是系统在分配资源时，根据资源的使用情况"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"提前做出预测"},{"Type":"NodeText","Data":"，从而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免死锁的发生"}]}]},{"ID":"20240201213775-m2aru0v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213775-m2aru0v","updated":"20240201213775"},"Children":[{"ID":"20240201213776-jlaxhl2","Type":"NodeParagraph","Properties":{"id":"20240201213776-jlaxhl2","updated":"20240201213776"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"检测"},{"Type":"NodeText","Data":"是指系统设有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"专门的机构"},{"Type":"NodeText","Data":"，当死锁发生时，该机构能够检测死锁的发生，并精确地确定与死锁有关的进程和资源。"}]}]},{"ID":"20240201213777-yz11b4w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213777-yz11b4w","updated":"20240201213777"},"Children":[{"ID":"20240201213778-nlmcxwg","Type":"NodeParagraph","Properties":{"id":"20240201213778-nlmcxwg","updated":"20240201213778"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解除"},{"Type":"NodeText","Data":" 是与检测相配套的一种措施，用于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"将进程从死锁状态下解脱出来"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240201213779-dkwnp4x","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213779-dkwnp4x","updated":"20240201213779"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的预防"}]},{"ID":"20240201213780-wsfwsr9","Type":"NodeParagraph","Properties":{"id":"20240201213780-wsfwsr9","updated":"20240201213780"},"Children":[{"Type":"NodeText","Data":"死锁四大必要条件上面都已经列出来了，很显然，只要破坏四个必要条件中的任何一个就能够预防死锁的发生。"}]},{"ID":"20240201213781-7euijhm","Type":"NodeParagraph","Properties":{"id":"20240201213781-7euijhm","updated":"20240201213781"},"Children":[{"Type":"NodeText","Data":"破坏第一个条件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥条件"},{"Type":"NodeText","Data":"：使得资源是可以同时访问的，这是种简单的方法，磁盘就可以用这种方法管理，但是我们要知道，有很多资源 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"往往是不能同时访问的"},{"Type":"NodeText","Data":" ，所以这种做法在大多数的场合是行不通的。"}]},{"ID":"20240201213782-zz6mg1o","Type":"NodeParagraph","Properties":{"id":"20240201213782-zz6mg1o","updated":"20240201213782"},"Children":[{"Type":"NodeText","Data":"破坏第三个条件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非抢占"},{"Type":"NodeText","Data":" ：也就是说可以采用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"剥夺式调度算法"},{"Type":"NodeText","Data":"，但剥夺式调度方法目前一般仅适用于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主存资源"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理器资源"},{"Type":"NodeText","Data":" 的分配，并不适用于所以的资源，会导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源利用率下降"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213783-ubm7zri","Type":"NodeParagraph","Properties":{"id":"20240201213783-ubm7zri","updated":"20240201213783"},"Children":[{"Type":"NodeText","Data":"所以一般比较实用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防死锁的方法"},{"Type":"NodeText","Data":"，是通过考虑破坏第二个条件和第四个条件。"}]},{"ID":"20240201213784-9svrtul","Type":"NodeParagraph","Properties":{"id":"20240201213784-9svrtul","updated":"20240201213784"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、静态分配策略"}]},{"ID":"20240201213785-3lqikwl","Type":"NodeParagraph","Properties":{"id":"20240201213785-3lqikwl","updated":"20240201213785"},"Children":[{"Type":"NodeText","Data":"静态分配策略可以破坏死锁产生的第二个条件（占有并等待）。所谓静态分配策略，就是指一个进程必须在执行前就申请到它所需要的全部资源，并且知道它所要的资源都得到满足之后才开始执行。进程要么占有所有的资源然后开始执行，要么不占有资源，不会出现占有一些资源等待一些资源的情况。"}]},{"ID":"20240201213786-979ukre","Type":"NodeParagraph","Properties":{"id":"20240201213786-979ukre","updated":"20240201213786"},"Children":[{"Type":"NodeText","Data":"静态分配策略逻辑简单，实现也很容易，但这种策略 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"严重地降低了资源利用率"},{"Type":"NodeText","Data":"，因为在每个进程所占有的资源中，有些资源是在比较靠后的执行时间里采用的，甚至有些资源是在额外的情况下才是用的，这样就可能造成了一个进程占有了一些 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"几乎不用的资源而使其他需要该资源的进程产生等待"},{"Type":"NodeText","Data":" 的情况。"}]},{"ID":"20240201213787-2460txd","Type":"NodeParagraph","Properties":{"id":"20240201213787-2460txd","updated":"20240201213787"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、层次分配策略"}]},{"ID":"20240201213788-yfi9poa","Type":"NodeParagraph","Properties":{"id":"20240201213788-yfi9poa","updated":"20240201213788"},"Children":[{"Type":"NodeText","Data":"层次分配策略破坏了产生死锁的第四个条件(循环等待)。在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源，按这种策略，是不可能出现循环等待链的，因为那样的话，就出现了已经申请了较高层的资源，反而去申请了较低层的资源，不符合层次分配策略，证明略。"}]},{"ID":"20240201213789-frxnzq9","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213789-frxnzq9","updated":"20240201213789"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的避免"}]},{"ID":"20240201213790-uh4hile","Type":"NodeParagraph","Properties":{"id":"20240201213790-uh4hile","updated":"20240201213790"},"Children":[{"Type":"NodeText","Data":"上面提到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"破坏"},{"Type":"NodeText","Data":" 死锁产生的四个必要条件之一就可以成功 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防系统发生死锁"},{"Type":"NodeText","Data":" ，但是会导致 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"低效的进程运行"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源使用率"},{"Type":"NodeText","Data":" 。而死锁的避免相反，它的角度是允许系统中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同时存在四个必要条件"},{"Type":"NodeText","Data":" ，只要掌握并发进程中与每个进程有关的资源动态申请情况，做出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"明智和合理的选择"},{"Type":"NodeText","Data":" ，仍然可以避免死锁，因为四大条件仅仅是产生死锁的必要条件。"}]},{"ID":"20240201213791-1dczlqf","Type":"NodeParagraph","Properties":{"id":"20240201213791-1dczlqf","updated":"20240201213791"},"Children":[{"Type":"NodeText","Data":"我们将系统的状态分为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全状态"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不安全状态"},{"Type":"NodeText","Data":" ，每当在未申请者分配资源前先测试系统状态，若把系统资源分配给申请者会产生死锁，则拒绝分配，否则接受申请，并为它分配资源。"}]},{"ID":"20240201213792-vbhi3rg","Type":"NodeBlockquote","Properties":{"id":"20240201213792-vbhi3rg","updated":"20240201213792"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213793-87sfbbr","Type":"NodeParagraph","Properties":{"id":"20240201213793-87sfbbr","updated":"20240201213793"},"Children":[{"Type":"NodeText","Data":"如果操作系统能够保证所有的进程在有限的时间内得到需要的全部资源，则称系统处于安全状态，否则说系统是不安全的。很显然，系统处于安全状态则不会发生死锁，系统若处于不安全状态则可能发生死锁。"}]}]},{"ID":"20240201213794-egjlep5","Type":"NodeParagraph","Properties":{"id":"20240201213794-egjlep5","updated":"20240201213794"},"Children":[{"Type":"NodeText","Data":"那么如何保证系统保持在安全状态呢？通过算法，其中最具有代表性的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"避免死锁算法"},{"Type":"NodeText","Data":" 就是 Dijkstra 的银行家算法，银行家算法用一句话表达就是：当一个进程申请使用资源的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"银行家算法"},{"Type":"NodeText","Data":" 通过先 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"试探"},{"Type":"NodeText","Data":" 分配给该进程资源，然后通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全性算法"},{"Type":"NodeText","Data":" 判断分配后系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待，若能够进入到安全的状态，则就 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"真的分配资源给该进程"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213795-fu3c66y","Type":"NodeParagraph","Properties":{"id":"20240201213795-fu3c66y","updated":"20240201213795"},"Children":[{"Type":"NodeText","Data":"银行家算法详情可见："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/qq_33414271/article/details/80245715","TextMarkTextContent":"《一句话+一张图说清楚——银行家算法》"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213796-74w977z","Type":"NodeParagraph","Properties":{"id":"20240201213796-74w977z","updated":"20240201213796"},"Children":[{"Type":"NodeText","Data":"操作系统教程树中讲述的银行家算法也比较清晰，可以一看."}]},{"ID":"20240201213797-fs13rn2","Type":"NodeParagraph","Properties":{"id":"20240201213797-fs13rn2","updated":"20240201213797"},"Children":[{"Type":"NodeText","Data":"死锁的避免(银行家算法)改善解决了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源使用率低的问题"},{"Type":"NodeText","Data":" ，但是它要不断地检测每个进程对各类资源的占用和申请情况，以及做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全性检查"},{"Type":"NodeText","Data":" ，需要花费较多的时间。"}]},{"ID":"20240201213798-azzsmu9","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213798-azzsmu9","updated":"20240201213798"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的检测"}]},{"ID":"20240201213799-otymeua","Type":"NodeParagraph","Properties":{"id":"20240201213799-otymeua","updated":"20240201213799"},"Children":[{"Type":"NodeText","Data":"对资源的分配加以限制可以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"预防和避免"},{"Type":"NodeText","Data":" 死锁的发生，但是都不利于各进程对系统资源的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"充分共享"},{"Type":"NodeText","Data":"。解决死锁问题的另一条途径是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁检测和解除"},{"Type":"NodeText","Data":" (这里突然联想到了乐观锁和悲观锁，感觉死锁的检测和解除就像是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"乐观锁"},{"Type":"NodeText","Data":" ，分配资源时不去提前管会不会发生死锁了，等到真的死锁出现了再来解决嘛，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁的预防和避免"},{"Type":"NodeText","Data":" 更像是悲观锁，总是觉得死锁会出现，所以在分配资源的时候就很谨慎)。"}]},{"ID":"20240201213800-71u9o4k","Type":"NodeParagraph","Properties":{"id":"20240201213800-71u9o4k","updated":"20240201213800"},"Children":[{"Type":"NodeText","Data":"这种方法对资源的分配不加以任何限制，也不采取死锁避免措施，但系统 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定时地运行一个 “死锁检测”"},{"Type":"NodeText","Data":" 的程序，判断系统内是否出现死锁，如果检测到系统发生了死锁，再采取措施去解除它。"}]},{"ID":"20240201213801-3ycye31","Type":"NodeParagraph","Properties":{"id":"20240201213801-3ycye31","updated":"20240201213801"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程-资源分配图"}]},{"ID":"20240201213802-odb6ahq","Type":"NodeParagraph","Properties":{"id":"20240201213802-odb6ahq","updated":"20240201213802"},"Children":[{"Type":"NodeText","Data":"操作系统中的每一刻时刻的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"系统状态"},{"Type":"NodeText","Data":"都可以用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程-资源分配图"},{"Type":"NodeText","Data":"来表示，进程-资源分配图是描述进程和资源申请及分配关系的一种有向图，可用于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"检测系统是否处于死锁状态"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213803-a7ytibz","Type":"NodeParagraph","Properties":{"id":"20240201213803-a7ytibz","updated":"20240201213803"},"Children":[{"Type":"NodeText","Data":"用一个方框表示每一个资源类，方框中的黑点表示该资源类中的各个资源，每个键进程用一个圆圈表示，用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有向边"},{"Type":"NodeText","Data":" 来表示"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程申请资源和资源被分配的情况"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213804-g5jnyr9","Type":"NodeParagraph","Properties":{"id":"20240201213804-g5jnyr9","updated":"20240201213804"},"Children":[{"Type":"NodeText","Data":"图中 2-21 是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"进程-资源分配图"},{"Type":"NodeText","Data":"的一个例子，其中共有三个资源类，每个进程的资源占有和申请情况已清楚地表示在图中。在这个例子中，由于存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"占有和等待资源的环路"},{"Type":"NodeText","Data":" ，导致一组进程永远处于等待资源的状态，发生了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213805-n88jicj","Type":"NodeParagraph","Properties":{"id":"20240201213805-n88jicj","updated":"20240201213805"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"进程-资源分配图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/cs-basics/operating-system/process-resource-allocation-diagram.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213806-8rh9y8w","Type":"NodeParagraph","Properties":{"id":"20240201213806-8rh9y8w","updated":"20240201213806"},"Children":[{"Type":"NodeText","Data":"进程-资源分配图中存在环路并不一定是发生了死锁。因为循环等待资源仅仅是死锁发生的必要条件，而不是充分条件。图 2-22 便是一个有环路而无死锁的例子。虽然进程 P1 和进程 P3 分别占用了一个资源 R1 和一个资源 R2，并且因为等待另一个资源 R2 和另一个资源 R1 形成了环路，但进程 P2 和进程 P4 分别占有了一个资源 R1 和一个资源 R2，它们申请的资源得到了满足，在有限的时间里会归还资源，于是进程 P1 或 P3 都能获得另一个所需的资源，环路自动解除，系统也就不存在死锁状态了。"}]},{"ID":"20240201213807-sh6nq9z","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213807-sh6nq9z","updated":"20240201213807"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁检测步骤"}]},{"ID":"20240201213808-uudwj80","Type":"NodeParagraph","Properties":{"id":"20240201213808-uudwj80","updated":"20240201213808"},"Children":[{"Type":"NodeText","Data":"知道了死锁检测的原理，我们可以利用下列步骤编写一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁检测"},{"Type":"NodeText","Data":" 程序，检测系统是否产生了死锁。"}]},{"ID":"20240201213809-zpgmt46","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213809-zpgmt46","updated":"20240201213809"},"Children":[{"ID":"20240201213810-c5xrc2q","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213810-c5xrc2q","updated":"20240201213810"},"Children":[{"ID":"20240201213811-6wvka1i","Type":"NodeParagraph","Properties":{"id":"20240201213811-6wvka1i","updated":"20240201213811"},"Children":[{"Type":"NodeText","Data":"如果进程-资源分配图中无环路，则此时系统没有发生死锁"}]}]},{"ID":"20240201213812-24t8ngj","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213812-24t8ngj","updated":"20240201213812"},"Children":[{"ID":"20240201213813-w3qhds9","Type":"NodeParagraph","Properties":{"id":"20240201213813-w3qhds9","updated":"20240201213813"},"Children":[{"Type":"NodeText","Data":"如果进程-资源分配图中有环路，且每个资源类仅有一个资源，则系统中已经发生了死锁。"}]}]},{"ID":"20240201213814-4zqmzaq","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213814-4zqmzaq","updated":"20240201213814"},"Children":[{"ID":"20240201213815-h0nckkg","Type":"NodeParagraph","Properties":{"id":"20240201213815-h0nckkg","updated":"20240201213815"},"Children":[{"Type":"NodeText","Data":"如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"既不阻塞又非独立的进程"},{"Type":"NodeText","Data":" ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消除所有的边"},{"Type":"NodeText","Data":" ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拓扑排序"},{"Type":"NodeText","Data":")"}]}]}]},{"ID":"20240201213816-ayiroh5","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240201213816-ayiroh5","updated":"20240201213816"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"死锁的解除"}]},{"ID":"20240201213817-rceljfj","Type":"NodeParagraph","Properties":{"id":"20240201213817-rceljfj","updated":"20240201213817"},"Children":[{"Type":"NodeText","Data":"当死锁检测程序检测到存在死锁发生时，应设法让其解除，让系统从死锁状态中恢复过来，常用的解除死锁的方法有以下四种："}]},{"ID":"20240201213818-bhp4291","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213818-bhp4291","updated":"20240201213818"},"Children":[{"ID":"20240201213819-jlbena1","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213819-jlbena1","updated":"20240201213819"},"Children":[{"ID":"20240201213820-buyx82g","Type":"NodeParagraph","Properties":{"id":"20240201213820-buyx82g","updated":"20240201213820"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"立即结束所有进程的执行，重新启动操作系统"},{"Type":"NodeText","Data":" ：这种方法简单，但以前所在的工作全部作废，损失很大。"}]}]},{"ID":"20240201213821-xflw6hb","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213821-xflw6hb","updated":"20240201213821"},"Children":[{"ID":"20240201213822-f4swqyr","Type":"NodeParagraph","Properties":{"id":"20240201213822-f4swqyr","updated":"20240201213822"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"撤销涉及死锁的所有进程，解除死锁后继续运行"},{"Type":"NodeText","Data":" ：这种方法能彻底打破"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"死锁的循环等待"},{"Type":"NodeText","Data":"条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。"}]}]},{"ID":"20240201213823-g2s0l7f","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213823-g2s0l7f","updated":"20240201213823"},"Children":[{"ID":"20240201213824-roo3ria","Type":"NodeParagraph","Properties":{"id":"20240201213824-roo3ria","updated":"20240201213824"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"逐个撤销涉及死锁的进程，回收其资源直至死锁解除。"}]}]},{"ID":"20240201213825-8we6q0g","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213825-8we6q0g","updated":"20240201213825"},"Children":[{"ID":"20240201213826-29k7iby","Type":"NodeParagraph","Properties":{"id":"20240201213826-29k7iby","updated":"20240201213826"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"抢占资源"},{"Type":"NodeText","Data":" ：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除。"}]}]}]},{"ID":"20240201213827-4goraog","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213827-4goraog","updated":"20240201213827"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"操作系统内存管理基础"}]},{"ID":"20240201213828-eotam32","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213828-eotam32","updated":"20240201213828"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"内存管理介绍"}]},{"ID":"20240201213829-6mlea9y","Type":"NodeParagraph","Properties":{"id":"20240201213829-6mlea9y","updated":"20240201213829"},"Children":[{"Type":"NodeText","Data":"👨‍💻 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":": "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统的内存管理主要是做什么？"}]},{"ID":"20240201213830-5ed3pp3","Type":"NodeParagraph","Properties":{"id":"20240201213830-5ed3pp3","updated":"20240201213830"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我："},{"Type":"NodeText","Data":" 操作系统的内存管理主要负责内存的分配与回收（malloc 函数：申请内存，free 函数：释放内存），另外地址转换也就是将逻辑地址转换成相应的物理地址等功能也是操作系统内存管理做的事情。"}]},{"ID":"20240201213831-q4q3fmh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213831-q4q3fmh","updated":"20240201213831"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的几种内存管理机制"}]},{"ID":"20240201213832-j15padr","Type":"NodeParagraph","Properties":{"id":"20240201213832-j15padr","updated":"20240201213832"},"Children":[{"Type":"NodeText","Data":"👨‍💻 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":": "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作系统的内存管理机制了解吗？内存管理有哪几种方式?"}]},{"ID":"20240201213833-mft45rq","Type":"NodeParagraph","Properties":{"id":"20240201213833-mft45rq","updated":"20240201213833"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我："},{"Type":"NodeText","Data":" 这个在学习操作系统的时候有了解过。"}]},{"ID":"20240201213834-pe7rgi8","Type":"NodeParagraph","Properties":{"id":"20240201213834-pe7rgi8","updated":"20240201213834"},"Children":[{"Type":"NodeText","Data":"简单分为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"连续分配管理方式"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非连续分配管理方式"},{"Type":"NodeText","Data":"这两种。连续分配管理方式是指为一个用户程序分配一个连续的内存空间，常见的如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"块式管理"},{"Type":"NodeText","Data":" 。同样地，非连续分配管理方式允许一个程序使用的内存分布在离散或者说不相邻的内存中，常见的如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页式管理"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段式管理"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213835-xwmt9fi","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213835-xwmt9fi","updated":"20240201213835"},"Children":[{"ID":"20240201213836-8wz5fao","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213836-8wz5fao","updated":"20240201213836"},"Children":[{"ID":"20240201213837-430i7nf","Type":"NodeParagraph","Properties":{"id":"20240201213837-430i7nf","updated":"20240201213837"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"块式管理"},{"Type":"NodeText","Data":" ： 远古时代的计算机操作系统的内存管理方式。将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。"}]}]},{"ID":"20240201213838-svftmc2","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213838-svftmc2","updated":"20240201213838"},"Children":[{"ID":"20240201213839-7i21ydl","Type":"NodeParagraph","Properties":{"id":"20240201213839-7i21ydl","updated":"20240201213839"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页式管理"},{"Type":"NodeText","Data":" ：把主存分为大小相等且固定的一页一页的形式，页较小，相比于块式管理的划分粒度更小，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。"}]}]},{"ID":"20240201213840-mt4z80n","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213840-mt4z80n","updated":"20240201213840"},"Children":[{"ID":"20240201213841-9cukqyf","Type":"NodeParagraph","Properties":{"id":"20240201213841-9cukqyf","updated":"20240201213841"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段式管理"},{"Type":"NodeText","Data":" ： 页式管理虽然提高了内存利用率，但是页式管理其中的页并无任何实际意义。 段式管理把主存分为一段段的，段是有实际意义的，每个段定义了一组逻辑信息，例如,有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。"}]}]}]},{"ID":"20240201213842-n46mu8s","Type":"NodeParagraph","Properties":{"id":"20240201213842-n46mu8s","updated":"20240201213842"},"Children":[{"Type":"NodeText","Data":"简单来说：页是物理单位，段是逻辑单位。分页可以有效提高内存利用率，分段可以更好满足用户需求。"}]},{"ID":"20240201213843-flh9qt0","Type":"NodeParagraph","Properties":{"id":"20240201213843-flh9qt0","updated":"20240201213843"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ： 回答的还不错！不过漏掉了一个很重要的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段页式管理机制"},{"Type":"NodeText","Data":" 。段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"段页式管理机制"},{"Type":"NodeText","Data":" 中段与段之间以及段的内部的都是离散的。"}]},{"ID":"20240201213844-ho7wkwk","Type":"NodeParagraph","Properties":{"id":"20240201213844-ho7wkwk","updated":"20240201213844"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：谢谢面试官！刚刚把这个给忘记了～"}]},{"ID":"20240201213845-84ii6d4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213845-84ii6d4","updated":"20240201213845"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"快表和多级页表"}]},{"ID":"20240201213846-87mt5qs","Type":"NodeParagraph","Properties":{"id":"20240201213846-87mt5qs","updated":"20240201213846"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ： 页表管理机制中有两个很重要的概念：快表和多级页表，这两个东西分别解决了页表管理中很重要的两个问题。你给我简单介绍一下吧！"}]},{"ID":"20240201213847-oppybnw","Type":"NodeParagraph","Properties":{"id":"20240201213847-oppybnw","updated":"20240201213847"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：在分页内存管理中，很重要的两点是："}]},{"ID":"20240201213848-mpnzbq5","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213848-mpnzbq5","updated":"20240201213848"},"Children":[{"ID":"20240201213849-q00tuo3","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213849-q00tuo3","updated":"20240201213849"},"Children":[{"ID":"20240201213850-hjfcw1b","Type":"NodeParagraph","Properties":{"id":"20240201213850-hjfcw1b","updated":"20240201213850"},"Children":[{"Type":"NodeText","Data":"虚拟地址到物理地址的转换要快。"}]}]},{"ID":"20240201213851-l8iz2n4","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213851-l8iz2n4","updated":"20240201213851"},"Children":[{"ID":"20240201213852-180bt2e","Type":"NodeParagraph","Properties":{"id":"20240201213852-180bt2e","updated":"20240201213852"},"Children":[{"Type":"NodeText","Data":"解决虚拟地址空间大，页表也会很大的问题。"}]}]}]},{"ID":"20240201213853-jbmfl2w","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213853-jbmfl2w","updated":"20240201213853"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"快表"}]},{"ID":"20240201213854-dkki1qf","Type":"NodeParagraph","Properties":{"id":"20240201213854-dkki1qf","updated":"20240201213854"},"Children":[{"Type":"NodeText","Data":"为了提高虚拟地址到物理地址的转换速度，操作系统在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页表方案"},{"Type":"NodeText","Data":" 基础之上引入了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快表"},{"Type":"NodeText","Data":" 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。"}]},{"ID":"20240201213855-jo93xuh","Type":"NodeParagraph","Properties":{"id":"20240201213855-jo93xuh","updated":"20240201213855"},"Children":[{"Type":"NodeText","Data":"使用快表之后的地址转换流程是这样的："}]},{"ID":"20240201213856-l2lk84o","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213856-l2lk84o","updated":"20240201213856"},"Children":[{"ID":"20240201213857-n9x0cm2","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213857-n9x0cm2","updated":"20240201213857"},"Children":[{"ID":"20240201213858-9k439j3","Type":"NodeParagraph","Properties":{"id":"20240201213858-9k439j3","updated":"20240201213858"},"Children":[{"Type":"NodeText","Data":"根据虚拟地址中的页号查快表；"}]}]},{"ID":"20240201213859-fmxvh5b","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213859-fmxvh5b","updated":"20240201213859"},"Children":[{"ID":"20240201213860-0oh6knd","Type":"NodeParagraph","Properties":{"id":"20240201213860-0oh6knd","updated":"20240201213860"},"Children":[{"Type":"NodeText","Data":"如果该页在快表中，直接从快表中读取相应的物理地址；"}]}]},{"ID":"20240201213861-0br86rk","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213861-0br86rk","updated":"20240201213861"},"Children":[{"ID":"20240201213862-hkdqmhr","Type":"NodeParagraph","Properties":{"id":"20240201213862-hkdqmhr","updated":"20240201213862"},"Children":[{"Type":"NodeText","Data":"如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；"}]}]},{"ID":"20240201213863-sswej60","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213863-sswej60","updated":"20240201213863"},"Children":[{"ID":"20240201213864-fov1sur","Type":"NodeParagraph","Properties":{"id":"20240201213864-fov1sur","updated":"20240201213864"},"Children":[{"Type":"NodeText","Data":"当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。"}]}]}]},{"ID":"20240201213865-vbnupe9","Type":"NodeParagraph","Properties":{"id":"20240201213865-vbnupe9","updated":"20240201213865"},"Children":[{"Type":"NodeText","Data":"看完了之后你会发现快表和我们平时经常在我们开发的系统使用的缓存（比如 Redis）很像，的确是这样的，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。"}]},{"ID":"20240201213866-6u41xrz","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213866-6u41xrz","updated":"20240201213866"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"多级页表"}]},{"ID":"20240201213867-jrs811n","Type":"NodeParagraph","Properties":{"id":"20240201213867-jrs811n","updated":"20240201213867"},"Children":[{"Type":"NodeText","Data":"引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。"}]},{"ID":"20240201213868-ravm2en","Type":"NodeParagraph","Properties":{"id":"20240201213868-ravm2en","updated":"20240201213868"},"Children":[{"Type":"NodeText","Data":"多级页表属于时间换空间的典型场景。"}]},{"ID":"20240201213869-1qjukp5","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213869-1qjukp5","updated":"20240201213869"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201213870-jiglnlf","Type":"NodeParagraph","Properties":{"id":"20240201213870-jiglnlf","updated":"20240201213870"},"Children":[{"Type":"NodeText","Data":"为了提高内存的空间性能，提出了多级页表的概念；但是提到空间性能是以浪费时间性能为基础的，因此为了补充损失的时间性能，提出了快表（即 TLB）的概念。 不论是快表还是多级页表实际上都利用到了程序的局部性原理，局部性原理在后面的虚拟内存这部分会介绍到。"}]},{"ID":"20240201213871-li4p1mi","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213871-li4p1mi","updated":"20240201213871"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分页机制和分段机制的共同点和区别"}]},{"ID":"20240201213872-io3qx64","Type":"NodeParagraph","Properties":{"id":"20240201213872-io3qx64","updated":"20240201213872"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分页机制和分段机制有哪些共同点和区别呢？"}]},{"ID":"20240201213873-5yi91r3","Type":"NodeParagraph","Properties":{"id":"20240201213873-5yi91r3","updated":"20240201213873"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213874-t2lws34","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213874-t2lws34","updated":"20240201213874"},"Children":[{"ID":"20240201213875-xwujfw6","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213875-xwujfw6","updated":"20240201213875"},"Children":[{"ID":"20240201213876-8gpzmn2","Type":"NodeParagraph","Properties":{"id":"20240201213876-8gpzmn2","updated":"20240201213876"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"共同点"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213877-2i3k645","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213877-2i3k645","updated":"20240201213877"},"Children":[{"ID":"20240201213878-a7ex4y2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213878-a7ex4y2","updated":"20240201213878"},"Children":[{"ID":"20240201213879-a2eweel","Type":"NodeParagraph","Properties":{"id":"20240201213879-a2eweel","updated":"20240201213879"},"Children":[{"Type":"NodeText","Data":"分页机制和分段机制都是为了提高内存利用率，减少内存碎片。"}]}]},{"ID":"20240201213880-sxvmn3l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213880-sxvmn3l","updated":"20240201213880"},"Children":[{"ID":"20240201213881-xwqhpud","Type":"NodeParagraph","Properties":{"id":"20240201213881-xwqhpud","updated":"20240201213881"},"Children":[{"Type":"NodeText","Data":"页和段都是离散存储的，所以两者都是离散分配内存的方式。但是，每个页和段中的内存是连续的。"}]}]}]}]},{"ID":"20240201213882-ond6u6v","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213882-ond6u6v","updated":"20240201213882"},"Children":[{"ID":"20240201213883-43l9pii","Type":"NodeParagraph","Properties":{"id":"20240201213883-43l9pii","updated":"20240201213883"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"区别"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213884-fxfceeu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213884-fxfceeu","updated":"20240201213884"},"Children":[{"ID":"20240201213885-xqftk5c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213885-xqftk5c","updated":"20240201213885"},"Children":[{"ID":"20240201213886-siajrko","Type":"NodeParagraph","Properties":{"id":"20240201213886-siajrko","updated":"20240201213886"},"Children":[{"Type":"NodeText","Data":"页的大小是固定的，由操作系统决定；而段的大小不固定，取决于我们当前运行的程序。"}]}]},{"ID":"20240201213887-mo2a2kt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213887-mo2a2kt","updated":"20240201213887"},"Children":[{"ID":"20240201213888-845n2jm","Type":"NodeParagraph","Properties":{"id":"20240201213888-845n2jm","updated":"20240201213888"},"Children":[{"Type":"NodeText","Data":"分页仅仅是为了满足操作系统内存管理的需求，而段是逻辑信息的单位，在程序中可以体现为代码段，数据段，能够更好满足用户的需要。"}]}]}]}]}]},{"ID":"20240201213889-igw0sio","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213889-igw0sio","updated":"20240201213889"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"逻辑(虚拟)地址和物理地址"}]},{"ID":"20240201213890-q8q18af","Type":"NodeParagraph","Properties":{"id":"20240201213890-q8q18af","updated":"20240201213890"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ：你刚刚还提到了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"逻辑地址和物理地址"},{"Type":"NodeText","Data":"这两个概念，我不太清楚，你能为我解释一下不？"}]},{"ID":"20240201213891-r249twt","Type":"NodeParagraph","Properties":{"id":"20240201213891-r249twt","updated":"20240201213891"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我："},{"Type":"NodeText","Data":" em...好的嘛！我们编程一般只有可能和逻辑地址打交道，比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址。物理地址是内存单元真正的地址。"}]},{"ID":"20240201213892-ikbhu1d","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213892-ikbhu1d","updated":"20240201213892"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"CPU 寻址了解吗?为什么需要虚拟地址空间?"}]},{"ID":"20240201213893-kkpg4p3","Type":"NodeParagraph","Properties":{"id":"20240201213893-kkpg4p3","updated":"20240201213893"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CPU 寻址了解吗?为什么需要虚拟地址空间?"}]},{"ID":"20240201213894-w1622fh","Type":"NodeParagraph","Properties":{"id":"20240201213894-w1622fh","updated":"20240201213894"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：这部分我真不清楚！"}]},{"ID":"20240201213895-54ajya4","Type":"NodeParagraph","Properties":{"id":"20240201213895-54ajya4","updated":"20240201213895"},"Children":[{"Type":"NodeText","Data":"于是面试完之后我默默去查阅了相关文档！留下了没有技术的泪水。。。"}]},{"ID":"20240201213896-u2xbpox","Type":"NodeBlockquote","Properties":{"id":"20240201213896-u2xbpox","updated":"20240201213896"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213897-c1nwqwq","Type":"NodeParagraph","Properties":{"id":"20240201213897-c1nwqwq","updated":"20240201213897"},"Children":[{"Type":"NodeText","Data":"这部分内容参考了 Microsoft 官网的介绍，地址："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/virtual-address-spaces?redirectedfrom=MSDN","TextMarkTextContent":"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/virtual-address-spaces?redirectedfrom=MSDN"}]}]},{"ID":"20240201213898-0ddnpe6","Type":"NodeParagraph","Properties":{"id":"20240201213898-0ddnpe6","updated":"20240201213898"},"Children":[{"Type":"NodeText","Data":"现代处理器使用的是一种称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟寻址(Virtual Addressing)"},{"Type":"NodeText","Data":" 的寻址方式。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用虚拟寻址，CPU 需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。"},{"Type":"NodeText","Data":" 实际上完成虚拟地址转换为物理地址转换的硬件是 CPU 中含有一个被称为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存管理单元（Memory Management Unit, MMU）"},{"Type":"NodeText","Data":" 的硬件。如下图所示："}]},{"ID":"20240201213899-0nvtta7","Type":"NodeParagraph","Properties":{"id":"20240201213899-0nvtta7","updated":"20240201213899"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"MMU_principle_updated","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-11/2b27dac8cc647f8aac989da2d1166db2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213900-xib6l1q","Type":"NodeParagraph","Properties":{"id":"20240201213900-xib6l1q","updated":"20240201213900"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么要有虚拟地址空间呢？"}]},{"ID":"20240201213901-yc2634y","Type":"NodeParagraph","Properties":{"id":"20240201213901-yc2634y","updated":"20240201213901"},"Children":[{"Type":"NodeText","Data":"先从没有虚拟地址空间的时候说起吧！没有虚拟地址空间的时候，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"程序直接访问和操作的都是物理内存"},{"Type":"NodeText","Data":" 。但是这样有什么问题呢？"}]},{"ID":"20240201213902-lb7567o","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213902-lb7567o","updated":"20240201213902"},"Children":[{"ID":"20240201213903-ola83ca","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213903-ola83ca","updated":"20240201213903"},"Children":[{"ID":"20240201213904-znxgewg","Type":"NodeParagraph","Properties":{"id":"20240201213904-znxgewg","updated":"20240201213904"},"Children":[{"Type":"NodeText","Data":"用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易（有意或者无意）破坏操作系统，造成操作系统崩溃。"}]}]},{"ID":"20240201213905-l4cg5gq","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213905-l4cg5gq","updated":"20240201213905"},"Children":[{"ID":"20240201213906-0v589i7","Type":"NodeParagraph","Properties":{"id":"20240201213906-0v589i7","updated":"20240201213906"},"Children":[{"Type":"NodeText","Data":"想要同时运行多个程序特别困难，比如你想同时运行一个微信和一个 QQ 音乐都不行。为什么呢？举个简单的例子：微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就造成了微信这个程序就会崩溃。"}]}]}]},{"ID":"20240201213907-vd9u929","Type":"NodeParagraph","Properties":{"id":"20240201213907-vd9u929","updated":"20240201213907"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"总结来说：如果直接把物理地址暴露出来的话会带来严重问题，比如可能对操作系统造成伤害以及给同时运行多个程序造成困难。"}]},{"ID":"20240201213908-tdfhmvf","Type":"NodeParagraph","Properties":{"id":"20240201213908-tdfhmvf","updated":"20240201213908"},"Children":[{"Type":"NodeText","Data":"通过虚拟地址访问内存有以下优势："}]},{"ID":"20240201213909-2ldq487","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213909-2ldq487","updated":"20240201213909"},"Children":[{"ID":"20240201213910-3pfm7kd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213910-3pfm7kd","updated":"20240201213910"},"Children":[{"ID":"20240201213911-xykyylr","Type":"NodeParagraph","Properties":{"id":"20240201213911-xykyylr","updated":"20240201213911"},"Children":[{"Type":"NodeText","Data":"程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区。"}]}]},{"ID":"20240201213912-pve0nz2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213912-pve0nz2","updated":"20240201213912"},"Children":[{"ID":"20240201213913-j0udhdb","Type":"NodeParagraph","Properties":{"id":"20240201213913-j0udhdb","updated":"20240201213913"},"Children":[{"Type":"NodeText","Data":"程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，内存管理器会将物理内存页（通常大小为 4 KB）保存到磁盘文件。数据或代码页会根据需要在物理内存与磁盘之间移动。"}]}]},{"ID":"20240201213914-btuxm11","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213914-btuxm11","updated":"20240201213914"},"Children":[{"ID":"20240201213915-sxi8e0e","Type":"NodeParagraph","Properties":{"id":"20240201213915-sxi8e0e","updated":"20240201213915"},"Children":[{"Type":"NodeText","Data":"不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。"}]}]}]},{"ID":"20240201213916-enj0vgq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213916-enj0vgq","updated":"20240201213916"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟内存"}]},{"ID":"20240201213917-thaddvd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213917-thaddvd","updated":"20240201213917"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是虚拟内存(Virtual Memory)?"}]},{"ID":"20240201213918-rbjp24s","Type":"NodeParagraph","Properties":{"id":"20240201213918-rbjp24s","updated":"20240201213918"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ：再问你一个常识性的问题！"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是虚拟内存(Virtual Memory)?"}]},{"ID":"20240201213919-3db5kv7","Type":"NodeParagraph","Properties":{"id":"20240201213919-3db5kv7","updated":"20240201213919"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：这个在我们平时使用电脑特别是 Windows 系统的时候太常见了。很多时候我们使用了很多占内存的软件，这些软件占用的内存可能已经远远超出了我们电脑本身具有的物理内存。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么可以这样呢？"},{"Type":"NodeText","Data":" 正是因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存"},{"Type":"NodeText","Data":" 的存在，通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存"},{"Type":"NodeText","Data":" 可以让程序可以拥有超过系统物理内存大小的可用内存空间。另外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存为每个进程提供了一个一致的、私有的地址空间，它让每个进程产生了一种自己在独享主存的错觉（每个进程拥有一片连续完整的内存空间）"},{"Type":"NodeText","Data":"。这样会更加有效地管理内存并减少出错。"}]},{"ID":"20240201213920-wqmfmah","Type":"NodeParagraph","Properties":{"id":"20240201213920-wqmfmah","updated":"20240201213920"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存"},{"Type":"NodeText","Data":"是计算机系统内存管理的一种技术，我们可以手动设置自己电脑的虚拟内存。不要单纯认为虚拟内存只是“使用硬盘空间来扩展内存“的技术。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存的重要意义是它定义了一个连续的虚拟地址空间"},{"Type":"NodeText","Data":"，并且 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"把内存扩展到硬盘空间"},{"Type":"NodeText","Data":"。推荐阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://juejin.im/post/59f8691b51882534af254317","TextMarkTextContent":"《虚拟内存的那点事儿》"}]},{"ID":"20240201213921-l50utux","Type":"NodeParagraph","Properties":{"id":"20240201213921-l50utux","updated":"20240201213921"},"Children":[{"Type":"NodeText","Data":"维基百科中有几句话是这样介绍虚拟内存的。"}]},{"ID":"20240201213922-w31fexl","Type":"NodeBlockquote","Properties":{"id":"20240201213922-w31fexl","updated":"20240201213922"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213923-kslttp3","Type":"NodeParagraph","Properties":{"id":"20240201213923-kslttp3","updated":"20240201213923"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存"},{"Type":"NodeText","Data":" 使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如 RAM）的使用也更有效率。目前，大多数操作系统都使用了虚拟内存，如 Windows 家族的“虚拟内存”；Linux 的“交换空间”等。From:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98","TextMarkTextContent":"https://zh.wikipedia.org/wiki/虚拟内存"}]}]},{"ID":"20240201213924-ozcmp4y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213924-ozcmp4y","updated":"20240201213924"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"局部性原理"}]},{"ID":"20240201213925-xhmmjic","Type":"NodeParagraph","Properties":{"id":"20240201213925-xhmmjic","updated":"20240201213925"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ：要想更好地理解虚拟内存技术，必须要知道计算机中著名的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"局部性原理"},{"Type":"NodeText","Data":"。另外，局部性原理既适用于程序结构，也适用于数据结构，是非常重要的一个概念。"}]},{"ID":"20240201213926-fwrtewd","Type":"NodeParagraph","Properties":{"id":"20240201213926-fwrtewd","updated":"20240201213926"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ：局部性原理是虚拟内存技术的基础，正是因为程序运行具有局部性原理，才可以只装入部分程序到内存就开始运行。"}]},{"ID":"20240201213927-j93twj5","Type":"NodeBlockquote","Properties":{"id":"20240201213927-j93twj5","updated":"20240201213927"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213928-i7t4ecj","Type":"NodeParagraph","Properties":{"id":"20240201213928-i7t4ecj","updated":"20240201213928"},"Children":[{"Type":"NodeText","Data":"以下内容摘自《计算机操作系统教程》 第 4 章存储器管理。"}]}]},{"ID":"20240201213929-2kazrfr","Type":"NodeParagraph","Properties":{"id":"20240201213929-2kazrfr","updated":"20240201213929"},"Children":[{"Type":"NodeText","Data":"早在 1968 年的时候，就有人指出我们的程序在执行的时候往往呈现局部性规律，也就是说在某个较短的时间段内，程序执行局限于某一小部分，程序访问的存储空间也局限于某个区域。"}]},{"ID":"20240201213930-y2lsk47","Type":"NodeParagraph","Properties":{"id":"20240201213930-y2lsk47","updated":"20240201213930"},"Children":[{"Type":"NodeText","Data":"局部性原理表现在以下两个方面："}]},{"ID":"20240201213931-v71klf7","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213931-v71klf7","updated":"20240201213931"},"Children":[{"ID":"20240201213932-99ljyn1","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213932-99ljyn1","updated":"20240201213932"},"Children":[{"ID":"20240201213933-911jl9d","Type":"NodeParagraph","Properties":{"id":"20240201213933-911jl9d","updated":"20240201213933"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间局部性"},{"Type":"NodeText","Data":" ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。"}]}]},{"ID":"20240201213934-ktrdk2z","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213934-ktrdk2z","updated":"20240201213934"},"Children":[{"ID":"20240201213935-88zrllo","Type":"NodeParagraph","Properties":{"id":"20240201213935-88zrllo","updated":"20240201213935"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"空间局部性"},{"Type":"NodeText","Data":" ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。"}]}]}]},{"ID":"20240201213936-3lobzjf","Type":"NodeParagraph","Properties":{"id":"20240201213936-3lobzjf","updated":"20240201213936"},"Children":[{"Type":"NodeText","Data":"时间局部性是通过将近来使用的指令和数据保存到高速缓存存储器中，并使用高速缓存的层次结构实现。空间局部性通常是使用较大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。虚拟内存技术实际上就是建立了 “内存一外存”的两级存储器的结构，利用局部性原理实现髙速缓存。"}]},{"ID":"20240201213937-mwgv755","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213937-mwgv755","updated":"20240201213937"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟存储器"}]},{"ID":"20240201213938-8sn63hl","Type":"NodeBlockquote","Properties":{"id":"20240201213938-8sn63hl","updated":"20240201213938"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213939-n0uzqbs","Type":"NodeParagraph","Properties":{"id":"20240201213939-n0uzqbs","updated":"20240201213939"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"勘误：虚拟存储器又叫做虚拟内存，都是 Virtual Memory 的翻译，属于同一个概念。"}]}]},{"ID":"20240201213940-qitz589","Type":"NodeParagraph","Properties":{"id":"20240201213940-qitz589","updated":"20240201213940"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"都说了虚拟内存了。你再讲讲"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s strong","TextMarkTextContent":"虚拟存储器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"s","TextMarkTextContent":"把！"}]},{"ID":"20240201213941-wjz1bxj","Type":"NodeParagraph","Properties":{"id":"20240201213941-wjz1bxj","updated":"20240201213941"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213942-ofd8r42","Type":"NodeBlockquote","Properties":{"id":"20240201213942-ofd8r42","updated":"20240201213942"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213943-qevqsaw","Type":"NodeParagraph","Properties":{"id":"20240201213943-qevqsaw","updated":"20240201213943"},"Children":[{"Type":"NodeText","Data":"这部分内容来自："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/13.html","TextMarkTextContent":"王道考研操作系统知识点整理"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213944-9vvsxf0","Type":"NodeParagraph","Properties":{"id":"20240201213944-9vvsxf0","updated":"20240201213944"},"Children":[{"Type":"NodeText","Data":"基于局部性原理，在程序装入时，可以将程序的一部分装入内存，而将其他部分留在外存，就可以启动程序执行。由于外存往往比内存大很多，所以我们运行的软件的内存大小实际上是可以比计算机系统实际的内存大小大的。在程序执行过程中，当所访问的信息不在内存时，由操作系统将所需要的部分调入内存，然后继续执行程序。另一方面，操作系统将内存中暂时不使用的内容换到外存上，从而腾出空间存放将要调入内存的信息。这样，计算机好像为用户提供了一个比实际内存大得多的存储器——"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟存储器"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213945-vply3nz","Type":"NodeParagraph","Properties":{"id":"20240201213945-vply3nz","updated":"20240201213945"},"Children":[{"Type":"NodeText","Data":"实际上，我觉得虚拟内存同样是一种时间换空间的策略，你用 CPU 的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的空间来支持程序的运行。不得不感叹，程序世界几乎不是时间换空间就是空间换时间。"}]},{"ID":"20240201213946-zzgqrto","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213946-zzgqrto","updated":"20240201213946"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"虚拟内存的技术实现"}]},{"ID":"20240201213947-0qpuplg","Type":"NodeParagraph","Properties":{"id":"20240201213947-0qpuplg","updated":"20240201213947"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存技术的实现呢？"}]},{"ID":"20240201213948-0za8ufy","Type":"NodeParagraph","Properties":{"id":"20240201213948-0za8ufy","updated":"20240201213948"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟内存的实现需要建立在离散分配的内存管理方式的基础上。"},{"Type":"NodeText","Data":" 虚拟内存的实现有以下三种方式："}]},{"ID":"20240201213949-mlsa5iw","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213949-mlsa5iw","updated":"20240201213949"},"Children":[{"ID":"20240201213950-z3ab4rl","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213950-z3ab4rl","updated":"20240201213950"},"Children":[{"ID":"20240201213951-bmcklkk","Type":"NodeParagraph","Properties":{"id":"20240201213951-bmcklkk","updated":"20240201213951"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求分页存储管理"},{"Type":"NodeText","Data":" ：建立在分页管理之上，为了支持虚拟存储器功能而增加了请求调页功能和页面置换功能。请求分页是目前最常用的一种实现虚拟存储器的方法。请求分页存储管理系统中，在作业开始运行之前，仅装入当前要执行的部分段即可运行。假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调入到主存，同时操作系统也可以将暂时不用的页面置换到外存中。"}]}]},{"ID":"20240201213952-d1pygab","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213952-d1pygab","updated":"20240201213952"},"Children":[{"ID":"20240201213953-lkyfrqi","Type":"NodeParagraph","Properties":{"id":"20240201213953-lkyfrqi","updated":"20240201213953"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求分段存储管理"},{"Type":"NodeText","Data":" ：建立在分段存储管理之上，增加了请求调段功能、分段置换功能。请求分段储存管理方式就如同请求分页储存管理方式一样，在作业开始运行之前，仅装入当前要执行的部分段即可运行；在执行过程中，可使用请求调入中断动态装入要访问但又不在内存的程序段；当内存空间已满，而又需要装入新的段时，根据置换功能适当调出某个段，以便腾出空间而装入新的段。"}]}]},{"ID":"20240201213954-qvqfrxv","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213954-qvqfrxv","updated":"20240201213954"},"Children":[{"ID":"20240201213955-ffc5o8n","Type":"NodeParagraph","Properties":{"id":"20240201213955-ffc5o8n","updated":"20240201213955"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求段页式存储管理"}]}]}]},{"ID":"20240201213956-3hkso4l","Type":"NodeParagraph","Properties":{"id":"20240201213956-3hkso4l","updated":"20240201213956"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这里多说一下？很多人容易搞混请求分页与分页存储管理，两者有何不同呢？"}]},{"ID":"20240201213957-e3wgnfh","Type":"NodeParagraph","Properties":{"id":"20240201213957-e3wgnfh","updated":"20240201213957"},"Children":[{"Type":"NodeText","Data":"请求分页存储管理建立在分页管理之上。他们的根本区别是是否将程序全部所需的全部地址空间都装入主存，这也是请求分页存储管理可以提供虚拟内存的原因，我们在上面已经分析过了。"}]},{"ID":"20240201213958-xsjitk2","Type":"NodeParagraph","Properties":{"id":"20240201213958-xsjitk2","updated":"20240201213958"},"Children":[{"Type":"NodeText","Data":"它们之间的根本区别在于是否将一作业的全部地址空间同时装入主存。请求分页存储管理不要求将作业全部地址空间同时装入主存。基于这一点，请求分页存储管理可以提供虚存，而分页存储管理却不能提供虚存。"}]},{"ID":"20240201213959-pmpbwl6","Type":"NodeParagraph","Properties":{"id":"20240201213959-pmpbwl6","updated":"20240201213959"},"Children":[{"Type":"NodeText","Data":"不管是上面那种实现方式，我们一般都需要："}]},{"ID":"20240201213960-947s2ep","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213960-947s2ep","updated":"20240201213960"},"Children":[{"ID":"20240201213961-8pk8pk7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213961-8pk8pk7","updated":"20240201213961"},"Children":[{"ID":"20240201213962-5h7gp3a","Type":"NodeParagraph","Properties":{"id":"20240201213962-5h7gp3a","updated":"20240201213962"},"Children":[{"Type":"NodeText","Data":"一定容量的内存和外存：在载入程序的时候，只需要将程序的一部分装入内存，而将其他部分留在外存，然后程序就可以执行了；"}]}]},{"ID":"20240201213963-k4ogic7","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213963-k4ogic7","updated":"20240201213963"},"Children":[{"ID":"20240201213964-7szxvya","Type":"NodeParagraph","Properties":{"id":"20240201213964-7szxvya","updated":"20240201213964"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺页中断"},{"Type":"NodeText","Data":"：如果"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"需执行的指令或访问的数据尚未在内存"},{"Type":"NodeText","Data":"（称为缺页或缺段），则由处理器通知操作系统将相应的页面或段"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"调入到内存"},{"Type":"NodeText","Data":"，然后继续执行程序；"}]}]},{"ID":"20240201213965-0j1inwl","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213965-0j1inwl","updated":"20240201213965"},"Children":[{"ID":"20240201213966-nwoe7h9","Type":"NodeParagraph","Properties":{"id":"20240201213966-nwoe7h9","updated":"20240201213966"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虚拟地址空间"},{"Type":"NodeText","Data":" ：逻辑地址到物理地址的变换。"}]}]}]},{"ID":"20240201213967-3z6d6zm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213967-3z6d6zm","updated":"20240201213967"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"页面置换算法"}]},{"ID":"20240201213968-i76zutl","Type":"NodeParagraph","Properties":{"id":"20240201213968-i76zutl","updated":"20240201213968"},"Children":[{"Type":"NodeText","Data":"👨‍💻"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"面试官"},{"Type":"NodeText","Data":" ：虚拟内存管理很重要的一个概念就是页面置换算法。那你说一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页面置换算法的作用?常见的页面置换算法有哪些?"}]},{"ID":"20240201213969-iem55yh","Type":"NodeParagraph","Properties":{"id":"20240201213969-iem55yh","updated":"20240201213969"},"Children":[{"Type":"NodeText","Data":"🙋 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213970-nnh9ukb","Type":"NodeBlockquote","Properties":{"id":"20240201213970-nnh9ukb","updated":"20240201213970"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213971-fb54ybh","Type":"NodeParagraph","Properties":{"id":"20240201213971-fb54ybh","updated":"20240201213971"},"Children":[{"Type":"NodeText","Data":"这个题目经常作为笔试题出现，网上已经给出了很不错的回答，我这里只是总结整理了一下。"}]}]},{"ID":"20240201213972-ekrv3sl","Type":"NodeParagraph","Properties":{"id":"20240201213972-ekrv3sl","updated":"20240201213972"},"Children":[{"Type":"NodeText","Data":"地址映射过程中，若在页面中发现所要访问的页面不在内存中，则发生缺页中断 。"}]},{"ID":"20240201213973-l28nefu","Type":"NodeBlockquote","Properties":{"id":"20240201213973-l28nefu","updated":"20240201213973"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213974-1o815ky","Type":"NodeParagraph","Properties":{"id":"20240201213974-1o815ky","updated":"20240201213974"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺页中断"},{"Type":"NodeText","Data":" 就是要访问的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页"},{"Type":"NodeText","Data":"不在主存，需要操作系统将其调入主存后再进行访问。 在这个时候，被内存映射的文件实际上成了一个分页交换文件。"}]}]},{"ID":"20240201213975-eexks8m","Type":"NodeParagraph","Properties":{"id":"20240201213975-eexks8m","updated":"20240201213975"},"Children":[{"Type":"NodeText","Data":"当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。用来选择淘汰哪一页的规则叫做页面置换算法，我们可以把页面置换算法看成是淘汰页面的规则。"}]},{"ID":"20240201213976-82zkm2j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213976-82zkm2j","updated":"20240201213976"},"Children":[{"ID":"20240201213977-pk278zd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213977-pk278zd","updated":"20240201213977"},"Children":[{"ID":"20240201213978-izelp0j","Type":"NodeParagraph","Properties":{"id":"20240201213978-izelp0j","updated":"20240201213978"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"OPT 页面置换算法（最佳页面置换算法）"},{"Type":"NodeText","Data":" ：最佳(Optimal, OPT)置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面,这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现。一般作为衡量其他置换算法的方法。"}]}]},{"ID":"20240201213979-s6e6pyz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213979-s6e6pyz","updated":"20240201213979"},"Children":[{"ID":"20240201213980-rptg5ja","Type":"NodeParagraph","Properties":{"id":"20240201213980-rptg5ja","updated":"20240201213980"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"FIFO（First In First Out） 页面置换算法（先进先出页面置换算法）"},{"Type":"NodeText","Data":" : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。"}]}]},{"ID":"20240201213981-k8ldezx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213981-k8ldezx","updated":"20240201213981"},"Children":[{"ID":"20240201213982-74zq2u4","Type":"NodeParagraph","Properties":{"id":"20240201213982-74zq2u4","updated":"20240201213982"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"LRU （Least Recently Used）页面置换算法（最近最久未使用页面置换算法）"},{"Type":"NodeText","Data":" ：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。"}]}]},{"ID":"20240201213983-xwr7li8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213983-xwr7li8","updated":"20240201213983"},"Children":[{"ID":"20240201213984-psh0zuj","Type":"NodeParagraph","Properties":{"id":"20240201213984-psh0zuj","updated":"20240201213984"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"LFU （Least Frequently Used）页面置换算法（最少使用页面置换算法）"},{"Type":"NodeText","Data":" : 该置换算法选择在之前时期使用最少的页面作为淘汰页。"}]}]}]}]}