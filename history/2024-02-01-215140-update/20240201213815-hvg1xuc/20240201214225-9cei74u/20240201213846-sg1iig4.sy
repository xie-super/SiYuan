{"ID":"20240201213846-sg1iig4","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213846-sg1iig4","title":"g-2分布式id","updated":"20240201213846"},"Children":[{"ID":"20240201213847-64lr1do","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213847-64lr1do","updated":"20240201213847"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.3 分布式 id"}]},{"ID":"20240201213848-xdjwdxu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213848-xdjwdxu","updated":"20240201213848"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式 ID 介绍"}]},{"ID":"20240201213849-6943tcz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213849-6943tcz","updated":"20240201213849"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 ID？"}]},{"ID":"20240201213850-4ya4afs","Type":"NodeParagraph","Properties":{"id":"20240201213850-4ya4afs","updated":"20240201213850"},"Children":[{"Type":"NodeText","Data":"日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。"}]},{"ID":"20240201213851-5b8z7oi","Type":"NodeParagraph","Properties":{"id":"20240201213851-5b8z7oi","updated":"20240201213851"},"Children":[{"Type":"NodeText","Data":"我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应"}]},{"ID":"20240201213852-1nsp3s8","Type":"NodeParagraph","Properties":{"id":"20240201213852-1nsp3s8","updated":"20240201213852"},"Children":[{"Type":"NodeText","Data":"简单来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ID 就是数据的唯一标识"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213853-tvnhdxr","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213853-tvnhdxr","updated":"20240201213853"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是分布式 ID？"}]},{"ID":"20240201213854-l7wbl81","Type":"NodeParagraph","Properties":{"id":"20240201213854-l7wbl81","updated":"20240201213854"},"Children":[{"Type":"NodeText","Data":"分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。"}]},{"ID":"20240201213855-co3hp9t","Type":"NodeParagraph","Properties":{"id":"20240201213855-co3hp9t","updated":"20240201213855"},"Children":[{"Type":"NodeText","Data":"我简单举一个分库分表的例子。"}]},{"ID":"20240201213856-hgvvmms","Type":"NodeParagraph","Properties":{"id":"20240201213856-hgvvmms","updated":"20240201213856"},"Children":[{"Type":"NodeText","Data":"我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。"}]},{"ID":"20240201213857-l99jvxz","Type":"NodeParagraph","Properties":{"id":"20240201213857-l99jvxz","updated":"20240201213857"},"Children":[{"Type":"NodeText","Data":"在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们如何为不同的数据节点生成全局唯一主键呢？"}]},{"ID":"20240201213858-1yvv0ox","Type":"NodeParagraph","Properties":{"id":"20240201213858-1yvv0ox","updated":"20240201213858"},"Children":[{"Type":"NodeText","Data":"这个时候就需要生成"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式 ID"},{"Type":"NodeText","Data":"了。"}]},{"ID":"20240201213859-e2la4it","Type":"NodeParagraph","Properties":{"id":"20240201213859-e2la4it","updated":"20240201213859"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213860-8dzg8k0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213860-8dzg8k0","updated":"20240201213860"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式 ID 需要满足哪些要求?"}]},{"ID":"20240201213861-ag2sysa","Type":"NodeParagraph","Properties":{"id":"20240201213861-ag2sysa","updated":"20240201213861"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/distributed-id-requirements.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213862-altchpc","Type":"NodeParagraph","Properties":{"id":"20240201213862-altchpc","updated":"20240201213862"},"Children":[{"Type":"NodeText","Data":"分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。"}]},{"ID":"20240201213863-yllo5uo","Type":"NodeParagraph","Properties":{"id":"20240201213863-yllo5uo","updated":"20240201213863"},"Children":[{"Type":"NodeText","Data":"一个最基本的分布式 ID 需要满足下面这些要求："}]},{"ID":"20240201213864-r4501bf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213864-r4501bf","updated":"20240201213864"},"Children":[{"ID":"20240201213865-9u6ixam","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213865-9u6ixam","updated":"20240201213865"},"Children":[{"ID":"20240201213866-jbwoytx","Type":"NodeParagraph","Properties":{"id":"20240201213866-jbwoytx","updated":"20240201213866"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全局唯一"},{"Type":"NodeText","Data":" ：ID 的全局唯一性肯定是首先要满足的！"}]}]},{"ID":"20240201213867-4qzb4yg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213867-4qzb4yg","updated":"20240201213867"},"Children":[{"ID":"20240201213868-jj65rqt","Type":"NodeParagraph","Properties":{"id":"20240201213868-jj65rqt","updated":"20240201213868"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高性能"},{"Type":"NodeText","Data":" ： 分布式 ID 的生成速度要快，对本地资源消耗要小。"}]}]},{"ID":"20240201213869-q4xxuui","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213869-q4xxuui","updated":"20240201213869"},"Children":[{"ID":"20240201213870-n25em09","Type":"NodeParagraph","Properties":{"id":"20240201213870-n25em09","updated":"20240201213870"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高可用"},{"Type":"NodeText","Data":" ：生成分布式 ID 的服务要保证可用性无限接近于 100%。"}]}]},{"ID":"20240201213871-4gaphs6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213871-4gaphs6","updated":"20240201213871"},"Children":[{"ID":"20240201213872-ycdbr5z","Type":"NodeParagraph","Properties":{"id":"20240201213872-ycdbr5z","updated":"20240201213872"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方便易用"},{"Type":"NodeText","Data":" ：拿来即用，使用方便，快速接入！"}]}]}]},{"ID":"20240201213873-76btswa","Type":"NodeParagraph","Properties":{"id":"20240201213873-76btswa","updated":"20240201213873"},"Children":[{"Type":"NodeText","Data":"除了这些之外，一个比较好的分布式 ID 还应保证："}]},{"ID":"20240201213874-2w3996l","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213874-2w3996l","updated":"20240201213874"},"Children":[{"ID":"20240201213875-0jmdui6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213875-0jmdui6","updated":"20240201213875"},"Children":[{"ID":"20240201213876-xkiqhq1","Type":"NodeParagraph","Properties":{"id":"20240201213876-xkiqhq1","updated":"20240201213876"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"安全"},{"Type":"NodeText","Data":" ：ID 中不包含敏感信息。"}]}]},{"ID":"20240201213877-qi7phft","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213877-qi7phft","updated":"20240201213877"},"Children":[{"ID":"20240201213878-t4eozce","Type":"NodeParagraph","Properties":{"id":"20240201213878-t4eozce","updated":"20240201213878"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有序递增"},{"Type":"NodeText","Data":" ：如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。"}]}]},{"ID":"20240201213879-i784ba0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213879-i784ba0","updated":"20240201213879"},"Children":[{"ID":"20240201213880-68zd02r","Type":"NodeParagraph","Properties":{"id":"20240201213880-68zd02r","updated":"20240201213880"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有具体的业务含义"},{"Type":"NodeText","Data":" ：生成的 ID 如果能有具体的业务含义，可以让定位问题以及开发更透明化（通过 ID 就能确定是哪个业务）。"}]}]},{"ID":"20240201213881-fpxcv0j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213881-fpxcv0j","updated":"20240201213881"},"Children":[{"ID":"20240201213882-zaqzz70","Type":"NodeParagraph","Properties":{"id":"20240201213882-zaqzz70","updated":"20240201213882"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"独立部署"},{"Type":"NodeText","Data":" ：也就是分布式系统单独有一个发号器服务，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。"}]}]}]},{"ID":"20240201213883-gn3vmbv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213883-gn3vmbv","updated":"20240201213883"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式 ID 常见解决方案有哪些？"}]},{"ID":"20240201213884-8rakok3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213884-8rakok3","updated":"20240201213884"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据库"}]},{"ID":"20240201213885-xnr7hro","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213885-xnr7hro","updated":"20240201213885"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据库主键自增"}]},{"ID":"20240201213886-orzre60","Type":"NodeParagraph","Properties":{"id":"20240201213886-orzre60","updated":"20240201213886"},"Children":[{"Type":"NodeText","Data":"这种方式就比较简单直白了，就是通过关系型数据库的自增主键产生来唯一的 ID。"}]},{"ID":"20240201213887-lw1t4ip","Type":"NodeParagraph","Properties":{"id":"20240201213887-lw1t4ip","updated":"20240201213887"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"数据库主键自增","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/the-primary-key-of-the-database-increases-automatically.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213888-2q7myfj","Type":"NodeParagraph","Properties":{"id":"20240201213888-2q7myfj","updated":"20240201213888"},"Children":[{"Type":"NodeText","Data":"以 MySQL 举例，我们通过下面的方式即可。"}]},{"ID":"20240201213889-c2r6t7x","Type":"NodeParagraph","Properties":{"id":"20240201213889-c2r6t7x","updated":"20240201213889"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.创建一个数据库表。"}]},{"ID":"20240201213890-5hwpr7e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213890-5hwpr7e","updated":"20240201213890"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CREATE TABLE `sequence_id` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `stub` char(10) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `stub` (`stub`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213891-p5npvay","Type":"NodeParagraph","Properties":{"id":"20240201213891-p5npvay","updated":"20240201213891"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"stub"},{"Type":"NodeText","Data":" 字段无意义，只是为了占位，便于我们插入或者修改数据。并且，给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"stub"},{"Type":"NodeText","Data":" 字段创建了唯一索引，保证其唯一性。"}]},{"ID":"20240201213892-j8dlcmz","Type":"NodeParagraph","Properties":{"id":"20240201213892-j8dlcmz","updated":"20240201213892"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"replace into"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 来插入数据。"}]},{"ID":"20240201213893-ht6uet5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213893-ht6uet5","updated":"20240201213893"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"BEGIN;\nREPLACE INTO sequence_id (stub) VALUES ('stub');\nSELECT LAST_INSERT_ID();\nCOMMIT;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213894-s3y2wp6","Type":"NodeParagraph","Properties":{"id":"20240201213894-s3y2wp6","updated":"20240201213894"},"Children":[{"Type":"NodeText","Data":"插入数据这里，我们没有使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"insert into"},{"Type":"NodeText","Data":" 而是使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"replace into"},{"Type":"NodeText","Data":" 来插入数据，具体步骤是这样的："}]},{"ID":"20240201213895-943ar3i","Type":"NodeParagraph","Properties":{"id":"20240201213895-943ar3i","updated":"20240201213895"},"Children":[{"Type":"NodeText","Data":"1)第一步： 尝试把数据插入到表中。"}]},{"ID":"20240201213896-5eeg7c7","Type":"NodeParagraph","Properties":{"id":"20240201213896-5eeg7c7","updated":"20240201213896"},"Children":[{"Type":"NodeText","Data":"2)第二步： 如果主键或唯一索引字段出现重复数据错误而插入失败时，先从表中删除含有重复关键字值的冲突行，然后再次尝试把数据插入到表中。"}]},{"ID":"20240201213897-fpwud2w","Type":"NodeParagraph","Properties":{"id":"20240201213897-fpwud2w","updated":"20240201213897"},"Children":[{"Type":"NodeText","Data":"这种方式的优缺点也比较明显："}]},{"ID":"20240201213898-dbl1e0c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213898-dbl1e0c","updated":"20240201213898"},"Children":[{"ID":"20240201213899-m3o7fg5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213899-m3o7fg5","updated":"20240201213899"},"Children":[{"ID":"20240201213900-9eb5fv9","Type":"NodeParagraph","Properties":{"id":"20240201213900-9eb5fv9","updated":"20240201213900"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":" ：实现起来比较简单、ID 有序递增、存储消耗空间小"}]}]},{"ID":"20240201213901-iqdwhil","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213901-iqdwhil","updated":"20240201213901"},"Children":[{"ID":"20240201213902-9z1sqev","Type":"NodeParagraph","Properties":{"id":"20240201213902-9z1sqev","updated":"20240201213902"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":" ： 支持的并发量不大、存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）、每次获取 ID 都要访问一次数据库（增加了对数据库的压力，获取速度也慢）"}]}]}]},{"ID":"20240201213903-oedwv4x","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213903-oedwv4x","updated":"20240201213903"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据库号段模式"}]},{"ID":"20240201213904-ibm4kk7","Type":"NodeParagraph","Properties":{"id":"20240201213904-ibm4kk7","updated":"20240201213904"},"Children":[{"Type":"NodeText","Data":"数据库主键自增这种模式，每次获取 ID 都要访问一次数据库，ID 需求比较大的时候，肯定是不行的。"}]},{"ID":"20240201213905-ryfm00x","Type":"NodeParagraph","Properties":{"id":"20240201213905-ryfm00x","updated":"20240201213905"},"Children":[{"Type":"NodeText","Data":"如果我们可以批量获取，然后存在在内存里面，需要用到的时候，直接从内存里面拿就舒服了！这也就是我们说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基于数据库的号段模式来生成分布式 ID。"}]},{"ID":"20240201213906-1b4zzb8","Type":"NodeParagraph","Properties":{"id":"20240201213906-1b4zzb8","updated":"20240201213906"},"Children":[{"Type":"NodeText","Data":"数据库的号段模式也是目前比较主流的一种分布式 ID 生成方式。像滴滴开源的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D","TextMarkTextContent":"Tinyid"},{"Type":"NodeText","Data":" 就是基于这种方式来做的。不过，TinyId 使用了双号段缓存、增加多 db 支持等方式来进一步优化。"}]},{"ID":"20240201213907-wobv44f","Type":"NodeParagraph","Properties":{"id":"20240201213907-wobv44f","updated":"20240201213907"},"Children":[{"Type":"NodeText","Data":"以 MySQL 举例，我们通过下面的方式即可。"}]},{"ID":"20240201213908-b9sg6tx","Type":"NodeParagraph","Properties":{"id":"20240201213908-b9sg6tx","updated":"20240201213908"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.创建一个数据库表。"}]},{"ID":"20240201213909-6ggh9qv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213909-6ggh9qv","updated":"20240201213909"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CREATE TABLE `sequence_id_generator` (\n  `id` int(10) NOT NULL,\n  `current_max_id` bigint(20) NOT NULL COMMENT '当前最大id',\n  `step` int(10) NOT NULL COMMENT '号段的长度',\n  `version` int(20) NOT NULL COMMENT '版本号',\n  `biz_type`    int(20) NOT NULL COMMENT '业务类型',\n   PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213910-zinczd6","Type":"NodeParagraph","Properties":{"id":"20240201213910-zinczd6","updated":"20240201213910"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"current_max_id"},{"Type":"NodeText","Data":" 字段和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"step"},{"Type":"NodeText","Data":"字段主要用于获取批量 ID，获取的批量 id 为： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"current_max_id ~ current_max_id+step"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213911-14ac1ln","Type":"NodeParagraph","Properties":{"id":"20240201213911-14ac1ln","updated":"20240201213911"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"数据库号段模式","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/database-number-segment-mode.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213912-vy4lfdu","Type":"NodeParagraph","Properties":{"id":"20240201213912-vy4lfdu","updated":"20240201213912"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"version"},{"Type":"NodeText","Data":" 字段主要用于解决并发问题（乐观锁）,"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"biz_type"},{"Type":"NodeText","Data":" 主要用于表示业务类型。"}]},{"ID":"20240201213913-uvgmt19","Type":"NodeParagraph","Properties":{"id":"20240201213913-uvgmt19","updated":"20240201213913"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.先插入一行数据。"}]},{"ID":"20240201213914-ctgkd0p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213914-ctgkd0p","updated":"20240201213914"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"INSERT INTO `sequence_id_generator` (`id`, `current_max_id`, `step`, `version`, `biz_type`)\nVALUES\n\t(1, 0, 100, 0, 101);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213915-hle6n6u","Type":"NodeParagraph","Properties":{"id":"20240201213915-hle6n6u","updated":"20240201213915"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3.通过 SELECT 获取指定业务下的批量唯一 ID"}]},{"ID":"20240201213916-qbd22sa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213916-qbd22sa","updated":"20240201213916"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"SELECT `current_max_id`, `step`,`version` FROM `sequence_id_generator` where `biz_type` = 101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213917-x02scqy","Type":"NodeParagraph","Properties":{"id":"20240201213917-x02scqy","updated":"20240201213917"},"Children":[{"Type":"NodeText","Data":"结果："}]},{"ID":"20240201213918-kpp9d8f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213918-kpp9d8f","updated":"20240201213918"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t0\t100\t0\t101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213919-d73budk","Type":"NodeParagraph","Properties":{"id":"20240201213919-d73budk","updated":"20240201213919"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4.不够用的话，更新之后重新 SELECT 即可。"}]},{"ID":"20240201213920-wkaevb8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c3Fs","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213920-wkaevb8","updated":"20240201213920"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c3Fs","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"UPDATE sequence_id_generator SET current_max_id = 0+100, version=version+1 WHERE version = 0  AND `biz_type` = 101\nSELECT `current_max_id`, `step`,`version` FROM `sequence_id_generator` where `biz_type` = 101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213921-fncge0s","Type":"NodeParagraph","Properties":{"id":"20240201213921-fncge0s","updated":"20240201213921"},"Children":[{"Type":"NodeText","Data":"结果："}]},{"ID":"20240201213922-scheyu0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213922-scheyu0","updated":"20240201213922"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"id\tcurrent_max_id\tstep\tversion\tbiz_type\n1\t100\t100\t1\t101\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213923-o4y51hj","Type":"NodeParagraph","Properties":{"id":"20240201213923-o4y51hj","updated":"20240201213923"},"Children":[{"Type":"NodeText","Data":"相比于数据库主键自增的方式，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库的号段模式对于数据库的访问次数更少，数据库压力更小。"}]},{"ID":"20240201213924-l404yly","Type":"NodeParagraph","Properties":{"id":"20240201213924-l404yly","updated":"20240201213924"},"Children":[{"Type":"NodeText","Data":"另外，为了避免单点问题，你可以从使用主从模式来提高可用性。"}]},{"ID":"20240201213925-mg62mm6","Type":"NodeParagraph","Properties":{"id":"20240201213925-mg62mm6","updated":"20240201213925"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库号段模式的优缺点:"}]},{"ID":"20240201213926-9r00lqs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213926-9r00lqs","updated":"20240201213926"},"Children":[{"ID":"20240201213927-j7wq6dt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213927-j7wq6dt","updated":"20240201213927"},"Children":[{"ID":"20240201213928-s2fbfc2","Type":"NodeParagraph","Properties":{"id":"20240201213928-s2fbfc2","updated":"20240201213928"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":" ：ID 有序递增、存储消耗空间小"}]}]},{"ID":"20240201213929-0fqgk6g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213929-0fqgk6g","updated":"20240201213929"},"Children":[{"ID":"20240201213930-y5j2c1x","Type":"NodeParagraph","Properties":{"id":"20240201213930-y5j2c1x","updated":"20240201213930"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":" ：存在数据库单点问题（可以使用数据库集群解决，不过增加了复杂度）、ID 没有具体业务含义、安全问题（比如根据订单 ID 的递增规律就能推算出每天的订单量，商业机密啊！ ）"}]}]}]},{"ID":"20240201213931-747a171","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213931-747a171","updated":"20240201213931"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"NoSQL"}]},{"ID":"20240201213932-w0zyscc","Type":"NodeParagraph","Properties":{"id":"20240201213932-w0zyscc","updated":"20240201213932"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/nosql-distributed-id.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213933-jc7oq1h","Type":"NodeParagraph","Properties":{"id":"20240201213933-jc7oq1h","updated":"20240201213933"},"Children":[{"Type":"NodeText","Data":"一般情况下，NoSQL 方案使用 Redis 多一些。我们通过 Redis 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"incr"},{"Type":"NodeText","Data":" 命令即可实现对 id 原子顺序递增。"}]},{"ID":"20240201213934-l2vt57l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213934-l2vt57l","updated":"20240201213934"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e set sequence_id_biz_type 1\nOK\n127.0.0.1:6379\u003e incr sequence_id_biz_type\n(integer) 2\n127.0.0.1:6379\u003e get sequence_id_biz_type\n\"2\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213935-fgi4r87","Type":"NodeParagraph","Properties":{"id":"20240201213935-fgi4r87","updated":"20240201213935"},"Children":[{"Type":"NodeText","Data":"为了提高可用性和并发，我们可以使用 Redis Cluster。Redis Cluster 是 Redis 官方提供的 Redis 集群解决方案（3.0+版本）。"}]},{"ID":"20240201213936-pjwcjx1","Type":"NodeParagraph","Properties":{"id":"20240201213936-pjwcjx1","updated":"20240201213936"},"Children":[{"Type":"NodeText","Data":"除了 Redis Cluster 之外，你也可以使用开源的 Redis 集群方案"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/CodisLabs/codis","TextMarkTextContent":"Codis"},{"Type":"NodeText","Data":" （大规模集群比如上百个节点的时候比较推荐）。"}]},{"ID":"20240201213937-el16dwu","Type":"NodeParagraph","Properties":{"id":"20240201213937-el16dwu","updated":"20240201213937"},"Children":[{"Type":"NodeText","Data":"除了高可用和并发之外，我们知道 Redis 基于内存，我们需要持久化数据，避免重启机器或者机器故障后数据丢失。Redis 支持两种不同的持久化方式："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快照（snapshotting，RDB）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"只追加文件（append-only file, AOF）"},{"Type":"NodeText","Data":"。 并且，Redis 4.0 开始支持 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RDB 和 AOF 的混合持久化"},{"Type":"NodeText","Data":"（默认关闭，可以通过配置项 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aof-use-rdb-preamble"},{"Type":"NodeText","Data":" 开启）。"}]},{"ID":"20240201213938-lsllooy","Type":"NodeParagraph","Properties":{"id":"20240201213938-lsllooy","updated":"20240201213938"},"Children":[{"Type":"NodeText","Data":"关于 Redis 持久化，我这里就不过多介绍。不了解这部分内容的小伙伴，可以看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://snailclimb.gitee.io/javaguide/#/docs/database/Redis/redis-all","TextMarkTextContent":"JavaGuide 对于 Redis 知识点的总结"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213939-8ul3eva","Type":"NodeParagraph","Properties":{"id":"20240201213939-8ul3eva","updated":"20240201213939"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 方案的优缺点："}]},{"ID":"20240201213940-wegkytj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213940-wegkytj","updated":"20240201213940"},"Children":[{"ID":"20240201213941-cgtqxhq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213941-cgtqxhq","updated":"20240201213941"},"Children":[{"ID":"20240201213942-y1scvc4","Type":"NodeParagraph","Properties":{"id":"20240201213942-y1scvc4","updated":"20240201213942"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":" ： 性能不错并且生成的 ID 是有序递增的"}]}]},{"ID":"20240201213943-3wywiwn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213943-3wywiwn","updated":"20240201213943"},"Children":[{"ID":"20240201213944-681p6s1","Type":"NodeParagraph","Properties":{"id":"20240201213944-681p6s1","updated":"20240201213944"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":" ： 和数据库主键自增方案的缺点类似"}]}]}]},{"ID":"20240201213945-2waengg","Type":"NodeParagraph","Properties":{"id":"20240201213945-2waengg","updated":"20240201213945"},"Children":[{"Type":"NodeText","Data":"除了 Redis 之外，MongoDB ObjectId 经常也会被拿来当做分布式 ID 的解决方案。"}]},{"ID":"20240201213946-nolj4jj","Type":"NodeParagraph","Properties":{"id":"20240201213946-nolj4jj","updated":"20240201213946"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/mongodb9-objectId-distributed-id.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213947-hvq6cu3","Type":"NodeParagraph","Properties":{"id":"20240201213947-hvq6cu3","updated":"20240201213947"},"Children":[{"Type":"NodeText","Data":"MongoDB ObjectId 一共需要 12 个字节存储："}]},{"ID":"20240201213948-ezk0q66","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213948-ezk0q66","updated":"20240201213948"},"Children":[{"ID":"20240201213949-ilb8hii","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213949-ilb8hii","updated":"20240201213949"},"Children":[{"ID":"20240201213950-cy5dvix","Type":"NodeParagraph","Properties":{"id":"20240201213950-cy5dvix","updated":"20240201213950"},"Children":[{"Type":"NodeText","Data":"0~3：时间戳"}]}]},{"ID":"20240201213951-rpw21cf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213951-rpw21cf","updated":"20240201213951"},"Children":[{"ID":"20240201213952-qkk2mrq","Type":"NodeParagraph","Properties":{"id":"20240201213952-qkk2mrq","updated":"20240201213952"},"Children":[{"Type":"NodeText","Data":"3~6： 代表机器 ID"}]}]},{"ID":"20240201213953-fokkgu5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213953-fokkgu5","updated":"20240201213953"},"Children":[{"ID":"20240201213954-62puagj","Type":"NodeParagraph","Properties":{"id":"20240201213954-62puagj","updated":"20240201213954"},"Children":[{"Type":"NodeText","Data":"7~8：机器进程 ID"}]}]},{"ID":"20240201213955-m6ail94","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213955-m6ail94","updated":"20240201213955"},"Children":[{"ID":"20240201213956-0nnd0jr","Type":"NodeParagraph","Properties":{"id":"20240201213956-0nnd0jr","updated":"20240201213956"},"Children":[{"Type":"NodeText","Data":"9~11 ：自增值"}]}]}]},{"ID":"20240201213957-wahfcim","Type":"NodeParagraph","Properties":{"id":"20240201213957-wahfcim","updated":"20240201213957"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MongoDB 方案的优缺点："}]},{"ID":"20240201213958-t2ra6im","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213958-t2ra6im","updated":"20240201213958"},"Children":[{"ID":"20240201213959-zl790pk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213959-zl790pk","updated":"20240201213959"},"Children":[{"ID":"20240201213960-x6u2esv","Type":"NodeParagraph","Properties":{"id":"20240201213960-x6u2esv","updated":"20240201213960"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":" ： 性能不错并且生成的 ID 是有序递增的"}]}]},{"ID":"20240201213961-lchrplp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213961-lchrplp","updated":"20240201213961"},"Children":[{"ID":"20240201213962-g7juylu","Type":"NodeParagraph","Properties":{"id":"20240201213962-g7juylu","updated":"20240201213962"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":" ： 需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID） 、有安全性问题（ID 生成有规律性）"}]}]}]},{"ID":"20240201213963-u0o0qin","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213963-u0o0qin","updated":"20240201213963"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"算法"}]},{"ID":"20240201213964-0bd8mlg","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213964-0bd8mlg","updated":"20240201213964"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"UUID"}]},{"ID":"20240201213965-u6q2py5","Type":"NodeParagraph","Properties":{"id":"20240201213965-u6q2py5","updated":"20240201213965"},"Children":[{"Type":"NodeText","Data":"UUID 是 Universally Unique Identifier（通用唯一标识符） 的缩写。UUID 包含 32 个 16 进制数字（8-4-4-4-12）。"}]},{"ID":"20240201213966-hid7w9r","Type":"NodeParagraph","Properties":{"id":"20240201213966-hid7w9r","updated":"20240201213966"},"Children":[{"Type":"NodeText","Data":"JDK 就提供了现成的生成 UUID 的方法，一行代码就行了。"}]},{"ID":"20240201213967-x6mjwxx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213967-x6mjwxx","updated":"20240201213967"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//输出示例：cb4a9ede-fa5e-4585-b9bb-d60bce986eaa\nUUID.randomUUID()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213968-3yc69bg","Type":"NodeParagraph","Properties":{"id":"20240201213968-3yc69bg","updated":"20240201213968"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tools.ietf.org/html/rfc4122","TextMarkTextContent":"RFC 4122"},{"Type":"NodeText","Data":" 中关于 UUID 的示例是这样的："}]},{"ID":"20240201213969-fa9gjoq","Type":"NodeParagraph","Properties":{"id":"20240201213969-fa9gjoq","updated":"20240201213969"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/rfc-4122-uuid.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213970-hpjb3lj","Type":"NodeParagraph","Properties":{"id":"20240201213970-hpjb3lj","updated":"20240201213970"},"Children":[{"Type":"NodeText","Data":"我们这里重点关注一下这个 Version(版本)，不同的版本对应的 UUID 的生成规则是不同的。"}]},{"ID":"20240201213971-dqepmf6","Type":"NodeParagraph","Properties":{"id":"20240201213971-dqepmf6","updated":"20240201213971"},"Children":[{"Type":"NodeText","Data":"5 种不同的 Version(版本)值分别对应的含义（参考"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81","TextMarkTextContent":"维基百科对于 UUID 的介绍"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201213972-hqv5lgy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213972-hqv5lgy","updated":"20240201213972"},"Children":[{"ID":"20240201213973-rzfpcin","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213973-rzfpcin","updated":"20240201213973"},"Children":[{"ID":"20240201213974-m0tc7hn","Type":"NodeParagraph","Properties":{"id":"20240201213974-m0tc7hn","updated":"20240201213974"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 1"},{"Type":"NodeText","Data":" : UUID 是根据时间和节点 ID（通常是 MAC 地址）生成；"}]}]},{"ID":"20240201213975-2wky8ft","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213975-2wky8ft","updated":"20240201213975"},"Children":[{"ID":"20240201213976-wikk0ri","Type":"NodeParagraph","Properties":{"id":"20240201213976-wikk0ri","updated":"20240201213976"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 2"},{"Type":"NodeText","Data":" : UUID 是根据标识符（通常是组或用户 ID）、时间和节点 ID 生成；"}]}]},{"ID":"20240201213977-oojz8jt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213977-oojz8jt","updated":"20240201213977"},"Children":[{"ID":"20240201213978-lp632l8","Type":"NodeParagraph","Properties":{"id":"20240201213978-lp632l8","updated":"20240201213978"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 3、版本 5"},{"Type":"NodeText","Data":" : 版本 5 - 确定性 UUID 通过散列（hashing）名字空间（namespace）标识符和名称生成；"}]}]},{"ID":"20240201213979-f5zcohi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213979-f5zcohi","updated":"20240201213979"},"Children":[{"ID":"20240201213980-81eatfj","Type":"NodeParagraph","Properties":{"id":"20240201213980-81eatfj","updated":"20240201213980"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"版本 4"},{"Type":"NodeText","Data":" : UUID 使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/随机性","TextMarkTextContent":"随机性"},{"Type":"NodeText","Data":"或"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/伪随机性","TextMarkTextContent":"伪随机性"},{"Type":"NodeText","Data":"生成。"}]}]}]},{"ID":"20240201213981-m9f77ce","Type":"NodeParagraph","Properties":{"id":"20240201213981-m9f77ce","updated":"20240201213981"},"Children":[{"Type":"NodeText","Data":"下面是 Version 1 版本下生成的 UUID 的示例："}]},{"ID":"20240201213982-dcf5qsr","Type":"NodeParagraph","Properties":{"id":"20240201213982-dcf5qsr","updated":"20240201213982"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Version 1 版本下生成的 UUID 的示例","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/version1-uuid.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213983-beer4dh","Type":"NodeParagraph","Properties":{"id":"20240201213983-beer4dh","updated":"20240201213983"},"Children":[{"Type":"NodeText","Data":"JDK 中通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UUID"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"randomUUID()"},{"Type":"NodeText","Data":" 方法生成的 UUID 的版本默认为 4。"}]},{"ID":"20240201213984-pwtmqki","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213984-pwtmqki","updated":"20240201213984"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"UUID uuid = UUID.randomUUID();\nint version = uuid.version();// 4\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213985-egqa7cc","Type":"NodeParagraph","Properties":{"id":"20240201213985-egqa7cc","updated":"20240201213985"},"Children":[{"Type":"NodeText","Data":"另外，Variant(变体)也有 4 种不同的值，这种值分别对应不同的含义。这里就不介绍了，貌似平时也不怎么需要关注。"}]},{"ID":"20240201213986-vsct7a8","Type":"NodeParagraph","Properties":{"id":"20240201213986-vsct7a8","updated":"20240201213986"},"Children":[{"Type":"NodeText","Data":"需要用到的时候，去看看维基百科对于 UUID 的 Variant(变体) 相关的介绍即可。"}]},{"ID":"20240201213987-vup2pe3","Type":"NodeParagraph","Properties":{"id":"20240201213987-vup2pe3","updated":"20240201213987"},"Children":[{"Type":"NodeText","Data":"从上面的介绍中可以看出，UUID 可以保证唯一性，因为其生成规则包括 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，计算机基于这些规则生成的 UUID 是肯定不会重复的。"}]},{"ID":"20240201213988-2nyg9x7","Type":"NodeParagraph","Properties":{"id":"20240201213988-2nyg9x7","updated":"20240201213988"},"Children":[{"Type":"NodeText","Data":"虽然，UUID 可以做到全局唯一性，但是，我们一般很少会使用它。"}]},{"ID":"20240201213989-kh1xwd2","Type":"NodeParagraph","Properties":{"id":"20240201213989-kh1xwd2","updated":"20240201213989"},"Children":[{"Type":"NodeText","Data":"比如使用 UUID 作为 MySQL 数据库主键的时候就非常不合适："}]},{"ID":"20240201213990-aryw4kw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213990-aryw4kw","updated":"20240201213990"},"Children":[{"ID":"20240201213991-2easkoe","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213991-2easkoe","updated":"20240201213991"},"Children":[{"ID":"20240201213992-11bbk26","Type":"NodeParagraph","Properties":{"id":"20240201213992-11bbk26","updated":"20240201213992"},"Children":[{"Type":"NodeText","Data":"数据库主键要尽量越短越好，而 UUID 的消耗的存储空间比较大（32 个字符串，128 位）。"}]}]},{"ID":"20240201213993-gsev8jx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213993-gsev8jx","updated":"20240201213993"},"Children":[{"ID":"20240201213994-o8ltrr3","Type":"NodeParagraph","Properties":{"id":"20240201213994-o8ltrr3","updated":"20240201213994"},"Children":[{"Type":"NodeText","Data":"UUID 是无顺序的，InnoDB 引擎下，数据库主键的无序性会严重影响数据库性能。"}]}]}]},{"ID":"20240201213995-jazcofx","Type":"NodeParagraph","Properties":{"id":"20240201213995-jazcofx","updated":"20240201213995"},"Children":[{"Type":"NodeText","Data":"最后，我们再简单分析一下 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"UUID 的优缺点"},{"Type":"NodeText","Data":" （面试的时候可能会被问到的哦！） :"}]},{"ID":"20240201213996-2ihbdoa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213996-2ihbdoa","updated":"20240201213996"},"Children":[{"ID":"20240201213997-nlwu3px","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213997-nlwu3px","updated":"20240201213997"},"Children":[{"ID":"20240201213998-g3e0dr9","Type":"NodeParagraph","Properties":{"id":"20240201213998-g3e0dr9","updated":"20240201213998"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":" ：生成速度比较快、简单易用"}]}]},{"ID":"20240201213999-rxglecg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213999-rxglecg","updated":"20240201213999"},"Children":[{"ID":"20240201214000-84hy4np","Type":"NodeParagraph","Properties":{"id":"20240201214000-84hy4np","updated":"20240201214000"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":" ： 存储消耗空间大（32 个字符串，128 位） 、 不安全（基于 MAC 地址生成 UUID 的算法会造成 MAC 地址泄露)、无序（非自增）、没有具体业务含义、需要解决重复 ID 问题（当机器时间不对的情况下，可能导致会产生重复 ID）"}]}]}]},{"ID":"20240201214001-3xnkds5","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201214001-3xnkds5","updated":"20240201214001"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Snowflake(雪花算法)"}]},{"ID":"20240201214002-fxixqyo","Type":"NodeParagraph","Properties":{"id":"20240201214002-fxixqyo","updated":"20240201214002"},"Children":[{"Type":"NodeText","Data":"Snowflake 是 Twitter 开源的分布式 ID 生成算法。Snowflake 由 64 bit 的二进制数字组成，这 64bit 的二进制被分成了几部分，每一部分存储的数据都有特定的含义："}]},{"ID":"20240201214003-j4m7mon","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214003-j4m7mon","updated":"20240201214003"},"Children":[{"ID":"20240201214004-mo8jepl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214004-mo8jepl","updated":"20240201214004"},"Children":[{"ID":"20240201214005-dxglit4","Type":"NodeParagraph","Properties":{"id":"20240201214005-dxglit4","updated":"20240201214005"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 0 位"},{"Type":"NodeText","Data":"： 符号位（标识正负），始终为 0，没有用，不用管。"}]}]},{"ID":"20240201214006-7om3mk7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214006-7om3mk7","updated":"20240201214006"},"Children":[{"ID":"20240201214007-42donxa","Type":"NodeParagraph","Properties":{"id":"20240201214007-42donxa","updated":"20240201214007"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 1~41 位"},{"Type":"NodeText","Data":" ：一共 41 位，用来表示时间戳，单位是毫秒，可以支撑 2 ^41 毫秒（约 69 年）"}]}]},{"ID":"20240201214008-yht626t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214008-yht626t","updated":"20240201214008"},"Children":[{"ID":"20240201214009-oaowt0t","Type":"NodeParagraph","Properties":{"id":"20240201214009-oaowt0t","updated":"20240201214009"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 42~52 位"},{"Type":"NodeText","Data":" ：一共 10 位，一般来说，前 5 位表示机房 ID，后 5 位表示机器 ID（实际项目中可以根据实际情况调整）。这样就可以区分不同集群/机房的节点。"}]}]},{"ID":"20240201214010-225wcr0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214010-225wcr0","updated":"20240201214010"},"Children":[{"ID":"20240201214011-okkxqsk","Type":"NodeParagraph","Properties":{"id":"20240201214011-okkxqsk","updated":"20240201214011"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"第 53~64 位"},{"Type":"NodeText","Data":" ：一共 12 位，用来表示序列号。 序列号为自增值，代表单台机器每毫秒能够产生的最大 ID 数(2^12 = 4096),也就是说单台机器每毫秒最多可以生成 4096 个 唯一 ID。"}]}]}]},{"ID":"20240201214012-ns8i9y4","Type":"NodeParagraph","Properties":{"id":"20240201214012-ns8i9y4","updated":"20240201214012"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Snowflake 示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/snowflake-distributed-id-schematic-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214013-dq485q1","Type":"NodeParagraph","Properties":{"id":"20240201214013-dq485q1","updated":"20240201214013"},"Children":[{"Type":"NodeText","Data":"如果你想要使用 Snowflake 算法的话，一般不需要你自己再造轮子。有很多基于 Snowflake 算法的开源实现比如美团 的 Leaf、百度的 UidGenerator，并且这些开源实现对原有的 Snowflake 算法进行了优化。"}]},{"ID":"20240201214014-psh1rym","Type":"NodeParagraph","Properties":{"id":"20240201214014-psh1rym","updated":"20240201214014"},"Children":[{"Type":"NodeText","Data":"另外，在实际项目中，我们一般也会对 Snowflake 算法进行改造，最常见的就是在 Snowflake 算法生成的 ID 中加入业务类型信息。"}]},{"ID":"20240201214015-hz63txo","Type":"NodeParagraph","Properties":{"id":"20240201214015-hz63txo","updated":"20240201214015"},"Children":[{"Type":"NodeText","Data":"我们再来看看 Snowflake 算法的优缺点 ："}]},{"ID":"20240201214016-5atvfop","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214016-5atvfop","updated":"20240201214016"},"Children":[{"ID":"20240201214017-vy9b6i3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214017-vy9b6i3","updated":"20240201214017"},"Children":[{"ID":"20240201214018-d579vkp","Type":"NodeParagraph","Properties":{"id":"20240201214018-d579vkp","updated":"20240201214018"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优点"},{"Type":"NodeText","Data":" ：生成速度比较快、生成的 ID 有序递增、比较灵活（可以对 Snowflake 算法进行简单的改造比如加入业务 ID）"}]}]},{"ID":"20240201214019-e6wtw52","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214019-e6wtw52","updated":"20240201214019"},"Children":[{"ID":"20240201214020-0nbze3m","Type":"NodeParagraph","Properties":{"id":"20240201214020-0nbze3m","updated":"20240201214020"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缺点"},{"Type":"NodeText","Data":" ： 需要解决重复 ID 问题（依赖时间，当机器时间不对的情况下，可能导致会产生重复 ID）。"}]}]}]},{"ID":"20240201214021-fwr21dy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214021-fwr21dy","updated":"20240201214021"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"开源框架"}]},{"ID":"20240201214022-z9w6h97","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201214022-z9w6h97","updated":"20240201214022"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"UidGenerator(百度)"}]},{"ID":"20240201214023-sfiah4t","Type":"NodeParagraph","Properties":{"id":"20240201214023-sfiah4t","updated":"20240201214023"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/baidu/uid-generator","TextMarkTextContent":"UidGenerator"},{"Type":"NodeText","Data":" 是百度开源的一款基于 Snowflake(雪花算法)的唯一 ID 生成器。"}]},{"ID":"20240201214024-mttc74b","Type":"NodeParagraph","Properties":{"id":"20240201214024-mttc74b","updated":"20240201214024"},"Children":[{"Type":"NodeText","Data":"不过，UidGenerator 对 Snowflake(雪花算法)进行了改进，生成的唯一 ID 组成如下。"}]},{"ID":"20240201214025-nk67wo8","Type":"NodeParagraph","Properties":{"id":"20240201214025-nk67wo8","updated":"20240201214025"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/uidgenerator-distributed-id-schematic-diagram.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214026-6ot3pgn","Type":"NodeParagraph","Properties":{"id":"20240201214026-6ot3pgn","updated":"20240201214026"},"Children":[{"Type":"NodeText","Data":"可以看出，和原始 Snowflake(雪花算法)生成的唯一 ID 的组成不太一样。并且，上面这些参数我们都可以自定义。"}]},{"ID":"20240201214027-odnfygu","Type":"NodeParagraph","Properties":{"id":"20240201214027-odnfygu","updated":"20240201214027"},"Children":[{"Type":"NodeText","Data":"UidGenerator 官方文档中的介绍如下："}]},{"ID":"20240201214028-kepkc19","Type":"NodeParagraph","Properties":{"id":"20240201214028-kepkc19","updated":"20240201214028"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/distributed-system/uidgenerator-introduction-official-documents.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214029-9ujfzuj","Type":"NodeParagraph","Properties":{"id":"20240201214029-9ujfzuj","updated":"20240201214029"},"Children":[{"Type":"NodeText","Data":"自 18 年后，UidGenerator 就基本没有再维护了，我这里也不过多介绍。想要进一步了解的朋友，可以看看 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md","TextMarkTextContent":"UidGenerator 的官方介绍"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201214030-7gjfxkt","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201214030-7gjfxkt","updated":"20240201214030"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Leaf(美团)"}]},{"ID":"20240201214031-9wotcv9","Type":"NodeParagraph","Properties":{"id":"20240201214031-9wotcv9","updated":"20240201214031"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/Meituan-Dianping/Leaf","TextMarkTextContent":"Leaf"},{"Type":"NodeText","Data":" 是美团开源的一个分布式 ID 解决方案 。这个项目的名字 Leaf（树叶） 起源于德国哲学家、数学家莱布尼茨的一句话： “There are no two identical leaves in the world”（世界上没有两片相同的树叶） 。这名字起得真心挺不错的，有点文艺青年那味了！"}]},{"ID":"20240201214032-hc81vds","Type":"NodeParagraph","Properties":{"id":"20240201214032-hc81vds","updated":"20240201214032"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/20210422145229617.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214033-zifjgy5","Type":"NodeParagraph","Properties":{"id":"20240201214033-zifjgy5","updated":"20240201214033"},"Children":[{"Type":"NodeText","Data":"Leaf 提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"号段模式"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Snowflake(雪花算法)"},{"Type":"NodeText","Data":" 这两种模式来生成分布式 ID。并且，它支持双号段，还解决了雪花 ID 系统时钟回拨问题。不过，时钟问题的解决需要弱依赖于 Zookeeper 。"}]},{"ID":"20240201214034-0n2dizn","Type":"NodeParagraph","Properties":{"id":"20240201214034-0n2dizn","updated":"20240201214034"},"Children":[{"Type":"NodeText","Data":"Leaf 的诞生主要是为了解决美团各个业务线生成分布式 ID 的方法多种多样以及不可靠的问题。"}]},{"ID":"20240201214035-sodoqx1","Type":"NodeParagraph","Properties":{"id":"20240201214035-sodoqx1","updated":"20240201214035"},"Children":[{"Type":"NodeText","Data":"Leaf 对原有的号段模式进行改进，比如它这里增加了双号段避免获取 DB 在获取号段的时候阻塞请求获取 ID 的线程。简单来说，就是我一个号段还没用完之前，我自己就主动提前去获取下一个号段（图片来自于美团官方文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://tech.meituan.com/2017/04/21/mt-leaf.html","TextMarkTextContent":"《Leaf——美团点评分布式 ID 生成系统》"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240201214036-4jj2r8l","Type":"NodeParagraph","Properties":{"id":"20240201214036-4jj2r8l","updated":"20240201214036"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/20210422144846724.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214037-sm081oo","Type":"NodeParagraph","Properties":{"id":"20240201214037-sm081oo","updated":"20240201214037"},"Children":[{"Type":"NodeText","Data":"根据项目 README 介绍，在 4C8G VM 基础上，通过公司 RPC 方式调用，QPS 压测结果近 5w/s，TP999 1ms。"}]},{"ID":"20240201214038-uq7309r","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201214038-uq7309r","updated":"20240201214038"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Tinyid(滴滴)"}]},{"ID":"20240201214039-ixuwlt4","Type":"NodeParagraph","Properties":{"id":"20240201214039-ixuwlt4","updated":"20240201214039"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/didi/tinyid","TextMarkTextContent":"Tinyid"},{"Type":"NodeText","Data":" 是滴滴开源的一款基于数据库号段模式的唯一 ID 生成器。"}]},{"ID":"20240201214040-e7alp5y","Type":"NodeParagraph","Properties":{"id":"20240201214040-e7alp5y","updated":"20240201214040"},"Children":[{"Type":"NodeText","Data":"数据库号段模式的原理我们在上面已经介绍过了。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Tinyid 有哪些亮点呢？"}]},{"ID":"20240201214041-uhik0rl","Type":"NodeParagraph","Properties":{"id":"20240201214041-uhik0rl","updated":"20240201214041"},"Children":[{"Type":"NodeText","Data":"为了搞清楚这个问题，我们先来看看基于数据库号段模式的简单架构方案。（图片来自于 Tinyid 的官方 wiki:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/didi/tinyid/wiki/tinyid%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D","TextMarkTextContent":"《Tinyid 原理介绍》"},{"Type":"NodeText","Data":"）"}]},{"ID":"20240201214042-ktynxfh","Type":"NodeParagraph","Properties":{"id":"20240201214042-ktynxfh","updated":"20240201214042"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oscimg.oschina.net/oscnet/up-4afc0e45c0c86ba5ad645d023dce11e53c2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214043-f7z9cb1","Type":"NodeParagraph","Properties":{"id":"20240201214043-f7z9cb1","updated":"20240201214043"},"Children":[{"Type":"NodeText","Data":"在这种架构模式下，我们通过 HTTP 请求向发号器服务申请唯一 ID。负载均衡 router 会把我们的请求送往其中的一台 tinyid-server。"}]},{"ID":"20240201214044-l2zaatd","Type":"NodeParagraph","Properties":{"id":"20240201214044-l2zaatd","updated":"20240201214044"},"Children":[{"Type":"NodeText","Data":"这种方案有什么问题呢？在我看来（Tinyid 官方 wiki 也有介绍到），主要由下面这 2 个问题："}]},{"ID":"20240201214045-o4jcfpy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214045-o4jcfpy","updated":"20240201214045"},"Children":[{"ID":"20240201214046-hh34yk7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214046-hh34yk7","updated":"20240201214046"},"Children":[{"ID":"20240201214047-ipd53yb","Type":"NodeParagraph","Properties":{"id":"20240201214047-ipd53yb","updated":"20240201214047"},"Children":[{"Type":"NodeText","Data":"获取新号段的情况下，程序获取唯一 ID 的速度比较慢。"}]}]},{"ID":"20240201214048-c737pn6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214048-c737pn6","updated":"20240201214048"},"Children":[{"ID":"20240201214049-bn9nwr7","Type":"NodeParagraph","Properties":{"id":"20240201214049-bn9nwr7","updated":"20240201214049"},"Children":[{"Type":"NodeText","Data":"需要保证 DB 高可用，这个是比较麻烦且耗费资源的。"}]}]}]},{"ID":"20240201214050-2b053ym","Type":"NodeParagraph","Properties":{"id":"20240201214050-2b053ym","updated":"20240201214050"},"Children":[{"Type":"NodeText","Data":"除此之外，HTTP 调用也存在网络开销。"}]},{"ID":"20240201214051-rrk9wi1","Type":"NodeParagraph","Properties":{"id":"20240201214051-rrk9wi1","updated":"20240201214051"},"Children":[{"Type":"NodeText","Data":"Tinyid 的原理比较简单，其架构如下图所示："}]},{"ID":"20240201214052-ajkd1ep","Type":"NodeParagraph","Properties":{"id":"20240201214052-ajkd1ep","updated":"20240201214052"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://oscimg.oschina.net/oscnet/up-53f74cd615178046d6c04fe50513fee74ce.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214053-s5k1o1y","Type":"NodeParagraph","Properties":{"id":"20240201214053-s5k1o1y","updated":"20240201214053"},"Children":[{"Type":"NodeText","Data":"相比于基于数据库号段模式的简单架构方案，Tinyid 方案主要做了下面这些优化："}]},{"ID":"20240201214054-u9srwrs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214054-u9srwrs","updated":"20240201214054"},"Children":[{"ID":"20240201214055-n79c2aq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214055-n79c2aq","updated":"20240201214055"},"Children":[{"ID":"20240201214056-a4jp2qy","Type":"NodeParagraph","Properties":{"id":"20240201214056-a4jp2qy","updated":"20240201214056"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"双号段缓存"},{"Type":"NodeText","Data":" ：为了避免在获取新号段的情况下，程序获取唯一 ID 的速度比较慢。 Tinyid 中的号段在用到一定程度的时候，就会去异步加载下一个号段，保证内存中始终有可用号段。"}]}]},{"ID":"20240201214057-3n01kn6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214057-3n01kn6","updated":"20240201214057"},"Children":[{"ID":"20240201214058-iloe8ci","Type":"NodeParagraph","Properties":{"id":"20240201214058-iloe8ci","updated":"20240201214058"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增加多 db 支持"},{"Type":"NodeText","Data":" ：支持多个 DB，并且，每个 DB 都能生成唯一 ID，提高了可用性。"}]}]},{"ID":"20240201214059-mj3l3lc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214059-mj3l3lc","updated":"20240201214059"},"Children":[{"ID":"20240201214060-lsureq5","Type":"NodeParagraph","Properties":{"id":"20240201214060-lsureq5","updated":"20240201214060"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增加 tinyid-client"},{"Type":"NodeText","Data":" ：纯本地操作，无 HTTP 请求消耗，性能和可用性都有很大提升。"}]}]}]},{"ID":"20240201214061-jr9db29","Type":"NodeParagraph","Properties":{"id":"20240201214061-jr9db29","updated":"20240201214061"},"Children":[{"Type":"NodeText","Data":"Tinyid 的优缺点这里就不分析了，结合数据库号段模式的优缺点和 Tinyid 的原理就能知道。"}]},{"ID":"20240201214062-33gv06h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214062-33gv06h","updated":"20240201214062"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201214063-d409gi5","Type":"NodeParagraph","Properties":{"id":"20240201214063-d409gi5","updated":"20240201214063"},"Children":[{"Type":"NodeText","Data":"通过这篇文章，我基本上已经把最常见的分布式 ID 生成方案都总结了一波。除了上面介绍的方式之外，像 ZooKeeper 这类中间件也可以帮助我们生成唯一 ID。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"没有银弹，一定要结合实际项目来选择最适合自己的方案。"}]},{"ID":"20240201214064-wplhvg4","Type":"NodeThematicBreak","Properties":{"id":"20240201214064-wplhvg4","updated":"20240201214064"}}]}