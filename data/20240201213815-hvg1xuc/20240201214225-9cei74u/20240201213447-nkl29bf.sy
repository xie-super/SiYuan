{"ID":"20240201213447-nkl29bf","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213447-nkl29bf","title":"d-2-redis","updated":"20240201213447"},"Children":[{"ID":"20240201213448-qag7cds","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213448-qag7cds","updated":"20240201213448"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.3 Redis"}]},{"ID":"20240201213449-yljmzey","Type":"NodeBlockquote","Properties":{"id":"20240201213449-yljmzey","updated":"20240201213449"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213450-ou0jj82","Type":"NodeParagraph","Properties":{"id":"20240201213450-ou0jj82","updated":"20240201213450"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/","TextMarkTextContent":"JavaGuide"},{"Type":"NodeText","Data":" ：「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！"}]}]},{"ID":"20240201213451-v2c9tn5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213451-v2c9tn5","updated":"20240201213451"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 基础"}]},{"ID":"20240201213452-mye5sx8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213452-mye5sx8","updated":"20240201213452"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"简单介绍一下 Redis!"}]},{"ID":"20240201213453-yeptz6m","Type":"NodeParagraph","Properties":{"id":"20240201213453-yeptz6m","updated":"20240201213453"},"Children":[{"Type":"NodeText","Data":"简单来说 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 就是一个使用 C 语言开发的数据库"},{"Type":"NodeText","Data":"，不过与传统数据库不同的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 的数据是存在内存中的"},{"Type":"NodeText","Data":" ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。"}]},{"ID":"20240201213454-1n23sh0","Type":"NodeParagraph","Properties":{"id":"20240201213454-1n23sh0","updated":"20240201213454"},"Children":[{"Type":"NodeText","Data":"另外，Redis 除了做缓存之外，也经常用来做分布式锁，甚至是消息队列。"}]},{"ID":"20240201213455-x3oihkx","Type":"NodeParagraph","Properties":{"id":"20240201213455-x3oihkx","updated":"20240201213455"},"Children":[{"Type":"NodeText","Data":"Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。"}]},{"ID":"20240201213456-1bl4hcj","Type":"NodeParagraph","Properties":{"id":"20240201213456-1bl4hcj","updated":"20240201213456"},"Children":[{"Type":"NodeText","Data":"你可以自己本机安装 Redis 或者通过 Redis 官网提供的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://try.redis.io/","TextMarkTextContent":"在线 Redis 环境"},{"Type":"NodeText","Data":"来实际体验 Redis。"}]},{"ID":"20240201213457-mpgs6b7","Type":"NodeParagraph","Properties":{"id":"20240201213457-mpgs6b7","updated":"20240201213457"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"try-redis","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/try.redis.io.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213458-ehadfob","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213458-ehadfob","updated":"20240201213458"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分布式缓存常见的技术选型方案有哪些？"}]},{"ID":"20240201213459-rllqqln","Type":"NodeParagraph","Properties":{"id":"20240201213459-rllqqln","updated":"20240201213459"},"Children":[{"Type":"NodeText","Data":"分布式缓存的话，使用的比较多的主要是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Memcached"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":"。不过，现在基本没有看过还有项目使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Memcached"},{"Type":"NodeText","Data":" 来做缓存，都是直接用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213460-ojtegw0","Type":"NodeParagraph","Properties":{"id":"20240201213460-ojtegw0","updated":"20240201213460"},"Children":[{"Type":"NodeText","Data":"Memcached 是分布式缓存最开始兴起的那会，比较常用的。后来，随着 Redis 的发展，大家慢慢都转而使用更加强大的 Redis 了。"}]},{"ID":"20240201213461-295gxvg","Type":"NodeParagraph","Properties":{"id":"20240201213461-295gxvg","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"分布式缓存主要解决的是单机缓存的容量受服务器限制并且无法保存通用信息的问题。因为，本地缓存只在当前服务里有效，比如如果你部署了两个相同的服务，他们两者之间的缓存数据是无法共同的。"}]},{"ID":"20240201213462-tltabln","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213462-tltabln","updated":"20240201213462"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"说一下 Redis 和 Memcached 的区别和共同点"}]},{"ID":"20240201213463-8moygf7","Type":"NodeParagraph","Properties":{"id":"20240201213463-8moygf7","updated":"20240201213463"},"Children":[{"Type":"NodeText","Data":"现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也越来越强大了！不过，了解 Redis 和 Memcached 的区别和共同点，有助于我们在做相应的技术选型的时候，能够做到有理有据！"}]},{"ID":"20240201213464-lkwcnm4","Type":"NodeParagraph","Properties":{"id":"20240201213464-lkwcnm4","updated":"20240201213464"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"共同点"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213465-09fm21d","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213465-09fm21d","updated":"20240201213465"},"Children":[{"ID":"20240201213466-q3l1xcd","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213466-q3l1xcd","updated":"20240201213466"},"Children":[{"ID":"20240201213467-fjysmam","Type":"NodeParagraph","Properties":{"id":"20240201213467-fjysmam","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"都是基于内存的数据库，一般都用来当做缓存使用。"}]}]},{"ID":"20240201213468-sx8tto2","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213468-sx8tto2","updated":"20240201213468"},"Children":[{"ID":"20240201213469-i057uiu","Type":"NodeParagraph","Properties":{"id":"20240201213469-i057uiu","updated":"20240201213469"},"Children":[{"Type":"NodeText","Data":"都有过期策略。"}]}]},{"ID":"20240201213470-0i9j7ad","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213470-0i9j7ad","updated":"20240201213470"},"Children":[{"ID":"20240201213471-nwb4p6u","Type":"NodeParagraph","Properties":{"id":"20240201213471-nwb4p6u","updated":"20240201213471"},"Children":[{"Type":"NodeText","Data":"两者的性能都非常高。"}]}]}]},{"ID":"20240201213472-aw9e6or","Type":"NodeParagraph","Properties":{"id":"20240201213472-aw9e6or","updated":"20240201213472"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"区别"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213473-yy64s1l","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213473-yy64s1l","updated":"20240201213473"},"Children":[{"ID":"20240201213474-8cyk0n9","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213474-8cyk0n9","updated":"20240201213474"},"Children":[{"ID":"20240201213475-jmilg74","Type":"NodeParagraph","Properties":{"id":"20240201213475-jmilg74","updated":"20240201213475"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 支持更丰富的数据类型（支持更复杂的应用场景）"},{"Type":"NodeText","Data":"。Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。Memcached 只支持最简单的 k/v 数据类型。"}]}]},{"ID":"20240201213476-6gne6oh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213476-6gne6oh","updated":"20240201213476"},"Children":[{"ID":"20240201213477-gmo5wob","Type":"NodeParagraph","Properties":{"id":"20240201213477-gmo5wob","updated":"20240201213477"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而 Memcached 把数据全部存在内存之中。"}]}]},{"ID":"20240201213478-a23a7ev","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213478-a23a7ev","updated":"20240201213478"},"Children":[{"ID":"20240201213479-iato1sq","Type":"NodeParagraph","Properties":{"id":"20240201213479-iato1sq","updated":"20240201213479"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 有灾难恢复机制。"},{"Type":"NodeText","Data":" 因为可以把缓存中的数据持久化到磁盘上。"}]}]},{"ID":"20240201213480-7afvux3","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213480-7afvux3","updated":"20240201213480"},"Children":[{"ID":"20240201213481-9e1hurz","Type":"NodeParagraph","Properties":{"id":"20240201213481-9e1hurz","updated":"20240201213481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 在服务器内存使用完之后，可以将不用的数据放到磁盘上。但是，Memcached 在服务器内存使用完之后，就会直接报异常。"}]}]},{"ID":"20240201213482-g3dgtbg","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213482-g3dgtbg","updated":"20240201213482"},"Children":[{"ID":"20240201213483-hs1o06h","Type":"NodeParagraph","Properties":{"id":"20240201213483-hs1o06h","updated":"20240201213483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 Redis 目前是原生支持 cluster 模式的。"}]}]},{"ID":"20240201213484-aoxmbv1","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213484-aoxmbv1","updated":"20240201213484"},"Children":[{"ID":"20240201213485-y4x1smh","Type":"NodeParagraph","Properties":{"id":"20240201213485-y4x1smh","updated":"20240201213485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Memcached 是多线程，非阻塞 IO 复用的网络模型；Redis 使用单线程的多路 IO 复用模型。"},{"Type":"NodeText","Data":" （Redis 6.0 引入了多线程 IO ）"}]}]},{"ID":"20240201213486-9p91rrr","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213486-9p91rrr","updated":"20240201213486"},"Children":[{"ID":"20240201213487-2kpr3tk","Type":"NodeParagraph","Properties":{"id":"20240201213487-2kpr3tk","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持。并且，Redis 支持更多的编程语言。"}]}]},{"ID":"20240201213488-zap6nxn","Type":"NodeListItem","Data":"8","ListData":{"Typ":1,"Tight":true,"Start":8,"Delimiter":46,"Padding":3,"Marker":"OA==","Num":8},"Properties":{"id":"20240201213488-zap6nxn","updated":"20240201213488"},"Children":[{"ID":"20240201213489-p3ygpm1","Type":"NodeParagraph","Properties":{"id":"20240201213489-p3ygpm1","updated":"20240201213489"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Memcached 过期数据的删除策略只用了惰性删除，而 Redis 同时使用了惰性删除与定期删除。"}]}]}]},{"ID":"20240201213490-bggyv88","Type":"NodeParagraph","Properties":{"id":"20240201213490-bggyv88","updated":"20240201213490"},"Children":[{"Type":"NodeText","Data":"相信看了上面的对比之后，我们已经没有什么理由可以选择使用 Memcached 来作为自己项目的分布式缓存了。"}]},{"ID":"20240201213491-h02wqbk","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213491-h02wqbk","updated":"20240201213491"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缓存数据的处理流程是怎样的？"}]},{"ID":"20240201213492-mty38nw","Type":"NodeParagraph","Properties":{"id":"20240201213492-mty38nw","updated":"20240201213492"},"Children":[{"Type":"NodeText","Data":"作为暖男一号，我给大家画了一个草图。"}]},{"ID":"20240201213493-o0vrnsw","Type":"NodeParagraph","Properties":{"id":"20240201213493-o0vrnsw","updated":"20240201213493"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"正常缓存处理流程","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/normal-cache-process.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213494-1xawip9","Type":"NodeParagraph","Properties":{"id":"20240201213494-1xawip9","updated":"20240201213494"},"Children":[{"Type":"NodeText","Data":"简单来说就是:"}]},{"ID":"20240201213495-oris4gi","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213495-oris4gi","updated":"20240201213495"},"Children":[{"ID":"20240201213496-eapev1i","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213496-eapev1i","updated":"20240201213496"},"Children":[{"ID":"20240201213497-28jsncr","Type":"NodeParagraph","Properties":{"id":"20240201213497-28jsncr","updated":"20240201213497"},"Children":[{"Type":"NodeText","Data":"如果用户请求的数据在缓存中就直接返回。"}]}]},{"ID":"20240201213498-sdk0kvd","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213498-sdk0kvd","updated":"20240201213498"},"Children":[{"ID":"20240201213499-yi0yhha","Type":"NodeParagraph","Properties":{"id":"20240201213499-yi0yhha","updated":"20240201213499"},"Children":[{"Type":"NodeText","Data":"缓存中不存在的话就看数据库中是否存在。"}]}]},{"ID":"20240201213500-w9m8zc5","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213500-w9m8zc5","updated":"20240201213500"},"Children":[{"ID":"20240201213501-nhrrxxf","Type":"NodeParagraph","Properties":{"id":"20240201213501-nhrrxxf","updated":"20240201213501"},"Children":[{"Type":"NodeText","Data":"数据库中存在的话就更新缓存中的数据。"}]}]},{"ID":"20240201213502-ztdqcmi","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213502-ztdqcmi","updated":"20240201213502"},"Children":[{"ID":"20240201213503-tgddw5a","Type":"NodeParagraph","Properties":{"id":"20240201213503-tgddw5a","updated":"20240201213503"},"Children":[{"Type":"NodeText","Data":"数据库中不存在的话就返回空数据。"}]}]}]},{"ID":"20240201213504-uqqs633","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213504-uqqs633","updated":"20240201213504"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"为什么要用 Redis/为什么要用缓存？"}]},{"ID":"20240201213505-tm478ro","Type":"NodeParagraph","Properties":{"id":"20240201213505-tm478ro","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"简单，来说使用缓存主要是为了提升用户体验以及应对更多的用户。"}]},{"ID":"20240201213506-kf9ykkw","Type":"NodeParagraph","Properties":{"id":"20240201213506-kf9ykkw","updated":"20240201213506"},"Children":[{"Type":"NodeText","Data":"下面我们主要从“高性能”和“高并发”这两点来看待这个问题。"}]},{"ID":"20240201213507-7t1ues2","Type":"NodeParagraph","Properties":{"id":"20240201213507-7t1ues2","updated":"20240201213507"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"使用缓存之后","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/after-using-the-cache.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213508-938rtwa","Type":"NodeParagraph","Properties":{"id":"20240201213508-938rtwa","updated":"20240201213508"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高性能"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213509-dxrc9j5","Type":"NodeParagraph","Properties":{"id":"20240201213509-dxrc9j5","updated":"20240201213509"},"Children":[{"Type":"NodeText","Data":"对照上面 👆 我画的图。我们设想这样的场景："}]},{"ID":"20240201213510-c7nri7n","Type":"NodeParagraph","Properties":{"id":"20240201213510-c7nri7n","updated":"20240201213510"},"Children":[{"Type":"NodeText","Data":"假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，那么我们就可以很放心地将该用户访问的数据存在缓存中。"}]},{"ID":"20240201213511-f1vwoka","Type":"NodeParagraph","Properties":{"id":"20240201213511-f1vwoka","updated":"20240201213511"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这样有什么好处呢？"},{"Type":"NodeText","Data":" 那就是保证用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。"}]},{"ID":"20240201213512-b6g1un0","Type":"NodeParagraph","Properties":{"id":"20240201213512-b6g1un0","updated":"20240201213512"},"Children":[{"Type":"NodeText","Data":"不过，要保持数据库和缓存中的数据的一致性。 如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！"}]},{"ID":"20240201213513-zw0qgds","Type":"NodeParagraph","Properties":{"id":"20240201213513-zw0qgds","updated":"20240201213513"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"高并发："}]},{"ID":"20240201213514-ppf8fqk","Type":"NodeParagraph","Properties":{"id":"20240201213514-ppf8fqk","updated":"20240201213514"},"Children":[{"Type":"NodeText","Data":"一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 redis 的情况，redis 集群的话会更高）。"}]},{"ID":"20240201213515-9a0ozky","Type":"NodeBlockquote","Properties":{"id":"20240201213515-9a0ozky","updated":"20240201213515"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213516-bpghs97","Type":"NodeParagraph","Properties":{"id":"20240201213516-bpghs97","updated":"20240201213516"},"Children":[{"Type":"NodeText","Data":"QPS（Query Per Second）：服务器每秒可以执行的查询次数；"}]}]},{"ID":"20240201213517-j4b49lq","Type":"NodeParagraph","Properties":{"id":"20240201213517-j4b49lq","updated":"20240201213517"},"Children":[{"Type":"NodeText","Data":"由此可见，直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高了系统整体的并发。"}]},{"ID":"20240201213518-oj6wsgw","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213518-oj6wsgw","updated":"20240201213518"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 除了做缓存，还能做什么？"}]},{"ID":"20240201213519-waaoaew","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213519-waaoaew","updated":"20240201213519"},"Children":[{"ID":"20240201213520-gns9dog","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213520-gns9dog","updated":"20240201213520"},"Children":[{"ID":"20240201213521-l9yortw","Type":"NodeParagraph","Properties":{"id":"20240201213521-l9yortw","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式锁"},{"Type":"NodeText","Data":" ： 通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/CbnPRfvq4m1sqo2uKI6qQw","TextMarkTextContent":"《分布式锁中的王者方案 - Redisson》"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213522-vie0dg5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213522-vie0dg5","updated":"20240201213522"},"Children":[{"ID":"20240201213523-fjxd327","Type":"NodeParagraph","Properties":{"id":"20240201213523-fjxd327","updated":"20240201213523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"限流"},{"Type":"NodeText","Data":" ：一般是通过 Redis + Lua 脚本的方式来实现限流。相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/kyFAWH3mVNJvurQDt4vchA","TextMarkTextContent":"《我司用了 6 年的 Redis 分布式限流器，可以说是非常厉害了！》"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213524-8okqy7i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213524-8okqy7i","updated":"20240201213524"},"Children":[{"ID":"20240201213525-0mv2lxt","Type":"NodeParagraph","Properties":{"id":"20240201213525-0mv2lxt","updated":"20240201213525"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"消息队列"},{"Type":"NodeText","Data":" ：Redis 自带的 list 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。"}]}]},{"ID":"20240201213526-jovcvtb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213526-jovcvtb","updated":"20240201213526"},"Children":[{"ID":"20240201213527-p54y6q7","Type":"NodeParagraph","Properties":{"id":"20240201213527-p54y6q7","updated":"20240201213527"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"复杂业务场景"},{"Type":"NodeText","Data":" ：通过 Redis 以及 Redis 扩展（比如 Redisson）提供的数据结构，我们可以很方便地完成很多复杂的业务场景比如通过 bitmap 统计活跃用户、通过 sorted set 维护排行榜。"}]}]},{"ID":"20240201213528-js1w29f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213528-js1w29f","updated":"20240201213528"},"Children":[{"ID":"20240201213529-1fkqxp9","Type":"NodeParagraph","Properties":{"id":"20240201213529-1fkqxp9","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"......"}]}]}]},{"ID":"20240201213530-31a576l","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213530-31a576l","updated":"20240201213530"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 可以做消息队列么？"}]},{"ID":"20240201213531-wi33sp4","Type":"NodeParagraph","Properties":{"id":"20240201213531-wi33sp4","updated":"20240201213531"},"Children":[{"Type":"NodeText","Data":"Redis 5.0 新增加的一个数据结构 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Stream"},{"Type":"NodeText","Data":" 可以用来做消息队列，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Stream"},{"Type":"NodeText","Data":" 支持："}]},{"ID":"20240201213532-u3t0qib","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213532-u3t0qib","updated":"20240201213532"},"Children":[{"ID":"20240201213533-is8lf3j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213533-is8lf3j","updated":"20240201213533"},"Children":[{"ID":"20240201213534-0zyaqwy","Type":"NodeParagraph","Properties":{"id":"20240201213534-0zyaqwy","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"发布 / 订阅模式"}]}]},{"ID":"20240201213535-knsxe5a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213535-knsxe5a","updated":"20240201213535"},"Children":[{"ID":"20240201213536-c19ds6r","Type":"NodeParagraph","Properties":{"id":"20240201213536-c19ds6r","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"按照消费者组进行消费"}]}]},{"ID":"20240201213537-jnuzdxm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213537-jnuzdxm","updated":"20240201213537"},"Children":[{"ID":"20240201213538-1x0cd9f","Type":"NodeParagraph","Properties":{"id":"20240201213538-1x0cd9f","updated":"20240201213538"},"Children":[{"Type":"NodeText","Data":"消息持久化（ RDB 和 AOF）"}]}]}]},{"ID":"20240201213539-04kvx19","Type":"NodeParagraph","Properties":{"id":"20240201213539-04kvx19","updated":"20240201213539"},"Children":[{"Type":"NodeText","Data":"不过，和专业的消息队列相比，还是有很多欠缺的地方比如消息丢失和堆积问题不好解决。因此，我们通常建议是不使用 Redis 来做消息队列的，你完全可以选择市面上比较成熟的一些消息队列比如 RocketMQ、Kafka。"}]},{"ID":"20240201213540-31h4a5t","Type":"NodeParagraph","Properties":{"id":"20240201213540-31h4a5t","updated":"20240201213540"},"Children":[{"Type":"NodeText","Data":"相关文章推荐："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javakeeper.starfish.ink/data-management/Redis/Redis-MQ.html","TextMarkTextContent":"Redis 消息队列的三种方案（List、Streams、Pub/Sub）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213541-s2wdipc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213541-s2wdipc","updated":"20240201213541"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 数据结构"}]},{"ID":"20240201213542-7pk3zxs","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213542-7pk3zxs","updated":"20240201213542"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 常用的数据结构有哪些？"}]},{"ID":"20240201213543-m1evvwy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213543-m1evvwy","updated":"20240201213543"},"Children":[{"ID":"20240201213544-zlg96bb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213544-zlg96bb","updated":"20240201213544"},"Children":[{"ID":"20240201213545-lzftm17","Type":"NodeParagraph","Properties":{"id":"20240201213545-lzftm17","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"5 种基础数据结构"},{"Type":"NodeText","Data":" ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。"}]}]},{"ID":"20240201213546-iphlsnc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213546-iphlsnc","updated":"20240201213546"},"Children":[{"ID":"20240201213547-s7vtkp9","Type":"NodeParagraph","Properties":{"id":"20240201213547-s7vtkp9","updated":"20240201213547"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3 种特殊数据结构"},{"Type":"NodeText","Data":" ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。"}]}]}]},{"ID":"20240201213548-84exwjw","Type":"NodeParagraph","Properties":{"id":"20240201213548-84exwjw","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"关于 5 种基础数据结构的详细介绍请看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/redis/redis-data-structures-01.html","TextMarkTextContent":"Redis 5 种基本数据结构详解"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213549-c75jv6z","Type":"NodeParagraph","Properties":{"id":"20240201213549-c75jv6z","updated":"20240201213549"},"Children":[{"Type":"NodeText","Data":"关于 3 种特殊数据结构的详细介绍请看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/redis/redis-data-structures-02.html","TextMarkTextContent":"Redis 3 种特殊数据结构详解"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213550-a6i2mbl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213550-a6i2mbl","updated":"20240201213550"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"String 的应用场景有哪些？"}]},{"ID":"20240201213551-xout4d0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213551-xout4d0","updated":"20240201213551"},"Children":[{"ID":"20240201213552-lpsy0t1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-lpsy0t1","updated":"20240201213552"},"Children":[{"ID":"20240201213553-ghibjwu","Type":"NodeParagraph","Properties":{"id":"20240201213553-ghibjwu","updated":"20240201213553"},"Children":[{"Type":"NodeText","Data":"常规数据（比如 session、token、、序列化后的对象）的缓存；"}]}]},{"ID":"20240201213554-e8tpc2m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213554-e8tpc2m","updated":"20240201213554"},"Children":[{"ID":"20240201213555-a9zbkyy","Type":"NodeParagraph","Properties":{"id":"20240201213555-a9zbkyy","updated":"20240201213555"},"Children":[{"Type":"NodeText","Data":"计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；"}]}]},{"ID":"20240201213556-u1btube","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213556-u1btube","updated":"20240201213556"},"Children":[{"ID":"20240201213557-ot3dbaj","Type":"NodeParagraph","Properties":{"id":"20240201213557-ot3dbaj","updated":"20240201213557"},"Children":[{"Type":"NodeText","Data":"分布式锁(利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SETNX key value"},{"Type":"NodeText","Data":" 命令可以实现一个最简易的分布式锁)；"}]}]},{"ID":"20240201213558-xlp1avz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213558-xlp1avz","updated":"20240201213558"},"Children":[{"ID":"20240201213559-f8oobs4","Type":"NodeParagraph","Properties":{"id":"20240201213559-f8oobs4","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"......"}]}]}]},{"ID":"20240201213560-i3xwi7f","Type":"NodeParagraph","Properties":{"id":"20240201213560-i3xwi7f","updated":"20240201213560"},"Children":[{"Type":"NodeText","Data":"关于 String 的详细介绍请看这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/database/redis/redis-data-structures-01.html","TextMarkTextContent":"Redis 5 种基本数据结构详解"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213561-094uc5i","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213561-094uc5i","updated":"20240201213561"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"String 还是 Hash 存储对象数据更好呢？"}]},{"ID":"20240201213562-ovjqyfe","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213562-ovjqyfe","updated":"20240201213562"},"Children":[{"ID":"20240201213563-2tg5mta","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213563-2tg5mta","updated":"20240201213563"},"Children":[{"ID":"20240201213564-ehhxnd2","Type":"NodeParagraph","Properties":{"id":"20240201213564-ehhxnd2","updated":"20240201213564"},"Children":[{"Type":"NodeText","Data":"String 存储的是序列化后的对象数据，存放的是整个对象。Hash 是对对象的每个字段单独存储，可以获取部分字段的信息，也可以修改或者添加部分字段，节省网络流量。如果对象中某些字段需要经常变动或者经常需要单独查询对象中的个别字段信息，Hash 就非常适合。"}]}]},{"ID":"20240201213565-d5swx2c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213565-d5swx2c","updated":"20240201213565"},"Children":[{"ID":"20240201213566-pzbw3o8","Type":"NodeParagraph","Properties":{"id":"20240201213566-pzbw3o8","updated":"20240201213566"},"Children":[{"Type":"NodeText","Data":"String 存储相对来说更加节省内存，缓存相同数量的对象数据，String 消耗的内存约是 Hash 的一半。并且，存储具有多层嵌套的对象时也方便很多。如果系统对性能和资源消耗非常敏感的话，String 就非常适合。"}]}]}]},{"ID":"20240201213567-oeljw8j","Type":"NodeParagraph","Properties":{"id":"20240201213567-oeljw8j","updated":"20240201213567"},"Children":[{"Type":"NodeText","Data":"在绝大部分情况，我们建议使用 String 来存储对象数据即可！"}]},{"ID":"20240201213568-t34nnv3","Type":"NodeParagraph","Properties":{"id":"20240201213568-t34nnv3","updated":"20240201213568"},"Children":[{"Type":"NodeText","Data":"那根据你的介绍，购物车信息用 String 还是 Hash 存储更好呢?"}]},{"ID":"20240201213569-679mue3","Type":"NodeParagraph","Properties":{"id":"20240201213569-679mue3","updated":"20240201213569"},"Children":[{"Type":"NodeText","Data":"购物车信息建议使用 Hash 存储："}]},{"ID":"20240201213570-ncugzpi","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-ncugzpi","updated":"20240201213570"},"Children":[{"ID":"20240201213571-ifa2y7l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213571-ifa2y7l","updated":"20240201213571"},"Children":[{"ID":"20240201213572-50qy23z","Type":"NodeParagraph","Properties":{"id":"20240201213572-50qy23z","updated":"20240201213572"},"Children":[{"Type":"NodeText","Data":"用户 id 为 key"}]}]},{"ID":"20240201213573-grv775o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213573-grv775o","updated":"20240201213573"},"Children":[{"ID":"20240201213574-gk1h5bb","Type":"NodeParagraph","Properties":{"id":"20240201213574-gk1h5bb","updated":"20240201213574"},"Children":[{"Type":"NodeText","Data":"商品 id 为 field，商品数量为 value"}]}]}]},{"ID":"20240201213575-sx205ml","Type":"NodeParagraph","Properties":{"id":"20240201213575-sx205ml","updated":"20240201213575"},"Children":[{"Type":"NodeText","Data":"由于购物车中的商品频繁修改和变动，这个时候 Hash 就非常适合了！"}]},{"ID":"20240201213576-7uas5zs","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213576-7uas5zs","updated":"20240201213576"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Redis 实现一个排行榜怎么做？"}]},{"ID":"20240201213577-7mlabgl","Type":"NodeParagraph","Properties":{"id":"20240201213577-7mlabgl","updated":"20240201213577"},"Children":[{"Type":"NodeText","Data":"Redis 中有一个叫做 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sorted set"},{"Type":"NodeText","Data":" 的数据结构经常被用在各种排行榜的场景，比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、王者荣耀中的段位排行榜、话题热度排行榜等等。"}]},{"ID":"20240201213578-sr1w8u9","Type":"NodeParagraph","Properties":{"id":"20240201213578-sr1w8u9","updated":"20240201213578"},"Children":[{"Type":"NodeText","Data":"相关的一些 Redis 命令: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZRANGE"},{"Type":"NodeText","Data":" (从小到大排序) 、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZREVRANGE"},{"Type":"NodeText","Data":" （从大到小排序）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ZREVRANK"},{"Type":"NodeText","Data":" (指定元素排名)。"}]},{"ID":"20240201213579-8afxdj0","Type":"NodeParagraph","Properties":{"id":"20240201213579-8afxdj0","updated":"20240201213579"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/2021060714195385.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213580-tkqclhf","Type":"NodeParagraph","Properties":{"id":"20240201213580-tkqclhf","updated":"20240201213580"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7","TextMarkTextContent":"《Java 面试指北》"},{"Type":"NodeText","Data":" 的「技术面试题篇」就有一篇文章详细介绍如何使用 Sorted Set 来设计制作一个排行榜。"}]},{"ID":"20240201213581-ortjysp","Type":"NodeParagraph","Properties":{"id":"20240201213581-ortjysp","updated":"20240201213581"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/image-20220719071115140.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213582-vzo13gf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213582-vzo13gf","updated":"20240201213582"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Set 实现抽奖系统需要用到什么命令？"}]},{"ID":"20240201213583-u610e4a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213583-u610e4a","updated":"20240201213583"},"Children":[{"ID":"20240201213584-uh8bjkb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213584-uh8bjkb","updated":"20240201213584"},"Children":[{"ID":"20240201213585-9gs6bb0","Type":"NodeParagraph","Properties":{"id":"20240201213585-9gs6bb0","updated":"20240201213585"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SPOP key count"},{"Type":"NodeText","Data":" ： 随机移除并获取指定集合中一个或多个元素，适合不允许重复中奖的场景。"}]}]},{"ID":"20240201213586-yc2g0b9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213586-yc2g0b9","updated":"20240201213586"},"Children":[{"ID":"20240201213587-ki3gsx4","Type":"NodeParagraph","Properties":{"id":"20240201213587-ki3gsx4","updated":"20240201213587"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SRANDMEMBER key count"},{"Type":"NodeText","Data":" : 随机获取指定集合中指定数量的元素，适合允许重复中奖的场景。"}]}]}]},{"ID":"20240201213588-t5t7hvy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213588-t5t7hvy","updated":"20240201213588"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 Bitmap 统计活跃用户怎么做？"}]},{"ID":"20240201213589-t2kvaus","Type":"NodeParagraph","Properties":{"id":"20240201213589-t2kvaus","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"使用日期（精确到天）作为 key，然后用户 ID 为 offset，如果当日活跃过就设置为 1。"}]},{"ID":"20240201213590-hrwp5yx","Type":"NodeParagraph","Properties":{"id":"20240201213590-hrwp5yx","updated":"20240201213590"},"Children":[{"Type":"NodeText","Data":"初始化数据："}]},{"ID":"20240201213591-2857tdu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213591-2857tdu","updated":"20240201213591"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e SETBIT 20210308 1 1\n(integer) 0\n\u003e SETBIT 20210308 2 1\n(integer) 0\n\u003e SETBIT 20210309 1 1\n(integer) 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213592-avh8dnf","Type":"NodeParagraph","Properties":{"id":"20240201213592-avh8dnf","updated":"20240201213592"},"Children":[{"Type":"NodeText","Data":"统计 20210308~20210309 总活跃用户数:"}]},{"ID":"20240201213593-ex3fezm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213593-ex3fezm","updated":"20240201213593"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e BITOP and desk1 20210308 20210309\n(integer) 1\n\u003e BITCOUNT desk1\n(integer) 1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213594-19kttxr","Type":"NodeParagraph","Properties":{"id":"20240201213594-19kttxr","updated":"20240201213594"},"Children":[{"Type":"NodeText","Data":"统计 20210308~20210309 在线活跃用户数:"}]},{"ID":"20240201213595-szvgvu1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213595-szvgvu1","updated":"20240201213595"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e BITOP or desk2 20210308 20210309\n(integer) 1\n\u003e BITCOUNT desk2\n(integer) 2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213596-lbj27sh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213596-lbj27sh","updated":"20240201213596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用 HyperLogLog 统计页面 UV 怎么做？"}]},{"ID":"20240201213597-rieyn16","Type":"NodeParagraph","Properties":{"id":"20240201213597-rieyn16","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"1、将访问指定页面的每个用户 ID 添加到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HyperLogLog"},{"Type":"NodeText","Data":" 中。"}]},{"ID":"20240201213598-hu3ect0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213598-hu3ect0","updated":"20240201213598"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"PFADD PAGE_1:UV USER1 USER2 ...... USERn\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213599-oux98xi","Type":"NodeParagraph","Properties":{"id":"20240201213599-oux98xi","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"2、统计指定页面的 UV。"}]},{"ID":"20240201213600-q6rxakx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213600-q6rxakx","updated":"20240201213600"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"PFCOUNT PAGE_1:UV\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213601-aap7ofe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213601-aap7ofe","updated":"20240201213601"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 线程模型"}]},{"ID":"20240201213602-s8mfruq","Type":"NodeParagraph","Properties":{"id":"20240201213602-s8mfruq","updated":"20240201213602"},"Children":[{"Type":"NodeText","Data":"对于读写命令来说，Redis 一直是单线程模型。不过，在 Redis 4.0 版本之后引入了多线程来执行一些大键值对的异步删除操作， Redis 6.0 版本之后引入了多线程来处理网络请求（提高网络 IO 读写性能）。"}]},{"ID":"20240201213603-kpgw12x","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213603-kpgw12x","updated":"20240201213603"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 单线程模型了解吗？"}]},{"ID":"20240201213604-v077twm","Type":"NodeParagraph","Properties":{"id":"20240201213604-v077twm","updated":"20240201213604"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 基于 Reactor 模式来设计开发了自己的一套高效的事件处理模型"},{"Type":"NodeText","Data":" （Netty 的线程模型也基于 Reactor 模式，Reactor 模式不愧是高性能 IO 的基石），这套事件处理模型对应的是 Redis 中的文件事件处理器（file event handler）。由于文件事件处理器（file event handler）是单线程方式运行的，所以我们一般都说 Redis 是单线程模型。"}]},{"ID":"20240201213605-l2ujqrp","Type":"NodeParagraph","Properties":{"id":"20240201213605-l2ujqrp","updated":"20240201213605"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"既然是单线程，那怎么监听大量的客户端连接呢？"}]},{"ID":"20240201213606-5t24yud","Type":"NodeParagraph","Properties":{"id":"20240201213606-5t24yud","updated":"20240201213606"},"Children":[{"Type":"NodeText","Data":"Redis 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"IO 多路复用程序"},{"Type":"NodeText","Data":" 来监听来自客户端的大量连接（或者说是监听多个 socket），它会将感兴趣的事件及类型（读、写）注册到内核中并监听每个事件是否发生。"}]},{"ID":"20240201213607-cj81an2","Type":"NodeParagraph","Properties":{"id":"20240201213607-cj81an2","updated":"20240201213607"},"Children":[{"Type":"NodeText","Data":"这样的好处非常明显： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"I/O 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗"},{"Type":"NodeText","Data":"（和 NIO 中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Selector"},{"Type":"NodeText","Data":" 组件很像）。"}]},{"ID":"20240201213608-b1rmhfs","Type":"NodeParagraph","Properties":{"id":"20240201213608-b1rmhfs","updated":"20240201213608"},"Children":[{"Type":"NodeText","Data":"另外， Redis 服务器是一个事件驱动程序，服务器需要处理两类事件："}]},{"ID":"20240201213609-sjd3bb8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213609-sjd3bb8","updated":"20240201213609"},"Children":[{"ID":"20240201213610-ly4bwl0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213610-ly4bwl0","updated":"20240201213610"},"Children":[{"ID":"20240201213611-wgvvatr","Type":"NodeParagraph","Properties":{"id":"20240201213611-wgvvatr","updated":"20240201213611"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"文件事件(file event)"},{"Type":"NodeText","Data":" ：用于处理 Redis 服务器和客户端之间的网络 IO。"}]}]},{"ID":"20240201213612-107a7f2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213612-107a7f2","updated":"20240201213612"},"Children":[{"ID":"20240201213613-1nn177m","Type":"NodeParagraph","Properties":{"id":"20240201213613-1nn177m","updated":"20240201213613"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间事件(time eveat)"},{"Type":"NodeText","Data":" ：Redis 服务器中的一些操作（比如 serverCron 函数）需要在给定的时间点执行，而时间事件就是处理这类定时操作的。"}]}]}]},{"ID":"20240201213614-21fxjbk","Type":"NodeParagraph","Properties":{"id":"20240201213614-21fxjbk","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"时间事件不需要多花时间了解，我们接触最多的还是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"文件事件"},{"Type":"NodeText","Data":"（客户端进行读取写入等操作，涉及一系列网络通信）。"}]},{"ID":"20240201213615-fwisaqy","Type":"NodeParagraph","Properties":{"id":"20240201213615-fwisaqy","updated":"20240201213615"},"Children":[{"Type":"NodeText","Data":"《Redis 设计与实现》有一段话是如是介绍文件事件的，我觉得写得挺不错。"}]},{"ID":"20240201213616-y2p5rpd","Type":"NodeBlockquote","Properties":{"id":"20240201213616-y2p5rpd","updated":"20240201213616"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213617-93z9zgx","Type":"NodeParagraph","Properties":{"id":"20240201213617-93z9zgx","updated":"20240201213617"},"Children":[{"Type":"NodeText","Data":"Redis 基于 Reactor 模式开发了自己的网络事件处理器：这个处理器被称为文件事件处理器（file event handler）。文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。"}]},{"ID":"20240201213618-24ec74t","Type":"NodeParagraph","Properties":{"id":"20240201213618-24ec74t","updated":"20240201213618"},"Children":[{"Type":"NodeText","Data":"当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关 闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。"}]},{"ID":"20240201213619-cr7km6y","Type":"NodeParagraph","Properties":{"id":"20240201213619-cr7km6y","updated":"20240201213619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字"},{"Type":"NodeText","Data":"，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。"}]}]},{"ID":"20240201213620-m3edozf","Type":"NodeParagraph","Properties":{"id":"20240201213620-m3edozf","updated":"20240201213620"},"Children":[{"Type":"NodeText","Data":"可以看出，文件事件处理器（file event handler）主要是包含 4 个部分："}]},{"ID":"20240201213621-z0k3r7t","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213621-z0k3r7t","updated":"20240201213621"},"Children":[{"ID":"20240201213622-ct6bv6h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-ct6bv6h","updated":"20240201213622"},"Children":[{"ID":"20240201213623-ak68ht4","Type":"NodeParagraph","Properties":{"id":"20240201213623-ak68ht4","updated":"20240201213623"},"Children":[{"Type":"NodeText","Data":"多个 socket（客户端连接）"}]}]},{"ID":"20240201213624-tmbtnio","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213624-tmbtnio","updated":"20240201213624"},"Children":[{"ID":"20240201213625-pv5g5ik","Type":"NodeParagraph","Properties":{"id":"20240201213625-pv5g5ik","updated":"20240201213625"},"Children":[{"Type":"NodeText","Data":"IO 多路复用程序（支持多个客户端连接的关键）"}]}]},{"ID":"20240201213626-b46n8rc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213626-b46n8rc","updated":"20240201213626"},"Children":[{"ID":"20240201213627-hz9igdr","Type":"NodeParagraph","Properties":{"id":"20240201213627-hz9igdr","updated":"20240201213627"},"Children":[{"Type":"NodeText","Data":"文件事件分派器（将 socket 关联到相应的事件处理器）"}]}]},{"ID":"20240201213628-wmsbc8n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213628-wmsbc8n","updated":"20240201213628"},"Children":[{"ID":"20240201213629-r1lt3qo","Type":"NodeParagraph","Properties":{"id":"20240201213629-r1lt3qo","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）"}]}]}]},{"ID":"20240201213630-mtqtyj5","Type":"NodeParagraph","Properties":{"id":"20240201213630-mtqtyj5","updated":"20240201213630"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"文件事件处理器","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis-event-handler.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213631-hvdqfy4","Type":"NodeParagraph","Properties":{"id":"20240201213631-hvdqfy4","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"相关阅读："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://remcarpediem.net/article/1aa2da89/","TextMarkTextContent":"Redis 事件机制详解"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213632-zhv7ro2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213632-zhv7ro2","updated":"20240201213632"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis6.0 之前为什么不使用多线程？"}]},{"ID":"20240201213633-o12mcf5","Type":"NodeParagraph","Properties":{"id":"20240201213633-o12mcf5","updated":"20240201213633"},"Children":[{"Type":"NodeText","Data":"虽然说 Redis 是单线程模型，但是，实际上，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 在 4.0 之后的版本中就已经加入了对多线程的支持。"}]},{"ID":"20240201213634-dylwa8b","Type":"NodeParagraph","Properties":{"id":"20240201213634-dylwa8b","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"不过，Redis 4.0 增加的多线程主要是针对一些大键值对的删除操作的命令，使用这些命令就会使用主线程之外的其他线程来“异步处理”。"}]},{"ID":"20240201213635-pelb9au","Type":"NodeParagraph","Properties":{"id":"20240201213635-pelb9au","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"为此，Redis 4.0 之后新增了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"UNLINK"},{"Type":"NodeText","Data":"（可以看作是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DEL"},{"Type":"NodeText","Data":" 的异步版本）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FLUSHALL ASYNC"},{"Type":"NodeText","Data":"（清空数据库）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FLUSHDB ASYNC"},{"Type":"NodeText","Data":"（清空数据库）等异步命令。"}]},{"ID":"20240201213636-2sfvth3","Type":"NodeParagraph","Properties":{"id":"20240201213636-2sfvth3","updated":"20240201213636"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"redis4.0 more thread","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis4.0-more-thread.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213637-p3wfnxv","Type":"NodeParagraph","Properties":{"id":"20240201213637-p3wfnxv","updated":"20240201213637"},"Children":[{"Type":"NodeText","Data":"大体上来说，Redis 6.0 之前主要还是单线程处理。"}]},{"ID":"20240201213638-oestzpx","Type":"NodeParagraph","Properties":{"id":"20240201213638-oestzpx","updated":"20240201213638"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"那 Redis6.0 之前为什么不使用多线程？"},{"Type":"NodeText","Data":" 我觉得主要原因有 3 点："}]},{"ID":"20240201213639-puih2rl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213639-puih2rl","updated":"20240201213639"},"Children":[{"ID":"20240201213640-jbe9p0d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213640-jbe9p0d","updated":"20240201213640"},"Children":[{"ID":"20240201213641-b34njb5","Type":"NodeParagraph","Properties":{"id":"20240201213641-b34njb5","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"单线程编程容易并且更容易维护；"}]}]},{"ID":"20240201213642-a6q0pn5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213642-a6q0pn5","updated":"20240201213642"},"Children":[{"ID":"20240201213643-xjspxrl","Type":"NodeParagraph","Properties":{"id":"20240201213643-xjspxrl","updated":"20240201213643"},"Children":[{"Type":"NodeText","Data":"Redis 的性能瓶颈不在 CPU ，主要在内存和网络；"}]}]},{"ID":"20240201213644-vlvzfu0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213644-vlvzfu0","updated":"20240201213644"},"Children":[{"ID":"20240201213645-102qngb","Type":"NodeParagraph","Properties":{"id":"20240201213645-102qngb","updated":"20240201213645"},"Children":[{"Type":"NodeText","Data":"多线程就会存在死锁、线程上下文切换等问题，甚至会影响性能。"}]}]}]},{"ID":"20240201213646-7xq0lvc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213646-7xq0lvc","updated":"20240201213646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis6.0 之后为何引入了多线程？"}]},{"ID":"20240201213647-enzk2l7","Type":"NodeParagraph","Properties":{"id":"20240201213647-enzk2l7","updated":"20240201213647"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis6.0 引入多线程主要是为了提高网络 IO 读写性能"},{"Type":"NodeText","Data":"，因为这个算是 Redis 中的一个性能瓶颈（Redis 的瓶颈主要受限于内存和网络）。"}]},{"ID":"20240201213648-33fyj6u","Type":"NodeParagraph","Properties":{"id":"20240201213648-33fyj6u","updated":"20240201213648"},"Children":[{"Type":"NodeText","Data":"虽然，Redis6.0 引入了多线程，但是 Redis 的多线程只是在网络数据的读写这类耗时操作上使用了，执行命令仍然是单线程顺序执行。因此，你也不需要担心线程安全问题。"}]},{"ID":"20240201213649-vf8g0uz","Type":"NodeParagraph","Properties":{"id":"20240201213649-vf8g0uz","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"Redis6.0 的多线程默认是禁用的，只使用主线程。如需开启需要修改 redis 配置文件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"redis.conf"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213650-jrnuqxz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213650-jrnuqxz","updated":"20240201213650"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"io-threads-do-reads yes\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213651-pnle0ye","Type":"NodeParagraph","Properties":{"id":"20240201213651-pnle0ye","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"开启多线程后，还需要设置线程数，否则是不生效的。同样需要修改 redis 配置文件 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"redis.conf"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213652-zpq9pmr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213652-zpq9pmr","updated":"20240201213652"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"io-threads 4 #官网建议4核的机器建议设置为2或3个线程，8核的建议设置为6个线程\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213653-449byqo","Type":"NodeParagraph","Properties":{"id":"20240201213653-449byqo","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"推荐阅读："}]},{"ID":"20240201213654-6m460ar","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-6m460ar","updated":"20240201213654"},"Children":[{"ID":"20240201213655-tgjr02a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213655-tgjr02a","updated":"20240201213655"},"Children":[{"ID":"20240201213656-8g0t9u0","Type":"NodeParagraph","Properties":{"id":"20240201213656-8g0t9u0","updated":"20240201213656"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/FZu3acwK6zrCBZQ_3HoUgw","TextMarkTextContent":"Redis 6.0 新特性-多线程连环 13 问！"}]}]},{"ID":"20240201213657-2q48wse","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213657-2q48wse","updated":"20240201213657"},"Children":[{"ID":"20240201213658-tzvxyh4","Type":"NodeParagraph","Properties":{"id":"20240201213658-tzvxyh4","updated":"20240201213658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://draveness.me/whys-the-design-redis-single-thread/","TextMarkTextContent":"为什么 Redis 选择单线程模型"}]}]},{"ID":"20240201213659-j7mmu5c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213659-j7mmu5c","updated":"20240201213659"},"Children":[{"ID":"20240201213660-ldif6ek","Type":"NodeParagraph","Properties":{"id":"20240201213660-ldif6ek","updated":"20240201213660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://segmentfault.com/a/1190000039223696","TextMarkTextContent":"Redis 多线程网络模型全面揭秘"}]}]}]},{"ID":"20240201213661-4h1dw4l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213661-4h1dw4l","updated":"20240201213661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 内存管理"}]},{"ID":"20240201213662-3r21875","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213662-3r21875","updated":"20240201213662"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 给缓存数据设置过期时间有啥用？"}]},{"ID":"20240201213663-956y6w0","Type":"NodeParagraph","Properties":{"id":"20240201213663-956y6w0","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"一般情况下，我们设置保存的缓存数据的时候都会设置一个过期时间。为什么呢？"}]},{"ID":"20240201213664-hcnmhgh","Type":"NodeParagraph","Properties":{"id":"20240201213664-hcnmhgh","updated":"20240201213664"},"Children":[{"Type":"NodeText","Data":"因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。"}]},{"ID":"20240201213665-3758npd","Type":"NodeParagraph","Properties":{"id":"20240201213665-3758npd","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"Redis 自带了给缓存数据设置过期时间的功能，比如："}]},{"ID":"20240201213666-22dr7x1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213666-22dr7x1","updated":"20240201213666"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"127.0.0.1:6379\u003e exp key 60 # 数据在 60s 后过期\n(integer) 1\n127.0.0.1:6379\u003e setex key 60 value # 数据在 60s 后过期 (setex:[set] + [ex]pire)\nOK\n127.0.0.1:6379\u003e ttl key # 查看数据还有多久过期\n(integer) 56\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213667-dojzim5","Type":"NodeParagraph","Properties":{"id":"20240201213667-dojzim5","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"注意："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 中除了字符串类型有自己独有设置过期时间的命令 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"setex"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 外，其他方法都需要依靠 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"expire"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 命令来设置过期时间 。另外， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"persist"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 命令可以移除一个键的过期时间。"}]},{"ID":"20240201213668-qqabjru","Type":"NodeParagraph","Properties":{"id":"20240201213668-qqabjru","updated":"20240201213668"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"过期时间除了有助于缓解内存的消耗，还有什么其他用么？"}]},{"ID":"20240201213669-00k043h","Type":"NodeParagraph","Properties":{"id":"20240201213669-00k043h","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"很多时候，我们的业务场景就是需要某个数据只在某一时间段内存在，比如我们的短信验证码可能只在 1 分钟内有效，用户登录的 token 可能只在 1 天内有效。"}]},{"ID":"20240201213670-p1ykvzs","Type":"NodeParagraph","Properties":{"id":"20240201213670-p1ykvzs","updated":"20240201213670"},"Children":[{"Type":"NodeText","Data":"如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。"}]},{"ID":"20240201213671-ezlx9oo","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213671-ezlx9oo","updated":"20240201213671"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 是如何判断数据是否过期的呢？"}]},{"ID":"20240201213672-myk4248","Type":"NodeParagraph","Properties":{"id":"20240201213672-myk4248","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"Redis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。"}]},{"ID":"20240201213673-65ceqzk","Type":"NodeParagraph","Properties":{"id":"20240201213673-65ceqzk","updated":"20240201213673"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"redis过期字典","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis-expired-dictionary.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213674-ylkfka5","Type":"NodeParagraph","Properties":{"id":"20240201213674-ylkfka5","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"过期字典是存储在 redisDb 这个结构里的："}]},{"ID":"20240201213675-m5ngi1v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213675-m5ngi1v","updated":"20240201213675"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"typedef struct redisDb {\n    ...\n\n    dict *dict;     //数据库键空间,保存着数据库中所有键值对\n    dict *expires   // 过期字典,保存着键的过期时间\n    ...\n} redisDb;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213676-f4wgm5c","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213676-f4wgm5c","updated":"20240201213676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"过期的数据的删除策略了解么？"}]},{"ID":"20240201213677-ba4hmhv","Type":"NodeParagraph","Properties":{"id":"20240201213677-ba4hmhv","updated":"20240201213677"},"Children":[{"Type":"NodeText","Data":"如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？"}]},{"ID":"20240201213678-ksikm87","Type":"NodeParagraph","Properties":{"id":"20240201213678-ksikm87","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）："}]},{"ID":"20240201213679-6qimv4h","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213679-6qimv4h","updated":"20240201213679"},"Children":[{"ID":"20240201213680-l98twil","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213680-l98twil","updated":"20240201213680"},"Children":[{"ID":"20240201213681-06pnn5a","Type":"NodeParagraph","Properties":{"id":"20240201213681-06pnn5a","updated":"20240201213681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"惰性删除"},{"Type":"NodeText","Data":" ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。"}]}]},{"ID":"20240201213682-yqt952m","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213682-yqt952m","updated":"20240201213682"},"Children":[{"ID":"20240201213683-4d9h2s9","Type":"NodeParagraph","Properties":{"id":"20240201213683-4d9h2s9","updated":"20240201213683"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定期删除"},{"Type":"NodeText","Data":" ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。"}]}]}]},{"ID":"20240201213684-5pwxkoc","Type":"NodeParagraph","Properties":{"id":"20240201213684-5pwxkoc","updated":"20240201213684"},"Children":[{"Type":"NodeText","Data":"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定期删除+惰性/懒汉式删除"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213685-1is0s9w","Type":"NodeParagraph","Properties":{"id":"20240201213685-1is0s9w","updated":"20240201213685"},"Children":[{"Type":"NodeText","Data":"但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。"}]},{"ID":"20240201213686-2neob24","Type":"NodeParagraph","Properties":{"id":"20240201213686-2neob24","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"怎么解决这个问题呢？答案就是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 内存淘汰机制。"}]},{"ID":"20240201213687-lrwpn6u","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213687-lrwpn6u","updated":"20240201213687"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 内存淘汰机制了解么？"}]},{"ID":"20240201213688-qcn2lse","Type":"NodeBlockquote","Properties":{"id":"20240201213688-qcn2lse","updated":"20240201213688"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213689-bc4f6ou","Type":"NodeParagraph","Properties":{"id":"20240201213689-bc4f6ou","updated":"20240201213689"},"Children":[{"Type":"NodeText","Data":"相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?"}]}]},{"ID":"20240201213690-bps7njl","Type":"NodeParagraph","Properties":{"id":"20240201213690-bps7njl","updated":"20240201213690"},"Children":[{"Type":"NodeText","Data":"Redis 提供 6 种数据淘汰策略："}]},{"ID":"20240201213691-xnaw1yk","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213691-xnaw1yk","updated":"20240201213691"},"Children":[{"ID":"20240201213692-ot5te2o","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213692-ot5te2o","updated":"20240201213692"},"Children":[{"ID":"20240201213693-yh9r3s1","Type":"NodeParagraph","Properties":{"id":"20240201213693-yh9r3s1","updated":"20240201213693"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"volatile-lru（least recently used）"},{"Type":"NodeText","Data":"：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰"}]}]},{"ID":"20240201213694-8ok4942","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213694-8ok4942","updated":"20240201213694"},"Children":[{"ID":"20240201213695-5snzrs9","Type":"NodeParagraph","Properties":{"id":"20240201213695-5snzrs9","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"volatile-ttl"},{"Type":"NodeText","Data":"：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰"}]}]},{"ID":"20240201213696-lk5pvk3","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213696-lk5pvk3","updated":"20240201213696"},"Children":[{"ID":"20240201213697-o1x943b","Type":"NodeParagraph","Properties":{"id":"20240201213697-o1x943b","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"volatile-random"},{"Type":"NodeText","Data":"：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰"}]}]},{"ID":"20240201213698-l8mmcci","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213698-l8mmcci","updated":"20240201213698"},"Children":[{"ID":"20240201213699-ievkf6x","Type":"NodeParagraph","Properties":{"id":"20240201213699-ievkf6x","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"allkeys-lru（least recently used）"},{"Type":"NodeText","Data":"：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）"}]}]},{"ID":"20240201213700-x8eapxc","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213700-x8eapxc","updated":"20240201213700"},"Children":[{"ID":"20240201213701-9es2jcs","Type":"NodeParagraph","Properties":{"id":"20240201213701-9es2jcs","updated":"20240201213701"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"allkeys-random"},{"Type":"NodeText","Data":"：从数据集（server.db[i].dict）中任意选择数据淘汰"}]}]},{"ID":"20240201213702-i3nfal8","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213702-i3nfal8","updated":"20240201213702"},"Children":[{"ID":"20240201213703-w84ikwa","Type":"NodeParagraph","Properties":{"id":"20240201213703-w84ikwa","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"no-eviction"},{"Type":"NodeText","Data":"：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！"}]}]}]},{"ID":"20240201213704-8muuaxn","Type":"NodeParagraph","Properties":{"id":"20240201213704-8muuaxn","updated":"20240201213704"},"Children":[{"Type":"NodeText","Data":"4.0 版本后增加以下两种："}]},{"ID":"20240201213705-75r1qgy","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213705-75r1qgy","updated":"20240201213705"},"Children":[{"ID":"20240201213706-qfwvnff","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213706-qfwvnff","updated":"20240201213706"},"Children":[{"ID":"20240201213707-b9504g0","Type":"NodeParagraph","Properties":{"id":"20240201213707-b9504g0","updated":"20240201213707"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"volatile-lfu（least frequently used）"},{"Type":"NodeText","Data":"：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰"}]}]},{"ID":"20240201213708-baie36h","Type":"NodeListItem","Data":"8","ListData":{"Typ":1,"Tight":true,"Start":8,"Delimiter":46,"Padding":3,"Marker":"OA==","Num":8},"Properties":{"id":"20240201213708-baie36h","updated":"20240201213708"},"Children":[{"ID":"20240201213709-l3kw3f3","Type":"NodeParagraph","Properties":{"id":"20240201213709-l3kw3f3","updated":"20240201213709"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"allkeys-lfu（least frequently used）"},{"Type":"NodeText","Data":"：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key"}]}]}]},{"ID":"20240201213710-aesx4nh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213710-aesx4nh","updated":"20240201213710"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 持久化机制"}]},{"ID":"20240201213711-4xedhzt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213711-4xedhzt","updated":"20240201213711"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"怎么保证 Redis 挂掉之后再重启数据可以进行恢复？"}]},{"ID":"20240201213712-ibn2g0v","Type":"NodeParagraph","Properties":{"id":"20240201213712-ibn2g0v","updated":"20240201213712"},"Children":[{"Type":"NodeText","Data":"很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。"}]},{"ID":"20240201213713-vziwmha","Type":"NodeParagraph","Properties":{"id":"20240201213713-vziwmha","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）"},{"Type":"NodeText","Data":"。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。"}]},{"ID":"20240201213714-1du0zn8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213714-1du0zn8","updated":"20240201213714"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 RDB 持久化？"}]},{"ID":"20240201213715-e5ff03j","Type":"NodeParagraph","Properties":{"id":"20240201213715-e5ff03j","updated":"20240201213715"},"Children":[{"Type":"NodeText","Data":"Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。"}]},{"ID":"20240201213716-mtxdgav","Type":"NodeParagraph","Properties":{"id":"20240201213716-mtxdgav","updated":"20240201213716"},"Children":[{"Type":"NodeText","Data":"快照持久化是 Redis 默认采用的持久化方式，在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"redis.conf"},{"Type":"NodeText","Data":" 配置文件中默认有此下配置："}]},{"ID":"20240201213717-1s7tyvs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Y2xvanVyZQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213717-1s7tyvs","updated":"20240201213717"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y2xvanVyZQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\nsave 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\nsave 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213718-a6nqq94","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213718-a6nqq94","updated":"20240201213718"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"RDB 创建快照时会阻塞主线程吗？"}]},{"ID":"20240201213719-7n684dc","Type":"NodeParagraph","Properties":{"id":"20240201213719-7n684dc","updated":"20240201213719"},"Children":[{"Type":"NodeText","Data":"Redis 提供了两个命令来生成 RDB 快照文件："}]},{"ID":"20240201213720-8ir9jpz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213720-8ir9jpz","updated":"20240201213720"},"Children":[{"ID":"20240201213721-asao7y7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213721-asao7y7","updated":"20240201213721"},"Children":[{"ID":"20240201213722-gfpi3l7","Type":"NodeParagraph","Properties":{"id":"20240201213722-gfpi3l7","updated":"20240201213722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"save"},{"Type":"NodeText","Data":" : 主线程执行，会阻塞主线程；"}]}]},{"ID":"20240201213723-ragkdjl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-ragkdjl","updated":"20240201213723"},"Children":[{"ID":"20240201213724-34mod4h","Type":"NodeParagraph","Properties":{"id":"20240201213724-34mod4h","updated":"20240201213724"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bgsave"},{"Type":"NodeText","Data":" : 子线程执行，不会阻塞主线程，默认选项。"}]}]}]},{"ID":"20240201213725-k634exp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213725-k634exp","updated":"20240201213725"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 AOF 持久化？"}]},{"ID":"20240201213726-tyonzwc","Type":"NodeParagraph","Properties":{"id":"20240201213726-tyonzwc","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启："}]},{"ID":"20240201213727-vs2s4u7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Y2xvanVyZQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213727-vs2s4u7","updated":"20240201213727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y2xvanVyZQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"appendonly yes\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213728-56ugior","Type":"NodeParagraph","Properties":{"id":"20240201213728-56ugior","updated":"20240201213728"},"Children":[{"Type":"NodeText","Data":"开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server.aof_buf"},{"Type":"NodeText","Data":" 中，然后再根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"appendfsync"},{"Type":"NodeText","Data":" 配置来决定何时将其同步到硬盘中的 AOF 文件。"}]},{"ID":"20240201213729-sg80ynu","Type":"NodeParagraph","Properties":{"id":"20240201213729-sg80ynu","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"appendonly.aof"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213730-w2dtsjv","Type":"NodeParagraph","Properties":{"id":"20240201213730-w2dtsjv","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是："}]},{"ID":"20240201213731-qibu5ue","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Y2xvanVyZQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213731-qibu5ue","updated":"20240201213731"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Y2xvanVyZQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘\nappendfsync no        #让操作系统决定何时进行同步\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213732-rdndlp4","Type":"NodeParagraph","Properties":{"id":"20240201213732-rdndlp4","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"为了兼顾数据和写入性能，用户可以考虑 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"appendfsync everysec"},{"Type":"NodeText","Data":" 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，Redis 还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。"}]},{"ID":"20240201213733-ouv5b9w","Type":"NodeParagraph","Properties":{"id":"20240201213733-ouv5b9w","updated":"20240201213733"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"相关 issue"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213734-bjgapm3","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-bjgapm3","updated":"20240201213734"},"Children":[{"ID":"20240201213735-6ovmfl8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213735-6ovmfl8","updated":"20240201213735"},"Children":[{"ID":"20240201213736-2849us8","Type":"NodeParagraph","Properties":{"id":"20240201213736-2849us8","updated":"20240201213736"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/783","TextMarkTextContent":"Redis 的 AOF 方式 #783"}]}]},{"ID":"20240201213737-zt3p18w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213737-zt3p18w","updated":"20240201213737"},"Children":[{"ID":"20240201213738-9zl8zbd","Type":"NodeParagraph","Properties":{"id":"20240201213738-9zl8zbd","updated":"20240201213738"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/1439","TextMarkTextContent":"Redis AOF 重写描述不准确 #1439"}]}]}]},{"ID":"20240201213739-enum7sn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213739-enum7sn","updated":"20240201213739"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AOF 日志是如何实现的？"}]},{"ID":"20240201213740-owhzy95","Type":"NodeParagraph","Properties":{"id":"20240201213740-owhzy95","updated":"20240201213740"},"Children":[{"Type":"NodeText","Data":"关系型数据库（如 MySQL）通常都是执行命令之前记录日志（方便故障恢复），而 Redis AOF 持久化机制是在执行完命令之后再记录日志。"}]},{"ID":"20240201213741-tzdv84v","Type":"NodeParagraph","Properties":{"id":"20240201213741-tzdv84v","updated":"20240201213741"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/8ebd61289336444aa2d00e7bd1696d17.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213742-mqva1uw","Type":"NodeParagraph","Properties":{"id":"20240201213742-mqva1uw","updated":"20240201213742"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么是在执行完命令之后记录日志呢？"}]},{"ID":"20240201213743-y6au054","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213743-y6au054","updated":"20240201213743"},"Children":[{"ID":"20240201213744-1jd0v0o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213744-1jd0v0o","updated":"20240201213744"},"Children":[{"ID":"20240201213745-s302hps","Type":"NodeParagraph","Properties":{"id":"20240201213745-s302hps","updated":"20240201213745"},"Children":[{"Type":"NodeText","Data":"避免额外的检查开销，AOF 记录日志不会对命令进行语法检查；"}]}]},{"ID":"20240201213746-nmpbns3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213746-nmpbns3","updated":"20240201213746"},"Children":[{"ID":"20240201213747-zfuidho","Type":"NodeParagraph","Properties":{"id":"20240201213747-zfuidho","updated":"20240201213747"},"Children":[{"Type":"NodeText","Data":"在命令执行完之后再记录，不会阻塞当前的命令执行。"}]}]}]},{"ID":"20240201213748-s7m7e80","Type":"NodeParagraph","Properties":{"id":"20240201213748-s7m7e80","updated":"20240201213748"},"Children":[{"Type":"NodeText","Data":"这样也带来了风险（我在前面介绍 AOF 持久化的时候也提到过）："}]},{"ID":"20240201213749-j57bz3d","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213749-j57bz3d","updated":"20240201213749"},"Children":[{"ID":"20240201213750-1mqzn6w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213750-1mqzn6w","updated":"20240201213750"},"Children":[{"ID":"20240201213751-v4vp499","Type":"NodeParagraph","Properties":{"id":"20240201213751-v4vp499","updated":"20240201213751"},"Children":[{"Type":"NodeText","Data":"如果刚执行完命令 Redis 就宕机会导致对应的修改丢失；"}]}]},{"ID":"20240201213752-qdbrqa3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213752-qdbrqa3","updated":"20240201213752"},"Children":[{"ID":"20240201213753-lb7o763","Type":"NodeParagraph","Properties":{"id":"20240201213753-lb7o763","updated":"20240201213753"},"Children":[{"Type":"NodeText","Data":"可能会阻塞后续其他命令的执行（AOF 记录日志是在 Redis 主线程中进行的）。"}]}]}]},{"ID":"20240201213754-na48ck0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213754-na48ck0","updated":"20240201213754"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AOF 重写了解吗？"}]},{"ID":"20240201213755-3b6ugg1","Type":"NodeParagraph","Properties":{"id":"20240201213755-3b6ugg1","updated":"20240201213755"},"Children":[{"Type":"NodeText","Data":"AOF 重写可以产生一个新的 AOF 文件，这个新的 AOF 文件和原有的 AOF 文件所保存的数据库状态一样，但体积更小。"}]},{"ID":"20240201213756-szhn6ak","Type":"NodeParagraph","Properties":{"id":"20240201213756-szhn6ak","updated":"20240201213756"},"Children":[{"Type":"NodeText","Data":"AOF 重写是一个有歧义的名字，该功能是通过读取数据库中的键值对来实现的，程序无须对现有 AOF 文件进行任何读入、分析或者写入操作。"}]},{"ID":"20240201213757-ewpg8du","Type":"NodeParagraph","Properties":{"id":"20240201213757-ewpg8du","updated":"20240201213757"},"Children":[{"Type":"NodeText","Data":"在执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BGREWRITEAOF"},{"Type":"NodeText","Data":" 命令时，Redis 服务器会维护一个 AOF 重写缓冲区，该缓冲区会在子进程创建新 AOF 文件期间，记录服务器执行的所有写命令。当子进程完成创建新 AOF 文件的工作之后，服务器会将重写缓冲区中的所有内容追加到新 AOF 文件的末尾，使得新的 AOF 文件保存的数据库状态与现有的数据库状态一致。最后，服务器用新的 AOF 文件替换旧的 AOF 文件，以此来完成 AOF 文件重写操作。"}]},{"ID":"20240201213758-zr62zq0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213758-zr62zq0","updated":"20240201213758"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 4.0 对于持久化机制做了什么优化？"}]},{"ID":"20240201213759-idkjh1v","Type":"NodeParagraph","Properties":{"id":"20240201213759-idkjh1v","updated":"20240201213759"},"Children":[{"Type":"NodeText","Data":"Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"aof-use-rdb-preamble"},{"Type":"NodeText","Data":" 开启）。"}]},{"ID":"20240201213760-tc6eyni","Type":"NodeParagraph","Properties":{"id":"20240201213760-tc6eyni","updated":"20240201213760"},"Children":[{"Type":"NodeText","Data":"如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。"}]},{"ID":"20240201213761-rkzjzd3","Type":"NodeParagraph","Properties":{"id":"20240201213761-rkzjzd3","updated":"20240201213761"},"Children":[{"Type":"NodeText","Data":"官方文档地址：https://redis.io/topics/persistence"}]},{"ID":"20240201213762-5x4cfpg","Type":"NodeParagraph","Properties":{"id":"20240201213762-5x4cfpg","updated":"20240201213762"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis4.0-persitence.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213763-5ayjv5h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213763-5ayjv5h","updated":"20240201213763"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 事务"}]},{"ID":"20240201213764-utws08n","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213764-utws08n","updated":"20240201213764"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何使用 Redis 事务？"}]},{"ID":"20240201213765-i911cs8","Type":"NodeParagraph","Properties":{"id":"20240201213765-i911cs8","updated":"20240201213765"},"Children":[{"Type":"NodeText","Data":"Redis 可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"MULTI"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"EXEC"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"DISCARD"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"WATCH"},{"Type":"NodeText","Data":" 等命令来实现事务(transaction)功能。"}]},{"ID":"20240201213766-j532bmn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213766-j532bmn","updated":"20240201213766"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e MULTI\nOK\n\u003e SET USER \"Guide哥\"\nQUEUED\n\u003e GET USER\nQUEUED\n\u003e EXEC\n1) OK\n2) \"Guide哥\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213767-kpwpuun","Type":"NodeParagraph","Properties":{"id":"20240201213767-kpwpuun","updated":"20240201213767"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://redis.io/commands/multi","TextMarkTextContent":"MULTI"},{"Type":"NodeText","Data":" 命令后可以输入多个命令。Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://redis.io/commands/exec","TextMarkTextContent":"EXEC"},{"Type":"NodeText","Data":" 命令将执行所有命令。"}]},{"ID":"20240201213768-na2wzbq","Type":"NodeParagraph","Properties":{"id":"20240201213768-na2wzbq","updated":"20240201213768"},"Children":[{"Type":"NodeText","Data":"这个过程是这样的："}]},{"ID":"20240201213769-vi91lez","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213769-vi91lez","updated":"20240201213769"},"Children":[{"ID":"20240201213770-664cl5t","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213770-664cl5t","updated":"20240201213770"},"Children":[{"ID":"20240201213771-uhxr3ws","Type":"NodeParagraph","Properties":{"id":"20240201213771-uhxr3ws","updated":"20240201213771"},"Children":[{"Type":"NodeText","Data":"开始事务（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MULTI"},{"Type":"NodeText","Data":"）。"}]}]},{"ID":"20240201213772-mldleh9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213772-mldleh9","updated":"20240201213772"},"Children":[{"ID":"20240201213773-gexjjxk","Type":"NodeParagraph","Properties":{"id":"20240201213773-gexjjxk","updated":"20240201213773"},"Children":[{"Type":"NodeText","Data":"命令入队(批量操作 Redis 的命令，先进先出（FIFO）的顺序执行)。"}]}]},{"ID":"20240201213774-tkozg2q","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213774-tkozg2q","updated":"20240201213774"},"Children":[{"ID":"20240201213775-wgfsytr","Type":"NodeParagraph","Properties":{"id":"20240201213775-wgfsytr","updated":"20240201213775"},"Children":[{"Type":"NodeText","Data":"执行事务("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXEC"},{"Type":"NodeText","Data":")。"}]}]}]},{"ID":"20240201213776-azg4m9s","Type":"NodeParagraph","Properties":{"id":"20240201213776-azg4m9s","updated":"20240201213776"},"Children":[{"Type":"NodeText","Data":"你也可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://redis.io/commands/discard","TextMarkTextContent":"DISCARD"},{"Type":"NodeText","Data":" 命令取消一个事务，它会清空事务队列中保存的所有命令。"}]},{"ID":"20240201213777-scfyaf6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213777-scfyaf6","updated":"20240201213777"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e MULTI\nOK\n\u003e SET USER \"Guide哥\"\nQUEUED\n\u003e GET USER\nQUEUED\n\u003e DISCARD\nOK\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213778-up2bxm6","Type":"NodeParagraph","Properties":{"id":"20240201213778-up2bxm6","updated":"20240201213778"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a code","TextMarkAHref":"https://redis.io/commands/watch","TextMarkTextContent":"WATCH"},{"Type":"NodeText","Data":" 命令用于监听指定的键，当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EXEC"},{"Type":"NodeText","Data":" 命令执行事务时，如果一个被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WATCH"},{"Type":"NodeText","Data":" 命令监视的键被修改的话，整个事务都不会执行，直接返回失败。"}]},{"ID":"20240201213779-kv1rsed","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213779-kv1rsed","updated":"20240201213779"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003e WATCH USER\nOK\n\u003e MULTI\n\u003e SET USER \"Guide哥\"\nOK\n\u003e GET USER\nGuide哥\n\u003e EXEC\nERR EXEC without MULTI\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213780-swnef2p","Type":"NodeParagraph","Properties":{"id":"20240201213780-swnef2p","updated":"20240201213780"},"Children":[{"Type":"NodeText","Data":"Redis 官网相关介绍 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://redis.io/topics/transactions","TextMarkTextContent":"https://redis.io/topics/transactions"},{"Type":"NodeText","Data":" 如下："}]},{"ID":"20240201213781-c0u496v","Type":"NodeParagraph","Properties":{"id":"20240201213781-c0u496v","updated":"20240201213781"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Redis 事务","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis-transactions.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213782-cbsdghu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213782-cbsdghu","updated":"20240201213782"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 支持原子性吗？"}]},{"ID":"20240201213783-dzza4uv","Type":"NodeParagraph","Properties":{"id":"20240201213783-dzza4uv","updated":"20240201213783"},"Children":[{"Type":"NodeText","Data":"Redis 的事务和我们平时理解的关系型数据库的事务不同。我们知道事务具有四大特性： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1. 原子性"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2. 隔离性"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3. 持久性"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4. 一致性"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213784-givcygr","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213784-givcygr","updated":"20240201213784"},"Children":[{"ID":"20240201213785-gerewh8","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213785-gerewh8","updated":"20240201213785"},"Children":[{"ID":"20240201213786-15gug42","Type":"NodeParagraph","Properties":{"id":"20240201213786-15gug42","updated":"20240201213786"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原子性（Atomicity）："},{"Type":"NodeText","Data":" 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；"}]}]},{"ID":"20240201213787-x72vxol","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213787-x72vxol","updated":"20240201213787"},"Children":[{"ID":"20240201213788-2egdyb6","Type":"NodeParagraph","Properties":{"id":"20240201213788-2egdyb6","updated":"20240201213788"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"隔离性（Isolation）："},{"Type":"NodeText","Data":" 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；"}]}]},{"ID":"20240201213789-e87q29u","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213789-e87q29u","updated":"20240201213789"},"Children":[{"ID":"20240201213790-6clbl8m","Type":"NodeParagraph","Properties":{"id":"20240201213790-6clbl8m","updated":"20240201213790"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"持久性（Durability）："},{"Type":"NodeText","Data":" 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。"}]}]},{"ID":"20240201213791-rxcvj8e","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213791-rxcvj8e","updated":"20240201213791"},"Children":[{"ID":"20240201213792-2j4acn9","Type":"NodeParagraph","Properties":{"id":"20240201213792-2j4acn9","updated":"20240201213792"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性（Consistency）："},{"Type":"NodeText","Data":" 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；"}]}]}]},{"ID":"20240201213793-awxdxlg","Type":"NodeParagraph","Properties":{"id":"20240201213793-awxdxlg","updated":"20240201213793"},"Children":[{"Type":"NodeText","Data":"Redis 事务在运行错误的情况下，除了执行过程中出现错误的命令外，其他命令都能正常执行。并且，Redis 是不支持回滚（roll back）操作的。因此，Redis 事务其实是不满足原子性的（而且不满足持久性）。"}]},{"ID":"20240201213794-y1h16y2","Type":"NodeParagraph","Properties":{"id":"20240201213794-y1h16y2","updated":"20240201213794"},"Children":[{"Type":"NodeText","Data":"Redis 官网也解释了自己为啥不支持回滚。简单来说就是 Redis 开发者们觉得没必要支持回滚，这样更简单便捷并且性能更好。Redis 开发者觉得即使命令执行错误也应该在开发过程中就被发现而不是生产过程中。"}]},{"ID":"20240201213795-g3a0d1e","Type":"NodeParagraph","Properties":{"id":"20240201213795-g3a0d1e","updated":"20240201213795"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Redis 为什么不支持回滚","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis-rollback.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213796-oziliuy","Type":"NodeParagraph","Properties":{"id":"20240201213796-oziliuy","updated":"20240201213796"},"Children":[{"Type":"NodeText","Data":"你可以将 Redis 中的事务就理解为 ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。"}]},{"ID":"20240201213797-xfgv6k4","Type":"NodeParagraph","Properties":{"id":"20240201213797-xfgv6k4","updated":"20240201213797"},"Children":[{"Type":"NodeText","Data":"除了不满足原子性之外，事务中的每条命令都会与 Redis 服务器进行网络交互，这是比较浪费资源的行为。明明一次批量执行多个命令就可以了，这种操作实在是看不懂。"}]},{"ID":"20240201213798-2wr9h9w","Type":"NodeParagraph","Properties":{"id":"20240201213798-2wr9h9w","updated":"20240201213798"},"Children":[{"Type":"NodeText","Data":"因此，Redis 事务是不建议在日常开发中使用的。"}]},{"ID":"20240201213799-7kdkj8n","Type":"NodeParagraph","Properties":{"id":"20240201213799-7kdkj8n","updated":"20240201213799"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"相关 issue"},{"Type":"NodeText","Data":" :"}]},{"ID":"20240201213800-fnc6056","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213800-fnc6056","updated":"20240201213800"},"Children":[{"ID":"20240201213801-5nu5uts","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213801-5nu5uts","updated":"20240201213801"},"Children":[{"ID":"20240201213802-rw5s5yh","Type":"NodeParagraph","Properties":{"id":"20240201213802-rw5s5yh","updated":"20240201213802"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/452","TextMarkTextContent":"issue452: 关于 Redis 事务不满足原子性的问题"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213803-ixi81fm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213803-ixi81fm","updated":"20240201213803"},"Children":[{"ID":"20240201213804-vs53b8k","Type":"NodeParagraph","Properties":{"id":"20240201213804-vs53b8k","updated":"20240201213804"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/Snailclimb/JavaGuide/issues/491","TextMarkTextContent":"Issue491:关于 redis 没有事务回滚？"}]}]}]},{"ID":"20240201213805-xmj1601","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213805-xmj1601","updated":"20240201213805"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何解决 Redis 事务的缺陷？"}]},{"ID":"20240201213806-g47swsc","Type":"NodeParagraph","Properties":{"id":"20240201213806-g47swsc","updated":"20240201213806"},"Children":[{"Type":"NodeText","Data":"Redis 从 2.6 版本开始支持执行 Lua 脚本，它的功能和事务非常类似。我们可以利用 Lua 脚本来批量执行多条 Redis 命令，这些 Redis 命令会被提交到 Redis 服务器一次性执行完成，大幅减小了网络开销。"}]},{"ID":"20240201213807-59broc9","Type":"NodeParagraph","Properties":{"id":"20240201213807-59broc9","updated":"20240201213807"},"Children":[{"Type":"NodeText","Data":"一段 Lua 脚本可以视作一条命令执行，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰。"}]},{"ID":"20240201213808-wxmqi1l","Type":"NodeParagraph","Properties":{"id":"20240201213808-wxmqi1l","updated":"20240201213808"},"Children":[{"Type":"NodeText","Data":"如果 Lua 脚本运行时出错并中途结束，出错之后的命令是不会被执行的。并且，出错之前执行的命令是无法被撤销的。因此，严格来说，通过 Lua 脚本来批量执行 Redis 命令也是不满足原子性的。"}]},{"ID":"20240201213809-leynjna","Type":"NodeParagraph","Properties":{"id":"20240201213809-leynjna","updated":"20240201213809"},"Children":[{"Type":"NodeText","Data":"另外，Redis 7.0 新增了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://redis.io/docs/manual/programmability/functions-intro/","TextMarkTextContent":"Redis functions"},{"Type":"NodeText","Data":" 特性，你可以将 Redis functions 看作是比 Lua 更强大的脚本。"}]},{"ID":"20240201213810-0shhfpm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213810-0shhfpm","updated":"20240201213810"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 性能优化"}]},{"ID":"20240201213811-zzwg18m","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213811-zzwg18m","updated":"20240201213811"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis bigkey"}]},{"ID":"20240201213812-p826exo","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213812-p826exo","updated":"20240201213812"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 bigkey？"}]},{"ID":"20240201213813-7yd1y39","Type":"NodeParagraph","Properties":{"id":"20240201213813-7yd1y39","updated":"20240201213813"},"Children":[{"Type":"NodeText","Data":"简单来说，如果一个 key 对应的 value 所占用的内存比较大，那这个 key 就可以看作是 bigkey。具体多大才算大呢？有一个不是特别精确的参考标准：string 类型的 value 超过 10 kb，复合类型的 value 包含的元素超过 5000 个（对于复合类型的 value 来说，不一定包含的元素越多，占用的内存就越多）。"}]},{"ID":"20240201213814-5y9dcpn","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213814-5y9dcpn","updated":"20240201213814"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"bigkey 有什么危害？"}]},{"ID":"20240201213815-um4yjre","Type":"NodeParagraph","Properties":{"id":"20240201213815-um4yjre","updated":"20240201213815"},"Children":[{"Type":"NodeText","Data":"除了会消耗更多的内存空间，bigkey 对性能也会有比较大的影响。"}]},{"ID":"20240201213816-634bb1e","Type":"NodeParagraph","Properties":{"id":"20240201213816-634bb1e","updated":"20240201213816"},"Children":[{"Type":"NodeText","Data":"因此，我们应该尽量避免写入 bigkey！"}]},{"ID":"20240201213817-x8klijv","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213817-x8klijv","updated":"20240201213817"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何发现 bigkey？"}]},{"ID":"20240201213818-lfxrwcx","Type":"NodeParagraph","Properties":{"id":"20240201213818-lfxrwcx","updated":"20240201213818"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、使用 Redis 自带的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"--bigkeys"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 参数来查找。"}]},{"ID":"20240201213819-mge9qxa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213819-mge9qxa","updated":"20240201213819"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# redis-cli -p 6379 --bigkeys\n\n# Scanning the entire keyspace to find biggest keys as well as\n# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec\n# per 100 SCAN commands (not usually needed).\n\n[00.00%] Biggest string found so far '\"ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20\"' with 4437 bytes\n[00.00%] Biggest list   found so far '\"my-list\"' with 17 items\n\n-------- summary -------\n\nSampled 5 keys in the keyspace!\nTotal key length in bytes is 264 (avg len 52.80)\n\nBiggest   list found '\"my-list\"' has 17 items\nBiggest string found '\"ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20\"' has 4437 bytes\n\n1 lists with 17 items (20.00% of keys, avg size 17.00)\n0 hashs with 0 fields (00.00% of keys, avg size 0.00)\n4 strings with 4831 bytes (80.00% of keys, avg size 1207.75)\n0 streams with 0 entries (00.00% of keys, avg size 0.00)\n0 sets with 0 members (00.00% of keys, avg size 0.00)\n0 zsets with 0 members (00.00% of keys, avg size 0.00\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213820-ywcjv85","Type":"NodeParagraph","Properties":{"id":"20240201213820-ywcjv85","updated":"20240201213820"},"Children":[{"Type":"NodeText","Data":"从这个命令的运行结果，我们可以看出：这个命令会扫描(Scan) Redis 中的所有 key ，会对 Redis 的性能有一点影响。并且，这种方式只能找出每种数据结构 top 1 bigkey（占用内存最大的 string 数据类型，包含元素最多的复合数据类型）。"}]},{"ID":"20240201213821-ysnp9e9","Type":"NodeParagraph","Properties":{"id":"20240201213821-ysnp9e9","updated":"20240201213821"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、分析 RDB 文件"}]},{"ID":"20240201213822-erll33a","Type":"NodeParagraph","Properties":{"id":"20240201213822-erll33a","updated":"20240201213822"},"Children":[{"Type":"NodeText","Data":"通过分析 RDB 文件来找出 big key。这种方案的前提是你的 Redis 采用的是 RDB 持久化。"}]},{"ID":"20240201213823-aigvd6b","Type":"NodeParagraph","Properties":{"id":"20240201213823-aigvd6b","updated":"20240201213823"},"Children":[{"Type":"NodeText","Data":"网上有现成的代码/工具可以直接拿来使用："}]},{"ID":"20240201213824-pazcyhx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213824-pazcyhx","updated":"20240201213824"},"Children":[{"ID":"20240201213825-dk5wzog","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213825-dk5wzog","updated":"20240201213825"},"Children":[{"ID":"20240201213826-h0ftq28","Type":"NodeParagraph","Properties":{"id":"20240201213826-h0ftq28","updated":"20240201213826"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/sripathikrishnan/redis-rdb-tools","TextMarkTextContent":"redis-rdb-tools"},{"Type":"NodeText","Data":" ：Python 语言写的用来分析 Redis 的 RDB 快照文件用的工具"}]}]},{"ID":"20240201213827-q4kttbc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213827-q4kttbc","updated":"20240201213827"},"Children":[{"ID":"20240201213828-yu6ln1q","Type":"NodeParagraph","Properties":{"id":"20240201213828-yu6ln1q","updated":"20240201213828"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/weiyanwei412/rdb_bigkeys","TextMarkTextContent":"rdb_bigkeys"},{"Type":"NodeText","Data":" : Go 语言写的用来分析 Redis 的 RDB 快照文件用的工具，性能更好。"}]}]}]},{"ID":"20240201213829-7dsb8dy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213829-7dsb8dy","updated":"20240201213829"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"大量 key 集中过期问题"}]},{"ID":"20240201213830-si3rego","Type":"NodeParagraph","Properties":{"id":"20240201213830-si3rego","updated":"20240201213830"},"Children":[{"Type":"NodeText","Data":"我在上面提到过：对于过期 key，Redis 采用的是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定期删除+惰性/懒汉式删除"},{"Type":"NodeText","Data":" 策略。"}]},{"ID":"20240201213831-m95h652","Type":"NodeParagraph","Properties":{"id":"20240201213831-m95h652","updated":"20240201213831"},"Children":[{"Type":"NodeText","Data":"定期删除执行过程中，如果突然遇到大量过期 key 的话，客户端请求必须等待定期清理过期 key 任务线程执行完成，因为这个这个定期任务线程是在 Redis 主线程中执行的。这就导致客户端请求没办法被及时处理，响应速度会比较慢。"}]},{"ID":"20240201213832-g5l9ge8","Type":"NodeParagraph","Properties":{"id":"20240201213832-g5l9ge8","updated":"20240201213832"},"Children":[{"Type":"NodeText","Data":"如何解决呢？下面是两种常见的方法："}]},{"ID":"20240201213833-tjvz03o","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213833-tjvz03o","updated":"20240201213833"},"Children":[{"ID":"20240201213834-1be7s0r","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213834-1be7s0r","updated":"20240201213834"},"Children":[{"ID":"20240201213835-1w2094a","Type":"NodeParagraph","Properties":{"id":"20240201213835-1w2094a","updated":"20240201213835"},"Children":[{"Type":"NodeText","Data":"给 key 设置随机过期时间。"}]}]},{"ID":"20240201213836-vgmppsx","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213836-vgmppsx","updated":"20240201213836"},"Children":[{"ID":"20240201213837-j1lljb7","Type":"NodeParagraph","Properties":{"id":"20240201213837-j1lljb7","updated":"20240201213837"},"Children":[{"Type":"NodeText","Data":"开启 lazy-free（惰性删除/延迟释放） 。lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。"}]}]}]},{"ID":"20240201213838-sznky5r","Type":"NodeParagraph","Properties":{"id":"20240201213838-sznky5r","updated":"20240201213838"},"Children":[{"Type":"NodeText","Data":"个人建议不管是否开启 lazy-free，我们都尽量给 key 设置随机过期时间。"}]},{"ID":"20240201213839-hk8ntwo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213839-hk8ntwo","updated":"20240201213839"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis 生产问题"}]},{"ID":"20240201213840-ii8inns","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213840-ii8inns","updated":"20240201213840"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缓存穿透"}]},{"ID":"20240201213841-lan2b7i","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213841-lan2b7i","updated":"20240201213841"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是缓存穿透？"}]},{"ID":"20240201213842-vxpf9xb","Type":"NodeParagraph","Properties":{"id":"20240201213842-vxpf9xb","updated":"20240201213842"},"Children":[{"Type":"NodeText","Data":"缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。"}]},{"ID":"20240201213843-2m13ld6","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213843-2m13ld6","updated":"20240201213843"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缓存穿透情况的处理流程是怎样的？"}]},{"ID":"20240201213844-c8ylrpy","Type":"NodeParagraph","Properties":{"id":"20240201213844-c8ylrpy","updated":"20240201213844"},"Children":[{"Type":"NodeText","Data":"如下图所示，用户的请求最终都要跑到数据库中查询一遍。"}]},{"ID":"20240201213845-cwwo31f","Type":"NodeParagraph","Properties":{"id":"20240201213845-cwwo31f","updated":"20240201213845"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"缓存穿透情况","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis-cache-penetration.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213846-gjyj9vr","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213846-gjyj9vr","updated":"20240201213846"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有哪些解决办法？"}]},{"ID":"20240201213847-sha37yc","Type":"NodeParagraph","Properties":{"id":"20240201213847-sha37yc","updated":"20240201213847"},"Children":[{"Type":"NodeText","Data":"最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。"}]},{"ID":"20240201213848-a33qczx","Type":"NodeParagraph","Properties":{"id":"20240201213848-a33qczx","updated":"20240201213848"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1）缓存无效 key"}]},{"ID":"20240201213849-ba2xml3","Type":"NodeParagraph","Properties":{"id":"20240201213849-ba2xml3","updated":"20240201213849"},"Children":[{"Type":"NodeText","Data":"如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SET key value EX 10086"},{"Type":"NodeText","Data":" 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。"}]},{"ID":"20240201213850-3pis9sm","Type":"NodeParagraph","Properties":{"id":"20240201213850-3pis9sm","updated":"20240201213850"},"Children":[{"Type":"NodeText","Data":"另外，这里多说一嘴，一般情况下我们是这样设计 key 的： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"表名:列名:主键名:主键值"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201213851-c68k85n","Type":"NodeParagraph","Properties":{"id":"20240201213851-c68k85n","updated":"20240201213851"},"Children":[{"Type":"NodeText","Data":"如果用 Java 代码展示的话，差不多是下面这样的："}]},{"ID":"20240201213852-epv0cdk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213852-epv0cdk","updated":"20240201213852"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public Object getObjectInclNullById(Integer id) {\n    // 从缓存中获取数据\n    Object cacheValue = cache.get(id);\n    // 缓存为空\n    if (cacheValue == null) {\n        // 从数据库中获取\n        Object storageValue = storage.get(key);\n        // 缓存空对象\n        cache.set(key, storageValue);\n        // 如果存储数据为空，需要设置一个过期时间(300秒)\n        if (storageValue == null) {\n            // 必须设置过期时间，否则有被攻击的风险\n            cache.expire(key, 60 * 5);\n        }\n        return storageValue;\n    }\n    return cacheValue;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213853-y6b6qz3","Type":"NodeParagraph","Properties":{"id":"20240201213853-y6b6qz3","updated":"20240201213853"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2）布隆过滤器"}]},{"ID":"20240201213854-x1pidlv","Type":"NodeParagraph","Properties":{"id":"20240201213854-x1pidlv","updated":"20240201213854"},"Children":[{"Type":"NodeText","Data":"布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。"}]},{"ID":"20240201213855-y6tdsnn","Type":"NodeParagraph","Properties":{"id":"20240201213855-y6tdsnn","updated":"20240201213855"},"Children":[{"Type":"NodeText","Data":"具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。"}]},{"ID":"20240201213856-x0w5ofr","Type":"NodeParagraph","Properties":{"id":"20240201213856-x0w5ofr","updated":"20240201213856"},"Children":[{"Type":"NodeText","Data":"加入布隆过滤器之后的缓存处理流程图如下。"}]},{"ID":"20240201213857-wionww4","Type":"NodeParagraph","Properties":{"id":"20240201213857-wionww4","updated":"20240201213857"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"加入布隆过滤器之后的缓存处理流程图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/database/redis/redis-cache-penetration-bloom-filter.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213858-pe8w9al","Type":"NodeParagraph","Properties":{"id":"20240201213858-pe8w9al","updated":"20240201213858"},"Children":[{"Type":"NodeText","Data":"但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。"}]},{"ID":"20240201213859-h8grbup","Type":"NodeParagraph","Properties":{"id":"20240201213859-h8grbup","updated":"20240201213859"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！"}]},{"ID":"20240201213860-lhddzxk","Type":"NodeParagraph","Properties":{"id":"20240201213860-lhddzxk","updated":"20240201213860"},"Children":[{"Type":"NodeText","Data":"我们先来看一下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当一个元素加入布隆过滤器中的时候，会进行哪些操作："}]},{"ID":"20240201213861-tg7u0pg","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213861-tg7u0pg","updated":"20240201213861"},"Children":[{"ID":"20240201213862-v1lvumh","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213862-v1lvumh","updated":"20240201213862"},"Children":[{"ID":"20240201213863-wkrcgz0","Type":"NodeParagraph","Properties":{"id":"20240201213863-wkrcgz0","updated":"20240201213863"},"Children":[{"Type":"NodeText","Data":"使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。"}]}]},{"ID":"20240201213864-y961w8w","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213864-y961w8w","updated":"20240201213864"},"Children":[{"ID":"20240201213865-91252c9","Type":"NodeParagraph","Properties":{"id":"20240201213865-91252c9","updated":"20240201213865"},"Children":[{"Type":"NodeText","Data":"根据得到的哈希值，在位数组中把对应下标的值置为 1。"}]}]}]},{"ID":"20240201213866-i23dcaf","Type":"NodeParagraph","Properties":{"id":"20240201213866-i23dcaf","updated":"20240201213866"},"Children":[{"Type":"NodeText","Data":"我们再来看一下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作："}]},{"ID":"20240201213867-bert24x","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213867-bert24x","updated":"20240201213867"},"Children":[{"ID":"20240201213868-8os8tf0","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213868-8os8tf0","updated":"20240201213868"},"Children":[{"ID":"20240201213869-qlqefzt","Type":"NodeParagraph","Properties":{"id":"20240201213869-qlqefzt","updated":"20240201213869"},"Children":[{"Type":"NodeText","Data":"对给定元素再次进行相同的哈希计算；"}]}]},{"ID":"20240201213870-bp01srq","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213870-bp01srq","updated":"20240201213870"},"Children":[{"ID":"20240201213871-279gykc","Type":"NodeParagraph","Properties":{"id":"20240201213871-279gykc","updated":"20240201213871"},"Children":[{"Type":"NodeText","Data":"得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。"}]}]}]},{"ID":"20240201213872-bnh6yvk","Type":"NodeParagraph","Properties":{"id":"20240201213872-bnh6yvk","updated":"20240201213872"},"Children":[{"Type":"NodeText","Data":"然后，一定会出现这样一种情况："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不同的字符串可能哈希出来的位置相同。"},{"Type":"NodeText","Data":" （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）"}]},{"ID":"20240201213873-nc1il35","Type":"NodeParagraph","Properties":{"id":"20240201213873-nc1il35","updated":"20240201213873"},"Children":[{"Type":"NodeText","Data":"更多关于布隆过滤器的内容可以看我的这篇原创："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/cs-basics/data-structure/bloom-filter/","TextMarkTextContent":"《不了解布隆过滤器？一文给你整的明明白白！》"},{"Type":"NodeText","Data":" ，强烈推荐，个人感觉网上应该找不到总结的这么明明白白的文章了。"}]},{"ID":"20240201213874-9x5u1df","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213874-9x5u1df","updated":"20240201213874"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缓存雪崩"}]},{"ID":"20240201213875-10a72cv","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213875-10a72cv","updated":"20240201213875"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是缓存雪崩？"}]},{"ID":"20240201213876-gid1k79","Type":"NodeParagraph","Properties":{"id":"20240201213876-gid1k79","updated":"20240201213876"},"Children":[{"Type":"NodeText","Data":"我发现缓存雪崩这名字起的有点意思，哈哈。"}]},{"ID":"20240201213877-k0zjanf","Type":"NodeParagraph","Properties":{"id":"20240201213877-k0zjanf","updated":"20240201213877"},"Children":[{"Type":"NodeText","Data":"实际上，缓存雪崩描述的就是这样一个简单的场景："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。"},{"Type":"NodeText","Data":" 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。"}]},{"ID":"20240201213878-zli1e4x","Type":"NodeParagraph","Properties":{"id":"20240201213878-zli1e4x","updated":"20240201213878"},"Children":[{"Type":"NodeText","Data":"举个例子：系统的缓存模块出了问题比如宕机导致不可用。造成系统的所有访问，都要走数据库。"}]},{"ID":"20240201213879-cyavm3v","Type":"NodeParagraph","Properties":{"id":"20240201213879-cyavm3v","updated":"20240201213879"},"Children":[{"Type":"NodeText","Data":"还有一种缓存雪崩的场景是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上。"},{"Type":"NodeText","Data":" 这样的情况，有下面几种解决办法："}]},{"ID":"20240201213880-pubthcp","Type":"NodeParagraph","Properties":{"id":"20240201213880-pubthcp","updated":"20240201213880"},"Children":[{"Type":"NodeText","Data":"举个例子 ：秒杀开始 12 个小时之前，我们统一存放了一批商品到 Redis 中，设置的缓存过期时间也是 12 个小时，那么秒杀开始的时候，这些秒杀的商品的访问直接就失效了。导致的情况就是，相应的请求直接就落到了数据库上，就像雪崩一样可怕。"}]},{"ID":"20240201213881-25ljhkl","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213881-25ljhkl","updated":"20240201213881"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有哪些解决办法？"}]},{"ID":"20240201213882-3clb58b","Type":"NodeParagraph","Properties":{"id":"20240201213882-3clb58b","updated":"20240201213882"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"针对 Redis 服务不可用的情况："}]},{"ID":"20240201213883-0z75wdj","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213883-0z75wdj","updated":"20240201213883"},"Children":[{"ID":"20240201213884-zi8fe9i","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213884-zi8fe9i","updated":"20240201213884"},"Children":[{"ID":"20240201213885-eymic81","Type":"NodeParagraph","Properties":{"id":"20240201213885-eymic81","updated":"20240201213885"},"Children":[{"Type":"NodeText","Data":"采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。"}]}]},{"ID":"20240201213886-cs01kk5","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213886-cs01kk5","updated":"20240201213886"},"Children":[{"ID":"20240201213887-tgu1pab","Type":"NodeParagraph","Properties":{"id":"20240201213887-tgu1pab","updated":"20240201213887"},"Children":[{"Type":"NodeText","Data":"限流，避免同时处理大量的请求。"}]}]}]},{"ID":"20240201213888-c6nwk35","Type":"NodeParagraph","Properties":{"id":"20240201213888-c6nwk35","updated":"20240201213888"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"针对热点缓存失效的情况："}]},{"ID":"20240201213889-f7ewx1p","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213889-f7ewx1p","updated":"20240201213889"},"Children":[{"ID":"20240201213890-k5fqlqm","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213890-k5fqlqm","updated":"20240201213890"},"Children":[{"ID":"20240201213891-aixyngw","Type":"NodeParagraph","Properties":{"id":"20240201213891-aixyngw","updated":"20240201213891"},"Children":[{"Type":"NodeText","Data":"设置不同的失效时间比如随机设置缓存的失效时间。"}]}]},{"ID":"20240201213892-oxowxmx","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213892-oxowxmx","updated":"20240201213892"},"Children":[{"ID":"20240201213893-v0r1fhu","Type":"NodeParagraph","Properties":{"id":"20240201213893-v0r1fhu","updated":"20240201213893"},"Children":[{"Type":"NodeText","Data":"缓存永不失效。"}]}]}]},{"ID":"20240201213894-fo7w7pq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213894-fo7w7pq","updated":"20240201213894"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何保证缓存和数据库数据的一致性？"}]},{"ID":"20240201213895-pgkdf7c","Type":"NodeParagraph","Properties":{"id":"20240201213895-pgkdf7c","updated":"20240201213895"},"Children":[{"Type":"NodeText","Data":"细说的话可以扯很多，但是我觉得其实没太大必要（小声 BB：很多解决方案我也没太弄明白）。我个人觉得引入缓存之后，如果为了短时间的不一致性问题，选择让系统设计变得更加复杂的话，完全没必要。"}]},{"ID":"20240201213896-0bx1x33","Type":"NodeParagraph","Properties":{"id":"20240201213896-0bx1x33","updated":"20240201213896"},"Children":[{"Type":"NodeText","Data":"下面单独对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cache Aside Pattern（旁路缓存模式）"},{"Type":"NodeText","Data":" 来聊聊。"}]},{"ID":"20240201213897-cmeb2fq","Type":"NodeParagraph","Properties":{"id":"20240201213897-cmeb2fq","updated":"20240201213897"},"Children":[{"Type":"NodeText","Data":"Cache Aside Pattern 中遇到写请求是这样的：更新 DB，然后直接删除 cache 。"}]},{"ID":"20240201213898-ku8pnan","Type":"NodeParagraph","Properties":{"id":"20240201213898-ku8pnan","updated":"20240201213898"},"Children":[{"Type":"NodeText","Data":"如果更新数据库成功，而删除缓存这一步失败的情况的话，简单说两个解决方案："}]},{"ID":"20240201213899-ttygeao","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213899-ttygeao","updated":"20240201213899"},"Children":[{"ID":"20240201213900-c8bnz0k","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213900-c8bnz0k","updated":"20240201213900"},"Children":[{"ID":"20240201213901-vkoq7nt","Type":"NodeParagraph","Properties":{"id":"20240201213901-vkoq7nt","updated":"20240201213901"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存失效时间变短（不推荐，治标不治本）"},{"Type":"NodeText","Data":" ：我们让缓存数据的过期时间变短，这样的话缓存就会从数据库中加载数据。另外，这种解决办法对于先操作缓存后操作数据库的场景不适用。"}]}]},{"ID":"20240201213902-781a1wa","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213902-781a1wa","updated":"20240201213902"},"Children":[{"ID":"20240201213903-8b89hwb","Type":"NodeParagraph","Properties":{"id":"20240201213903-8b89hwb","updated":"20240201213903"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增加 cache 更新重试机制（常用）"},{"Type":"NodeText","Data":"： 如果 cache 服务当前不可用导致缓存删除失败的话，我们就隔一段时间进行重试，重试次数可以自己定。如果多次重试还是失败的话，我们可以把当前更新失败的 key 存入队列中，等缓存服务可用之后，再将缓存中对应的 key 删除即可。"}]}]}]},{"ID":"20240201213904-0sbvn4f","Type":"NodeParagraph","Properties":{"id":"20240201213904-0sbvn4f","updated":"20240201213904"},"Children":[{"Type":"NodeText","Data":"相关文章推荐："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==\u0026mid=2247487312\u0026idx=1\u0026sn=fa19566f5729d6598155b5c676eee62d\u0026chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1\u0026scene=178\u0026cur_album_id=1699766580538032128#rd","TextMarkTextContent":"缓存和数据库一致性问题，看这篇就够了 - 水滴与银弹"}]}]}