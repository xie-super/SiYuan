{"ID":"20240201214126-sjmm5b5","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201214126-sjmm5b5","title":"g-0分布式理论","updated":"20240201214126"},"Children":[{"ID":"20240201214127-q3wu68y","Type":"NodeThematicBreak","Properties":{"id":"20240201214127-q3wu68y","updated":"20240201214127"}},{"ID":"20240201214128-i3tw6od","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240201214128-i3tw6od","updated":"20240201214128"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"7. 分布式"}]},{"ID":"20240201214129-punokpi","Type":"NodeBlockquote","Properties":{"id":"20240201214129-punokpi","updated":"20240201214129"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201214130-jk5yvhp","Type":"NodeParagraph","Properties":{"id":"20240201214130-jk5yvhp","updated":"20240201214130"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/","TextMarkTextContent":"JavaGuide"},{"Type":"NodeText","Data":" ：「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！"}]}]},{"ID":"20240201214131-tjbqysr","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003cdiv align=\"center\"\u003e\n    \u003cp\u003e\n        \u003ca href=\"https://www.yuque.com/docs/share/8a30ffb5-83f3-40f9-baf9-38de68b906dc\"\u003e\n            \u003cimg src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/xingqiu/xingqiu.png\" style=\"margin: 0 auto; width: 850px;\" /\u003e\n        \u003c/a\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003ca href=\"https://github.com/Snailclimb/JavaGuide-Interview\"\u003eGithub\u003c/a\u003e |\n        \u003ca href=\"https://gitee.com/SnailClimb/JavaGuide-Interview\"\u003eGitee\u003c/a\u003e\n    \u003c/p\u003e  \n\u003c/div\u003e","HtmlBlockType":6,"Properties":{"id":"20240201214131-tjbqysr","updated":"20240201214131"}},{"ID":"20240201214132-zcrnray","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201214132-zcrnray","updated":"20240201214132"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.1 理论\u0026算法\u0026协议"}]},{"ID":"20240201214133-16bc95x","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214133-16bc95x","updated":"20240201214133"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 CAP理论？"}]},{"ID":"20240201214134-0yzu0pf","Type":"NodeParagraph","Properties":{"id":"20240201214134-0yzu0pf","updated":"20240201214134"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zh.wikipedia.org/wiki/CAP定理","TextMarkTextContent":"CAP 理论/定理"},{"Type":"NodeText","Data":"起源于 2000年，由加州大学伯克利分校的Eric Brewer教授在分布式计算原理研讨会（PODC）上提出，因此 CAP定理又被称作 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"布鲁尔定理（Brewer’s theorem）"}]},{"ID":"20240201214135-714oyhv","Type":"NodeParagraph","Properties":{"id":"20240201214135-714oyhv","updated":"20240201214135"},"Children":[{"Type":"NodeText","Data":"2年后，麻省理工学院的Seth Gilbert和Nancy Lynch 发表了布鲁尔猜想的证明，CAP理论正式成为分布式领域的定理。"}]},{"ID":"20240201214136-g0ipv0g","Type":"NodeParagraph","Properties":{"id":"20240201214136-g0ipv0g","updated":"20240201214136"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"CAP"},{"Type":"NodeText","Data":" 也就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Consistency（一致性）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Availability（可用性）"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Partition Tolerance（分区容错性）"},{"Type":"NodeText","Data":" 这三个单词首字母组合。"}]},{"ID":"20240201214137-2xeo6il","Type":"NodeParagraph","Properties":{"id":"20240201214137-2xeo6il","updated":"20240201214137"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/cap.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214138-i7svmpl","Type":"NodeParagraph","Properties":{"id":"20240201214138-i7svmpl","updated":"20240201214138"},"Children":[{"Type":"NodeText","Data":"CAP 理论的提出者布鲁尔在提出 CAP 猜想的时候，并没有详细定义 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Consistency"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Availability"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Partition Tolerance"},{"Type":"NodeText","Data":" 三个单词的明确定义。"}]},{"ID":"20240201214139-9grgq5d","Type":"NodeParagraph","Properties":{"id":"20240201214139-9grgq5d","updated":"20240201214139"},"Children":[{"Type":"NodeText","Data":"因此，对于 CAP 的民间解读有很多，一般比较被大家推荐的是下面 👇 这种版本的解读。"}]},{"ID":"20240201214140-10lolkf","Type":"NodeParagraph","Properties":{"id":"20240201214140-10lolkf","updated":"20240201214140"},"Children":[{"Type":"NodeText","Data":"在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能同时满足以下三点中的两个："}]},{"ID":"20240201214141-bu8f4wh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214141-bu8f4wh","updated":"20240201214141"},"Children":[{"ID":"20240201214142-e7lmqt7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214142-e7lmqt7","updated":"20240201214142"},"Children":[{"ID":"20240201214143-bk4n1la","Type":"NodeParagraph","Properties":{"id":"20240201214143-bk4n1la","updated":"20240201214143"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性（Consistency）"},{"Type":"NodeText","Data":" : 所有节点访问同一份最新的数据副本"}]}]},{"ID":"20240201214144-sc7d0n1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214144-sc7d0n1","updated":"20240201214144"},"Children":[{"ID":"20240201214145-wzykcfp","Type":"NodeParagraph","Properties":{"id":"20240201214145-wzykcfp","updated":"20240201214145"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可用性（Availability）"},{"Type":"NodeText","Data":": 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。"}]}]},{"ID":"20240201214146-tiyyq6o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214146-tiyyq6o","updated":"20240201214146"},"Children":[{"ID":"20240201214147-72s4ao2","Type":"NodeParagraph","Properties":{"id":"20240201214147-72s4ao2","updated":"20240201214147"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分区容错性（Partition tolerance）"},{"Type":"NodeText","Data":" : 分布式系统出现网络分区的时候，仍然能够对外提供服务。"}]}]}]},{"ID":"20240201214148-crtozg7","Type":"NodeParagraph","Properties":{"id":"20240201214148-crtozg7","updated":"20240201214148"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是网络分区？"}]},{"ID":"20240201214149-6r3fhd1","Type":"NodeBlockquote","Properties":{"id":"20240201214149-6r3fhd1","updated":"20240201214149"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201214150-oyblxdc","Type":"NodeParagraph","Properties":{"id":"20240201214150-oyblxdc","updated":"20240201214150"},"Children":[{"Type":"NodeText","Data":"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫网络分区。"}]}]},{"ID":"20240201214151-l54iyeh","Type":"NodeParagraph","Properties":{"id":"20240201214151-l54iyeh","updated":"20240201214151"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"partition-tolerance","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-11/partition-tolerance.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214152-ftar89e","Type":"NodeParagraph","Properties":{"id":"20240201214152-ftar89e","updated":"20240201214152"},"Children":[{"Type":"NodeText","Data":"大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在 CAP 理论诞生 12 年之后，CAP 之父也在 2012 年重写了之前的论文。"}]},{"ID":"20240201214153-6d7yi2g","Type":"NodeBlockquote","Properties":{"id":"20240201214153-6d7yi2g","updated":"20240201214153"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201214154-wrj1k9d","Type":"NodeParagraph","Properties":{"id":"20240201214154-wrj1k9d","updated":"20240201214154"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。"}]},{"ID":"20240201214155-2704ex9","Type":"NodeParagraph","Properties":{"id":"20240201214155-2704ex9","updated":"20240201214155"},"Children":[{"Type":"NodeText","Data":"简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。"}]}]},{"ID":"20240201214156-7js8z70","Type":"NodeParagraph","Properties":{"id":"20240201214156-7js8z70","updated":"20240201214156"},"Children":[{"Type":"NodeText","Data":"因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。"},{"Type":"NodeText","Data":" 比如 ZooKeeper、HBase 就是 CP 架构，Cassandra、Eureka 就是 AP 架构，Nacos 不仅支持 CP 架构也支持 AP 架构。"}]},{"ID":"20240201214157-eo0260x","Type":"NodeParagraph","Properties":{"id":"20240201214157-eo0260x","updated":"20240201214157"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为啥不可能选择 CA 架构呢？"},{"Type":"NodeText","Data":" 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。"}]},{"ID":"20240201214158-pfoh1we","Type":"NodeParagraph","Properties":{"id":"20240201214158-pfoh1we","updated":"20240201214158"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"选择 CP 还是 AP 的关键在于当前的业务场景，没有定论，比如对于需要确保强一致性的场景如银行一般会选择保证 CP 。"}]},{"ID":"20240201214159-9nyrsyr","Type":"NodeParagraph","Properties":{"id":"20240201214159-9nyrsyr","updated":"20240201214159"},"Children":[{"Type":"NodeText","Data":"另外，需要补充说明的一点是： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果网络分区正常的话（系统在绝大部分时候所处的状态），也就说不需要保证 P 的时候，C 和 A 能够同时保证。"}]},{"ID":"20240201214160-ws4nyum","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214160-ws4nyum","updated":"20240201214160"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Base 理论？"}]},{"ID":"20240201214161-118awzs","Type":"NodeParagraph","Properties":{"id":"20240201214161-118awzs","updated":"20240201214161"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://dl.acm.org/doi/10.1145/1394127.1394128","TextMarkTextContent":"BASE 理论"},{"Type":"NodeText","Data":"起源于 2008 年， 由eBay的架构师Dan Pritchett在ACM上发表。"}]},{"ID":"20240201214162-eauc34i","Type":"NodeParagraph","Properties":{"id":"20240201214162-eauc34i","updated":"20240201214162"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"BASE"},{"Type":"NodeText","Data":" 是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Basically Available（基本可用）"},{"Type":"NodeText","Data":" 、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Soft-state（软状态）"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Eventually Consistent（最终一致性）"},{"Type":"NodeText","Data":" 三个短语的缩写。BASE 理论是对 CAP 中一致性 C 和可用性 A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。"}]},{"ID":"20240201214163-2bqtezj","Type":"NodeParagraph","Properties":{"id":"20240201214163-2bqtezj","updated":"20240201214163"},"Children":[{"Type":"NodeText","Data":"即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。"}]},{"ID":"20240201214164-1386p9u","Type":"NodeBlockquote","Properties":{"id":"20240201214164-1386p9u","updated":"20240201214164"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201214165-a8s00da","Type":"NodeParagraph","Properties":{"id":"20240201214165-a8s00da","updated":"20240201214165"},"Children":[{"Type":"NodeText","Data":"也就是牺牲数据的一致性来满足系统的高可用性，系统中一部分数据不可用或者不一致时，仍需要保持系统整体“主要可用”。"}]}]},{"ID":"20240201214166-aclzpvu","Type":"NodeParagraph","Properties":{"id":"20240201214166-aclzpvu","updated":"20240201214166"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充。"}]},{"ID":"20240201214167-2xobd0b","Type":"NodeParagraph","Properties":{"id":"20240201214167-2xobd0b","updated":"20240201214167"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么这样说呢？"}]},{"ID":"20240201214168-xep7rfe","Type":"NodeParagraph","Properties":{"id":"20240201214168-xep7rfe","updated":"20240201214168"},"Children":[{"Type":"NodeText","Data":"CAP 理论这节我们也说过了："}]},{"ID":"20240201214169-debvirm","Type":"NodeBlockquote","Properties":{"id":"20240201214169-debvirm","updated":"20240201214169"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201214170-75ewjx9","Type":"NodeParagraph","Properties":{"id":"20240201214170-75ewjx9","updated":"20240201214170"},"Children":[{"Type":"NodeText","Data":"如果系统没有发生“分区”的话，节点间的网络连接通信正常的话，也就不存在 P 了。这个时候，我们就可以同时保证 C 和 A 了。因此，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果系统发生“分区”，我们要考虑选择 CP 还是 AP。如果系统没有发生“分区”的话，我们要思考如何保证 CA 。"}]}]},{"ID":"20240201214171-12oanzi","Type":"NodeParagraph","Properties":{"id":"20240201214171-12oanzi","updated":"20240201214171"},"Children":[{"Type":"NodeText","Data":"因此，AP 方案只是在系统发生分区的时候放弃一致性，而不是永远放弃一致性。在分区故障恢复后，系统应该达到最终一致性。这一点其实就是 BASE 理论延伸的地方。"}]},{"ID":"20240201214172-45pd28d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214172-45pd28d","updated":"20240201214172"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"聊聊你对 Paxos 算法的了解？"}]},{"ID":"20240201214173-jqz4ugq","Type":"NodeParagraph","Properties":{"id":"20240201214173-jqz4ugq","updated":"20240201214173"},"Children":[{"Type":"NodeText","Data":"Paxos 算法是兰伯特在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1990"},{"Type":"NodeText","Data":" 年提出了一种分布式系统共识算法。"}]},{"ID":"20240201214174-mxr0od5","Type":"NodeParagraph","Properties":{"id":"20240201214174-mxr0od5","updated":"20240201214174"},"Children":[{"Type":"NodeText","Data":"兰伯特当时提出的 Paxos 算法主要包含 2 个部分:"}]},{"ID":"20240201214175-6jbpsj1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214175-6jbpsj1","updated":"20240201214175"},"Children":[{"ID":"20240201214176-uf9mpp9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214176-uf9mpp9","updated":"20240201214176"},"Children":[{"ID":"20240201214177-dz1hhwa","Type":"NodeParagraph","Properties":{"id":"20240201214177-dz1hhwa","updated":"20240201214177"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Basic Paxos 算法"},{"Type":"NodeText","Data":" ： 描述的是多节点之间如何就某个值(提案 Value)达成共识。"}]}]},{"ID":"20240201214178-fbd0kau","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214178-fbd0kau","updated":"20240201214178"},"Children":[{"ID":"20240201214179-m1m5pf7","Type":"NodeParagraph","Properties":{"id":"20240201214179-m1m5pf7","updated":"20240201214179"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Multi-Paxos 思想"},{"Type":"NodeText","Data":" ： 描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。Multi-Paxos 说白了就是执行多次 Basic Paxos ，核心还是 Basic Paxos 。"}]}]}]},{"ID":"20240201214180-zn89ddi","Type":"NodeParagraph","Properties":{"id":"20240201214180-zn89ddi","updated":"20240201214180"},"Children":[{"Type":"NodeText","Data":"由于 Paxos 算法在国际上被公认的非常难以理解和实现，因此不断有人尝试简化这一算法。到了2013 年才诞生了一个比 Paxos 算法更易理解和实现的共识算法—"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/theorem\u0026algorithm\u0026protocol/raft-algorithm.html","TextMarkTextContent":"Raft 算法"},{"Type":"NodeText","Data":" 。更具体点来说，Raft 是Multi-Paxos的一个变种，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现。"}]},{"ID":"20240201214181-q1dstrm","Type":"NodeParagraph","Properties":{"id":"20240201214181-q1dstrm","updated":"20240201214181"},"Children":[{"Type":"NodeText","Data":"关于 Paxos 算法的详细介绍，请看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/theorem\u0026algorithm\u0026protocol/paxos-algorithm.html","TextMarkTextContent":"Paxos 算法"},{"Type":"NodeText","Data":"这篇文章。"}]},{"ID":"20240201214182-pnyre3o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214182-pnyre3o","updated":"20240201214182"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"聊聊你对 Raft 算法的了解？"}]},{"ID":"20240201214183-waphzdg","Type":"NodeParagraph","Properties":{"id":"20240201214183-waphzdg","updated":"20240201214183"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/distributed-system/theorem\u0026algorithm\u0026protocol/raft-algorithm.html","TextMarkTextContent":"Raft 算法"}]},{"ID":"20240201214184-xp7jz5h","Type":"NodeThematicBreak","Properties":{"id":"20240201214184-xp7jz5h","updated":"20240201214184"}}]}