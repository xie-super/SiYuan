{"ID":"20240201213452-hipk33e","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201213452-hipk33e","title":"e-1spring","updated":"20240201213452"},"Children":[{"ID":"20240201213453-6wpvutq","Type":"NodeThematicBreak","Properties":{"id":"20240201213453-6wpvutq","updated":"20240201213453"}},{"ID":"20240201213454-m9q6nm5","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240201213454-m9q6nm5","updated":"20240201213454"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. 常用框架"}]},{"ID":"20240201213455-a6ezqb8","Type":"NodeBlockquote","Properties":{"id":"20240201213455-a6ezqb8","updated":"20240201213455"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213456-rm84zr0","Type":"NodeParagraph","Properties":{"id":"20240201213456-rm84zr0","updated":"20240201213456"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/","TextMarkTextContent":"JavaGuide"},{"Type":"NodeText","Data":" ：「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！"}]}]},{"ID":"20240201213457-5j3sqqi","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003cdiv align=\"center\"\u003e\n    \u003cp\u003e\n        \u003ca href=\"https://www.yuque.com/docs/share/8a30ffb5-83f3-40f9-baf9-38de68b906dc\"\u003e\n            \u003cimg src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/xingqiu/xingqiu.png\" style=\"margin: 0 auto; width: 850px;\" /\u003e\n        \u003c/a\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003ca href=\"https://github.com/Snailclimb/JavaGuide-Interview\"\u003eGithub\u003c/a\u003e |\n        \u003ca href=\"https://gitee.com/SnailClimb/JavaGuide-Interview\"\u003eGitee\u003c/a\u003e\n    \u003c/p\u003e  \n\u003c/div\u003e","HtmlBlockType":6,"Properties":{"id":"20240201213457-5j3sqqi","updated":"20240201213457"}},{"ID":"20240201213458-27jmqzv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201213458-27jmqzv","updated":"20240201213458"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.1 Spring"}]},{"ID":"20240201213459-vvoobop","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213459-vvoobop","updated":"20240201213459"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 基础"}]},{"ID":"20240201213460-emepl5l","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213460-emepl5l","updated":"20240201213460"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Spring 框架?"}]},{"ID":"20240201213461-52v6qcy","Type":"NodeParagraph","Properties":{"id":"20240201213461-52v6qcy","updated":"20240201213461"},"Children":[{"Type":"NodeText","Data":"Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。"}]},{"ID":"20240201213462-k3rzwe6","Type":"NodeParagraph","Properties":{"id":"20240201213462-k3rzwe6","updated":"20240201213462"},"Children":[{"Type":"NodeText","Data":"我们一般说 Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发，比如说 Spring 支持 IoC（Inverse of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）、对单元测试支持比较好、支持 RESTful Java 应用程序的开发。"}]},{"ID":"20240201213463-k1nf5yu","Type":"NodeParagraph","Properties":{"id":"20240201213463-k1nf5yu","updated":"20240201213463"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/38ef122122de4375abcd27c3de8f60b4.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213464-341oga2","Type":"NodeParagraph","Properties":{"id":"20240201213464-341oga2","updated":"20240201213464"},"Children":[{"Type":"NodeText","Data":"Spring 最核心的思想就是不重新造轮子，开箱即用，提高开发效率。"}]},{"ID":"20240201213465-4mua4pl","Type":"NodeParagraph","Properties":{"id":"20240201213465-4mua4pl","updated":"20240201213465"},"Children":[{"Type":"NodeText","Data":"Spring 翻译过来就是春天的意思，可见其目标和使命就是为 Java 程序员带来春天啊！感动！"}]},{"ID":"20240201213466-graj2na","Type":"NodeParagraph","Properties":{"id":"20240201213466-graj2na","updated":"20240201213466"},"Children":[{"Type":"NodeText","Data":"🤐 多提一嘴 ： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"语言的流行通常需要一个杀手级的应用，Spring 就是 Java 生态的一个杀手级的应用框架。"}]},{"ID":"20240201213467-saajy9k","Type":"NodeParagraph","Properties":{"id":"20240201213467-saajy9k","updated":"20240201213467"},"Children":[{"Type":"NodeText","Data":"Spring 提供的核心功能主要是 IoC 和 AOP。学习 Spring ，一定要把 IoC 和 AOP 的核心思想搞懂！"}]},{"ID":"20240201213468-bmwruaw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213468-bmwruaw","updated":"20240201213468"},"Children":[{"ID":"20240201213469-xfm6d5p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213469-xfm6d5p","updated":"20240201213469"},"Children":[{"ID":"20240201213470-8am3wpm","Type":"NodeParagraph","Properties":{"id":"20240201213470-8am3wpm","updated":"20240201213470"},"Children":[{"Type":"NodeText","Data":"Spring 官网："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://spring.io/","TextMarkTextContent":"https://spring.io/"}]}]},{"ID":"20240201213471-2d8x1al","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213471-2d8x1al","updated":"20240201213471"},"Children":[{"ID":"20240201213472-vcv2ma1","Type":"NodeParagraph","Properties":{"id":"20240201213472-vcv2ma1","updated":"20240201213472"},"Children":[{"Type":"NodeText","Data":"Github 地址： https://github.com/spring-projects/spring-framework"}]}]}]},{"ID":"20240201213473-c87j1vp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213473-c87j1vp","updated":"20240201213473"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 包含的模块有哪些？"}]},{"ID":"20240201213474-k4i2xz4","Type":"NodeParagraph","Properties":{"id":"20240201213474-k4i2xz4","updated":"20240201213474"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring4.x 版本"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213475-ejp8yuv","Type":"NodeParagraph","Properties":{"id":"20240201213475-ejp8yuv","updated":"20240201213475"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring4.x主要模块","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/jvme0c60b4606711fc4a0b6faf03230247a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213476-vecipz2","Type":"NodeParagraph","Properties":{"id":"20240201213476-vecipz2","updated":"20240201213476"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring5.x 版本"},{"Type":"NodeText","Data":" ："}]},{"ID":"20240201213477-lplq11x","Type":"NodeParagraph","Properties":{"id":"20240201213477-lplq11x","updated":"20240201213477"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring5.x主要模块","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/20200831175708.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213478-pxq9sgr","Type":"NodeParagraph","Properties":{"id":"20240201213478-pxq9sgr","updated":"20240201213478"},"Children":[{"Type":"NodeText","Data":"Spring5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。"}]},{"ID":"20240201213479-bduen49","Type":"NodeParagraph","Properties":{"id":"20240201213479-bduen49","updated":"20240201213479"},"Children":[{"Type":"NodeText","Data":"Spring 各个模块的依赖关系如下："}]},{"ID":"20240201213480-p4g31xv","Type":"NodeParagraph","Properties":{"id":"20240201213480-p4g31xv","updated":"20240201213480"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring 各个模块的依赖关系","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/20200902100038.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213481-kakc8ft","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213481-kakc8ft","updated":"20240201213481"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Core Container"}]},{"ID":"20240201213482-ph5gqly","Type":"NodeParagraph","Properties":{"id":"20240201213482-ph5gqly","updated":"20240201213482"},"Children":[{"Type":"NodeText","Data":"Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC 依赖注入功能的支持。Spring 其他所有的功能基本都需要依赖于该模块，我们从上面那张 Spring 各个模块的依赖关系图就可以看出来。"}]},{"ID":"20240201213483-a7g1v13","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213483-a7g1v13","updated":"20240201213483"},"Children":[{"ID":"20240201213484-xr657xu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213484-xr657xu","updated":"20240201213484"},"Children":[{"ID":"20240201213485-n7lgm94","Type":"NodeParagraph","Properties":{"id":"20240201213485-n7lgm94","updated":"20240201213485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-core"},{"Type":"NodeText","Data":" ：Spring 框架基本的核心工具类。"}]}]},{"ID":"20240201213486-z9fo3mi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213486-z9fo3mi","updated":"20240201213486"},"Children":[{"ID":"20240201213487-54uw6lb","Type":"NodeParagraph","Properties":{"id":"20240201213487-54uw6lb","updated":"20240201213487"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-beans"},{"Type":"NodeText","Data":" ：提供对 bean 的创建、配置和管理等功能的支持。"}]}]},{"ID":"20240201213488-301cg9m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213488-301cg9m","updated":"20240201213488"},"Children":[{"ID":"20240201213489-5xqgrge","Type":"NodeParagraph","Properties":{"id":"20240201213489-5xqgrge","updated":"20240201213489"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-context"},{"Type":"NodeText","Data":" ：提供对国际化、事件传播、资源加载等功能的支持。"}]}]},{"ID":"20240201213490-qyhugkt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213490-qyhugkt","updated":"20240201213490"},"Children":[{"ID":"20240201213491-tdqfecr","Type":"NodeParagraph","Properties":{"id":"20240201213491-tdqfecr","updated":"20240201213491"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-expression"},{"Type":"NodeText","Data":" ：提供对表达式语言（Spring Expression Language） SpEL 的支持，只依赖于 core 模块，不依赖于其他模块，可以单独使用。"}]}]}]},{"ID":"20240201213492-0yjxz6x","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213492-0yjxz6x","updated":"20240201213492"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AOP"}]},{"ID":"20240201213493-wzvpdx2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213493-wzvpdx2","updated":"20240201213493"},"Children":[{"ID":"20240201213494-38ew60e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213494-38ew60e","updated":"20240201213494"},"Children":[{"ID":"20240201213495-t0a4tzl","Type":"NodeParagraph","Properties":{"id":"20240201213495-t0a4tzl","updated":"20240201213495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-aspects"},{"Type":"NodeText","Data":" ：该模块为与 AspectJ 的集成提供支持。"}]}]},{"ID":"20240201213496-5ryc8nz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213496-5ryc8nz","updated":"20240201213496"},"Children":[{"ID":"20240201213497-bi5cnzy","Type":"NodeParagraph","Properties":{"id":"20240201213497-bi5cnzy","updated":"20240201213497"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-aop"},{"Type":"NodeText","Data":" ：提供了面向切面的编程实现。"}]}]},{"ID":"20240201213498-5aqgin5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213498-5aqgin5","updated":"20240201213498"},"Children":[{"ID":"20240201213499-gv8to83","Type":"NodeParagraph","Properties":{"id":"20240201213499-gv8to83","updated":"20240201213499"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-instrument"},{"Type":"NodeText","Data":" ：提供了为 JVM 添加代理（agent）的功能。 具体来讲，它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递类文 件，就像这些文件是被类加载器加载的一样。没有理解也没关系，这个模块的使用场景非常有限。"}]}]}]},{"ID":"20240201213500-owo2ctb","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213500-owo2ctb","updated":"20240201213500"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Data Access/Integration"}]},{"ID":"20240201213501-w40z8g1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213501-w40z8g1","updated":"20240201213501"},"Children":[{"ID":"20240201213502-juek8mv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213502-juek8mv","updated":"20240201213502"},"Children":[{"ID":"20240201213503-ssbz8aa","Type":"NodeParagraph","Properties":{"id":"20240201213503-ssbz8aa","updated":"20240201213503"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-jdbc"},{"Type":"NodeText","Data":" ：提供了对数据库访问的抽象 JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java 程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。"}]}]},{"ID":"20240201213504-h8jz6a2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213504-h8jz6a2","updated":"20240201213504"},"Children":[{"ID":"20240201213505-lmag6kw","Type":"NodeParagraph","Properties":{"id":"20240201213505-lmag6kw","updated":"20240201213505"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-tx"},{"Type":"NodeText","Data":" ：提供对事务的支持。"}]}]},{"ID":"20240201213506-x0dy358","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213506-x0dy358","updated":"20240201213506"},"Children":[{"ID":"20240201213507-ehhy84b","Type":"NodeParagraph","Properties":{"id":"20240201213507-ehhy84b","updated":"20240201213507"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-orm"},{"Type":"NodeText","Data":" ： 提供对 Hibernate、JPA 、iBatis 等 ORM 框架的支持。"}]}]},{"ID":"20240201213508-9stotdj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213508-9stotdj","updated":"20240201213508"},"Children":[{"ID":"20240201213509-6y2mkyy","Type":"NodeParagraph","Properties":{"id":"20240201213509-6y2mkyy","updated":"20240201213509"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-oxm"},{"Type":"NodeText","Data":" ：提供一个抽象层支撑 OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和 XStream 等。"}]}]},{"ID":"20240201213510-pe77jp4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213510-pe77jp4","updated":"20240201213510"},"Children":[{"ID":"20240201213511-sph2rmp","Type":"NodeParagraph","Properties":{"id":"20240201213511-sph2rmp","updated":"20240201213511"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-jms"},{"Type":"NodeText","Data":" : 消息服务。自 Spring Framework 4.1 以后，它还提供了对 spring-messaging 模块的继承。"}]}]}]},{"ID":"20240201213512-g3l63lk","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213512-g3l63lk","updated":"20240201213512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Web"}]},{"ID":"20240201213513-h0uuynk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213513-h0uuynk","updated":"20240201213513"},"Children":[{"ID":"20240201213514-c3r847x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213514-c3r847x","updated":"20240201213514"},"Children":[{"ID":"20240201213515-fz1exf0","Type":"NodeParagraph","Properties":{"id":"20240201213515-fz1exf0","updated":"20240201213515"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-web"},{"Type":"NodeText","Data":" ：对 Web 功能的实现提供一些最基础的支持。"}]}]},{"ID":"20240201213516-os96mre","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213516-os96mre","updated":"20240201213516"},"Children":[{"ID":"20240201213517-w15j338","Type":"NodeParagraph","Properties":{"id":"20240201213517-w15j338","updated":"20240201213517"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-webmvc"},{"Type":"NodeText","Data":" ： 提供对 Spring MVC 的实现。"}]}]},{"ID":"20240201213518-n6jzulo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213518-n6jzulo","updated":"20240201213518"},"Children":[{"ID":"20240201213519-d0kr1fe","Type":"NodeParagraph","Properties":{"id":"20240201213519-d0kr1fe","updated":"20240201213519"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-websocket"},{"Type":"NodeText","Data":" ： 提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信。"}]}]},{"ID":"20240201213520-3otelw4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213520-3otelw4","updated":"20240201213520"},"Children":[{"ID":"20240201213521-bm2k137","Type":"NodeParagraph","Properties":{"id":"20240201213521-bm2k137","updated":"20240201213521"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-webflux"},{"Type":"NodeText","Data":" ：提供对 WebFlux 的支持。WebFlux 是 Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步。"}]}]}]},{"ID":"20240201213522-i6kno1q","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213522-i6kno1q","updated":"20240201213522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Messaging"}]},{"ID":"20240201213523-dfq4g7t","Type":"NodeParagraph","Properties":{"id":"20240201213523-dfq4g7t","updated":"20240201213523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"spring-messaging"},{"Type":"NodeText","Data":" 是从 Spring4.0 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。"}]},{"ID":"20240201213524-xa3bybq","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240201213524-xa3bybq","updated":"20240201213524"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Test"}]},{"ID":"20240201213525-3ksbvrk","Type":"NodeParagraph","Properties":{"id":"20240201213525-3ksbvrk","updated":"20240201213525"},"Children":[{"Type":"NodeText","Data":"Spring 团队提倡测试驱动开发（TDD）。有了控制反转 (IoC)的帮助，单元测试和集成测试变得更简单。"}]},{"ID":"20240201213526-tdeq0w3","Type":"NodeParagraph","Properties":{"id":"20240201213526-tdeq0w3","updated":"20240201213526"},"Children":[{"Type":"NodeText","Data":"Spring 的测试模块对 JUnit（单元测试框架）、TestNG（类似 JUnit）、Mockito（主要用来 Mock 对象）、PowerMock（解决 Mockito 的问题比如无法模拟 final, static， private 方法）等等常用的测试框架支持的都比较好。"}]},{"ID":"20240201213527-rxvc1us","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213527-rxvc1us","updated":"20240201213527"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring,Spring MVC,Spring Boot 之间什么关系?"}]},{"ID":"20240201213528-6v9j387","Type":"NodeParagraph","Properties":{"id":"20240201213528-6v9j387","updated":"20240201213528"},"Children":[{"Type":"NodeText","Data":"很多人对 Spring,Spring MVC,Spring Boot 这三者傻傻分不清楚！这里简单介绍一下这三者，其实很简单，没有什么高深的东西。"}]},{"ID":"20240201213529-kzzp987","Type":"NodeParagraph","Properties":{"id":"20240201213529-kzzp987","updated":"20240201213529"},"Children":[{"Type":"NodeText","Data":"Spring 包含了多个功能模块（上面刚刚提高过），其中最重要的是 Spring-Core（主要提供 IoC 依赖注入功能的支持） 模块， Spring 中的其他模块（比如 Spring MVC）的功能实现基本都需要依赖于该模块。"}]},{"ID":"20240201213530-xmxv3a7","Type":"NodeParagraph","Properties":{"id":"20240201213530-xmxv3a7","updated":"20240201213530"},"Children":[{"Type":"NodeText","Data":"下图对应的是 Spring4.x 版本。目前最新的 5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。"}]},{"ID":"20240201213531-gjh7kqf","Type":"NodeParagraph","Properties":{"id":"20240201213531-gjh7kqf","updated":"20240201213531"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring主要模块","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/jvme0c60b4606711fc4a0b6faf03230247a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213532-owa6p22","Type":"NodeParagraph","Properties":{"id":"20240201213532-owa6p22","updated":"20240201213532"},"Children":[{"Type":"NodeText","Data":"Spring MVC 是 Spring 中的一个很重要的模块，主要赋予 Spring 快速构建 MVC 架构的 Web 程序的能力。MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。"}]},{"ID":"20240201213533-9et7rg1","Type":"NodeParagraph","Properties":{"id":"20240201213533-9et7rg1","updated":"20240201213533"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210809181452421.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213534-ajn32h5","Type":"NodeParagraph","Properties":{"id":"20240201213534-ajn32h5","updated":"20240201213534"},"Children":[{"Type":"NodeText","Data":"使用 Spring 进行开发各种配置过于麻烦比如开启某些 Spring 特性时，需要用 XML 或 Java 进行显式配置。于是，Spring Boot 诞生了！"}]},{"ID":"20240201213535-x4w1hoy","Type":"NodeParagraph","Properties":{"id":"20240201213535-x4w1hoy","updated":"20240201213535"},"Children":[{"Type":"NodeText","Data":"Spring 旨在简化 J2EE 企业应用程序开发。Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。"}]},{"ID":"20240201213536-qawdbpz","Type":"NodeParagraph","Properties":{"id":"20240201213536-qawdbpz","updated":"20240201213536"},"Children":[{"Type":"NodeText","Data":"Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用！"}]},{"ID":"20240201213537-9n7jsul","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213537-9n7jsul","updated":"20240201213537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring IoC"}]},{"ID":"20240201213538-27yonvb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213538-27yonvb","updated":"20240201213538"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"谈谈自己对于 Spring IoC 的了解"}]},{"ID":"20240201213539-36ycgqe","Type":"NodeParagraph","Properties":{"id":"20240201213539-36ycgqe","updated":"20240201213539"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"IoC（Inverse of Control:控制反转）"},{"Type":"NodeText","Data":" 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。"}]},{"ID":"20240201213540-s61jpsg","Type":"NodeParagraph","Properties":{"id":"20240201213540-s61jpsg","updated":"20240201213540"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为什么叫控制反转？"}]},{"ID":"20240201213541-f77wj2r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213541-f77wj2r","updated":"20240201213541"},"Children":[{"ID":"20240201213542-dh80nsm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213542-dh80nsm","updated":"20240201213542"},"Children":[{"ID":"20240201213543-wj9hd5r","Type":"NodeParagraph","Properties":{"id":"20240201213543-wj9hd5r","updated":"20240201213543"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"控制"},{"Type":"NodeText","Data":" ：指的是对象创建（实例化、管理）的权力"}]}]},{"ID":"20240201213544-e57duda","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213544-e57duda","updated":"20240201213544"},"Children":[{"ID":"20240201213545-mtuop6a","Type":"NodeParagraph","Properties":{"id":"20240201213545-mtuop6a","updated":"20240201213545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"反转"},{"Type":"NodeText","Data":" ：控制权交给外部环境（Spring 框架、IoC 容器）"}]}]}]},{"ID":"20240201213546-tbzc3on","Type":"NodeParagraph","Properties":{"id":"20240201213546-tbzc3on","updated":"20240201213546"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/frc-365faceb5697f04f31399937c059c162.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213547-e750l9b","Type":"NodeParagraph","Properties":{"id":"20240201213547-e750l9b","updated":"20240201213547"},"Children":[{"Type":"NodeText","Data":"将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。"}]},{"ID":"20240201213548-suy48o8","Type":"NodeParagraph","Properties":{"id":"20240201213548-suy48o8","updated":"20240201213548"},"Children":[{"Type":"NodeText","Data":"在实际项目中一个 Service 类可能依赖了很多其他的类，假如我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IoC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。"}]},{"ID":"20240201213549-6j9cvzv","Type":"NodeParagraph","Properties":{"id":"20240201213549-6j9cvzv","updated":"20240201213549"},"Children":[{"Type":"NodeText","Data":"在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。"}]},{"ID":"20240201213550-las7cvz","Type":"NodeParagraph","Properties":{"id":"20240201213550-las7cvz","updated":"20240201213550"},"Children":[{"Type":"NodeText","Data":"Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。"}]},{"ID":"20240201213551-8hrnvwc","Type":"NodeParagraph","Properties":{"id":"20240201213551-8hrnvwc","updated":"20240201213551"},"Children":[{"Type":"NodeText","Data":"相关阅读："}]},{"ID":"20240201213552-ih5aq9i","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213552-ih5aq9i","updated":"20240201213552"},"Children":[{"ID":"20240201213553-td0ml6d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213553-td0ml6d","updated":"20240201213553"},"Children":[{"ID":"20240201213554-vppeoxd","Type":"NodeParagraph","Properties":{"id":"20240201213554-vppeoxd","updated":"20240201213554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javadoop.com/post/spring-ioc","TextMarkTextContent":"IoC 源码阅读"}]}]},{"ID":"20240201213555-bpa6ou0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213555-bpa6ou0","updated":"20240201213555"},"Children":[{"ID":"20240201213556-8eouzi8","Type":"NodeParagraph","Properties":{"id":"20240201213556-8eouzi8","updated":"20240201213556"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==\u0026mid=2247486938\u0026idx=1\u0026sn=c99ef0233f39a5ffc1b98c81e02dfcd4\u0026chksm=cea24211f9d5cb07fa901183ba4d96187820713a72387788408040822ffb2ed575d28e953ce7\u0026token=1736772241\u0026lang=zh_CN#rd","TextMarkTextContent":"面试被问了几百遍的 IoC 和 AOP ，还在傻傻搞不清楚？"}]}]}]},{"ID":"20240201213557-zzmvntr","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213557-zzmvntr","updated":"20240201213557"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是 Spring Bean？"}]},{"ID":"20240201213558-s3b7c0x","Type":"NodeParagraph","Properties":{"id":"20240201213558-s3b7c0x","updated":"20240201213558"},"Children":[{"Type":"NodeText","Data":"简单来说，Bean 代指的就是那些被 IoC 容器所管理的对象。"}]},{"ID":"20240201213559-5g6ftej","Type":"NodeParagraph","Properties":{"id":"20240201213559-5g6ftej","updated":"20240201213559"},"Children":[{"Type":"NodeText","Data":"我们需要告诉 IoC 容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是 XML 文件、注解或者 Java 配置类。"}]},{"ID":"20240201213560-pc9lwe1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213560-pc9lwe1","updated":"20240201213560"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003c!-- Constructor-arg with 'value' attribute --\u003e\n\u003cbean id=\"...\" class=\"...\"\u003e\n   \u003cconstructor-arg value=\"...\"/\u003e\n\u003c/bean\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213561-6e8tj6z","Type":"NodeParagraph","Properties":{"id":"20240201213561-6e8tj6z","updated":"20240201213561"},"Children":[{"Type":"NodeText","Data":"下图简单地展示了 IoC 容器如何使用配置元数据来管理对象。"}]},{"ID":"20240201213562-teephtd","Type":"NodeParagraph","Properties":{"id":"20240201213562-teephtd","updated":"20240201213562"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/062b422bd7ac4d53afd28fb74b2bc94d.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213563-zii072m","Type":"NodeParagraph","Properties":{"id":"20240201213563-zii072m","updated":"20240201213563"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.beans"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.context"},{"Type":"NodeText","Data":" 这两个包是 IoC 实现的基础，如果想要研究 IoC 相关的源码的话，可以去看看"}]},{"ID":"20240201213564-fh02z7n","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213564-fh02z7n","updated":"20240201213564"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"将一个类声明为 Bean 的注解有哪些?"}]},{"ID":"20240201213565-adwdiyn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213565-adwdiyn","updated":"20240201213565"},"Children":[{"ID":"20240201213566-sio6hq2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213566-sio6hq2","updated":"20240201213566"},"Children":[{"ID":"20240201213567-t41moi8","Type":"NodeParagraph","Properties":{"id":"20240201213567-t41moi8","updated":"20240201213567"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" ：通用的注解，可标注任意类为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring"},{"Type":"NodeText","Data":" 组件。如果一个 Bean 不知道属于哪个层，可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 注解标注。"}]}]},{"ID":"20240201213568-a2xv9nv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213568-a2xv9nv","updated":"20240201213568"},"Children":[{"ID":"20240201213569-8sem8a4","Type":"NodeParagraph","Properties":{"id":"20240201213569-8sem8a4","updated":"20240201213569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Repository"},{"Type":"NodeText","Data":" : 对应持久层即 Dao 层，主要用于数据库相关操作。"}]}]},{"ID":"20240201213570-mq2zued","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213570-mq2zued","updated":"20240201213570"},"Children":[{"ID":"20240201213571-087tqgg","Type":"NodeParagraph","Properties":{"id":"20240201213571-087tqgg","updated":"20240201213571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Service"},{"Type":"NodeText","Data":" : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。"}]}]},{"ID":"20240201213572-01lm150","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213572-01lm150","updated":"20240201213572"},"Children":[{"ID":"20240201213573-vxgvrsg","Type":"NodeParagraph","Properties":{"id":"20240201213573-vxgvrsg","updated":"20240201213573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Controller"},{"Type":"NodeText","Data":" : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。"}]}]}]},{"ID":"20240201213574-h7stixp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213574-h7stixp","updated":"20240201213574"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Component 和 @Bean 的区别是什么？"}]},{"ID":"20240201213575-ht2toln","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213575-ht2toln","updated":"20240201213575"},"Children":[{"ID":"20240201213576-6appwaq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213576-6appwaq","updated":"20240201213576"},"Children":[{"ID":"20240201213577-arlfmev","Type":"NodeParagraph","Properties":{"id":"20240201213577-arlfmev","updated":"20240201213577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 注解作用于类，而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"注解作用于方法。"}]}]},{"ID":"20240201213578-zb3edg3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213578-zb3edg3","updated":"20240201213578"},"Children":[{"ID":"20240201213579-1tqvcul","Type":"NodeParagraph","Properties":{"id":"20240201213579-1tqvcul","updated":"20240201213579"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":" 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":" 注解通常是我们在标有该注解的方法中定义产生这个 bean,"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。"}]}]},{"ID":"20240201213580-0mr0cwq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213580-0mr0cwq","updated":"20240201213580"},"Children":[{"ID":"20240201213581-yj577sd","Type":"NodeParagraph","Properties":{"id":"20240201213581-yj577sd","updated":"20240201213581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":" 注解比 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 注解的自定义性更强，而且很多地方我们只能通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":" 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Spring"},{"Type":"NodeText","Data":"容器时，则只能通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"来实现。"}]}]}]},{"ID":"20240201213582-ce8mo09","Type":"NodeParagraph","Properties":{"id":"20240201213582-ce8mo09","updated":"20240201213582"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Bean"},{"Type":"NodeText","Data":"注解使用示例："}]},{"ID":"20240201213583-2n6rzfj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213583-2n6rzfj","updated":"20240201213583"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class AppConfig {\n    @Bean\n    public TransferService transferService() {\n        return new TransferServiceImpl();\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213584-xb7ut2q","Type":"NodeParagraph","Properties":{"id":"20240201213584-xb7ut2q","updated":"20240201213584"},"Children":[{"Type":"NodeText","Data":"上面的代码相当于下面的 xml 配置"}]},{"ID":"20240201213585-qx86zb9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213585-qx86zb9","updated":"20240201213585"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cbeans\u003e\n    \u003cbean id=\"transferService\" class=\"com.acme.TransferServiceImpl\"/\u003e\n\u003c/beans\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213586-crzeund","Type":"NodeParagraph","Properties":{"id":"20240201213586-crzeund","updated":"20240201213586"},"Children":[{"Type":"NodeText","Data":"下面这个例子是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":" 无法实现的。"}]},{"ID":"20240201213587-n21oqbj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213587-n21oqbj","updated":"20240201213587"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Bean\npublic OneService getService(status) {\n    case (status)  {\n        when 1:\n                return new serviceImpl1();\n        when 2:\n                return new serviceImpl2();\n        when 3:\n                return new serviceImpl3();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213588-dp8j2ov","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213588-dp8j2ov","updated":"20240201213588"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注入 Bean 的注解有哪些？"}]},{"ID":"20240201213589-6lrjyex","Type":"NodeParagraph","Properties":{"id":"20240201213589-6lrjyex","updated":"20240201213589"},"Children":[{"Type":"NodeText","Data":"Spring 内置的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 以及 JDK 内置的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Inject"},{"Type":"NodeText","Data":" 都可以用于注入 Bean。"}]},{"ID":"20240201213590-pn5ocjq","Type":"NodeTable","Data":"| Annotaion    | Package                            | Source       |\n| ------------ | ---------------------------------- | ------------ |\n| `@Autowired` | `org.springframework.bean.factory` | Spring 2.5+  |\n| `@Resource`  | `javax.annotation`                 | Java JSR-250 |\n| `@Inject`    | `javax.inject`                     | Java JSR-330 |","TableAligns":[0,0,0],"Properties":{"id":"20240201213590-pn5ocjq","updated":"20240201213590"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Annotaion"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Package"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Source"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"org.springframework.bean.factory"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Spring 2.5+"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"javax.annotation"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java JSR-250"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Inject"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"javax.inject"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Java JSR-330"}]}]}]},{"ID":"20240201213591-s7hqikv","Type":"NodeParagraph","Properties":{"id":"20240201213591-s7hqikv","updated":"20240201213591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"使用的比较多一些。"}]},{"ID":"20240201213592-u0wwn9k","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213592-u0wwn9k","updated":"20240201213592"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Autowired 和 @Resource 的区别是什么？"}]},{"ID":"20240201213593-zejqm20","Type":"NodeParagraph","Properties":{"id":"20240201213593-zejqm20","updated":"20240201213593"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Autowired"},{"Type":"NodeText","Data":" 属于 Spring 内置的注解，默认的注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入 Bean （接口的实现类）。"}]},{"ID":"20240201213594-ydogpui","Type":"NodeParagraph","Properties":{"id":"20240201213594-ydogpui","updated":"20240201213594"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这会有什么问题呢？"},{"Type":"NodeText","Data":" 当一个接口存在多个实现类的话，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"这种方式就无法正确注入对象了，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。"}]},{"ID":"20240201213595-898e8ec","Type":"NodeParagraph","Properties":{"id":"20240201213595-898e8ec","updated":"20240201213595"},"Children":[{"Type":"NodeText","Data":"这种情况下，注入方式会变为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"smsService"},{"Type":"NodeText","Data":" 就是我这里所说的名称，这样应该比较好理解了吧。"}]},{"ID":"20240201213596-8swksoc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213596-8swksoc","updated":"20240201213596"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// smsService 就是我们上面所说的名称\n@Autowired\nprivate SmsService smsService;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213597-p11mmys","Type":"NodeParagraph","Properties":{"id":"20240201213597-p11mmys","updated":"20240201213597"},"Children":[{"Type":"NodeText","Data":"举个例子，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SmsService"},{"Type":"NodeText","Data":" 接口有两个实现类: "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SmsServiceImpl1"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SmsServiceImpl2"},{"Type":"NodeText","Data":"，且它们都已经被 Spring 容器所管理。"}]},{"ID":"20240201213598-dpor81d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213598-dpor81d","updated":"20240201213598"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 报错，byName 和 byType 都无法匹配到 bean\n@Autowired\nprivate SmsService smsService;\n// 正确注入 SmsServiceImpl1 对象对应的 bean\n@Autowired\nprivate SmsService smsServiceImpl1;\n// 正确注入  SmsServiceImpl1 对象对应的 bean\n// smsServiceImpl1 就是我们上面所说的名称\n@Autowired\n@Qualifier(value = \"smsServiceImpl1\")\nprivate SmsService smsService;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213599-093dm18","Type":"NodeParagraph","Properties":{"id":"20240201213599-093dm18","updated":"20240201213599"},"Children":[{"Type":"NodeText","Data":"我们还是建议通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeText","Data":" 注解来显示指定名称而不是依赖变量的名称。"}]},{"ID":"20240201213600-ryx6ap8","Type":"NodeParagraph","Properties":{"id":"20240201213600-ryx6ap8","updated":"20240201213600"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"属于 JDK 提供的注解，默认注入方式为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"。如果无法通过名称匹配到对应的 Bean 的话，注入方式会变为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213601-ado2ke3","Type":"NodeParagraph","Properties":{"id":"20240201213601-ado2ke3","updated":"20240201213601"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 有两个比较重要且日常开发常用的属性："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"（名称）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"（类型）。"}]},{"ID":"20240201213602-rn6mxgk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213602-rn6mxgk","updated":"20240201213602"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public @interface Resource {\n    String name() default \"\";\n    Class\u003c?\u003e type() default Object.class;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213603-vts0j9u","Type":"NodeParagraph","Properties":{"id":"20240201213603-vts0j9u","updated":"20240201213603"},"Children":[{"Type":"NodeText","Data":"如果仅指定 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 属性则注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"，如果仅指定"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"属性则注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"，如果同时指定"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"属性（不建议这么做）则注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"+"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213604-5m5mwbj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213604-5m5mwbj","updated":"20240201213604"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 报错，byName 和 byType 都无法匹配到 bean\n@Resource\nprivate SmsService smsService;\n// 正确注入 SmsServiceImpl1 对象对应的 bean\n@Resource\nprivate SmsService smsServiceImpl1;\n// 正确注入 SmsServiceImpl1 对象对应的 bean（比较推荐这种方式）\n@Resource(name = \"smsServiceImpl1\")\nprivate SmsService smsService;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213605-2o8yvtt","Type":"NodeParagraph","Properties":{"id":"20240201213605-2o8yvtt","updated":"20240201213605"},"Children":[{"Type":"NodeText","Data":"简单总结一下："}]},{"ID":"20240201213606-4l8strm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213606-4l8strm","updated":"20240201213606"},"Children":[{"ID":"20240201213607-anpyk48","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213607-anpyk48","updated":"20240201213607"},"Children":[{"ID":"20240201213608-hilg6zh","Type":"NodeParagraph","Properties":{"id":"20240201213608-hilg6zh","updated":"20240201213608"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 是 Spring 提供的注解，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":" 是 JDK 提供的注解。"}]}]},{"ID":"20240201213609-x4hqaij","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213609-x4hqaij","updated":"20240201213609"},"Children":[{"ID":"20240201213610-g3t7p3w","Type":"NodeParagraph","Properties":{"id":"20240201213610-g3t7p3w","updated":"20240201213610"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Autowired"},{"Type":"NodeText","Data":" 默认的注入方式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byType"},{"Type":"NodeText","Data":"（根据类型进行匹配），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"默认注入方式为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byName"},{"Type":"NodeText","Data":"（根据名称进行匹配）。"}]}]},{"ID":"20240201213611-t2anifr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213611-t2anifr","updated":"20240201213611"},"Children":[{"ID":"20240201213612-ef1dhcj","Type":"NodeParagraph","Properties":{"id":"20240201213612-ef1dhcj","updated":"20240201213612"},"Children":[{"Type":"NodeText","Data":"当一个接口存在多个实现类的情况下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"都需要通过名称才能正确匹配到对应的 Bean。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Autowired"},{"Type":"NodeText","Data":" 可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeText","Data":" 注解来显示指定名称，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Resource"},{"Type":"NodeText","Data":"可以通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 属性来显示指定名称。"}]}]}]},{"ID":"20240201213613-1nzwsft","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213613-1nzwsft","updated":"20240201213613"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Bean 的作用域有哪些?"}]},{"ID":"20240201213614-ivadmyo","Type":"NodeParagraph","Properties":{"id":"20240201213614-ivadmyo","updated":"20240201213614"},"Children":[{"Type":"NodeText","Data":"Spring 中 Bean 的作用域通常有下面几种："}]},{"ID":"20240201213615-5zy3u1g","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213615-5zy3u1g","updated":"20240201213615"},"Children":[{"ID":"20240201213616-znldkin","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213616-znldkin","updated":"20240201213616"},"Children":[{"ID":"20240201213617-ndwebmt","Type":"NodeParagraph","Properties":{"id":"20240201213617-ndwebmt","updated":"20240201213617"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"singleton"},{"Type":"NodeText","Data":" : IoC 容器中只有唯一的 bean 实例。Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。"}]}]},{"ID":"20240201213618-o70bip8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213618-o70bip8","updated":"20240201213618"},"Children":[{"ID":"20240201213619-1ym9lvb","Type":"NodeParagraph","Properties":{"id":"20240201213619-1ym9lvb","updated":"20240201213619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"prototype"},{"Type":"NodeText","Data":" : 每次获取都会创建一个新的 bean 实例。也就是说，连续 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getBean()"},{"Type":"NodeText","Data":" 两次，得到的是不同的 Bean 实例。"}]}]},{"ID":"20240201213620-hx2dzsm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213620-hx2dzsm","updated":"20240201213620"},"Children":[{"ID":"20240201213621-p70tz3j","Type":"NodeParagraph","Properties":{"id":"20240201213621-p70tz3j","updated":"20240201213621"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"request"},{"Type":"NodeText","Data":" （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。"}]}]},{"ID":"20240201213622-pvdlobz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213622-pvdlobz","updated":"20240201213622"},"Children":[{"ID":"20240201213623-kvp9jhk","Type":"NodeParagraph","Properties":{"id":"20240201213623-kvp9jhk","updated":"20240201213623"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"session"},{"Type":"NodeText","Data":" （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。"}]}]},{"ID":"20240201213624-n6q6r3n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213624-n6q6r3n","updated":"20240201213624"},"Children":[{"ID":"20240201213625-16d0bx9","Type":"NodeParagraph","Properties":{"id":"20240201213625-16d0bx9","updated":"20240201213625"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"application/global-session"},{"Type":"NodeText","Data":" （仅 Web 应用可用）： 每个 Web 应用在启动时创建一个 Bean（应用 Bean），，该 bean 仅在当前应用启动时间内有效。"}]}]},{"ID":"20240201213626-b4n4vtf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213626-b4n4vtf","updated":"20240201213626"},"Children":[{"ID":"20240201213627-4e3i8a8","Type":"NodeParagraph","Properties":{"id":"20240201213627-4e3i8a8","updated":"20240201213627"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"websocket"},{"Type":"NodeText","Data":" （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。"}]}]}]},{"ID":"20240201213628-37gcgxl","Type":"NodeParagraph","Properties":{"id":"20240201213628-37gcgxl","updated":"20240201213628"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如何配置 bean 的作用域呢？"}]},{"ID":"20240201213629-ouymp60","Type":"NodeParagraph","Properties":{"id":"20240201213629-ouymp60","updated":"20240201213629"},"Children":[{"Type":"NodeText","Data":"xml 方式："}]},{"ID":"20240201213630-7ul1z46","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213630-7ul1z46","updated":"20240201213630"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cbean id=\"...\" class=\"...\" scope=\"singleton\"\u003e\u003c/bean\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213631-73wgom3","Type":"NodeParagraph","Properties":{"id":"20240201213631-73wgom3","updated":"20240201213631"},"Children":[{"Type":"NodeText","Data":"注解方式："}]},{"ID":"20240201213632-j8enn2h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213632-j8enn2h","updated":"20240201213632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Bean\n@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic Person personPrototype() {\n    return new Person();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213633-4vibjyg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213633-4vibjyg","updated":"20240201213633"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"单例 Bean 的线程安全问题了解吗？"}]},{"ID":"20240201213634-3zzupdd","Type":"NodeParagraph","Properties":{"id":"20240201213634-3zzupdd","updated":"20240201213634"},"Children":[{"Type":"NodeText","Data":"大部分时候我们并没有在项目中使用多线程，所以很少有人会关注这个问题。单例 Bean 存在线程问题，主要是因为当多个线程操作同一个对象的时候是存在资源竞争的。"}]},{"ID":"20240201213635-xnbfql1","Type":"NodeParagraph","Properties":{"id":"20240201213635-xnbfql1","updated":"20240201213635"},"Children":[{"Type":"NodeText","Data":"常见的有两种解决办法："}]},{"ID":"20240201213636-p4msoqt","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213636-p4msoqt","updated":"20240201213636"},"Children":[{"ID":"20240201213637-vm7ddg1","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213637-vm7ddg1","updated":"20240201213637"},"Children":[{"ID":"20240201213638-xn5z4av","Type":"NodeParagraph","Properties":{"id":"20240201213638-xn5z4av","updated":"20240201213638"},"Children":[{"Type":"NodeText","Data":"在 Bean 中尽量避免定义可变的成员变量。"}]}]},{"ID":"20240201213639-2ed5j8r","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213639-2ed5j8r","updated":"20240201213639"},"Children":[{"ID":"20240201213640-050fo0z","Type":"NodeParagraph","Properties":{"id":"20240201213640-050fo0z","updated":"20240201213640"},"Children":[{"Type":"NodeText","Data":"在类中定义一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 成员变量，将需要的可变成员变量保存在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ThreadLocal"},{"Type":"NodeText","Data":" 中（推荐的一种方式）。"}]}]}]},{"ID":"20240201213641-n8kagyz","Type":"NodeParagraph","Properties":{"id":"20240201213641-n8kagyz","updated":"20240201213641"},"Children":[{"Type":"NodeText","Data":"不过，大部分 Bean 实际都是无状态（没有实例变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。"}]},{"ID":"20240201213642-b661a8y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213642-b661a8y","updated":"20240201213642"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Bean 的生命周期了解么?"}]},{"ID":"20240201213643-knuvvhp","Type":"NodeBlockquote","Properties":{"id":"20240201213643-knuvvhp","updated":"20240201213643"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213644-eamxdrm","Type":"NodeParagraph","Properties":{"id":"20240201213644-eamxdrm","updated":"20240201213644"},"Children":[{"Type":"NodeText","Data":"下面的内容整理自："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://yemengying.com/2016/07/14/spring-bean-life-cycle/","TextMarkTextContent":"https://yemengying.com/2016/07/14/spring-bean-life-cycle/"},{"Type":"NodeText","Data":" ，除了这篇文章，再推荐一篇很不错的文章 ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.cnblogs.com/zrtqsk/p/3735273.html","TextMarkTextContent":"https://www.cnblogs.com/zrtqsk/p/3735273.html"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213645-ljrywn9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213645-ljrywn9","updated":"20240201213645"},"Children":[{"ID":"20240201213646-7t82ukq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213646-7t82ukq","updated":"20240201213646"},"Children":[{"ID":"20240201213647-hun0dwm","Type":"NodeParagraph","Properties":{"id":"20240201213647-hun0dwm","updated":"20240201213647"},"Children":[{"Type":"NodeText","Data":"Bean 容器找到配置文件中 Spring Bean 的定义。"}]}]},{"ID":"20240201213648-wn63f14","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213648-wn63f14","updated":"20240201213648"},"Children":[{"ID":"20240201213649-1y16t9l","Type":"NodeParagraph","Properties":{"id":"20240201213649-1y16t9l","updated":"20240201213649"},"Children":[{"Type":"NodeText","Data":"Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。"}]}]},{"ID":"20240201213650-2t7wu1z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213650-2t7wu1z","updated":"20240201213650"},"Children":[{"ID":"20240201213651-k76qutm","Type":"NodeParagraph","Properties":{"id":"20240201213651-k76qutm","updated":"20240201213651"},"Children":[{"Type":"NodeText","Data":"如果涉及到一些属性值 利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"set()"},{"Type":"NodeText","Data":"方法设置一些属性值。"}]}]},{"ID":"20240201213652-36nk6eh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213652-36nk6eh","updated":"20240201213652"},"Children":[{"ID":"20240201213653-x8h9fhj","Type":"NodeParagraph","Properties":{"id":"20240201213653-x8h9fhj","updated":"20240201213653"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanNameAware"},{"Type":"NodeText","Data":" 接口，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setBeanName()"},{"Type":"NodeText","Data":"方法，传入 Bean 的名字。"}]}]},{"ID":"20240201213654-ccds82p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213654-ccds82p","updated":"20240201213654"},"Children":[{"ID":"20240201213655-3906mx5","Type":"NodeParagraph","Properties":{"id":"20240201213655-3906mx5","updated":"20240201213655"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanClassLoaderAware"},{"Type":"NodeText","Data":" 接口，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setBeanClassLoader()"},{"Type":"NodeText","Data":"方法，传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassLoader"},{"Type":"NodeText","Data":"对象的实例。"}]}]},{"ID":"20240201213656-7qvvmfa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213656-7qvvmfa","updated":"20240201213656"},"Children":[{"ID":"20240201213657-hdkglg7","Type":"NodeParagraph","Properties":{"id":"20240201213657-hdkglg7","updated":"20240201213657"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactoryAware"},{"Type":"NodeText","Data":" 接口，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"setBeanFactory()"},{"Type":"NodeText","Data":"方法，传入 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"对象的实例。"}]}]},{"ID":"20240201213658-fy2f7m2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213658-fy2f7m2","updated":"20240201213658"},"Children":[{"ID":"20240201213659-taupqdq","Type":"NodeParagraph","Properties":{"id":"20240201213659-taupqdq","updated":"20240201213659"},"Children":[{"Type":"NodeText","Data":"与上面的类似，如果实现了其他 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"*.Aware"},{"Type":"NodeText","Data":"接口，就调用相应的方法。"}]}]},{"ID":"20240201213660-b9xc5rg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213660-b9xc5rg","updated":"20240201213660"},"Children":[{"ID":"20240201213661-oe283zj","Type":"NodeParagraph","Properties":{"id":"20240201213661-oe283zj","updated":"20240201213661"},"Children":[{"Type":"NodeText","Data":"如果有和加载这个 Bean 的 Spring 容器相关的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanPostProcessor"},{"Type":"NodeText","Data":" 对象，执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"postProcessBeforeInitialization()"},{"Type":"NodeText","Data":" 方法"}]}]},{"ID":"20240201213662-tej1dtl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213662-tej1dtl","updated":"20240201213662"},"Children":[{"ID":"20240201213663-jmtnnkl","Type":"NodeParagraph","Properties":{"id":"20240201213663-jmtnnkl","updated":"20240201213663"},"Children":[{"Type":"NodeText","Data":"如果 Bean 实现了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"InitializingBean"},{"Type":"NodeText","Data":"接口，执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"afterPropertiesSet()"},{"Type":"NodeText","Data":"方法。"}]}]},{"ID":"20240201213664-crqlw2r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213664-crqlw2r","updated":"20240201213664"},"Children":[{"ID":"20240201213665-4prb51f","Type":"NodeParagraph","Properties":{"id":"20240201213665-4prb51f","updated":"20240201213665"},"Children":[{"Type":"NodeText","Data":"如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。"}]}]},{"ID":"20240201213666-lz6jkgl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213666-lz6jkgl","updated":"20240201213666"},"Children":[{"ID":"20240201213667-kdjedmv","Type":"NodeParagraph","Properties":{"id":"20240201213667-kdjedmv","updated":"20240201213667"},"Children":[{"Type":"NodeText","Data":"如果有和加载这个 Bean 的 Spring 容器相关的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanPostProcessor"},{"Type":"NodeText","Data":" 对象，执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"postProcessAfterInitialization()"},{"Type":"NodeText","Data":" 方法"}]}]},{"ID":"20240201213668-z8w48o4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213668-z8w48o4","updated":"20240201213668"},"Children":[{"ID":"20240201213669-5mz8exk","Type":"NodeParagraph","Properties":{"id":"20240201213669-5mz8exk","updated":"20240201213669"},"Children":[{"Type":"NodeText","Data":"当要销毁 Bean 的时候，如果 Bean 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DisposableBean"},{"Type":"NodeText","Data":" 接口，执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"destroy()"},{"Type":"NodeText","Data":" 方法。"}]}]},{"ID":"20240201213670-j0m1da5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213670-j0m1da5","updated":"20240201213670"},"Children":[{"ID":"20240201213671-x8yvki4","Type":"NodeParagraph","Properties":{"id":"20240201213671-x8yvki4","updated":"20240201213671"},"Children":[{"Type":"NodeText","Data":"当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。"}]}]}]},{"ID":"20240201213672-2r7dz0x","Type":"NodeParagraph","Properties":{"id":"20240201213672-2r7dz0x","updated":"20240201213672"},"Children":[{"Type":"NodeText","Data":"图示："}]},{"ID":"20240201213673-94jns6l","Type":"NodeParagraph","Properties":{"id":"20240201213673-94jns6l","updated":"20240201213673"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring Bean 生命周期","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://images.xiaozhuanlan.com/photo/2019/24bc2bad3ce28144d60d9e0a2edf6c7f.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213674-42rg04h","Type":"NodeParagraph","Properties":{"id":"20240201213674-42rg04h","updated":"20240201213674"},"Children":[{"Type":"NodeText","Data":"与之比较类似的中文版本:"}]},{"ID":"20240201213675-3tu7pm4","Type":"NodeParagraph","Properties":{"id":"20240201213675-3tu7pm4","updated":"20240201213675"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"Spring Bean 生命周期","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://images.xiaozhuanlan.com/photo/2019/b5d264565657a5395c2781081a7483e1.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213676-tvvyhwf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213676-tvvyhwf","updated":"20240201213676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AoP"}]},{"ID":"20240201213677-9178ls8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213677-9178ls8","updated":"20240201213677"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"谈谈自己对于 AOP 的了解"}]},{"ID":"20240201213678-ab1wk8h","Type":"NodeParagraph","Properties":{"id":"20240201213678-ab1wk8h","updated":"20240201213678"},"Children":[{"Type":"NodeText","Data":"AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。"}]},{"ID":"20240201213679-28efzpj","Type":"NodeParagraph","Properties":{"id":"20240201213679-28efzpj","updated":"20240201213679"},"Children":[{"Type":"NodeText","Data":"Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"JDK Proxy"},{"Type":"NodeText","Data":"，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Cglib"},{"Type":"NodeText","Data":" 生成一个被代理对象的子类来作为代理，如下图所示："}]},{"ID":"20240201213680-codi62i","Type":"NodeParagraph","Properties":{"id":"20240201213680-codi62i","updated":"20240201213680"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"SpringAOPProcess","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/img_convert/230ae587a322d6e4d09510161987d346.jpeg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213681-qt21i7x","Type":"NodeParagraph","Properties":{"id":"20240201213681-qt21i7x","updated":"20240201213681"},"Children":[{"Type":"NodeText","Data":"当然你也可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AspectJ"},{"Type":"NodeText","Data":" ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。"}]},{"ID":"20240201213682-yssfewo","Type":"NodeParagraph","Properties":{"id":"20240201213682-yssfewo","updated":"20240201213682"},"Children":[{"Type":"NodeText","Data":"AOP 切面编程设计到的一些专业术语："}]},{"ID":"20240201213683-g04cv7e","Type":"NodeTable","Data":"| 术语              |                             含义                             |\n| :---------------- | :----------------------------------------------------------: |\n| 目标(Target)      |                         被通知的对象                         |\n| 代理(Proxy)       |             向目标对象应用通知之后创建的代理对象             |\n| 连接点(JoinPoint) |         目标对象的所属类中，定义的所有方法均为连接点         |\n| 切入点(Pointcut)  | 被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点） |\n| 通知(Advice)      | 增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情  |\n| 切面(Aspect)      |                切入点(Pointcut)+通知(Advice)                 |\n| Weaving(织入)     |       将通知应用到目标对象，进而生成代理对象的过程动作       |","TableAligns":[1,2],"Properties":{"id":"20240201213683-g04cv7e","updated":"20240201213683"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"术语"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"含义"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"目标(Target)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"被通知的对象"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"代理(Proxy)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"向目标对象应用通知之后创建的代理对象"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"连接点(JoinPoint)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"目标对象的所属类中，定义的所有方法均为连接点"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"切入点(Pointcut)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"被切面拦截 / 增强的连接点（切入点一定是连接点，连接点不一定是切入点）"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"通知(Advice)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"增强的逻辑 / 代码，也即拦截到目标对象的连接点之后要做的事情"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"切面(Aspect)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"切入点(Pointcut)+通知(Advice)"}]}]},{"Type":"NodeTableRow","TableAligns":[1,2],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Weaving(织入)"}]},{"Type":"NodeTableCell","TableCellAlign":2,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将通知应用到目标对象，进而生成代理对象的过程动作"}]}]}]},{"ID":"20240201213684-tc3ne6o","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213684-tc3ne6o","updated":"20240201213684"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring AOP 和 AspectJ AOP 有什么区别？"}]},{"ID":"20240201213685-1qmuxqq","Type":"NodeParagraph","Properties":{"id":"20240201213685-1qmuxqq","updated":"20240201213685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。"},{"Type":"NodeText","Data":" Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。"}]},{"ID":"20240201213686-qx0sbtr","Type":"NodeParagraph","Properties":{"id":"20240201213686-qx0sbtr","updated":"20240201213686"},"Children":[{"Type":"NodeText","Data":"Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，"}]},{"ID":"20240201213687-zz7idh7","Type":"NodeParagraph","Properties":{"id":"20240201213687-zz7idh7","updated":"20240201213687"},"Children":[{"Type":"NodeText","Data":"如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。"}]},{"ID":"20240201213688-g7sa26z","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213688-g7sa26z","updated":"20240201213688"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"AspectJ 定义的通知类型有哪些？"}]},{"ID":"20240201213689-emajlmz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213689-emajlmz","updated":"20240201213689"},"Children":[{"ID":"20240201213690-2egqf4e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213690-2egqf4e","updated":"20240201213690"},"Children":[{"ID":"20240201213691-zza2wmv","Type":"NodeParagraph","Properties":{"id":"20240201213691-zza2wmv","updated":"20240201213691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Before"},{"Type":"NodeText","Data":"（前置通知）：目标对象的方法调用之前触发"}]}]},{"ID":"20240201213692-wc39erb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213692-wc39erb","updated":"20240201213692"},"Children":[{"ID":"20240201213693-rac9l3i","Type":"NodeParagraph","Properties":{"id":"20240201213693-rac9l3i","updated":"20240201213693"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"After"},{"Type":"NodeText","Data":" （后置通知）：目标对象的方法调用之后触发"}]}]},{"ID":"20240201213694-ydb104u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213694-ydb104u","updated":"20240201213694"},"Children":[{"ID":"20240201213695-icr1aik","Type":"NodeParagraph","Properties":{"id":"20240201213695-icr1aik","updated":"20240201213695"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AfterReturning"},{"Type":"NodeText","Data":"（返回通知）：目标对象的方法调用完成，在返回结果值之后触发"}]}]},{"ID":"20240201213696-4a1ob3g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213696-4a1ob3g","updated":"20240201213696"},"Children":[{"ID":"20240201213697-zvxpulb","Type":"NodeParagraph","Properties":{"id":"20240201213697-zvxpulb","updated":"20240201213697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"AfterThrowing"},{"Type":"NodeText","Data":"（异常通知） ：目标对象的方法运行中抛出 / 触发异常后触发。AfterReturning 和 AfterThrowing 两者互斥。如果方法调用成功无异常，则会有返回值；如果方法抛出了异常，则不会有返回值。"}]}]},{"ID":"20240201213698-9njb7xb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213698-9njb7xb","updated":"20240201213698"},"Children":[{"ID":"20240201213699-jc5uvia","Type":"NodeParagraph","Properties":{"id":"20240201213699-jc5uvia","updated":"20240201213699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Around"},{"Type":"NodeText","Data":"： （环绕通知）编程式控制目标对象的方法调用。环绕通知是所有通知类型中可操作范围最大的一种，因为它可以直接拿到目标对象，以及要执行的方法，所以环绕通知可以任意的在目标对象的方法调用前后搞事，甚至不调用目标对象的方法"}]}]}]},{"ID":"20240201213700-d0lu37l","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213700-d0lu37l","updated":"20240201213700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"多个切面的执行顺序如何控制？"}]},{"ID":"20240201213701-tiwps5q","Type":"NodeParagraph","Properties":{"id":"20240201213701-tiwps5q","updated":"20240201213701"},"Children":[{"Type":"NodeText","Data":"1、通常使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Order"},{"Type":"NodeText","Data":" 注解直接定义切面顺序"}]},{"ID":"20240201213702-8geea9y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213702-8geea9y","updated":"20240201213702"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 值越小优先级越高\n@Order(3)\n@Component\n@Aspect\npublic class LoggingAspect implements Ordered {\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213703-4ug99gu","Type":"NodeParagraph","Properties":{"id":"20240201213703-4ug99gu","updated":"20240201213703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Ordered"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 接口重写 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"getOrder"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 方法。"}]},{"ID":"20240201213704-7as3ogt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213704-7as3ogt","updated":"20240201213704"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\n@Aspect\npublic class LoggingAspect implements Ordered {\n\n    // ....\n\n    @Override\n    public int getOrder() {\n        // 返回值越小优先级越高\n        return 1;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213705-r1uezoa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213705-r1uezoa","updated":"20240201213705"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring MVC"}]},{"ID":"20240201213706-xdufe9i","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213706-xdufe9i","updated":"20240201213706"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"说说自己对于 Spring MVC 了解?"}]},{"ID":"20240201213707-7slm1ki","Type":"NodeParagraph","Properties":{"id":"20240201213707-7slm1ki","updated":"20240201213707"},"Children":[{"Type":"NodeText","Data":"MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。"}]},{"ID":"20240201213708-c642ot5","Type":"NodeParagraph","Properties":{"id":"20240201213708-c642ot5","updated":"20240201213708"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/image-20210809181452421.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213709-3s1230r","Type":"NodeParagraph","Properties":{"id":"20240201213709-3s1230r","updated":"20240201213709"},"Children":[{"Type":"NodeText","Data":"网上有很多人说 MVC 不是设计模式，只是软件设计规范，我个人更倾向于 MVC 同样是众多设计模式中的一种。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://github.com/iluwatar/java-design-patterns","TextMarkTextContent":"java-design-patterns"},{"Type":"NodeText","Data":" 项目中就有关于 MVC 的相关介绍。"}]},{"ID":"20240201213710-doojvc1","Type":"NodeParagraph","Properties":{"id":"20240201213710-doojvc1","updated":"20240201213710"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/159b3d3e70dd45e6afa81bf06d09264e.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213711-zn4ns7a","Type":"NodeParagraph","Properties":{"id":"20240201213711-zn4ns7a","updated":"20240201213711"},"Children":[{"Type":"NodeText","Data":"想要真正理解 Spring MVC，我们先来看看 Model 1 和 Model 2 这两个没有 Spring MVC 的时代。"}]},{"ID":"20240201213712-sbkbs8w","Type":"NodeParagraph","Properties":{"id":"20240201213712-sbkbs8w","updated":"20240201213712"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Model 1 时代"}]},{"ID":"20240201213713-iwt0mfl","Type":"NodeParagraph","Properties":{"id":"20240201213713-iwt0mfl","updated":"20240201213713"},"Children":[{"Type":"NodeText","Data":"很多学 Java 后端比较晚的朋友可能并没有接触过 Model 1 时代下的 JavaWeb 应用开发。在 Model1 模式下，整个 Web 应用几乎全部用 JSP 页面组成，只用少量的 JavaBean 来处理数据库连接、访问等操作。"}]},{"ID":"20240201213714-xhtnowi","Type":"NodeParagraph","Properties":{"id":"20240201213714-xhtnowi","updated":"20240201213714"},"Children":[{"Type":"NodeText","Data":"这个模式下 JSP 即是控制层（Controller）又是表现层（View）。显而易见，这种模式存在很多问题。比如控制逻辑和表现逻辑混杂在一起，导致代码重用率极低；再比如前端和后端相互依赖，难以进行测试维护并且开发效率极低。"}]},{"ID":"20240201213715-zeh2sag","Type":"NodeParagraph","Properties":{"id":"20240201213715-zeh2sag","updated":"20240201213715"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"mvc-mode1","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/mvc-mode1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213716-yd3kr5s","Type":"NodeParagraph","Properties":{"id":"20240201213716-yd3kr5s","updated":"20240201213716"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Model 2 时代"}]},{"ID":"20240201213717-13rrhmb","Type":"NodeParagraph","Properties":{"id":"20240201213717-13rrhmb","updated":"20240201213717"},"Children":[{"Type":"NodeText","Data":"学过 Servlet 并做过相关 Demo 的朋友应该了解“Java Bean(Model)+ JSP（View）+Servlet（Controller） ”这种开发模式，这就是早期的 JavaWeb MVC 开发模式。"}]},{"ID":"20240201213718-pf879fx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213718-pf879fx","updated":"20240201213718"},"Children":[{"ID":"20240201213719-h16aew4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213719-h16aew4","updated":"20240201213719"},"Children":[{"ID":"20240201213720-yvb5pg3","Type":"NodeParagraph","Properties":{"id":"20240201213720-yvb5pg3","updated":"20240201213720"},"Children":[{"Type":"NodeText","Data":"Model:系统涉及的数据，也就是 dao 和 bean。"}]}]},{"ID":"20240201213721-nc8jh01","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213721-nc8jh01","updated":"20240201213721"},"Children":[{"ID":"20240201213722-i514n2o","Type":"NodeParagraph","Properties":{"id":"20240201213722-i514n2o","updated":"20240201213722"},"Children":[{"Type":"NodeText","Data":"View：展示模型中的数据，只是用来展示。"}]}]},{"ID":"20240201213723-lvx3y8g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213723-lvx3y8g","updated":"20240201213723"},"Children":[{"ID":"20240201213724-za60pe3","Type":"NodeParagraph","Properties":{"id":"20240201213724-za60pe3","updated":"20240201213724"},"Children":[{"Type":"NodeText","Data":"Controller：处理用户请求都发送给 ，返回数据给 JSP 并展示给用户。"}]}]}]},{"ID":"20240201213725-12b8dmw","Type":"NodeParagraph","Properties":{"id":"20240201213725-12b8dmw","updated":"20240201213725"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/mvc-model2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213726-jbwwv7j","Type":"NodeParagraph","Properties":{"id":"20240201213726-jbwwv7j","updated":"20240201213726"},"Children":[{"Type":"NodeText","Data":"Model2 模式下还存在很多问题，Model2 的抽象和封装程度还远远不够，使用 Model2 进行开发时不可避免地会重复造轮子，这就大大降低了程序的可维护性和复用性。"}]},{"ID":"20240201213727-md607kx","Type":"NodeParagraph","Properties":{"id":"20240201213727-md607kx","updated":"20240201213727"},"Children":[{"Type":"NodeText","Data":"于是，很多 JavaWeb 开发相关的 MVC 框架应运而生比如 Struts2，但是 Struts2 比较笨重。"}]},{"ID":"20240201213728-5mh7a3v","Type":"NodeParagraph","Properties":{"id":"20240201213728-5mh7a3v","updated":"20240201213728"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring MVC 时代"}]},{"ID":"20240201213729-z5goku8","Type":"NodeParagraph","Properties":{"id":"20240201213729-z5goku8","updated":"20240201213729"},"Children":[{"Type":"NodeText","Data":"随着 Spring 轻量级开发框架的流行，Spring 生态圈出现了 Spring MVC 框架， Spring MVC 是当前最优秀的 MVC 框架。相比于 Struts2 ， Spring MVC 使用更加简单和方便，开发效率更高，并且 Spring MVC 运行速度更快。"}]},{"ID":"20240201213730-0kbpr6v","Type":"NodeParagraph","Properties":{"id":"20240201213730-0kbpr6v","updated":"20240201213730"},"Children":[{"Type":"NodeText","Data":"MVC 是一种设计模式，Spring MVC 是一款很优秀的 MVC 框架。Spring MVC 可以帮助我们进行更简洁的 Web 层的开发，并且它天生与 Spring 框架集成。Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层(控制层，返回数据给前台页面)。"}]},{"ID":"20240201213731-o0mr731","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213731-o0mr731","updated":"20240201213731"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring MVC 的核心组件有哪些？"}]},{"ID":"20240201213732-8yz30g1","Type":"NodeParagraph","Properties":{"id":"20240201213732-8yz30g1","updated":"20240201213732"},"Children":[{"Type":"NodeText","Data":"记住了下面这些组件，也就记住了 SpringMVC 的工作原理。"}]},{"ID":"20240201213733-xlvbhru","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213733-xlvbhru","updated":"20240201213733"},"Children":[{"ID":"20240201213734-c2vnmkx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213734-c2vnmkx","updated":"20240201213734"},"Children":[{"ID":"20240201213735-136v5ul","Type":"NodeParagraph","Properties":{"id":"20240201213735-136v5ul","updated":"20240201213735"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"核心的中央处理器"},{"Type":"NodeText","Data":"，负责接收请求、分发，并给予客户端响应。"}]}]},{"ID":"20240201213736-6sg45ub","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213736-6sg45ub","updated":"20240201213736"},"Children":[{"ID":"20240201213737-npk2d8p","Type":"NodeParagraph","Properties":{"id":"20240201213737-npk2d8p","updated":"20240201213737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理器映射器"},{"Type":"NodeText","Data":"，根据 uri 去匹配查找能处理的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" ，并会将请求涉及到的拦截器和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 一起封装。"}]}]},{"ID":"20240201213738-ftpt7s7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213738-ftpt7s7","updated":"20240201213738"},"Children":[{"ID":"20240201213739-rqxeavk","Type":"NodeParagraph","Properties":{"id":"20240201213739-rqxeavk","updated":"20240201213739"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"HandlerAdapter"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理器适配器"},{"Type":"NodeText","Data":"，根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" 找到的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" ，适配执行对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"；"}]}]},{"ID":"20240201213740-gyhdin9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213740-gyhdin9","updated":"20240201213740"},"Children":[{"ID":"20240201213741-bycnpjd","Type":"NodeParagraph","Properties":{"id":"20240201213741-bycnpjd","updated":"20240201213741"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"请求处理器"},{"Type":"NodeText","Data":"，处理实际请求的处理器。"}]}]},{"ID":"20240201213742-vr9wlda","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213742-vr9wlda","updated":"20240201213742"},"Children":[{"ID":"20240201213743-tcl94nw","Type":"NodeParagraph","Properties":{"id":"20240201213743-tcl94nw","updated":"20240201213743"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ViewResolver"},{"Type":"NodeText","Data":" ："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"视图解析器"},{"Type":"NodeText","Data":"，根据 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 响应客户端"}]}]}]},{"ID":"20240201213744-inm1ctz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213744-inm1ctz","updated":"20240201213744"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SpringMVC 工作原理了解吗?"}]},{"ID":"20240201213745-5y78m9i","Type":"NodeParagraph","Properties":{"id":"20240201213745-5y78m9i","updated":"20240201213745"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Spring MVC 原理如下图所示："}]},{"ID":"20240201213746-8oi5ymh","Type":"NodeBlockquote","Properties":{"id":"20240201213746-8oi5ymh","updated":"20240201213746"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201213747-0o0zvnp","Type":"NodeParagraph","Properties":{"id":"20240201213747-0o0zvnp","updated":"20240201213747"},"Children":[{"Type":"NodeText","Data":"SpringMVC 工作原理的图解我没有自己画，直接图省事在网上找了一个非常清晰直观的，原出处不明。"}]}]},{"ID":"20240201213748-wrb8skb","Type":"NodeParagraph","Properties":{"id":"20240201213748-wrb8skb","updated":"20240201213748"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/img_convert/de6d2b213f112297298f3e223bf08f28.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213749-nfs2mlu","Type":"NodeParagraph","Properties":{"id":"20240201213749-nfs2mlu","updated":"20240201213749"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"流程说明（重要）："}]},{"ID":"20240201213750-i0ixjqr","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213750-i0ixjqr","updated":"20240201213750"},"Children":[{"ID":"20240201213751-9274ajb","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201213751-9274ajb","updated":"20240201213751"},"Children":[{"ID":"20240201213752-zeo78qb","Type":"NodeParagraph","Properties":{"id":"20240201213752-zeo78qb","updated":"20240201213752"},"Children":[{"Type":"NodeText","Data":"客户端（浏览器）发送请求， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":"拦截请求。"}]}]},{"ID":"20240201213753-urkugmm","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201213753-urkugmm","updated":"20240201213753"},"Children":[{"ID":"20240201213754-oikedfe","Type":"NodeParagraph","Properties":{"id":"20240201213754-oikedfe","updated":"20240201213754"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 根据请求信息调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" 。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerMapping"},{"Type":"NodeText","Data":" 根据 uri 去匹配查找能处理的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"（也就是我们平常说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 控制器） ，并会将请求涉及到的拦截器和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 一起封装。"}]}]},{"ID":"20240201213755-kn1zm1l","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201213755-kn1zm1l","updated":"20240201213755"},"Children":[{"ID":"20240201213756-r1cv7vi","Type":"NodeParagraph","Properties":{"id":"20240201213756-r1cv7vi","updated":"20240201213756"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":" 调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HandlerAdapter"},{"Type":"NodeText","Data":"适配执行 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 。"}]}]},{"ID":"20240201213757-1mb853w","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201213757-1mb853w","updated":"20240201213757"},"Children":[{"ID":"20240201213758-mnhzp52","Type":"NodeParagraph","Properties":{"id":"20240201213758-mnhzp52","updated":"20240201213758"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":" 完成对用户请求的处理后，会返回一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ModelAndView"},{"Type":"NodeText","Data":" 对象给"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispatcherServlet"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ModelAndView"},{"Type":"NodeText","Data":" 顾名思义，包含了数据模型以及相应的视图的信息。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Model"},{"Type":"NodeText","Data":" 是返回的数据对象，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":" 是个逻辑上的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213759-behcdwe","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201213759-behcdwe","updated":"20240201213759"},"Children":[{"ID":"20240201213760-c6rvtua","Type":"NodeParagraph","Properties":{"id":"20240201213760-c6rvtua","updated":"20240201213760"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ViewResolver"},{"Type":"NodeText","Data":" 会根据逻辑 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":" 查找实际的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213761-fc7yuwn","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201213761-fc7yuwn","updated":"20240201213761"},"Children":[{"ID":"20240201213762-68dw9ri","Type":"NodeParagraph","Properties":{"id":"20240201213762-68dw9ri","updated":"20240201213762"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DispaterServlet"},{"Type":"NodeText","Data":" 把返回的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Model"},{"Type":"NodeText","Data":" 传给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":"（视图渲染）。"}]}]},{"ID":"20240201213763-1fd3ata","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20240201213763-1fd3ata","updated":"20240201213763"},"Children":[{"ID":"20240201213764-z1mqc3x","Type":"NodeParagraph","Properties":{"id":"20240201213764-z1mqc3x","updated":"20240201213764"},"Children":[{"Type":"NodeText","Data":"把 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"View"},{"Type":"NodeText","Data":" 返回给请求者（浏览器）"}]}]}]},{"ID":"20240201213765-ay6v30i","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213765-ay6v30i","updated":"20240201213765"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"统一异常处理怎么做？"}]},{"ID":"20240201213766-qycwhnr","Type":"NodeParagraph","Properties":{"id":"20240201213766-qycwhnr","updated":"20240201213766"},"Children":[{"Type":"NodeText","Data":"推荐使用注解的方式统一异常处理，具体会使用到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ControllerAdvice"},{"Type":"NodeText","Data":" + "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":" 这两个注解 。"}]},{"ID":"20240201213767-obugjjf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213767-obugjjf","updated":"20240201213767"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@ControllerAdvice\n@ResponseBody\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(BaseException.class)\n    public ResponseEntity\u003c?\u003e handleAppException(BaseException ex, HttpServletRequest request) {\n      //......\n    }\n\n    @ExceptionHandler(value = ResourceNotFoundException.class)\n    public ResponseEntity\u003cErrorReponse\u003e handleResourceNotFoundException(ResourceNotFoundException ex, HttpServletRequest request) {\n      //......\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213768-rcp1oy6","Type":"NodeParagraph","Properties":{"id":"20240201213768-rcp1oy6","updated":"20240201213768"},"Children":[{"Type":"NodeText","Data":"这种异常处理方式下，会给所有或者指定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 织入异常处理的逻辑（AOP），当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":" 中的方法抛出异常的时候，由被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":" 注解修饰的方法进行处理。"}]},{"ID":"20240201213769-zqfc6dm","Type":"NodeParagraph","Properties":{"id":"20240201213769-zqfc6dm","updated":"20240201213769"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExceptionHandlerMethodResolver"},{"Type":"NodeText","Data":" 中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"getMappedMethod"},{"Type":"NodeText","Data":" 方法决定了异常具体被哪个被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ExceptionHandler"},{"Type":"NodeText","Data":" 注解修饰的方法处理异常。"}]},{"ID":"20240201213770-y3n5rm4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213770-y3n5rm4","updated":"20240201213770"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Nullable\n\tprivate Method getMappedMethod(Class\u003c? extends Throwable\u003e exceptionType) {\n\t\tList\u003cClass\u003c? extends Throwable\u003e\u003e matches = new ArrayList\u003c\u003e();\n    //找到可以处理的所有异常信息。mappedMethods 中存放了异常和处理异常的方法的对应关系\n\t\tfor (Class\u003c? extends Throwable\u003e mappedException : this.mappedMethods.keySet()) {\n\t\t\tif (mappedException.isAssignableFrom(exceptionType)) {\n\t\t\t\tmatches.add(mappedException);\n\t\t\t}\n\t\t}\n    // 不为空说明有方法处理异常\n\t\tif (!matches.isEmpty()) {\n      // 按照匹配程度从小到大排序\n\t\t\tmatches.sort(new ExceptionDepthComparator(exceptionType));\n      // 返回处理异常的方法\n\t\t\treturn this.mappedMethods.get(matches.get(0));\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213771-is3fuoy","Type":"NodeParagraph","Properties":{"id":"20240201213771-is3fuoy","updated":"20240201213771"},"Children":[{"Type":"NodeText","Data":"从源代码看出： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"getMappedMethod()"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"会首先找到可以匹配处理异常的所有方法信息，然后对其进行从小到大的排序，最后取最小的那一个匹配的方法(即匹配度最高的那个)。"}]},{"ID":"20240201213772-p6z8xny","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213772-p6z8xny","updated":"20240201213772"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 框架中用到了哪些设计模式？"}]},{"ID":"20240201213773-i0dnjq3","Type":"NodeParagraph","Properties":{"id":"20240201213773-i0dnjq3","updated":"20240201213773"},"Children":[{"Type":"NodeText","Data":"关于下面这些设计模式的详细介绍，可以看我写的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/system-design/framework/spring/spring-design-patterns-summary.html","TextMarkTextContent":"Spring 中的设计模式详解"},{"Type":"NodeText","Data":" 这篇文章。"}]},{"ID":"20240201213774-erp2igj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213774-erp2igj","updated":"20240201213774"},"Children":[{"ID":"20240201213775-58p1bfn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213775-58p1bfn","updated":"20240201213775"},"Children":[{"ID":"20240201213776-ozvui1t","Type":"NodeParagraph","Properties":{"id":"20240201213776-ozvui1t","updated":"20240201213776"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"工厂设计模式"},{"Type":"NodeText","Data":" : Spring 使用工厂模式通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"BeanFactory"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ApplicationContext"},{"Type":"NodeText","Data":" 创建 bean 对象。"}]}]},{"ID":"20240201213777-m9b4six","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213777-m9b4six","updated":"20240201213777"},"Children":[{"ID":"20240201213778-7ijqvxm","Type":"NodeParagraph","Properties":{"id":"20240201213778-7ijqvxm","updated":"20240201213778"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"代理设计模式"},{"Type":"NodeText","Data":" : Spring AOP 功能的实现。"}]}]},{"ID":"20240201213779-9xlvk49","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213779-9xlvk49","updated":"20240201213779"},"Children":[{"ID":"20240201213780-ee4wx8w","Type":"NodeParagraph","Properties":{"id":"20240201213780-ee4wx8w","updated":"20240201213780"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"单例设计模式"},{"Type":"NodeText","Data":" : Spring 中的 Bean 默认都是单例的。"}]}]},{"ID":"20240201213781-ciz652d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213781-ciz652d","updated":"20240201213781"},"Children":[{"ID":"20240201213782-b3lyfiw","Type":"NodeParagraph","Properties":{"id":"20240201213782-b3lyfiw","updated":"20240201213782"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"模板方法模式"},{"Type":"NodeText","Data":" : Spring 中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"jdbcTemplate"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hibernateTemplate"},{"Type":"NodeText","Data":" 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。"}]}]},{"ID":"20240201213783-ainuiy0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213783-ainuiy0","updated":"20240201213783"},"Children":[{"ID":"20240201213784-9u8jooc","Type":"NodeParagraph","Properties":{"id":"20240201213784-9u8jooc","updated":"20240201213784"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"包装器设计模式"},{"Type":"NodeText","Data":" : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。"}]}]},{"ID":"20240201213785-ipw90v0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213785-ipw90v0","updated":"20240201213785"},"Children":[{"ID":"20240201213786-volowrw","Type":"NodeParagraph","Properties":{"id":"20240201213786-volowrw","updated":"20240201213786"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"观察者模式:"},{"Type":"NodeText","Data":" Spring 事件驱动模型就是观察者模式很经典的一个应用。"}]}]},{"ID":"20240201213787-nr464jk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213787-nr464jk","updated":"20240201213787"},"Children":[{"ID":"20240201213788-pbqe3zh","Type":"NodeParagraph","Properties":{"id":"20240201213788-pbqe3zh","updated":"20240201213788"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适配器模式"},{"Type":"NodeText","Data":" : Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Controller"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201213789-2lic80c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213789-2lic80c","updated":"20240201213789"},"Children":[{"ID":"20240201213790-w1mqvgb","Type":"NodeParagraph","Properties":{"id":"20240201213790-w1mqvgb","updated":"20240201213790"},"Children":[{"Type":"NodeText","Data":"......"}]}]}]},{"ID":"20240201213791-xoieroj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213791-xoieroj","updated":"20240201213791"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务"}]},{"ID":"20240201213792-uw98xq5","Type":"NodeParagraph","Properties":{"id":"20240201213792-uw98xq5","updated":"20240201213792"},"Children":[{"Type":"NodeText","Data":"关于 Spring 事务的详细介绍，可以看我写的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/system-design/framework/spring/spring-transaction.html","TextMarkTextContent":"Spring 事务详解"},{"Type":"NodeText","Data":" 这篇文章。"}]},{"ID":"20240201213793-popu2dc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213793-popu2dc","updated":"20240201213793"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 管理事务的方式有几种？"}]},{"ID":"20240201213794-cf8aakx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213794-cf8aakx","updated":"20240201213794"},"Children":[{"ID":"20240201213795-maqujp0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213795-maqujp0","updated":"20240201213795"},"Children":[{"ID":"20240201213796-9vlf26a","Type":"NodeParagraph","Properties":{"id":"20240201213796-9vlf26a","updated":"20240201213796"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"编程式事务"},{"Type":"NodeText","Data":" ： 在代码中硬编码(不推荐使用) : 通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionTemplate"},{"Type":"NodeText","Data":"或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionManager"},{"Type":"NodeText","Data":" 手动管理事务，实际应用中很少使用，但是对于你理解 Spring 事务管理原理有帮助。"}]}]},{"ID":"20240201213797-1w31hav","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213797-1w31hav","updated":"20240201213797"},"Children":[{"ID":"20240201213798-6rzatff","Type":"NodeParagraph","Properties":{"id":"20240201213798-6rzatff","updated":"20240201213798"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"声明式事务"},{"Type":"NodeText","Data":" ： 在 XML 配置文件中配置或者直接基于注解（推荐使用） : 实际是通过 AOP 实现（基于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 的全注解方式使用最多）"}]}]}]},{"ID":"20240201213799-n7ptfic","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213799-n7ptfic","updated":"20240201213799"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务中哪几种事务传播行为?"}]},{"ID":"20240201213800-eik3mkv","Type":"NodeParagraph","Properties":{"id":"20240201213800-eik3mkv","updated":"20240201213800"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务传播行为是为了解决业务层方法之间互相调用的事务问题"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213801-6lsihxm","Type":"NodeParagraph","Properties":{"id":"20240201213801-6lsihxm","updated":"20240201213801"},"Children":[{"Type":"NodeText","Data":"当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。"}]},{"ID":"20240201213802-88wjght","Type":"NodeParagraph","Properties":{"id":"20240201213802-88wjght","updated":"20240201213802"},"Children":[{"Type":"NodeText","Data":"正确的事务传播行为可能的值如下:"}]},{"ID":"20240201213803-8c4mbv6","Type":"NodeParagraph","Properties":{"id":"20240201213803-8c4mbv6","updated":"20240201213803"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_REQUIRED"}]},{"ID":"20240201213804-8vu8kv3","Type":"NodeParagraph","Properties":{"id":"20240201213804-8vu8kv3","updated":"20240201213804"},"Children":[{"Type":"NodeText","Data":"使用的最多的一个事务传播行为，我们平时经常使用的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":"注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。"}]},{"ID":"20240201213805-5vb25aj","Type":"NodeParagraph","Properties":{"id":"20240201213805-5vb25aj","updated":"20240201213805"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"2.TransactionDefinition.PROPAGATION_REQUIRES_NEW"}]},{"ID":"20240201213806-1rejtng","Type":"NodeParagraph","Properties":{"id":"20240201213806-1rejtng","updated":"20240201213806"},"Children":[{"Type":"NodeText","Data":"创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Propagation.REQUIRES_NEW"},{"Type":"NodeText","Data":"修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。"}]},{"ID":"20240201213807-97koxs8","Type":"NodeParagraph","Properties":{"id":"20240201213807-97koxs8","updated":"20240201213807"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NESTED"}]},{"ID":"20240201213808-xf32d1x","Type":"NodeParagraph","Properties":{"id":"20240201213808-xf32d1x","updated":"20240201213808"},"Children":[{"Type":"NodeText","Data":"如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_REQUIRED"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213809-px1y6y5","Type":"NodeParagraph","Properties":{"id":"20240201213809-px1y6y5","updated":"20240201213809"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4."},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_MANDATORY"}]},{"ID":"20240201213810-5m8d1tf","Type":"NodeParagraph","Properties":{"id":"20240201213810-5m8d1tf","updated":"20240201213810"},"Children":[{"Type":"NodeText","Data":"如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）"}]},{"ID":"20240201213811-mdfc6fr","Type":"NodeParagraph","Properties":{"id":"20240201213811-mdfc6fr","updated":"20240201213811"},"Children":[{"Type":"NodeText","Data":"这个使用的很少。"}]},{"ID":"20240201213812-jzhflz5","Type":"NodeParagraph","Properties":{"id":"20240201213812-jzhflz5","updated":"20240201213812"},"Children":[{"Type":"NodeText","Data":"若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚："}]},{"ID":"20240201213813-1ebgst2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213813-1ebgst2","updated":"20240201213813"},"Children":[{"ID":"20240201213814-2znreaf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213814-2znreaf","updated":"20240201213814"},"Children":[{"ID":"20240201213815-bwbo464","Type":"NodeParagraph","Properties":{"id":"20240201213815-bwbo464","updated":"20240201213815"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_SUPPORTS"},{"Type":"NodeText","Data":": 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。"}]}]},{"ID":"20240201213816-s414roo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213816-s414roo","updated":"20240201213816"},"Children":[{"ID":"20240201213817-9ehnxrd","Type":"NodeParagraph","Properties":{"id":"20240201213817-9ehnxrd","updated":"20240201213817"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NOT_SUPPORTED"},{"Type":"NodeText","Data":": 以非事务方式运行，如果当前存在事务，则把当前事务挂起。"}]}]},{"ID":"20240201213818-2fzpr3y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213818-2fzpr3y","updated":"20240201213818"},"Children":[{"ID":"20240201213819-jnvi5b8","Type":"NodeParagraph","Properties":{"id":"20240201213819-jnvi5b8","updated":"20240201213819"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.PROPAGATION_NEVER"},{"Type":"NodeText","Data":": 以非事务方式运行，如果当前存在事务，则抛出异常。"}]}]}]},{"ID":"20240201213820-e0no6kl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213820-e0no6kl","updated":"20240201213820"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring 事务中的隔离级别有哪几种?"}]},{"ID":"20240201213821-dwe8jq5","Type":"NodeParagraph","Properties":{"id":"20240201213821-dwe8jq5","updated":"20240201213821"},"Children":[{"Type":"NodeText","Data":"和事务传播行为这块一样，为了方便使用，Spring 也相应地定义了一个枚举类："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Isolation"}]},{"ID":"20240201213822-m3ye9by","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213822-m3ye9by","updated":"20240201213822"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public enum Isolation {\n\n    DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),\n\n    READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),\n\n    READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),\n\n    REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),\n\n    SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);\n\n    private final int value;\n\n    Isolation(int value) {\n        this.value = value;\n    }\n\n    public int value() {\n        return this.value;\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213823-go34p2s","Type":"NodeParagraph","Properties":{"id":"20240201213823-go34p2s","updated":"20240201213823"},"Children":[{"Type":"NodeText","Data":"下面我依次对每一种事务隔离级别进行介绍："}]},{"ID":"20240201213824-sif7fhj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213824-sif7fhj","updated":"20240201213824"},"Children":[{"ID":"20240201213825-roz69pd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213825-roz69pd","updated":"20240201213825"},"Children":[{"ID":"20240201213826-av47upo","Type":"NodeParagraph","Properties":{"id":"20240201213826-av47upo","updated":"20240201213826"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_DEFAULT"},{"Type":"NodeText","Data":" :使用后端数据库默认的隔离级别，MySQL 默认采用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"REPEATABLE_READ"},{"Type":"NodeText","Data":" 隔离级别 Oracle 默认采用的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"READ_COMMITTED"},{"Type":"NodeText","Data":" 隔离级别."}]}]},{"ID":"20240201213827-wfyr215","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213827-wfyr215","updated":"20240201213827"},"Children":[{"ID":"20240201213828-ledms1a","Type":"NodeParagraph","Properties":{"id":"20240201213828-ledms1a","updated":"20240201213828"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_READ_UNCOMMITTED"},{"Type":"NodeText","Data":" :最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可能会导致脏读、幻读或不可重复读"}]}]},{"ID":"20240201213829-v3y9bgd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213829-v3y9bgd","updated":"20240201213829"},"Children":[{"ID":"20240201213830-93t8txd","Type":"NodeParagraph","Properties":{"id":"20240201213830-93t8txd","updated":"20240201213830"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_READ_COMMITTED"},{"Type":"NodeText","Data":" : 允许读取并发事务已经提交的数据，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以阻止脏读，但是幻读或不可重复读仍有可能发生"}]}]},{"ID":"20240201213831-6nrs2mu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213831-6nrs2mu","updated":"20240201213831"},"Children":[{"ID":"20240201213832-mmitqcq","Type":"NodeParagraph","Properties":{"id":"20240201213832-mmitqcq","updated":"20240201213832"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_REPEATABLE_READ"},{"Type":"NodeText","Data":" : 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可以阻止脏读和不可重复读，但幻读仍有可能发生。"}]}]},{"ID":"20240201213833-krx3yab","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213833-krx3yab","updated":"20240201213833"},"Children":[{"ID":"20240201213834-s0r8zrx","Type":"NodeParagraph","Properties":{"id":"20240201213834-s0r8zrx","updated":"20240201213834"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"TransactionDefinition.ISOLATION_SERIALIZABLE"},{"Type":"NodeText","Data":" : 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"该级别可以防止脏读、不可重复读以及幻读"},{"Type":"NodeText","Data":"。但是这将严重影响程序的性能。通常情况下也不会用到该级别。"}]}]}]},{"ID":"20240201213835-at4540w","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213835-at4540w","updated":"20240201213835"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"@Transactional(rollbackFor = Exception.class)注解了解吗？"}]},{"ID":"20240201213836-z5vshj2","Type":"NodeParagraph","Properties":{"id":"20240201213836-z5vshj2","updated":"20240201213836"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Exception"},{"Type":"NodeText","Data":" 分为运行时异常 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":" 和非运行时异常。事务管理对于企业应用来说是至关重要的，即使出现异常情况，它也可以保证数据的一致性。"}]},{"ID":"20240201213837-ue96ben","Type":"NodeParagraph","Properties":{"id":"20240201213837-ue96ben","updated":"20240201213837"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。如果类或者方法加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。"}]},{"ID":"20240201213838-0hqix8h","Type":"NodeParagraph","Properties":{"id":"20240201213838-0hqix8h","updated":"20240201213838"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Transactional"},{"Type":"NodeText","Data":" 注解中如果不配置"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"rollbackFor"},{"Type":"NodeText","Data":"属性,那么事务只会在遇到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"RuntimeException"},{"Type":"NodeText","Data":"的时候才会回滚，加上 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"rollbackFor=Exception.class"},{"Type":"NodeText","Data":",可以让事务在遇到非运行时异常时也回滚。"}]},{"ID":"20240201213839-9gy03kd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213839-9gy03kd","updated":"20240201213839"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Data JPA"}]},{"ID":"20240201213840-g5zv9sb","Type":"NodeParagraph","Properties":{"id":"20240201213840-g5zv9sb","updated":"20240201213840"},"Children":[{"Type":"NodeText","Data":"JPA 重要的是实战，这里仅对小部分知识点进行总结。"}]},{"ID":"20240201213841-zsgp187","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213841-zsgp187","updated":"20240201213841"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何使用 JPA 在数据库中非持久化一个字段？"}]},{"ID":"20240201213842-z2xumse","Type":"NodeParagraph","Properties":{"id":"20240201213842-z2xumse","updated":"20240201213842"},"Children":[{"Type":"NodeText","Data":"假如我们有下面一个类："}]},{"ID":"20240201213843-ag7t93f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213843-ag7t93f","updated":"20240201213843"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Entity(name=\"USER\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name = \"ID\")\n    private Long id;\n\n    @Column(name=\"USER_NAME\")\n    private String userName;\n\n    @Column(name=\"PASSWORD\")\n    private String password;\n\n    private String secrect;\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213844-7umv73w","Type":"NodeParagraph","Properties":{"id":"20240201213844-7umv73w","updated":"20240201213844"},"Children":[{"Type":"NodeText","Data":"如果我们想让"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"secrect"},{"Type":"NodeText","Data":" 这个字段不被持久化，也就是不被数据库存储怎么办？我们可以采用下面几种方法："}]},{"ID":"20240201213845-9htelpk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213845-9htelpk","updated":"20240201213845"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"static String transient1; // not persistent because of static\nfinal String transient2 = \"Satish\"; // not persistent because of final\ntransient String transient3; // not persistent because of transient\n@Transient\nString transient4; // not persistent because of @Transient\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213846-ga3a2uk","Type":"NodeParagraph","Properties":{"id":"20240201213846-ga3a2uk","updated":"20240201213846"},"Children":[{"Type":"NodeText","Data":"一般使用后面两种方式比较多，我个人使用注解的方式比较多。"}]},{"ID":"20240201213847-vh23dng","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213847-vh23dng","updated":"20240201213847"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"JPA 的审计功能是做什么的？有什么用？"}]},{"ID":"20240201213848-3210kaj","Type":"NodeParagraph","Properties":{"id":"20240201213848-3210kaj","updated":"20240201213848"},"Children":[{"Type":"NodeText","Data":"审计功能主要是帮助我们记录数据库操作的具体行为比如某条记录是谁创建的、什么时间创建的、最后修改人是谁、最后修改时间是什么时候。"}]},{"ID":"20240201213849-9o7a9kk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213849-9o7a9kk","updated":"20240201213849"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@MappedSuperclass\n@EntityListeners(value = AuditingEntityListener.class)\npublic abstract class AbstractAuditBase {\n\n    @CreatedDate\n    @Column(updatable = false)\n    @JsonIgnore\n    private Instant createdAt;\n\n    @LastModifiedDate\n    @JsonIgnore\n    private Instant updatedAt;\n\n    @CreatedBy\n    @Column(updatable = false)\n    @JsonIgnore\n    private String createdBy;\n\n    @LastModifiedBy\n    @JsonIgnore\n    private String updatedBy;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213850-5mwv7kj","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213850-5mwv7kj","updated":"20240201213850"},"Children":[{"ID":"20240201213851-wwj9pg9","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213851-wwj9pg9","updated":"20240201213851"},"Children":[{"ID":"20240201213852-dzkngpq","Type":"NodeParagraph","Properties":{"id":"20240201213852-dzkngpq","updated":"20240201213852"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@CreatedDate"},{"Type":"NodeText","Data":": 表示该字段为创建时间字段，在这个实体被 insert 的时候，会设置值"}]}]},{"ID":"20240201213853-k2ulw4g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213853-k2ulw4g","updated":"20240201213853"},"Children":[{"ID":"20240201213854-vikypo7","Type":"NodeParagraph","Properties":{"id":"20240201213854-vikypo7","updated":"20240201213854"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@CreatedBy"},{"Type":"NodeText","Data":" :表示该字段为创建人，在这个实体被 insert 的时候，会设置值"}]},{"ID":"20240201213855-obftnek","Type":"NodeParagraph","Properties":{"id":"20240201213855-obftnek","updated":"20240201213855"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@LastModifiedDate"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@LastModifiedBy"},{"Type":"NodeText","Data":"同理。"}]}]}]},{"ID":"20240201213856-ugt6pgm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213856-ugt6pgm","updated":"20240201213856"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实体之间的关联关系注解有哪些？"}]},{"ID":"20240201213857-gqgilbw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213857-gqgilbw","updated":"20240201213857"},"Children":[{"ID":"20240201213858-dtfw96l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213858-dtfw96l","updated":"20240201213858"},"Children":[{"ID":"20240201213859-4yq2vtc","Type":"NodeParagraph","Properties":{"id":"20240201213859-4yq2vtc","updated":"20240201213859"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@OneToOne"},{"Type":"NodeText","Data":" : 一对一。"}]}]},{"ID":"20240201213860-ga3pcun","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213860-ga3pcun","updated":"20240201213860"},"Children":[{"ID":"20240201213861-2cnlz7x","Type":"NodeParagraph","Properties":{"id":"20240201213861-2cnlz7x","updated":"20240201213861"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ManyToMany"},{"Type":"NodeText","Data":" ：多对多。"}]}]},{"ID":"20240201213862-bwlp3wh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213862-bwlp3wh","updated":"20240201213862"},"Children":[{"ID":"20240201213863-t2nfzty","Type":"NodeParagraph","Properties":{"id":"20240201213863-t2nfzty","updated":"20240201213863"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@OneToMany"},{"Type":"NodeText","Data":" : 一对多。"}]}]},{"ID":"20240201213864-8iivx22","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213864-8iivx22","updated":"20240201213864"},"Children":[{"ID":"20240201213865-zs6u75c","Type":"NodeParagraph","Properties":{"id":"20240201213865-zs6u75c","updated":"20240201213865"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ManyToOne"},{"Type":"NodeText","Data":" ：多对一。"}]}]}]},{"ID":"20240201213866-o0omhlq","Type":"NodeParagraph","Properties":{"id":"20240201213866-o0omhlq","updated":"20240201213866"},"Children":[{"Type":"NodeText","Data":"利用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ManyToOne"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@OneToMany"},{"Type":"NodeText","Data":" 也可以表达多对多的关联关系。"}]},{"ID":"20240201213867-g0h0f4j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201213867-g0h0f4j","updated":"20240201213867"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Spring Security"}]},{"ID":"20240201213868-009ifxn","Type":"NodeParagraph","Properties":{"id":"20240201213868-009ifxn","updated":"20240201213868"},"Children":[{"Type":"NodeText","Data":"Spring Security 重要的是实战，这里仅对小部分知识点进行总结。"}]},{"ID":"20240201213869-1rfwwdl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213869-1rfwwdl","updated":"20240201213869"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"有哪些控制请求访问权限的方法？"}]},{"ID":"20240201213870-0nfxsle","Type":"NodeParagraph","Properties":{"id":"20240201213870-0nfxsle","updated":"20240201213870"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/image-20220728201854641.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213871-lcwot06","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213871-lcwot06","updated":"20240201213871"},"Children":[{"ID":"20240201213872-7rn4ob6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213872-7rn4ob6","updated":"20240201213872"},"Children":[{"ID":"20240201213873-kut614f","Type":"NodeParagraph","Properties":{"id":"20240201213873-kut614f","updated":"20240201213873"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"permitAll()"},{"Type":"NodeText","Data":" ：无条件允许任何形式访问，不管你登录还是没有登录。"}]}]},{"ID":"20240201213874-kpeeufx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213874-kpeeufx","updated":"20240201213874"},"Children":[{"ID":"20240201213875-f9piobe","Type":"NodeParagraph","Properties":{"id":"20240201213875-f9piobe","updated":"20240201213875"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"anonymous()"},{"Type":"NodeText","Data":" ：允许匿名访问，也就是没有登录才可以访问。"}]}]},{"ID":"20240201213876-ihoxtgu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213876-ihoxtgu","updated":"20240201213876"},"Children":[{"ID":"20240201213877-ddr5ebv","Type":"NodeParagraph","Properties":{"id":"20240201213877-ddr5ebv","updated":"20240201213877"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"denyAll()"},{"Type":"NodeText","Data":" ：无条件决绝任何形式的访问。"}]}]},{"ID":"20240201213878-i0veckf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213878-i0veckf","updated":"20240201213878"},"Children":[{"ID":"20240201213879-vkmb575","Type":"NodeParagraph","Properties":{"id":"20240201213879-vkmb575","updated":"20240201213879"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"authenticated()"},{"Type":"NodeText","Data":"：只允许已认证的用户访问。"}]}]},{"ID":"20240201213880-vto93rt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213880-vto93rt","updated":"20240201213880"},"Children":[{"ID":"20240201213881-eje4ake","Type":"NodeParagraph","Properties":{"id":"20240201213881-eje4ake","updated":"20240201213881"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"fullyAuthenticated()"},{"Type":"NodeText","Data":" ：只允许已经登录或者通过 remember-me 登录的用户访问。"}]}]},{"ID":"20240201213882-61hpz21","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213882-61hpz21","updated":"20240201213882"},"Children":[{"ID":"20240201213883-yzu88az","Type":"NodeParagraph","Properties":{"id":"20240201213883-yzu88az","updated":"20240201213883"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasRole(String)"},{"Type":"NodeText","Data":" : 只允许指定的角色访问。"}]}]},{"ID":"20240201213884-iogfn11","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213884-iogfn11","updated":"20240201213884"},"Children":[{"ID":"20240201213885-mamfn8h","Type":"NodeParagraph","Properties":{"id":"20240201213885-mamfn8h","updated":"20240201213885"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasAnyRole(String)"},{"Type":"NodeText","Data":" : 指定一个或者多个角色，满足其一的用户即可访问。"}]}]},{"ID":"20240201213886-rgocgso","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213886-rgocgso","updated":"20240201213886"},"Children":[{"ID":"20240201213887-twdq56b","Type":"NodeParagraph","Properties":{"id":"20240201213887-twdq56b","updated":"20240201213887"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasAuthority(String)"},{"Type":"NodeText","Data":" ：只允许具有指定权限的用户访问"}]}]},{"ID":"20240201213888-8xvymzy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213888-8xvymzy","updated":"20240201213888"},"Children":[{"ID":"20240201213889-swij6il","Type":"NodeParagraph","Properties":{"id":"20240201213889-swij6il","updated":"20240201213889"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasAnyAuthority(String)"},{"Type":"NodeText","Data":" ：指定一个或者多个权限，满足其一的用户即可访问。"}]}]},{"ID":"20240201213890-7olamuv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201213890-7olamuv","updated":"20240201213890"},"Children":[{"ID":"20240201213891-edv89lc","Type":"NodeParagraph","Properties":{"id":"20240201213891-edv89lc","updated":"20240201213891"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hasIpAddress(String)"},{"Type":"NodeText","Data":" : 只允许指定 ip 的用户访问。"}]}]}]},{"ID":"20240201213892-1u6llwy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213892-1u6llwy","updated":"20240201213892"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"hasRole 和 hasAuthority 有区别吗？"}]},{"ID":"20240201213893-0rkcvn5","Type":"NodeParagraph","Properties":{"id":"20240201213893-0rkcvn5","updated":"20240201213893"},"Children":[{"Type":"NodeText","Data":"可以看看松哥的这篇文章："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/GTNOa2k9_n_H0w24upClRw","TextMarkTextContent":"Spring Security 中的 hasRole 和 hasAuthority 有区别吗？"},{"Type":"NodeText","Data":"，介绍的比较详细。"}]},{"ID":"20240201213894-yqjb1i6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213894-yqjb1i6","updated":"20240201213894"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何对密码进行加密？"}]},{"ID":"20240201213895-4pxedbq","Type":"NodeParagraph","Properties":{"id":"20240201213895-4pxedbq","updated":"20240201213895"},"Children":[{"Type":"NodeText","Data":"如果我们需要保存密码这类敏感数据到数据库的话，需要先加密再保存。"}]},{"ID":"20240201213896-ned6x7p","Type":"NodeParagraph","Properties":{"id":"20240201213896-ned6x7p","updated":"20240201213896"},"Children":[{"Type":"NodeText","Data":"Spring Security 提供了多种加密算法的实现，开箱即用，非常方便。这些加密算法实现类的父类是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PasswordEncoder"},{"Type":"NodeText","Data":" ，如果你想要自己实现一个加密算法的话，也需要继承 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PasswordEncoder"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201213897-sw6gei4","Type":"NodeParagraph","Properties":{"id":"20240201213897-sw6gei4","updated":"20240201213897"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"PasswordEncoder"},{"Type":"NodeText","Data":" 接口一共也就 3 个必须实现的方法。"}]},{"ID":"20240201213898-pgn7c3i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201213898-pgn7c3i","updated":"20240201213898"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface PasswordEncoder {\n    // 加密也就是对原始密码进行编码\n    String encode(CharSequence var1);\n    // 比对原始密码和数据库中保存的密码\n    boolean matches(CharSequence var1, String var2);\n    // 判断加密密码是否需要再次进行加密，默认返回 false\n    default boolean upgradeEncoding(String encodedPassword) {\n        return false;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201213899-4ffuo17","Type":"NodeParagraph","Properties":{"id":"20240201213899-4ffuo17","updated":"20240201213899"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/system-design/framework/spring/image-20220728183540954.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201213900-jz5krfn","Type":"NodeParagraph","Properties":{"id":"20240201213900-jz5krfn","updated":"20240201213900"},"Children":[{"Type":"NodeText","Data":"官方推荐使用基于 bcrypt 强哈希函数的加密算法实现类。"}]},{"ID":"20240201213901-pe5qpxj","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201213901-pe5qpxj","updated":"20240201213901"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何优雅更换系统使用的加密算法？"}]},{"ID":"20240201213902-vxxbas8","Type":"NodeParagraph","Properties":{"id":"20240201213902-vxxbas8","updated":"20240201213902"},"Children":[{"Type":"NodeText","Data":"如果我们在开发过程中，突然发现现有的加密算法无法满足我们的需求，需要更换成另外一个加密算法，这个时候应该怎么办呢？"}]},{"ID":"20240201213903-0dfabh6","Type":"NodeParagraph","Properties":{"id":"20240201213903-0dfabh6","updated":"20240201213903"},"Children":[{"Type":"NodeText","Data":"推荐的做法是通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelegatingPasswordEncoder"},{"Type":"NodeText","Data":" 兼容多种不同的密码加密方案，以适应不同的业务需求。"}]},{"ID":"20240201213904-759rqex","Type":"NodeParagraph","Properties":{"id":"20240201213904-759rqex","updated":"20240201213904"},"Children":[{"Type":"NodeText","Data":"从名字也能看出来，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelegatingPasswordEncoder"},{"Type":"NodeText","Data":" 其实就是一个代理类，并非是一种全新的加密算法，它做的事情就是代理上面提到的加密算法实现类。在 Spring Security 5.0 之后，默认就是基于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DelegatingPasswordEncoder"},{"Type":"NodeText","Data":" 进行密码加密的。"}]}]}