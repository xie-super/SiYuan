{"ID":"20240201214002-n83qi74","Spec":"1","Type":"NodeDocument","Properties":{"id":"20240201214002-n83qi74","title":"h-0读写分离和分库分表","updated":"20240201214002"},"Children":[{"ID":"20240201214003-11ok4bv","Type":"NodeThematicBreak","Properties":{"id":"20240201214003-11ok4bv","updated":"20240201214003"}},{"ID":"20240201214004-p67krq1","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240201214004-p67krq1","updated":"20240201214004"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"8. 高性能"}]},{"ID":"20240201214005-1z2lzqv","Type":"NodeBlockquote","Properties":{"id":"20240201214005-1z2lzqv","updated":"20240201214005"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20240201214006-3v2bue1","Type":"NodeParagraph","Properties":{"id":"20240201214006-3v2bue1","updated":"20240201214006"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://javaguide.cn/","TextMarkTextContent":"JavaGuide"},{"Type":"NodeText","Data":" ：「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！"}]}]},{"ID":"20240201214007-0yao6bo","Type":"NodeHTMLBlock","Data":"\u003cdiv\u003e\n\u003cdiv align=\"center\"\u003e\n    \u003cp\u003e\n        \u003ca href=\"https://www.yuque.com/docs/share/8a30ffb5-83f3-40f9-baf9-38de68b906dc\"\u003e\n            \u003cimg src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/xingqiu/xingqiu.png\" style=\"margin: 0 auto; width: 850px;\" /\u003e\n        \u003c/a\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003ca href=\"https://github.com/Snailclimb/JavaGuide-Interview\"\u003eGithub\u003c/a\u003e |\n        \u003ca href=\"https://gitee.com/SnailClimb/JavaGuide-Interview\"\u003eGitee\u003c/a\u003e\n    \u003c/p\u003e  \n\u003c/div\u003e","HtmlBlockType":6,"Properties":{"id":"20240201214007-0yao6bo","updated":"20240201214007"}},{"ID":"20240201214008-54f7qo8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240201214008-54f7qo8","updated":"20240201214008"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"8.1 数据库读写分离和分库分表"}]},{"ID":"20240201214009-vxd903p","Type":"NodeParagraph","Properties":{"id":"20240201214009-vxd903p","updated":"20240201214009"},"Children":[{"Type":"NodeText","Data":"相信很多小伙伴们对于这两个概念已经比较熟悉了，这篇文章全程都是大白话的形式，希望能够给你带来不一样的感受。"}]},{"ID":"20240201214010-16ndjxu","Type":"NodeParagraph","Properties":{"id":"20240201214010-16ndjxu","updated":"20240201214010"},"Children":[{"Type":"NodeText","Data":"如果你之前不太了解这两个概念，那我建议你搞懂之后，可以把自己对于读写分离以及分库分表的理解讲给你的同事/朋友听听。"}]},{"ID":"20240201214011-pacu9mn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214011-pacu9mn","updated":"20240201214011"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"读写分离"}]},{"ID":"20240201214012-170aoop","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214012-170aoop","updated":"20240201214012"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何为读写分离？"}]},{"ID":"20240201214013-k7o6b9n","Type":"NodeParagraph","Properties":{"id":"20240201214013-k7o6b9n","updated":"20240201214013"},"Children":[{"Type":"NodeText","Data":"见名思意，根据读写分离的名字，我们就可以知道："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。"},{"Type":"NodeText","Data":" 这样的话，就能够小幅提升写性能，大幅提升读性能。"}]},{"ID":"20240201214014-t6ry2ys","Type":"NodeParagraph","Properties":{"id":"20240201214014-t6ry2ys","updated":"20240201214014"},"Children":[{"Type":"NodeText","Data":"我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。"}]},{"ID":"20240201214015-4oqgbim","Type":"NodeParagraph","Properties":{"id":"20240201214015-4oqgbim","updated":"20240201214015"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"读写分离示意图","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214016-vhffhcd","Type":"NodeParagraph","Properties":{"id":"20240201214016-vhffhcd","updated":"20240201214016"},"Children":[{"Type":"NodeText","Data":"一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。"}]},{"ID":"20240201214017-mi5gyt7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214017-mi5gyt7","updated":"20240201214017"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"读写分离会带来什么问题？如何解决？"}]},{"ID":"20240201214018-0h1aaes","Type":"NodeParagraph","Properties":{"id":"20240201214018-0h1aaes","updated":"20240201214018"},"Children":[{"Type":"NodeText","Data":"读写分离对于提升数据库的并发非常有效，但是，同时也会引来一个问题：主库和从库的数据存在延迟，比如你写完主库之后，主库的数据同步到从库是需要时间的，这个时间差就导致了主库和从库的数据不一致性问题。这也就是我们经常说的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主从同步延迟"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201214019-uv8zpuq","Type":"NodeParagraph","Properties":{"id":"20240201214019-uv8zpuq","updated":"20240201214019"},"Children":[{"Type":"NodeText","Data":"主从同步延迟问题的解决，没有特别好的一种方案（可能是我太菜了，欢迎评论区补充）。你可以根据自己的业务场景，参考一下下面几种解决办法。"}]},{"ID":"20240201214020-dddgxl2","Type":"NodeParagraph","Properties":{"id":"20240201214020-dddgxl2","updated":"20240201214020"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.强制将读请求路由到主库处理。"}]},{"ID":"20240201214021-4pvey80","Type":"NodeParagraph","Properties":{"id":"20240201214021-4pvey80","updated":"20240201214021"},"Children":[{"Type":"NodeText","Data":"既然你从库的数据过期了，那我就直接从主库读取嘛！这种方案虽然会增加主库的压力，但是，实现起来比较简单，也是我了解到的使用最多的一种方式。"}]},{"ID":"20240201214022-s5v8qrj","Type":"NodeParagraph","Properties":{"id":"20240201214022-s5v8qrj","updated":"20240201214022"},"Children":[{"Type":"NodeText","Data":"比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Sharding-JDBC"},{"Type":"NodeText","Data":" 就是采用的这种方案。通过使用 Sharding-JDBC 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HintManager"},{"Type":"NodeText","Data":" 分片键值管理器，我们可以强制使用主库。"}]},{"ID":"20240201214023-79bxxtg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20240201214023-79bxxtg","updated":"20240201214023"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"HintManager hintManager = HintManager.getInstance();\nhintManager.setMasterRouteOnly();\n// 继续JDBC操作\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20240201214024-k9kpxm5","Type":"NodeParagraph","Properties":{"id":"20240201214024-k9kpxm5","updated":"20240201214024"},"Children":[{"Type":"NodeText","Data":"对于这种方案，你可以将那些必须获取最新数据的读请求都交给主库处理。"}]},{"ID":"20240201214025-nu1s6sg","Type":"NodeParagraph","Properties":{"id":"20240201214025-nu1s6sg","updated":"20240201214025"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.延迟读取。"}]},{"ID":"20240201214026-2ks2rh9","Type":"NodeParagraph","Properties":{"id":"20240201214026-2ks2rh9","updated":"20240201214026"},"Children":[{"Type":"NodeText","Data":"还有一些朋友肯定会想既然主从同步存在延迟，那我就在延迟之后读取啊，比如主从同步延迟 0.5s,那我就 1s 之后再读取数据。这样多方便啊！方便是方便，但是也很扯淡。"}]},{"ID":"20240201214027-pgm6v2i","Type":"NodeParagraph","Properties":{"id":"20240201214027-pgm6v2i","updated":"20240201214027"},"Children":[{"Type":"NodeText","Data":"不过，如果你是这样设计业务流程就会好很多：对于一些对数据比较敏感的场景，你可以在完成写请求之后，避免立即进行请求操作。比如你支付成功之后，跳转到一个支付成功的页面，当你点击返回之后才返回自己的账户。"}]},{"ID":"20240201214028-n4huhtp","Type":"NodeParagraph","Properties":{"id":"20240201214028-n4huhtp","updated":"20240201214028"},"Children":[{"Type":"NodeText","Data":"另外，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/column/intro/100020801?code=ieY8HeRSlDsFbuRtggbBQGxdTh-1jMASqEIeqzHAKrI%3D","TextMarkTextContent":"《MySQL 实战 45 讲》"},{"Type":"NodeText","Data":"这个专栏中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/column/article/77636","TextMarkTextContent":"《读写分离有哪些坑？》"},{"Type":"NodeText","Data":"这篇文章还介绍了很多其他比较实际的解决办法，感兴趣的小伙伴可以自行研究一下。"}]},{"ID":"20240201214029-kzch2wj","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214029-kzch2wj","updated":"20240201214029"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"如何实现读写分离？"}]},{"ID":"20240201214030-kzscwx6","Type":"NodeParagraph","Properties":{"id":"20240201214030-kzscwx6","updated":"20240201214030"},"Children":[{"Type":"NodeText","Data":"不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步："}]},{"ID":"20240201214031-tvcs07p","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201214031-tvcs07p","updated":"20240201214031"},"Children":[{"ID":"20240201214032-a6bc5cl","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201214032-a6bc5cl","updated":"20240201214032"},"Children":[{"ID":"20240201214033-szvbiej","Type":"NodeParagraph","Properties":{"id":"20240201214033-szvbiej","updated":"20240201214033"},"Children":[{"Type":"NodeText","Data":"部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。"}]}]},{"ID":"20240201214034-vgoq6e9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201214034-vgoq6e9","updated":"20240201214034"},"Children":[{"ID":"20240201214035-1pxlw9v","Type":"NodeParagraph","Properties":{"id":"20240201214035-1pxlw9v","updated":"20240201214035"},"Children":[{"Type":"NodeText","Data":"保证主数据库和从数据库之间的数据是实时同步的，这个过程也就是我们常说的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主从复制"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240201214036-pecqhaw","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201214036-pecqhaw","updated":"20240201214036"},"Children":[{"ID":"20240201214037-uz9kozp","Type":"NodeParagraph","Properties":{"id":"20240201214037-uz9kozp","updated":"20240201214037"},"Children":[{"Type":"NodeText","Data":"系统将写请求交给主数据库处理，读请求交给从数据库处理。"}]}]}]},{"ID":"20240201214038-c1ku6rf","Type":"NodeParagraph","Properties":{"id":"20240201214038-c1ku6rf","updated":"20240201214038"},"Children":[{"Type":"NodeText","Data":"落实到项目本身的话，常用的方式有两种："}]},{"ID":"20240201214039-m131rm5","Type":"NodeParagraph","Properties":{"id":"20240201214039-m131rm5","updated":"20240201214039"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.代理方式"}]},{"ID":"20240201214040-ef5mf7y","Type":"NodeParagraph","Properties":{"id":"20240201214040-ef5mf7y","updated":"20240201214040"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"代理方式实现读写分离","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation-proxy.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214041-gfskvg4","Type":"NodeParagraph","Properties":{"id":"20240201214041-gfskvg4","updated":"20240201214041"},"Children":[{"Type":"NodeText","Data":"我们可以在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。"}]},{"ID":"20240201214042-bjvvwez","Type":"NodeParagraph","Properties":{"id":"20240201214042-bjvvwez","updated":"20240201214042"},"Children":[{"Type":"NodeText","Data":"提供类似功能的中间件有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL Router"},{"Type":"NodeText","Data":"（官方）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Atlas"},{"Type":"NodeText","Data":"（基于 MySQL Proxy）、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Maxscale"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MyCat"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201214043-qu8f5cw","Type":"NodeParagraph","Properties":{"id":"20240201214043-qu8f5cw","updated":"20240201214043"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.组件方式"}]},{"ID":"20240201214044-dzij0ov","Type":"NodeParagraph","Properties":{"id":"20240201214044-dzij0ov","updated":"20240201214044"},"Children":[{"Type":"NodeText","Data":"在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。"}]},{"ID":"20240201214045-jalu95g","Type":"NodeParagraph","Properties":{"id":"20240201214045-jalu95g","updated":"20240201214045"},"Children":[{"Type":"NodeText","Data":"这也是我比较推荐的一种方式。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。如果你要采用这种方式的话，推荐使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sharding-jdbc"},{"Type":"NodeText","Data":" ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。"}]},{"ID":"20240201214046-bs0y2ga","Type":"NodeParagraph","Properties":{"id":"20240201214046-bs0y2ga","updated":"20240201214046"},"Children":[{"Type":"NodeText","Data":"你可以在 shardingsphere 官方找到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-jdbc/usage/read-write-splitting/","TextMarkTextContent":"sharding-jdbc 关于读写分离的操作"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201214047-33vttos","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214047-33vttos","updated":"20240201214047"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"主从复制原理了解么？"}]},{"ID":"20240201214048-vu3trqf","Type":"NodeParagraph","Properties":{"id":"20240201214048-vu3trqf","updated":"20240201214048"},"Children":[{"Type":"NodeText","Data":"MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。因此，我们根据主库的 MySQL binlog 日志就能够将主库的数据同步到从库中。"}]},{"ID":"20240201214049-8so3rr5","Type":"NodeParagraph","Properties":{"id":"20240201214049-8so3rr5","updated":"20240201214049"},"Children":[{"Type":"NodeText","Data":"更具体和详细的过程是这个样子的（图片来自于："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.toptal.com/mysql/mysql-master-slave-replication-tutorial","TextMarkTextContent":"《MySQL Master-Slave Replication on the Same Machine》"},{"Type":"NodeText","Data":"）："}]},{"ID":"20240201214050-uycduzj","Type":"NodeParagraph","Properties":{"id":"20240201214050-uycduzj","updated":"20240201214050"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"MySQL主从复制","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/78816271d3ab52424bfd5ad3086c1a0f.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214051-00bvirv","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201214051-00bvirv","updated":"20240201214051"},"Children":[{"ID":"20240201214052-privpww","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20240201214052-privpww","updated":"20240201214052"},"Children":[{"ID":"20240201214053-vzppap9","Type":"NodeParagraph","Properties":{"id":"20240201214053-vzppap9","updated":"20240201214053"},"Children":[{"Type":"NodeText","Data":"主库将数据库中数据的变化写入到 binlog"}]}]},{"ID":"20240201214054-0ixa7vu","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20240201214054-0ixa7vu","updated":"20240201214054"},"Children":[{"ID":"20240201214055-nt4jy1w","Type":"NodeParagraph","Properties":{"id":"20240201214055-nt4jy1w","updated":"20240201214055"},"Children":[{"Type":"NodeText","Data":"从库连接主库"}]}]},{"ID":"20240201214056-y2myaam","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20240201214056-y2myaam","updated":"20240201214056"},"Children":[{"ID":"20240201214057-f17klbp","Type":"NodeParagraph","Properties":{"id":"20240201214057-f17klbp","updated":"20240201214057"},"Children":[{"Type":"NodeText","Data":"从库会创建一个 I/O 线程向主库请求更新的 binlog"}]}]},{"ID":"20240201214058-7tm2h5t","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20240201214058-7tm2h5t","updated":"20240201214058"},"Children":[{"ID":"20240201214059-rfkoz8k","Type":"NodeParagraph","Properties":{"id":"20240201214059-rfkoz8k","updated":"20240201214059"},"Children":[{"Type":"NodeText","Data":"主库会创建一个 binlog dump 线程来发送 binlog ，从库中的 I/O 线程负责接收"}]}]},{"ID":"20240201214060-97efrw7","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20240201214060-97efrw7","updated":"20240201214060"},"Children":[{"ID":"20240201214061-1ayk55c","Type":"NodeParagraph","Properties":{"id":"20240201214061-1ayk55c","updated":"20240201214061"},"Children":[{"Type":"NodeText","Data":"从库的 I/O 线程将接收的 binlog 写入到 relay log 中。"}]}]},{"ID":"20240201214062-oixgbt5","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20240201214062-oixgbt5","updated":"20240201214062"},"Children":[{"ID":"20240201214063-3fit3ri","Type":"NodeParagraph","Properties":{"id":"20240201214063-3fit3ri","updated":"20240201214063"},"Children":[{"Type":"NodeText","Data":"从库的 SQL 线程读取 relay log 同步数据本地（也就是再执行一遍 SQL ）。"}]}]}]},{"ID":"20240201214064-4c5xr04","Type":"NodeParagraph","Properties":{"id":"20240201214064-4c5xr04","updated":"20240201214064"},"Children":[{"Type":"NodeText","Data":"怎么样？看了我对主从复制这个过程的讲解，你应该搞明白了吧!"}]},{"ID":"20240201214065-z4ei1ia","Type":"NodeParagraph","Properties":{"id":"20240201214065-z4ei1ia","updated":"20240201214065"},"Children":[{"Type":"NodeText","Data":"你一般看到 binlog 就要想到主从复制。当然，除了主从复制之外，binlog 还能帮助我们实现数据恢复。"}]},{"ID":"20240201214066-1kx3sxx","Type":"NodeParagraph","Properties":{"id":"20240201214066-1kx3sxx","updated":"20240201214066"},"Children":[{"Type":"NodeText","Data":"🌈 拓展一下："}]},{"ID":"20240201214067-we83l70","Type":"NodeParagraph","Properties":{"id":"20240201214067-we83l70","updated":"20240201214067"},"Children":[{"Type":"NodeText","Data":"不知道大家有没有使用过阿里开源的一个叫做 canal 的工具。这个工具可以帮助我们实现 MySQL 和其他数据源比如 Elasticsearch 或者另外一台 MySQL 数据库之间的数据同步。很显然，这个工具的底层原理肯定也是依赖 binlog。canal 的原理就是模拟 MySQL 主从复制的过程，解析 binlog 将数据同步到其他的数据源。"}]},{"ID":"20240201214068-px3k5a4","Type":"NodeParagraph","Properties":{"id":"20240201214068-px3k5a4","updated":"20240201214068"},"Children":[{"Type":"NodeText","Data":"另外，像咱们常用的分布式缓存组件 Redis 也是通过主从复制实现的读写分离。"}]},{"ID":"20240201214069-a6hcngq","Type":"NodeParagraph","Properties":{"id":"20240201214069-a6hcngq","updated":"20240201214069"},"Children":[{"Type":"NodeText","Data":"🌕 简单总结一下："}]},{"ID":"20240201214070-yv2it9h","Type":"NodeParagraph","Properties":{"id":"20240201214070-yv2it9h","updated":"20240201214070"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"MySQL 主从复制是依赖于 binlog 。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。"}]},{"ID":"20240201214071-76563jh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214071-76563jh","updated":"20240201214071"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表"}]},{"ID":"20240201214072-k2x9ny3","Type":"NodeParagraph","Properties":{"id":"20240201214072-k2x9ny3","updated":"20240201214072"},"Children":[{"Type":"NodeText","Data":"读写分离主要应对的是数据库读并发，没有解决数据库存储问题。试想一下："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"如果 MySQL 一张表的数据量过大怎么办?"}]},{"ID":"20240201214073-f3i0lut","Type":"NodeParagraph","Properties":{"id":"20240201214073-f3i0lut","updated":"20240201214073"},"Children":[{"Type":"NodeText","Data":"换言之，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们该如何解决 MySQL 的存储压力呢？"}]},{"ID":"20240201214074-5o2ad6n","Type":"NodeParagraph","Properties":{"id":"20240201214074-5o2ad6n","updated":"20240201214074"},"Children":[{"Type":"NodeText","Data":"答案之一就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分库分表"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240201214075-muv3ahd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214075-muv3ahd","updated":"20240201214075"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何为分库？"}]},{"ID":"20240201214076-dgo0g6a","Type":"NodeParagraph","Properties":{"id":"20240201214076-dgo0g6a","updated":"20240201214076"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分库"},{"Type":"NodeText","Data":" 就是将数据库中的数据分散到不同的数据库上。"}]},{"ID":"20240201214077-xj1qmtp","Type":"NodeParagraph","Properties":{"id":"20240201214077-xj1qmtp","updated":"20240201214077"},"Children":[{"Type":"NodeText","Data":"下面这些操作都涉及到了分库："}]},{"ID":"20240201214078-pu0mela","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214078-pu0mela","updated":"20240201214078"},"Children":[{"ID":"20240201214079-p2hm779","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214079-p2hm779","updated":"20240201214079"},"Children":[{"ID":"20240201214080-2trmkrq","Type":"NodeParagraph","Properties":{"id":"20240201214080-2trmkrq","updated":"20240201214080"},"Children":[{"Type":"NodeText","Data":"你将数据库中的用户表和用户订单表分别放在两个不同的数据库。"}]}]},{"ID":"20240201214081-blu9l1t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214081-blu9l1t","updated":"20240201214081"},"Children":[{"ID":"20240201214082-hg02dfb","Type":"NodeParagraph","Properties":{"id":"20240201214082-hg02dfb","updated":"20240201214082"},"Children":[{"Type":"NodeText","Data":"由于用户表数据量太大，你对用户表进行了水平切分，然后将切分后的 2 张用户表分别放在两个不同的数据库。"}]}]}]},{"ID":"20240201214083-q2lflvb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214083-q2lflvb","updated":"20240201214083"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"何为分表？"}]},{"ID":"20240201214084-q7kjhyz","Type":"NodeParagraph","Properties":{"id":"20240201214084-q7kjhyz","updated":"20240201214084"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分表"},{"Type":"NodeText","Data":" 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。"}]},{"ID":"20240201214085-20nghtb","Type":"NodeParagraph","Properties":{"id":"20240201214085-20nghtb","updated":"20240201214085"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"何为垂直拆分？"}]},{"ID":"20240201214086-funjw4l","Type":"NodeParagraph","Properties":{"id":"20240201214086-funjw4l","updated":"20240201214086"},"Children":[{"Type":"NodeText","Data":"简单来说，垂直拆分是对数据表列的拆分，把一张列比较多的表拆分为多张表。"}]},{"ID":"20240201214087-9fmb5sc","Type":"NodeParagraph","Properties":{"id":"20240201214087-9fmb5sc","updated":"20240201214087"},"Children":[{"Type":"NodeText","Data":"举个例子：我们可以将用户信息表中的一些列单独抽出来作为一个表。"}]},{"ID":"20240201214088-qlepsk3","Type":"NodeParagraph","Properties":{"id":"20240201214088-qlepsk3","updated":"20240201214088"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"何为水平拆分？"}]},{"ID":"20240201214089-nflqo6a","Type":"NodeParagraph","Properties":{"id":"20240201214089-nflqo6a","updated":"20240201214089"},"Children":[{"Type":"NodeText","Data":"简单来说，水平拆分是对数据表行的拆分，把一张行比较多的表拆分为多张表。"}]},{"ID":"20240201214090-va5xjmr","Type":"NodeParagraph","Properties":{"id":"20240201214090-va5xjmr","updated":"20240201214090"},"Children":[{"Type":"NodeText","Data":"举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。"}]},{"ID":"20240201214091-n1zshn2","Type":"NodeParagraph","Properties":{"id":"20240201214091-n1zshn2","updated":"20240201214091"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://time.geekbang.org/column/intro/100006601?code=i00Nq3pHUcUj04ZWy70NCRl%2FD2Lfj8GVzcGzZ3Wf5Ug%3D","TextMarkTextContent":"《从零开始学架构》"},{"Type":"NodeText","Data":" 中的有一张图片对于垂直拆分和水平拆分的描述还挺直观的。"}]},{"ID":"20240201214092-obf5civ","Type":"NodeParagraph","Properties":{"id":"20240201214092-obf5civ","updated":"20240201214092"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/662ea3bda90061d0b40177e3a46fefc3.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214093-szxuy2i","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214093-szxuy2i","updated":"20240201214093"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么情况下需要分库分表？"}]},{"ID":"20240201214094-ooh1sdr","Type":"NodeParagraph","Properties":{"id":"20240201214094-ooh1sdr","updated":"20240201214094"},"Children":[{"Type":"NodeText","Data":"遇到下面几种场景可以考虑分库分表："}]},{"ID":"20240201214095-k03t8v9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214095-k03t8v9","updated":"20240201214095"},"Children":[{"ID":"20240201214096-jgyd03m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214096-jgyd03m","updated":"20240201214096"},"Children":[{"ID":"20240201214097-0dcp11t","Type":"NodeParagraph","Properties":{"id":"20240201214097-0dcp11t","updated":"20240201214097"},"Children":[{"Type":"NodeText","Data":"单表的数据达到千万级别以上，数据库读写速度比较缓慢（分表）。"}]}]},{"ID":"20240201214098-uzz1szy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214098-uzz1szy","updated":"20240201214098"},"Children":[{"ID":"20240201214099-08sun65","Type":"NodeParagraph","Properties":{"id":"20240201214099-08sun65","updated":"20240201214099"},"Children":[{"Type":"NodeText","Data":"数据库中的数据占用的空间越来越大，备份时间越来越长（分库）。"}]}]},{"ID":"20240201214100-vn0ji5p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214100-vn0ji5p","updated":"20240201214100"},"Children":[{"ID":"20240201214101-l7q4a30","Type":"NodeParagraph","Properties":{"id":"20240201214101-l7q4a30","updated":"20240201214101"},"Children":[{"Type":"NodeText","Data":"应用的并发量太大（分库）。"}]}]}]},{"ID":"20240201214102-01jigt5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214102-01jigt5","updated":"20240201214102"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表会带来什么问题呢？"}]},{"ID":"20240201214103-qytgbdd","Type":"NodeParagraph","Properties":{"id":"20240201214103-qytgbdd","updated":"20240201214103"},"Children":[{"Type":"NodeText","Data":"记住，你在公司做的任何技术决策，不光是要考虑这个技术能不能满足我们的要求，是否适合当前业务场景，还要重点考虑其带来的成本。"}]},{"ID":"20240201214104-uqjheoh","Type":"NodeParagraph","Properties":{"id":"20240201214104-uqjheoh","updated":"20240201214104"},"Children":[{"Type":"NodeText","Data":"引入分库分表之后，会给系统带来什么挑战呢？"}]},{"ID":"20240201214105-t1x7aii","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214105-t1x7aii","updated":"20240201214105"},"Children":[{"ID":"20240201214106-ujn32aj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214106-ujn32aj","updated":"20240201214106"},"Children":[{"ID":"20240201214107-8j6vd5k","Type":"NodeParagraph","Properties":{"id":"20240201214107-8j6vd5k","updated":"20240201214107"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"join 操作"},{"Type":"NodeText","Data":" ： 同一个数据库中的表分布在了不同的数据库中，导致无法使用 join 操作。这样就导致我们需要手动进行数据的封装，比如你在一个数据库中查询到一个数据之后，再根据这个数据去另外一个数据库中找对应的数据。"}]}]},{"ID":"20240201214108-vrmatz1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214108-vrmatz1","updated":"20240201214108"},"Children":[{"ID":"20240201214109-ztig26x","Type":"NodeParagraph","Properties":{"id":"20240201214109-ztig26x","updated":"20240201214109"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"事务问题"},{"Type":"NodeText","Data":" ：同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。"}]}]},{"ID":"20240201214110-pt8ppth","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214110-pt8ppth","updated":"20240201214110"},"Children":[{"ID":"20240201214111-bx0lzcn","Type":"NodeParagraph","Properties":{"id":"20240201214111-bx0lzcn","updated":"20240201214111"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分布式 id"},{"Type":"NodeText","Data":" ：分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。我们如何为不同的数据节点生成全局唯一主键呢？这个时候，我们就需要为我们的系统引入分布式 id 了。"}]}]},{"ID":"20240201214112-m1ui7n3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214112-m1ui7n3","updated":"20240201214112"},"Children":[{"ID":"20240201214113-3xzxtlu","Type":"NodeParagraph","Properties":{"id":"20240201214113-3xzxtlu","updated":"20240201214113"},"Children":[{"Type":"NodeText","Data":"......"}]}]}]},{"ID":"20240201214114-frxcia7","Type":"NodeParagraph","Properties":{"id":"20240201214114-frxcia7","updated":"20240201214114"},"Children":[{"Type":"NodeText","Data":"另外，引入分库分表之后，一般需要 DBA 的参与，同时还需要更多的数据库服务器，这些都属于成本。"}]},{"ID":"20240201214115-01vkbwz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214115-01vkbwz","updated":"20240201214115"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表有没有什么比较推荐的方案？"}]},{"ID":"20240201214116-0r9sbju","Type":"NodeParagraph","Properties":{"id":"20240201214116-0r9sbju","updated":"20240201214116"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 项目（包括 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar）是当当捐入 Apache 的，目前主要由京东数科的一些巨佬维护。"}]},{"ID":"20240201214117-nc2qrlc","Type":"NodeParagraph","Properties":{"id":"20240201214117-nc2qrlc","updated":"20240201214117"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img-blog.csdnimg.cn/img_convert/60649996bfc69acb1953063dddf0c2e6.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20240201214118-7080385","Type":"NodeParagraph","Properties":{"id":"20240201214118-7080385","updated":"20240201214118"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 绝对可以说是当前分库分表的首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。"}]},{"ID":"20240201214119-3bmovaf","Type":"NodeParagraph","Properties":{"id":"20240201214119-3bmovaf","updated":"20240201214119"},"Children":[{"Type":"NodeText","Data":"另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。"}]},{"ID":"20240201214120-wnjtamg","Type":"NodeParagraph","Properties":{"id":"20240201214120-wnjtamg","updated":"20240201214120"},"Children":[{"Type":"NodeText","Data":"艿艿之前写了一篇分库分表的实战文章，各位朋友可以看看："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/A2MYOFT7SP-7kGOon8qJaw","TextMarkTextContent":"《芋道 Spring Boot 分库分表入门》"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240201214121-cxwncn7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240201214121-cxwncn7","updated":"20240201214121"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"分库分表后，数据怎么迁移呢？"}]},{"ID":"20240201214122-tt7fmbv","Type":"NodeParagraph","Properties":{"id":"20240201214122-tt7fmbv","updated":"20240201214122"},"Children":[{"Type":"NodeText","Data":"分库分表之后，我们如何将老库（单库单表）的数据迁移到新库（分库分表后的数据库系统）呢？"}]},{"ID":"20240201214123-94szkz4","Type":"NodeParagraph","Properties":{"id":"20240201214123-94szkz4","updated":"20240201214123"},"Children":[{"Type":"NodeText","Data":"比较简单同时也是非常常用的方案就是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"停机迁移"},{"Type":"NodeText","Data":"，写个脚本老库的数据写到新库中。比如你在凌晨 2 点，系统使用的人数非常少的时候，挂一个公告说系统要维护升级预计 1 小时。然后，你写一个脚本将老库的数据都同步到新库中。"}]},{"ID":"20240201214124-1r1mwbj","Type":"NodeParagraph","Properties":{"id":"20240201214124-1r1mwbj","updated":"20240201214124"},"Children":[{"Type":"NodeText","Data":"如果你不想停机迁移数据的话，也可以考虑"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"双写方案"},{"Type":"NodeText","Data":"。双写方案是针对那种不能停机迁移的场景，实现起来要稍微麻烦一些。具体原理是这样的："}]},{"ID":"20240201214125-pfj1hxc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214125-pfj1hxc","updated":"20240201214125"},"Children":[{"ID":"20240201214126-3mk30wy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214126-3mk30wy","updated":"20240201214126"},"Children":[{"ID":"20240201214127-2yknhro","Type":"NodeParagraph","Properties":{"id":"20240201214127-2yknhro","updated":"20240201214127"},"Children":[{"Type":"NodeText","Data":"我们对老库的更新操作（增删改），同时也要写入新库（双写）。如果操作的数据不存在于新库的话，需要插入到新库中。 这样就能保证，咱们新库里的数据是最新的。"}]}]},{"ID":"20240201214128-lq6xz70","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214128-lq6xz70","updated":"20240201214128"},"Children":[{"ID":"20240201214129-gb7i9jc","Type":"NodeParagraph","Properties":{"id":"20240201214129-gb7i9jc","updated":"20240201214129"},"Children":[{"Type":"NodeText","Data":"在迁移过程，双写只会让被更新操作过的老库中的数据同步到新库，我们还需要自己写脚本将老库中的数据和新库的数据做比对。如果新库中没有，那咱们就把数据插入到新库。如果新库有，旧库没有，就把新库对应的数据删除（冗余数据清理）。"}]}]},{"ID":"20240201214130-lmva4rs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214130-lmva4rs","updated":"20240201214130"},"Children":[{"ID":"20240201214131-c0mkd8c","Type":"NodeParagraph","Properties":{"id":"20240201214131-c0mkd8c","updated":"20240201214131"},"Children":[{"Type":"NodeText","Data":"重复上一步的操作，直到老库和新库的数据一致为止。"}]}]}]},{"ID":"20240201214132-k0x6k3h","Type":"NodeParagraph","Properties":{"id":"20240201214132-k0x6k3h","updated":"20240201214132"},"Children":[{"Type":"NodeText","Data":"想要在项目中实施双写还是比较麻烦的，很容易会出现问题。我们可以借助上面提到的数据库同步工具 Canal 做增量数据迁移（还是依赖 binlog，开发和维护成本较低）。"}]},{"ID":"20240201214133-uc98tm0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240201214133-uc98tm0","updated":"20240201214133"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20240201214134-5kmn6w9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214134-5kmn6w9","updated":"20240201214134"},"Children":[{"ID":"20240201214135-szva5hk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214135-szva5hk","updated":"20240201214135"},"Children":[{"ID":"20240201214136-f7tnwly","Type":"NodeParagraph","Properties":{"id":"20240201214136-f7tnwly","updated":"20240201214136"},"Children":[{"Type":"NodeText","Data":"读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。 这样的话，就能够小幅提升写性能，大幅提升读性能。"}]}]},{"ID":"20240201214137-x3061po","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214137-x3061po","updated":"20240201214137"},"Children":[{"ID":"20240201214138-h91r8m2","Type":"NodeParagraph","Properties":{"id":"20240201214138-h91r8m2","updated":"20240201214138"},"Children":[{"Type":"NodeText","Data":"读写分离基于主从复制，MySQL 主从复制是依赖于 binlog 。"}]}]},{"ID":"20240201214139-49gmlre","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214139-49gmlre","updated":"20240201214139"},"Children":[{"ID":"20240201214140-12709t8","Type":"NodeParagraph","Properties":{"id":"20240201214140-12709t8","updated":"20240201214140"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分库"},{"Type":"NodeText","Data":" 就是将数据库中的数据分散到不同的数据库上。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分表"},{"Type":"NodeText","Data":" 就是对单表的数据进行拆分，可以是垂直拆分，也可以是水平拆分。"}]}]},{"ID":"20240201214141-nhgk175","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214141-nhgk175","updated":"20240201214141"},"Children":[{"ID":"20240201214142-k7xnxim","Type":"NodeParagraph","Properties":{"id":"20240201214142-k7xnxim","updated":"20240201214142"},"Children":[{"Type":"NodeText","Data":"引入分库分表之后，需要系统解决事务、分布式 id、无法 join 操作问题。"}]}]},{"ID":"20240201214143-mvjiqao","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20240201214143-mvjiqao","updated":"20240201214143"},"Children":[{"ID":"20240201214144-6b9p5vi","Type":"NodeParagraph","Properties":{"id":"20240201214144-6b9p5vi","updated":"20240201214144"},"Children":[{"Type":"NodeText","Data":"ShardingSphere 绝对可以说是当前分库分表的首选！ShardingSphere 的功能完善，除了支持读写分离和分库分表，还提供分布式事务、数据库治理等功能。另外，ShardingSphere 的生态体系完善，社区活跃，文档完善，更新和发布比较频繁。"}]}]}]}]}